[ {
  "variables" : "private AboutBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "    viewBinding = AboutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "protected View getRootView() {\r\n    viewBinding = AboutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "32",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AboutActivity.java",
  "task_id" : "OpenTracks/0",
  "prompt" : "import android.view.View\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private AboutBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "37",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AboutActivity.java",
  "task_id" : "OpenTracks/1",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    setVolumeControlStream(TTSManager.AUDIO_STREAM);\r\n    setContentView(getRootView());\r\n}",
  "context" : "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    // Set volume control stream for text to speech\r\n    setVolumeControlStream(TTSManager.AUDIO_STREAM);\r\n    setContentView(getRootView());\r\n}",
  "start_lineno" : "31",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AbstractActivity.java",
  "task_id" : "OpenTracks/2",
  "prompt" : "import android.os.Bundle\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    // Set volume control stream for text to speech\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "    getOnBackPressedDispatcher().onBackPressed();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onSupportNavigateUp() {\r\n    getOnBackPressedDispatcher().onBackPressed();\r\n    return true;\r\n}",
  "start_lineno" : "41",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AbstractActivity.java",
  "task_id" : "OpenTracks/3",
  "prompt" : "@Override\r\npublic boolean onSupportNavigateUp() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "    if (trackIds.length > trackIdList.size()) {\r\n        Toast.makeText(this, getString(R.string.track_delete_not_recording), Toast.LENGTH_LONG).show();\r\n    }\r\n    TrackDeleteService.enqueue(this, new TrackDeleteService.TrackDeleteResultReceiver(new Handler(), this), trackIdList);\r\n}",
  "context" : "@Override\r\npublic void onConfirmDeleteDone(Track.Id... trackIds) {\r\n    ArrayList<Track.Id> trackIdList = Arrays.stream(trackIds).filter(trackId -> !trackId.equals(getRecordingTrackId())).collect(Collectors.toCollection(ArrayList::new));\r\n    onDeleteConfirmed();\r\n    if (trackIds.length > trackIdList.size()) {\r\n        Toast.makeText(this, getString(R.string.track_delete_not_recording), Toast.LENGTH_LONG).show();\r\n    }\r\n    TrackDeleteService.enqueue(this, new TrackDeleteService.TrackDeleteResultReceiver(new Handler(), this), trackIdList);\r\n}",
  "start_lineno" : "46",
  "methodName" : "onConfirmDeleteDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AbstractTrackDeleteActivity.java",
  "task_id" : "OpenTracks/4",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.stream.Collectors\nimport java.util.Arrays\nimport java.util.ArrayList\n@Override\r\npublic void onConfirmDeleteDone(Track.Id... trackIds) {\r\n    ArrayList<Track.Id> trackIdList = Arrays.stream(trackIds).filter(trackId -> !trackId.equals(getRecordingTrackId())).collect(Collectors.toCollection(ArrayList::new));\r\n    onDeleteConfirmed();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "    bundle.putBoolean(KEY_CHART_VIEW_BY_DISTANCE_KEY, chartByDistance);\r\n    ChartFragment chartFragment = new ChartFragment();\r\n    chartFragment.setArguments(bundle);\r\n    return chartFragment;\r\n}",
  "context" : "public static ChartFragment newInstance(boolean chartByDistance) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putBoolean(KEY_CHART_VIEW_BY_DISTANCE_KEY, chartByDistance);\r\n    ChartFragment chartFragment = new ChartFragment();\r\n    chartFragment.setArguments(bundle);\r\n    return chartFragment;\r\n}",
  "start_lineno" : "55",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/5",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.os.Bundle\npublic static ChartFragment newInstance(boolean chartByDistance) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "        return;\r\n    }\r\n    viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n    viewBinding.chartView.invalidate();\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (!isResumed()) {\r\n        return;\r\n    }\r\n    viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n    viewBinding.chartView.invalidate();\r\n}",
  "start_lineno" : "109",
  "methodName" : "run",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/6",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void run() {\r\n    if (!isResumed()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "    super.onCreate(savedInstanceState);\r\n    chartByDistance = getArguments().getBoolean(KEY_CHART_VIEW_BY_DISTANCE_KEY, true);\r\n}",
  "context" : "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    chartByDistance = getArguments().getBoolean(KEY_CHART_VIEW_BY_DISTANCE_KEY, true);\r\n}",
  "start_lineno" : "121",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/7",
  "prompt" : "import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "133",
  "ground_truth" : "    viewBinding.chartView.setChartByDistance(chartByDistance);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = ChartBinding.inflate(inflater, container, false);\r\n    viewBinding.chartView.setChartByDistance(chartByDistance);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "128",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/8",
  "prompt" : "import de.dennisguse.opentracks.databinding.ChartBinding\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = ChartBinding.inflate(inflater, container, false);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "    resumeTrackDataHub();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    checkChartSettings();\r\n    getActivity().runOnUiThread(updateChart);\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    resumeTrackDataHub();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    checkChartSettings();\r\n    getActivity().runOnUiThread(updateChart);\r\n}",
  "start_lineno" : "135",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/9",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "151",
  "ground_truth" : "    pauseTrackDataHub();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    pauseTrackDataHub();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "146",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/10",
  "prompt" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "153",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/11",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "174",
  "ground_truth" : "            viewBinding.chartView.setReportSpeed(reportSpeed);\r\n            viewBinding.chartView.applyReportSpeed();\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onTrackUpdated(Track track) {\r\n    if (isResumed()) {\r\n        if (track == null) {\r\n            activityTypeLocalized = \"\";\r\n            return;\r\n        }\r\n        activityTypeLocalized = track.getActivityTypeLocalized();\r\n        boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n        if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n            viewBinding.chartView.setReportSpeed(reportSpeed);\r\n            viewBinding.chartView.applyReportSpeed();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "159",
  "methodName" : "onTrackUpdated",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/12",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onTrackUpdated(Track track) {\r\n    if (isResumed()) {\r\n        if (track == null) {\r\n            activityTypeLocalized = \"\";\r\n            return;\r\n        }\r\n        activityTypeLocalized = track.getActivityTypeLocalized();\r\n        boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n        if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "187",
  "ground_truth" : "                viewBinding.chartView.resetScroll();\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void clearTrackPoints() {\r\n    if (isResumed()) {\r\n        pendingPoints.clear();\r\n        viewBinding.chartView.reset();\r\n        runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                viewBinding.chartView.resetScroll();\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "176",
  "methodName" : "clearTrackPoints",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/13",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\npublic void clearTrackPoints() {\r\n    if (isResumed()) {\r\n        pendingPoints.clear();\r\n        viewBinding.chartView.reset();\r\n        runOnUiThread(() -> {\r\n            if (isResumed()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "194",
  "ground_truth" : "        pendingPoints.add(point);\r\n    }\r\n}",
  "context" : "public void onSampledInTrackPoint(@NonNull TrackPoint trackPoint, @NonNull TrackStatistics trackStatistics) {\r\n    if (isResumed()) {\r\n        ChartPoint point = ChartPoint.create(trackStatistics, trackPoint, trackPoint.getSpeed(), chartByDistance, viewBinding.chartView.getUnitSystem());\r\n        pendingPoints.add(point);\r\n    }\r\n}",
  "start_lineno" : "189",
  "methodName" : "onSampledInTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/14",
  "prompt" : "import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.View\npublic void onSampledInTrackPoint(@NonNull TrackPoint trackPoint, @NonNull TrackStatistics trackStatistics) {\r\n    if (isResumed()) {\r\n        ChartPoint point = ChartPoint.create(trackStatistics, trackPoint, trackPoint.getSpeed(), chartByDistance, viewBinding.chartView.getUnitSystem());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "204",
  "ground_truth" : "        viewBinding.chartView.addChartPoints(Collections.unmodifiableList(pendingPoints));\r\n        pendingPoints.clear();\r\n        runOnUiThread(updateChart);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onNewTrackPointsDone() {\r\n    if (isResumed()) {\r\n        //Avoid ConcurrentModificationException exception\r\n        viewBinding.chartView.addChartPoints(Collections.unmodifiableList(pendingPoints));\r\n        pendingPoints.clear();\r\n        runOnUiThread(updateChart);\r\n    }\r\n}",
  "start_lineno" : "196",
  "methodName" : "onNewTrackPointsDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/15",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onNewTrackPointsDone() {\r\n    if (isResumed()) {\r\n        //Avoid ConcurrentModificationException exception\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "211",
  "ground_truth" : "        viewBinding.chartView.clearMarker();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void clearMarkers() {\r\n    if (isResumed()) {\r\n        viewBinding.chartView.clearMarker();\r\n    }\r\n}",
  "start_lineno" : "206",
  "methodName" : "clearMarkers",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/16",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void clearMarkers() {\r\n    if (isResumed()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "218",
  "ground_truth" : "        viewBinding.chartView.addMarker(marker);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onNewMarker(@NonNull Marker marker) {\r\n    if (isResumed()) {\r\n        viewBinding.chartView.addMarker(marker);\r\n    }\r\n}",
  "start_lineno" : "213",
  "methodName" : "onNewMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/17",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onNewMarker(@NonNull Marker marker) {\r\n    if (isResumed()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "225",
  "ground_truth" : "        runOnUiThread(updateChart);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onNewMarkersDone() {\r\n    if (isResumed()) {\r\n        runOnUiThread(updateChart);\r\n    }\r\n}",
  "start_lineno" : "220",
  "methodName" : "onNewMarkersDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/18",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onNewMarkersDone() {\r\n    if (isResumed()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "235",
  "ground_truth" : "        viewBinding.chartView.postInvalidate();\r\n    }\r\n}",
  "context" : "/**\r\n * Checks the chart settings.\r\n */\r\nprivate void checkChartSettings() {\r\n    boolean needUpdate = viewBinding.chartView.applyReportSpeed();\r\n    if (needUpdate) {\r\n        viewBinding.chartView.postInvalidate();\r\n    }\r\n}",
  "start_lineno" : "230",
  "methodName" : "checkChartSettings",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/19",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n/**\r\n * Checks the chart settings.\r\n */\r\nprivate void checkChartSettings() {\r\n    boolean needUpdate = viewBinding.chartView.applyReportSpeed();\r\n    if (needUpdate) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "244",
  "ground_truth" : "    trackDataHub = ((TrackDataHubInterface) getActivity()).getTrackDataHub();\r\n    trackDataHub.registerTrackDataListener(this);\r\n}",
  "context" : "/**\r\n * Resumes the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void resumeTrackDataHub() {\r\n    trackDataHub = ((TrackDataHubInterface) getActivity()).getTrackDataHub();\r\n    trackDataHub.registerTrackDataListener(this);\r\n}",
  "start_lineno" : "241",
  "methodName" : "resumeTrackDataHub",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/20",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackDataHub\nimport de.dennisguse.opentracks.R\n/**\r\n * Resumes the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void resumeTrackDataHub() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "253",
  "ground_truth" : "    trackDataHub.unregisterTrackDataListener(this);\r\n    trackDataHub = null;\r\n}",
  "context" : "/**\r\n * Pauses the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void pauseTrackDataHub() {\r\n    trackDataHub.unregisterTrackDataListener(this);\r\n    trackDataHub = null;\r\n}",
  "start_lineno" : "250",
  "methodName" : "pauseTrackDataHub",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/21",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackDataHub\n/**\r\n * Pauses the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void pauseTrackDataHub() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KEY_CHART_VIEW_BY_DISTANCE_KEY = \"chartViewByDistance\";\nprivate TrackDataHub trackDataHub;\nprivate String activityTypeLocalized = \"\";\nprivate ChartBinding viewBinding;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n            UnitSystem unitSystem = PreferencesUtils.getUnitSystem();\r\n            if (unitSystem != viewBinding.chartView.getUnitSystem()) {\r\n                viewBinding.chartView.setUnitSystem(unitSystem);\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n            boolean reportSpeed = PreferencesUtils.isReportSpeed(activityTypeLocalized);\r\n            if (reportSpeed != viewBinding.chartView.getReportSpeed()) {\r\n                viewBinding.chartView.setReportSpeed(reportSpeed);\r\n                viewBinding.chartView.applyReportSpeed();\r\n                runOnUiThread(() -> {\r\n                    if (isResumed()) {\r\n                        viewBinding.chartView.requestLayout();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\n/**\r\n * A runnable that will setFrequency the orange pointer as appropriate and redraw.\r\n */\r\nprivate final Runnable updateChart = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (!isResumed()) {\r\n            return;\r\n        }\r\n        viewBinding.chartView.setShowPointer(isSelectedTrackRecording());\r\n        viewBinding.chartView.invalidate();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "275",
  "ground_truth" : "        fragmentActivity.runOnUiThread(runnable);\r\n    }\r\n}",
  "context" : "/**\r\n * Runs a runnable on the UI thread if possible.\r\n *\r\n * @param runnable the runnable\r\n */\r\nprivate void runOnUiThread(Runnable runnable) {\r\n    Activity fragmentActivity = getActivity();\r\n    if (fragmentActivity != null) {\r\n        fragmentActivity.runOnUiThread(runnable);\r\n    }\r\n}",
  "start_lineno" : "270",
  "methodName" : "runOnUiThread",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java",
  "task_id" : "OpenTracks/22",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.app.Activity\n/**\r\n * Runs a runnable on the UI thread if possible.\r\n *\r\n * @param runnable the runnable\r\n */\r\nprivate void runOnUiThread(Runnable runnable) {\r\n    Activity fragmentActivity = getActivity();\r\n    if (fragmentActivity != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "        extremityMonitor.update(extractDataFromChartPoint(chartPoint));\r\n    }\r\n}",
  "context" : "/**\r\n * Updates the series with a new {@link ChartPoint}.\r\n */\r\nvoid update(ChartPoint chartPoint) {\r\n    if (isChartPointValid(chartPoint)) {\r\n        extremityMonitor.update(extractDataFromChartPoint(chartPoint));\r\n    }\r\n}",
  "start_lineno" : "121",
  "methodName" : "update",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/23",
  "prompt" : "/**\r\n * Updates the series with a new {@link ChartPoint}.\r\n */\r\nvoid update(ChartPoint chartPoint) {\r\n    if (isChartPointValid(chartPoint)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "    }\r\n    canvas.drawPath(path, strokePaint);\r\n}",
  "context" : "void drawPath(Canvas canvas, boolean shouldFillPathArea) {\r\n    if (shouldFillPathArea) {\r\n        canvas.drawPath(path, fillPaint);\r\n    }\r\n    canvas.drawPath(path, strokePaint);\r\n}",
  "start_lineno" : "139",
  "methodName" : "drawPath",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/24",
  "prompt" : "void drawPath(Canvas canvas, boolean shouldFillPathArea) {\r\n    if (shouldFillPathArea) {\r\n        canvas.drawPath(path, fillPaint);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "    max = Math.min(max, absoluteMax);\r\n    interval = getInterval(min, max);\r\n    minMarkerValue = getMinMarkerValue(min, interval);\r\n    maxMarkerValue = minMarkerValue + interval * ChartView.Y_AXIS_INTERVALS;\r\n}",
  "context" : "/**\r\n * Updates the y axis dimension.\r\n */\r\nvoid updateDimension() {\r\n    double min = hasData() ? extremityMonitor.getMin() : 0.0;\r\n    double max = hasData() ? extremityMonitor.getMax() : 1.0;\r\n    min = Math.max(min, absoluteMin);\r\n    max = Math.min(max, absoluteMax);\r\n    interval = getInterval(min, max);\r\n    minMarkerValue = getMinMarkerValue(min, interval);\r\n    maxMarkerValue = minMarkerValue + interval * ChartView.Y_AXIS_INTERVALS;\r\n}",
  "start_lineno" : "149",
  "methodName" : "updateDimension",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/25",
  "prompt" : "/**\r\n * Updates the y axis dimension.\r\n */\r\nvoid updateDimension() {\r\n    double min = hasData() ? extremityMonitor.getMin() : 0.0;\r\n    double max = hasData() ? extremityMonitor.getMax() : 1.0;\r\n    min = Math.max(min, absoluteMin);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "        }\r\n    }\r\n    // Return the largest interval\r\n    return intervalValues[intervalValues.length - 1];\r\n}",
  "context" : "/**\r\n * Gets the interval value.\r\n *\r\n * @param min the min value\r\n * @param max the max value\r\n */\r\nprivate int getInterval(double min, double max) {\r\n    for (int intervalValue : intervalValues) {\r\n        int minValue = getMinMarkerValue(min, intervalValue);\r\n        double targetInterval = (max - minValue) / ChartView.Y_AXIS_INTERVALS;\r\n        if (intervalValue >= targetInterval) {\r\n            return intervalValue;\r\n        }\r\n    }\r\n    // Return the largest interval\r\n    return intervalValues[intervalValues.length - 1];\r\n}",
  "start_lineno" : "165",
  "methodName" : "getInterval",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/26",
  "prompt" : "/**\r\n * Gets the interval value.\r\n *\r\n * @param min the min value\r\n * @param max the max value\r\n */\r\nprivate int getInterval(double min, double max) {\r\n    for (int intervalValue : intervalValues) {\r\n        int minValue = getMinMarkerValue(min, intervalValue);\r\n        double targetInterval = (max - minValue) / ChartView.Y_AXIS_INTERVALS;\r\n        if (intervalValue >= targetInterval) {\r\n            return intervalValue;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "191",
  "ground_truth" : "    if (value > min) {\r\n        return value - intervalValue;\r\n    }\r\n    return value;\r\n}",
  "context" : "/**\r\n * Gets the min marker value.\r\n *\r\n * @param min           the min series value\r\n * @param intervalValue the interval value\r\n */\r\nprivate int getMinMarkerValue(double min, int intervalValue) {\r\n    // Round down to the nearest intervalValue\r\n    int value = ((int) (min / intervalValue)) * intervalValue;\r\n    // value > min if min is negative\r\n    if (value > min) {\r\n        return value - intervalValue;\r\n    }\r\n    return value;\r\n}",
  "start_lineno" : "183",
  "methodName" : "getMinMarkerValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/27",
  "prompt" : "/**\r\n * Gets the min marker value.\r\n *\r\n * @param min           the min series value\r\n * @param intervalValue the interval value\r\n */\r\nprivate int getMinMarkerValue(double min, int intervalValue) {\r\n    // Round down to the nearest intervalValue\r\n    int value = ((int) (min / intervalValue)) * intervalValue;\r\n    // value > min if min is negative\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "220",
  "ground_truth" : "            imperialTitleId;\r\n        case NAUTICAL_IMPERIAL ->\r\n            nauticalTitleId;\r\n    };\r\n}",
  "context" : "int getTitleId(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            metricTitleId;\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r\n            imperialTitleId;\r\n        case NAUTICAL_IMPERIAL ->\r\n            nauticalTitleId;\r\n    };\r\n}",
  "start_lineno" : "214",
  "methodName" : "getTitleId",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/28",
  "prompt" : "int getTitleId(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            metricTitleId;\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final float STROKE_WIDTH = 2f;\nprivate final int absoluteMin;\nprivate final int absoluteMax;\nprivate final int[] intervalValues;\nprivate final int metricTitleId;\nprivate final int imperialTitleId;\nprivate final int nauticalTitleId;\nprivate final Paint fillPaint;\nprivate final Paint strokePaint;\nprivate final Paint titlePaint;\nprivate final Paint markerPaint;\nprivate final ExtremityMonitor extremityMonitor = new ExtremityMonitor();\nprivate final NumberFormat numberFormat = NumberFormat.getIntegerInstance();\nprivate final Path path = new Path();\nprivate int interval = 1;\nprivate int minMarkerValue = 0;\nprivate int maxMarkerValue = interval * ChartView.Y_AXIS_INTERVALS;\nprivate boolean enabled = true;",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "    String maxMarker = numberFormat.format(getMaxMarkerValue());\r\n    return minMarker.length() >= maxMarker.length() ? minMarker : maxMarker;\r\n}",
  "context" : "String getLargestMarker() {\r\n    String minMarker = numberFormat.format(getMinMarkerValue());\r\n    String maxMarker = numberFormat.format(getMaxMarkerValue());\r\n    return minMarker.length() >= maxMarker.length() ? minMarker : maxMarker;\r\n}",
  "start_lineno" : "230",
  "methodName" : "getLargestMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java",
  "task_id" : "OpenTracks/29",
  "prompt" : "String getLargestMarker() {\r\n    String minMarker = numberFormat.format(getMinMarkerValue());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onDown(MotionEvent e) {\r\n    if (!scroller.isFinished()) {\r\n        scroller.abortAnimation();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "130",
  "methodName" : "onDown",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/30",
  "prompt" : "@Override\r\npublic boolean onDown(MotionEvent e) {\r\n    if (!scroller.isFinished()) {\r\n        scroller.abortAnimation();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "147",
  "ground_truth" : "            scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n        }\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n    if (Math.abs(distanceX) > 0) {\r\n        int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n        if (availableToScroll > 0) {\r\n            scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n        }\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "138",
  "methodName" : "onScroll",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/31",
  "prompt" : "@Override\r\npublic boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n    if (Math.abs(distanceX) > 0) {\r\n        int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n        if (availableToScroll > 0) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "153",
  "ground_truth" : "    fling((int) -velocityX);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n    fling((int) -velocityX);\r\n    return true;\r\n}",
  "start_lineno" : "149",
  "methodName" : "onFling",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/32",
  "prompt" : "@Override\r\npublic boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "        zoomOut();\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "context" : "@Override\r\npublic boolean onScale(ScaleGestureDetector detector) {\r\n    float scaleFactor = detector.getScaleFactor();\r\n    if (scaleFactor >= 1.1f) {\r\n        zoomIn();\r\n        return true;\r\n    } else if (scaleFactor <= 0.9) {\r\n        zoomOut();\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "184",
  "methodName" : "onScale",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/33",
  "prompt" : "@Override\r\npublic boolean onScale(ScaleGestureDetector detector) {\r\n    float scaleFactor = detector.getScaleFactor();\r\n    if (scaleFactor >= 1.1f) {\r\n        zoomIn();\r\n        return true;\r\n    } else if (scaleFactor <= 0.9) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "422",
  "ground_truth" : "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "public boolean applyReportSpeed() {\r\n    if (reportSpeed) {\r\n        if (!speedSeries.isEnabled()) {\r\n            speedSeries.setEnabled(true);\r\n            paceSeries.setEnabled(false);\r\n            return true;\r\n        }\r\n    } else {\r\n        if (!paceSeries.isEnabled()) {\r\n            speedSeries.setEnabled(false);\r\n            paceSeries.setEnabled(true);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "406",
  "methodName" : "applyReportSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/34",
  "prompt" : "public boolean applyReportSpeed() {\r\n    if (reportSpeed) {\r\n        if (!speedSeries.isEnabled()) {\r\n            speedSeries.setEnabled(true);\r\n            paceSeries.setEnabled(false);\r\n            return true;\r\n        }\r\n    } else {\r\n        if (!paceSeries.isEnabled()) {\r\n            speedSeries.setEnabled(false);\r\n            paceSeries.setEnabled(true);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "440",
  "ground_truth" : "        }\r\n        updateDimensions();\r\n        updateSeries();\r\n    }\r\n}",
  "context" : "public void addChartPoints(List<ChartPoint> dataPoints) {\r\n    synchronized (chartPoints) {\r\n        chartPoints.addAll(dataPoints);\r\n        for (ChartPoint dataPoint : dataPoints) {\r\n            xExtremityMonitor.update(dataPoint.timeOrDistance());\r\n            for (ChartValueSeries i : seriesList) {\r\n                i.update(dataPoint);\r\n            }\r\n        }\r\n        updateDimensions();\r\n        updateSeries();\r\n    }\r\n}",
  "start_lineno" : "428",
  "methodName" : "addChartPoints",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/35",
  "prompt" : "public void addChartPoints(List<ChartPoint> dataPoints) {\r\n    synchronized (chartPoints) {\r\n        chartPoints.addAll(dataPoints);\r\n        for (ChartPoint dataPoint : dataPoints) {\r\n            xExtremityMonitor.update(dataPoint.timeOrDistance());\r\n            for (ChartValueSeries i : seriesList) {\r\n                i.update(dataPoint);\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "452",
  "ground_truth" : "        xExtremityMonitor.reset();\r\n        zoomLevel = 1;\r\n        updateDimensions();\r\n    }\r\n}",
  "context" : "/**\r\n * Clears all data.\r\n */\r\npublic void reset() {\r\n    synchronized (chartPoints) {\r\n        chartPoints.clear();\r\n        xExtremityMonitor.reset();\r\n        zoomLevel = 1;\r\n        updateDimensions();\r\n    }\r\n}",
  "start_lineno" : "445",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/36",
  "prompt" : "/**\r\n * Clears all data.\r\n */\r\npublic void reset() {\r\n    synchronized (chartPoints) {\r\n        chartPoints.clear();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "466",
  "ground_truth" : "        markers.add(marker);\r\n    }\r\n}",
  "context" : "public void addMarker(Marker marker) {\r\n    synchronized (markers) {\r\n        markers.add(marker);\r\n    }\r\n}",
  "start_lineno" : "462",
  "methodName" : "addMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/37",
  "prompt" : "public void addMarker(Marker marker) {\r\n    synchronized (markers) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "472",
  "ground_truth" : "        markers.clear();\r\n    }\r\n}",
  "context" : "public void clearMarker() {\r\n    synchronized (markers) {\r\n        markers.clear();\r\n    }\r\n}",
  "start_lineno" : "468",
  "methodName" : "clearMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/38",
  "prompt" : "public void clearMarker() {\r\n    synchronized (markers) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "488",
  "ground_truth" : "        zoomLevel++;\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}",
  "context" : "private void zoomIn() {\r\n    if (canZoomIn()) {\r\n        zoomLevel++;\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}",
  "start_lineno" : "482",
  "methodName" : "zoomIn",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/39",
  "prompt" : "private void zoomIn() {\r\n    if (canZoomIn()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "503",
  "ground_truth" : "        }\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}",
  "context" : "private void zoomOut() {\r\n    if (canZoomOut()) {\r\n        zoomLevel--;\r\n        scroller.abortAnimation();\r\n        int scrollX = getScrollX();\r\n        int maxWidth = effectiveWidth * (zoomLevel - 1);\r\n        if (scrollX > maxWidth) {\r\n            scrollX = maxWidth;\r\n            scrollTo(scrollX, 0);\r\n        }\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}",
  "start_lineno" : "490",
  "methodName" : "zoomOut",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/40",
  "prompt" : "private void zoomOut() {\r\n    if (canZoomOut()) {\r\n        zoomLevel--;\r\n        scroller.abortAnimation();\r\n        int scrollX = getScrollX();\r\n        int maxWidth = effectiveWidth * (zoomLevel - 1);\r\n        if (scrollX > maxWidth) {\r\n            scrollX = maxWidth;\r\n            scrollTo(scrollX, 0);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "514",
  "ground_truth" : "    scroller.fling(getScrollX(), 0, velocityX, 0, 0, maxWidth, 0, 0);\r\n    invalidate();\r\n}",
  "context" : "/**\r\n * Initiates flinging.\r\n *\r\n * @param velocityX velocity of fling in pixels per second\r\n */\r\nprivate void fling(int velocityX) {\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r\n    scroller.fling(getScrollX(), 0, velocityX, 0, 0, maxWidth, 0, 0);\r\n    invalidate();\r\n}",
  "start_lineno" : "510",
  "methodName" : "fling",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/41",
  "prompt" : "/**\r\n * Initiates flinging.\r\n *\r\n * @param velocityX velocity of fling in pixels per second\r\n */\r\nprivate void fling(int velocityX) {\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "526",
  "ground_truth" : "        parent.requestDisallowInterceptTouchEvent(disallow);\r\n    }\r\n}",
  "context" : "/**\r\n * Handle parent's view disallow touch event.\r\n *\r\n * @param disallow Does disallow parent touch event?\r\n */\r\nprivate void requestDisallowInterceptTouchEventInParent(boolean disallow) {\r\n    ViewParent parent = getParent();\r\n    if (parent != null) {\r\n        parent.requestDisallowInterceptTouchEvent(disallow);\r\n    }\r\n}",
  "start_lineno" : "521",
  "methodName" : "requestDisallowInterceptTouchEventInParent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/42",
  "prompt" : "/**\r\n * Handle parent's view disallow touch event.\r\n *\r\n * @param disallow Does disallow parent touch event?\r\n */\r\nprivate void requestDisallowInterceptTouchEventInParent(boolean disallow) {\r\n    ViewParent parent = getParent();\r\n    if (parent != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "545",
  "ground_truth" : "    if (scrollX >= maxWidth) {\r\n        scrollX = maxWidth;\r\n    }\r\n    scrollTo(scrollX, 0);\r\n}",
  "context" : "/**\r\n * Scrolls the view horizontally by a given amount.\r\n *\r\n * @param deltaX the number of pixels to scroll\r\n */\r\nprivate void scrollBy(int deltaX) {\r\n    int scrollX = getScrollX() + deltaX;\r\n    if (scrollX <= 0) {\r\n        scrollX = 0;\r\n    }\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r\n    if (scrollX >= maxWidth) {\r\n        scrollX = maxWidth;\r\n    }\r\n    scrollTo(scrollX, 0);\r\n}",
  "start_lineno" : "533",
  "methodName" : "scrollBy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/43",
  "prompt" : "/**\r\n * Scrolls the view horizontally by a given amount.\r\n *\r\n * @param deltaX the number of pixels to scroll\r\n */\r\nprivate void scrollBy(int deltaX) {\r\n    int scrollX = getScrollX() + deltaX;\r\n    if (scrollX <= 0) {\r\n        scrollX = 0;\r\n    }\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "562",
  "ground_truth" : "            onScrollChanged(x, 0, oldX, 0);\r\n            postInvalidate();\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Called by the parent to indicate that the mScrollX/Y values need to be\r\n * updated. Triggers a redraw during flinging.\r\n */\r\n@Override\r\npublic void computeScroll() {\r\n    if (scroller.computeScrollOffset()) {\r\n        int oldX = getScrollX();\r\n        int x = scroller.getCurrX();\r\n        scrollTo(x, 0);\r\n        if (oldX != x) {\r\n            onScrollChanged(x, 0, oldX, 0);\r\n            postInvalidate();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "551",
  "methodName" : "computeScroll",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/44",
  "prompt" : "/**\r\n * Called by the parent to indicate that the mScrollX/Y values need to be\r\n * updated. Triggers a redraw during flinging.\r\n */\r\n@Override\r\npublic void computeScroll() {\r\n    if (scroller.computeScrollOffset()) {\r\n        int oldX = getScrollX();\r\n        int x = scroller.getCurrX();\r\n        scrollTo(x, 0);\r\n        if (oldX != x) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "573",
  "ground_truth" : "    boolean isScrollTab = detectorScrollFlingTab.onTouchEvent(event);\r\n    // ChartView handles zoom gestures (more than one pointer) and all gestures when zoomed itself\r\n    requestDisallowInterceptTouchEventInParent(event.getPointerCount() != 1 || zoomLevel != MIN_ZOOM_LEVEL);\r\n    return isZoom || isScrollTab;\r\n}",
  "context" : "@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    boolean isZoom = detectorZoom.onTouchEvent(event);\r\n    boolean isScrollTab = detectorScrollFlingTab.onTouchEvent(event);\r\n    // ChartView handles zoom gestures (more than one pointer) and all gestures when zoomed itself\r\n    requestDisallowInterceptTouchEventInParent(event.getPointerCount() != 1 || zoomLevel != MIN_ZOOM_LEVEL);\r\n    return isZoom || isScrollTab;\r\n}",
  "start_lineno" : "564",
  "methodName" : "onTouchEvent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/45",
  "prompt" : "@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    boolean isZoom = detectorZoom.onTouchEvent(event);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "579",
  "ground_truth" : "    updateEffectiveDimensionsIfChanged(View.MeasureSpec.getSize(widthMeasureSpec), View.MeasureSpec.getSize(heightMeasureSpec));\r\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n}",
  "context" : "@Override\r\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n    updateEffectiveDimensionsIfChanged(View.MeasureSpec.getSize(widthMeasureSpec), View.MeasureSpec.getSize(heightMeasureSpec));\r\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n}",
  "start_lineno" : "575",
  "methodName" : "onMeasure",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/46",
  "prompt" : "@Override\r\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "607",
  "ground_truth" : "        if (showPointer) {\r\n            drawPointer(canvas);\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onDraw(Canvas canvas) {\r\n    synchronized (chartPoints) {\r\n        canvas.save();\r\n        canvas.drawColor(backgroundColor);\r\n        canvas.save();\r\n        clipToGraphArea(canvas);\r\n        drawDataSeries(canvas);\r\n        drawMarker(canvas);\r\n        drawGrid(canvas);\r\n        canvas.restore();\r\n        drawSeriesTitles(canvas);\r\n        drawXAxis(canvas);\r\n        drawYAxis(canvas);\r\n        canvas.restore();\r\n        if (showPointer) {\r\n            drawPointer(canvas);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "581",
  "methodName" : "onDraw",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/47",
  "prompt" : "@Override\r\nprotected void onDraw(Canvas canvas) {\r\n    synchronized (chartPoints) {\r\n        canvas.save();\r\n        canvas.drawColor(backgroundColor);\r\n        canvas.save();\r\n        clipToGraphArea(canvas);\r\n        drawDataSeries(canvas);\r\n        drawMarker(canvas);\r\n        drawGrid(canvas);\r\n        canvas.restore();\r\n        drawSeriesTitles(canvas);\r\n        drawXAxis(canvas);\r\n        drawYAxis(canvas);\r\n        canvas.restore();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "618",
  "ground_truth" : "    int y = topBorder;\r\n    canvas.clipRect(x, y, x + effectiveWidth, y + effectiveHeight);\r\n}",
  "context" : "/**\r\n * Clips a canvas to the graph area.\r\n *\r\n * @param canvas the canvas\r\n */\r\nprivate void clipToGraphArea(Canvas canvas) {\r\n    int x = getScrollX() + leftBorder;\r\n    int y = topBorder;\r\n    canvas.clipRect(x, y, x + effectiveWidth, y + effectiveHeight);\r\n}",
  "start_lineno" : "614",
  "methodName" : "clipToGraphArea",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/48",
  "prompt" : "/**\r\n * Clips a canvas to the graph area.\r\n *\r\n * @param canvas the canvas\r\n */\r\nprivate void clipToGraphArea(Canvas canvas) {\r\n    int x = getScrollX() + leftBorder;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "631",
  "ground_truth" : "        if (chartValueSeries.isEnabled() && chartValueSeries.hasData()) {\r\n            chartValueSeries.drawPath(canvas, titleDimensions.titlePositions.size() < 3);\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Draws the data series.\r\n *\r\n * @param canvas the canvas\r\n */\r\nprivate void drawDataSeries(Canvas canvas) {\r\n    for (ChartValueSeries chartValueSeries : seriesList) {\r\n        if (chartValueSeries.isEnabled() && chartValueSeries.hasData()) {\r\n            chartValueSeries.drawPath(canvas, titleDimensions.titlePositions.size() < 3);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "625",
  "methodName" : "drawDataSeries",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/49",
  "prompt" : "/**\r\n * Draws the data series.\r\n *\r\n * @param canvas the canvas\r\n */\r\nprivate void drawDataSeries(Canvas canvas) {\r\n    for (ChartValueSeries chartValueSeries : seriesList) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "767",
  "ground_truth" : "        };\r\n    } else {\r\n        return context.getString(R.string.description_time);\r\n    }\r\n}",
  "context" : "private String getXAxisLabel() {\r\n    Context context = getContext();\r\n    if (chartByDistance) {\r\n        return switch(unitSystem) {\r\n            case METRIC ->\r\n                context.getString(R.string.unit_kilometer);\r\n            case IMPERIAL_FEET, IMPERIAL_METER ->\r\n                context.getString(R.string.unit_mile);\r\n            case NAUTICAL_IMPERIAL ->\r\n                context.getString(R.string.unit_nautical_mile);\r\n        };\r\n    } else {\r\n        return context.getString(R.string.description_time);\r\n    }\r\n}",
  "start_lineno" : "756",
  "methodName" : "getXAxisLabel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/50",
  "prompt" : "private String getXAxisLabel() {\r\n    Context context = getContext();\r\n    if (chartByDistance) {\r\n        return switch(unitSystem) {\r\n            case METRIC ->\r\n                context.getString(R.string.unit_kilometer);\r\n            case IMPERIAL_FEET, IMPERIAL_METER ->\r\n                context.getString(R.string.unit_mile);\r\n            case NAUTICAL_IMPERIAL ->\r\n                context.getString(R.string.unit_nautical_mile);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "785",
  "ground_truth" : "    int markerEndXPos = markerXPos + rect.width() / 2;\r\n    if (markerEndXPos > getScrollX() + leftBorder + effectiveWidth - xRightSpace)\r\n        return;\r\n    canvas.drawText(marker, markerXPos, topBorder + effectiveHeight + yBottomSpace + rect.height(), xAxisMarkerPaint);\r\n}",
  "context" : "/**\r\n * Draws a x axis marker.\r\n *\r\n * @param canvas       canvas\r\n * @param value        value\r\n * @param numberFormat the number format\r\n * @param xRightSpace  the space taken up by the x axis label\r\n * @param yBottomSpace the space between x axis and marker\r\n */\r\nprivate void drawXAxisMarker(Canvas canvas, double value, NumberFormat numberFormat, int xRightSpace, int yBottomSpace) {\r\n    String marker = chartByDistance ? numberFormat.format(value) : StringUtils.formatElapsedTime((Duration.ofMillis((long) value)));\r\n    Rect rect = getRect(xAxisMarkerPaint, marker);\r\n    int markerXPos = getX(value);\r\n    int markerEndXPos = markerXPos + rect.width() / 2;\r\n    if (markerEndXPos > getScrollX() + leftBorder + effectiveWidth - xRightSpace)\r\n        return;\r\n    canvas.drawText(marker, markerXPos, topBorder + effectiveHeight + yBottomSpace + rect.height(), xAxisMarkerPaint);\r\n}",
  "start_lineno" : "778",
  "methodName" : "drawXAxisMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/51",
  "prompt" : "/**\r\n * Draws a x axis marker.\r\n *\r\n * @param canvas       canvas\r\n * @param value        value\r\n * @param numberFormat the number format\r\n * @param xRightSpace  the space taken up by the x axis label\r\n * @param yBottomSpace the space between x axis and marker\r\n */\r\nprivate void drawXAxisMarker(Canvas canvas, double value, NumberFormat numberFormat, int xRightSpace, int yBottomSpace) {\r\n    String marker = chartByDistance ? numberFormat.format(value) : StringUtils.formatElapsedTime((Duration.ofMillis((long) value)));\r\n    Rect rect = getRect(xAxisMarkerPaint, marker);\r\n    int markerXPos = getX(value);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "799",
  "ground_truth" : "    } else {\r\n        interval = (interval / 10) * 10;\r\n    }\r\n    return interval;\r\n}",
  "context" : "private double getXAxisInterval() {\r\n    double interval = maxX / zoomLevel / TARGET_X_AXIS_INTERVALS;\r\n    if (interval < 1) {\r\n        interval = .5;\r\n    } else if (interval < 5) {\r\n        interval = 2;\r\n    } else if (interval < 10) {\r\n        interval = 5;\r\n    } else {\r\n        interval = (interval / 10) * 10;\r\n    }\r\n    return interval;\r\n}",
  "start_lineno" : "787",
  "methodName" : "getXAxisInterval",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/52",
  "prompt" : "private double getXAxisInterval() {\r\n    double interval = maxX / zoomLevel / TARGET_X_AXIS_INTERVALS;\r\n    if (interval < 1) {\r\n        interval = .5;\r\n    } else if (interval < 5) {\r\n        interval = 2;\r\n    } else if (interval < 10) {\r\n        interval = 5;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "812",
  "ground_truth" : "    if (markers.size() < 2) {\r\n        markers.add(maxX);\r\n    }\r\n    return markers;\r\n}",
  "context" : "private List<Double> getXAxisMarkerPositions(double interval) {\r\n    List<Double> markers = new ArrayList<>();\r\n    markers.add(0d);\r\n    for (int i = 1; i * interval < maxX; i++) {\r\n        markers.add(i * interval);\r\n    }\r\n    if (markers.size() < 2) {\r\n        markers.add(maxX);\r\n    }\r\n    return markers;\r\n}",
  "start_lineno" : "801",
  "methodName" : "getXAxisMarkerPositions",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/53",
  "prompt" : "private List<Double> getXAxisMarkerPositions(double interval) {\r\n    List<Double> markers = new ArrayList<>();\r\n    markers.add(0d);\r\n    for (int i = 1; i * interval < maxX; i++) {\r\n        markers.add(i * interval);\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "857",
  "ground_truth" : "    for (int i = 0; i <= Y_AXIS_INTERVALS; i++) {\r\n        maxMarkerWidth = Math.max(maxMarkerWidth, drawYAxisMarker(chartValueSeries, canvas, xPosition, yOffset, i * interval + chartValueSeries.getMinMarkerValue()));\r\n    }\r\n    return maxMarkerWidth;\r\n}",
  "context" : "/**\r\n * Draws the y axis markers for a chart value series.\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param canvas           the canvas\r\n * @param xPosition        the right most x position\r\n * @param yOffset          offset to apply to y position\r\n * @return the maximum marker width.\r\n */\r\nprivate float drawYAxisMarkers(ChartValueSeries chartValueSeries, Canvas canvas, int xPosition, int yOffset) {\r\n    int interval = chartValueSeries.getInterval();\r\n    float maxMarkerWidth = 0;\r\n    for (int i = 0; i <= Y_AXIS_INTERVALS; i++) {\r\n        maxMarkerWidth = Math.max(maxMarkerWidth, drawYAxisMarker(chartValueSeries, canvas, xPosition, yOffset, i * interval + chartValueSeries.getMinMarkerValue()));\r\n    }\r\n    return maxMarkerWidth;\r\n}",
  "start_lineno" : "849",
  "methodName" : "drawYAxisMarkers",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/54",
  "prompt" : "/**\r\n * Draws the y axis markers for a chart value series.\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param canvas           the canvas\r\n * @param xPosition        the right most x position\r\n * @param yOffset          offset to apply to y position\r\n * @return the maximum marker width.\r\n */\r\nprivate float drawYAxisMarkers(ChartValueSeries chartValueSeries, Canvas canvas, int xPosition, int yOffset) {\r\n    int interval = chartValueSeries.getInterval();\r\n    float maxMarkerWidth = 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "876",
  "ground_truth" : "    Rect rect = getRect(paint, marker);\r\n    int yPosition = getY(chartValueSeries, yValue) + (rect.height() / 2 + yOffset);\r\n    canvas.drawText(marker, xPosition, yPosition, paint);\r\n    return paint.measureText(marker);\r\n}",
  "context" : "/**\r\n * Draws a y axis marker.\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param canvas           the canvas\r\n * @param xPosition        the right most x position\r\n * @parm yOffset           offset to apply to y position\r\n * @param yValue           the y value\r\n * @return the marker width.\r\n */\r\nprivate float drawYAxisMarker(ChartValueSeries chartValueSeries, Canvas canvas, int xPosition, int yOffset, int yValue) {\r\n    String marker = chartValueSeries.formatMarker(yValue);\r\n    Paint paint = chartValueSeries.getMarkerPaint();\r\n    Rect rect = getRect(paint, marker);\r\n    int yPosition = getY(chartValueSeries, yValue) + (rect.height() / 2 + yOffset);\r\n    canvas.drawText(marker, xPosition, yPosition, paint);\r\n    return paint.measureText(marker);\r\n}",
  "start_lineno" : "869",
  "methodName" : "drawYAxisMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/55",
  "prompt" : "/**\r\n * Draws a y axis marker.\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param canvas           the canvas\r\n * @param xPosition        the right most x position\r\n * @parm yOffset           offset to apply to y position\r\n * @param yValue           the y value\r\n * @return the marker width.\r\n */\r\nprivate float drawYAxisMarker(ChartValueSeries chartValueSeries, Canvas canvas, int xPosition, int yOffset, int yValue) {\r\n    String marker = chartValueSeries.formatMarker(yValue);\r\n    Paint paint = chartValueSeries.getMarkerPaint();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "907",
  "ground_truth" : "        seriesList.stream().forEach(this::updateSerie);\r\n    }\r\n}",
  "context" : "/**\r\n * The path needs to be updated any time after the data or the dimensions change.\r\n */\r\nprivate void updateSeries() {\r\n    synchronized (chartPoints) {\r\n        seriesList.stream().forEach(this::updateSerie);\r\n    }\r\n}",
  "start_lineno" : "903",
  "methodName" : "updateSeries",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/56",
  "prompt" : "/**\r\n * The path needs to be updated any time after the data or the dimensions change.\r\n */\r\nprivate void updateSeries() {\r\n    synchronized (chartPoints) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1002",
  "ground_truth" : "    effectiveWidth = Math.max(0, width - leftBorder - rightBorder);\r\n    effectiveHeight = Math.max(0, height - topBorder - bottomBorder - spacer);\r\n}",
  "context" : "/**\r\n * Updates the effective dimensions.\r\n */\r\nprivate void updateEffectiveDimensions() {\r\n    effectiveWidth = Math.max(0, width - leftBorder - rightBorder);\r\n    effectiveHeight = Math.max(0, height - topBorder - bottomBorder - spacer);\r\n}",
  "start_lineno" : "999",
  "methodName" : "updateEffectiveDimensions",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/57",
  "prompt" : "/**\r\n * Updates the effective dimensions.\r\n */\r\nprivate void updateEffectiveDimensions() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1017",
  "ground_truth" : "        height = newHeight;\r\n        updateEffectiveDimensions();\r\n        updateSeries();\r\n    }\r\n}",
  "context" : "/**\r\n * Updates the effective dimensions if changed.\r\n *\r\n * @param newWidth  the new width\r\n * @param newHeight the new height\r\n */\r\nprivate void updateEffectiveDimensionsIfChanged(int newWidth, int newHeight) {\r\n    if (width != newWidth || height != newHeight) {\r\n        width = newWidth;\r\n        height = newHeight;\r\n        updateEffectiveDimensions();\r\n        updateSeries();\r\n    }\r\n}",
  "start_lineno" : "1010",
  "methodName" : "updateEffectiveDimensionsIfChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/58",
  "prompt" : "/**\r\n * Updates the effective dimensions if changed.\r\n *\r\n * @param newWidth  the new width\r\n * @param newHeight the new height\r\n */\r\nprivate void updateEffectiveDimensionsIfChanged(int newWidth, int newHeight) {\r\n    if (width != newWidth || height != newHeight) {\r\n        width = newWidth;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1030",
  "ground_truth" : "        value = maxX;\r\n    }\r\n    double percentage = value / maxX;\r\n    return leftBorder + (int) (percentage * effectiveWidth * zoomLevel);\r\n}",
  "context" : "/**\r\n * Gets the x position for a value.\r\n *\r\n * @param value the value\r\n */\r\nprivate int getX(double value) {\r\n    if (value > maxX) {\r\n        value = maxX;\r\n    }\r\n    double percentage = value / maxX;\r\n    return leftBorder + (int) (percentage * effectiveWidth * zoomLevel);\r\n}",
  "start_lineno" : "1024",
  "methodName" : "getX",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/59",
  "prompt" : "/**\r\n * Gets the x position for a value.\r\n *\r\n * @param value the value\r\n */\r\nprivate int getX(double value) {\r\n    if (value > maxX) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1043",
  "ground_truth" : "    int rangeHeight = effectiveHeight - 2 * yAxisOffset;\r\n    return topBorder + yAxisOffset + (int) ((1 - percentage) * rangeHeight);\r\n}",
  "context" : "/**\r\n * Gets the y position for a value in a chart value series\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param value            the value\r\n */\r\nprivate int getY(ChartValueSeries chartValueSeries, double value) {\r\n    int effectiveSpread = chartValueSeries.getInterval() * Y_AXIS_INTERVALS;\r\n    double percentage = (value - chartValueSeries.getMinMarkerValue()) / effectiveSpread;\r\n    int rangeHeight = effectiveHeight - 2 * yAxisOffset;\r\n    return topBorder + yAxisOffset + (int) ((1 - percentage) * rangeHeight);\r\n}",
  "start_lineno" : "1038",
  "methodName" : "getY",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/60",
  "prompt" : "/**\r\n * Gets the y position for a value in a chart value series\r\n *\r\n * @param chartValueSeries the chart value series\r\n * @param value            the value\r\n */\r\nprivate int getY(ChartValueSeries chartValueSeries, double value) {\r\n    int effectiveSpread = chartValueSeries.getInterval() * Y_AXIS_INTERVALS;\r\n    double percentage = (value - chartValueSeries.getMinMarkerValue()) / effectiveSpread;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1051",
  "ground_truth" : "        return marker.getLength().toKM_Miles(unitSystem);\r\n    } else {\r\n        return marker.getDuration().toMillis();\r\n    }\r\n}",
  "context" : "private double getMarkerXValue(Marker marker) {\r\n    if (chartByDistance) {\r\n        return marker.getLength().toKM_Miles(unitSystem);\r\n    } else {\r\n        return marker.getDuration().toMillis();\r\n    }\r\n}",
  "start_lineno" : "1045",
  "methodName" : "getMarkerXValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/61",
  "prompt" : "private double getMarkerXValue(Marker marker) {\r\n    if (chartByDistance) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1063",
  "ground_truth" : "    paint.getTextBounds(string, 0, string.length(), rect);\r\n    return rect;\r\n}",
  "context" : "/**\r\n * Gets a paint's Rect for a string.\r\n *\r\n * @param paint  the paint\r\n * @param string the string\r\n */\r\nprivate Rect getRect(Paint paint, String string) {\r\n    Rect rect = new Rect();\r\n    paint.getTextBounds(string, 0, string.length(), rect);\r\n    return rect;\r\n}",
  "start_lineno" : "1059",
  "methodName" : "getRect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/62",
  "prompt" : "/**\r\n * Gets a paint's Rect for a string.\r\n *\r\n * @param paint  the paint\r\n * @param string the string\r\n */\r\nprivate Rect getRect(Paint paint, String string) {\r\n    Rect rect = new Rect();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int Y_AXIS_INTERVALS = 5;\nprivate static final int TARGET_X_AXIS_INTERVALS = 4;\nprivate static final int MIN_ZOOM_LEVEL = 1;\nprivate static final int MAX_ZOOM_LEVEL = 10;\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int BORDER = 8;\nprivate static final int SPACER = 4;\nprivate static final int Y_AXIS_OFFSET = 16;\nprivate final List<ChartValueSeries> seriesList = new LinkedList<>();\nprivate final ChartValueSeries speedSeries;\nprivate final ChartValueSeries paceSeries;\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();\nprivate final ExtremityMonitor xExtremityMonitor = new ExtremityMonitor();\nprivate final int backgroundColor;\nprivate final Paint axisPaint;\nprivate final Paint xAxisMarkerPaint;\nprivate final Paint gridPaint;\nprivate final Paint markerPaint;\nprivate final Drawable pointer;\nprivate final Drawable markerPin;\nprivate final int markerWidth;\nprivate final int markerHeight;\nprivate final Scroller scroller;\nprivate double maxX = 1.0;\nprivate int zoomLevel = 1;\nprivate int leftBorder = BORDER;\nprivate int topBorder = BORDER;\nprivate int bottomBorder = BORDER;\nprivate int rightBorder = BORDER;\nprivate int spacer = SPACER;\nprivate int yAxisOffset = Y_AXIS_OFFSET;\nprivate int width = 0;\nprivate int height = 0;\nprivate int effectiveWidth = 0;\nprivate int effectiveHeight = 0;\nprivate TitleDimensions titleDimensions;\nprivate boolean twoLineYaxisNumbers = false;\nprivate int maxYaxisNumberHeight = 0;\nprivate boolean chartByDistance = false;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed = true;\nprivate boolean showPointer = false;\nprivate final GestureDetectorCompat detectorScrollFlingTab = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n\r\n    @Override\r\n    public boolean onDown(MotionEvent e) {\r\n        if (!scroller.isFinished()) {\r\n            scroller.abortAnimation();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n        if (Math.abs(distanceX) > 0) {\r\n            int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n            if (availableToScroll > 0) {\r\n                scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n        fling((int) -velocityX);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSingleTapConfirmed(MotionEvent event) {\r\n        // Check if the y event is within markerHeight of the marker center\r\n        if (Math.abs(event.getY() - topBorder - spacer - markerHeight / 2f) < markerHeight) {\r\n            int minDistance = Integer.MAX_VALUE;\r\n            Marker nearestMarker = null;\r\n            synchronized (markers) {\r\n                for (Marker marker : markers) {\r\n                    int distance = Math.abs(getX(getMarkerXValue(marker)) - (int) event.getX() - getScrollX());\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestMarker = marker;\r\n                    }\r\n                }\r\n            }\r\n            if (nearestMarker != null && minDistance < markerWidth) {\r\n                Intent intent = IntentUtils.newIntent(getContext(), MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, nearestMarker.getId());\r\n                getContext().startActivity(intent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n});\nprivate final ScaleGestureDetector detectorZoom = new ScaleGestureDetector(getContext(), new ScaleGestureDetector.SimpleOnScaleGestureListener() {\r\n\r\n    @Override\r\n    public boolean onScale(ScaleGestureDetector detector) {\r\n        float scaleFactor = detector.getScaleFactor();\r\n        if (scaleFactor >= 1.1f) {\r\n            zoomIn();\r\n            return true;\r\n        } else if (scaleFactor <= 0.9) {\r\n            zoomOut();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
  "app_type" : "life",
  "end_lineno" : "1074",
  "ground_truth" : "    }\r\n    return chartValueSeries.drawIfChartPointHasNoData();\r\n}",
  "context" : "/**\r\n * Returns true if the index is allowed when the chartData is empty.\r\n */\r\nprivate boolean allowIfEmpty(ChartValueSeries chartValueSeries) {\r\n    if (!chartPoints.isEmpty()) {\r\n        return false;\r\n    }\r\n    return chartValueSeries.drawIfChartPointHasNoData();\r\n}",
  "start_lineno" : "1068",
  "methodName" : "allowIfEmpty",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java",
  "task_id" : "OpenTracks/63",
  "prompt" : "/**\r\n * Returns true if the index is allowed when the chartData is empty.\r\n */\r\nprivate boolean allowIfEmpty(ChartValueSeries chartValueSeries) {\r\n    if (!chartPoints.isEmpty()) {\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "    // Delete tracks last since it triggers a database vaccum call\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, null, null);\r\n    File dir = FileUtils.getPhotoDir(context);\r\n    FileUtils.deleteDirectoryRecurse(dir);\r\n}",
  "context" : "@VisibleForTesting\r\npublic void deleteAllTracks(Context context) {\r\n    //TODO Both calls should not be necessary\r\n    contentResolver.delete(TrackPointsColumns.CONTENT_URI_BY_ID, null, null);\r\n    contentResolver.delete(MarkerColumns.CONTENT_URI, null, null);\r\n    // Delete tracks last since it triggers a database vaccum call\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, null, null);\r\n    File dir = FileUtils.getPhotoDir(context);\r\n    FileUtils.deleteDirectoryRecurse(dir);\r\n}",
  "start_lineno" : "173",
  "methodName" : "deleteAllTracks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/64",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TrackPointsColumns\nimport de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.VisibleForTesting\nimport android.content.Context\n@VisibleForTesting\r\npublic void deleteAllTracks(Context context) {\r\n    //TODO Both calls should not be necessary\r\n    contentResolver.delete(TrackPointsColumns.CONTENT_URI_BY_ID, null, null);\r\n    contentResolver.delete(MarkerColumns.CONTENT_URI, null, null);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "194",
  "ground_truth" : "        FileUtils.deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\r\n    }\r\n    String whereClause = String.format(TracksColumns._ID + \" IN (%s)\", TextUtils.join(\",\", Collections.nCopies(trackIds.size(), \"?\")));\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, whereClause, trackIds.stream().map(trackId -> Long.toString(trackId.id())).toArray(String[]::new));\r\n}",
  "context" : "public void deleteTracks(Context context, @NonNull List<Track.Id> trackIds) {\r\n    // Delete track folder resources.\r\n    for (Track.Id trackId : trackIds) {\r\n        FileUtils.deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\r\n    }\r\n    String whereClause = String.format(TracksColumns._ID + \" IN (%s)\", TextUtils.join(\",\", Collections.nCopies(trackIds.size(), \"?\")));\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, whereClause, trackIds.stream().map(trackId -> Long.toString(trackId.id())).toArray(String[]::new));\r\n}",
  "start_lineno" : "186",
  "methodName" : "deleteTracks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/65",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic void deleteTracks(Context context, @NonNull List<Track.Id> trackIds) {\r\n    // Delete track folder resources.\r\n    for (Track.Id trackId : trackIds) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "200",
  "ground_truth" : "    FileUtils.deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) });\r\n}",
  "context" : "public void deleteTrack(Context context, @NonNull Track.Id trackId) {\r\n    // Delete track folder resources.\r\n    FileUtils.deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\r\n    contentResolver.delete(TracksColumns.CONTENT_URI, TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) });\r\n}",
  "start_lineno" : "196",
  "methodName" : "deleteTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/66",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic void deleteTrack(Context context, @NonNull Track.Id trackId) {\r\n    // Delete track folder resources.\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "215",
  "ground_truth" : "            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}",
  "context" : "//TODO Only use for tests; also move to tests.\r\n@VisibleForTesting\r\npublic List<Track> getTracks() {\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(null, null, TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r\n            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}",
  "start_lineno" : "203",
  "methodName" : "getTracks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/67",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.VisibleForTesting\nimport android.database.Cursor\n//TODO Only use for tests; also move to tests.\r\n@VisibleForTesting\r\npublic List<Track> getTracks() {\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(null, null, TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "230",
  "ground_truth" : "            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}",
  "context" : "public List<Track> getTracks(ContentProviderSelectionInterface selection) {\r\n    SelectionData selectionData = selection.buildSelection();\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(selectionData.selection(), selectionData.selectionArgs(), TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r\n            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}",
  "start_lineno" : "217",
  "methodName" : "getTracks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/68",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport android.database.Cursor\npublic List<Track> getTracks(ContentProviderSelectionInterface selection) {\r\n    SelectionData selectionData = selection.buildSelection();\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(selectionData.selection(), selectionData.selectionArgs(), TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "269",
  "ground_truth" : "            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "public Track getTrack(@NonNull Track.Id trackId) {\r\n    try (Cursor cursor = getTrackCursor(TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r\n            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "262",
  "methodName" : "getTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/69",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Track getTrack(@NonNull Track.Id trackId) {\r\n    try (Cursor cursor = getTrackCursor(TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "279",
  "ground_truth" : "            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "public Track getTrack(@NonNull UUID trackUUID) {\r\n    String trackUUIDsearch = UUIDUtils.toHex(trackUUID);\r\n    try (Cursor cursor = getTrackCursor(\"hex(\" + TracksColumns.UUID + \")=?\", new String[] { trackUUIDsearch }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r\n            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "271",
  "methodName" : "getTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/70",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.UUID\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Track getTrack(@NonNull UUID trackUUID) {\r\n    String trackUUIDsearch = UUIDUtils.toHex(trackUUID);\r\n    try (Cursor cursor = getTrackCursor(\"hex(\" + TracksColumns.UUID + \")=?\", new String[] { trackUUIDsearch }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "303",
  "ground_truth" : "    Uri uri = contentResolver.insert(TracksColumns.CONTENT_URI, createContentValues(track));\r\n    return new Track.Id(ContentUris.parseId(uri));\r\n}",
  "context" : "/**\r\n * Inserts a track.\r\n * NOTE: This doesn't insert any trackPoints.\r\n *\r\n * @param track the track\r\n * @return the content provider URI of the inserted track.\r\n */\r\npublic Track.Id insertTrack(Track track) {\r\n    Uri uri = contentResolver.insert(TracksColumns.CONTENT_URI, createContentValues(track));\r\n    return new Track.Id(ContentUris.parseId(uri));\r\n}",
  "start_lineno" : "300",
  "methodName" : "insertTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/71",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\n/**\r\n * Inserts a track.\r\n * NOTE: This doesn't insert any trackPoints.\r\n *\r\n * @param track the track\r\n * @return the content provider URI of the inserted track.\r\n */\r\npublic Track.Id insertTrack(Track track) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "439",
  "ground_truth" : "    deleteMarkerPhoto(context, marker);\r\n    contentResolver.delete(MarkerColumns.CONTENT_URI, MarkerColumns._ID + \"=?\", new String[] { Long.toString(markerId.id()) });\r\n}",
  "context" : "public void deleteMarker(Context context, Marker.Id markerId) {\r\n    final Marker marker = getMarker(markerId);\r\n    deleteMarkerPhoto(context, marker);\r\n    contentResolver.delete(MarkerColumns.CONTENT_URI, MarkerColumns._ID + \"=?\", new String[] { Long.toString(markerId.id()) });\r\n}",
  "start_lineno" : "435",
  "methodName" : "deleteMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/72",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport android.content.Context\npublic void deleteMarker(Context context, Marker.Id markerId) {\r\n    final Marker marker = getMarker(markerId);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "454",
  "ground_truth" : "            return cursor.getCount();\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "/**\r\n * @return null if not able to get the next marker number.\r\n */\r\npublic Integer getNextMarkerNumber(@NonNull Track.Id trackId) {\r\n    String[] projection = { MarkerColumns._ID };\r\n    String selection = MarkerColumns.TRACKID + \"=?\";\r\n    String[] selectionArgs = new String[] { Long.toString(trackId.id()) };\r\n    try (Cursor cursor = getMarkerCursor(projection, selection, selectionArgs, MarkerColumns._ID, -1)) {\r\n        if (cursor != null) {\r\n            return cursor.getCount();\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "444",
  "methodName" : "getNextMarkerNumber",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/73",
  "prompt" : "import de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n/**\r\n * @return null if not able to get the next marker number.\r\n */\r\npublic Integer getNextMarkerNumber(@NonNull Track.Id trackId) {\r\n    String[] projection = { MarkerColumns._ID };\r\n    String selection = MarkerColumns.TRACKID + \"=?\";\r\n    String[] selectionArgs = new String[] { Long.toString(trackId.id()) };\r\n    try (Cursor cursor = getMarkerCursor(projection, selection, selectionArgs, MarkerColumns._ID, -1)) {\r\n        if (cursor != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "463",
  "ground_truth" : "            return createMarker(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "public Marker getMarker(@NonNull Marker.Id markerId) {\r\n    try (Cursor cursor = getMarkerCursor(null, MarkerColumns._ID + \"=?\", new String[] { Long.toString(markerId.id()) }, MarkerColumns._ID, 1)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            return createMarker(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "456",
  "methodName" : "getMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/74",
  "prompt" : "import de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Marker getMarker(@NonNull Marker.Id markerId) {\r\n    try (Cursor cursor = getMarkerCursor(null, MarkerColumns._ID + \"=?\", new String[] { Long.toString(markerId.id()) }, MarkerColumns._ID, 1)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "497",
  "ground_truth" : "            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return markers;\r\n}",
  "context" : "//TODO Move to test package\r\n@Deprecated\r\n@VisibleForTesting\r\npublic List<Marker> getMarkers(Track.Id trackId) {\r\n    ArrayList<Marker> markers = new ArrayList<>();\r\n    try (Cursor cursor = getMarkerCursor(trackId, null, -1)) {\r\n        if (cursor.moveToFirst()) {\r\n            do {\r\n                markers.add(createMarker(cursor));\r\n            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return markers;\r\n}",
  "start_lineno" : "485",
  "methodName" : "getMarkers",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/75",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.VisibleForTesting\nimport android.database.Cursor\n//TODO Move to test package\r\n@Deprecated\r\n@VisibleForTesting\r\npublic List<Marker> getMarkers(Track.Id trackId) {\r\n    ArrayList<Marker> markers = new ArrayList<>();\r\n    try (Cursor cursor = getMarkerCursor(trackId, null, -1)) {\r\n        if (cursor.moveToFirst()) {\r\n            do {\r\n                markers.add(createMarker(cursor));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "505",
  "ground_truth" : "    marker.setId(null);\r\n    return contentResolver.insert(MarkerColumns.CONTENT_URI, createContentValues(marker));\r\n}",
  "context" : "/**\r\n * @return the content provider URI of the inserted marker.\r\n */\r\npublic Uri insertMarker(@NonNull Marker marker) {\r\n    marker.setId(null);\r\n    return contentResolver.insert(MarkerColumns.CONTENT_URI, createContentValues(marker));\r\n}",
  "start_lineno" : "502",
  "methodName" : "insertMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/76",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.net.Uri\n/**\r\n * @return the content provider URI of the inserted marker.\r\n */\r\npublic Uri insertMarker(@NonNull Marker marker) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "519",
  "ground_truth" : "                parent.delete();\r\n            }\r\n        }\r\n    }\r\n}",
  "context" : "private void deleteMarkerPhoto(Context context, Marker marker) {\r\n    if (marker != null && marker.hasPhoto()) {\r\n        Uri uri = marker.getPhotoURI();\r\n        File file = MarkerUtils.buildInternalPhotoFile(context, marker.getTrackId(), uri);\r\n        if (file.exists()) {\r\n            File parent = file.getParentFile();\r\n            file.delete();\r\n            if (parent.listFiles().length == 0) {\r\n                parent.delete();\r\n            }\r\n        }\r\n    }\r\n}",
  "start_lineno" : "507",
  "methodName" : "deleteMarkerPhoto",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/77",
  "prompt" : "import de.dennisguse.opentracks.ui.markers.MarkerUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.io.File\nimport android.net.Uri\nimport android.content.Context\nprivate void deleteMarkerPhoto(Context context, Marker marker) {\r\n    if (marker != null && marker.hasPhoto()) {\r\n        Uri uri = marker.getPhotoURI();\r\n        File file = MarkerUtils.buildInternalPhotoFile(context, marker.getTrackId(), uri);\r\n        if (file.exists()) {\r\n            File parent = file.getParentFile();\r\n            file.delete();\r\n            if (parent.listFiles().length == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "532",
  "ground_truth" : "        deleteMarkerPhoto(context, savedMarker);\r\n    }\r\n    int rows = contentResolver.update(MarkerColumns.CONTENT_URI, createContentValues(updateMarker), MarkerColumns._ID + \"=?\", new String[] { Long.toString(updateMarker.getId().id()) });\r\n    return rows == 1;\r\n}",
  "context" : "/**\r\n * @param updateMarker the marker with updated data.\r\n * @return true if successful.\r\n */\r\npublic boolean updateMarker(Context context, Marker updateMarker) {\r\n    Marker savedMarker = getMarker(updateMarker.getId());\r\n    if (!updateMarker.hasPhoto()) {\r\n        deleteMarkerPhoto(context, savedMarker);\r\n    }\r\n    int rows = contentResolver.update(MarkerColumns.CONTENT_URI, createContentValues(updateMarker), MarkerColumns._ID + \"=?\", new String[] { Long.toString(updateMarker.getId().id()) });\r\n    return rows == 1;\r\n}",
  "start_lineno" : "525",
  "methodName" : "updateMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/78",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport android.content.Context\n/**\r\n * @param updateMarker the marker with updated data.\r\n * @return true if successful.\r\n */\r\npublic boolean updateMarker(Context context, Marker updateMarker) {\r\n    Marker savedMarker = getMarker(updateMarker.getId());\r\n    if (!updateMarker.hasPhoto()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "580",
  "ground_truth" : "    if (maxCount >= 0) {\r\n        sortOrder += \" LIMIT \" + maxCount;\r\n    }\r\n    return contentResolver.query(MarkerColumns.CONTENT_URI, projection, selection, selectionArgs, sortOrder);\r\n}",
  "context" : "/**\r\n * @param projection    the projection\r\n * @param selection     the selection\r\n * @param selectionArgs the selection args\r\n * @param sortOrder     the sort order\r\n * @param maxCount      the maximum number of markers\r\n */\r\nprivate Cursor getMarkerCursor(String[] projection, String selection, String[] selectionArgs, String sortOrder, int maxCount) {\r\n    if (sortOrder == null) {\r\n        sortOrder = MarkerColumns._ID;\r\n    }\r\n    if (maxCount >= 0) {\r\n        sortOrder += \" LIMIT \" + maxCount;\r\n    }\r\n    return contentResolver.query(MarkerColumns.CONTENT_URI, projection, selection, selectionArgs, sortOrder);\r\n}",
  "start_lineno" : "572",
  "methodName" : "getMarkerCursor",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/79",
  "prompt" : "import de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.Marker\nimport android.database.Cursor\n/**\r\n * @param projection    the projection\r\n * @param selection     the selection\r\n * @param selectionArgs the selection args\r\n * @param sortOrder     the sort order\r\n * @param maxCount      the maximum number of markers\r\n */\r\nprivate Cursor getMarkerCursor(String[] projection, String selection, String[] selectionArgs, String sortOrder, int maxCount) {\r\n    if (sortOrder == null) {\r\n        sortOrder = MarkerColumns._ID;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "675",
  "ground_truth" : "    for (int i = 0; i < trackPoints.size(); i++) {\r\n        values[i] = createContentValues(trackPoints.get(i), trackId);\r\n    }\r\n    return contentResolver.bulkInsert(TrackPointsColumns.CONTENT_URI_BY_ID, values);\r\n}",
  "context" : "//TODO Only used for file import; might be better to replace it.\r\n//TODO Rename to bulkInsert\r\npublic int bulkInsertTrackPoint(List<TrackPoint> trackPoints, Track.Id trackId) {\r\n    ContentValues[] values = new ContentValues[trackPoints.size()];\r\n    for (int i = 0; i < trackPoints.size(); i++) {\r\n        values[i] = createContentValues(trackPoints.get(i), trackId);\r\n    }\r\n    return contentResolver.bulkInsert(TrackPointsColumns.CONTENT_URI_BY_ID, values);\r\n}",
  "start_lineno" : "669",
  "methodName" : "bulkInsertTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/80",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport android.content.ContentValues\n//TODO Only used for file import; might be better to replace it.\r\n//TODO Rename to bulkInsert\r\npublic int bulkInsertTrackPoint(List<TrackPoint> trackPoints, Track.Id trackId) {\r\n    ContentValues[] values = new ContentValues[trackPoints.size()];\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "684",
  "ground_truth" : "    for (int i = 0; i < markers.size(); i++) {\r\n        values[i] = createContentValues(markers.get(i));\r\n    }\r\n    return contentResolver.bulkInsert(MarkerColumns.CONTENT_URI, values);\r\n}",
  "context" : "//TODO Set trackId in this method.\r\npublic int bulkInsertMarkers(List<Marker> markers, Track.Id trackId) {\r\n    ContentValues[] values = new ContentValues[markers.size()];\r\n    for (int i = 0; i < markers.size(); i++) {\r\n        values[i] = createContentValues(markers.get(i));\r\n    }\r\n    return contentResolver.bulkInsert(MarkerColumns.CONTENT_URI, values);\r\n}",
  "start_lineno" : "678",
  "methodName" : "bulkInsertMarkers",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/81",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\nimport android.content.ContentValues\n//TODO Set trackId in this method.\r\npublic int bulkInsertMarkers(List<Marker> markers, Track.Id trackId) {\r\n    ContentValues[] values = new ContentValues[markers.size()];\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "764",
  "ground_truth" : "    String[] selectionArgs = new String[] { Long.toString(trackId.id()) };\r\n    return findTrackPointBy(selection, selectionArgs);\r\n}",
  "context" : "/**\r\n * Gets the last valid location for a track.\r\n * Returns null if it doesn't exist.\r\n *\r\n * @param trackId the track id\r\n */\r\n@Deprecated\r\npublic TrackPoint getLastValidTrackPoint(Track.Id trackId) {\r\n    String selection = TrackPointsColumns._ID + \"=(SELECT MAX(\" + TrackPointsColumns._ID + \") FROM \" + TrackPointsColumns.TABLE_NAME + \" WHERE \" + TrackPointsColumns.TRACKID + \"=? AND \" + TrackPointsColumns.TYPE + \" IN (\" + TrackPoint.Type.SEGMENT_START_AUTOMATIC.type_db + \",\" + TrackPoint.Type.TRACKPOINT.type_db + \"))\";\r\n    String[] selectionArgs = new String[] { Long.toString(trackId.id()) };\r\n    return findTrackPointBy(selection, selectionArgs);\r\n}",
  "start_lineno" : "759",
  "methodName" : "getLastValidTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/82",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TrackPointsColumns\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\n/**\r\n * Gets the last valid location for a track.\r\n * Returns null if it doesn't exist.\r\n *\r\n * @param trackId the track id\r\n */\r\n@Deprecated\r\npublic TrackPoint getLastValidTrackPoint(Track.Id trackId) {\r\n    String selection = TrackPointsColumns._ID + \"=(SELECT MAX(\" + TrackPointsColumns._ID + \") FROM \" + TrackPointsColumns.TABLE_NAME + \" WHERE \" + TrackPointsColumns.TRACKID + \"=? AND \" + TrackPointsColumns.TYPE + \" IN (\" + TrackPoint.Type.SEGMENT_START_AUTOMATIC.type_db + \",\" + TrackPoint.Type.TRACKPOINT.type_db + \"))\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "851",
  "ground_truth" : "            return createTrackPoint(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "@Deprecated\r\nprivate TrackPoint findTrackPointBy(String selection, String[] selectionArgs) {\r\n    try (Cursor cursor = getTrackPointCursor(null, selection, selectionArgs, TrackPointsColumns._ID)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r\n            return createTrackPoint(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "843",
  "methodName" : "findTrackPointBy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/83",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TrackPointsColumns\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport android.database.Cursor\n@Deprecated\r\nprivate TrackPoint findTrackPointBy(String selection, String[] selectionArgs) {\r\n    try (Cursor cursor = getTrackPointCursor(null, selection, selectionArgs, TrackPointsColumns._ID)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "872",
  "ground_truth" : "    for (int i = 0; i < trackIds.length; i++) {\r\n        ids[i] = trackIds[i].id();\r\n    }\r\n    return formatIdListForUri(ids);\r\n}",
  "context" : "public static String formatIdListForUri(Track.Id... trackIds) {\r\n    long[] ids = new long[trackIds.length];\r\n    for (int i = 0; i < trackIds.length; i++) {\r\n        ids[i] = trackIds[i].id();\r\n    }\r\n    return formatIdListForUri(ids);\r\n}",
  "start_lineno" : "865",
  "methodName" : "formatIdListForUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/84",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport android.net.Uri\npublic static String formatIdListForUri(Track.Id... trackIds) {\r\n    long[] ids = new long[trackIds.length];\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ContentProviderUtils.class.getSimpleName();\nprivate static final String ID_SEPARATOR = \",\";\nprivate final ContentResolver contentResolver;",
  "app_type" : "life",
  "end_lineno" : "889",
  "ground_truth" : "        }\r\n        idsPathSegment.append(id);\r\n    }\r\n    return idsPathSegment.toString();\r\n}",
  "context" : "/**\r\n * Formats an array of IDs as comma separated string value\r\n *\r\n * @param ids array with IDs\r\n * @return comma separated list of ids\r\n */\r\nprivate static String formatIdListForUri(long[] ids) {\r\n    StringBuilder idsPathSegment = new StringBuilder();\r\n    for (long id : ids) {\r\n        if (idsPathSegment.length() > 0) {\r\n            idsPathSegment.append(ID_SEPARATOR);\r\n        }\r\n        idsPathSegment.append(id);\r\n    }\r\n    return idsPathSegment.toString();\r\n}",
  "start_lineno" : "880",
  "methodName" : "formatIdListForUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java",
  "task_id" : "OpenTracks/85",
  "prompt" : "import java.util.List\nimport android.net.Uri\n/**\r\n * Formats an array of IDs as comma separated string value\r\n *\r\n * @param ids array with IDs\r\n * @return comma separated list of ids\r\n */\r\nprivate static String formatIdListForUri(long[] ids) {\r\n    StringBuilder idsPathSegment = new StringBuilder();\r\n    for (long id : ids) {\r\n        if (idsPathSegment.length() > 0) {\r\n            idsPathSegment.append(ID_SEPARATOR);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "134",
  "ground_truth" : "    } catch (SQLiteException e) {\r\n        Log.e(TAG, \"Unable to open database for writing.\", e);\r\n    }\r\n    return db != null;\r\n}",
  "context" : "/**\r\n * Helper method to make onCreate is testable.\r\n *\r\n * @param context context to creates database\r\n * @return true means run successfully\r\n */\r\n@VisibleForTesting\r\nboolean onCreate(Context context) {\r\n    CustomSQLiteOpenHelper databaseHelper = new CustomSQLiteOpenHelper(context);\r\n    try {\r\n        db = databaseHelper.getWritableDatabase();\r\n        // Necessary to enable cascade deletion from Track to TrackPoints and Markers\r\n        db.setForeignKeyConstraintsEnabled(true);\r\n    } catch (SQLiteException e) {\r\n        Log.e(TAG, \"Unable to open database for writing.\", e);\r\n    }\r\n    return db != null;\r\n}",
  "start_lineno" : "123",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/86",
  "prompt" : "/**\r\n * Helper method to make onCreate is testable.\r\n *\r\n * @param context context to creates database\r\n * @return true means run successfully\r\n */\r\n@VisibleForTesting\r\nboolean onCreate(Context context) {\r\n    CustomSQLiteOpenHelper databaseHelper = new CustomSQLiteOpenHelper(context);\r\n    try {\r\n        db = databaseHelper.getWritableDatabase();\r\n        // Necessary to enable cascade deletion from Track to TrackPoints and Markers\r\n        db.setForeignKeyConstraintsEnabled(true);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "179",
  "ground_truth" : "        cursor.moveToNext();\r\n        totalCount = cursor.getInt(0);\r\n    }\r\n    return totalCount;\r\n}",
  "context" : "private int getTotalChanges() {\r\n    int totalCount;\r\n    try (Cursor cursor = db.rawQuery(\"SELECT total_changes()\", null)) {\r\n        cursor.moveToNext();\r\n        totalCount = cursor.getInt(0);\r\n    }\r\n    return totalCount;\r\n}",
  "start_lineno" : "172",
  "methodName" : "getTotalChanges",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/87",
  "prompt" : "private int getTotalChanges() {\r\n    int totalCount;\r\n    try (Cursor cursor = db.rawQuery(\"SELECT total_changes()\", null)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "209",
  "ground_truth" : "        db.endTransaction();\r\n    }\r\n    getContext().getContentResolver().notifyChange(url, null, false);\r\n    return result;\r\n}",
  "context" : "@Override\r\npublic Uri insert(@NonNull Uri url, ContentValues initialValues) {\r\n    if (initialValues == null) {\r\n        initialValues = new ContentValues();\r\n    }\r\n    Uri result;\r\n    try {\r\n        db.beginTransaction();\r\n        result = insertContentValues(url, getUrlType(url), initialValues);\r\n        db.setTransactionSuccessful();\r\n    } finally {\r\n        db.endTransaction();\r\n    }\r\n    getContext().getContentResolver().notifyChange(url, null, false);\r\n    return result;\r\n}",
  "start_lineno" : "194",
  "methodName" : "insert",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/88",
  "prompt" : "@Override\r\npublic Uri insert(@NonNull Uri url, ContentValues initialValues) {\r\n    if (initialValues == null) {\r\n        initialValues = new ContentValues();\r\n    }\r\n    Uri result;\r\n    try {\r\n        db.beginTransaction();\r\n        result = insertContentValues(url, getUrlType(url), initialValues);\r\n        db.setTransactionSuccessful();\r\n    } finally {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "348",
  "ground_truth" : "    if (0 <= matchIndex && matchIndex < urlTypes.length) {\r\n        return urlTypes[matchIndex];\r\n    }\r\n    throw new IllegalArgumentException(\"Unknown URL \" + url);\r\n}",
  "context" : "@NonNull\r\nprivate UrlType getUrlType(Uri url) {\r\n    UrlType[] urlTypes = UrlType.values();\r\n    int matchIndex = uriMatcher.match(url);\r\n    if (0 <= matchIndex && matchIndex < urlTypes.length) {\r\n        return urlTypes[matchIndex];\r\n    }\r\n    throw new IllegalArgumentException(\"Unknown URL \" + url);\r\n}",
  "start_lineno" : "339",
  "methodName" : "getUrlType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/89",
  "prompt" : "@NonNull\r\nprivate UrlType getUrlType(Uri url) {\r\n    UrlType[] urlTypes = UrlType.values();\r\n    int matchIndex = uriMatcher.match(url);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "364",
  "ground_truth" : "            insertMarker(url, contentValues);\r\n        default ->\r\n            throw new IllegalArgumentException(\"Unknown url \" + url);\r\n    };\r\n}",
  "context" : "/**\r\n * Inserts a content based on the url type.\r\n *\r\n * @param url           the content url\r\n * @param urlType       the url type\r\n * @param contentValues the content values\r\n */\r\nprivate Uri insertContentValues(Uri url, UrlType urlType, ContentValues contentValues) {\r\n    return switch(urlType) {\r\n        case TRACKPOINTS ->\r\n            insertTrackPoint(url, contentValues);\r\n        case TRACKS ->\r\n            insertTrack(url, contentValues);\r\n        case MARKERS ->\r\n            insertMarker(url, contentValues);\r\n        default ->\r\n            throw new IllegalArgumentException(\"Unknown url \" + url);\r\n    };\r\n}",
  "start_lineno" : "357",
  "methodName" : "insertContentValues",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/90",
  "prompt" : "/**\r\n * Inserts a content based on the url type.\r\n *\r\n * @param url           the content url\r\n * @param urlType       the url type\r\n * @param contentValues the content values\r\n */\r\nprivate Uri insertContentValues(Uri url, UrlType urlType, ContentValues contentValues) {\r\n    return switch(urlType) {\r\n        case TRACKPOINTS ->\r\n            insertTrackPoint(url, contentValues);\r\n        case TRACKS ->\r\n            insertTrack(url, contentValues);\r\n        case MARKERS ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "376",
  "ground_truth" : "    if (rowId >= 0) {\r\n        return ContentUris.appendId(TrackPointsColumns.CONTENT_URI_BY_ID.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLiteException(\"Failed to insert a track point \" + url);\r\n}",
  "context" : "private Uri insertTrackPoint(Uri url, ContentValues values) {\r\n    boolean hasTime = values.containsKey(TrackPointsColumns.TIME);\r\n    if (!hasTime) {\r\n        throw new IllegalArgumentException(\"Latitude, longitude, and time values are required.\");\r\n    }\r\n    long rowId = db.insert(TrackPointsColumns.TABLE_NAME, TrackPointsColumns._ID, values);\r\n    if (rowId >= 0) {\r\n        return ContentUris.appendId(TrackPointsColumns.CONTENT_URI_BY_ID.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLiteException(\"Failed to insert a track point \" + url);\r\n}",
  "start_lineno" : "366",
  "methodName" : "insertTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/91",
  "prompt" : "private Uri insertTrackPoint(Uri url, ContentValues values) {\r\n    boolean hasTime = values.containsKey(TrackPointsColumns.TIME);\r\n    if (!hasTime) {\r\n        throw new IllegalArgumentException(\"Latitude, longitude, and time values are required.\");\r\n    }\r\n    long rowId = db.insert(TrackPointsColumns.TABLE_NAME, TrackPointsColumns._ID, values);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "384",
  "ground_truth" : "    if (rowId >= 0) {\r\n        return ContentUris.appendId(TracksColumns.CONTENT_URI.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLException(\"Failed to insert a track \" + url);\r\n}",
  "context" : "private Uri insertTrack(Uri url, ContentValues contentValues) {\r\n    long rowId = db.insert(TracksColumns.TABLE_NAME, TracksColumns._ID, contentValues);\r\n    if (rowId >= 0) {\r\n        return ContentUris.appendId(TracksColumns.CONTENT_URI.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLException(\"Failed to insert a track \" + url);\r\n}",
  "start_lineno" : "378",
  "methodName" : "insertTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/92",
  "prompt" : "private Uri insertTrack(Uri url, ContentValues contentValues) {\r\n    long rowId = db.insert(TracksColumns.TABLE_NAME, TracksColumns._ID, contentValues);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomContentProvider.class.getSimpleName();\nprivate static final String SQL_LIST_DELIMITER = \",\";\nprivate static final int TOTAL_DELETED_ROWS_VACUUM_THRESHOLD = 10000;\nprivate final UriMatcher uriMatcher;\nprivate SQLiteDatabase db;\n/**\r\n * The string representing the query that compute sensor stats from trackpoints table.\r\n * It computes the average for heart rate, cadence and power (duration-based average) and the maximum for heart rate, cadence and power.\r\n * Finally, it ignores manual pause (SEGMENT_START_MANUAL).\r\n */\r\nprivate final String SENSOR_STATS_QUERY = \"WITH time_select as \" + \"(SELECT t1.\" + TrackPointsColumns.TIME + \" * (t1.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")) time_value \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t1 \" + \"WHERE t1.\" + TrackPointsColumns._ID + \" > t.\" + TrackPointsColumns._ID + \" AND t1.\" + TrackPointsColumns.TRACKID + \" = ? ORDER BY _id LIMIT 1) \" + \"SELECT \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_HR + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_HEARTRATE + \") \" + TrackPointsColumns.ALIAS_MAX_HR + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_CADENCE + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_CADENCE + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_CADENCE + \") \" + TrackPointsColumns.ALIAS_MAX_CADENCE + \", \" + \"SUM(t.\" + TrackPointsColumns.SENSOR_POWER + \" * (COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \")) \" + \"/ \" + \"SUM(COALESCE(MAX(t.\" + TrackPointsColumns.TIME + \", (SELECT time_value FROM time_select)), t.\" + TrackPointsColumns.TIME + \") - t.\" + TrackPointsColumns.TIME + \") \" + TrackPointsColumns.ALIAS_AVG_POWER + \", \" + \"MAX(t.\" + TrackPointsColumns.SENSOR_POWER + \") \" + TrackPointsColumns.ALIAS_MAX_POWER + \" \" + \"FROM \" + TrackPointsColumns.TABLE_NAME + \" t \" + \"WHERE t.\" + TrackPointsColumns.TRACKID + \" = ? \" + \"AND t.\" + TrackPointsColumns.TYPE + \" NOT IN (\" + TrackPoint.Type.SEGMENT_START_MANUAL.type_db + \")\";",
  "app_type" : "life",
  "end_lineno" : "392",
  "ground_truth" : "    if (rowId >= 0) {\r\n        return ContentUris.appendId(MarkerColumns.CONTENT_URI.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLException(\"Failed to insert a marker \" + url);\r\n}",
  "context" : "private Uri insertMarker(Uri url, ContentValues contentValues) {\r\n    long rowId = db.insert(MarkerColumns.TABLE_NAME, MarkerColumns._ID, contentValues);\r\n    if (rowId >= 0) {\r\n        return ContentUris.appendId(MarkerColumns.CONTENT_URI.buildUpon(), rowId).build();\r\n    }\r\n    throw new SQLException(\"Failed to insert a marker \" + url);\r\n}",
  "start_lineno" : "386",
  "methodName" : "insertMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java",
  "task_id" : "OpenTracks/93",
  "prompt" : "private Uri insertMarker(Uri url, ContentValues contentValues) {\r\n    long rowId = db.insert(MarkerColumns.TABLE_NAME, MarkerColumns._ID, contentValues);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "    db.execSQL(TracksColumns.CREATE_TABLE);\r\n    db.execSQL(TracksColumns.CREATE_TABLE_INDEX);\r\n    db.execSQL(MarkerColumns.CREATE_TABLE);\r\n    db.execSQL(MarkerColumns.CREATE_TABLE_INDEX);\r\n}",
  "context" : "@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    db.execSQL(TrackPointsColumns.CREATE_TABLE);\r\n    db.execSQL(TrackPointsColumns.CREATE_TABLE_INDEX);\r\n    db.execSQL(TracksColumns.CREATE_TABLE);\r\n    db.execSQL(TracksColumns.CREATE_TABLE_INDEX);\r\n    db.execSQL(MarkerColumns.CREATE_TABLE);\r\n    db.execSQL(MarkerColumns.CREATE_TABLE_INDEX);\r\n}",
  "start_lineno" : "53",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/94",
  "prompt" : "import de.dennisguse.opentracks.data.tables.TrackPointsColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    db.execSQL(TrackPointsColumns.CREATE_TABLE);\r\n    db.execSQL(TrackPointsColumns.CREATE_TABLE_INDEX);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "    db.execSQL(\"CREATE INDEX trackpoints_trackid_index ON trackpoints(trackid)\");\r\n    db.execSQL(\"CREATE INDEX waypoints_trackid_index ON waypoints(trackid)\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "/**\r\n * Add indeces for foreign key trackId\r\n */\r\nprivate void upgradeFrom24to25(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"CREATE INDEX trackpoints_trackid_index ON trackpoints(trackid)\");\r\n    db.execSQL(\"CREATE INDEX waypoints_trackid_index ON waypoints(trackid)\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "154",
  "methodName" : "upgradeFrom24to25",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/95",
  "prompt" : "import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add indeces for foreign key trackId\r\n */\r\nprivate void upgradeFrom24to25(SQLiteDatabase db) {\r\n    db.beginTransaction();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "    db.execSQL(\"DROP INDEX trackpoints_trackid_index\");\r\n    db.execSQL(\"DROP INDEX waypoints_trackid_index\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "private void downgradeFrom25to24(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"DROP INDEX trackpoints_trackid_index\");\r\n    db.execSQL(\"DROP INDEX waypoints_trackid_index\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "164",
  "methodName" : "downgradeFrom25to24",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/96",
  "prompt" : "import android.database.sqlite.SQLiteDatabase\nprivate void downgradeFrom25to24(SQLiteDatabase db) {\r\n    db.beginTransaction();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom26to27(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_gain FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "216",
  "methodName" : "upgradeFrom26to27",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/97",
  "prompt" : "import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom26to27(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_gain FLOAT\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "300",
  "ground_truth" : "    db.execSQL(\"ALTER TABLE tracks ADD COLUMN elevationloss FLOAT\");\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_loss FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "/**\r\n * Add elevation loss.\r\n */\r\nprivate void upgradeFrom28to29(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE tracks ADD COLUMN elevationloss FLOAT\");\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_loss FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "292",
  "methodName" : "upgradeFrom28to29",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/98",
  "prompt" : "import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add elevation loss.\r\n */\r\nprivate void upgradeFrom28to29(SQLiteDatabase db) {\r\n    db.beginTransaction();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "398",
  "ground_truth" : "    // TrackPoints\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN sensor_distance FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "/**\r\n * Add distance column to TrackPoint.\r\n */\r\nprivate void upgradeFrom30to31(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    // TrackPoints\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN sensor_distance FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "390",
  "methodName" : "upgradeFrom30to31",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/99",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport android.database.sqlite.SQLiteDatabase\n/**\r\n * Add distance column to TrackPoint.\r\n */\r\nprivate void upgradeFrom30to31(SQLiteDatabase db) {\r\n    db.beginTransaction();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CustomSQLiteOpenHelper.class.getSimpleName();\nprivate static final int DATABASE_VERSION = 37;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "503",
  "ground_truth" : "    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "context" : "/**\r\n * Add accuracy_vertical\r\n */\r\nprivate void upgradeFrom33to34(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN accuracy_vertical FLOAT\");\r\n    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}",
  "start_lineno" : "496",
  "methodName" : "upgradeFrom33to34",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java",
  "task_id" : "OpenTracks/100",
  "prompt" : "import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add accuracy_vertical\r\n */\r\nprivate void upgradeFrom33to34(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN accuracy_vertical FLOAT\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "13",
  "ground_truth" : "    }\r\n    return new Cadence(value / (duration.toMillis() / (float) Duration.ofMinutes(1).toMillis()));\r\n}",
  "context" : "public static Cadence of(float value, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r\n    }\r\n    return new Cadence(value / (duration.toMillis() / (float) Duration.ofMinutes(1).toMillis()));\r\n}",
  "start_lineno" : "7",
  "methodName" : "of",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Cadence.java",
  "task_id" : "OpenTracks/101",
  "prompt" : "public static Cadence of(float value, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final double M_TO_KM = 1 / KM_TO_M;\npublic static final double MI_TO_M = 1609.344;\npublic static final double M_TO_MI = 1 / MI_TO_M;\nprivate static final double MI_TO_FT = 5280.0;\npublic static final double M_TO_FT = M_TO_MI * MI_TO_FT;\nprivate static final double NAUTICAL_MILE_TO_M = 1852.0;\nprivate static final double M_TO_NAUTICAL_MILE = 1 / NAUTICAL_MILE_TO_M;",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        return Distance.of(Double.NaN);\r\n    } else {\r\n        return Distance.of((double) distance_m);\r\n    }\r\n}",
  "context" : "public static Distance of(Double distance_m) {\r\n    if (distance_m == null) {\r\n        return Distance.of(Double.NaN);\r\n    } else {\r\n        return Distance.of((double) distance_m);\r\n    }\r\n}",
  "start_lineno" : "13",
  "methodName" : "of",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java",
  "task_id" : "OpenTracks/102",
  "prompt" : "public static Distance of(Double distance_m) {\r\n    if (distance_m == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final double M_TO_KM = 1 / KM_TO_M;\npublic static final double MI_TO_M = 1609.344;\npublic static final double M_TO_MI = 1 / MI_TO_M;\nprivate static final double MI_TO_FT = 5280.0;\npublic static final double M_TO_FT = M_TO_MI * MI_TO_FT;\nprivate static final double NAUTICAL_MILE_TO_M = 1852.0;\nprivate static final double M_TO_NAUTICAL_MILE = 1 / NAUTICAL_MILE_TO_M;",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    }\r\n    return of(distance_m);\r\n}",
  "context" : "@Nullable\r\npublic static Distance ofOrNull(Double distance_m) {\r\n    if (distance_m == null) {\r\n        return null;\r\n    }\r\n    return of(distance_m);\r\n}",
  "start_lineno" : "23",
  "methodName" : "ofOrNull",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java",
  "task_id" : "OpenTracks/103",
  "prompt" : "@Nullable\r\npublic static Distance ofOrNull(Double distance_m) {\r\n    if (distance_m == null) {\r\n        return null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final double M_TO_KM = 1 / KM_TO_M;\npublic static final double MI_TO_M = 1609.344;\npublic static final double M_TO_MI = 1 / MI_TO_M;\nprivate static final double MI_TO_FT = 5280.0;\npublic static final double M_TO_FT = M_TO_MI * MI_TO_FT;\nprivate static final double NAUTICAL_MILE_TO_M = 1852.0;\nprivate static final double M_TO_NAUTICAL_MILE = 1 / NAUTICAL_MILE_TO_M;",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "            Distance.ofMile(1);\r\n        case NAUTICAL_IMPERIAL ->\r\n            Distance.ofNauticalMile(1);\r\n    };\r\n}",
  "context" : "public static Distance one(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            Distance.ofKilometer(1);\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r\n            Distance.ofMile(1);\r\n        case NAUTICAL_IMPERIAL ->\r\n            Distance.ofNauticalMile(1);\r\n    };\r\n}",
  "start_lineno" : "55",
  "methodName" : "one",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java",
  "task_id" : "OpenTracks/104",
  "prompt" : "public static Distance one(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            Distance.ofKilometer(1);\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final double M_TO_KM = 1 / KM_TO_M;\npublic static final double MI_TO_M = 1609.344;\npublic static final double M_TO_MI = 1 / MI_TO_M;\nprivate static final double MI_TO_FT = 5280.0;\npublic static final double M_TO_FT = M_TO_MI * MI_TO_FT;\nprivate static final double NAUTICAL_MILE_TO_M = 1852.0;\nprivate static final double M_TO_NAUTICAL_MILE = 1 / NAUTICAL_MILE_TO_M;",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "            toMI();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toNauticalMiles();\r\n    };\r\n}",
  "context" : "public double toKM_Miles(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKM();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r\n            toMI();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toNauticalMiles();\r\n    };\r\n}",
  "start_lineno" : "119",
  "methodName" : "toKM_Miles",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java",
  "task_id" : "OpenTracks/105",
  "prompt" : "public double toKM_Miles(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKM();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final double M_TO_KM = 1 / KM_TO_M;\npublic static final double MI_TO_M = 1609.344;\npublic static final double M_TO_MI = 1 / MI_TO_M;\nprivate static final double MI_TO_FT = 5280.0;\npublic static final double M_TO_FT = M_TO_MI * MI_TO_FT;\nprivate static final double NAUTICAL_MILE_TO_M = 1852.0;\nprivate static final double M_TO_NAUTICAL_MILE = 1 / NAUTICAL_MILE_TO_M;",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "            toM();\r\n        case NAUTICAL_IMPERIAL, IMPERIAL_FEET ->\r\n            toFT();\r\n    };\r\n}",
  "context" : "public double toM_FT(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC, IMPERIAL_METER ->\r\n            toM();\r\n        case NAUTICAL_IMPERIAL, IMPERIAL_FEET ->\r\n            toFT();\r\n    };\r\n}",
  "start_lineno" : "127",
  "methodName" : "toM_FT",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java",
  "task_id" : "OpenTracks/106",
  "prompt" : "public double toM_FT(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC, IMPERIAL_METER ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final double threshold;\nprivate final UnitSystem unitSystem;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate double threshold;",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        return resources.getString(R.string.value_unknown);\r\n    }\r\n    Pair<String, String> distanceParts = getDistanceParts(distance);\r\n    return resources.getString(R.string.distance_with_unit, distanceParts.first, distanceParts.second);\r\n}",
  "context" : "public String formatDistance(Distance distance) {\r\n    if (distance.isInvalid()) {\r\n        return resources.getString(R.string.value_unknown);\r\n    }\r\n    Pair<String, String> distanceParts = getDistanceParts(distance);\r\n    return resources.getString(R.string.distance_with_unit, distanceParts.first, distanceParts.second);\r\n}",
  "start_lineno" : "31",
  "methodName" : "formatDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java",
  "task_id" : "OpenTracks/107",
  "prompt" : "public String formatDistance(Distance distance) {\r\n    if (distance.isInvalid()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final double threshold;\nprivate final UnitSystem unitSystem;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate double threshold;",
  "app_type" : "life",
  "end_lineno" : "110",
  "ground_truth" : "    this.decimalCount = decimalCount;\r\n    return this;\r\n}",
  "context" : "public Builder setDecimalCount(int decimalCount) {\r\n    this.decimalCount = decimalCount;\r\n    return this;\r\n}",
  "start_lineno" : "107",
  "methodName" : "setDecimalCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java",
  "task_id" : "OpenTracks/108",
  "prompt" : "public Builder setDecimalCount(int decimalCount) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final double threshold;\nprivate final UnitSystem unitSystem;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate double threshold;",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "    this.unitSystem = unitSystem;\r\n    return this;\r\n}",
  "context" : "public Builder setUnit(@Nullable UnitSystem unitSystem) {\r\n    this.unitSystem = unitSystem;\r\n    return this;\r\n}",
  "start_lineno" : "112",
  "methodName" : "setUnit",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java",
  "task_id" : "OpenTracks/109",
  "prompt" : "public Builder setUnit(@Nullable UnitSystem unitSystem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final double threshold;\nprivate final UnitSystem unitSystem;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate double threshold;",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "    this.threshold = threshold;\r\n    return this;\r\n}",
  "context" : "public Builder setThreshold(double threshold) {\r\n    this.threshold = threshold;\r\n    return this;\r\n}",
  "start_lineno" : "117",
  "methodName" : "setThreshold",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java",
  "task_id" : "OpenTracks/110",
  "prompt" : "public Builder setThreshold(double threshold) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Id id;\nprivate String name = \"\";\nprivate String description = \"\";\nprivate String category = \"\";\nprivate String icon = \"\";\nprivate Track.Id trackId;\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Altitude altitude;\nprivate Float bearing;\nprivate Duration duration;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "    if (trackPoint.hasAltitude())\r\n        this.altitude = trackPoint.getAltitude();\r\n    if (trackPoint.hasBearing())\r\n        this.bearing = trackPoint.getBearing();\r\n}",
  "context" : "//TODO Is somehow part of the initialization process. Can we at least limit visibility?\r\npublic void setTrackPoint(TrackPoint trackPoint) {\r\n    this.latitude = trackPoint.getLatitude();\r\n    this.longitude = trackPoint.getLongitude();\r\n    if (trackPoint.hasHorizontalAccuracy())\r\n        this.accuracy = trackPoint.getHorizontalAccuracy();\r\n    if (trackPoint.hasAltitude())\r\n        this.altitude = trackPoint.getAltitude();\r\n    if (trackPoint.hasBearing())\r\n        this.bearing = trackPoint.getBearing();\r\n}",
  "start_lineno" : "96",
  "methodName" : "setTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Marker.java",
  "task_id" : "OpenTracks/111",
  "prompt" : "//TODO Is somehow part of the initialization process. Can we at least limit visibility?\r\npublic void setTrackPoint(TrackPoint trackPoint) {\r\n    this.latitude = trackPoint.getLatitude();\r\n    this.longitude = trackPoint.getLongitude();\r\n    if (trackPoint.hasHorizontalAccuracy())\r\n        this.accuracy = trackPoint.getHorizontalAccuracy();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Id id;\nprivate String name = \"\";\nprivate String description = \"\";\nprivate String category = \"\";\nprivate String icon = \"\";\nprivate Track.Id trackId;\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Altitude altitude;\nprivate Float bearing;\nprivate Duration duration;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "    if (hasAltitude()) {\r\n        location.setAltitude(altitude.toM());\r\n    }\r\n    return location;\r\n}",
  "context" : "public Location getLocation() {\r\n    Location location = new Location(\"\");\r\n    location.setTime(time.toEpochMilli());\r\n    if (hasLocation()) {\r\n        location.setLatitude(latitude);\r\n        location.setLongitude(longitude);\r\n    }\r\n    if (hasBearing()) {\r\n        location.setBearing(bearing);\r\n    }\r\n    if (hasAccuracy()) {\r\n        location.setAccuracy((float) accuracy.toM());\r\n    }\r\n    if (hasAltitude()) {\r\n        location.setAltitude(altitude.toM());\r\n    }\r\n    return location;\r\n}",
  "start_lineno" : "165",
  "methodName" : "getLocation",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Marker.java",
  "task_id" : "OpenTracks/112",
  "prompt" : "public Location getLocation() {\r\n    Location location = new Location(\"\");\r\n    location.setTime(time.toEpochMilli());\r\n    if (hasLocation()) {\r\n        location.setLatitude(latitude);\r\n        location.setLongitude(longitude);\r\n    }\r\n    if (hasBearing()) {\r\n        location.setBearing(bearing);\r\n    }\r\n    if (hasAccuracy()) {\r\n        location.setAccuracy((float) accuracy.toM());\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "15",
  "ground_truth" : "    }\r\n    return new Speed(distance.toM() / (duration.toMillis() / (double) Duration.ofSeconds(1).toMillis()));\r\n}",
  "context" : "public static Speed of(Distance distance, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r\n    }\r\n    return new Speed(distance.toM() / (duration.toMillis() / (double) Duration.ofSeconds(1).toMillis()));\r\n}",
  "start_lineno" : "9",
  "methodName" : "of",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java",
  "task_id" : "OpenTracks/113",
  "prompt" : "public static Speed of(Distance distance, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    }\r\n    return speed2;\r\n}",
  "context" : "public static Speed max(Speed speed1, Speed speed2) {\r\n    if (speed1.greaterThan(speed2)) {\r\n        return speed1;\r\n    }\r\n    return speed2;\r\n}",
  "start_lineno" : "33",
  "methodName" : "max",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java",
  "task_id" : "OpenTracks/114",
  "prompt" : "public static Speed max(Speed speed1, Speed speed2) {\r\n    if (speed1.greaterThan(speed2)) {\r\n        return speed1;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "        return Duration.ofSeconds(0);\r\n    }\r\n    double distance = Distance.of(speed_mps).toKM_Miles(unitSystem);\r\n    return Duration.ofSeconds(Math.round(1 / distance));\r\n}",
  "context" : "public Duration toPace(UnitSystem unitSystem) {\r\n    if (isZero()) {\r\n        return Duration.ofSeconds(0);\r\n    }\r\n    double distance = Distance.of(speed_mps).toKM_Miles(unitSystem);\r\n    return Duration.ofSeconds(Math.round(1 / distance));\r\n}",
  "start_lineno" : "84",
  "methodName" : "toPace",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java",
  "task_id" : "OpenTracks/115",
  "prompt" : "public Duration toPace(UnitSystem unitSystem) {\r\n    if (isZero()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "            toMPH();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toKnots();\r\n    };\r\n}",
  "context" : "public double to(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKMH();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r\n            toMPH();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toKnots();\r\n    };\r\n}",
  "start_lineno" : "94",
  "methodName" : "to",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java",
  "task_id" : "OpenTracks/116",
  "prompt" : "public double to(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKMH();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final UnitSystem unitSystem;\nprivate final boolean reportSpeedOrPace;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate boolean reportSpeedOrPace;",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "    Pair<String, String> distanceParts = getSpeedParts(speed);\r\n    return resources.getString(R.string.speed_with_unit, distanceParts.first, distanceParts.second);\r\n}",
  "context" : "public String formatSpeed(Speed speed) {\r\n    Pair<String, String> distanceParts = getSpeedParts(speed);\r\n    return resources.getString(R.string.speed_with_unit, distanceParts.first, distanceParts.second);\r\n}",
  "start_lineno" : "30",
  "methodName" : "formatSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java",
  "task_id" : "OpenTracks/117",
  "prompt" : "public String formatSpeed(Speed speed) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final UnitSystem unitSystem;\nprivate final boolean reportSpeedOrPace;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate boolean reportSpeedOrPace;",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "    this.decimalCount = decimalCount;\r\n    return this;\r\n}",
  "context" : "public Builder setDecimalCount(int decimalCount) {\r\n    this.decimalCount = decimalCount;\r\n    return this;\r\n}",
  "start_lineno" : "85",
  "methodName" : "setDecimalCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java",
  "task_id" : "OpenTracks/118",
  "prompt" : "public Builder setDecimalCount(int decimalCount) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final UnitSystem unitSystem;\nprivate final boolean reportSpeedOrPace;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate boolean reportSpeedOrPace;",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "    this.unitSystem = unitSystem;\r\n    return this;\r\n}",
  "context" : "public Builder setUnit(@NonNull UnitSystem unitSystem) {\r\n    this.unitSystem = unitSystem;\r\n    return this;\r\n}",
  "start_lineno" : "90",
  "methodName" : "setUnit",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java",
  "task_id" : "OpenTracks/119",
  "prompt" : "public Builder setUnit(@NonNull UnitSystem unitSystem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Resources resources;\nprivate final int decimalCount;\nprivate final UnitSystem unitSystem;\nprivate final boolean reportSpeedOrPace;\nprivate int decimalCount;\nprivate UnitSystem unitSystem;\nprivate boolean reportSpeedOrPace;",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "    this.reportSpeedOrPace = reportSpeedOrPace;\r\n    return this;\r\n}",
  "context" : "public Builder setReportSpeedOrPace(boolean reportSpeedOrPace) {\r\n    this.reportSpeedOrPace = reportSpeedOrPace;\r\n    return this;\r\n}",
  "start_lineno" : "95",
  "methodName" : "setReportSpeedOrPace",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java",
  "task_id" : "OpenTracks/120",
  "prompt" : "public Builder setReportSpeedOrPace(boolean reportSpeedOrPace) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Track.Id id;\nprivate UUID uuid = UUID.randomUUID();\nprivate String name = \"\";\nprivate String description = \"\";\nprivate String activityTypeLocalized = \"\";\nprivate ActivityType activityType;\nprivate final ZoneOffset zoneOffset;\nprivate TrackStatistics trackStatistics = new TrackStatistics();\npublic static final Creator<Track.Id> CREATOR = new Creator<>() {\r\n\r\n    public Track.Id createFromParcel(Parcel in) {\r\n        return new Track.Id(in.readLong());\r\n    }\r\n\r\n    public Track.Id[] newArray(int size) {\r\n        return new Track.Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    Track track = (Track) o;\r\n    return id.equals(track.id);\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    Track track = (Track) o;\r\n    return id.equals(track.id);\r\n}",
  "start_lineno" : "133",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Track.java",
  "task_id" : "OpenTracks/121",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "        if (e.type_db == id)\r\n            return e;\r\n    }\r\n    throw new RuntimeException(\"unknown id: \" + id);\r\n}",
  "context" : "public static Type getById(int id) {\r\n    for (Type e : values()) {\r\n        if (e.type_db == id)\r\n            return e;\r\n    }\r\n    throw new RuntimeException(\"unknown id: \" + id);\r\n}",
  "start_lineno" : "79",
  "methodName" : "getById",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/122",
  "prompt" : "public static Type getById(int id) {\r\n    for (Type e : values()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "    this.type = type;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setType(@NonNull Type type) {\r\n    this.type = type;\r\n    return this;\r\n}",
  "start_lineno" : "133",
  "methodName" : "setType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/123",
  "prompt" : "public TrackPoint setType(@NonNull Type type) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "    this.latitude = latitude;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setLatitude(double latitude) {\r\n    this.latitude = latitude;\r\n    return this;\r\n}",
  "start_lineno" : "170",
  "methodName" : "setLatitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/124",
  "prompt" : "public TrackPoint setLatitude(double latitude) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "182",
  "ground_truth" : "    this.longitude = longitude;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setLongitude(double longitude) {\r\n    this.longitude = longitude;\r\n    return this;\r\n}",
  "start_lineno" : "179",
  "methodName" : "setLongitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/125",
  "prompt" : "public TrackPoint setLongitude(double longitude) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "    this.altitudeGain_m = altitudeGain_m;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setAltitudeGain(Float altitudeGain_m) {\r\n    this.altitudeGain_m = altitudeGain_m;\r\n    return this;\r\n}",
  "start_lineno" : "231",
  "methodName" : "setAltitudeGain",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/126",
  "prompt" : "public TrackPoint setAltitudeGain(Float altitudeGain_m) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "247",
  "ground_truth" : "    this.altitudeLoss_m = altitudeLoss_m;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setAltitudeLoss(Float altitudeLoss_m) {\r\n    this.altitudeLoss_m = altitudeLoss_m;\r\n    return this;\r\n}",
  "start_lineno" : "244",
  "methodName" : "setAltitudeLoss",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/127",
  "prompt" : "public TrackPoint setAltitudeLoss(Float altitudeLoss_m) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "272",
  "ground_truth" : "    this.altitude = Altitude.WGS84.of(altitude_m);\r\n    return this;\r\n}",
  "context" : "@VisibleForTesting\r\npublic TrackPoint setAltitude(double altitude_m) {\r\n    this.altitude = Altitude.WGS84.of(altitude_m);\r\n    return this;\r\n}",
  "start_lineno" : "268",
  "methodName" : "setAltitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/128",
  "prompt" : "@VisibleForTesting\r\npublic TrackPoint setAltitude(double altitude_m) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "277",
  "ground_truth" : "    this.altitude = altitude;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setAltitude(Altitude altitude) {\r\n    this.altitude = altitude;\r\n    return this;\r\n}",
  "start_lineno" : "274",
  "methodName" : "setAltitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/129",
  "prompt" : "public TrackPoint setAltitude(Altitude altitude) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "290",
  "ground_truth" : "    this.speed = speed;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setSpeed(Speed speed) {\r\n    this.speed = speed;\r\n    return this;\r\n}",
  "start_lineno" : "287",
  "methodName" : "setSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/130",
  "prompt" : "public TrackPoint setSpeed(Speed speed) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "302",
  "ground_truth" : "    this.bearing = bearing;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setBearing(Float bearing) {\r\n    this.bearing = bearing;\r\n    return this;\r\n}",
  "start_lineno" : "299",
  "methodName" : "setBearing",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/131",
  "prompt" : "public TrackPoint setBearing(Float bearing) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "315",
  "ground_truth" : "    this.horizontalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setHorizontalAccuracy(Distance horizontalAccuracy) {\r\n    this.horizontalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}",
  "start_lineno" : "312",
  "methodName" : "setHorizontalAccuracy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/132",
  "prompt" : "public TrackPoint setHorizontalAccuracy(Distance horizontalAccuracy) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "328",
  "ground_truth" : "    this.verticalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setVerticalAccuracy(Distance horizontalAccuracy) {\r\n    this.verticalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}",
  "start_lineno" : "325",
  "methodName" : "setVerticalAccuracy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/133",
  "prompt" : "public TrackPoint setVerticalAccuracy(Distance horizontalAccuracy) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "336",
  "ground_truth" : "    }\r\n    return distanceToPreviousFromLocation(previous);\r\n}",
  "context" : "@NonNull\r\npublic Distance distanceToPrevious(@NonNull TrackPoint previous) {\r\n    if (hasSensorDistance()) {\r\n        return getSensorDistance();\r\n    }\r\n    return distanceToPreviousFromLocation(previous);\r\n}",
  "start_lineno" : "330",
  "methodName" : "distanceToPrevious",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/134",
  "prompt" : "@NonNull\r\npublic Distance distanceToPrevious(@NonNull TrackPoint previous) {\r\n    if (hasSensorDistance()) {\r\n        return getSensorDistance();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "345",
  "ground_truth" : "    }\r\n    return Distance.of(getLocation().distanceTo(previous.getLocation()));\r\n}",
  "context" : "@NonNull\r\npublic Distance distanceToPreviousFromLocation(@NonNull TrackPoint previous) {\r\n    if (!hasLocation() || hasLocation() != previous.hasLocation()) {\r\n        throw new RuntimeException(\"Cannot compute distance.\");\r\n    }\r\n    return Distance.of(getLocation().distanceTo(previous.getLocation()));\r\n}",
  "start_lineno" : "338",
  "methodName" : "distanceToPreviousFromLocation",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/135",
  "prompt" : "@NonNull\r\npublic Distance distanceToPreviousFromLocation(@NonNull TrackPoint previous) {\r\n    if (!hasLocation() || hasLocation() != previous.hasLocation()) {\r\n        throw new RuntimeException(\"Cannot compute distance.\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "372",
  "ground_truth" : "    this.sensorDistance = distance_m;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setSensorDistance(Distance distance_m) {\r\n    this.sensorDistance = distance_m;\r\n    return this;\r\n}",
  "start_lineno" : "369",
  "methodName" : "setSensorDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/136",
  "prompt" : "public TrackPoint setSensorDistance(Distance distance_m) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "385",
  "ground_truth" : "    if (hasAltitudeLoss() && lastTrackPoint.hasAltitudeLoss()) {\r\n        altitudeLoss_m -= lastTrackPoint.altitudeLoss_m;\r\n    }\r\n    return this;\r\n}",
  "context" : "public TrackPoint minusCumulativeSensorData(@NonNull TrackPoint lastTrackPoint) {\r\n    if (hasSensorDistance() && lastTrackPoint.hasSensorDistance()) {\r\n        sensorDistance = sensorDistance.minus(lastTrackPoint.getSensorDistance());\r\n    }\r\n    if (hasAltitudeGain() && lastTrackPoint.hasAltitudeGain()) {\r\n        altitudeGain_m -= lastTrackPoint.altitudeGain_m;\r\n    }\r\n    if (hasAltitudeLoss() && lastTrackPoint.hasAltitudeLoss()) {\r\n        altitudeLoss_m -= lastTrackPoint.altitudeLoss_m;\r\n    }\r\n    return this;\r\n}",
  "start_lineno" : "374",
  "methodName" : "minusCumulativeSensorData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/137",
  "prompt" : "public TrackPoint minusCumulativeSensorData(@NonNull TrackPoint lastTrackPoint) {\r\n    if (hasSensorDistance() && lastTrackPoint.hasSensorDistance()) {\r\n        sensorDistance = sensorDistance.minus(lastTrackPoint.getSensorDistance());\r\n    }\r\n    if (hasAltitudeGain() && lastTrackPoint.hasAltitudeGain()) {\r\n        altitudeGain_m -= lastTrackPoint.altitudeGain_m;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "398",
  "ground_truth" : "    this.heartRate = heartRate;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setHeartRate(HeartRate heartRate) {\r\n    this.heartRate = heartRate;\r\n    return this;\r\n}",
  "start_lineno" : "395",
  "methodName" : "setHeartRate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/138",
  "prompt" : "public TrackPoint setHeartRate(HeartRate heartRate) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "415",
  "ground_truth" : "    this.cadence = cadence;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setCadence(Cadence cadence) {\r\n    this.cadence = cadence;\r\n    return this;\r\n}",
  "start_lineno" : "412",
  "methodName" : "setCadence",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/139",
  "prompt" : "public TrackPoint setCadence(Cadence cadence) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Duration MAX_LOCATION_AGE = Duration.ofMinutes(1);\nprivate TrackPoint.Id id;\n@NonNull\r\nprivate final Instant time;\nprivate Double latitude;\nprivate Double longitude;\nprivate Distance horizontalAccuracy;\nprivate Distance verticalAccuracy;\nprivate Speed speed;\nprivate Float bearing;\nprivate Distance sensorDistance;\npublic final int type_db;\n@NonNull\r\nprivate Type type;\nprivate HeartRate heartRate = null;\nprivate Cadence cadence = null;\nprivate Power power = null;\nprivate Float altitudeGain_m = null;\nprivate Float altitudeLoss_m = null;\npublic static final Creator<Id> CREATOR = new Creator<>() {\r\n\r\n    public Id createFromParcel(Parcel in) {\r\n        return new Id(in.readLong());\r\n    }\r\n\r\n    public Id[] newArray(int size) {\r\n        return new Id[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "432",
  "ground_truth" : "    this.power = power;\r\n    return this;\r\n}",
  "context" : "public TrackPoint setPower(Power power) {\r\n    this.power = power;\r\n    return this;\r\n}",
  "start_lineno" : "429",
  "methodName" : "setPower",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java",
  "task_id" : "OpenTracks/140",
  "prompt" : "public TrackPoint setPower(Power power) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String[] COLUMNS = { OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE };\nprivate static final String TAG = ShareContentProvider.class.getSimpleName();\nprivate static final int URI_GPX = 0;\nprivate static final int URI_KML_WITH_TRACKDETAIL_SENSORDATA = 3;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_AND_SENSORDATA = 6;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_SENSORDATA_AND_PICTURES = 7;\nprivate static final int URI_CSV = 8;\nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\nprivate static final String TRACKID_DELIMITER = \"_\";",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "        return new HashSet<>();\r\n    }\r\n    String[] uriTrackIds = uriPaths.get(2).split(TRACKID_DELIMITER);\r\n    return Arrays.stream(uriTrackIds).map(uriTrackId -> new Track.Id(Long.parseLong(uriTrackId))).collect(Collectors.toSet());\r\n}",
  "context" : "static Set<Track.Id> parseURI(Uri uri) {\r\n    List<String> uriPaths = uri.getPathSegments();\r\n    if (uriPaths == null || uriPaths.size() < 3) {\r\n        Log.d(TAG, \"URI does not contain any trackIds.\");\r\n        return new HashSet<>();\r\n    }\r\n    String[] uriTrackIds = uriPaths.get(2).split(TRACKID_DELIMITER);\r\n    return Arrays.stream(uriTrackIds).map(uriTrackId -> new Track.Id(Long.parseLong(uriTrackId))).collect(Collectors.toSet());\r\n}",
  "start_lineno" : "101",
  "methodName" : "parseURI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ShareContentProvider.java",
  "task_id" : "OpenTracks/141",
  "prompt" : "static Set<Track.Id> parseURI(Uri uri) {\r\n    List<String> uriPaths = uri.getPathSegments();\r\n    if (uriPaths == null || uriPaths.size() < 3) {\r\n        Log.d(TAG, \"URI does not contain any trackIds.\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String[] COLUMNS = { OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE };\nprivate static final String TAG = ShareContentProvider.class.getSimpleName();\nprivate static final int URI_GPX = 0;\nprivate static final int URI_KML_WITH_TRACKDETAIL_SENSORDATA = 3;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_AND_SENSORDATA = 6;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_SENSORDATA_AND_PICTURES = 7;\nprivate static final int URI_CSV = 8;\nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\nprivate static final String TRACKID_DELIMITER = \"_\";",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "    }\r\n    if (!info.grantUriPermissions) {\r\n        throw new SecurityException(\"Provider must grant uri permissions\");\r\n    }\r\n}",
  "context" : "/**\r\n * Do not allow to be exported via AndroidManifest.\r\n * Check that caller has permissions to access {@link CustomContentProvider}.\r\n */\r\n@Override\r\npublic void attachInfo(@NonNull Context context, @NonNull ProviderInfo info) {\r\n    super.attachInfo(context, info);\r\n    // Sanity check our security\r\n    if (info.exported) {\r\n        throw new UnsupportedOperationException(\"Provider must not be exported\");\r\n    }\r\n    if (!info.grantUriPermissions) {\r\n        throw new SecurityException(\"Provider must grant uri permissions\");\r\n    }\r\n}",
  "start_lineno" : "117",
  "methodName" : "attachInfo",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ShareContentProvider.java",
  "task_id" : "OpenTracks/142",
  "prompt" : "/**\r\n * Do not allow to be exported via AndroidManifest.\r\n * Check that caller has permissions to access {@link CustomContentProvider}.\r\n */\r\n@Override\r\npublic void attachInfo(@NonNull Context context, @NonNull ProviderInfo info) {\r\n    super.attachInfo(context, info);\r\n    // Sanity check our security\r\n    if (info.exported) {\r\n        throw new UnsupportedOperationException(\"Provider must not be exported\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String[] COLUMNS = { OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE };\nprivate static final String TAG = ShareContentProvider.class.getSimpleName();\nprivate static final int URI_GPX = 0;\nprivate static final int URI_KML_WITH_TRACKDETAIL_SENSORDATA = 3;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_AND_SENSORDATA = 6;\nprivate static final int URI_KMZ_WITH_TRACKDETAIL_SENSORDATA_AND_PICTURES = 7;\nprivate static final int URI_CSV = 8;\nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\nprivate static final String TRACKID_DELIMITER = \"_\";",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "    if (mime != null) {\r\n        return mime;\r\n    }\r\n    return super.getType(uri);\r\n}",
  "context" : "@Nullable\r\n@Override\r\npublic String getType(@NonNull Uri uri) {\r\n    String mime = getTypeMime(uri);\r\n    if (mime != null) {\r\n        return mime;\r\n    }\r\n    return super.getType(uri);\r\n}",
  "start_lineno" : "186",
  "methodName" : "getType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ShareContentProvider.java",
  "task_id" : "OpenTracks/143",
  "prompt" : "@Nullable\r\n@Override\r\npublic String getType(@NonNull Uri uri) {\r\n    String mime = getTypeMime(uri);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "        }\r\n        selectedTrackId = trackId;\r\n        loadDataForAll();\r\n    });\r\n}",
  "context" : "public void loadTrack(@NonNull final Track.Id trackId) {\r\n    handler.post(() -> {\r\n        if (trackId.equals(selectedTrackId)) {\r\n            Log.i(TAG, \"Not reloading track \" + trackId.id());\r\n            return;\r\n        }\r\n        selectedTrackId = trackId;\r\n        loadDataForAll();\r\n    });\r\n}",
  "start_lineno" : "166",
  "methodName" : "loadTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/144",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.util.Log\npublic void loadTrack(@NonNull final Track.Id trackId) {\r\n    handler.post(() -> {\r\n        if (trackId.equals(selectedTrackId)) {\r\n            Log.i(TAG, \"Not reloading track \" + trackId.id());\r\n            return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "189",
  "ground_truth" : "        if (isStarted()) {\r\n            loadDataForListener(trackDataListener);\r\n        }\r\n    });\r\n}",
  "context" : "/**\r\n * Registers a {@link Listener}.\r\n *\r\n * @param trackDataListener the track data listener\r\n */\r\npublic void registerTrackDataListener(final Listener trackDataListener) {\r\n    handler.post(() -> {\r\n        listeners.add(trackDataListener);\r\n        if (isStarted()) {\r\n            loadDataForListener(trackDataListener);\r\n        }\r\n    });\r\n}",
  "start_lineno" : "182",
  "methodName" : "registerTrackDataListener",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/145",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\n/**\r\n * Registers a {@link Listener}.\r\n *\r\n * @param trackDataListener the track data listener\r\n */\r\npublic void registerTrackDataListener(final Listener trackDataListener) {\r\n    handler.post(() -> {\r\n        listeners.add(trackDataListener);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "        listener.clearTrackPoints();\r\n    }\r\n    notifyTrackPointsTableUpdate(true, listeners);\r\n    notifyMarkersTableUpdate(listeners);\r\n}",
  "context" : "/**\r\n * Loads data for all listeners. To be run in the {@link #handler} thread.\r\n */\r\nprivate void loadDataForAll() {\r\n    resetSamplingState();\r\n    if (listeners.isEmpty()) {\r\n        return;\r\n    }\r\n    notifyTracksTableUpdate(listeners);\r\n    for (Listener listener : listeners) {\r\n        listener.clearTrackPoints();\r\n    }\r\n    notifyTrackPointsTableUpdate(true, listeners);\r\n    notifyMarkersTableUpdate(listeners);\r\n}",
  "start_lineno" : "210",
  "methodName" : "loadDataForAll",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/146",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\n/**\r\n * Loads data for all listeners. To be run in the {@link #handler} thread.\r\n */\r\nprivate void loadDataForAll() {\r\n    resetSamplingState();\r\n    if (listeners.isEmpty()) {\r\n        return;\r\n    }\r\n    notifyTracksTableUpdate(listeners);\r\n    for (Listener listener : listeners) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "246",
  "ground_truth" : "    }\r\n    notifyTrackPointsTableUpdate(isOnlyListener, trackDataListeners);\r\n    //Markers\r\n    notifyMarkersTableUpdate(trackDataListeners);\r\n}",
  "context" : "/**\r\n * Loads data for a listener; to be run in the {@link #handler} thread.\r\n *\r\n * @param trackDataListener the track data listener.\r\n */\r\nprivate void loadDataForListener(Listener trackDataListener) {\r\n    Set<Listener> trackDataListeners = Collections.singleton(trackDataListener);\r\n    //Track\r\n    notifyTracksTableUpdate(trackDataListeners);\r\n    //TrackPoints\r\n    trackDataListener.clearTrackPoints();\r\n    boolean isOnlyListener = listeners.size() == 1;\r\n    if (isOnlyListener) {\r\n        resetSamplingState();\r\n    }\r\n    notifyTrackPointsTableUpdate(isOnlyListener, trackDataListeners);\r\n    //Markers\r\n    notifyMarkersTableUpdate(trackDataListeners);\r\n}",
  "start_lineno" : "230",
  "methodName" : "loadDataForListener",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/147",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.Set\nimport java.util.Collections\n/**\r\n * Loads data for a listener; to be run in the {@link #handler} thread.\r\n *\r\n * @param trackDataListener the track data listener.\r\n */\r\nprivate void loadDataForListener(Listener trackDataListener) {\r\n    Set<Listener> trackDataListeners = Collections.singleton(trackDataListener);\r\n    //Track\r\n    notifyTracksTableUpdate(trackDataListeners);\r\n    //TrackPoints\r\n    trackDataListener.clearTrackPoints();\r\n    boolean isOnlyListener = listeners.size() == 1;\r\n    if (isOnlyListener) {\r\n        resetSamplingState();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "    Track track = contentProviderUtils.getTrack(selectedTrackId);\r\n    for (Listener trackDataListener : trackDataListeners) {\r\n        trackDataListener.onTrackUpdated(track);\r\n    }\r\n}",
  "context" : "/**\r\n * Notifies track table update; to be run in the {@link #handler} thread.\r\n *\r\n * @param trackDataListeners the track data listeners to notify\r\n */\r\nprivate void notifyTracksTableUpdate(Set<Listener> trackDataListeners) {\r\n    if (trackDataListeners.isEmpty()) {\r\n        return;\r\n    }\r\n    Track track = contentProviderUtils.getTrack(selectedTrackId);\r\n    for (Listener trackDataListener : trackDataListeners) {\r\n        trackDataListener.onTrackUpdated(track);\r\n    }\r\n}",
  "start_lineno" : "253",
  "methodName" : "notifyTracksTableUpdate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/148",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.Set\n/**\r\n * Notifies track table update; to be run in the {@link #handler} thread.\r\n *\r\n * @param trackDataListeners the track data listeners to notify\r\n */\r\nprivate void notifyTracksTableUpdate(Set<Listener> trackDataListeners) {\r\n    if (trackDataListeners.isEmpty()) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Target number of track points displayed by the diagrams (recommended).\r\n * We may display more than this number of points.\r\n */\r\nprivate static final int TARGET_DISPLAYED_TRACKPOINTS = 5000;\n/**\r\n * Maximum number of markers to displayed in the diagrams.\r\n */\r\n@VisibleForTesting\r\nprivate static final int MAX_DISPLAYED_MARKERS = 128;\nprivate static final String TAG = TrackDataHub.class.getSimpleName();\nprivate final Context context;\nprivate final Set<Listener> listeners;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final int targetNumPoints;\nprivate final AltitudeCorrectionManager egm2008Correction = new AltitudeCorrectionManager();\nprivate Handler handler;\nprivate Track.Id selectedTrackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackPoint.Id firstSeenTrackPointId;\nprivate TrackPoint.Id lastSeenTrackPointId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate ContentObserver markersTableObserver;\nprivate ContentObserver trackPointsTableObserver;",
  "app_type" : "life",
  "end_lineno" : "402",
  "ground_truth" : "    lastSeenTrackPointId = null;\r\n    trackStatisticsUpdater = new TrackStatisticsUpdater();\r\n}",
  "context" : "/**\r\n * Resets the track points sampling states.\r\n */\r\nprivate void resetSamplingState() {\r\n    numLoadedPoints = 0;\r\n    firstSeenTrackPointId = null;\r\n    lastSeenTrackPointId = null;\r\n    trackStatisticsUpdater = new TrackStatisticsUpdater();\r\n}",
  "start_lineno" : "397",
  "methodName" : "resetSamplingState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java",
  "task_id" : "OpenTracks/149",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\n/**\r\n * Resets the track points sampling states.\r\n */\r\nprivate void resetSamplingState() {\r\n    numLoadedPoints = 0;\r\n    firstSeenTrackPointId = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointIterator.class.getSimpleName();\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Track.Id trackId;\nprivate final CachedTrackPointsIndexes indexes;\nprivate Cursor cursor;",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "    }\r\n    return !cursor.isLast() && !cursor.isAfterLast();\r\n}",
  "context" : "@Override\r\npublic boolean hasNext() {\r\n    if (cursor == null) {\r\n        return false;\r\n    }\r\n    return !cursor.isLast() && !cursor.isAfterLast();\r\n}",
  "start_lineno" : "38",
  "methodName" : "hasNext",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java",
  "task_id" : "OpenTracks/150",
  "prompt" : "@Override\r\npublic boolean hasNext() {\r\n    if (cursor == null) {\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointIterator.class.getSimpleName();\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Track.Id trackId;\nprivate final CachedTrackPointsIndexes indexes;\nprivate Cursor cursor;",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "    }\r\n    return ContentProviderUtils.fillTrackPoint(cursor, indexes);\r\n}",
  "context" : "@Override\r\n@NonNull\r\npublic TrackPoint next() {\r\n    if (cursor == null || !cursor.moveToNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return ContentProviderUtils.fillTrackPoint(cursor, indexes);\r\n}",
  "start_lineno" : "46",
  "methodName" : "next",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java",
  "task_id" : "OpenTracks/151",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.NoSuchElementException\nimport androidx.annotation.NonNull\n@Override\r\n@NonNull\r\npublic TrackPoint next() {\r\n    if (cursor == null || !cursor.moveToNext()) {\r\n        throw new NoSuchElementException();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointIterator.class.getSimpleName();\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Track.Id trackId;\nprivate final CachedTrackPointsIndexes indexes;\nprivate Cursor cursor;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        cursor = null;\r\n    }\r\n}",
  "context" : "@Override\r\npublic void close() {\r\n    if (cursor != null) {\r\n        cursor.close();\r\n        cursor = null;\r\n    }\r\n}",
  "start_lineno" : "60",
  "methodName" : "close",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java",
  "task_id" : "OpenTracks/152",
  "prompt" : "@Override\r\npublic void close() {\r\n    if (cursor != null) {\r\n        cursor.close();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<String> categories = new ArrayList<>();\nprivate Instant from;\nprivate Instant to;",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "    this.to = to;\r\n    return this;\r\n}",
  "context" : "public TrackSelection addDateRange(Instant from, Instant to) {\r\n    this.from = from;\r\n    this.to = to;\r\n    return this;\r\n}",
  "start_lineno" : "20",
  "methodName" : "addDateRange",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java",
  "task_id" : "OpenTracks/153",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.time.Instant\npublic TrackSelection addDateRange(Instant from, Instant to) {\r\n    this.from = from;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<String> categories = new ArrayList<>();\nprivate Instant from;\nprivate Instant to;",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "    }\r\n    return this;\r\n}",
  "context" : "public TrackSelection addTrackId(Track.Id trackId) {\r\n    if (!this.trackIds.contains(trackId)) {\r\n        this.trackIds.add(trackId);\r\n    }\r\n    return this;\r\n}",
  "start_lineno" : "26",
  "methodName" : "addTrackId",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java",
  "task_id" : "OpenTracks/154",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\npublic TrackSelection addTrackId(Track.Id trackId) {\r\n    if (!this.trackIds.contains(trackId)) {\r\n        this.trackIds.add(trackId);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<String> categories = new ArrayList<>();\nprivate Instant from;\nprivate Instant to;",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "    }\r\n    return this;\r\n}",
  "context" : "public TrackSelection addActivityType(String activityType) {\r\n    if (!this.categories.contains(activityType)) {\r\n        this.categories.add(activityType);\r\n    }\r\n    return this;\r\n}",
  "start_lineno" : "33",
  "methodName" : "addActivityType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java",
  "task_id" : "OpenTracks/155",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\npublic TrackSelection addActivityType(String activityType) {\r\n    if (!this.categories.contains(activityType)) {\r\n        this.categories.add(activityType);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();",
  "app_type" : "life",
  "end_lineno" : "15",
  "ground_truth" : "    long lestSignificant = byteBuffer.getLong();\r\n    return new UUID(mostSignificant, lestSignificant);\r\n}",
  "context" : "public static UUID fromBytes(byte[] bytes) {\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    long mostSignificant = byteBuffer.getLong();\r\n    long lestSignificant = byteBuffer.getLong();\r\n    return new UUID(mostSignificant, lestSignificant);\r\n}",
  "start_lineno" : "10",
  "methodName" : "fromBytes",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\UUIDUtils.java",
  "task_id" : "OpenTracks/156",
  "prompt" : "import java.util.UUID\nimport java.nio.ByteBuffer\npublic static UUID fromBytes(byte[] bytes) {\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    long mostSignificant = byteBuffer.getLong();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "    byteBuffer.putLong(uuid.getLeastSignificantBits());\r\n    return byteBuffer.array();\r\n}",
  "context" : "public static byte[] toBytes(@NonNull UUID uuid) {\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(16);\r\n    byteBuffer.putLong(uuid.getMostSignificantBits());\r\n    byteBuffer.putLong(uuid.getLeastSignificantBits());\r\n    return byteBuffer.array();\r\n}",
  "start_lineno" : "17",
  "methodName" : "toBytes",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\UUIDUtils.java",
  "task_id" : "OpenTracks/157",
  "prompt" : "import java.util.UUID\nimport java.nio.ByteBuffer\nimport androidx.annotation.NonNull\npublic static byte[] toBytes(@NonNull UUID uuid) {\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(16);\r\n    byteBuffer.putLong(uuid.getMostSignificantBits());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        hexChars[i * 2] = HEX_ARRAY[v >>> 4];\r\n        hexChars[i * 2 + 1] = HEX_ARRAY[v & 0x0F];\r\n    }\r\n    return new String(hexChars);\r\n}",
  "context" : "public static String toHex(@NonNull UUID uuid) {\r\n    byte[] bytes = toBytes(uuid);\r\n    char[] hexChars = new char[bytes.length * 2];\r\n    for (int i = 0; i < bytes.length; i++) {\r\n        int v = bytes[i] & 0xFF;\r\n        hexChars[i * 2] = HEX_ARRAY[v >>> 4];\r\n        hexChars[i * 2 + 1] = HEX_ARRAY[v & 0x0F];\r\n    }\r\n    return new String(hexChars);\r\n}",
  "start_lineno" : "26",
  "methodName" : "toHex",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\UUIDUtils.java",
  "task_id" : "OpenTracks/158",
  "prompt" : "import java.util.UUID\nimport androidx.annotation.NonNull\npublic static String toHex(@NonNull UUID uuid) {\r\n    byte[] bytes = toBytes(uuid);\r\n    char[] hexChars = new char[bytes.length * 2];\r\n    for (int i = 0; i < bytes.length; i++) {\r\n        int v = bytes[i] & 0xFF;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "    ActivityType activityType = ActivityType.findByLocalizedString(context, activityTypeLocalized);\r\n    showDialog(fragmentManager, activityType);\r\n}",
  "context" : "@Deprecated\r\npublic static void showDialog(FragmentManager fragmentManager, Context context, String activityTypeLocalized) {\r\n    ActivityType activityType = ActivityType.findByLocalizedString(context, activityTypeLocalized);\r\n    showDialog(fragmentManager, activityType);\r\n}",
  "start_lineno" : "26",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/159",
  "prompt" : "import androidx.fragment.app.FragmentManager\nimport android.content.Context\nimport android.app.Dialog\n@Deprecated\r\npublic static void showDialog(FragmentManager fragmentManager, Context context, String activityTypeLocalized) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "    }\r\n    return activityTypes.indexOf(activityType);\r\n}",
  "context" : "private static int getPosition(Context context, ActivityType activityType) {\r\n    if (activityType == null) {\r\n        return -1;\r\n    }\r\n    return activityTypes.indexOf(activityType);\r\n}",
  "start_lineno" : "60",
  "methodName" : "getPosition",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/160",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\nimport android.content.Context\nprivate static int getPosition(Context context, ActivityType activityType) {\r\n    if (activityType == null) {\r\n        return -1;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "    dialog.setTitle(R.string.track_edit_activity_type_hint);\r\n    return dialog;\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n    dialog.setTitle(R.string.track_edit_activity_type_hint);\r\n    return dialog;\r\n}",
  "start_lineno" : "78",
  "methodName" : "onCreateDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/161",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        chooseActivityTypeCaller = (ChooseActivityTypeCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + ChooseActivityTypeCaller.class.getSimpleName());\r\n    }\r\n}",
  "context" : "public void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        chooseActivityTypeCaller = (ChooseActivityTypeCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + ChooseActivityTypeCaller.class.getSimpleName());\r\n    }\r\n}",
  "start_lineno" : "106",
  "methodName" : "onAttach",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/162",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "119",
  "ground_truth" : "    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "115",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/163",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String CHOOSE_ACTIVITY_TYPE_DIALOG_TAG = \"chooseActivityType\";\nprivate static final List<ActivityType> activityTypes = List.of(ActivityType.UNKNOWN, ActivityType.AIRPLANE, ActivityType.BIKING, ActivityType.MOUNTAIN_BIKING, ActivityType.MOTOR_BIKE, ActivityType.KAYAKING, ActivityType.BOAT, ActivityType.SAILING, ActivityType.DRIVING, ActivityType.RUNNING, ActivityType.SNOW_BOARDING, ActivityType.SKIING, ActivityType.WALKING, ActivityType.KICKSCOOTER, ActivityType.ESCOOTER, ActivityType.INLINE_SKATING, ActivityType.SKATE_BOARDING, ActivityType.CLIMBING, ActivityType.SWIMMING, ActivityType.SWIMMING_OPEN, ActivityType.WORKOUT);\nprivate ChooseActivityTypeBinding viewBinding;\nprivate final ActivityType preselectedActivityType;\nprivate ChooseActivityTypeCaller chooseActivityTypeCaller;",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    chooseActivityTypeCaller.onChooseActivityTypeDone(activityTypes.get(position));\r\n    dismiss();\r\n}",
  "context" : "@Override\r\npublic void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\r\n    chooseActivityTypeCaller.onChooseActivityTypeDone(activityTypes.get(position));\r\n    dismiss();\r\n}",
  "start_lineno" : "121",
  "methodName" : "onItemClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java",
  "task_id" : "OpenTracks/164",
  "prompt" : "import android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final List<Integer> imageIds;\nprivate int selected = -1;",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "    selected = position;\r\n    notifyDataSetChanged();\r\n}",
  "context" : "public void setSelected(int position) {\r\n    selected = position;\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "61",
  "methodName" : "setSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeImageAdapter.java",
  "task_id" : "OpenTracks/165",
  "prompt" : "public void setSelected(int position) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "    bundle.putParcelable(TRACK_ID_KEY, trackId);\r\n    StatisticsRecordedFragment fragment = new StatisticsRecordedFragment();\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "context" : "public static StatisticsRecordedFragment newInstance(Track.Id trackId) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelable(TRACK_ID_KEY, trackId);\r\n    StatisticsRecordedFragment fragment = new StatisticsRecordedFragment();\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "start_lineno" : "59",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/166",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport androidx.fragment.app.Fragment\nimport android.os.Bundle\npublic static StatisticsRecordedFragment newInstance(Track.Id trackId) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "    trackId = getArguments().getParcelable(TRACK_ID_KEY);\r\n    contentProviderUtils = new ContentProviderUtils(getContext());\r\n}",
  "context" : "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    trackId = getArguments().getParcelable(TRACK_ID_KEY);\r\n    contentProviderUtils = new ContentProviderUtils(getContext());\r\n}",
  "start_lineno" : "103",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/167",
  "prompt" : "import androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "    viewBinding = StatisticsRecordedBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = StatisticsRecordedBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "111",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/168",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    loadStatistics();\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    loadStatistics();\r\n}",
  "start_lineno" : "118",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/169",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "127",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/170",
  "prompt" : "@Override\r\npublic void onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "134",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/171",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordedFragment.class.getSimpleName();\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate SensorStatistics sensorStatistics;\nprivate Track.Id trackId;\nprivate ContentProviderUtils contentProviderUtils;\nprivate StatisticsRecordedBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean preferenceReportSpeed;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    boolean updateUInecessary = false;\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        updateUInecessary = true;\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_rate_key, key) && track != null) {\r\n        updateUInecessary = true;\r\n        preferenceReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    if (key != null && updateUInecessary && isResumed()) {\r\n        getActivity().runOnUiThread(() -> {\r\n            if (isResumed()) {\r\n                updateUI();\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "    viewBinding.statsDescriptionValue.setText(track.getDescription());\r\n    viewBinding.statsStartDatetimeValue.setText(StringUtils.formatDateTimeWithOffsetIfDifferent(track.getStartTime()));\r\n}",
  "context" : "private void loadTrackDescription(@NonNull Track track) {\r\n    viewBinding.statsNameValue.setText(track.getName());\r\n    viewBinding.statsDescriptionValue.setText(track.getDescription());\r\n    viewBinding.statsStartDatetimeValue.setText(StringUtils.formatDateTimeWithOffsetIfDifferent(track.getStartTime()));\r\n}",
  "start_lineno" : "169",
  "methodName" : "loadTrackDescription",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java",
  "task_id" : "OpenTracks/172",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nprivate void loadTrackDescription(@NonNull Track track) {\r\n    viewBinding.statsNameValue.setText(track.getName());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "    super.onCreate(savedInstanceState);\r\n    trackRecordingServiceConnection = new TrackRecordingServiceConnection(bindChangedCallback);\r\n}",
  "context" : "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    trackRecordingServiceConnection = new TrackRecordingServiceConnection(bindChangedCallback);\r\n}",
  "start_lineno" : "73",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/173",
  "prompt" : "import androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "    viewBinding = StatisticsRecordingBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = StatisticsRecordingBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "79",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/174",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    trackRecordingServiceConnection.bind(getContext());\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    trackRecordingServiceConnection.bind(getContext());\r\n}",
  "start_lineno" : "85",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/175",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "94",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/176",
  "prompt" : "@Override\r\npublic void onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "    super.onStop();\r\n    trackRecordingServiceConnection.unbind(getContext());\r\n}",
  "context" : "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    trackRecordingServiceConnection.unbind(getContext());\r\n}",
  "start_lineno" : "100",
  "methodName" : "onStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/177",
  "prompt" : "@Override\r\npublic void onStop() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "    viewHolders.clear();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewHolders.clear();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "106",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/178",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "    super.onDestroy();\r\n    trackRecordingServiceConnection = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    trackRecordingServiceConnection = null;\r\n}",
  "start_lineno" : "113",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/179",
  "prompt" : "@Override\r\npublic void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "178",
  "ground_truth" : "    if (!oldCategory.equals(newCategory)) {\r\n        sharedPreferenceChangeListener.onSharedPreferenceChanged(null, getString(R.string.stats_rate_key));\r\n    }\r\n    updateDataOnUI();\r\n}",
  "context" : "private void onRecordingDataChanged(RecordingData recordingData) {\r\n    String oldCategory = this.recordingData.getTrackCategory();\r\n    String newCategory = recordingData.getTrackCategory();\r\n    this.recordingData = recordingData;\r\n    if (!oldCategory.equals(newCategory)) {\r\n        sharedPreferenceChangeListener.onSharedPreferenceChanged(null, getString(R.string.stats_rate_key));\r\n    }\r\n    updateDataOnUI();\r\n}",
  "start_lineno" : "168",
  "methodName" : "onRecordingDataChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/180",
  "prompt" : "import de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nprivate void onRecordingDataChanged(RecordingData recordingData) {\r\n    String oldCategory = this.recordingData.getTrackCategory();\r\n    String newCategory = recordingData.getTrackCategory();\r\n    this.recordingData = recordingData;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StatisticsRecordingFragment.class.getSimpleName();\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingData recordingData = TrackRecordingService.NOT_RECORDING;\nprivate final List<StatisticViewHolder<?>> viewHolders = new LinkedList<>();\nprivate RecordingLayout recordingLayout;\nprivate StatisticsRecordingBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        updateDataOnUI();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_custom_layouts_key, key) || PreferencesUtils.isKey(R.string.stats_custom_layout_selected_layout_key, key)) {\r\n        onLayoutChanged(PreferencesUtils.getCustomLayout());\r\n    }\r\n};\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> service.getRecordingDataObservable().observe(StatisticsRecordingFragment.this, this::onRecordingDataChanged);",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "        viewHolders.forEach(i -> i.onChanged(unitSystem, recordingData));\r\n    }\r\n}",
  "context" : "private void updateDataOnUI() {\r\n    if (isResumed()) {\r\n        viewHolders.forEach(i -> i.onChanged(unitSystem, recordingData));\r\n    }\r\n}",
  "start_lineno" : "180",
  "methodName" : "updateDataOnUI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java",
  "task_id" : "OpenTracks/181",
  "prompt" : "import de.dennisguse.opentracks.R\nprivate void updateDataOnUI() {\r\n    if (isResumed()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private HelpBinding helpBinding;",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "    setSupportActionBar(helpBinding.bottomAppBarLayout.bottomAppBar);\r\n    ViewUtils.makeClickableLinks(findViewById(android.R.id.content));\r\n}",
  "context" : "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setSupportActionBar(helpBinding.bottomAppBarLayout.bottomAppBar);\r\n    ViewUtils.makeClickableLinks(findViewById(android.R.id.content));\r\n}",
  "start_lineno" : "15",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\HelpActivity.java",
  "task_id" : "OpenTracks/182",
  "prompt" : "import androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private HelpBinding helpBinding;",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "    helpBinding = HelpBinding.inflate(getLayoutInflater());\r\n    return helpBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    helpBinding = HelpBinding.inflate(getLayoutInflater());\r\n    return helpBinding.getRoot();\r\n}",
  "start_lineno" : "22",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\HelpActivity.java",
  "task_id" : "OpenTracks/183",
  "prompt" : "import android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private IntroductionBinding viewBinding;\nprivate static final List<FragmentCreator> fragmentCreators = List.of(WelcomeFragment::newInstance, OSMDashboardFragment::newInstance);",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "    viewBinding = IntroductionBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = IntroductionBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "50",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\IntroductionActivity.java",
  "task_id" : "OpenTracks/184",
  "prompt" : "import android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN"
}, {
  "variables" : "private IntroductionBinding viewBinding;\nprivate static final List<FragmentCreator> fragmentCreators = List.of(WelcomeFragment::newInstance, OSMDashboardFragment::newInstance);",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "56",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\IntroductionActivity.java",
  "task_id" : "OpenTracks/185",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN"
}, {
  "variables" : "private IntroductionBinding viewBinding;\nprivate static final List<FragmentCreator> fragmentCreators = List.of(WelcomeFragment::newInstance, OSMDashboardFragment::newInstance);",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "    if (fc != null) {\r\n        return fc.newInstance();\r\n    }\r\n    throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    FragmentCreator fc = fragmentCreators.get(position);\r\n    if (fc != null) {\r\n        return fc.newInstance();\r\n    }\r\n    throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n}",
  "start_lineno" : "73",
  "methodName" : "createFragment",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\IntroductionActivity.java",
  "task_id" : "OpenTracks/186",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    FragmentCreator fc = fragmentCreators.get(position);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN"
}, {
  "variables" : "private OsmDashboardBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "    viewBinding = OsmDashboardBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = OsmDashboardBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "21",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\OSMDashboardFragment.java",
  "task_id" : "OpenTracks/187",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private OsmDashboardBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "27",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\OSMDashboardFragment.java",
  "task_id" : "OpenTracks/188",
  "prompt" : "@Override\r\npublic void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private WelcomeBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "    viewBinding = WelcomeBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = WelcomeBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "26",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\WelcomeFragment.java",
  "task_id" : "OpenTracks/189",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private WelcomeBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "32",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\WelcomeFragment.java",
  "task_id" : "OpenTracks/190",
  "prompt" : "@Override\r\npublic void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ErrorListDialog.class.getSimpleName();\nprivate static final String EXTRA_TITLE = \"extra_title\";\nprivate static final String EXTRA_ERROR_LIST = \"extra_error_list\";\nprivate ArrayList<String> errorList;\nprivate String title;",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "    ErrorListDialog errorListDialog = new ErrorListDialog();\r\n    errorListDialog.setArguments(bundle);\r\n    errorListDialog.setRetainInstance(true);\r\n    errorListDialog.show(fragmentManager, TAG);\r\n}",
  "context" : "public static void showDialog(FragmentManager fragmentManager, String title, ArrayList<String> errorList) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(EXTRA_TITLE, title);\r\n    bundle.putStringArrayList(EXTRA_ERROR_LIST, errorList);\r\n    ErrorListDialog errorListDialog = new ErrorListDialog();\r\n    errorListDialog.setArguments(bundle);\r\n    errorListDialog.setRetainInstance(true);\r\n    errorListDialog.show(fragmentManager, TAG);\r\n}",
  "start_lineno" : "24",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\ErrorListDialog.java",
  "task_id" : "OpenTracks/191",
  "prompt" : "import java.util.ArrayList\nimport androidx.fragment.app.FragmentManager\nimport android.os.Bundle\nimport android.app.Dialog\npublic static void showDialog(FragmentManager fragmentManager, String title, ArrayList<String> errorList) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(EXTRA_TITLE, title);\r\n    bundle.putStringArrayList(EXTRA_ERROR_LIST, errorList);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ErrorListDialog.class.getSimpleName();\nprivate static final String EXTRA_TITLE = \"extra_title\";\nprivate static final String EXTRA_ERROR_LIST = \"extra_error_list\";\nprivate ArrayList<String> errorList;\nprivate String title;",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "    } else {\r\n        title = savedInstanceState.getString(EXTRA_TITLE);\r\n        errorList = savedInstanceState.getStringArrayList(EXTRA_ERROR_LIST);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    if (savedInstanceState == null) {\r\n        title = getArguments().getString(EXTRA_TITLE);\r\n        errorList = getArguments().getStringArrayList(EXTRA_ERROR_LIST);\r\n    } else {\r\n        title = savedInstanceState.getString(EXTRA_TITLE);\r\n        errorList = savedInstanceState.getStringArrayList(EXTRA_ERROR_LIST);\r\n    }\r\n}",
  "start_lineno" : "35",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\ErrorListDialog.java",
  "task_id" : "OpenTracks/192",
  "prompt" : "import java.util.ArrayList\nimport androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    if (savedInstanceState == null) {\r\n        title = getArguments().getString(EXTRA_TITLE);\r\n        errorList = getArguments().getStringArrayList(EXTRA_ERROR_LIST);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ErrorListDialog.class.getSimpleName();\nprivate static final String EXTRA_TITLE = \"extra_title\";\nprivate static final String EXTRA_ERROR_LIST = \"extra_error_list\";\nprivate ArrayList<String> errorList;\nprivate String title;",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "    outState.putString(EXTRA_TITLE, title);\r\n    outState.putStringArrayList(EXTRA_ERROR_LIST, errorList);\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putString(EXTRA_TITLE, title);\r\n    outState.putStringArrayList(EXTRA_ERROR_LIST, errorList);\r\n}",
  "start_lineno" : "48",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\ErrorListDialog.java",
  "task_id" : "OpenTracks/193",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ErrorListDialog.class.getSimpleName();\nprivate static final String EXTRA_TITLE = \"extra_title\";\nprivate static final String EXTRA_ERROR_LIST = \"extra_error_list\";\nprivate ArrayList<String> errorList;\nprivate String title;",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity()).setTitle(title).setItems(tracks, null).setPositiveButton(android.R.string.ok, (dialog, which) -> dismiss());\r\n    return alertDialogBuilder.create();\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    final String[] tracks = errorList.toArray(new String[0]);\r\n    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity()).setTitle(title).setItems(tracks, null).setPositiveButton(android.R.string.ok, (dialog, which) -> dismiss());\r\n    return alertDialogBuilder.create();\r\n}",
  "start_lineno" : "55",
  "methodName" : "onCreateDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\ErrorListDialog.java",
  "task_id" : "OpenTracks/194",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    final String[] tracks = errorList.toArray(new String[0]);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CSVTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nfinal String columnName;\nFunction<TrackPoint, String> extractor;",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "                throw new InterruptedException();\r\n            writeTrackPoint(columns, trackPointIterator.next());\r\n        }\r\n    }\r\n}",
  "context" : "private void writeTrackPoints(List<Column> columns, Track track) throws InterruptedException {\r\n    try (TrackPointIterator trackPointIterator = contentProviderUtils.getTrackPointLocationIterator(track.getId(), null)) {\r\n        while (trackPointIterator.hasNext()) {\r\n            if (Thread.interrupted())\r\n                throw new InterruptedException();\r\n            writeTrackPoint(columns, trackPointIterator.next());\r\n        }\r\n    }\r\n}",
  "start_lineno" : "134",
  "methodName" : "writeTrackPoints",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\CSVTrackExporter.java",
  "task_id" : "OpenTracks/195",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackPointIterator\nimport java.util.List\nprivate void writeTrackPoints(List<Column> columns, Track track) throws InterruptedException {\r\n    try (TrackPointIterator trackPointIterator = contentProviderUtils.getTrackPointLocationIterator(track.getId(), null)) {\r\n        while (trackPointIterator.hasNext()) {\r\n            if (Thread.interrupted())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CSVTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nfinal String columnName;\nFunction<TrackPoint, String> extractor;",
  "app_type" : "life",
  "end_lineno" : "151",
  "ground_truth" : "    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "context" : "public void close() {\r\n    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "start_lineno" : "148",
  "methodName" : "close",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\CSVTrackExporter.java",
  "task_id" : "OpenTracks/196",
  "prompt" : "public void close() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CSVTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nfinal String columnName;\nFunction<TrackPoint, String> extractor;",
  "app_type" : "life",
  "end_lineno" : "156",
  "ground_truth" : "    String columnNames = columns.stream().map(c -> c.columnName).reduce((s, s2) -> s + \",\" + s2).orElseThrow(() -> new RuntimeException(\"No columns defined\"));\r\n    printWriter.println(\"#\" + columnNames);\r\n}",
  "context" : "public void writeHeader(List<Column> columns) {\r\n    String columnNames = columns.stream().map(c -> c.columnName).reduce((s, s2) -> s + \",\" + s2).orElseThrow(() -> new RuntimeException(\"No columns defined\"));\r\n    printWriter.println(\"#\" + columnNames);\r\n}",
  "start_lineno" : "153",
  "methodName" : "writeHeader",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\CSVTrackExporter.java",
  "task_id" : "OpenTracks/197",
  "prompt" : "import java.util.List\npublic void writeHeader(List<Column> columns) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = CSVTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nfinal String columnName;\nFunction<TrackPoint, String> extractor;",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "    String columnNames = columns.stream().map(c -> c.extractor.apply(trackPoint)).reduce((s, s2) -> s + \",\" + s2).orElseThrow(() -> new RuntimeException(\"No columns defined\"));\r\n    printWriter.println(columnNames);\r\n}",
  "context" : "public void writeTrackPoint(List<Column> columns, TrackPoint trackPoint) {\r\n    String columnNames = columns.stream().map(c -> c.extractor.apply(trackPoint)).reduce((s, s2) -> s + \",\" + s2).orElseThrow(() -> new RuntimeException(\"No columns defined\"));\r\n    printWriter.println(columnNames);\r\n}",
  "start_lineno" : "158",
  "methodName" : "writeTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\CSVTrackExporter.java",
  "task_id" : "OpenTracks/198",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\npublic void writeTrackPoint(List<Column> columns, TrackPoint trackPoint) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "215",
  "ground_truth" : "    conflictsQueue.clear();\r\n    exportTasks.clear();\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    conflictsQueue.clear();\r\n    exportTasks.clear();\r\n}",
  "start_lineno" : "210",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/199",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "    }\r\n    this.doubleBackToCancel = true;\r\n    Toast.makeText(this, getString(R.string.generic_click_twice_cancel), Toast.LENGTH_SHORT).show();\r\n    new Handler().postDelayed(() -> doubleBackToCancel = false, 2000);\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    if (doubleBackToCancel || getTotalDone() == trackExportTotalCount) {\r\n        super.onBackPressed();\r\n        return;\r\n    }\r\n    this.doubleBackToCancel = true;\r\n    Toast.makeText(this, getString(R.string.generic_click_twice_cancel), Toast.LENGTH_SHORT).show();\r\n    new Handler().postDelayed(() -> doubleBackToCancel = false, 2000);\r\n}",
  "start_lineno" : "217",
  "methodName" : "onBackPressed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/200",
  "prompt" : "@Override\r\npublic void onBackPressed() {\r\n    if (doubleBackToCancel || getTotalDone() == trackExportTotalCount) {\r\n        super.onBackPressed();\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "256",
  "ground_truth" : "        nextExport(exportTask);\r\n    } else {\r\n        ExportService.enqueue(this, resultReceiver, exportTask, directoryUri);\r\n    }\r\n}",
  "context" : "/**\r\n * Enqueue track identified by UUID to be exported if not exported already or there is a conflict resolution.\r\n */\r\nprivate void export(ExportTask exportTask, ConflictResolutionStrategy conflictResolution) {\r\n    boolean fileExists = exportFileExists(exportTask);\r\n    if (fileExists && conflictResolution == ConflictResolutionStrategy.CONFLICT_NONE) {\r\n        conflict(exportTask);\r\n    } else if (fileExists && conflictResolution == ConflictResolutionStrategy.CONFLICT_SKIP) {\r\n        trackExportSkippedCount++;\r\n        nextExport(exportTask);\r\n    } else {\r\n        ExportService.enqueue(this, resultReceiver, exportTask, directoryUri);\r\n    }\r\n}",
  "start_lineno" : "245",
  "methodName" : "export",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/201",
  "prompt" : "import de.dennisguse.opentracks.R\n/**\r\n * Enqueue track identified by UUID to be exported if not exported already or there is a conflict resolution.\r\n */\r\nprivate void export(ExportTask exportTask, ConflictResolutionStrategy conflictResolution) {\r\n    boolean fileExists = exportFileExists(exportTask);\r\n    if (fileExists && conflictResolution == ConflictResolutionStrategy.CONFLICT_NONE) {\r\n        conflict(exportTask);\r\n    } else if (fileExists && conflictResolution == ConflictResolutionStrategy.CONFLICT_SKIP) {\r\n        trackExportSkippedCount++;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "272",
  "ground_truth" : "        Track track = contentProviderUtils.getTrack(exportTask.getTrackIds().get(0));\r\n        filename = PreferencesUtils.getTrackFileformatGenerator().format(track, trackFileFormat);\r\n    }\r\n    return directoryFiles.stream().anyMatch(filename::equals);\r\n}",
  "context" : "//TODO Check should be done in ExportService\r\n@Deprecated\r\nprivate boolean exportFileExists(ExportTask exportTask) {\r\n    String filename;\r\n    if (exportTask.isMultiExport()) {\r\n        filename = TrackFilenameGenerator.format(exportTask.getFilename(), exportTask.getTrackFileFormat());\r\n    } else {\r\n        Track track = contentProviderUtils.getTrack(exportTask.getTrackIds().get(0));\r\n        filename = PreferencesUtils.getTrackFileformatGenerator().format(track, trackFileFormat);\r\n    }\r\n    return directoryFiles.stream().anyMatch(filename::equals);\r\n}",
  "start_lineno" : "262",
  "methodName" : "exportFileExists",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/202",
  "prompt" : "import de.dennisguse.opentracks.io.file.TrackFilenameGenerator\nimport de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.data.models.Track\n//TODO Check should be done in ExportService\r\n@Deprecated\r\nprivate boolean exportFileExists(ExportTask exportTask) {\r\n    String filename;\r\n    if (exportTask.isMultiExport()) {\r\n        filename = TrackFilenameGenerator.format(exportTask.getFilename(), exportTask.getTrackFileFormat());\r\n    } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "280",
  "ground_truth" : "    viewBinding.exportProgressAlertMsg.setVisibility(visibility);\r\n    viewBinding.exportProgressApplyToAll.setVisibility(visibility);\r\n    viewBinding.exportProgressLeftButton.setVisibility(visibility);\r\n    viewBinding.exportProgressRightButton.setVisibility(visibility);\r\n}",
  "context" : "private void setConflictVisibility(int visibility) {\r\n    viewBinding.exportProgressAlertIcon.setVisibility(visibility);\r\n    viewBinding.exportProgressAlertMsg.setVisibility(visibility);\r\n    viewBinding.exportProgressApplyToAll.setVisibility(visibility);\r\n    viewBinding.exportProgressLeftButton.setVisibility(visibility);\r\n    viewBinding.exportProgressRightButton.setVisibility(visibility);\r\n}",
  "start_lineno" : "274",
  "methodName" : "setConflictVisibility",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/203",
  "prompt" : "private void setConflictVisibility(int visibility) {\r\n    viewBinding.exportProgressAlertIcon.setVisibility(visibility);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "310",
  "ground_truth" : "        onExportEnded();\r\n        return;\r\n    }\r\n    export(exportTasks.get(0));\r\n}",
  "context" : "private void nextExport(@Nullable ExportTask exportTask) {\r\n    exportTasks.remove(exportTask);\r\n    setProgress();\r\n    if (exportTasks.isEmpty()) {\r\n        onExportEnded();\r\n        return;\r\n    }\r\n    export(exportTasks.get(0));\r\n}",
  "start_lineno" : "301",
  "methodName" : "nextExport",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/204",
  "prompt" : "import androidx.annotation.Nullable\nprivate void nextExport(@Nullable ExportTask exportTask) {\r\n    exportTasks.remove(exportTask);\r\n    setProgress();\r\n    if (exportTasks.isEmpty()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "    } else {\r\n        trackExportSuccessCount++;\r\n    }\r\n    nextExport(exportTask);\r\n}",
  "context" : "@Override\r\npublic void onExportSuccess(ExportTask exportTask) {\r\n    if (exportFileExists(exportTask)) {\r\n        trackExportOverwrittenCount++;\r\n    } else {\r\n        trackExportSuccessCount++;\r\n    }\r\n    nextExport(exportTask);\r\n}",
  "start_lineno" : "333",
  "methodName" : "onExportSuccess",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/205",
  "prompt" : "@Override\r\npublic void onExportSuccess(ExportTask exportTask) {\r\n    if (exportFileExists(exportTask)) {\r\n        trackExportOverwrittenCount++;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "357",
  "ground_truth" : "    }\r\n    Log.e(TAG, \"Error exporting \" + name + \": \" + errorMessage);\r\n    trackErrors.add(name);\r\n    nextExport(exportTask);\r\n}",
  "context" : "@Override\r\npublic void onExportError(ExportTask exportTask, String errorMessage) {\r\n    trackExportErrorCount++;\r\n    String name;\r\n    if (exportTask.isMultiExport()) {\r\n        name = exportTask.getFilename();\r\n    } else {\r\n        name = contentProviderUtils.getTrack(exportTask.getTrackIds().get(0)).getName();\r\n    }\r\n    Log.e(TAG, \"Error exporting \" + name + \": \" + errorMessage);\r\n    trackErrors.add(name);\r\n    nextExport(exportTask);\r\n}",
  "start_lineno" : "344",
  "methodName" : "onExportError",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/206",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\n@Override\r\npublic void onExportError(ExportTask exportTask, String errorMessage) {\r\n    trackExportErrorCount++;\r\n    String name;\r\n    if (exportTask.isMultiExport()) {\r\n        name = exportTask.getFilename();\r\n    } else {\r\n        name = contentProviderUtils.getTrack(exportTask.getTrackIds().get(0)).getName();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "366",
  "ground_truth" : "    conflictsQueue.add(newConflict);\r\n    if (conflictsQueue.size() == 1) {\r\n        conflictsHandler.post(conflictsRunnable);\r\n    }\r\n}",
  "context" : "private void conflict(ExportTask exportTask) {\r\n    PendingConflict newConflict = new PendingConflict(exportTask);\r\n    conflictsQueue.add(newConflict);\r\n    if (conflictsQueue.size() == 1) {\r\n        conflictsHandler.post(conflictsRunnable);\r\n    }\r\n}",
  "start_lineno" : "359",
  "methodName" : "conflict",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/207",
  "prompt" : "private void conflict(ExportTask exportTask) {\r\n    PendingConflict newConflict = new PendingConflict(exportTask);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "411",
  "ground_truth" : "        autoConflict = ConflictResolutionStrategy.CONFLICT_OVERWRITE;\r\n    }\r\n}",
  "context" : "/**\r\n * Overwrite the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void overwrite() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_OVERWRITE);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r\n        autoConflict = ConflictResolutionStrategy.CONFLICT_OVERWRITE;\r\n    }\r\n}",
  "start_lineno" : "405",
  "methodName" : "overwrite",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/208",
  "prompt" : "import de.dennisguse.opentracks.R\n/**\r\n * Overwrite the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void overwrite() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_OVERWRITE);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\npublic static final String EXTRA_ONE_FILE_KEY = \"one_file\";\npublic static final String EXTRA_TRACKFILEFORMAT_KEY = \"trackfileformat\";\nprivate static final String BUNDLE_AUTO_CONFLICT = \"auto_conflict\";\nprivate static final String BUNDLE_SUCCESS_COUNT = \"track_export_success_count\";\nprivate static final String BUNDLE_ERROR_COUNT = \"track_export_error_ount\";\nprivate static final String BUNDLE_OVERWRITTEN_COUNT = \"track_export_overwritten_count\";\nprivate static final String BUNDLE_SKIPPED_COUNT = \"track_export_skipped_count\";\nprivate static final String BUNDLE_TOTAL_COUNT = \"track_export_total_count\";\nprivate static final String BUNDLE_DIRECTORY_FILES = \"track_directory_files\";\nprivate static final String BUNDLE_TRACK_ERRORS = \"track_errors\";\nprivate static final String BUNDLE_EXPORT_TASKS = \"export_tasks\";\nprivate TrackFileFormat trackFileFormat;\nprivate Uri directoryUri;\nprivate ExportService.ExportServiceResultReceiver resultReceiver;\nprivate List<String> directoryFiles;\nprivate int trackExportSuccessCount;\nprivate int trackExportErrorCount;\nprivate int trackExportOverwrittenCount;\nprivate int trackExportSkippedCount;\nprivate int trackExportTotalCount;\nboolean doubleBackToCancel = false;\nprivate ExportActivityBinding viewBinding;\nprivate ArrayList<String> trackErrors = new ArrayList<>();\nprivate ConflictResolutionStrategy autoConflict;\nprivate ContentProviderUtils contentProviderUtils;\nprivate final LinkedBlockingQueue<PendingConflict> conflictsQueue = new LinkedBlockingQueue<>();\nprivate final Handler conflictsHandler = new Handler();\nprivate final Runnable conflictsRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        if (conflictsQueue.isEmpty()) {\r\n            return;\r\n        }\r\n        PendingConflict conflict = conflictsQueue.peek();\r\n        if (conflict.resolve()) {\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n            return;\r\n        }\r\n        viewBinding.exportProgressLeftButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.skip();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n        viewBinding.exportProgressRightButton.setOnClickListener((view) -> {\r\n            setConflictVisibility(View.GONE);\r\n            conflict.overwrite();\r\n            conflictsQueue.remove(conflict);\r\n            if (!conflictsQueue.isEmpty()) {\r\n                conflictsHandler.post(conflictsRunnable);\r\n            }\r\n        });\r\n    }\r\n};\nprivate final ExportTask exportTask;",
  "app_type" : "life",
  "end_lineno" : "422",
  "ground_truth" : "        autoConflict = ConflictResolutionStrategy.CONFLICT_SKIP;\r\n    }\r\n}",
  "context" : "/**\r\n * Skip the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void skip() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_SKIP);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r\n        autoConflict = ConflictResolutionStrategy.CONFLICT_SKIP;\r\n    }\r\n}",
  "start_lineno" : "416",
  "methodName" : "skip",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java",
  "task_id" : "OpenTracks/209",
  "prompt" : "import de.dennisguse.opentracks.R\n/**\r\n * Skip the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void skip() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_SKIP);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int JOB_ID = 1;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_EXPORT_TASK = \"export_task\";\nprivate static final String EXTRA_DIRECTORY_URI = \"extra_directory_uri\";\npublic static final int RESULT_CODE_SUCCESS = 1;\npublic static final int RESULT_CODE_ERROR = 0;\npublic static final String RESULT_EXTRA_EXPORT_TASK = \"result_extra_export_task\";\npublic static final String EXTRA_EXPORT_ERROR_MESSAGE = \"extra_export_error_message\";\nprivate final Receiver receiver;",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putExtra(EXTRA_EXPORT_TASK, exportTask);\r\n    intent.putExtra(EXTRA_DIRECTORY_URI, directoryUri);\r\n    enqueueWork(context, ExportService.class, JOB_ID, intent);\r\n}",
  "context" : "public static void enqueue(Context context, ExportServiceResultReceiver receiver, ExportTask exportTask, Uri directoryUri) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putExtra(EXTRA_EXPORT_TASK, exportTask);\r\n    intent.putExtra(EXTRA_DIRECTORY_URI, directoryUri);\r\n    enqueueWork(context, ExportService.class, JOB_ID, intent);\r\n}",
  "start_lineno" : "26",
  "methodName" : "enqueue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportService.java",
  "task_id" : "OpenTracks/210",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.os.ResultReceiver\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.job.JobService\npublic static void enqueue(Context context, ExportServiceResultReceiver receiver, ExportTask exportTask, Uri directoryUri) {\r\n    Intent intent = new Intent(context, JobService.class);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int JOB_ID = 1;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_EXPORT_TASK = \"export_task\";\nprivate static final String EXTRA_DIRECTORY_URI = \"extra_directory_uri\";\npublic static final int RESULT_CODE_SUCCESS = 1;\npublic static final int RESULT_CODE_ERROR = 0;\npublic static final String RESULT_EXTRA_EXPORT_TASK = \"result_extra_export_task\";\npublic static final String EXTRA_EXPORT_ERROR_MESSAGE = \"extra_export_error_message\";\nprivate final Receiver receiver;",
  "app_type" : "life",
  "end_lineno" : "87",
  "ground_truth" : "            receiver.onExportError(exportTask, resultData.getString(EXTRA_EXPORT_ERROR_MESSAGE));\r\n        default ->\r\n            throw new RuntimeException(\"Unknown resultCode.\");\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onReceiveResult(int resultCode, Bundle resultData) {\r\n    ExportTask exportTask = resultData.getParcelable(RESULT_EXTRA_EXPORT_TASK);\r\n    switch(resultCode) {\r\n        case RESULT_CODE_SUCCESS ->\r\n            receiver.onExportSuccess(exportTask);\r\n        case RESULT_CODE_ERROR ->\r\n            receiver.onExportError(exportTask, resultData.getString(EXTRA_EXPORT_ERROR_MESSAGE));\r\n        default ->\r\n            throw new RuntimeException(\"Unknown resultCode.\");\r\n    }\r\n}",
  "start_lineno" : "79",
  "methodName" : "onReceiveResult",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportService.java",
  "task_id" : "OpenTracks/211",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.os.Bundle\n@Override\r\nprotected void onReceiveResult(int resultCode, Bundle resultData) {\r\n    ExportTask exportTask = resultData.getParcelable(RESULT_EXTRA_EXPORT_TASK);\r\n    switch(resultCode) {\r\n        case RESULT_CODE_SUCCESS ->\r\n            receiver.onExportSuccess(exportTask);\r\n        case RESULT_CODE_ERROR ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final TrackFileFormat trackFileFormat;\nprivate final List<Track.Id> trackIds;\npublic static final Creator<ExportTask> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public ExportTask createFromParcel(Parcel in) {\r\n        return new ExportTask(in);\r\n    }\r\n\r\n    @Override\r\n    public ExportTask[] newArray(int size) {\r\n        return new ExportTask[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    ExportTask that = (ExportTask) o;\r\n    return Objects.equals(filename, that.filename) && trackFileFormat == that.trackFileFormat && Objects.equals(trackIds, that.trackIds);\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    ExportTask that = (ExportTask) o;\r\n    return Objects.equals(filename, that.filename) && trackFileFormat == that.trackFileFormat && Objects.equals(trackIds, that.trackIds);\r\n}",
  "start_lineno" : "51",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportTask.java",
  "task_id" : "OpenTracks/212",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final TrackFileFormat trackFileFormat;\nprivate final List<Track.Id> trackIds;\npublic static final Creator<ExportTask> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public ExportTask createFromParcel(Parcel in) {\r\n        return new ExportTask(in);\r\n    }\r\n\r\n    @Override\r\n    public ExportTask[] newArray(int size) {\r\n        return new ExportTask[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "    dest.writeString(trackFileFormat.name());\r\n    dest.writeTypedList(trackIds);\r\n}",
  "context" : "@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(filename);\r\n    dest.writeString(trackFileFormat.name());\r\n    dest.writeTypedList(trackIds);\r\n}",
  "start_lineno" : "64",
  "methodName" : "writeToParcel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportTask.java",
  "task_id" : "OpenTracks/213",
  "prompt" : "import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(filename);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GPXTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final String creator;\nprivate PrintWriter printWriter;",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "    } catch (InterruptedException e) {\r\n        Log.e(TAG, \"Thread interrupted\", e);\r\n        return false;\r\n    }\r\n}",
  "context" : "@Override\r\npublic boolean writeTrack(List<Track> tracks, @NonNull OutputStream outputStream) {\r\n    try {\r\n        prepare(outputStream);\r\n        writeHeader();\r\n        for (Track track : tracks) {\r\n            writeMarkers(track);\r\n        }\r\n        for (Track track : tracks) {\r\n            writeTrackPoints(track);\r\n        }\r\n        writeFooter();\r\n        close();\r\n        return true;\r\n    } catch (InterruptedException e) {\r\n        Log.e(TAG, \"Thread interrupted\", e);\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "100",
  "methodName" : "writeTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\GPXTrackExporter.java",
  "task_id" : "OpenTracks/214",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.util.stream.Stream\nimport java.util.List\nimport java.io.OutputStream\nimport androidx.annotation.NonNull\n@Override\r\npublic boolean writeTrack(List<Track> tracks, @NonNull OutputStream outputStream) {\r\n    try {\r\n        prepare(outputStream);\r\n        writeHeader();\r\n        for (Track track : tracks) {\r\n            writeMarkers(track);\r\n        }\r\n        for (Track track : tracks) {\r\n            writeTrackPoints(track);\r\n        }\r\n        writeFooter();\r\n        close();\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GPXTrackExporter.class.getSimpleName();\nprivate static final NumberFormat ALTITUDE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat COORDINATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat SPEED_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat DISTANCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat HEARTRATE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat CADENCE_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate static final NumberFormat POWER_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final String creator;\nprivate PrintWriter printWriter;",
  "app_type" : "life",
  "end_lineno" : "210",
  "ground_truth" : "    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "context" : "public void close() {\r\n    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "start_lineno" : "207",
  "methodName" : "close",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\GPXTrackExporter.java",
  "task_id" : "OpenTracks/215",
  "prompt" : "public void close() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "context" : "@VisibleForTesting\r\nvoid close() {\r\n    printWriter.flush();\r\n    printWriter = null;\r\n}",
  "start_lineno" : "220",
  "methodName" : "close",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/216",
  "prompt" : "@VisibleForTesting\r\nvoid close() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "263",
  "ground_truth" : "    printWriter.println(\"</Document>\");\r\n    printWriter.println(\"</kml>\");\r\n}",
  "context" : "private void writeFooter() {\r\n    printWriter.println(\"</Document>\");\r\n    printWriter.println(\"</kml>\");\r\n}",
  "start_lineno" : "260",
  "methodName" : "writeFooter",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/217",
  "prompt" : "private void writeFooter() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "269",
  "ground_truth" : "    printWriter.println(\"<name>\" + StringUtils.formatCData(context.getString(R.string.track_markers, track.getName())) + \"</name>\");\r\n    printWriter.println(\"<open>1</open>\");\r\n}",
  "context" : "private void writeBeginMarkers(Track track) {\r\n    printWriter.println(\"<Folder>\");\r\n    printWriter.println(\"<name>\" + StringUtils.formatCData(context.getString(R.string.track_markers, track.getName())) + \"</name>\");\r\n    printWriter.println(\"<open>1</open>\");\r\n}",
  "start_lineno" : "265",
  "methodName" : "writeBeginMarkers",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/218",
  "prompt" : "private void writeBeginMarkers(Track track) {\r\n    printWriter.println(\"<Folder>\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "279",
  "ground_truth" : "        writePhotoOverlay(marker, heading, zoneOffset);\r\n    } else {\r\n        writePlacemark(marker.getName(), marker.getCategory(), marker.getDescription(), marker.getLocation(), zoneOffset);\r\n    }\r\n}",
  "context" : "private void writeMarker(Marker marker, ZoneOffset zoneOffset) {\r\n    boolean existsPhoto = MarkerUtils.buildInternalPhotoFile(context, marker.getTrackId(), marker.getPhotoURI()) != null;\r\n    if (marker.hasPhoto() && exportPhotos && existsPhoto) {\r\n        float heading = getHeading(marker.getTrackId(), marker.getLocation());\r\n        writePhotoOverlay(marker, heading, zoneOffset);\r\n    } else {\r\n        writePlacemark(marker.getName(), marker.getCategory(), marker.getDescription(), marker.getLocation(), zoneOffset);\r\n    }\r\n}",
  "start_lineno" : "271",
  "methodName" : "writeMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/219",
  "prompt" : "private void writeMarker(Marker marker, ZoneOffset zoneOffset) {\r\n    boolean existsPhoto = MarkerUtils.buildInternalPhotoFile(context, marker.getTrackId(), marker.getPhotoURI()) != null;\r\n    if (marker.hasPhoto() && exportPhotos && existsPhoto) {\r\n        float heading = getHeading(marker.getTrackId(), marker.getLocation());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "289",
  "ground_truth" : "    printWriter.println(\"<name>\" + context.getString(R.string.generic_tracks) + \"</name>\");\r\n    printWriter.println(\"<open>1</open>\");\r\n}",
  "context" : "private void writeMultiTrackBegin() {\r\n    printWriter.println(\"<Folder id=\\\"tracks\\\">\");\r\n    printWriter.println(\"<name>\" + context.getString(R.string.generic_tracks) + \"</name>\");\r\n    printWriter.println(\"<open>1</open>\");\r\n}",
  "start_lineno" : "285",
  "methodName" : "writeMultiTrackBegin",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/220",
  "prompt" : "private void writeMultiTrackBegin() {\r\n    printWriter.println(\"<Folder id=\\\"tracks\\\">\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "313",
  "ground_truth" : "    printWriter.println(\"</MultiTrack>\");\r\n    printWriter.println(\"</Placemark>\");\r\n}",
  "context" : "private void writeEndTrack() {\r\n    printWriter.println(\"</MultiTrack>\");\r\n    printWriter.println(\"</Placemark>\");\r\n}",
  "start_lineno" : "310",
  "methodName" : "writeEndTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/221",
  "prompt" : "private void writeEndTrack() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "328",
  "ground_truth" : "    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}",
  "context" : "@VisibleForTesting\r\nvoid writeOpenSegment() {\r\n    printWriter.println(\"<Track>\");\r\n    trackpointTypeList.clear();\r\n    speedList.clear();\r\n    distanceList.clear();\r\n    powerList.clear();\r\n    cadenceList.clear();\r\n    heartRateList.clear();\r\n    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}",
  "start_lineno" : "315",
  "methodName" : "writeOpenSegment",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/222",
  "prompt" : "@VisibleForTesting\r\nvoid writeOpenSegment() {\r\n    printWriter.println(\"<Track>\");\r\n    trackpointTypeList.clear();\r\n    speedList.clear();\r\n    distanceList.clear();\r\n    powerList.clear();\r\n    cadenceList.clear();\r\n    heartRateList.clear();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "404",
  "ground_truth" : "            printWriter.println(\"<value>\" + SENSOR_DATA_FORMAT.format(value) + \"</value>\");\r\n        }\r\n    }\r\n    printWriter.println(\"</SimpleArrayData>\");\r\n}",
  "context" : "private void writeSimpleArraySensorData(List<Float> list, String name) {\r\n    printWriter.println(\"<SimpleArrayData name=\\\"\" + name + \"\\\">\");\r\n    for (int i = 0; i < list.size(); i++) {\r\n        Float value = list.get(i);\r\n        if (value == null) {\r\n            printWriter.println(\"<value />\");\r\n        } else {\r\n            printWriter.println(\"<value>\" + SENSOR_DATA_FORMAT.format(value) + \"</value>\");\r\n        }\r\n    }\r\n    printWriter.println(\"</SimpleArrayData>\");\r\n}",
  "start_lineno" : "393",
  "methodName" : "writeSimpleArraySensorData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/223",
  "prompt" : "private void writeSimpleArraySensorData(List<Float> list, String name) {\r\n    printWriter.println(\"<SimpleArrayData name=\\\"\" + name + \"\\\">\");\r\n    for (int i = 0; i < list.size(); i++) {\r\n        Float value = list.get(i);\r\n        if (value == null) {\r\n            printWriter.println(\"<value />\");\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "412",
  "ground_truth" : "    for (TrackPoint.Type value : list) {\r\n        printWriter.println(\"<value>\" + value.name() + \"</value>\");\r\n    }\r\n    printWriter.println(\"</SimpleArrayData>\");\r\n}",
  "context" : "private void writeTrackPointType(List<TrackPoint.Type> list) {\r\n    printWriter.println(\"<SimpleArrayData name=\\\"\" + EXTENDED_DATA_TYPE_TRACKPOINT + \"\\\">\");\r\n    for (TrackPoint.Type value : list) {\r\n        printWriter.println(\"<value>\" + value.name() + \"</value>\");\r\n    }\r\n    printWriter.println(\"</SimpleArrayData>\");\r\n}",
  "start_lineno" : "406",
  "methodName" : "writeTrackPointType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/224",
  "prompt" : "private void writeTrackPointType(List<TrackPoint.Type> list) {\r\n    printWriter.println(\"<SimpleArrayData name=\\\"\" + EXTENDED_DATA_TYPE_TRACKPOINT + \"\\\">\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "487",
  "ground_truth" : "    if (viewLocation != null) {\r\n        return viewLocation.bearingTo(location);\r\n    }\r\n    return location.getBearing();\r\n}",
  "context" : "/**\r\n * Gets the heading to a location.\r\n *\r\n * @param trackId  the track id containing the location\r\n * @param location the location\r\n */\r\nprivate float getHeading(Track.Id trackId, Location location) {\r\n    TrackPoint.Id trackPointId = contentProviderUtils.getTrackPointId(trackId, location);\r\n    if (trackPointId == null) {\r\n        return location.getBearing();\r\n    }\r\n    TrackPoint viewLocation = contentProviderUtils.getLastValidTrackPoint(trackId);\r\n    if (viewLocation != null) {\r\n        return viewLocation.bearingTo(location);\r\n    }\r\n    return location.getBearing();\r\n}",
  "start_lineno" : "476",
  "methodName" : "getHeading",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/225",
  "prompt" : "/**\r\n * Gets the heading to a location.\r\n *\r\n * @param trackId  the track id containing the location\r\n * @param location the location\r\n */\r\nprivate float getHeading(Track.Id trackId, Location location) {\r\n    TrackPoint.Id trackPointId = contentProviderUtils.getTrackPointId(trackId, location);\r\n    if (trackPointId == null) {\r\n        return location.getBearing();\r\n    }\r\n    TrackPoint viewLocation = contentProviderUtils.getLastValidTrackPoint(trackId);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "495",
  "ground_truth" : "    if (location.hasAltitude()) {\r\n        result += separator + location.getAltitude();\r\n    }\r\n    return result;\r\n}",
  "context" : "private static String getCoordinates(Location location, String separator) {\r\n    String result = location.getLongitude() + separator + location.getLatitude();\r\n    if (location.hasAltitude()) {\r\n        result += separator + location.getAltitude();\r\n    }\r\n    return result;\r\n}",
  "start_lineno" : "489",
  "methodName" : "getCoordinates",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/226",
  "prompt" : "private static String getCoordinates(Location location, String separator) {\r\n    String result = location.getLongitude() + separator + location.getLatitude();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "504",
  "ground_truth" : "    }\r\n    printWriter.println(\"<ExtendedData>\");\r\n    printWriter.println(\"<Data name=\\\"\" + EXTENDED_DATA_TYPE_LOCALIZED + \"\\\"><value>\" + StringUtils.formatCData(localizedValue) + \"</value></Data>\");\r\n    printWriter.println(\"</ExtendedData>\");\r\n}",
  "context" : "private void writeTypeLocalized(String localizedValue) {\r\n    if (localizedValue == null || localizedValue.equals(\"\")) {\r\n        return;\r\n    }\r\n    printWriter.println(\"<ExtendedData>\");\r\n    printWriter.println(\"<Data name=\\\"\" + EXTENDED_DATA_TYPE_LOCALIZED + \"\\\"><value>\" + StringUtils.formatCData(localizedValue) + \"</value></Data>\");\r\n    printWriter.println(\"</ExtendedData>\");\r\n}",
  "start_lineno" : "497",
  "methodName" : "writeTypeLocalized",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/227",
  "prompt" : "private void writeTypeLocalized(String localizedValue) {\r\n    if (localizedValue == null || localizedValue.equals(\"\")) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "513",
  "ground_truth" : "    }\r\n    printWriter.println(\"<ExtendedData>\");\r\n    printWriter.println(\"<Data name=\\\"\" + EXTENDED_DATA_ACTIVITY_TYPE + \"\\\"><value>\" + StringUtils.formatCData(value.getId()) + \"</value></Data>\");\r\n    printWriter.println(\"</ExtendedData>\");\r\n}",
  "context" : "private void writeActivityType(ActivityType value) {\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    printWriter.println(\"<ExtendedData>\");\r\n    printWriter.println(\"<Data name=\\\"\" + EXTENDED_DATA_ACTIVITY_TYPE + \"\\\"><value>\" + StringUtils.formatCData(value.getId()) + \"</value></Data>\");\r\n    printWriter.println(\"</ExtendedData>\");\r\n}",
  "start_lineno" : "506",
  "methodName" : "writeActivityType",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/228",
  "prompt" : "private void writeActivityType(ActivityType value) {\r\n    if (value == null) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "523",
  "ground_truth" : "    printWriter.println(\"<scale>1.3</scale>\");\r\n    printWriter.println(\"<Icon />\");\r\n    printWriter.println(\"</IconStyle>\");\r\n    printWriter.println(\"</Style>\");\r\n}",
  "context" : "private void writeTrackStyle() {\r\n    printWriter.println(\"<Style id=\\\"\" + TRACK_STYLE + \"\\\">\");\r\n    printWriter.println(\"<LineStyle><color>7f0000ff</color><width>4</width></LineStyle>\");\r\n    printWriter.println(\"<IconStyle>\");\r\n    printWriter.println(\"<scale>1.3</scale>\");\r\n    printWriter.println(\"<Icon />\");\r\n    printWriter.println(\"</IconStyle>\");\r\n    printWriter.println(\"</Style>\");\r\n}",
  "start_lineno" : "515",
  "methodName" : "writeTrackStyle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/229",
  "prompt" : "private void writeTrackStyle() {\r\n    printWriter.println(\"<Style id=\\\"\" + TRACK_STYLE + \"\\\">\");\r\n    printWriter.println(\"<LineStyle><color>7f0000ff</color><width>4</width></LineStyle>\");\r\n    printWriter.println(\"<IconStyle>\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "532",
  "ground_truth" : "    printWriter.println(\"<Icon />\");\r\n    printWriter.println(\"</IconStyle></Style>\");\r\n}",
  "context" : "/**\r\n * Writes a placemarker style.\r\n */\r\nprivate void writePlacemarkerStyle() {\r\n    printWriter.println(\"<Style id=\\\"\" + KMLTrackExporter.MARKER_STYLE + \"\\\"><IconStyle>\");\r\n    printWriter.println(\"<Icon />\");\r\n    printWriter.println(\"</IconStyle></Style>\");\r\n}",
  "start_lineno" : "528",
  "methodName" : "writePlacemarkerStyle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/230",
  "prompt" : "/**\r\n * Writes a placemarker style.\r\n */\r\nprivate void writePlacemarkerStyle() {\r\n    printWriter.println(\"<Style id=\\\"\" + KMLTrackExporter.MARKER_STYLE + \"\\\"><IconStyle>\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KMLTrackExporter.class.getSimpleName();\npublic static final String MARKER_STYLE = \"waypoint\";\nprivate static final String TRACK_STYLE = \"track\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_LOCALIZED = \"type\";\npublic static final String EXTENDED_DATA_ACTIVITY_TYPE = \"activityType\";\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\npublic static final String EXTENDED_DATA_TYPE_DISTANCE = \"distance\";\npublic static final String EXTENDED_DATA_TYPE_CADENCE = \"cadence\";\npublic static final String EXTENDED_DATA_TYPE_HEART_RATE = \"heart_rate\";\npublic static final String EXTENDED_DATA_TYPE_POWER = \"power\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_GAIN = \"elevation_gain\";\npublic static final String EXTENDED_DATA_TYPE_ALTITUDE_LOSS = \"elevation_loss\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_HORIZONTAL = \"accuracy_horizontal\";\npublic static final String EXTENDED_DATA_TYPE_ACCURACY_VERTICAL = \"accuracy_vertical\";\nprivate static final NumberFormat SENSOR_DATA_FORMAT = NumberFormat.getInstance(Locale.US);\nprivate final Context context;\nprivate final boolean exportPhotos;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate PrintWriter printWriter;\nprivate final ArrayList<TrackPoint.Type> trackpointTypeList = new ArrayList<>();\nprivate final List<Float> speedList = new ArrayList<>();\nprivate final List<Float> distanceList = new ArrayList<>();\nprivate final List<Float> powerList = new ArrayList<>();\nprivate final List<Float> cadenceList = new ArrayList<>();\nprivate final List<Float> heartRateList = new ArrayList<>();\nprivate final List<Float> altitudeGainList = new ArrayList<>();\nprivate final List<Float> altitudeLossList = new ArrayList<>();\nprivate final List<Float> accuracyHorizontal = new ArrayList<>();\nprivate final List<Float> accuracyVertical = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "544",
  "ground_truth" : "    printWriter.println(\"<displayName>\" + StringUtils.formatCData(extendedDataType) + \"</displayName>\");\r\n    printWriter.println(\"</SimpleArrayField>\");\r\n}",
  "context" : "/**\r\n * Writes a simple array style.\r\n *\r\n * @param name             the name of the simple array.\r\n * @param extendedDataType the extended data display name\r\n */\r\nprivate void writeSimpleArrayStyle(String name, String extendedDataType) {\r\n    printWriter.println(\"<SimpleArrayField name=\\\"\" + name + \"\\\" type=\\\"float\\\">\");\r\n    printWriter.println(\"<displayName>\" + StringUtils.formatCData(extendedDataType) + \"</displayName>\");\r\n    printWriter.println(\"</SimpleArrayField>\");\r\n}",
  "start_lineno" : "540",
  "methodName" : "writeSimpleArrayStyle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java",
  "task_id" : "OpenTracks/231",
  "prompt" : "/**\r\n * Writes a simple array style.\r\n *\r\n * @param name             the name of the simple array.\r\n * @param extendedDataType the extended data display name\r\n */\r\nprivate void writeSimpleArrayStyle(String name, String extendedDataType) {\r\n    printWriter.println(\"<SimpleArrayField name=\\\"\" + name + \"\\\" type=\\\"float\\\">\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KMZ_IMAGES_DIR = \"images\";\npublic static final String KMZ_KML_FILE = \"doc.kml\";\nprivate static final String TAG = KmzTrackExporter.class.getSimpleName();\nprivate static final int BUFFER_SIZE = 4096;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final KMLTrackExporter fileTrackExporter;\nprivate final boolean exportPhotos;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "    int byteCount;\r\n    while ((byteCount = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, byteCount);\r\n    }\r\n}",
  "context" : "private void readToOutputStream(InputStream inputStream, OutputStream outputStream) throws IOException {\r\n    byte[] buffer = new byte[BUFFER_SIZE];\r\n    int byteCount;\r\n    while ((byteCount = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, byteCount);\r\n    }\r\n}",
  "start_lineno" : "130",
  "methodName" : "readToOutputStream",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KmzTrackExporter.java",
  "task_id" : "OpenTracks/232",
  "prompt" : "import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\nprivate void readToOutputStream(InputStream inputStream, OutputStream outputStream) throws IOException {\r\n    byte[] buffer = new byte[BUFFER_SIZE];\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String KMZ_IMAGES_DIR = \"images\";\npublic static final String KMZ_KML_FILE = \"doc.kml\";\nprivate static final String TAG = KmzTrackExporter.class.getSimpleName();\nprivate static final int BUFFER_SIZE = 4096;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final KMLTrackExporter fileTrackExporter;\nprivate final boolean exportPhotos;\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "145",
  "ground_truth" : "    ext = ext == null ? \"\" : \".\" + ext;\r\n    return KMZ_IMAGES_DIR + File.separatorChar + FileUtils.sanitizeFileName(marker.getId().id() + ext);\r\n}",
  "context" : "/**\r\n * Builds and returns the path for the image that will be saved inside KMZ_IMAGES_DIR for the marker.\r\n */\r\npublic static String buildKmzImageFilePath(Marker marker) {\r\n    String ext = FileUtils.getExtension(marker.getPhotoUrl());\r\n    ext = ext == null ? \"\" : \".\" + ext;\r\n    return KMZ_IMAGES_DIR + File.separatorChar + FileUtils.sanitizeFileName(marker.getId().id() + ext);\r\n}",
  "start_lineno" : "141",
  "methodName" : "buildKmzImageFilePath",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KmzTrackExporter.java",
  "task_id" : "OpenTracks/233",
  "prompt" : "import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.io.File\n/**\r\n * Builds and returns the path for the image that will be saved inside KMZ_IMAGES_DIR for the marker.\r\n */\r\npublic static String buildKmzImageFilePath(Marker marker) {\r\n    String ext = FileUtils.getExtension(marker.getPhotoUrl());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "    IntentUtils.persistDirectoryAccessPermission(this, directoryUri, resultData.getFlags());\r\n    startActivity(createNextActivityIntent(directoryUri));\r\n}",
  "context" : "protected void onActivityResultCustom(@NonNull Intent resultData) {\r\n    Uri directoryUri = resultData.getData();\r\n    IntentUtils.persistDirectoryAccessPermission(this, directoryUri, resultData.getFlags());\r\n    startActivity(createNextActivityIntent(directoryUri));\r\n}",
  "start_lineno" : "55",
  "methodName" : "onActivityResultCustom",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/234",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\nprotected void onActivityResultCustom(@NonNull Intent resultData) {\r\n    Uri directoryUri = resultData.getData();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n    return null;\r\n}",
  "context" : "/**\r\n * @return null if directory needs to be selected.\r\n */\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n    return null;\r\n}",
  "start_lineno" : "64",
  "methodName" : "configureDirectoryChooserIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/235",
  "prompt" : "import androidx.documentfile.provider.DocumentFile\nimport android.content.Intent\n/**\r\n * @return null if directory needs to be selected.\r\n */\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    intent.putExtra(ImportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    return intent;\r\n}",
  "context" : "@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ImportActivity.class);\r\n    intent.putExtra(ImportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    return intent;\r\n}",
  "start_lineno" : "73",
  "methodName" : "createNextActivityIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/236",
  "prompt" : "import de.dennisguse.opentracks.util.IntentUtils\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ImportActivity.class);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);\r\n    return IntentUtils.toDocumentFile(this, PreferencesUtils.getDefaultExportDirectoryUri());\r\n}",
  "context" : "@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r\n    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);\r\n    return IntentUtils.toDocumentFile(this, PreferencesUtils.getDefaultExportDirectoryUri());\r\n}",
  "start_lineno" : "83",
  "methodName" : "configureDirectoryChooserIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/237",
  "prompt" : "import androidx.documentfile.provider.DocumentFile\nimport android.content.Intent\n@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "    intent.putExtra(ExportActivity.EXTRA_TRACKFILEFORMAT_KEY, PreferencesUtils.getExportTrackFileFormat());\r\n    return intent;\r\n}",
  "context" : "@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ExportActivity.class);\r\n    intent.putExtra(ExportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    intent.putExtra(ExportActivity.EXTRA_TRACKFILEFORMAT_KEY, PreferencesUtils.getExportTrackFileFormat());\r\n    return intent;\r\n}",
  "start_lineno" : "95",
  "methodName" : "createNextActivityIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/238",
  "prompt" : "import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.io.file.exporter.ExportActivity\nimport de.dennisguse.opentracks.R\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ExportActivity.class);\r\n    intent.putExtra(ExportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n    return IntentUtils.toDocumentFile(this, PreferencesUtils.getDefaultExportDirectoryUri());\r\n}",
  "context" : "@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r\n    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n    return IntentUtils.toDocumentFile(this, PreferencesUtils.getDefaultExportDirectoryUri());\r\n}",
  "start_lineno" : "106",
  "methodName" : "configureDirectoryChooserIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/239",
  "prompt" : "import androidx.documentfile.provider.DocumentFile\nimport android.content.Intent\n@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    intent.putExtra(ExportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    intent.putExtra(ExportActivity.EXTRA_ONE_FILE_KEY, true);\r\n    intent.putExtra(ExportActivity.EXTRA_TRACKFILEFORMAT_KEY, PreferencesUtils.getExportTrackFileFormat());\r\n    return intent;\r\n}",
  "context" : "@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ExportActivity.class);\r\n    intent.putExtra(ExportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    intent.putExtra(ExportActivity.EXTRA_ONE_FILE_KEY, true);\r\n    intent.putExtra(ExportActivity.EXTRA_TRACKFILEFORMAT_KEY, PreferencesUtils.getExportTrackFileFormat());\r\n    return intent;\r\n}",
  "start_lineno" : "118",
  "methodName" : "createNextActivityIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/240",
  "prompt" : "import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.io.file.exporter.ExportActivity\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ExportActivity.class);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "140",
  "ground_truth" : "        IntentUtils.releaseDirectoryAccessPermission(this, oldDirectoryUri);\r\n    }\r\n    PreferencesUtils.setDefaultExportDirectoryUri(newDirectoryUri);\r\n    IntentUtils.persistDirectoryAccessPermission(this, newDirectoryUri, resultData.getFlags());\r\n}",
  "context" : "@Override\r\nprotected void onActivityResultCustom(@NonNull Intent resultData) {\r\n    Uri oldDirectoryUri = PreferencesUtils.getDefaultExportDirectoryUri();\r\n    Uri newDirectoryUri = resultData.getData();\r\n    if (oldDirectoryUri != null && !newDirectoryUri.equals(oldDirectoryUri)) {\r\n        IntentUtils.releaseDirectoryAccessPermission(this, oldDirectoryUri);\r\n    }\r\n    PreferencesUtils.setDefaultExportDirectoryUri(newDirectoryUri);\r\n    IntentUtils.persistDirectoryAccessPermission(this, newDirectoryUri, resultData.getFlags());\r\n}",
  "start_lineno" : "130",
  "methodName" : "onActivityResultCustom",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/241",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\nprotected void onActivityResultCustom(@NonNull Intent resultData) {\r\n    Uri oldDirectoryUri = PreferencesUtils.getDefaultExportDirectoryUri();\r\n    Uri newDirectoryUri = resultData.getData();\r\n    if (oldDirectoryUri != null && !newDirectoryUri.equals(oldDirectoryUri)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "protected final ActivityResultLauncher<Intent> directoryIntentLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n        onActivityResultCustom(result.getData());\r\n    }\r\n    finish();\r\n});",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, PreferencesUtils.getDefaultExportDirectoryUri());\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r\n    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);\r\n    if (PreferencesUtils.isDefaultExportDirectoryUri()) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, PreferencesUtils.getDefaultExportDirectoryUri());\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "147",
  "methodName" : "configureDirectoryChooserIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java",
  "task_id" : "OpenTracks/242",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport androidx.documentfile.provider.DocumentFile\nimport android.os.Build\nimport android.net.Uri\nimport android.content.Intent\n@Override\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r\n    super.configureDirectoryChooserIntent(intent);\r\n    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);\r\n    if (PreferencesUtils.isDefaultExportDirectoryUri()) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpxTrackImporter.class.getSimpleName();\nprivate static final String TAG_DESCRIPTION = \"desc\";\nprivate static final String TAG_ALTITUDE = \"ele\";\nprivate static final String TAG_GPX = \"gpx\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_TIME = \"time\";\nprivate static final String TAG_TRACK = \"trk\";\nprivate static final String TAG_TRACK_POINT = \"trkpt\";\nprivate static final String TAG_TRACK_SEGMENT = \"trkseg\";\nprivate static final String TAG_TYPE = \"type\";\nprivate static final String TAG_TYPE_LOCALIZED = \"opentracks:typeTranslated\";\nprivate static final String TAG_MARKER = \"wpt\";\nprivate static final String TAG_ID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_LAT = \"lat\";\nprivate static final String ATTRIBUTE_LON = \"lon\";\nprivate static final String TAG_EXTENSION_SPEED = \"gpxtpx:speed\";\n/**\r\n * Often speed is exported without the proper namespace.\r\n */\r\nprivate static final String TAG_EXTENSION_SPEED_COMPAT = \"speed\";\nprivate static final String TAG_EXTENSION_HEARTRATE = \"gpxtpx:hr\";\nprivate static final String TAG_EXTENSION_CADENCE = \"gpxtpx:cad\";\nprivate static final String TAG_EXTENSION_POWER = \"pwr:PowerInWatts\";\nprivate static final String TAG_EXTENSION_GAIN = \"opentracks:gain\";\nprivate static final String TAG_EXTENSION_LOSS = \"opentracks:loss\";\nprivate static final String TAG_EXTENSION_DISTANCE = \"opentracks:distance\";\nprivate static final String TAG_EXTENSION_ACCURACY_HORIZONTAL = \"opentracks:accuracy_horizontal\";\nprivate static final String TAG_EXTENSION_ACCURACY_VERTICAL = \"opentracks:accuracy_vertical\";\nprivate Locator locator;\nprivate final Context context;\nprivate ZoneOffset zoneOffset;\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String time;\nprivate String speed;\nprivate String heartrate;\nprivate String cadence;\nprivate String power;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate String gain;\nprivate String loss;\nprivate String sensorDistance;\nprivate String accuracyHorizontal;\nprivate String accuracyVertical;\nprivate final LinkedList<TrackPoint> currentSegment = new LinkedList<>();\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "        case TAG_TRACK_POINT:\r\n            onTrackPointStart(attributes);\r\n            break;\r\n    }\r\n}",
  "context" : "@Override\r\npublic void startElement(String uri, String localName, String tag, Attributes attributes) {\r\n    switch(tag) {\r\n        case TAG_MARKER:\r\n            onMarkerStart(attributes);\r\n            break;\r\n        case TAG_TRACK:\r\n            trackImporter.newTrack();\r\n            break;\r\n        case TAG_TRACK_SEGMENT:\r\n            //Nothing to do here.\r\n            break;\r\n        case TAG_TRACK_POINT:\r\n            onTrackPointStart(attributes);\r\n            break;\r\n    }\r\n}",
  "start_lineno" : "134",
  "methodName" : "startElement",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java",
  "task_id" : "OpenTracks/243",
  "prompt" : "@Override\r\npublic void startElement(String uri, String localName, String tag, Attributes attributes) {\r\n    switch(tag) {\r\n        case TAG_MARKER:\r\n            onMarkerStart(attributes);\r\n            break;\r\n        case TAG_TRACK:\r\n            trackImporter.newTrack();\r\n            break;\r\n        case TAG_TRACK_SEGMENT:\r\n            //Nothing to do here.\r\n            break;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpxTrackImporter.class.getSimpleName();\nprivate static final String TAG_DESCRIPTION = \"desc\";\nprivate static final String TAG_ALTITUDE = \"ele\";\nprivate static final String TAG_GPX = \"gpx\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_TIME = \"time\";\nprivate static final String TAG_TRACK = \"trk\";\nprivate static final String TAG_TRACK_POINT = \"trkpt\";\nprivate static final String TAG_TRACK_SEGMENT = \"trkseg\";\nprivate static final String TAG_TYPE = \"type\";\nprivate static final String TAG_TYPE_LOCALIZED = \"opentracks:typeTranslated\";\nprivate static final String TAG_MARKER = \"wpt\";\nprivate static final String TAG_ID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_LAT = \"lat\";\nprivate static final String ATTRIBUTE_LON = \"lon\";\nprivate static final String TAG_EXTENSION_SPEED = \"gpxtpx:speed\";\n/**\r\n * Often speed is exported without the proper namespace.\r\n */\r\nprivate static final String TAG_EXTENSION_SPEED_COMPAT = \"speed\";\nprivate static final String TAG_EXTENSION_HEARTRATE = \"gpxtpx:hr\";\nprivate static final String TAG_EXTENSION_CADENCE = \"gpxtpx:cad\";\nprivate static final String TAG_EXTENSION_POWER = \"pwr:PowerInWatts\";\nprivate static final String TAG_EXTENSION_GAIN = \"opentracks:gain\";\nprivate static final String TAG_EXTENSION_LOSS = \"opentracks:loss\";\nprivate static final String TAG_EXTENSION_DISTANCE = \"opentracks:distance\";\nprivate static final String TAG_EXTENSION_ACCURACY_HORIZONTAL = \"opentracks:accuracy_horizontal\";\nprivate static final String TAG_EXTENSION_ACCURACY_VERTICAL = \"opentracks:accuracy_vertical\";\nprivate Locator locator;\nprivate final Context context;\nprivate ZoneOffset zoneOffset;\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String time;\nprivate String speed;\nprivate String heartrate;\nprivate String cadence;\nprivate String power;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate String gain;\nprivate String loss;\nprivate String sensorDistance;\nprivate String accuracyHorizontal;\nprivate String accuracyVertical;\nprivate final LinkedList<TrackPoint> currentSegment = new LinkedList<>();\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "270",
  "ground_truth" : "    TrackPoint first = currentSegment.getFirst();\r\n    first.setType(TrackPoint.Type.SEGMENT_START_AUTOMATIC);\r\n    trackImporter.addTrackPoints(currentSegment);\r\n    currentSegment.clear();\r\n}",
  "context" : "private void onTrackSegmentEnd() {\r\n    if (currentSegment.isEmpty()) {\r\n        Log.w(TAG, \"No TrackPoints in current segment.\");\r\n        return;\r\n    }\r\n    TrackPoint first = currentSegment.getFirst();\r\n    first.setType(TrackPoint.Type.SEGMENT_START_AUTOMATIC);\r\n    trackImporter.addTrackPoints(currentSegment);\r\n    currentSegment.clear();\r\n}",
  "start_lineno" : "259",
  "methodName" : "onTrackSegmentEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java",
  "task_id" : "OpenTracks/244",
  "prompt" : "private void onTrackSegmentEnd() {\r\n    if (currentSegment.isEmpty()) {\r\n        Log.w(TAG, \"No TrackPoints in current segment.\");\r\n        return;\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpxTrackImporter.class.getSimpleName();\nprivate static final String TAG_DESCRIPTION = \"desc\";\nprivate static final String TAG_ALTITUDE = \"ele\";\nprivate static final String TAG_GPX = \"gpx\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_TIME = \"time\";\nprivate static final String TAG_TRACK = \"trk\";\nprivate static final String TAG_TRACK_POINT = \"trkpt\";\nprivate static final String TAG_TRACK_SEGMENT = \"trkseg\";\nprivate static final String TAG_TYPE = \"type\";\nprivate static final String TAG_TYPE_LOCALIZED = \"opentracks:typeTranslated\";\nprivate static final String TAG_MARKER = \"wpt\";\nprivate static final String TAG_ID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_LAT = \"lat\";\nprivate static final String ATTRIBUTE_LON = \"lon\";\nprivate static final String TAG_EXTENSION_SPEED = \"gpxtpx:speed\";\n/**\r\n * Often speed is exported without the proper namespace.\r\n */\r\nprivate static final String TAG_EXTENSION_SPEED_COMPAT = \"speed\";\nprivate static final String TAG_EXTENSION_HEARTRATE = \"gpxtpx:hr\";\nprivate static final String TAG_EXTENSION_CADENCE = \"gpxtpx:cad\";\nprivate static final String TAG_EXTENSION_POWER = \"pwr:PowerInWatts\";\nprivate static final String TAG_EXTENSION_GAIN = \"opentracks:gain\";\nprivate static final String TAG_EXTENSION_LOSS = \"opentracks:loss\";\nprivate static final String TAG_EXTENSION_DISTANCE = \"opentracks:distance\";\nprivate static final String TAG_EXTENSION_ACCURACY_HORIZONTAL = \"opentracks:accuracy_horizontal\";\nprivate static final String TAG_EXTENSION_ACCURACY_VERTICAL = \"opentracks:accuracy_vertical\";\nprivate Locator locator;\nprivate final Context context;\nprivate ZoneOffset zoneOffset;\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String time;\nprivate String speed;\nprivate String heartrate;\nprivate String cadence;\nprivate String power;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate String gain;\nprivate String loss;\nprivate String sensorDistance;\nprivate String accuracyHorizontal;\nprivate String accuracyVertical;\nprivate final LinkedList<TrackPoint> currentSegment = new LinkedList<>();\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "390",
  "ground_truth" : "    accuracyVertical = null;\r\n    power = null;\r\n    heartrate = null;\r\n    cadence = null;\r\n}",
  "context" : "private void onTrackPointStart(Attributes attributes) {\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r\n    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    speed = null;\r\n    gain = null;\r\n    loss = null;\r\n    sensorDistance = null;\r\n    accuracyHorizontal = null;\r\n    accuracyVertical = null;\r\n    power = null;\r\n    heartrate = null;\r\n    cadence = null;\r\n}",
  "start_lineno" : "374",
  "methodName" : "onTrackPointStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java",
  "task_id" : "OpenTracks/245",
  "prompt" : "private void onTrackPointStart(Attributes attributes) {\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r\n    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    speed = null;\r\n    gain = null;\r\n    loss = null;\r\n    sensorDistance = null;\r\n    accuracyHorizontal = null;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpxTrackImporter.class.getSimpleName();\nprivate static final String TAG_DESCRIPTION = \"desc\";\nprivate static final String TAG_ALTITUDE = \"ele\";\nprivate static final String TAG_GPX = \"gpx\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_TIME = \"time\";\nprivate static final String TAG_TRACK = \"trk\";\nprivate static final String TAG_TRACK_POINT = \"trkpt\";\nprivate static final String TAG_TRACK_SEGMENT = \"trkseg\";\nprivate static final String TAG_TYPE = \"type\";\nprivate static final String TAG_TYPE_LOCALIZED = \"opentracks:typeTranslated\";\nprivate static final String TAG_MARKER = \"wpt\";\nprivate static final String TAG_ID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_LAT = \"lat\";\nprivate static final String ATTRIBUTE_LON = \"lon\";\nprivate static final String TAG_EXTENSION_SPEED = \"gpxtpx:speed\";\n/**\r\n * Often speed is exported without the proper namespace.\r\n */\r\nprivate static final String TAG_EXTENSION_SPEED_COMPAT = \"speed\";\nprivate static final String TAG_EXTENSION_HEARTRATE = \"gpxtpx:hr\";\nprivate static final String TAG_EXTENSION_CADENCE = \"gpxtpx:cad\";\nprivate static final String TAG_EXTENSION_POWER = \"pwr:PowerInWatts\";\nprivate static final String TAG_EXTENSION_GAIN = \"opentracks:gain\";\nprivate static final String TAG_EXTENSION_LOSS = \"opentracks:loss\";\nprivate static final String TAG_EXTENSION_DISTANCE = \"opentracks:distance\";\nprivate static final String TAG_EXTENSION_ACCURACY_HORIZONTAL = \"opentracks:accuracy_horizontal\";\nprivate static final String TAG_EXTENSION_ACCURACY_VERTICAL = \"opentracks:accuracy_vertical\";\nprivate Locator locator;\nprivate final Context context;\nprivate ZoneOffset zoneOffset;\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String time;\nprivate String speed;\nprivate String heartrate;\nprivate String cadence;\nprivate String power;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate String gain;\nprivate String loss;\nprivate String sensorDistance;\nprivate String accuracyHorizontal;\nprivate String accuracyVertical;\nprivate final LinkedList<TrackPoint> currentSegment = new LinkedList<>();\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "401",
  "ground_truth" : "    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    markerType = null;\r\n}",
  "context" : "private void onMarkerStart(Attributes attributes) {\r\n    name = null;\r\n    description = null;\r\n    photoUrl = null;\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r\n    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    markerType = null;\r\n}",
  "start_lineno" : "392",
  "methodName" : "onMarkerStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java",
  "task_id" : "OpenTracks/246",
  "prompt" : "private void onMarkerStart(Attributes attributes) {\r\n    name = null;\r\n    description = null;\r\n    photoUrl = null;\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpxTrackImporter.class.getSimpleName();\nprivate static final String TAG_DESCRIPTION = \"desc\";\nprivate static final String TAG_ALTITUDE = \"ele\";\nprivate static final String TAG_GPX = \"gpx\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_TIME = \"time\";\nprivate static final String TAG_TRACK = \"trk\";\nprivate static final String TAG_TRACK_POINT = \"trkpt\";\nprivate static final String TAG_TRACK_SEGMENT = \"trkseg\";\nprivate static final String TAG_TYPE = \"type\";\nprivate static final String TAG_TYPE_LOCALIZED = \"opentracks:typeTranslated\";\nprivate static final String TAG_MARKER = \"wpt\";\nprivate static final String TAG_ID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_LAT = \"lat\";\nprivate static final String ATTRIBUTE_LON = \"lon\";\nprivate static final String TAG_EXTENSION_SPEED = \"gpxtpx:speed\";\n/**\r\n * Often speed is exported without the proper namespace.\r\n */\r\nprivate static final String TAG_EXTENSION_SPEED_COMPAT = \"speed\";\nprivate static final String TAG_EXTENSION_HEARTRATE = \"gpxtpx:hr\";\nprivate static final String TAG_EXTENSION_CADENCE = \"gpxtpx:cad\";\nprivate static final String TAG_EXTENSION_POWER = \"pwr:PowerInWatts\";\nprivate static final String TAG_EXTENSION_GAIN = \"opentracks:gain\";\nprivate static final String TAG_EXTENSION_LOSS = \"opentracks:loss\";\nprivate static final String TAG_EXTENSION_DISTANCE = \"opentracks:distance\";\nprivate static final String TAG_EXTENSION_ACCURACY_HORIZONTAL = \"opentracks:accuracy_horizontal\";\nprivate static final String TAG_EXTENSION_ACCURACY_VERTICAL = \"opentracks:accuracy_vertical\";\nprivate Locator locator;\nprivate final Context context;\nprivate ZoneOffset zoneOffset;\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String time;\nprivate String speed;\nprivate String heartrate;\nprivate String cadence;\nprivate String power;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate String gain;\nprivate String loss;\nprivate String sensorDistance;\nprivate String accuracyHorizontal;\nprivate String accuracyVertical;\nprivate final LinkedList<TrackPoint> currentSegment = new LinkedList<>();\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "441",
  "ground_truth" : "    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}",
  "context" : "private void onFileEnd() {\r\n    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}",
  "start_lineno" : "438",
  "methodName" : "onFileEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java",
  "task_id" : "OpenTracks/247",
  "prompt" : "private void onFileEnd() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\nprivate static final String BUNDLE_DOCUMENT_URIS = \"document_uris\";\nprivate static final String BUNDLE_IS_DIRECTORY = \"is_directory\";\nprivate ImportActivityBinding viewBinding;\nboolean doubleBackToCancel = false;\nprivate ArrayList<Uri> documentUris = new ArrayList<>();\nprivate boolean isDirectory;\nprivate ImportViewModel viewModel;\nprivate ImportViewModel.Summary summary;",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "    outState.putParcelableArrayList(BUNDLE_DOCUMENT_URIS, documentUris);\r\n    outState.putBoolean(BUNDLE_IS_DIRECTORY, isDirectory);\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putParcelableArrayList(BUNDLE_DOCUMENT_URIS, documentUris);\r\n    outState.putBoolean(BUNDLE_IS_DIRECTORY, isDirectory);\r\n}",
  "start_lineno" : "118",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportActivity.java",
  "task_id" : "OpenTracks/248",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r",
  "type" : "android",
  "actions" : "android.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND"
}, {
  "variables" : "private static final String TAG = ImportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\nprivate static final String BUNDLE_DOCUMENT_URIS = \"document_uris\";\nprivate static final String BUNDLE_IS_DIRECTORY = \"is_directory\";\nprivate ImportActivityBinding viewBinding;\nboolean doubleBackToCancel = false;\nprivate ArrayList<Uri> documentUris = new ArrayList<>();\nprivate boolean isDirectory;\nprivate ImportViewModel viewModel;\nprivate ImportViewModel.Summary summary;",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "    }\r\n    this.doubleBackToCancel = true;\r\n    Toast.makeText(this, getString(R.string.generic_click_twice_cancel), Toast.LENGTH_SHORT).show();\r\n    new Handler().postDelayed(() -> doubleBackToCancel = false, 2000);\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    if (doubleBackToCancel || (summary != null && getTotalDone() == summary.getTotalCount())) {\r\n        super.onBackPressed();\r\n        viewModel.cancel();\r\n        getViewModelStore().clear();\r\n        return;\r\n    }\r\n    this.doubleBackToCancel = true;\r\n    Toast.makeText(this, getString(R.string.generic_click_twice_cancel), Toast.LENGTH_SHORT).show();\r\n    new Handler().postDelayed(() -> doubleBackToCancel = false, 2000);\r\n}",
  "start_lineno" : "125",
  "methodName" : "onBackPressed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportActivity.java",
  "task_id" : "OpenTracks/249",
  "prompt" : "import android.view.View\n@Override\r\npublic void onBackPressed() {\r\n    if (doubleBackToCancel || (summary != null && getTotalDone() == summary.getTotalCount())) {\r\n        super.onBackPressed();\r\n        viewModel.cancel();\r\n        getViewModelStore().clear();\r\n        return;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND"
}, {
  "variables" : "private static final String TAG = ImportActivity.class.getSimpleName();\npublic static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\nprivate static final String BUNDLE_DOCUMENT_URIS = \"document_uris\";\nprivate static final String BUNDLE_IS_DIRECTORY = \"is_directory\";\nprivate ImportActivityBinding viewBinding;\nboolean doubleBackToCancel = false;\nprivate ArrayList<Uri> documentUris = new ArrayList<>();\nprivate boolean isDirectory;\nprivate ImportViewModel viewModel;\nprivate ImportViewModel.Summary summary;",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "    viewBinding.importProgressTotal.setText(\"0\");\r\n    viewBinding.importProgressSummaryOk.setText(\"0\");\r\n    viewBinding.importProgressSummaryExists.setText(\"0\");\r\n    viewBinding.importProgressSummaryErrors.setText(\"0\");\r\n}",
  "context" : "private void initViews() {\r\n    viewBinding.importProgressDone.setText(\"0\");\r\n    viewBinding.importProgressTotal.setText(\"0\");\r\n    viewBinding.importProgressSummaryOk.setText(\"0\");\r\n    viewBinding.importProgressSummaryExists.setText(\"0\");\r\n    viewBinding.importProgressSummaryErrors.setText(\"0\");\r\n}",
  "start_lineno" : "140",
  "methodName" : "initViews",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportActivity.java",
  "task_id" : "OpenTracks/250",
  "prompt" : "import android.view.View\nprivate void initViews() {\r\n    viewBinding.importProgressDone.setText(\"0\");\r",
  "type" : "android",
  "actions" : "android.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.SEND\nandroid.intent.action.SEND_MULTIPLE\nandroid.intent.action.VIEW\nandroid.intent.action.SEND\nandroid.intent.action.VIEW\nandroid.intent.action.SEND"
}, {
  "variables" : "private static final String TAG = ImportService.class.getSimpleName();\nprivate static final int JOB_ID = 2;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_URI = \"extra_uri\";\nprivate ResultReceiver resultReceiver;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "    intent.putExtra(EXTRA_URI, uri);\r\n    enqueueWork(context, ImportService.class, JOB_ID, intent);\r\n}",
  "context" : "public static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putExtra(EXTRA_URI, uri);\r\n    enqueueWork(context, ImportService.class, JOB_ID, intent);\r\n}",
  "start_lineno" : "37",
  "methodName" : "enqueue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportService.java",
  "task_id" : "OpenTracks/251",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.os.ResultReceiver\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.job.JobService\npublic static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportService.class.getSimpleName();\nprivate static final int JOB_ID = 2;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_URI = \"extra_uri\";\nprivate ResultReceiver resultReceiver;",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "    Uri uri = intent.getParcelableExtra(EXTRA_URI);\r\n    importFile(DocumentFile.fromSingleUri(this, uri));\r\n}",
  "context" : "@Override\r\nprotected void onHandleWork(@NonNull Intent intent) {\r\n    resultReceiver = intent.getParcelableExtra(EXTRA_RECEIVER);\r\n    Uri uri = intent.getParcelableExtra(EXTRA_URI);\r\n    importFile(DocumentFile.fromSingleUri(this, uri));\r\n}",
  "start_lineno" : "44",
  "methodName" : "onHandleWork",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportService.java",
  "task_id" : "OpenTracks/252",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\nprotected void onHandleWork(@NonNull Intent intent) {\r\n    resultReceiver = intent.getParcelableExtra(EXTRA_RECEIVER);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportService.class.getSimpleName();\nprivate static final int JOB_ID = 2;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_URI = \"extra_uri\";\nprivate ResultReceiver resultReceiver;",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "    bundle.putParcelableArrayList(ImportServiceResultReceiver.RESULT_EXTRA_LIST_TRACK_ID, trackId);\r\n    bundle.putString(ImportServiceResultReceiver.RESULT_EXTRA_FILENAME, file.getName());\r\n    bundle.putString(ImportServiceResultReceiver.RESULT_EXTRA_MESSAGE, message);\r\n    resultReceiver.send(resultCode, bundle);\r\n}",
  "context" : "private void sendResult(int resultCode, ArrayList<Track.Id> trackId, DocumentFile file, String message) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelableArrayList(ImportServiceResultReceiver.RESULT_EXTRA_LIST_TRACK_ID, trackId);\r\n    bundle.putString(ImportServiceResultReceiver.RESULT_EXTRA_FILENAME, file.getName());\r\n    bundle.putString(ImportServiceResultReceiver.RESULT_EXTRA_MESSAGE, message);\r\n    resultReceiver.send(resultCode, bundle);\r\n}",
  "start_lineno" : "91",
  "methodName" : "sendResult",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportService.java",
  "task_id" : "OpenTracks/253",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.util.ArrayList\nimport androidx.documentfile.provider.DocumentFile\nimport android.os.Bundle\nprivate void sendResult(int resultCode, ArrayList<Track.Id> trackId, DocumentFile file, String message) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportViewModel.class.getSimpleName();\nprivate MutableLiveData<Summary> importData;\nprivate final ImportServiceResultReceiver resultReceiver;\nprivate final Summary summary;\nprivate boolean cancel = false;\nprivate final List<DocumentFile> filesToImport = new ArrayList<>();\nprivate int totalCount;\nprivate int successCount;\nprivate int existsCount;\nprivate int errorCount;\nprivate final ArrayList<Track.Id> importedTrackIds = new ArrayList<>();\nprivate final ArrayList<String> fileErrors = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        importData = new MutableLiveData<>();\r\n        loadData(documentFiles);\r\n    }\r\n    return importData;\r\n}",
  "context" : "LiveData<Summary> getImportData(List<DocumentFile> documentFiles) {\r\n    if (importData == null) {\r\n        importData = new MutableLiveData<>();\r\n        loadData(documentFiles);\r\n    }\r\n    return importData;\r\n}",
  "start_lineno" : "37",
  "methodName" : "getImportData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportViewModel.java",
  "task_id" : "OpenTracks/254",
  "prompt" : "import java.util.List\nimport androidx.lifecycle.LiveData\nimport androidx.documentfile.provider.DocumentFile\nLiveData<Summary> getImportData(List<DocumentFile> documentFiles) {\r\n    if (importData == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportViewModel.class.getSimpleName();\nprivate MutableLiveData<Summary> importData;\nprivate final ImportServiceResultReceiver resultReceiver;\nprivate final Summary summary;\nprivate boolean cancel = false;\nprivate final List<DocumentFile> filesToImport = new ArrayList<>();\nprivate int totalCount;\nprivate int successCount;\nprivate int existsCount;\nprivate int errorCount;\nprivate final ArrayList<Track.Id> importedTrackIds = new ArrayList<>();\nprivate final ArrayList<String> fileErrors = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "    nestedFileList.forEach(fileList::addAll);\r\n    summary.totalCount = fileList.size();\r\n    filesToImport.addAll(fileList);\r\n    importNextFile();\r\n}",
  "context" : "private void loadData(List<DocumentFile> documentFiles) {\r\n    List<ArrayList<DocumentFile>> nestedFileList = documentFiles.stream().map(FileUtils::getFiles).collect(Collectors.toList());\r\n    List<DocumentFile> fileList = new ArrayList<>();\r\n    nestedFileList.forEach(fileList::addAll);\r\n    summary.totalCount = fileList.size();\r\n    filesToImport.addAll(fileList);\r\n    importNextFile();\r\n}",
  "start_lineno" : "49",
  "methodName" : "loadData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportViewModel.java",
  "task_id" : "OpenTracks/255",
  "prompt" : "import de.dennisguse.opentracks.util.FileUtils\nimport java.util.stream.Collectors\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.documentfile.provider.DocumentFile\nprivate void loadData(List<DocumentFile> documentFiles) {\r\n    List<ArrayList<DocumentFile>> nestedFileList = documentFiles.stream().map(FileUtils::getFiles).collect(Collectors.toList());\r\n    List<DocumentFile> fileList = new ArrayList<>();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportViewModel.class.getSimpleName();\nprivate MutableLiveData<Summary> importData;\nprivate final ImportServiceResultReceiver resultReceiver;\nprivate final Summary summary;\nprivate boolean cancel = false;\nprivate final List<DocumentFile> filesToImport = new ArrayList<>();\nprivate int totalCount;\nprivate int successCount;\nprivate int existsCount;\nprivate int errorCount;\nprivate final ArrayList<Track.Id> importedTrackIds = new ArrayList<>();\nprivate final ArrayList<String> fileErrors = new ArrayList<>();",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        return;\r\n    }\r\n    ImportService.enqueue(getApplication(), resultReceiver, filesToImport.get(0).getUri());\r\n    filesToImport.remove(0);\r\n}",
  "context" : "private void importNextFile() {\r\n    if (cancel || filesToImport.isEmpty()) {\r\n        return;\r\n    }\r\n    ImportService.enqueue(getApplication(), resultReceiver, filesToImport.get(0).getUri());\r\n    filesToImport.remove(0);\r\n}",
  "start_lineno" : "62",
  "methodName" : "importNextFile",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportViewModel.java",
  "task_id" : "OpenTracks/256",
  "prompt" : "private void importNextFile() {\r\n    if (cancel || filesToImport.isEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmlTrackImporter.class.getSimpleName();\nprivate static final String MARKER_STYLE = \"#\" + KMLTrackExporter.MARKER_STYLE;\nprivate static final String TAG_COORDINATES = \"coordinates\";\nprivate static final String TAG_DESCRIPTION = \"description\";\nprivate static final String TAG_COORD = \"coord\";\nprivate static final String TAG_KML22_COORD = \"gx:coord\";\nprivate static final String TAG_MULTI_TRACK = \"MultiTrack\";\nprivate static final String TAG_KML22_MULTI_TRACK = \"gx:MultiTrack\";\nprivate static final String TAG_EXTENDED_DATA = \"Data\";\nprivate static final String TAG_SIMPLE_ARRAY_DATA = \"SimpleArrayData\";\nprivate static final String TAG_KML22_SIMPLE_ARRAY_DATA = \"gx:SimpleArrayData\";\nprivate static final String TAG_TRACK = \"Track\";\nprivate static final String TAG_KML22_TRACK = \"gx:Track\";\nprivate static final String TAG_VALUE = \"value\";\nprivate static final String TAG_KML22_VALUE = \"gx:value\";\nprivate static final String TAG_HREF = \"href\";\nprivate static final String TAG_KML = \"kml\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_PHOTO_OVERLAY = \"PhotoOverlay\";\nprivate static final String TAG_PLACEMARK = \"Placemark\";\nprivate static final String TAG_STYLE_URL = \"styleUrl\";\nprivate static final String TAG_UUID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_NAME = \"name\";\nprivate Locator locator;\nprivate final Context context;\nprivate final ArrayList<Instant> whenList = new ArrayList<>();\nprivate final ArrayList<Location> locationList = new ArrayList<>();\nprivate String dataType;\nprivate final ArrayList<String> trackpointTypeList = new ArrayList<>();\nprivate final ArrayList<Float> sensorSpeedList = new ArrayList<>();\nprivate final ArrayList<Float> sensorDistanceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorCadenceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorHeartRateList = new ArrayList<>();\nprivate final ArrayList<Float> sensorPowerList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeGainList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeLossList = new ArrayList<>();\nprivate final ArrayList<Float> accuracyHorizontal = new ArrayList<>();\nprivate final ArrayList<Float> accuracyVertical = new ArrayList<>();\nprivate final ArrayList<Marker> markers = new ArrayList<>();\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "243",
  "ground_truth" : "    latitude = null;\r\n    longitude = null;\r\n    altitude = null;\r\n    markerType = null;\r\n}",
  "context" : "private void onMarkerStart() {\r\n    // Reset all Placemark variables\r\n    name = null;\r\n    description = null;\r\n    activityTypeLocalized = null;\r\n    photoUrl = null;\r\n    latitude = null;\r\n    longitude = null;\r\n    altitude = null;\r\n    markerType = null;\r\n}",
  "start_lineno" : "233",
  "methodName" : "onMarkerStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java",
  "task_id" : "OpenTracks/257",
  "prompt" : "private void onMarkerStart() {\r\n    // Reset all Placemark variables\r\n    name = null;\r\n    description = null;\r\n    activityTypeLocalized = null;\r\n    photoUrl = null;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmlTrackImporter.class.getSimpleName();\nprivate static final String MARKER_STYLE = \"#\" + KMLTrackExporter.MARKER_STYLE;\nprivate static final String TAG_COORDINATES = \"coordinates\";\nprivate static final String TAG_DESCRIPTION = \"description\";\nprivate static final String TAG_COORD = \"coord\";\nprivate static final String TAG_KML22_COORD = \"gx:coord\";\nprivate static final String TAG_MULTI_TRACK = \"MultiTrack\";\nprivate static final String TAG_KML22_MULTI_TRACK = \"gx:MultiTrack\";\nprivate static final String TAG_EXTENDED_DATA = \"Data\";\nprivate static final String TAG_SIMPLE_ARRAY_DATA = \"SimpleArrayData\";\nprivate static final String TAG_KML22_SIMPLE_ARRAY_DATA = \"gx:SimpleArrayData\";\nprivate static final String TAG_TRACK = \"Track\";\nprivate static final String TAG_KML22_TRACK = \"gx:Track\";\nprivate static final String TAG_VALUE = \"value\";\nprivate static final String TAG_KML22_VALUE = \"gx:value\";\nprivate static final String TAG_HREF = \"href\";\nprivate static final String TAG_KML = \"kml\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_PHOTO_OVERLAY = \"PhotoOverlay\";\nprivate static final String TAG_PLACEMARK = \"Placemark\";\nprivate static final String TAG_STYLE_URL = \"styleUrl\";\nprivate static final String TAG_UUID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_NAME = \"name\";\nprivate Locator locator;\nprivate final Context context;\nprivate final ArrayList<Instant> whenList = new ArrayList<>();\nprivate final ArrayList<Location> locationList = new ArrayList<>();\nprivate String dataType;\nprivate final ArrayList<String> trackpointTypeList = new ArrayList<>();\nprivate final ArrayList<Float> sensorSpeedList = new ArrayList<>();\nprivate final ArrayList<Float> sensorDistanceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorCadenceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorHeartRateList = new ArrayList<>();\nprivate final ArrayList<Float> sensorPowerList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeGainList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeLossList = new ArrayList<>();\nprivate final ArrayList<Float> accuracyHorizontal = new ArrayList<>();\nprivate final ArrayList<Float> accuracyVertical = new ArrayList<>();\nprivate final ArrayList<Marker> markers = new ArrayList<>();\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "285",
  "ground_truth" : "        longitude = parts[0];\r\n        latitude = parts[1];\r\n        altitude = parts.length == 3 ? parts[2] : null;\r\n    }\r\n}",
  "context" : "private void onMarkerLocationEnd() {\r\n    if (content != null) {\r\n        String[] parts = content.trim().split(\",\");\r\n        if (parts.length != 2 && parts.length != 3) {\r\n            return;\r\n        }\r\n        longitude = parts[0];\r\n        latitude = parts[1];\r\n        altitude = parts.length == 3 ? parts[2] : null;\r\n    }\r\n}",
  "start_lineno" : "275",
  "methodName" : "onMarkerLocationEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java",
  "task_id" : "OpenTracks/258",
  "prompt" : "private void onMarkerLocationEnd() {\r\n    if (content != null) {\r\n        String[] parts = content.trim().split(\",\");\r\n        if (parts.length != 2 && parts.length != 3) {\r\n            return;\r\n        }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmlTrackImporter.class.getSimpleName();\nprivate static final String MARKER_STYLE = \"#\" + KMLTrackExporter.MARKER_STYLE;\nprivate static final String TAG_COORDINATES = \"coordinates\";\nprivate static final String TAG_DESCRIPTION = \"description\";\nprivate static final String TAG_COORD = \"coord\";\nprivate static final String TAG_KML22_COORD = \"gx:coord\";\nprivate static final String TAG_MULTI_TRACK = \"MultiTrack\";\nprivate static final String TAG_KML22_MULTI_TRACK = \"gx:MultiTrack\";\nprivate static final String TAG_EXTENDED_DATA = \"Data\";\nprivate static final String TAG_SIMPLE_ARRAY_DATA = \"SimpleArrayData\";\nprivate static final String TAG_KML22_SIMPLE_ARRAY_DATA = \"gx:SimpleArrayData\";\nprivate static final String TAG_TRACK = \"Track\";\nprivate static final String TAG_KML22_TRACK = \"gx:Track\";\nprivate static final String TAG_VALUE = \"value\";\nprivate static final String TAG_KML22_VALUE = \"gx:value\";\nprivate static final String TAG_HREF = \"href\";\nprivate static final String TAG_KML = \"kml\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_PHOTO_OVERLAY = \"PhotoOverlay\";\nprivate static final String TAG_PLACEMARK = \"Placemark\";\nprivate static final String TAG_STYLE_URL = \"styleUrl\";\nprivate static final String TAG_UUID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_NAME = \"name\";\nprivate Locator locator;\nprivate final Context context;\nprivate final ArrayList<Instant> whenList = new ArrayList<>();\nprivate final ArrayList<Location> locationList = new ArrayList<>();\nprivate String dataType;\nprivate final ArrayList<String> trackpointTypeList = new ArrayList<>();\nprivate final ArrayList<Float> sensorSpeedList = new ArrayList<>();\nprivate final ArrayList<Float> sensorDistanceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorCadenceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorHeartRateList = new ArrayList<>();\nprivate final ArrayList<Float> sensorPowerList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeGainList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeLossList = new ArrayList<>();\nprivate final ArrayList<Float> accuracyHorizontal = new ArrayList<>();\nprivate final ArrayList<Float> accuracyVertical = new ArrayList<>();\nprivate final ArrayList<Marker> markers = new ArrayList<>();\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "301",
  "ground_truth" : "    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}",
  "context" : "private void onTrackSegmentStart() {\r\n    locationList.clear();\r\n    whenList.clear();\r\n    trackpointTypeList.clear();\r\n    sensorSpeedList.clear();\r\n    sensorDistanceList.clear();\r\n    sensorHeartRateList.clear();\r\n    sensorCadenceList.clear();\r\n    sensorPowerList.clear();\r\n    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}",
  "start_lineno" : "287",
  "methodName" : "onTrackSegmentStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java",
  "task_id" : "OpenTracks/259",
  "prompt" : "private void onTrackSegmentStart() {\r\n    locationList.clear();\r\n    whenList.clear();\r\n    trackpointTypeList.clear();\r\n    sensorSpeedList.clear();\r\n    sensorDistanceList.clear();\r\n    sensorHeartRateList.clear();\r\n    sensorCadenceList.clear();\r\n    sensorPowerList.clear();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmlTrackImporter.class.getSimpleName();\nprivate static final String MARKER_STYLE = \"#\" + KMLTrackExporter.MARKER_STYLE;\nprivate static final String TAG_COORDINATES = \"coordinates\";\nprivate static final String TAG_DESCRIPTION = \"description\";\nprivate static final String TAG_COORD = \"coord\";\nprivate static final String TAG_KML22_COORD = \"gx:coord\";\nprivate static final String TAG_MULTI_TRACK = \"MultiTrack\";\nprivate static final String TAG_KML22_MULTI_TRACK = \"gx:MultiTrack\";\nprivate static final String TAG_EXTENDED_DATA = \"Data\";\nprivate static final String TAG_SIMPLE_ARRAY_DATA = \"SimpleArrayData\";\nprivate static final String TAG_KML22_SIMPLE_ARRAY_DATA = \"gx:SimpleArrayData\";\nprivate static final String TAG_TRACK = \"Track\";\nprivate static final String TAG_KML22_TRACK = \"gx:Track\";\nprivate static final String TAG_VALUE = \"value\";\nprivate static final String TAG_KML22_VALUE = \"gx:value\";\nprivate static final String TAG_HREF = \"href\";\nprivate static final String TAG_KML = \"kml\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_PHOTO_OVERLAY = \"PhotoOverlay\";\nprivate static final String TAG_PLACEMARK = \"Placemark\";\nprivate static final String TAG_STYLE_URL = \"styleUrl\";\nprivate static final String TAG_UUID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_NAME = \"name\";\nprivate Locator locator;\nprivate final Context context;\nprivate final ArrayList<Instant> whenList = new ArrayList<>();\nprivate final ArrayList<Location> locationList = new ArrayList<>();\nprivate String dataType;\nprivate final ArrayList<String> trackpointTypeList = new ArrayList<>();\nprivate final ArrayList<Float> sensorSpeedList = new ArrayList<>();\nprivate final ArrayList<Float> sensorDistanceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorCadenceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorHeartRateList = new ArrayList<>();\nprivate final ArrayList<Float> sensorPowerList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeGainList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeLossList = new ArrayList<>();\nprivate final ArrayList<Float> accuracyHorizontal = new ArrayList<>();\nprivate final ArrayList<Float> accuracyVertical = new ArrayList<>();\nprivate final ArrayList<Marker> markers = new ArrayList<>();\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "384",
  "ground_truth" : "    locationList.add(createLocation(longitude, latitude, altitude));\r\n    longitude = null;\r\n    latitude = null;\r\n    altitude = null;\r\n}",
  "context" : "private void onCoordEnded() {\r\n    String[] parts = content.trim().split(\" \");\r\n    if (parts.length == 2 || parts.length == 3) {\r\n        longitude = parts[0];\r\n        latitude = parts[1];\r\n        altitude = parts.length == 3 ? parts[2] : null;\r\n    }\r\n    locationList.add(createLocation(longitude, latitude, altitude));\r\n    longitude = null;\r\n    latitude = null;\r\n    altitude = null;\r\n}",
  "start_lineno" : "371",
  "methodName" : "onCoordEnded",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java",
  "task_id" : "OpenTracks/260",
  "prompt" : "private void onCoordEnded() {\r\n    String[] parts = content.trim().split(\" \");\r\n    if (parts.length == 2 || parts.length == 3) {\r\n        longitude = parts[0];\r\n        latitude = parts[1];\r\n        altitude = parts.length == 3 ? parts[2] : null;\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmlTrackImporter.class.getSimpleName();\nprivate static final String MARKER_STYLE = \"#\" + KMLTrackExporter.MARKER_STYLE;\nprivate static final String TAG_COORDINATES = \"coordinates\";\nprivate static final String TAG_DESCRIPTION = \"description\";\nprivate static final String TAG_COORD = \"coord\";\nprivate static final String TAG_KML22_COORD = \"gx:coord\";\nprivate static final String TAG_MULTI_TRACK = \"MultiTrack\";\nprivate static final String TAG_KML22_MULTI_TRACK = \"gx:MultiTrack\";\nprivate static final String TAG_EXTENDED_DATA = \"Data\";\nprivate static final String TAG_SIMPLE_ARRAY_DATA = \"SimpleArrayData\";\nprivate static final String TAG_KML22_SIMPLE_ARRAY_DATA = \"gx:SimpleArrayData\";\nprivate static final String TAG_TRACK = \"Track\";\nprivate static final String TAG_KML22_TRACK = \"gx:Track\";\nprivate static final String TAG_VALUE = \"value\";\nprivate static final String TAG_KML22_VALUE = \"gx:value\";\nprivate static final String TAG_HREF = \"href\";\nprivate static final String TAG_KML = \"kml\";\nprivate static final String TAG_NAME = \"name\";\nprivate static final String TAG_PHOTO_OVERLAY = \"PhotoOverlay\";\nprivate static final String TAG_PLACEMARK = \"Placemark\";\nprivate static final String TAG_STYLE_URL = \"styleUrl\";\nprivate static final String TAG_UUID = \"opentracks:trackid\";\nprivate static final String ATTRIBUTE_NAME = \"name\";\nprivate Locator locator;\nprivate final Context context;\nprivate final ArrayList<Instant> whenList = new ArrayList<>();\nprivate final ArrayList<Location> locationList = new ArrayList<>();\nprivate String dataType;\nprivate final ArrayList<String> trackpointTypeList = new ArrayList<>();\nprivate final ArrayList<Float> sensorSpeedList = new ArrayList<>();\nprivate final ArrayList<Float> sensorDistanceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorCadenceList = new ArrayList<>();\nprivate final ArrayList<Float> sensorHeartRateList = new ArrayList<>();\nprivate final ArrayList<Float> sensorPowerList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeGainList = new ArrayList<>();\nprivate final ArrayList<Float> altitudeLossList = new ArrayList<>();\nprivate final ArrayList<Float> accuracyHorizontal = new ArrayList<>();\nprivate final ArrayList<Float> accuracyVertical = new ArrayList<>();\nprivate final ArrayList<Marker> markers = new ArrayList<>();\nprivate String name;\nprivate String description;\nprivate String activityType;\nprivate String activityTypeLocalized;\nprivate String latitude;\nprivate String longitude;\nprivate String altitude;\nprivate String markerType;\nprivate String photoUrl;\nprivate String uuid;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "449",
  "ground_truth" : "    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}",
  "context" : "private void onFileEnd() {\r\n    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}",
  "start_lineno" : "446",
  "methodName" : "onFileEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java",
  "task_id" : "OpenTracks/261",
  "prompt" : "private void onFileEnd() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmzTrackImporter.class.getSimpleName();\nprivate static final List<String> KMZ_IMAGES_EXT = List.of(\"jpeg\", \"jpg\", \"png\");\nprivate final Context context;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "            return new ArrayList<>();\r\n        }\r\n    }\r\n    return trackIdsWithImages;\r\n}",
  "context" : "@NonNull\r\npublic List<Track.Id> importFile(Uri fileUri) throws IOException {\r\n    List<Track.Id> trackIds = findAndParseKmlFile(fileUri);\r\n    List<Track.Id> trackIdsWithImages = new ArrayList<>();\r\n    for (Track.Id trackId : trackIds) {\r\n        if (copyKmzImages(fileUri, trackId)) {\r\n            trackIdsWithImages.add(trackId);\r\n            deleteOrphanImages(trackId);\r\n        } else {\r\n            return new ArrayList<>();\r\n        }\r\n    }\r\n    return trackIdsWithImages;\r\n}",
  "start_lineno" : "62",
  "methodName" : "importFile",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmzTrackImporter.java",
  "task_id" : "OpenTracks/262",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport java.io.IOException\nimport java.io.File\nimport androidx.annotation.NonNull\nimport android.net.Uri\n@NonNull\r\npublic List<Track.Id> importFile(Uri fileUri) throws IOException {\r\n    List<Track.Id> trackIds = findAndParseKmlFile(fileUri);\r\n    List<Track.Id> trackIdsWithImages = new ArrayList<>();\r\n    for (Track.Id trackId : trackIds) {\r\n        if (copyKmzImages(fileUri, trackId)) {\r\n            trackIdsWithImages.add(trackId);\r\n            deleteOrphanImages(trackId);\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmzTrackImporter.class.getSimpleName();\nprivate static final List<String> KMZ_IMAGES_EXT = List.of(\"jpeg\", \"jpg\", \"png\");\nprivate final Context context;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "    if (fileExt == null) {\r\n        return false;\r\n    }\r\n    return KMZ_IMAGES_EXT.contains(fileExt);\r\n}",
  "context" : "/**\r\n * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\r\n * Otherwise returns false.\r\n */\r\nprivate boolean hasImageExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return false;\r\n    }\r\n    String fileExt = FileUtils.getExtension(fileName.toLowerCase());\r\n    if (fileExt == null) {\r\n        return false;\r\n    }\r\n    return KMZ_IMAGES_EXT.contains(fileExt);\r\n}",
  "start_lineno" : "133",
  "methodName" : "hasImageExtension",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmzTrackImporter.java",
  "task_id" : "OpenTracks/263",
  "prompt" : "import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.R\nimport java.io.File\n/**\r\n * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\r\n * Otherwise returns false.\r\n */\r\nprivate boolean hasImageExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return false;\r\n    }\r\n    String fileExt = FileUtils.getExtension(fileName.toLowerCase());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = KmzTrackImporter.class.getSimpleName();\nprivate static final List<String> KMZ_IMAGES_EXT = List.of(\"jpeg\", \"jpg\", \"png\");\nprivate final Context context;\nprivate final TrackImporter trackImporter;",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "            // SAX2 always tries close InputStreams; but that would also close our ZIP file.\r\n        }\r\n    };\r\n    return kmlFileTrackImporter.importFile(nonClosableInputStream);\r\n}",
  "context" : "private List<Track.Id> parseKml(ZipInputStream zipInputStream) throws IOException {\r\n    XMLImporter kmlFileTrackImporter = new XMLImporter(new KmlTrackImporter(context, trackImporter));\r\n    InputStream nonClosableInputStream = new FilterInputStream(zipInputStream) {\r\n\r\n        @Override\r\n        public void close() {\r\n            // SAX2 always tries close InputStreams; but that would also close our ZIP file.\r\n        }\r\n    };\r\n    return kmlFileTrackImporter.importFile(nonClosableInputStream);\r\n}",
  "start_lineno" : "212",
  "methodName" : "parseKml",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmzTrackImporter.java",
  "task_id" : "OpenTracks/264",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.zip.ZipInputStream\nimport java.util.List\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.FilterInputStream\nimport java.io.File\nprivate List<Track.Id> parseKml(ZipInputStream zipInputStream) throws IOException {\r\n    XMLImporter kmlFileTrackImporter = new XMLImporter(new KmlTrackImporter(context, trackImporter));\r\n    InputStream nonClosableInputStream = new FilterInputStream(zipInputStream) {\r\n\r\n        @Override\r\n        public void close() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackImporter.class.getSimpleName();\nprivate final Context context;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Distance maxRecordingDistance;\nprivate final boolean preventReimport;\nprivate final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<TrackPoint> trackPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "    }\r\n    track = null;\r\n    trackPoints.clear();\r\n    markers.clear();\r\n}",
  "context" : "void newTrack() {\r\n    if (track != null) {\r\n        finishTrack();\r\n    }\r\n    track = null;\r\n    trackPoints.clear();\r\n    markers.clear();\r\n}",
  "start_lineno" : "71",
  "methodName" : "newTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java",
  "task_id" : "OpenTracks/265",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nvoid newTrack() {\r\n    if (track != null) {\r\n        finishTrack();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackImporter.class.getSimpleName();\nprivate final Context context;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Distance maxRecordingDistance;\nprivate final boolean preventReimport;\nprivate final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<TrackPoint> trackPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "        finishTrack();\r\n    }\r\n}",
  "context" : "void finish() {\r\n    if (track != null) {\r\n        finishTrack();\r\n    }\r\n}",
  "start_lineno" : "118",
  "methodName" : "finish",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java",
  "task_id" : "OpenTracks/266",
  "prompt" : "void finish() {\r\n    if (track != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackImporter.class.getSimpleName();\nprivate final Context context;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Distance maxRecordingDistance;\nprivate final boolean preventReimport;\nprivate final List<Track.Id> trackIds = new ArrayList<>();\nprivate final List<TrackPoint> trackPoints = new LinkedList<>();\nprivate final List<Marker> markers = new LinkedList<>();",
  "app_type" : "life",
  "end_lineno" : "285",
  "ground_truth" : "        Uri photoUri = FileUtils.getUriForFile(context, file);\r\n        return \"\" + photoUri;\r\n    }\r\n    return null;\r\n}",
  "context" : "/**\r\n * Gets the photo url for a file.\r\n *\r\n * @param externalPhotoUrl the file name\r\n */\r\nprivate String getInternalPhotoUrl(@NonNull Track.Id trackId, @NonNull String externalPhotoUrl) {\r\n    String importFileName = KmzTrackImporter.importNameForFilename(externalPhotoUrl);\r\n    File file = MarkerUtils.buildInternalPhotoFile(context, trackId, Uri.parse(importFileName));\r\n    if (file != null) {\r\n        Uri photoUri = FileUtils.getUriForFile(context, file);\r\n        return \"\" + photoUri;\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "276",
  "methodName" : "getInternalPhotoUrl",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java",
  "task_id" : "OpenTracks/267",
  "prompt" : "import de.dennisguse.opentracks.ui.markers.MarkerUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.io.File\nimport androidx.annotation.NonNull\nimport android.net.Uri\n/**\r\n * Gets the photo url for a file.\r\n *\r\n * @param externalPhotoUrl the file name\r\n */\r\nprivate String getInternalPhotoUrl(@NonNull Track.Id trackId, @NonNull String externalPhotoUrl) {\r\n    String importFileName = KmzTrackImporter.importNameForFilename(externalPhotoUrl);\r\n    File file = MarkerUtils.buildInternalPhotoFile(context, trackId, Uri.parse(importFileName));\r\n    if (file != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = XMLImporter.class.getSimpleName();\nprivate final TrackParser parser;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        return importFile(inputStream);\r\n    }\r\n}",
  "context" : "@NonNull\r\npublic List<Track.Id> importFile(Context context, Uri uri) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    try (InputStream inputStream = context.getContentResolver().openInputStream(uri)) {\r\n        return importFile(inputStream);\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "importFile",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\XMLImporter.java",
  "task_id" : "OpenTracks/268",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.io.InputStream\nimport java.io.IOException\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.content.Context\n@NonNull\r\npublic List<Track.Id> importFile(Context context, Uri uri) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    try (InputStream inputStream = context.getContentResolver().openInputStream(uri)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String MIME_KMZ = \"application/vnd.google-earth.kmz\";\nprivate static final String MIME_KML = \"application/vnd.google-earth.kml+xml\";\nprivate final String preferenceId;\nprivate static final boolean exportPhotos = false;\nprivate static final boolean exportPhotos = true;",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "    KMLTrackExporter exporter = new KMLTrackExporter(context, contentProviderUtils, exportPhotos);\r\n    return new KmzTrackExporter(context, contentProviderUtils, exporter, exportPhotos);\r\n}",
  "context" : "@Override\r\npublic TrackExporter createTrackExporter(@NonNull Context context, @NonNull ContentProviderUtils contentProviderUtils) {\r\n    KMLTrackExporter exporter = new KMLTrackExporter(context, contentProviderUtils, exportPhotos);\r\n    return new KmzTrackExporter(context, contentProviderUtils, exporter, exportPhotos);\r\n}",
  "start_lineno" : "49",
  "methodName" : "createTrackExporter",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\TrackFileFormat.java",
  "task_id" : "OpenTracks/269",
  "prompt" : "import de.dennisguse.opentracks.io.file.exporter.TrackExporter\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic TrackExporter createTrackExporter(@NonNull Context context, @NonNull ContentProviderUtils contentProviderUtils) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String MIME_KMZ = \"application/vnd.google-earth.kmz\";\nprivate static final String MIME_KML = \"application/vnd.google-earth.kml+xml\";\nprivate final String preferenceId;\nprivate static final boolean exportPhotos = false;\nprivate static final boolean exportPhotos = true;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    KMLTrackExporter exporter = new KMLTrackExporter(context, contentProviderUtils, exportPhotos);\r\n    return new KmzTrackExporter(context, contentProviderUtils, exporter, exportPhotos);\r\n}",
  "context" : "@Override\r\npublic TrackExporter createTrackExporter(@NonNull Context context, @NonNull ContentProviderUtils contentProviderUtils) {\r\n    KMLTrackExporter exporter = new KMLTrackExporter(context, contentProviderUtils, exportPhotos);\r\n    return new KmzTrackExporter(context, contentProviderUtils, exporter, exportPhotos);\r\n}",
  "start_lineno" : "74",
  "methodName" : "createTrackExporter",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\TrackFileFormat.java",
  "task_id" : "OpenTracks/270",
  "prompt" : "import de.dennisguse.opentracks.io.file.exporter.TrackExporter\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic TrackExporter createTrackExporter(@NonNull Context context, @NonNull ContentProviderUtils contentProviderUtils) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String UUID_KEY = \"{uuid}\";\npublic static final String TRACKNAME_KEY = \"{name}\";\npublic static final String ACTIVITY_TYPE_KEY = \"{category}\";\npublic static final String STARTTIME_TIME_KEY = \"{time}\";\npublic static final String STARTTIME_DATE_KEY = \"{date}\";\nprivate final String template;",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "    values.put(ACTIVITY_TYPE_KEY, track.getActivityTypeLocalized());\r\n    values.put(STARTTIME_TIME_KEY, track.getStartTime().toLocalTime().toString());\r\n    values.put(STARTTIME_DATE_KEY, track.getStartTime().toLocalDate().toString());\r\n    return format(format(template, values), trackFileFormat);\r\n}",
  "context" : "public String format(@NonNull Track track, @NonNull TrackFileFormat trackFileFormat) {\r\n    Map<String, String> values = new HashMap<>();\r\n    values.put(UUID_KEY, track.getUuid().toString().substring(0, 8));\r\n    values.put(TRACKNAME_KEY, track.getName());\r\n    values.put(ACTIVITY_TYPE_KEY, track.getActivityTypeLocalized());\r\n    values.put(STARTTIME_TIME_KEY, track.getStartTime().toLocalTime().toString());\r\n    values.put(STARTTIME_DATE_KEY, track.getStartTime().toLocalDate().toString());\r\n    return format(format(template, values), trackFileFormat);\r\n}",
  "start_lineno" : "42",
  "methodName" : "format",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\TrackFilenameGenerator.java",
  "task_id" : "OpenTracks/271",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.UUID\nimport java.util.Map\nimport java.util.HashMap\nimport androidx.annotation.NonNull\npublic String format(@NonNull Track track, @NonNull TrackFileFormat trackFileFormat) {\r\n    Map<String, String> values = new HashMap<>();\r\n    values.put(UUID_KEY, track.getUuid().toString().substring(0, 8));\r\n    values.put(TRACKNAME_KEY, track.getName());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String UUID_KEY = \"{uuid}\";\npublic static final String TRACKNAME_KEY = \"{name}\";\npublic static final String ACTIVITY_TYPE_KEY = \"{category}\";\npublic static final String STARTTIME_TIME_KEY = \"{time}\";\npublic static final String STARTTIME_DATE_KEY = \"{date}\";\nprivate final String template;",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        return !template.isEmpty();\r\n    } catch (TemplateInvalidException | NullPointerException e) {\r\n        return false;\r\n    }\r\n}",
  "context" : "public boolean isValid() {\r\n    try {\r\n        getExample();\r\n        return !template.isEmpty();\r\n    } catch (TemplateInvalidException | NullPointerException e) {\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "84",
  "methodName" : "isValid",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\TrackFilenameGenerator.java",
  "task_id" : "OpenTracks/272",
  "prompt" : "public boolean isValid() {\r\n    try {\r\n        getExample();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String UUID_KEY = \"{uuid}\";\npublic static final String TRACKNAME_KEY = \"{name}\";\npublic static final String ACTIVITY_TYPE_KEY = \"{category}\";\npublic static final String STARTTIME_TIME_KEY = \"{time}\";\npublic static final String STARTTIME_DATE_KEY = \"{date}\";\nprivate final String template;",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "    track.setName(\"Berlin\");\r\n    track.setUuid(UUID.fromString(\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"));\r\n    track.getTrackStatistics().setStartTime(Instant.ofEpochMilli(0));\r\n    return format(track, TrackFileFormat.KMZ_WITH_TRACKDETAIL_AND_SENSORDATA_AND_PICTURES);\r\n}",
  "context" : "public String getExample() {\r\n    Track track = new Track();\r\n    track.setName(\"Berlin\");\r\n    track.setUuid(UUID.fromString(\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"));\r\n    track.getTrackStatistics().setStartTime(Instant.ofEpochMilli(0));\r\n    return format(track, TrackFileFormat.KMZ_WITH_TRACKDETAIL_AND_SENSORDATA_AND_PICTURES);\r\n}",
  "start_lineno" : "93",
  "methodName" : "getExample",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\TrackFilenameGenerator.java",
  "task_id" : "OpenTracks/273",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\npublic String getExample() {\r\n    Track track = new Track();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_NAME = \"TRACK_NAME\";\npublic static final String EXTRA_TRACK_DESCRIPTION = \"TRACK_DESCRIPTION\";\npublic static final String EXTRA_STATS_TARGET_PACKAGE = \"STATS_TARGET_PACKAGE\";\npublic static final String EXTRA_STATS_TARGET_CLASS = \"STATS_TARGET_CLASS\";\nprivate static final String TAG = StartRecording.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "                startDashboardAPI(trackId, bundle);\r\n            }\r\n        }\r\n    }\r\n}",
  "context" : "protected void execute(TrackRecordingService service) {\r\n    Track.Id trackId = service.startNewTrack();\r\n    if (trackId != null) {\r\n        Bundle bundle = getIntent().getExtras();\r\n        if (bundle != null) {\r\n            updateTrackMetadata(trackId, bundle);\r\n            if (PreferencesUtils.isPublicAPIDashboardEnabled()) {\r\n                startDashboardAPI(trackId, bundle);\r\n            }\r\n        }\r\n    }\r\n}",
  "start_lineno" : "27",
  "methodName" : "execute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StartRecording.java",
  "task_id" : "OpenTracks/274",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.data.models.Track\nimport android.os.Bundle\nprotected void execute(TrackRecordingService service) {\r\n    Track.Id trackId = service.startNewTrack();\r\n    if (trackId != null) {\r\n        Bundle bundle = getIntent().getExtras();\r\n        if (bundle != null) {\r\n            updateTrackMetadata(trackId, bundle);\r\n            if (PreferencesUtils.isPublicAPIDashboardEnabled()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_NAME = \"TRACK_NAME\";\npublic static final String EXTRA_TRACK_DESCRIPTION = \"TRACK_DESCRIPTION\";\npublic static final String EXTRA_STATS_TARGET_PACKAGE = \"STATS_TARGET_PACKAGE\";\npublic static final String EXTRA_STATS_TARGET_CLASS = \"STATS_TARGET_CLASS\";\nprivate static final String TAG = StartRecording.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "    Track track = contentProviderUtils.getTrack(trackId);\r\n    TrackUtils.updateTrack(this, track, bundle.getString(EXTRA_TRACK_NAME, null), bundle.getString(EXTRA_TRACK_ACTIVITY_TYPE_LOCALIZED, null), ActivityType.findBy(bundle.getString(EXTRA_TRACK_ACTIVITY_TYPE_ID, null)), bundle.getString(EXTRA_TRACK_DESCRIPTION, null), contentProviderUtils);\r\n}",
  "context" : "private void updateTrackMetadata(@NonNull Track.Id trackId, @NonNull Bundle bundle) {\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(this);\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    TrackUtils.updateTrack(this, track, bundle.getString(EXTRA_TRACK_NAME, null), bundle.getString(EXTRA_TRACK_ACTIVITY_TYPE_LOCALIZED, null), ActivityType.findBy(bundle.getString(EXTRA_TRACK_ACTIVITY_TYPE_ID, null)), bundle.getString(EXTRA_TRACK_DESCRIPTION, null), contentProviderUtils);\r\n}",
  "start_lineno" : "41",
  "methodName" : "updateTrackMetadata",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StartRecording.java",
  "task_id" : "OpenTracks/275",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport androidx.annotation.NonNull\nimport android.os.Bundle\nprivate void updateTrackMetadata(@NonNull Track.Id trackId, @NonNull Bundle bundle) {\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_NAME = \"TRACK_NAME\";\npublic static final String EXTRA_TRACK_DESCRIPTION = \"TRACK_DESCRIPTION\";\npublic static final String EXTRA_STATS_TARGET_PACKAGE = \"STATS_TARGET_PACKAGE\";\npublic static final String EXTRA_STATS_TARGET_CLASS = \"STATS_TARGET_CLASS\";\nprivate static final String TAG = StartRecording.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "    String targetClass = bundle.getString(EXTRA_STATS_TARGET_CLASS, null);\r\n    if (targetClass != null && targetPackage != null) {\r\n        IntentDashboardUtils.startDashboard(this, true, targetPackage, targetClass, trackId);\r\n    }\r\n}",
  "context" : "private void startDashboardAPI(@NonNull Track.Id trackId, @NonNull Bundle bundle) {\r\n    String targetPackage = bundle.getString(EXTRA_STATS_TARGET_PACKAGE, null);\r\n    String targetClass = bundle.getString(EXTRA_STATS_TARGET_CLASS, null);\r\n    if (targetClass != null && targetPackage != null) {\r\n        IntentDashboardUtils.startDashboard(this, true, targetPackage, targetClass, trackId);\r\n    }\r\n}",
  "start_lineno" : "53",
  "methodName" : "startDashboardAPI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StartRecording.java",
  "task_id" : "OpenTracks/276",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.os.Bundle\nprivate void startDashboardAPI(@NonNull Track.Id trackId, @NonNull Bundle bundle) {\r\n    String targetPackage = bundle.getString(EXTRA_STATS_TARGET_PACKAGE, null);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "    service.endCurrentTrack();\r\n    if (trackId != null) {\r\n        ExportUtils.postWorkoutExport(this, trackId);\r\n    }\r\n}",
  "context" : "protected void execute(TrackRecordingService service) {\r\n    RecordingData recordingData = service.getRecordingDataObservable().getValue();\r\n    Track.Id trackId = null;\r\n    if (recordingData != null && recordingData.track() != null) {\r\n        trackId = recordingData.track().getId();\r\n    }\r\n    service.endCurrentTrack();\r\n    if (trackId != null) {\r\n        ExportUtils.postWorkoutExport(this, trackId);\r\n    }\r\n}",
  "start_lineno" : "10",
  "methodName" : "execute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StopRecording.java",
  "task_id" : "OpenTracks/277",
  "prompt" : "import de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.Track\nprotected void execute(TrackRecordingService service) {\r\n    RecordingData recordingData = service.getRecordingDataObservable().getValue();\r\n    Track.Id trackId = null;\r\n    if (recordingData != null && recordingData.track() != null) {\r\n        trackId = recordingData.track().getId();\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothConnectionManager.class.getSimpleName();\nprivate final SensorManager.SensorDataChangedObserver observer;\nprivate final SensorHandlerInterface sensorHandler;\nprivate final BluetoothAdapter bluetoothAdapter;\nprivate BluetoothGatt bluetoothGatt;\nprivate final BluetoothGattCallback connectCallback = new BluetoothGattCallback() {\r\n\r\n    @Override\r\n    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\r\n        switch(newState) {\r\n            case BluetoothProfile.STATE_CONNECTING ->\r\n                Log.i(TAG, gatt.getDevice() + \": connecting to sensor\");\r\n            case BluetoothProfile.STATE_CONNECTED ->\r\n                {\r\n                    Log.i(TAG, gatt.getDevice() + \": connected to sensor; discovering services\");\r\n                    gatt.discoverServices();\r\n                }\r\n            case BluetoothProfile.STATE_DISCONNECTING ->\r\n                Log.i(TAG, gatt.getDevice() + \": disconnecting from sensor: \");\r\n            case BluetoothProfile.STATE_DISCONNECTED ->\r\n                {\r\n                    //This is also triggered, if no connection was established (ca. 30s)\r\n                    Log.i(TAG, gatt.getDevice() + \": disconnected from sensor: trying to reconnect\");\r\n                    if (gatt.connect()) {\r\n                        Log.e(TAG, gatt.getDevice() + \": could not trigger reconnect for sensor\");\r\n                    }\r\n                    clearData();\r\n                }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onServicesDiscovered(@NonNull BluetoothGatt gatt, int status) {\r\n        BluetoothGattService gattService = null;\r\n        ServiceMeasurementUUID serviceMeasurement = null;\r\n        for (ServiceMeasurementUUID s : sensorHandler.getServices()) {\r\n            gattService = gatt.getService(s.serviceUUID());\r\n            if (gattService != null) {\r\n                serviceMeasurement = s;\r\n                break;\r\n            }\r\n        }\r\n        if (gattService == null) {\r\n            Log.e(TAG, gatt.getDevice() + \": could not get gattService for serviceUUID=\" + serviceMeasurement);\r\n            return;\r\n        }\r\n        BluetoothGattCharacteristic characteristic = gattService.getCharacteristic(serviceMeasurement.measurementUUID());\r\n        if (characteristic == null) {\r\n            Log.e(TAG, gatt.getDevice() + \": could not get BluetoothCharacteristic for serviceUUID=\" + serviceMeasurement.serviceUUID() + \" characteristicUUID=\" + serviceMeasurement.measurementUUID());\r\n            return;\r\n        }\r\n        gatt.setCharacteristicNotification(characteristic, true);\r\n        // Register for updates.\r\n        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(BluetoothUtils.CLIENT_CHARACTERISTIC_CONFIG_UUID);\r\n        if (descriptor == null) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID characteristic not available; cannot request notifications for changed data.\");\r\n            return;\r\n        }\r\n        if (!descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE)) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID could not be set to ENABLE_NOTIFICATION_VALUE\");\r\n        }\r\n        if (!gatt.writeDescriptor(descriptor)) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID descriptor could not be written\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onCharacteristicChanged(BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic) {\r\n        UUID serviceUUID = characteristic.getService().getUuid();\r\n        BluetoothDevice device = gatt.getDevice();\r\n        Log.d(TAG, device + \": Received data with service \" + serviceUUID + \" and characteristics \" + characteristic.getUuid());\r\n        Optional<ServiceMeasurementUUID> serviceMeasurementUUID = sensorHandler.getServices().stream().filter(s -> s.serviceUUID().equals(characteristic.getService().getUuid())).findFirst();\r\n        if (serviceMeasurementUUID.isEmpty()) {\r\n            Log.e(TAG, device + \": Unknown service UUID; not supported?\");\r\n            return;\r\n        }\r\n        sensorHandler.handlePayload(observer, serviceMeasurementUUID.get(), gatt.getDevice().getName(), gatt.getDevice().getAddress(), characteristic);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "198",
  "ground_truth" : "    bluetoothGatt.close();\r\n    clearData();\r\n    Log.i(TAG, bluetoothGatt.getDevice() + \": disconnect finished\");\r\n    bluetoothGatt = null;\r\n}",
  "context" : "@Override\r\npublic synchronized void disconnect() {\r\n    if (!isConnected()) {\r\n        Log.w(TAG, \"Not connected; no need to re-connect.\");\r\n        return;\r\n    }\r\n    Log.i(TAG, bluetoothGatt.getDevice() + \": start disconnect\");\r\n    bluetoothGatt.disconnect();\r\n    bluetoothGatt.close();\r\n    clearData();\r\n    Log.i(TAG, bluetoothGatt.getDevice() + \": disconnect finished\");\r\n    bluetoothGatt = null;\r\n}",
  "start_lineno" : "186",
  "methodName" : "disconnect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothConnectionManager.java",
  "task_id" : "OpenTracks/278",
  "prompt" : "import android.util.Log\n@Override\r\npublic synchronized void disconnect() {\r\n    if (!isConnected()) {\r\n        Log.w(TAG, \"Not connected; no need to re-connect.\");\r\n        return;\r\n    }\r\n    Log.i(TAG, bluetoothGatt.getDevice() + \": start disconnect\");\r\n    bluetoothGatt.disconnect();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothConnectionManager.class.getSimpleName();\nprivate final SensorManager.SensorDataChangedObserver observer;\nprivate final SensorHandlerInterface sensorHandler;\nprivate final BluetoothAdapter bluetoothAdapter;\nprivate BluetoothGatt bluetoothGatt;\nprivate final BluetoothGattCallback connectCallback = new BluetoothGattCallback() {\r\n\r\n    @Override\r\n    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\r\n        switch(newState) {\r\n            case BluetoothProfile.STATE_CONNECTING ->\r\n                Log.i(TAG, gatt.getDevice() + \": connecting to sensor\");\r\n            case BluetoothProfile.STATE_CONNECTED ->\r\n                {\r\n                    Log.i(TAG, gatt.getDevice() + \": connected to sensor; discovering services\");\r\n                    gatt.discoverServices();\r\n                }\r\n            case BluetoothProfile.STATE_DISCONNECTING ->\r\n                Log.i(TAG, gatt.getDevice() + \": disconnecting from sensor: \");\r\n            case BluetoothProfile.STATE_DISCONNECTED ->\r\n                {\r\n                    //This is also triggered, if no connection was established (ca. 30s)\r\n                    Log.i(TAG, gatt.getDevice() + \": disconnected from sensor: trying to reconnect\");\r\n                    if (gatt.connect()) {\r\n                        Log.e(TAG, gatt.getDevice() + \": could not trigger reconnect for sensor\");\r\n                    }\r\n                    clearData();\r\n                }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onServicesDiscovered(@NonNull BluetoothGatt gatt, int status) {\r\n        BluetoothGattService gattService = null;\r\n        ServiceMeasurementUUID serviceMeasurement = null;\r\n        for (ServiceMeasurementUUID s : sensorHandler.getServices()) {\r\n            gattService = gatt.getService(s.serviceUUID());\r\n            if (gattService != null) {\r\n                serviceMeasurement = s;\r\n                break;\r\n            }\r\n        }\r\n        if (gattService == null) {\r\n            Log.e(TAG, gatt.getDevice() + \": could not get gattService for serviceUUID=\" + serviceMeasurement);\r\n            return;\r\n        }\r\n        BluetoothGattCharacteristic characteristic = gattService.getCharacteristic(serviceMeasurement.measurementUUID());\r\n        if (characteristic == null) {\r\n            Log.e(TAG, gatt.getDevice() + \": could not get BluetoothCharacteristic for serviceUUID=\" + serviceMeasurement.serviceUUID() + \" characteristicUUID=\" + serviceMeasurement.measurementUUID());\r\n            return;\r\n        }\r\n        gatt.setCharacteristicNotification(characteristic, true);\r\n        // Register for updates.\r\n        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(BluetoothUtils.CLIENT_CHARACTERISTIC_CONFIG_UUID);\r\n        if (descriptor == null) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID characteristic not available; cannot request notifications for changed data.\");\r\n            return;\r\n        }\r\n        if (!descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE)) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID could not be set to ENABLE_NOTIFICATION_VALUE\");\r\n        }\r\n        if (!gatt.writeDescriptor(descriptor)) {\r\n            Log.e(TAG, \"CLIENT_CHARACTERISTIC_CONFIG_UUID descriptor could not be written\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onCharacteristicChanged(BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic) {\r\n        UUID serviceUUID = characteristic.getService().getUuid();\r\n        BluetoothDevice device = gatt.getDevice();\r\n        Log.d(TAG, device + \": Received data with service \" + serviceUUID + \" and characteristics \" + characteristic.getUuid());\r\n        Optional<ServiceMeasurementUUID> serviceMeasurementUUID = sensorHandler.getServices().stream().filter(s -> s.serviceUUID().equals(characteristic.getService().getUuid())).findFirst();\r\n        if (serviceMeasurementUUID.isEmpty()) {\r\n            Log.e(TAG, device + \": Unknown service UUID; not supported?\");\r\n            return;\r\n        }\r\n        sensorHandler.handlePayload(observer, serviceMeasurementUUID.get(), gatt.getDevice().getName(), gatt.getDevice().getAddress(), characteristic);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "206",
  "ground_truth" : "    }\r\n    return address.equals(bluetoothGatt.getDevice().getAddress());\r\n}",
  "context" : "private synchronized boolean isSameBluetoothDevice(String address) {\r\n    if (bluetoothGatt == null) {\r\n        return false;\r\n    }\r\n    return address.equals(bluetoothGatt.getDevice().getAddress());\r\n}",
  "start_lineno" : "200",
  "methodName" : "isSameBluetoothDevice",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothConnectionManager.java",
  "task_id" : "OpenTracks/279",
  "prompt" : "import android.bluetooth.BluetoothDevice\nprivate synchronized boolean isSameBluetoothDevice(String address) {\r\n    if (bluetoothGatt == null) {\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final UUID ENVIRONMENTAL_SENSING_SERVICE = new UUID(0x181A00001000L, 0x800000805f9b34fbL);\npublic static final ServiceMeasurementUUID BAROMETRIC_PRESSURE = new ServiceMeasurementUUID(ENVIRONMENTAL_SENSING_SERVICE, new UUID(0x2A6D00001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        return;\r\n    observer.onChange(new Raw<>(value));\r\n}",
  "context" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    AtmosphericPressure value = parseEnvironmentalSensing(characteristic);\r\n    if (value == null)\r\n        return;\r\n    observer.onChange(new Raw<>(value));\r\n}",
  "start_lineno" : "31",
  "methodName" : "handlePayload",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerBarometricPressure.java",
  "task_id" : "OpenTracks/280",
  "prompt" : "import de.dennisguse.opentracks.data.models.AtmosphericPressure\nimport java.util.UUID\nimport android.bluetooth.BluetoothGattCharacteristic\n@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    AtmosphericPressure value = parseEnvironmentalSensing(characteristic);\r\n    if (value == null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final UUID ENVIRONMENTAL_SENSING_SERVICE = new UUID(0x181A00001000L, 0x800000805f9b34fbL);\npublic static final ServiceMeasurementUUID BAROMETRIC_PRESSURE = new ServiceMeasurementUUID(ENVIRONMENTAL_SENSING_SERVICE, new UUID(0x2A6D00001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        return null;\r\n    }\r\n    Integer pressure = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32, 0);\r\n    return AtmosphericPressure.ofPA(pressure / 10f);\r\n}",
  "context" : "/**\r\n * Decoding:\r\n * org.bluetooth.service.environmental_sensing.xml\r\n * org.bluetooth.characteristic.pressure.xml\r\n */\r\npublic static AtmosphericPressure parseEnvironmentalSensing(BluetoothGattCharacteristic characteristic) {\r\n    byte[] raw = characteristic.getValue();\r\n    if (raw.length < 4) {\r\n        return null;\r\n    }\r\n    Integer pressure = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32, 0);\r\n    return AtmosphericPressure.ofPA(pressure / 10f);\r\n}",
  "start_lineno" : "44",
  "methodName" : "parseEnvironmentalSensing",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerBarometricPressure.java",
  "task_id" : "OpenTracks/281",
  "prompt" : "import de.dennisguse.opentracks.data.models.AtmosphericPressure\nimport android.bluetooth.BluetoothGattCharacteristic\n/**\r\n * Decoding:\r\n * org.bluetooth.service.environmental_sensing.xml\r\n * org.bluetooth.characteristic.pressure.xml\r\n */\r\npublic static AtmosphericPressure parseEnvironmentalSensing(BluetoothGattCharacteristic characteristic) {\r\n    byte[] raw = characteristic.getValue();\r\n    if (raw.length < 4) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final ServiceMeasurementUUID CYCLING_SPEED_CADENCE = new ServiceMeasurementUUID(new UUID(0x181600001000L, 0x800000805f9b34fbL), new UUID(0x2A5B00001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        observer.onChange(new Raw<>(data.first));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Pair<WheelData, BluetoothHandlerCyclingCadence.CrankData> data = parseCyclingCrankAndWheel(address, sensorName, characteristic);\r\n    if (data.first != null) {\r\n        observer.onChange(new Raw<>(data.first));\r\n    }\r\n}",
  "start_lineno" : "33",
  "methodName" : "handlePayload",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerCyclingDistanceSpeed.java",
  "task_id" : "OpenTracks/282",
  "prompt" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Pair<WheelData, BluetoothHandlerCyclingCadence.CrankData> data = parseCyclingCrankAndWheel(address, sensorName, characteristic);\r\n    if (data.first != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final ServiceMeasurementUUID CYCLING_POWER = new ServiceMeasurementUUID(new UUID(0x181800001000L, 0x800000805f9b34fbL), new UUID(0x2A6300001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        observer.onChange(new Raw<>(cyclingPower));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Data cyclingPower = parseCyclingPower(characteristic);\r\n    if (cyclingPower != null) {\r\n        observer.onChange(new Raw<>(cyclingPower));\r\n    }\r\n}",
  "start_lineno" : "33",
  "methodName" : "handlePayload",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerManagerCyclingPower.java",
  "task_id" : "OpenTracks/283",
  "prompt" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Data cyclingPower = parseCyclingPower(characteristic);\r\n    if (cyclingPower != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final ServiceMeasurementUUID HEARTRATE = new ServiceMeasurementUUID(new UUID(0x180D00001000L, 0x800000805f9b34fbL), new UUID(0x2A3700001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        observer.onChange(new Raw<>(heartRate));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    HeartRate heartRate = parseHeartRate(characteristic);\r\n    if (heartRate != null) {\r\n        observer.onChange(new Raw<>(heartRate));\r\n    }\r\n}",
  "start_lineno" : "43",
  "methodName" : "handlePayload",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerManagerHeartRate.java",
  "task_id" : "OpenTracks/284",
  "prompt" : "import de.dennisguse.opentracks.data.models.HeartRate\nimport java.util.UUID\nimport androidx.annotation.NonNull\nimport android.bluetooth.BluetoothGattCharacteristic\n@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    HeartRate heartRate = parseHeartRate(characteristic);\r\n    if (heartRate != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final ServiceMeasurementUUID RUNNING_SPEED_CADENCE = new ServiceMeasurementUUID(new UUID(0x181400001000L, 0x800000805f9b34fbL), new UUID(0x2A5300001000L, 0x800000805f9b34fbL));",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "    Data data = parseRunningSpeedAndCadence(sensorName, characteristic);\r\n    observer.onChange(new Raw<>(data));\r\n}",
  "context" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Data data = parseRunningSpeedAndCadence(sensorName, characteristic);\r\n    observer.onChange(new Raw<>(data));\r\n}",
  "start_lineno" : "36",
  "methodName" : "handlePayload",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerRunningSpeedAndCadence.java",
  "task_id" : "OpenTracks/285",
  "prompt" : "@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothRemoteSensorManager.class.getSimpleName();\npublic static final Duration MAX_SENSOR_DATE_SET_AGE = Duration.ofSeconds(5);\nprivate final Context context;\nprivate final Handler handler;\nprivate boolean started = false;\nprivate final BluetoothConnectionManager heartRate;\nprivate final BluetoothConnectionManager cyclingCadence;\nprivate final BluetoothConnectionManager cyclingSpeed;\nprivate final BluetoothConnectionManager cyclingPower;\nprivate final BluetoothConnectionManager runningSpeedAndCadence;",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "    // Triggers connection startup\r\n    onSharedPreferenceChanged(null, null);\r\n}",
  "context" : "@Override\r\npublic void start(Context context, Handler handler) {\r\n    started = true;\r\n    // Triggers connection startup\r\n    onSharedPreferenceChanged(null, null);\r\n}",
  "start_lineno" : "67",
  "methodName" : "start",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothRemoteSensorManager.java",
  "task_id" : "OpenTracks/286",
  "prompt" : "import android.os.Handler\nimport android.content.Context\n@Override\r\npublic void start(Context context, Handler handler) {\r\n    started = true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothRemoteSensorManager.class.getSimpleName();\npublic static final Duration MAX_SENSOR_DATE_SET_AGE = Duration.ofSeconds(5);\nprivate final Context context;\nprivate final Handler handler;\nprivate boolean started = false;\nprivate final BluetoothConnectionManager heartRate;\nprivate final BluetoothConnectionManager cyclingCadence;\nprivate final BluetoothConnectionManager cyclingSpeed;\nprivate final BluetoothConnectionManager cyclingPower;\nprivate final BluetoothConnectionManager runningSpeedAndCadence;",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "    cyclingSpeed.disconnect();\r\n    cyclingPower.disconnect();\r\n    runningSpeedAndCadence.disconnect();\r\n    started = false;\r\n}",
  "context" : "@Override\r\npublic synchronized void stop(Context context) {\r\n    heartRate.disconnect();\r\n    cyclingCadence.disconnect();\r\n    cyclingSpeed.disconnect();\r\n    cyclingPower.disconnect();\r\n    runningSpeedAndCadence.disconnect();\r\n    started = false;\r\n}",
  "start_lineno" : "75",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothRemoteSensorManager.java",
  "task_id" : "OpenTracks/287",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.content.Context\n@Override\r\npublic synchronized void stop(Context context) {\r\n    heartRate.disconnect();\r\n    cyclingCadence.disconnect();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final UUID CLIENT_CHARACTERISTIC_CONFIG_UUID = new UUID(0x290200001000L, 0x800000805f9b34fbL);\npublic static final ServiceMeasurementUUID BATTERY = new ServiceMeasurementUUID(new UUID(0x180F00001000L, 0x800000805f9b34fbL), new UUID(0x2A1900001000L, 0x800000805f9b34fbL));\nprivate static final String TAG = BluetoothUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        return null;\r\n    } else {\r\n        return bluetoothManager.getAdapter();\r\n    }\r\n}",
  "context" : "public static BluetoothAdapter getAdapter(Context context) {\r\n    BluetoothManager bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);\r\n    if (bluetoothManager == null) {\r\n        Log.i(TAG, \"BluetoothManager not available.\");\r\n        return null;\r\n    } else {\r\n        return bluetoothManager.getAdapter();\r\n    }\r\n}",
  "start_lineno" : "45",
  "methodName" : "getAdapter",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothUtils.java",
  "task_id" : "OpenTracks/288",
  "prompt" : "import android.util.Log\nimport android.content.Context\nimport android.bluetooth.BluetoothManager\nimport android.bluetooth.BluetoothAdapter\npublic static BluetoothAdapter getAdapter(Context context) {\r\n    BluetoothManager bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);\r\n    if (bluetoothManager == null) {\r\n        Log.i(TAG, \"BluetoothManager not available.\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final UUID CLIENT_CHARACTERISTIC_CONFIG_UUID = new UUID(0x290200001000L, 0x800000805f9b34fbL);\npublic static final ServiceMeasurementUUID BATTERY = new ServiceMeasurementUUID(new UUID(0x180F00001000L, 0x800000805f9b34fbL), new UUID(0x2A1900001000L, 0x800000805f9b34fbL));\nprivate static final String TAG = BluetoothUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        return null;\r\n    }\r\n    final int batteryLevel = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, 0);\r\n    return BatteryLevel.of(batteryLevel);\r\n}",
  "context" : "public static BatteryLevel parseBatteryLevel(BluetoothGattCharacteristic characteristic) {\r\n    // DOCUMENTATION org.bluetooth.characteristic.battery_level.xml\r\n    byte[] raw = characteristic.getValue();\r\n    if (raw.length == 0) {\r\n        return null;\r\n    }\r\n    final int batteryLevel = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, 0);\r\n    return BatteryLevel.of(batteryLevel);\r\n}",
  "start_lineno" : "59",
  "methodName" : "parseBatteryLevel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothUtils.java",
  "task_id" : "OpenTracks/289",
  "prompt" : "import de.dennisguse.opentracks.data.models.BatteryLevel\nimport android.bluetooth.BluetoothGattCharacteristic\npublic static BatteryLevel parseBatteryLevel(BluetoothGattCharacteristic characteristic) {\r\n    // DOCUMENTATION org.bluetooth.characteristic.battery_level.xml\r\n    byte[] raw = characteristic.getValue();\r\n    if (raw.length == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BarometerInternal.class.getSimpleName();\nprivate static final int SAMPLING_PERIOD = (int) TimeUnit.SECONDS.toMicros(5);\nprivate final SensorManager.SensorDataChangedObserver listener;\nprivate Context context;\nprivate final SensorEventListener sensorEventListener = new SensorEventListener() {\r\n\r\n    @Override\r\n    public void onSensorChanged(SensorEvent event) {\r\n        if (!isConnected()) {\r\n            Log.w(TAG, \"Not connected to sensor, cannot process data.\");\r\n            return;\r\n        }\r\n        listener.onChange(new Raw<>(AtmosphericPressure.ofHPA(event.values[0])));\r\n    }\r\n\r\n    @Override\r\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\r\n        Log.w(TAG, \"Sensor accuracy changes are (currently) ignored.\");\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        Log.w(TAG, \"Not connected to sensor, cannot process data.\");\r\n        return;\r\n    }\r\n    listener.onChange(new Raw<>(AtmosphericPressure.ofHPA(event.values[0])));\r\n}",
  "context" : "@Override\r\npublic void onSensorChanged(SensorEvent event) {\r\n    if (!isConnected()) {\r\n        Log.w(TAG, \"Not connected to sensor, cannot process data.\");\r\n        return;\r\n    }\r\n    listener.onChange(new Raw<>(AtmosphericPressure.ofHPA(event.values[0])));\r\n}",
  "start_lineno" : "30",
  "methodName" : "onSensorChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\driver\\BarometerInternal.java",
  "task_id" : "OpenTracks/290",
  "prompt" : "import android.hardware.SensorEvent\nimport android.hardware.Sensor\n@Override\r\npublic void onSensorChanged(SensorEvent event) {\r\n    if (!isConnected()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BarometerInternal.class.getSimpleName();\nprivate static final int SAMPLING_PERIOD = (int) TimeUnit.SECONDS.toMicros(5);\nprivate final SensorManager.SensorDataChangedObserver listener;\nprivate Context context;\nprivate final SensorEventListener sensorEventListener = new SensorEventListener() {\r\n\r\n    @Override\r\n    public void onSensorChanged(SensorEvent event) {\r\n        if (!isConnected()) {\r\n            Log.w(TAG, \"Not connected to sensor, cannot process data.\");\r\n            return;\r\n        }\r\n        listener.onChange(new Raw<>(AtmosphericPressure.ofHPA(event.values[0])));\r\n    }\r\n\r\n    @Override\r\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\r\n        Log.w(TAG, \"Sensor accuracy changes are (currently) ignored.\");\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        return;\r\n    android.hardware.SensorManager sensorManager = (android.hardware.SensorManager) context.getSystemService(Context.SENSOR_SERVICE);\r\n    sensorManager.unregisterListener(sensorEventListener);\r\n    this.context = null;\r\n}",
  "context" : "@Override\r\npublic void disconnect() {\r\n    if (!isConnected())\r\n        return;\r\n    android.hardware.SensorManager sensorManager = (android.hardware.SensorManager) context.getSystemService(Context.SENSOR_SERVICE);\r\n    sensorManager.unregisterListener(sensorEventListener);\r\n    this.context = null;\r\n}",
  "start_lineno" : "74",
  "methodName" : "disconnect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\driver\\BarometerInternal.java",
  "task_id" : "OpenTracks/291",
  "prompt" : "@Override\r\npublic void disconnect() {\r\n    if (!isConnected())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GainManager.class.getSimpleName();\nprivate final SensorManager.SensorDataChangedObserver listener;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    connect();\r\n};\nprivate Context context;\nprivate Handler handler;\nprivate Driver driver;",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    this.handler = handler;\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "public void start(Context context, Handler handler) {\r\n    this.context = context;\r\n    this.handler = handler;\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "35",
  "methodName" : "start",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\GainManager.java",
  "task_id" : "OpenTracks/292",
  "prompt" : "import android.os.Handler\nimport android.content.Context\npublic void start(Context context, Handler handler) {\r\n    this.context = context;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GainManager.class.getSimpleName();\nprivate final SensorManager.SensorDataChangedObserver listener;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    connect();\r\n};\nprivate Context context;\nprivate Handler handler;\nprivate Driver driver;",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    this.context = null;\r\n    this.handler = null;\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    onDisconnect();\r\n}",
  "context" : "public void stop(Context context) {\r\n    Log.d(TAG, \"Stop\");\r\n    this.context = null;\r\n    this.handler = null;\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    onDisconnect();\r\n}",
  "start_lineno" : "41",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\GainManager.java",
  "task_id" : "OpenTracks/293",
  "prompt" : "import android.util.Log\nimport android.content.Context\npublic void stop(Context context) {\r\n    Log.d(TAG, \"Stop\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GainManager.class.getSimpleName();\nprivate final SensorManager.SensorDataChangedObserver listener;\nprivate final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    connect();\r\n};\nprivate Context context;\nprivate Handler handler;\nprivate Driver driver;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    driver.disconnect();\r\n    listener.onDisconnect(new AggregatorBarometer(\"GainManager\", null));\r\n}",
  "context" : "private void onDisconnect() {\r\n    if (driver == null)\r\n        return;\r\n    driver.disconnect();\r\n    listener.onDisconnect(new AggregatorBarometer(\"GainManager\", null));\r\n}",
  "start_lineno" : "73",
  "methodName" : "onDisconnect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\GainManager.java",
  "task_id" : "OpenTracks/294",
  "prompt" : "private void onDisconnect() {\r\n    if (driver == null)\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final float EXPONENTIAL_SMOOTHING = 0.3f;\nprivate static final float p0 = SensorManager.PRESSURE_STANDARD_ATMOSPHERE;",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    AtmosphericPressure nextSensorValue = AtmosphericPressure.ofHPA(EXPONENTIAL_SMOOTHING * currentSensorValue.getHPA() + (1 - EXPONENTIAL_SMOOTHING) * lastSeenSensorValue.getHPA());\r\n    return computeChanges(lastAcceptedSensorValue, nextSensorValue);\r\n}",
  "context" : "/**\r\n * Applies exponential smoothing to sensor value before computation.\r\n */\r\npublic static AltitudeChange computeChangesWithSmoothing_m(AtmosphericPressure lastAcceptedSensorValue, AtmosphericPressure lastSeenSensorValue, AtmosphericPressure currentSensorValue) {\r\n    AtmosphericPressure nextSensorValue = AtmosphericPressure.ofHPA(EXPONENTIAL_SMOOTHING * currentSensorValue.getHPA() + (1 - EXPONENTIAL_SMOOTHING) * lastSeenSensorValue.getHPA());\r\n    return computeChanges(lastAcceptedSensorValue, nextSensorValue);\r\n}",
  "start_lineno" : "35",
  "methodName" : "computeChangesWithSmoothing_m",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\PressureSensorUtils.java",
  "task_id" : "OpenTracks/295",
  "prompt" : "/**\r\n * Applies exponential smoothing to sensor value before computation.\r\n */\r\npublic static AltitudeChange computeChangesWithSmoothing_m(AtmosphericPressure lastAcceptedSensorValue, AtmosphericPressure lastSeenSensorValue, AtmosphericPressure currentSensorValue) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected Raw<Input> previous;\nprotected Output value;\nprivate final String sensorAddress;\nprivate final String sensorName;",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "    computeValue(current);\r\n    previous = current;\r\n}",
  "context" : "public final void add(Raw<Input> current) {\r\n    computeValue(current);\r\n    previous = current;\r\n}",
  "start_lineno" : "31",
  "methodName" : "add",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java",
  "task_id" : "OpenTracks/296",
  "prompt" : "public final void add(Raw<Input> current) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected Raw<Input> previous;\nprotected Output value;\nprivate final String sensorAddress;\nprivate final String sensorName;",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "    if (isRecent()) {\r\n        return value;\r\n    }\r\n    return getNoneValue();\r\n}",
  "context" : "public Output getValue() {\r\n    if (!hasValue()) {\r\n        return null;\r\n    }\r\n    if (isRecent()) {\r\n        return value;\r\n    }\r\n    return getNoneValue();\r\n}",
  "start_lineno" : "45",
  "methodName" : "getValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java",
  "task_id" : "OpenTracks/297",
  "prompt" : "public Output getValue() {\r\n    if (!hasValue()) {\r\n        return null;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "protected Raw<Input> previous;\nprotected Output value;\nprivate final String sensorAddress;\nprivate final String sensorName;",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "    }\r\n    return Instant.now().isBefore(previous.time().plus(BluetoothRemoteSensorManager.MAX_SENSOR_DATE_SET_AGE));\r\n}",
  "context" : "/**\r\n * Is the data recent considering the current time.\r\n */\r\nprivate boolean isRecent() {\r\n    if (previous == null) {\r\n        return false;\r\n    }\r\n    return Instant.now().isBefore(previous.time().plus(BluetoothRemoteSensorManager.MAX_SENSOR_DATE_SET_AGE));\r\n}",
  "start_lineno" : "63",
  "methodName" : "isRecent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java",
  "task_id" : "OpenTracks/298",
  "prompt" : "/**\r\n * Is the data recent considering the current time.\r\n */\r\nprivate boolean isRecent() {\r\n    if (previous == null) {\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String TAG = AggregatorCyclingDistanceSpeed.class.getSimpleName();\nprivate Distance wheelCircumference;",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "        value = new Data(value.distance, Distance.of(0), value.speed);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void reset() {\r\n    if (value != null) {\r\n        value = new Data(value.distance, Distance.of(0), value.speed);\r\n    }\r\n}",
  "start_lineno" : "55",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorCyclingDistanceSpeed.java",
  "task_id" : "OpenTracks/299",
  "prompt" : "@Override\r\npublic void reset() {\r\n    if (value != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String TAG = AggregatorCyclingDistanceSpeed.class.getSimpleName();\nprivate Distance wheelCircumference;",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "        return new Data(value.distance, value.distanceOverall, Speed.zero());\r\n    } else {\r\n        return new Data(Distance.of(0), Distance.of(0), Speed.zero());\r\n    }\r\n}",
  "context" : "@NonNull\r\n@Override\r\nprotected Data getNoneValue() {\r\n    if (value != null) {\r\n        return new Data(value.distance, value.distanceOverall, Speed.zero());\r\n    } else {\r\n        return new Data(Distance.of(0), Distance.of(0), Speed.zero());\r\n    }\r\n}",
  "start_lineno" : "62",
  "methodName" : "getNoneValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorCyclingDistanceSpeed.java",
  "task_id" : "OpenTracks/300",
  "prompt" : "@NonNull\r\n@Override\r\nprotected Data getNoneValue() {\r\n    if (value != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = AggregatorRunning.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "            }\r\n        }\r\n        value = new Data(current.value().speed(), current.value().cadence(), distance);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void computeValue(Raw<BluetoothHandlerRunningSpeedAndCadence.Data> current) {\r\n    if (previous != null) {\r\n        Distance distance = null;\r\n        if (previous.value().totalDistance() != null && current.value().totalDistance() != null) {\r\n            distance = current.value().totalDistance().minus(previous.value().totalDistance());\r\n            if (value != null) {\r\n                distance = distance.plus(value.distance);\r\n            }\r\n        }\r\n        value = new Data(current.value().speed(), current.value().cadence(), distance);\r\n    }\r\n}",
  "start_lineno" : "21",
  "methodName" : "computeValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorRunning.java",
  "task_id" : "OpenTracks/301",
  "prompt" : "@Override\r\npublic void computeValue(Raw<BluetoothHandlerRunningSpeedAndCadence.Data> current) {\r\n    if (previous != null) {\r\n        Distance distance = null;\r\n        if (previous.value().totalDistance() != null && current.value().totalDistance() != null) {\r\n            distance = current.value().totalDistance().minus(previous.value().totalDistance());\r\n            if (value != null) {\r\n                distance = distance.plus(value.distance);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = AggregatorRunning.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        value = new Data(value.speed, value.cadence, Distance.of(0));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void reset() {\r\n    if (value != null) {\r\n        value = new Data(value.speed, value.cadence, Distance.of(0));\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorRunning.java",
  "task_id" : "OpenTracks/302",
  "prompt" : "@Override\r\npublic void reset() {\r\n    if (value != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = AggregatorRunning.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "        return new Data(Speed.zero(), Cadence.of(0f), value.distance);\r\n    } else {\r\n        return new Data(Speed.zero(), Cadence.of(0f), Distance.of(0));\r\n    }\r\n}",
  "context" : "@NonNull\r\n@Override\r\nprotected Data getNoneValue() {\r\n    if (value != null) {\r\n        return new Data(Speed.zero(), Cadence.of(0f), value.distance);\r\n    } else {\r\n        return new Data(Speed.zero(), Cadence.of(0f), Distance.of(0));\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "getNoneValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorRunning.java",
  "task_id" : "OpenTracks/303",
  "prompt" : "@NonNull\r\n@Override\r\nprotected Data getNoneValue() {\r\n    if (value != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorDataSet.class.getSimpleName();\n@VisibleForTesting\r\npublic AggregatorHeartRate heartRate;\n@VisibleForTesting\r\npublic AggregatorCyclingCadence cyclingCadence;\n@VisibleForTesting\r\npublic AggregatorCyclingDistanceSpeed cyclingDistanceSpeed;\n@VisibleForTesting\r\npublic AggregatorCyclingPower cyclingPower;\n@VisibleForTesting\r\npublic AggregatorRunning runningDistanceSpeedCadence;\n@VisibleForTesting\r\npublic AggregatorBarometer barometer;",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "    }\r\n    return null;\r\n}",
  "context" : "public Pair<HeartRate, String> getHeartRate() {\r\n    if (heartRate != null) {\r\n        return new Pair<>(heartRate.getValue(), heartRate.getSensorNameOrAddress());\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "55",
  "methodName" : "getHeartRate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\SensorDataSet.java",
  "task_id" : "OpenTracks/304",
  "prompt" : "import de.dennisguse.opentracks.data.models.HeartRate\nimport android.util.Pair\npublic Pair<HeartRate, String> getHeartRate() {\r\n    if (heartRate != null) {\r\n        return new Pair<>(heartRate.getValue(), heartRate.getSensorNameOrAddress());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorDataSet.class.getSimpleName();\n@VisibleForTesting\r\npublic AggregatorHeartRate heartRate;\n@VisibleForTesting\r\npublic AggregatorCyclingCadence cyclingCadence;\n@VisibleForTesting\r\npublic AggregatorCyclingDistanceSpeed cyclingDistanceSpeed;\n@VisibleForTesting\r\npublic AggregatorCyclingPower cyclingPower;\n@VisibleForTesting\r\npublic AggregatorRunning runningDistanceSpeedCadence;\n@VisibleForTesting\r\npublic AggregatorBarometer barometer;",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "    if (runningDistanceSpeedCadence != null && runningDistanceSpeedCadence.hasValue() && runningDistanceSpeedCadence.value.cadence() != null) {\r\n        return new Pair<>(runningDistanceSpeedCadence.value.cadence(), runningDistanceSpeedCadence.getSensorNameOrAddress());\r\n    }\r\n    return null;\r\n}",
  "context" : "public Pair<Cadence, String> getCadence() {\r\n    if (cyclingCadence != null) {\r\n        return new Pair<>(cyclingCadence.getValue(), cyclingCadence.getSensorNameOrAddress());\r\n    }\r\n    if (runningDistanceSpeedCadence != null && runningDistanceSpeedCadence.hasValue() && runningDistanceSpeedCadence.value.cadence() != null) {\r\n        return new Pair<>(runningDistanceSpeedCadence.value.cadence(), runningDistanceSpeedCadence.getSensorNameOrAddress());\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "63",
  "methodName" : "getCadence",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\SensorDataSet.java",
  "task_id" : "OpenTracks/305",
  "prompt" : "import de.dennisguse.opentracks.data.models.Cadence\nimport android.util.Pair\npublic Pair<Cadence, String> getCadence() {\r\n    if (cyclingCadence != null) {\r\n        return new Pair<>(cyclingCadence.getValue(), cyclingCadence.getSensorNameOrAddress());\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorDataSet.class.getSimpleName();\n@VisibleForTesting\r\npublic AggregatorHeartRate heartRate;\n@VisibleForTesting\r\npublic AggregatorCyclingCadence cyclingCadence;\n@VisibleForTesting\r\npublic AggregatorCyclingDistanceSpeed cyclingDistanceSpeed;\n@VisibleForTesting\r\npublic AggregatorCyclingPower cyclingPower;\n@VisibleForTesting\r\npublic AggregatorRunning runningDistanceSpeedCadence;\n@VisibleForTesting\r\npublic AggregatorBarometer barometer;",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "    this.cyclingDistanceSpeed = null;\r\n    this.cyclingPower = null;\r\n    this.runningDistanceSpeedCadence = null;\r\n    this.barometer = null;\r\n}",
  "context" : "public void clear() {\r\n    Log.i(TAG, \"Removing all aggregators\");\r\n    this.heartRate = null;\r\n    this.cyclingCadence = null;\r\n    this.cyclingDistanceSpeed = null;\r\n    this.cyclingPower = null;\r\n    this.runningDistanceSpeedCadence = null;\r\n    this.barometer = null;\r\n}",
  "start_lineno" : "133",
  "methodName" : "clear",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\SensorDataSet.java",
  "task_id" : "OpenTracks/306",
  "prompt" : "import de.dennisguse.opentracks.data.models.Cadence\nimport android.util.Log\npublic void clear() {\r\n    Log.i(TAG, \"Removing all aggregators\");\r\n    this.heartRate = null;\r\n    this.cyclingCadence = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorDataSet.class.getSimpleName();\n@VisibleForTesting\r\npublic AggregatorHeartRate heartRate;\n@VisibleForTesting\r\npublic AggregatorCyclingCadence cyclingCadence;\n@VisibleForTesting\r\npublic AggregatorCyclingDistanceSpeed cyclingDistanceSpeed;\n@VisibleForTesting\r\npublic AggregatorCyclingPower cyclingPower;\n@VisibleForTesting\r\npublic AggregatorRunning runningDistanceSpeedCadence;\n@VisibleForTesting\r\npublic AggregatorBarometer barometer;",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "    if (runningDistanceSpeedCadence != null)\r\n        runningDistanceSpeedCadence.reset();\r\n    if (barometer != null)\r\n        barometer.reset();\r\n}",
  "context" : "public void reset() {\r\n    Log.i(TAG, \"Resetting data\");\r\n    if (heartRate != null)\r\n        heartRate.reset();\r\n    if (cyclingCadence != null)\r\n        cyclingCadence.reset();\r\n    if (cyclingDistanceSpeed != null)\r\n        cyclingDistanceSpeed.reset();\r\n    if (cyclingPower != null)\r\n        cyclingPower.reset();\r\n    if (runningDistanceSpeedCadence != null)\r\n        runningDistanceSpeedCadence.reset();\r\n    if (barometer != null)\r\n        barometer.reset();\r\n}",
  "start_lineno" : "174",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\SensorDataSet.java",
  "task_id" : "OpenTracks/307",
  "prompt" : "import de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.data.models.Cadence\nimport android.util.Log\npublic void reset() {\r\n    Log.i(TAG, \"Resetting data\");\r\n    if (heartRate != null)\r\n        heartRate.reset();\r\n    if (cyclingCadence != null)\r\n        cyclingCadence.reset();\r\n    if (cyclingDistanceSpeed != null)\r\n        cyclingDistanceSpeed.reset();\r\n    if (cyclingPower != null)\r\n        cyclingPower.reset();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "context" : "@Override\r\npublic void onConnect(Aggregator<?, ?> aggregator) {\r\n    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "start_lineno" : "30",
  "methodName" : "onConnect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/308",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.Aggregator\n@Override\r\npublic void onConnect(Aggregator<?, ?> aggregator) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "    sensorDataSet.update(data);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "context" : "@Override\r\npublic void onChange(Raw<?> data) {\r\n    sensorDataSet.update(data);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "start_lineno" : "36",
  "methodName" : "onChange",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/309",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.Raw\n@Override\r\npublic void onChange(Raw<?> data) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "context" : "@Override\r\npublic void onDisconnect(Aggregator<?, ?> aggregator) {\r\n    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "start_lineno" : "42",
  "methodName" : "onDisconnect",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/310",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.Aggregator\n@Override\r\npublic void onDisconnect(Aggregator<?, ?> aggregator) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "    sensorDataSet.remove(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "context" : "@Override\r\npublic void onRemove(Aggregator<?, ?> aggregator) {\r\n    sensorDataSet.remove(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}",
  "start_lineno" : "48",
  "methodName" : "onRemove",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/311",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.Aggregator\n@Override\r\npublic void onRemove(Aggregator<?, ?> aggregator) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    altitudeSumManager = null;\r\n    gpsManager.stop(context);\r\n    gpsManager = null;\r\n    sensorDataSet.clear();\r\n}",
  "context" : "public void stop(Context context) {\r\n    bluetoothSensorManager.stop(context);\r\n    bluetoothSensorManager = null;\r\n    altitudeSumManager.stop(context);\r\n    altitudeSumManager = null;\r\n    gpsManager.stop(context);\r\n    gpsManager = null;\r\n    sensorDataSet.clear();\r\n}",
  "start_lineno" : "81",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/312",
  "prompt" : "import android.content.Context\npublic void stop(Context context) {\r\n    bluetoothSensorManager.stop(context);\r\n    bluetoothSensorManager = null;\r\n    altitudeSumManager.stop(context);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "    sensorDataSet.fillTrackPoint(trackPoint);\r\n    return new SensorDataSet(sensorDataSet);\r\n}",
  "context" : "public SensorDataSet fill(TrackPoint trackPoint) {\r\n    sensorDataSet.fillTrackPoint(trackPoint);\r\n    return new SensorDataSet(sensorDataSet);\r\n}",
  "start_lineno" : "94",
  "methodName" : "fill",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/313",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.SensorDataSet\nimport de.dennisguse.opentracks.data.models.TrackPoint\npublic SensorDataSet fill(TrackPoint trackPoint) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "        Log.d(TAG, \"No recording running and no reset necessary.\");\r\n        return;\r\n    }\r\n    sensorDataSet.reset();\r\n}",
  "context" : "public void reset() {\r\n    if (bluetoothSensorManager == null || altitudeSumManager == null) {\r\n        Log.d(TAG, \"No recording running and no reset necessary.\");\r\n        return;\r\n    }\r\n    sensorDataSet.reset();\r\n}",
  "start_lineno" : "99",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/314",
  "prompt" : "public void reset() {\r\n    if (bluetoothSensorManager == null || altitudeSumManager == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\nprivate final SensorDataChangedObserver listener = new SensorDataChangedObserver() {\r\n\r\n    @Override\r\n    public void onConnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onChange(Raw<?> data) {\r\n        sensorDataSet.update(data);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onDisconnect(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.add(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(Aggregator<?, ?> aggregator) {\r\n        sensorDataSet.remove(aggregator);\r\n        observer.onChange(new SensorDataSet(sensorDataSet));\r\n    }\r\n};\nprivate BluetoothRemoteSensorManager bluetoothSensorManager;\nprivate GainManager altitudeSumManager;\nprivate GPSManager gpsManager;",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        bluetoothSensorManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    if (gpsManager != null) {\r\n        gpsManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n        bluetoothSensorManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    }\r\n}",
  "start_lineno" : "129",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java",
  "task_id" : "OpenTracks/315",
  "prompt" : "import androidx.annotation.Nullable\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    if (gpsManager != null) {\r\n        gpsManager.onSharedPreferenceChanged(sharedPreferences, key);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final int UINT16_MAX = 0xFFFF;\npublic static final long UINT32_MAX = 0xFFFFFFFFL;",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "    if (a >= b) {\r\n        return a - b;\r\n    }\r\n    return (UINT_MAX + 1 - b) + a;\r\n}",
  "context" : "/**\r\n * Computes a - b for UINT with overflow (b < a).\r\n *\r\n * @return diff\r\n */\r\npublic static long diff(long a, long b, final long UINT_MAX) {\r\n    if (a < 0 || b < 0) {\r\n        throw new RuntimeException(\"a or b cannot be less than zero.\");\r\n    }\r\n    if (a > UINT_MAX || b > UINT_MAX) {\r\n        throw new RuntimeException(\"a or b are outside of the allowed range.\");\r\n    }\r\n    if (a >= b) {\r\n        return a - b;\r\n    }\r\n    return (UINT_MAX + 1 - b) + a;\r\n}",
  "start_lineno" : "16",
  "methodName" : "diff",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\UintUtils.java",
  "task_id" : "OpenTracks/316",
  "prompt" : "/**\r\n * Computes a - b for UINT with overflow (b < a).\r\n *\r\n * @return diff\r\n */\r\npublic static long diff(long a, long b, final long UINT_MAX) {\r\n    if (a < 0 || b < 0) {\r\n        throw new RuntimeException(\"a or b cannot be less than zero.\");\r\n    }\r\n    if (a > UINT_MAX || b > UINT_MAX) {\r\n        throw new RuntimeException(\"a or b are outside of the allowed range.\");\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static int AUDIO_STREAM = TextToSpeech.Engine.DEFAULT_STREAM;\nprivate static final String TAG = TTSManager.class.getSimpleName();\nprivate final Context context;\nprivate final AudioManager audioManager;\nprivate final AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int focusChange) {\r\n        Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n        boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r\n        if (stop && tts != null && tts.isSpeaking()) {\r\n            tts.stop();\r\n            Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n        }\r\n    }\r\n};\nprivate final UtteranceProgressListener utteranceListener = new UtteranceProgressListener() {\r\n\r\n    @Override\r\n    public void onStart(String utteranceId) {\r\n        int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to request audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDone(String utteranceId) {\r\n        int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onError(String utteranceId) {\r\n        Log.e(TAG, \"An error occurred for utteranceId \" + utteranceId);\r\n    }\r\n};\nprivate TextToSpeech tts;\nprivate boolean ttsReady = false;\nprivate MediaPlayer ttsFallback;",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "    if (stop && tts != null && tts.isSpeaking()) {\r\n        tts.stop();\r\n        Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onAudioFocusChange(int focusChange) {\r\n    Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n    boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r\n    if (stop && tts != null && tts.isSpeaking()) {\r\n        tts.stop();\r\n        Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n    }\r\n}",
  "start_lineno" : "48",
  "methodName" : "onAudioFocusChange",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java",
  "task_id" : "OpenTracks/317",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport android.util.Log\nimport android.media.AudioManager\n@Override\r\npublic void onAudioFocusChange(int focusChange) {\r\n    Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n    boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static int AUDIO_STREAM = TextToSpeech.Engine.DEFAULT_STREAM;\nprivate static final String TAG = TTSManager.class.getSimpleName();\nprivate final Context context;\nprivate final AudioManager audioManager;\nprivate final AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int focusChange) {\r\n        Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n        boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r\n        if (stop && tts != null && tts.isSpeaking()) {\r\n            tts.stop();\r\n            Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n        }\r\n    }\r\n};\nprivate final UtteranceProgressListener utteranceListener = new UtteranceProgressListener() {\r\n\r\n    @Override\r\n    public void onStart(String utteranceId) {\r\n        int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to request audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDone(String utteranceId) {\r\n        int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onError(String utteranceId) {\r\n        Log.e(TAG, \"An error occurred for utteranceId \" + utteranceId);\r\n    }\r\n};\nprivate TextToSpeech tts;\nprivate boolean ttsReady = false;\nprivate MediaPlayer ttsFallback;",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "        Log.w(TAG, \"Failed to request audio focus.\");\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onStart(String utteranceId) {\r\n    int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n        Log.w(TAG, \"Failed to request audio focus.\");\r\n    }\r\n}",
  "start_lineno" : "63",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java",
  "task_id" : "OpenTracks/318",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport android.media.AudioManager\n@Override\r\npublic void onStart(String utteranceId) {\r\n    int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static int AUDIO_STREAM = TextToSpeech.Engine.DEFAULT_STREAM;\nprivate static final String TAG = TTSManager.class.getSimpleName();\nprivate final Context context;\nprivate final AudioManager audioManager;\nprivate final AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int focusChange) {\r\n        Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n        boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r\n        if (stop && tts != null && tts.isSpeaking()) {\r\n            tts.stop();\r\n            Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n        }\r\n    }\r\n};\nprivate final UtteranceProgressListener utteranceListener = new UtteranceProgressListener() {\r\n\r\n    @Override\r\n    public void onStart(String utteranceId) {\r\n        int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to request audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDone(String utteranceId) {\r\n        int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onError(String utteranceId) {\r\n        Log.e(TAG, \"An error occurred for utteranceId \" + utteranceId);\r\n    }\r\n};\nprivate TextToSpeech tts;\nprivate boolean ttsReady = false;\nprivate MediaPlayer ttsFallback;",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onDone(String utteranceId) {\r\n    int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n        Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n    }\r\n}",
  "start_lineno" : "71",
  "methodName" : "onDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java",
  "task_id" : "OpenTracks/319",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport android.media.AudioManager\n@Override\r\npublic void onDone(String utteranceId) {\r\n    int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static int AUDIO_STREAM = TextToSpeech.Engine.DEFAULT_STREAM;\nprivate static final String TAG = TTSManager.class.getSimpleName();\nprivate final Context context;\nprivate final AudioManager audioManager;\nprivate final AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int focusChange) {\r\n        Log.d(TAG, \"Audio focus changed to \" + focusChange);\r\n        boolean stop = List.of(AudioManager.AUDIOFOCUS_LOSS, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT, AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK).contains(focusChange);\r\n        if (stop && tts != null && tts.isSpeaking()) {\r\n            tts.stop();\r\n            Log.i(TAG, \"Aborting current tts due to focus change \" + focusChange);\r\n        }\r\n    }\r\n};\nprivate final UtteranceProgressListener utteranceListener = new UtteranceProgressListener() {\r\n\r\n    @Override\r\n    public void onStart(String utteranceId) {\r\n        int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to request audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDone(String utteranceId) {\r\n        int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r\n            Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onError(String utteranceId) {\r\n        Log.e(TAG, \"An error occurred for utteranceId \" + utteranceId);\r\n    }\r\n};\nprivate TextToSpeech tts;\nprivate boolean ttsReady = false;\nprivate MediaPlayer ttsFallback;",
  "app_type" : "life",
  "end_lineno" : "164",
  "ground_truth" : "    if (ttsFallback != null) {\r\n        ttsFallback.release();\r\n        ttsFallback = null;\r\n    }\r\n}",
  "context" : "public void stop() {\r\n    if (tts != null) {\r\n        tts.shutdown();\r\n        tts = null;\r\n    }\r\n    if (ttsFallback != null) {\r\n        ttsFallback.release();\r\n        ttsFallback = null;\r\n    }\r\n}",
  "start_lineno" : "154",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java",
  "task_id" : "OpenTracks/320",
  "prompt" : "public void stop() {\r\n    if (tts != null) {\r\n        tts.shutdown();\r\n        tts = null;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "    voiceAnnouncement.start();\r\n    update(trackStatistics);\r\n}",
  "context" : "public void start(@Nullable TrackStatistics trackStatistics) {\r\n    voiceAnnouncement = new TTSManager(context);\r\n    voiceAnnouncement.start();\r\n    update(trackStatistics);\r\n}",
  "start_lineno" : "80",
  "methodName" : "start",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/321",
  "prompt" : "import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.Nullable\npublic void start(@Nullable TrackStatistics trackStatistics) {\r\n    voiceAnnouncement = new TTSManager(context);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "    updateNextDuration();\r\n    updateNextTaskDistance();\r\n}",
  "context" : "void update(@Nullable TrackStatistics trackStatistics) {\r\n    this.trackStatistics = trackStatistics;\r\n    updateNextDuration();\r\n    updateNextTaskDistance();\r\n}",
  "start_lineno" : "86",
  "methodName" : "update",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/322",
  "prompt" : "import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.Nullable\nvoid update(@Nullable TrackStatistics trackStatistics) {\r\n    this.trackStatistics = trackStatistics;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "        Log.i(TAG, \"No voice announcement on device speaker.\");\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "context" : "private boolean shouldNotAnnounce() {\r\n    if (voiceAnnouncement == null) {\r\n        Log.e(TAG, \"Cannot update when in status shutdown.\");\r\n        return true;\r\n    }\r\n    if (!PreferencesUtils.shouldVoiceAnnouncementOnDeviceSpeaker() && MediaRouter.getInstance(context).getSelectedRoute().isDeviceSpeaker()) {\r\n        Log.i(TAG, \"No voice announcement on device speaker.\");\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "92",
  "methodName" : "shouldNotAnnounce",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/323",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport androidx.mediarouter.media.MediaRouter\nimport android.util.Log\nprivate boolean shouldNotAnnounce() {\r\n    if (voiceAnnouncement == null) {\r\n        Log.e(TAG, \"Cannot update when in status shutdown.\");\r\n        return true;\r\n    }\r\n    if (!PreferencesUtils.shouldVoiceAnnouncementOnDeviceSpeaker() && MediaRouter.getInstance(context).getSelectedRoute().isDeviceSpeaker()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "119",
  "ground_truth" : "    if (!PreferencesUtils.shouldVoiceAnnouncementIdle()) {\r\n        return;\r\n    }\r\n    voiceAnnouncement.announce(VoiceAnnouncementUtils.createIdle(context));\r\n}",
  "context" : "public void announceIdle() {\r\n    if (shouldNotAnnounce()) {\r\n        return;\r\n    }\r\n    if (!PreferencesUtils.shouldVoiceAnnouncementIdle()) {\r\n        return;\r\n    }\r\n    voiceAnnouncement.announce(VoiceAnnouncementUtils.createIdle(context));\r\n}",
  "start_lineno" : "109",
  "methodName" : "announceIdle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/324",
  "prompt" : "public void announceIdle() {\r\n    if (shouldNotAnnounce()) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "166",
  "ground_truth" : "        voiceAnnouncement = null;\r\n    }\r\n}",
  "context" : "public void stop() {\r\n    if (voiceAnnouncement != null) {\r\n        voiceAnnouncement.stop();\r\n        voiceAnnouncement = null;\r\n    }\r\n}",
  "start_lineno" : "161",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/325",
  "prompt" : "public void stop() {\r\n    if (voiceAnnouncement != null) {\r\n        voiceAnnouncement.stop();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "    this.totalTimeFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}",
  "context" : "public void setFrequency(Duration frequency) {\r\n    this.totalTimeFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}",
  "start_lineno" : "168",
  "methodName" : "setFrequency",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/326",
  "prompt" : "import java.time.Duration\npublic void setFrequency(Duration frequency) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    this.distanceFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}",
  "context" : "public void setFrequency(Distance frequency) {\r\n    this.distanceFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}",
  "start_lineno" : "173",
  "methodName" : "setFrequency",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/327",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\npublic void setFrequency(Distance frequency) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "189",
  "ground_truth" : "        Distance distance = trackStatistics.getTotalDistance();\r\n        int index = (int) (distance.dividedBy(distanceFrequency));\r\n        nextTotalDistance = distanceFrequency.multipliedBy(index + 1);\r\n    }\r\n}",
  "context" : "public void updateNextTaskDistance() {\r\n    if (trackStatistics == null || distanceFrequency.isZero()) {\r\n        nextTotalDistance = DISTANCE_OFF;\r\n    } else {\r\n        Distance distance = trackStatistics.getTotalDistance();\r\n        int index = (int) (distance.dividedBy(distanceFrequency));\r\n        nextTotalDistance = distanceFrequency.multipliedBy(index + 1);\r\n    }\r\n}",
  "start_lineno" : "178",
  "methodName" : "updateNextTaskDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/328",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\npublic void updateNextTaskDistance() {\r\n    if (trackStatistics == null || distanceFrequency.isZero()) {\r\n        nextTotalDistance = DISTANCE_OFF;\r\n    } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "201",
  "ground_truth" : "        Duration totalTime = trackStatistics.getTotalTime();\r\n        Duration intervalMod = Duration.ofMillis(trackStatistics.getTotalTime().toMillis() % totalTimeFrequency.toMillis());\r\n        nextTotalTime = totalTime.plus(totalTimeFrequency.minus(intervalMod));\r\n    }\r\n}",
  "context" : "private void updateNextDuration() {\r\n    if (trackStatistics == null || totalTimeFrequency.isZero()) {\r\n        nextTotalTime = TOTALTIME_OFF;\r\n    } else {\r\n        Duration totalTime = trackStatistics.getTotalTime();\r\n        Duration intervalMod = Duration.ofMillis(trackStatistics.getTotalTime().toMillis() % totalTimeFrequency.toMillis());\r\n        nextTotalTime = totalTime.plus(totalTimeFrequency.minus(intervalMod));\r\n    }\r\n}",
  "start_lineno" : "191",
  "methodName" : "updateNextDuration",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/329",
  "prompt" : "import java.time.Duration\nprivate void updateNextDuration() {\r\n    if (trackStatistics == null || totalTimeFrequency.isZero()) {\r\n        nextTotalTime = TOTALTIME_OFF;\r\n    } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = VoiceAnnouncementManager.class.getSimpleName();\nprivate final Context context;\nprivate TTSManager voiceAnnouncement;\nprivate TrackStatistics trackStatistics;\nprivate static final Distance DISTANCE_OFF = Distance.of(Double.MAX_VALUE);\nprivate Distance distanceFrequency = DISTANCE_OFF;\n@NonNull\r\nprivate Distance nextTotalDistance = DISTANCE_OFF;\nprivate static final Duration TOTALTIME_OFF = Duration.ofMillis(Long.MAX_VALUE);\nprivate Duration totalTimeFrequency = TOTALTIME_OFF;\n@NonNull\r\nprivate Duration nextTotalTime = TOTALTIME_OFF;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate TrackPoint.Id startTrackPointId = null;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance intervalDistance;",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "    }\r\n    if (PreferencesUtils.isKey(new int[] { R.string.voice_announcement_distance_key, R.string.stats_units_key }, key)) {\r\n        setFrequency(PreferencesUtils.getVoiceAnnouncementDistance());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.voice_announcement_frequency_key, key)) {\r\n        setFrequency(PreferencesUtils.getVoiceAnnouncementFrequency());\r\n    }\r\n    if (PreferencesUtils.isKey(new int[] { R.string.voice_announcement_distance_key, R.string.stats_units_key }, key)) {\r\n        setFrequency(PreferencesUtils.getVoiceAnnouncementDistance());\r\n    }\r\n}",
  "start_lineno" : "215",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java",
  "task_id" : "OpenTracks/330",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.voice_announcement_frequency_key, key)) {\r\n        setFrequency(PreferencesUtils.getVoiceAnnouncementFrequency());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = AltitudeCorrectionManager.class.getSimpleName();\nprivate AltitudeConverter altitudeConverter;\nprivate final EGM2008Internal altitudeConverterFallback;\nprivate static final String TAG = EGM2008Internal.class.getSimpleName();\nprivate EGM2008Utils.EGM2008Correction egm2008Correction;",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            return;\r\n        }\r\n    }\r\n    trackPoint.setAltitude(egm2008Correction.correctAltitude(trackPoint.getLocation()));\r\n}",
  "context" : "public void correctAltitude(Context context, TrackPoint trackPoint) {\r\n    if (egm2008Correction == null || !egm2008Correction.canCorrect(trackPoint.getLocation())) {\r\n        try {\r\n            egm2008Correction = EGM2008Utils.createCorrection(context, trackPoint.getLocation());\r\n        } catch (IOException e) {\r\n            Log.e(TAG, \"Could not load altitude correction for \" + trackPoint, e);\r\n            return;\r\n        }\r\n    }\r\n    trackPoint.setAltitude(egm2008Correction.correctAltitude(trackPoint.getLocation()));\r\n}",
  "start_lineno" : "57",
  "methodName" : "correctAltitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\AltitudeCorrectionManager.java",
  "task_id" : "OpenTracks/331",
  "prompt" : "import de.dennisguse.opentracks.util.EGM2008Utils\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Altitude\nimport java.io.IOException\nimport android.util.Log\nimport android.location.Location\nimport android.content.Context\npublic void correctAltitude(Context context, TrackPoint trackPoint) {\r\n    if (egm2008Correction == null || !egm2008Correction.canCorrect(trackPoint.getLocation())) {\r\n        try {\r\n            egm2008Correction = EGM2008Utils.createCorrection(context, trackPoint.getLocation());\r\n        } catch (IOException e) {\r\n            Log.e(TAG, \"Could not load altitude correction for \" + trackPoint, e);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String TAG = GPSManager.class.getSimpleName();\nprivate static final String LOCATION_PROVIDER = LocationManager.GPS_PROVIDER;\nprivate TrackPointCreator trackPointCreator;\nprivate Context context;\nprivate Handler handler;\nprivate LocationManager locationManager;\nprivate GpsStatusManager gpsStatusManager;\nprivate Duration gpsInterval;\nprivate Distance thresholdHorizontalAccuracy;",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    gpsStatusManager = new GpsStatusManager(context, this, handler);\r\n    locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    registerLocationListener();\r\n    gpsStatusManager.start();\r\n}",
  "context" : "public void start(@NonNull Context context, @NonNull Handler handler) {\r\n    this.context = context;\r\n    this.handler = handler;\r\n    onSharedPreferenceChanged(null, null);\r\n    gpsStatusManager = new GpsStatusManager(context, this, handler);\r\n    locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    registerLocationListener();\r\n    gpsStatusManager.start();\r\n}",
  "start_lineno" : "47",
  "methodName" : "start",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GPSManager.java",
  "task_id" : "OpenTracks/332",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Handler\nimport android.content.Context\npublic void start(@NonNull Context context, @NonNull Handler handler) {\r\n    this.context = context;\r\n    this.handler = handler;\r\n    onSharedPreferenceChanged(null, null);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String TAG = GPSManager.class.getSimpleName();\nprivate static final String LOCATION_PROVIDER = LocationManager.GPS_PROVIDER;\nprivate TrackPointCreator trackPointCreator;\nprivate Context context;\nprivate Handler handler;\nprivate LocationManager locationManager;\nprivate GpsStatusManager gpsStatusManager;\nprivate Duration gpsInterval;\nprivate Distance thresholdHorizontalAccuracy;",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    handler = null;\r\n    gpsStatusManager.stop();\r\n    gpsStatusManager = null;\r\n    trackPointCreator = null;\r\n}",
  "context" : "@SuppressWarnings({ \"MissingPermission\" })\r\npublic void stop(Context context) {\r\n    if (isStarted()) {\r\n        LocationManagerCompat.removeUpdates(locationManager, this);\r\n    }\r\n    locationManager = null;\r\n    this.context = null;\r\n    handler = null;\r\n    gpsStatusManager.stop();\r\n    gpsStatusManager = null;\r\n    trackPointCreator = null;\r\n}",
  "start_lineno" : "63",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GPSManager.java",
  "task_id" : "OpenTracks/333",
  "prompt" : "import androidx.core.location.LocationManagerCompat\nimport android.location.LocationManager\nimport android.location.Location\nimport android.content.Context\n@SuppressWarnings({ \"MissingPermission\" })\r\npublic void stop(Context context) {\r\n    if (isStarted()) {\r\n        LocationManagerCompat.removeUpdates(locationManager, this);\r\n    }\r\n    locationManager = null;\r\n    this.context = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "    client = null;\r\n    handler = null;\r\n}",
  "context" : "/**\r\n * The client that uses GpsStatus has to call this method to stop the Runnable if needed.\r\n */\r\npublic void stop() {\r\n    stopTimer();\r\n    client.onGpsStatusChanged(GpsStatusValue.GPS_NONE);\r\n    client = null;\r\n    handler = null;\r\n}",
  "start_lineno" : "63",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/334",
  "prompt" : "/**\r\n * The client that uses GpsStatus has to call this method to stop the Runnable if needed.\r\n */\r\npublic void stop() {\r\n    stopTimer();\r\n    client.onGpsStatusChanged(GpsStatusValue.GPS_NONE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    //TODO Reschedule gpsStatusTimer?\r\n    signalLostThreshold = SIGNAL_LOST_THRESHOLD.plus(value);\r\n}",
  "context" : "public void onMinSamplingIntervalChanged(Duration value) {\r\n    //TODO Reschedule gpsStatusTimer?\r\n    signalLostThreshold = SIGNAL_LOST_THRESHOLD.plus(value);\r\n}",
  "start_lineno" : "79",
  "methodName" : "onMinSamplingIntervalChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/335",
  "prompt" : "import java.time.Duration\npublic void onMinSamplingIntervalChanged(Duration value) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    lastTrackPoint = trackPoint;\r\n    determineGpsStatusOnTrackpoint(trackPoint);\r\n}",
  "context" : "/**\r\n * This method must be called from the client every time a new trackPoint is received.\r\n * Receive new trackPoint and calculate the new status if needed.\r\n * It look for GPS changes in lastLocation if it's not null. If it's null then look for in lastValidLocation if any.\r\n */\r\npublic void onNewTrackPoint(@NonNull final TrackPoint trackPoint) {\r\n    lastTrackPoint = trackPoint;\r\n    determineGpsStatusOnTrackpoint(trackPoint);\r\n}",
  "start_lineno" : "88",
  "methodName" : "onNewTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/336",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport androidx.annotation.NonNull\n/**\r\n * This method must be called from the client every time a new trackPoint is received.\r\n * Receive new trackPoint and calculate the new status if needed.\r\n * It look for GPS changes in lastLocation if it's not null. If it's null then look for in lastValidLocation if any.\r\n */\r\npublic void onNewTrackPoint(@NonNull final TrackPoint trackPoint) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        }\r\n        return;\r\n    }\r\n    scheduleTimer();\r\n}",
  "context" : "void determineGpsStatusByTime(Instant now) {\r\n    if (lastTrackPoint == null) {\r\n        return;\r\n    }\r\n    if (signalLostThreshold.minus(Duration.between(lastTrackPoint.getTime(), now)).isNegative()) {\r\n        // Too much time without receiving signal -> signal lost.\r\n        if (gpsStatus != GpsStatusValue.GPS_SIGNAL_LOST) {\r\n            setGpsStatus(GpsStatusValue.GPS_SIGNAL_LOST);\r\n        }\r\n        return;\r\n    }\r\n    scheduleTimer();\r\n}",
  "start_lineno" : "117",
  "methodName" : "determineGpsStatusByTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/337",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport java.time.Instant\nimport java.time.Duration\nvoid determineGpsStatusByTime(Instant now) {\r\n    if (lastTrackPoint == null) {\r\n        return;\r\n    }\r\n    if (signalLostThreshold.minus(Duration.between(lastTrackPoint.getTime(), now)).isNegative()) {\r\n        // Too much time without receiving signal -> signal lost.\r\n        if (gpsStatus != GpsStatusValue.GPS_SIGNAL_LOST) {\r\n            setGpsStatus(GpsStatusValue.GPS_SIGNAL_LOST);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "        scheduleTimer();\r\n    } else {\r\n        onGpsDisabled();\r\n    }\r\n}",
  "context" : "/**\r\n * This method must be called from the client every time the GPS sensor is enabled.\r\n * Anyway, it checks that GPS is enabled because the client assumes that if it's on then GPS is enabled but user can disable GPS by hand.\r\n */\r\npublic void onGpsEnabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_ENABLED) {\r\n        return;\r\n    }\r\n    LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    if (locationManager != null && locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n        setGpsStatus(GpsStatusValue.GPS_ENABLED);\r\n        scheduleTimer();\r\n    } else {\r\n        onGpsDisabled();\r\n    }\r\n}",
  "start_lineno" : "135",
  "methodName" : "onGpsEnabled",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/338",
  "prompt" : "import android.location.LocationManager\nimport android.content.Context\n/**\r\n * This method must be called from the client every time the GPS sensor is enabled.\r\n * Anyway, it checks that GPS is enabled because the client assumes that if it's on then GPS is enabled but user can disable GPS by hand.\r\n */\r\npublic void onGpsEnabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_ENABLED) {\r\n        return;\r\n    }\r\n    LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    if (locationManager != null && locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n        setGpsStatus(GpsStatusValue.GPS_ENABLED);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "160",
  "ground_truth" : "    }\r\n    setGpsStatus(GpsStatusValue.GPS_DISABLED);\r\n    lastTrackPoint = null;\r\n    stopTimer();\r\n}",
  "context" : "/**\r\n * This method must be called from service every time the GPS sensor is disabled.\r\n */\r\npublic void onGpsDisabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_DISABLED) {\r\n        return;\r\n    }\r\n    setGpsStatus(GpsStatusValue.GPS_DISABLED);\r\n    lastTrackPoint = null;\r\n    stopTimer();\r\n}",
  "start_lineno" : "152",
  "methodName" : "onGpsDisabled",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/339",
  "prompt" : "/**\r\n * This method must be called from service every time the GPS sensor is disabled.\r\n */\r\npublic void onGpsDisabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_DISABLED) {\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "        client.onGpsStatusChanged(current);\r\n    }\r\n}",
  "context" : "private void setGpsStatus(GpsStatusValue current) {\r\n    gpsStatus = current;\r\n    if (client != null) {\r\n        client.onGpsStatusChanged(current);\r\n    }\r\n}",
  "start_lineno" : "162",
  "methodName" : "setGpsStatus",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/340",
  "prompt" : "private void setGpsStatus(GpsStatusValue current) {\r\n    gpsStatus = current;\r\n    if (client != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = GpsStatusManager.class.getSimpleName();\nprivate Distance horizontalAccuracyThreshold;\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate GpsStatusListener client;\nprivate final Context context;\n@Nullable\r\nprivate TrackPoint lastTrackPoint = null;\nprivate Handler handler;\npublic final Runnable gpsStatusTimer = () -> {\r\n    //TODO Get now via TrackPointCreator?\r\n    determineGpsStatusByTime(Instant.now());\r\n};",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "    handler.removeCallbacks(gpsStatusTimer);\r\n    handler.postDelayed(gpsStatusTimer, signalLostThreshold.toMillis());\r\n}",
  "context" : "private void scheduleTimer() {\r\n    handler.removeCallbacks(gpsStatusTimer);\r\n    handler.postDelayed(gpsStatusTimer, signalLostThreshold.toMillis());\r\n}",
  "start_lineno" : "169",
  "methodName" : "scheduleTimer",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java",
  "task_id" : "OpenTracks/341",
  "prompt" : "private void scheduleTimer() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final long epochAtCreation;\nprivate final long elapsedRealtimeAtCreation;",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    long current = (SystemClock.elapsedRealtime() - elapsedRealtimeAtCreation);\r\n    return Instant.ofEpochMilli(epochAtCreation + current);\r\n}",
  "context" : "@Override\r\npublic Instant instant() {\r\n    long current = (SystemClock.elapsedRealtime() - elapsedRealtimeAtCreation);\r\n    return Instant.ofEpochMilli(epochAtCreation + current);\r\n}",
  "start_lineno" : "25",
  "methodName" : "instant",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\MonotonicClock.java",
  "task_id" : "OpenTracks/342",
  "prompt" : "import java.time.Instant\n@Override\r\npublic Instant instant() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    this.context = context;\r\n    sensorManager.start(context, handler);\r\n}",
  "context" : "public synchronized void start(@NonNull Context context, @NonNull Handler handler) {\r\n    this.context = context;\r\n    sensorManager.start(context, handler);\r\n}",
  "start_lineno" : "44",
  "methodName" : "start",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/343",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Handler\nimport android.content.Context\npublic synchronized void start(@NonNull Context context, @NonNull Handler handler) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "        Log.w(TAG, \"Not started, should not be called.\");\r\n        return null;\r\n    }\r\n    return sensorManager.fill(trackPoint);\r\n}",
  "context" : "private SensorDataSet addSensorData(TrackPoint trackPoint) {\r\n    if (!isStarted()) {\r\n        Log.w(TAG, \"Not started, should not be called.\");\r\n        return null;\r\n    }\r\n    return sensorManager.fill(trackPoint);\r\n}",
  "start_lineno" : "58",
  "methodName" : "addSensorData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/344",
  "prompt" : "import de.dennisguse.opentracks.sensors.sensorData.SensorDataSet\nimport de.dennisguse.opentracks.data.models.TrackPoint\nprivate SensorDataSet addSensorData(TrackPoint trackPoint) {\r\n    if (!isStarted()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "    sensorManager.stop(context);\r\n    this.context = null;\r\n}",
  "context" : "public void stop() {\r\n    sensorManager.stop(context);\r\n    this.context = null;\r\n}",
  "start_lineno" : "67",
  "methodName" : "stop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/345",
  "prompt" : "public void stop() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "    boolean stored = service.newTrackPoint(trackPoint, PreferencesUtils.getThresholdHorizontalAccuracy());\r\n    if (stored) {\r\n        reset();\r\n    }\r\n}",
  "context" : "@VisibleForTesting\r\npublic void onNewTrackPoint(@NonNull TrackPoint trackPoint) {\r\n    addSensorData(trackPoint);\r\n    //TODO Cache preference for performance\r\n    boolean stored = service.newTrackPoint(trackPoint, PreferencesUtils.getThresholdHorizontalAccuracy());\r\n    if (stored) {\r\n        reset();\r\n    }\r\n}",
  "start_lineno" : "83",
  "methodName" : "onNewTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/346",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport androidx.annotation.VisibleForTesting\nimport androidx.annotation.NonNull\n@VisibleForTesting\r\npublic void onNewTrackPoint(@NonNull TrackPoint trackPoint) {\r\n    addSensorData(trackPoint);\r\n    //TODO Cache preference for performance\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "    reset();\r\n    return segmentEnd;\r\n}",
  "context" : "public synchronized TrackPoint createSegmentEnd() {\r\n    TrackPoint segmentEnd = TrackPoint.createSegmentEndWithTime(createNow());\r\n    addSensorData(segmentEnd);\r\n    reset();\r\n    return segmentEnd;\r\n}",
  "start_lineno" : "97",
  "methodName" : "createSegmentEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/347",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\npublic synchronized TrackPoint createSegmentEnd() {\r\n    TrackPoint segmentEnd = TrackPoint.createSegmentEndWithTime(createNow());\r\n    addSensorData(segmentEnd);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate Context context;\nprivate final Callback service;\n@NonNull\r\nprivate Clock clock = new MonotonicClock();\nprivate final SensorManager sensorManager;",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "    reset();\r\n    return idle;\r\n}",
  "context" : "public synchronized TrackPoint createIdle() {\r\n    TrackPoint idle = new TrackPoint(TrackPoint.Type.IDLE, createNow());\r\n    addSensorData(idle);\r\n    reset();\r\n    return idle;\r\n}",
  "start_lineno" : "104",
  "methodName" : "createIdle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java",
  "task_id" : "OpenTracks/348",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\npublic synchronized TrackPoint createIdle() {\r\n    TrackPoint idle = new TrackPoint(TrackPoint.Type.IDLE, createNow());\r\n    addSensorData(idle);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "    }\r\n    return track.getActivityTypeLocalized();\r\n}",
  "context" : "public String getTrackCategory() {\r\n    if (track == null) {\r\n        return \"\";\r\n    }\r\n    return track.getActivityTypeLocalized();\r\n}",
  "start_lineno" : "15",
  "methodName" : "getTrackCategory",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\RecordingData.java",
  "task_id" : "OpenTracks/349",
  "prompt" : "public String getTrackCategory() {\r\n    if (track == null) {\r\n        return \"\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    }\r\n    return track.getTrackStatistics();\r\n}",
  "context" : "@NonNull\r\npublic TrackStatistics getTrackStatistics() {\r\n    if (track == null) {\r\n        return new TrackStatistics();\r\n    }\r\n    return track.getTrackStatistics();\r\n}",
  "start_lineno" : "22",
  "methodName" : "getTrackStatistics",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\RecordingData.java",
  "task_id" : "OpenTracks/350",
  "prompt" : "@NonNull\r\npublic TrackStatistics getTrackStatistics() {\r\n    if (track == null) {\r\n        return new TrackStatistics();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int JOB_ID = 3;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_TRACK_IDS = \"extra_track_ids\";\npublic static final int RESULT_CODE_SUCCESS = 1;\nprivate final Receiver receiver;",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "    intent.putParcelableArrayListExtra(EXTRA_TRACK_IDS, toBeDeleted);\r\n    enqueueWork(context, TrackDeleteService.class, JOB_ID, intent);\r\n}",
  "context" : "public static void enqueue(Context context, TrackDeleteResultReceiver receiver, ArrayList<Track.Id> toBeDeleted) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putParcelableArrayListExtra(EXTRA_TRACK_IDS, toBeDeleted);\r\n    enqueueWork(context, TrackDeleteService.class, JOB_ID, intent);\r\n}",
  "start_lineno" : "26",
  "methodName" : "enqueue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackDeleteService.java",
  "task_id" : "OpenTracks/351",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.ArrayList\nimport android.os.ResultReceiver\nimport android.content.Intent\nimport android.content.Context\nimport android.app.job.JobService\npublic static void enqueue(Context context, TrackDeleteResultReceiver receiver, ArrayList<Track.Id> toBeDeleted) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int JOB_ID = 3;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_TRACK_IDS = \"extra_track_ids\";\npublic static final int RESULT_CODE_SUCCESS = 1;\nprivate final Receiver receiver;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "    ArrayList<Track.Id> trackIds = intent.getParcelableArrayListExtra(EXTRA_TRACK_IDS);\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(this);\r\n    contentProviderUtils.deleteTracks(this, trackIds);\r\n    resultReceiver.send(TrackDeleteResultReceiver.RESULT_CODE_SUCCESS, new Bundle());\r\n}",
  "context" : "@Override\r\nprotected void onHandleWork(@NonNull Intent intent) {\r\n    ResultReceiver resultReceiver = intent.getParcelableExtra(EXTRA_RECEIVER);\r\n    ArrayList<Track.Id> trackIds = intent.getParcelableArrayListExtra(EXTRA_TRACK_IDS);\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(this);\r\n    contentProviderUtils.deleteTracks(this, trackIds);\r\n    resultReceiver.send(TrackDeleteResultReceiver.RESULT_CODE_SUCCESS, new Bundle());\r\n}",
  "start_lineno" : "33",
  "methodName" : "onHandleWork",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackDeleteService.java",
  "task_id" : "OpenTracks/352",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.ResultReceiver\nimport android.content.Intent\n@Override\r\nprotected void onHandleWork(@NonNull Intent intent) {\r\n    ResultReceiver resultReceiver = intent.getParcelableExtra(EXTRA_RECEIVER);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int JOB_ID = 3;\nprivate static final String EXTRA_RECEIVER = \"extra_receiver\";\nprivate static final String EXTRA_TRACK_IDS = \"extra_track_ids\";\npublic static final int RESULT_CODE_SUCCESS = 1;\nprivate final Receiver receiver;",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "            receiver.onDeleteFinished();\r\n        default ->\r\n            throw new RuntimeException(\"Unknown resultCode.\");\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onReceiveResult(int resultCode, Bundle resultData) {\r\n    switch(resultCode) {\r\n        case RESULT_CODE_SUCCESS ->\r\n            receiver.onDeleteFinished();\r\n        default ->\r\n            throw new RuntimeException(\"Unknown resultCode.\");\r\n    }\r\n}",
  "start_lineno" : "55",
  "methodName" : "onReceiveResult",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackDeleteService.java",
  "task_id" : "OpenTracks/353",
  "prompt" : "import android.os.Bundle\n@Override\r\nprotected void onReceiveResult(int resultCode, Bundle resultData) {\r\n    switch(resultCode) {\r\n        case RESULT_CODE_SUCCESS ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingManager.class.getSimpleName();\nprivate static final AltitudeCorrectionManager ALTITUDE_CORRECTION_MANAGER = new AltitudeCorrectionManager();\nprivate final Runnable ON_IDLE = this::onIdle;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Context context;\nprivate final IdleObserver idleObserver;\nprivate final Handler handler;\nprivate final TrackPointCreator trackPointCreator;\nprivate Distance recordingDistanceInterval;\nprivate Distance maxRecordingDistance;\nprivate Duration idleDuration;\nprivate Track.Id trackId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate TrackPoint lastTrackPoint;\nprivate TrackPoint lastTrackPointUIWithSpeed;\nprivate TrackPoint lastTrackPointUIWithAltitude;\nprivate TrackPoint lastStoredTrackPoint;\nprivate TrackPoint lastStoredTrackPointWithLocation;",
  "app_type" : "life",
  "end_lineno" : "110",
  "ground_truth" : "    trackStatisticsUpdater = new TrackStatisticsUpdater(track.getTrackStatistics());\r\n    onNewTrackPoint(trackPointCreator.createSegmentStartManual());\r\n    reset();\r\n    return true;\r\n}",
  "context" : "/**\r\n * @return if the recording could be started.\r\n */\r\nboolean resumeExistingTrack(@NonNull Track.Id resumeTrackId) {\r\n    trackId = resumeTrackId;\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    if (track == null) {\r\n        Log.e(TAG, \"Ignore resumeTrack. Track \" + trackId.id() + \" does not exists.\");\r\n        return false;\r\n    }\r\n    trackStatisticsUpdater = new TrackStatisticsUpdater(track.getTrackStatistics());\r\n    onNewTrackPoint(trackPointCreator.createSegmentStartManual());\r\n    reset();\r\n    return true;\r\n}",
  "start_lineno" : "96",
  "methodName" : "resumeExistingTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java",
  "task_id" : "OpenTracks/354",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.util.Log\n/**\r\n * @return if the recording could be started.\r\n */\r\nboolean resumeExistingTrack(@NonNull Track.Id resumeTrackId) {\r\n    trackId = resumeTrackId;\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    if (track == null) {\r\n        Log.e(TAG, \"Ignore resumeTrack. Track \" + trackId.id() + \" does not exists.\");\r\n        return false;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingManager.class.getSimpleName();\nprivate static final AltitudeCorrectionManager ALTITUDE_CORRECTION_MANAGER = new AltitudeCorrectionManager();\nprivate final Runnable ON_IDLE = this::onIdle;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Context context;\nprivate final IdleObserver idleObserver;\nprivate final Handler handler;\nprivate final TrackPointCreator trackPointCreator;\nprivate Distance recordingDistanceInterval;\nprivate Distance maxRecordingDistance;\nprivate Duration idleDuration;\nprivate Track.Id trackId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate TrackPoint lastTrackPoint;\nprivate TrackPoint lastTrackPointUIWithSpeed;\nprivate TrackPoint lastTrackPointUIWithAltitude;\nprivate TrackPoint lastStoredTrackPoint;\nprivate TrackPoint lastStoredTrackPointWithLocation;",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "    insertTrackPoint(segmentEnd, true);\r\n    trackId = null;\r\n    trackStatisticsUpdater = null;\r\n    reset();\r\n}",
  "context" : "void endCurrentTrack() {\r\n    TrackPoint segmentEnd = trackPointCreator.createSegmentEnd();\r\n    insertTrackPoint(segmentEnd, true);\r\n    trackId = null;\r\n    trackStatisticsUpdater = null;\r\n    reset();\r\n}",
  "start_lineno" : "112",
  "methodName" : "endCurrentTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java",
  "task_id" : "OpenTracks/355",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nvoid endCurrentTrack() {\r\n    TrackPoint segmentEnd = trackPointCreator.createSegmentEnd();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingManager.class.getSimpleName();\nprivate static final AltitudeCorrectionManager ALTITUDE_CORRECTION_MANAGER = new AltitudeCorrectionManager();\nprivate final Runnable ON_IDLE = this::onIdle;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Context context;\nprivate final IdleObserver idleObserver;\nprivate final Handler handler;\nprivate final TrackPointCreator trackPointCreator;\nprivate Distance recordingDistanceInterval;\nprivate Distance maxRecordingDistance;\nprivate Duration idleDuration;\nprivate Track.Id trackId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate TrackPoint lastTrackPoint;\nprivate TrackPoint lastTrackPointUIWithSpeed;\nprivate TrackPoint lastTrackPointUIWithAltitude;\nprivate TrackPoint lastStoredTrackPoint;\nprivate TrackPoint lastStoredTrackPointWithLocation;",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "    onNewTrackPoint(trackPointCreator.createIdle());\r\n    idleObserver.onIdle();\r\n}",
  "context" : "@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void onIdle() {\r\n    Log.d(TAG, \"Becoming idle\");\r\n    onNewTrackPoint(trackPointCreator.createIdle());\r\n    idleObserver.onIdle();\r\n}",
  "start_lineno" : "166",
  "methodName" : "onIdle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java",
  "task_id" : "OpenTracks/356",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.annotation.VisibleForTesting\nimport android.util.Log\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void onIdle() {\r\n    Log.d(TAG, \"Becoming idle\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingManager.class.getSimpleName();\nprivate static final AltitudeCorrectionManager ALTITUDE_CORRECTION_MANAGER = new AltitudeCorrectionManager();\nprivate final Runnable ON_IDLE = this::onIdle;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Context context;\nprivate final IdleObserver idleObserver;\nprivate final Handler handler;\nprivate final TrackPointCreator trackPointCreator;\nprivate Distance recordingDistanceInterval;\nprivate Distance maxRecordingDistance;\nprivate Duration idleDuration;\nprivate Track.Id trackId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate TrackPoint lastTrackPoint;\nprivate TrackPoint lastTrackPointUIWithSpeed;\nprivate TrackPoint lastTrackPointUIWithAltitude;\nprivate TrackPoint lastStoredTrackPoint;\nprivate TrackPoint lastStoredTrackPointWithLocation;",
  "app_type" : "life",
  "end_lineno" : "293",
  "ground_truth" : "    lastTrackPointUIWithSpeed = null;\r\n    lastTrackPointUIWithAltitude = null;\r\n    lastStoredTrackPoint = null;\r\n    lastStoredTrackPointWithLocation = null;\r\n}",
  "context" : "private void reset() {\r\n    lastTrackPoint = null;\r\n    lastTrackPointUIWithSpeed = null;\r\n    lastTrackPointUIWithAltitude = null;\r\n    lastStoredTrackPoint = null;\r\n    lastStoredTrackPointWithLocation = null;\r\n}",
  "start_lineno" : "286",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java",
  "task_id" : "OpenTracks/357",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nprivate void reset() {\r\n    lastTrackPoint = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingManager.class.getSimpleName();\nprivate static final AltitudeCorrectionManager ALTITUDE_CORRECTION_MANAGER = new AltitudeCorrectionManager();\nprivate final Runnable ON_IDLE = this::onIdle;\nprivate final ContentProviderUtils contentProviderUtils;\nprivate final Context context;\nprivate final IdleObserver idleObserver;\nprivate final Handler handler;\nprivate final TrackPointCreator trackPointCreator;\nprivate Distance recordingDistanceInterval;\nprivate Distance maxRecordingDistance;\nprivate Duration idleDuration;\nprivate Track.Id trackId;\nprivate TrackStatisticsUpdater trackStatisticsUpdater;\nprivate TrackPoint lastTrackPoint;\nprivate TrackPoint lastTrackPointUIWithSpeed;\nprivate TrackPoint lastTrackPointUIWithAltitude;\nprivate TrackPoint lastStoredTrackPoint;\nprivate TrackPoint lastStoredTrackPointWithLocation;",
  "app_type" : "life",
  "end_lineno" : "306",
  "ground_truth" : "    }\r\n    if (PreferencesUtils.isKey(R.string.idle_duration_key, key)) {\r\n        idleDuration = PreferencesUtils.getIdleDurationTimeout();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.recording_distance_interval_key, key)) {\r\n        recordingDistanceInterval = PreferencesUtils.getRecordingDistanceInterval();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.max_recording_distance_key, key)) {\r\n        maxRecordingDistance = PreferencesUtils.getMaxRecordingDistance();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.idle_duration_key, key)) {\r\n        idleDuration = PreferencesUtils.getIdleDurationTimeout();\r\n    }\r\n}",
  "start_lineno" : "295",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java",
  "task_id" : "OpenTracks/358",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.data.models.Distance\nimport de.dennisguse.opentracks.R\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.recording_distance_interval_key, key)) {\r\n        recordingDistanceInterval = PreferencesUtils.getRecordingDistanceInterval();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.max_recording_distance_key, key)) {\r\n        maxRecordingDistance = PreferencesUtils.getMaxRecordingDistance();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    updateRecordingDataWhileRecording();\r\n    TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    updateRecordingDataWhileRecording();\r\n    TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n}",
  "start_lineno" : "76",
  "methodName" : "run",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/359",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    Track.Id trackId = trackRecordingManager.startNewTrack();\r\n    updateRecordingStatus(RecordingStatus.record(trackId));\r\n    startRecording();\r\n    return trackId;\r\n}",
  "context" : "public Track.Id startNewTrack() {\r\n    if (isRecording()) {\r\n        Log.w(TAG, \"Ignore startNewTrack. Already recording.\");\r\n        return null;\r\n    }\r\n    Log.i(TAG, \"startNewTrack\");\r\n    // Set recording status\r\n    Track.Id trackId = trackRecordingManager.startNewTrack();\r\n    updateRecordingStatus(RecordingStatus.record(trackId));\r\n    startRecording();\r\n    return trackId;\r\n}",
  "start_lineno" : "163",
  "methodName" : "startNewTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/360",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport android.util.Log\npublic Track.Id startNewTrack() {\r\n    if (isRecording()) {\r\n        Log.w(TAG, \"Ignore startNewTrack. Already recording.\");\r\n        return null;\r\n    }\r\n    Log.i(TAG, \"startNewTrack\");\r\n    // Set recording status\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "188",
  "ground_truth" : "    }\r\n    Log.i(TAG, \"resumeTrack\");\r\n    updateRecordingStatus(RecordingStatus.record(trackId));\r\n    startRecording();\r\n}",
  "context" : "public void resumeTrack(Track.Id trackId) {\r\n    if (!trackRecordingManager.resumeExistingTrack(trackId)) {\r\n        Log.w(TAG, \"Cannot resume a non-existing track.\");\r\n        return;\r\n    }\r\n    Log.i(TAG, \"resumeTrack\");\r\n    updateRecordingStatus(RecordingStatus.record(trackId));\r\n    startRecording();\r\n}",
  "start_lineno" : "178",
  "methodName" : "resumeTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/361",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport android.util.Log\npublic void resumeTrack(Track.Id trackId) {\r\n    if (!trackRecordingManager.resumeExistingTrack(trackId)) {\r\n        Log.w(TAG, \"Cannot resume a non-existing track.\");\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "197",
  "ground_truth" : "    startSensors();\r\n    voiceAnnouncementManager.start(trackRecordingManager.getTrackStatistics());\r\n}",
  "context" : "private void startRecording() {\r\n    // Update instance variables\r\n    handler.postDelayed(updateRecordingData, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    startSensors();\r\n    voiceAnnouncementManager.start(trackRecordingManager.getTrackStatistics());\r\n}",
  "start_lineno" : "190",
  "methodName" : "startRecording",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/362",
  "prompt" : "private void startRecording() {\r\n    // Update instance variables\r\n    handler.postDelayed(updateRecordingData, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "205",
  "ground_truth" : "    Log.i(TAG, \"tryStartSensors\");\r\n    startSensors();\r\n}",
  "context" : "public void tryStartSensors() {\r\n    if (isSensorStarted())\r\n        return;\r\n    Log.i(TAG, \"tryStartSensors\");\r\n    startSensors();\r\n}",
  "start_lineno" : "199",
  "methodName" : "tryStartSensors",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/363",
  "prompt" : "public void tryStartSensors() {\r\n    if (isSensorStarted())\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "241",
  "ground_truth" : "    trackRecordingManager.endCurrentTrack();\r\n    stopUpdateRecordingData();\r\n    voiceAnnouncementManager.stop();\r\n    stopSensors();\r\n}",
  "context" : "public void endCurrentTrack() {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Ignore endCurrentTrack. Not recording.\");\r\n        return;\r\n    }\r\n    // Set recording status\r\n    updateRecordingStatus(STATUS_DEFAULT);\r\n    trackRecordingManager.endCurrentTrack();\r\n    stopUpdateRecordingData();\r\n    voiceAnnouncementManager.stop();\r\n    stopSensors();\r\n}",
  "start_lineno" : "225",
  "methodName" : "endCurrentTrack",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/364",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport android.util.Log\npublic void endCurrentTrack() {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Ignore endCurrentTrack. Not recording.\");\r\n        return;\r\n    }\r\n    // Set recording status\r\n    updateRecordingStatus(STATUS_DEFAULT);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "249",
  "ground_truth" : "    stopForeground(true);\r\n    notificationManager.cancelNotification();\r\n    wakeLock = SystemUtils.releaseWakeLock(wakeLock);\r\n    gpsStatusObservable.postValue(STATUS_GPS_DEFAULT);\r\n}",
  "context" : "void stopSensors() {\r\n    trackPointCreator.stop();\r\n    stopForeground(true);\r\n    notificationManager.cancelNotification();\r\n    wakeLock = SystemUtils.releaseWakeLock(wakeLock);\r\n    gpsStatusObservable.postValue(STATUS_GPS_DEFAULT);\r\n}",
  "start_lineno" : "243",
  "methodName" : "stopSensors",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/365",
  "prompt" : "void stopSensors() {\r\n    trackPointCreator.stop();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "    }\r\n    boolean stored = trackRecordingManager.onNewTrackPoint(trackPoint);\r\n    notificationManager.updateTrackPoint(this, trackRecordingManager.getTrackStatistics(), trackPoint, thresholdHorizontalAccuracy);\r\n    return stored;\r\n}",
  "context" : "@Override\r\npublic boolean newTrackPoint(TrackPoint trackPoint, Distance thresholdHorizontalAccuracy) {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Ignore newTrackPoint. Not recording.\");\r\n        return false;\r\n    }\r\n    boolean stored = trackRecordingManager.onNewTrackPoint(trackPoint);\r\n    notificationManager.updateTrackPoint(this, trackRecordingManager.getTrackStatistics(), trackPoint, thresholdHorizontalAccuracy);\r\n    return stored;\r\n}",
  "start_lineno" : "251",
  "methodName" : "newTrackPoint",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/366",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Distance\nimport android.util.Log\n@Override\r\npublic boolean newTrackPoint(TrackPoint trackPoint, Distance thresholdHorizontalAccuracy) {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Ignore newTrackPoint. Not recording.\");\r\n        return false;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "286",
  "ground_truth" : "    }\r\n    return trackRecordingManager.insertMarker(name, category, description, photoUrl);\r\n}",
  "context" : "public Marker.Id insertMarker(String name, String category, String description, String photoUrl) {\r\n    if (!isRecording()) {\r\n        return null;\r\n    }\r\n    return trackRecordingManager.insertMarker(name, category, description, photoUrl);\r\n}",
  "start_lineno" : "280",
  "methodName" : "insertMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/367",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\npublic Marker.Id insertMarker(String name, String category, String description, String photoUrl) {\r\n    if (!isRecording()) {\r\n        return null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "320",
  "ground_truth" : "    // Compute temporary track statistics using sensorData and update time.\r\n    Pair<Track, Pair<TrackPoint, SensorDataSet>> data = trackRecordingManager.getDataForUI();\r\n    voiceAnnouncementManager.announceStatisticsIfNeeded(data.first);\r\n    recordingDataObservable.postValue(new RecordingData(data.first, data.second.first, data.second.second));\r\n}",
  "context" : "private void updateRecordingDataWhileRecording() {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Currently not recording; cannot update data.\");\r\n        return;\r\n    }\r\n    // Compute temporary track statistics using sensorData and update time.\r\n    Pair<Track, Pair<TrackPoint, SensorDataSet>> data = trackRecordingManager.getDataForUI();\r\n    voiceAnnouncementManager.announceStatisticsIfNeeded(data.first);\r\n    recordingDataObservable.postValue(new RecordingData(data.first, data.second.first, data.second.second));\r\n}",
  "start_lineno" : "308",
  "methodName" : "updateRecordingDataWhileRecording",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/368",
  "prompt" : "import android.util.Log\nprivate void updateRecordingDataWhileRecording() {\r\n    if (!isRecording()) {\r\n        Log.w(TAG, \"Currently not recording; cannot update data.\");\r\n        return;\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "339",
  "ground_truth" : "    recordingStatus = status;\r\n    recordingStatusObservable.postValue(recordingStatus);\r\n}",
  "context" : "private void updateRecordingStatus(RecordingStatus status) {\r\n    Log.i(TAG, \"new status \" + recordingStatus + \" -> \" + status);\r\n    recordingStatus = status;\r\n    recordingStatusObservable.postValue(recordingStatus);\r\n}",
  "start_lineno" : "335",
  "methodName" : "updateRecordingStatus",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/369",
  "prompt" : "import android.util.Log\nprivate void updateRecordingStatus(RecordingStatus status) {\r\n    Log.i(TAG, \"new status \" + recordingStatus + \" -> \" + status);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingService.class.getSimpleName();\nprivate static final Duration RECORDING_DATA_UPDATE_INTERVAL = Duration.ofSeconds(1);\npublic static final RecordingStatus STATUS_DEFAULT = RecordingStatus.notRecording();\npublic static final RecordingData NOT_RECORDING = new RecordingData(null, null, null);\npublic static final GpsStatusValue STATUS_GPS_DEFAULT = GpsStatusValue.GPS_NONE;\nprivate final Binder binder = new Binder();\nprivate final Runnable updateRecordingData = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        updateRecordingDataWhileRecording();\r\n        TrackRecordingService.this.handler.postDelayed(this, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r\n    }\r\n};\nprivate MutableLiveData<RecordingStatus> recordingStatusObservable;\nprivate MutableLiveData<GpsStatusValue> gpsStatusObservable;\nprivate MutableLiveData<RecordingData> recordingDataObservable;\nprivate Handler handler;\nprivate TrackPointCreator trackPointCreator;\nprivate TrackRecordingManager trackRecordingManager;\nprivate VoiceAnnouncementManager voiceAnnouncementManager;\nprivate TrackRecordingServiceNotificationManager notificationManager;",
  "app_type" : "life",
  "end_lineno" : "356",
  "ground_truth" : "    trackPointCreator.onSharedPreferenceChanged(sharedPreferences, key);\r\n    notificationManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    voiceAnnouncementManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    trackRecordingManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    trackPointCreator.onSharedPreferenceChanged(sharedPreferences, key);\r\n    notificationManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n}",
  "start_lineno" : "350",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java",
  "task_id" : "OpenTracks/370",
  "prompt" : "import androidx.annotation.Nullable\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    voiceAnnouncementManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    trackRecordingManager.onSharedPreferenceChanged(sharedPreferences, key);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "    } catch (RemoteException e) {\r\n        Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n    }\r\n    setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n}",
  "context" : "@Override\r\npublic void onServiceConnected(ComponentName className, IBinder service) {\r\n    Log.i(TAG, \"Connected to the service: \" + service);\r\n    try {\r\n        service.linkToDeath(deathRecipient, 0);\r\n    } catch (RemoteException e) {\r\n        Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n    }\r\n    setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n}",
  "start_lineno" : "49",
  "methodName" : "onServiceConnected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/371",
  "prompt" : "import android.util.Log\nimport android.os.IBinder\nimport android.content.ComponentName\n@Override\r\npublic void onServiceConnected(ComponentName className, IBinder service) {\r\n    Log.i(TAG, \"Connected to the service: \" + service);\r\n    try {\r\n        service.linkToDeath(deathRecipient, 0);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "    Log.i(TAG, \"Disconnected from the service.\");\r\n    setTrackRecordingService(null);\r\n}",
  "context" : "@Override\r\npublic void onServiceDisconnected(ComponentName className) {\r\n    Log.i(TAG, \"Disconnected from the service.\");\r\n    setTrackRecordingService(null);\r\n}",
  "start_lineno" : "60",
  "methodName" : "onServiceDisconnected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/372",
  "prompt" : "import android.content.ComponentName\n@Override\r\npublic void onServiceDisconnected(ComponentName className) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "    }\r\n    Log.i(TAG, \"Binding the service.\");\r\n    int flags = Context.BIND_AUTO_CREATE + (BuildConfig.DEBUG ? Context.BIND_DEBUG_UNBIND : 0);\r\n    context.bindService(new Intent(context, TrackRecordingService.class), serviceConnection, flags);\r\n}",
  "context" : "public void bind(@NonNull Context context) {\r\n    if (trackRecordingService != null) {\r\n        callback.onConnected(trackRecordingService, this);\r\n        return;\r\n    }\r\n    Log.i(TAG, \"Binding the service.\");\r\n    int flags = Context.BIND_AUTO_CREATE + (BuildConfig.DEBUG ? Context.BIND_DEBUG_UNBIND : 0);\r\n    context.bindService(new Intent(context, TrackRecordingService.class), serviceConnection, flags);\r\n}",
  "start_lineno" : "76",
  "methodName" : "bind",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/373",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\npublic void bind(@NonNull Context context) {\r\n    if (trackRecordingService != null) {\r\n        callback.onConnected(trackRecordingService, this);\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "    } catch (IllegalArgumentException e) {\r\n        // Means not bound to the service. OK to ignore.\r\n    }\r\n    setTrackRecordingService(null);\r\n}",
  "context" : "/**\r\n * Unbinds the service (but leave it running).\r\n */\r\n//TODO This is often called for one-shot operations and should be refactored as unbinding is required.\r\npublic void unbind(Context context) {\r\n    try {\r\n        context.unbindService(serviceConnection);\r\n    } catch (IllegalArgumentException e) {\r\n        // Means not bound to the service. OK to ignore.\r\n    }\r\n    setTrackRecordingService(null);\r\n}",
  "start_lineno" : "92",
  "methodName" : "unbind",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/374",
  "prompt" : "import android.content.Context\n/**\r\n * Unbinds the service (but leave it running).\r\n */\r\n//TODO This is often called for one-shot operations and should be refactored as unbinding is required.\r\npublic void unbind(Context context) {\r\n    try {\r\n        context.unbindService(serviceConnection);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "108",
  "ground_truth" : "    unbind(context);\r\n    stopService(context);\r\n}",
  "context" : "public void unbindAndStop(Context context) {\r\n    unbind(context);\r\n    stopService(context);\r\n}",
  "start_lineno" : "105",
  "methodName" : "unbindAndStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/375",
  "prompt" : "import android.content.Context\npublic void unbindAndStop(Context context) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "        callback.onConnected(value, this);\r\n    }\r\n}",
  "context" : "private void setTrackRecordingService(TrackRecordingService value) {\r\n    trackRecordingService = value;\r\n    if (value != null) {\r\n        callback.onConnected(value, this);\r\n    }\r\n}",
  "start_lineno" : "117",
  "methodName" : "setTrackRecordingService",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/376",
  "prompt" : "private void setTrackRecordingService(TrackRecordingService value) {\r\n    trackRecordingService = value;\r\n    if (value != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "    } else {\r\n        trackRecordingService.endCurrentTrack();\r\n    }\r\n    unbindAndStop(context);\r\n}",
  "context" : "public void stopRecording(@NonNull Context context) {\r\n    if (trackRecordingService == null) {\r\n        Log.e(TAG, \"TrackRecordingService not connected.\");\r\n    } else {\r\n        trackRecordingService.endCurrentTrack();\r\n    }\r\n    unbindAndStop(context);\r\n}",
  "start_lineno" : "124",
  "methodName" : "stopRecording",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/377",
  "prompt" : "import androidx.annotation.NonNull\nimport android.util.Log\nimport android.content.Context\npublic void stopRecording(@NonNull Context context) {\r\n    if (trackRecordingService == null) {\r\n        Log.e(TAG, \"TrackRecordingService not connected.\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordingServiceConnection.class.getSimpleName();\nprivate final Callback callback;\nprivate TrackRecordingService trackRecordingService;\nprivate final ServiceConnection serviceConnection = new ServiceConnection() {\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName className, IBinder service) {\r\n        Log.i(TAG, \"Connected to the service: \" + service);\r\n        try {\r\n            service.linkToDeath(deathRecipient, 0);\r\n        } catch (RemoteException e) {\r\n            Log.e(TAG, \"Failed to bind a death recipient.\", e);\r\n        }\r\n        setTrackRecordingService(((TrackRecordingService.Binder) service).getService());\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName className) {\r\n        Log.i(TAG, \"Disconnected from the service.\");\r\n        setTrackRecordingService(null);\r\n    }\r\n};\nprivate final DeathRecipient deathRecipient = () -> {\r\n    Log.d(TAG, \"Service died.\");\r\n    setTrackRecordingService(null);\r\n};",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "        connection.unbind(context);\r\n    };\r\n    new TrackRecordingServiceConnection(withUnbind).bind(context);\r\n    // ContextCompat.startForegroundService(context, new Intent(context, TrackRecordingService.class));\r\n}",
  "context" : "public static void execute(Context context, Callback callback) {\r\n    Callback withUnbind = (service, connection) -> {\r\n        callback.onConnected(service, connection);\r\n        connection.unbind(context);\r\n    };\r\n    new TrackRecordingServiceConnection(withUnbind).bind(context);\r\n    // ContextCompat.startForegroundService(context, new Intent(context, TrackRecordingService.class));\r\n}",
  "start_lineno" : "137",
  "methodName" : "execute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java",
  "task_id" : "OpenTracks/378",
  "prompt" : "import android.content.Context\npublic static void execute(Context context, Callback callback) {\r\n    Callback withUnbind = (service, connection) -> {\r\n        callback.onConnected(service, connection);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static final int NOTIFICATION_ID = 123;\nprivate static final String CHANNEL_ID = TrackRecordingServiceNotificationManager.class.getSimpleName();\nprivate final NotificationCompat.Builder notificationBuilder;\nprivate final NotificationManager notificationManager;\nprivate boolean previousLocationWasAccurate = true;\nprivate UnitSystem unitSystem = null;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    notificationBuilder.setSubText(content);\r\n    updateNotification();\r\n}",
  "context" : "void updateContent(String content) {\r\n    notificationBuilder.setSubText(content);\r\n    updateNotification();\r\n}",
  "start_lineno" : "75",
  "methodName" : "updateContent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceNotificationManager.java",
  "task_id" : "OpenTracks/379",
  "prompt" : "void updateContent(String content) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int NOTIFICATION_ID = 123;\nprivate static final String CHANNEL_ID = TrackRecordingServiceNotificationManager.class.getSimpleName();\nprivate final NotificationCompat.Builder notificationBuilder;\nprivate final NotificationManager notificationManager;\nprivate boolean previousLocationWasAccurate = true;\nprivate UnitSystem unitSystem = null;",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "        setUnitSystem(PreferencesUtils.getUnitSystem());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        setUnitSystem(PreferencesUtils.getUnitSystem());\r\n    }\r\n}",
  "start_lineno" : "139",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceNotificationManager.java",
  "task_id" : "OpenTracks/380",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private AutoCompleteTextView textView;\nprivate ImageView iconView;",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    // TODO PreferenceActivityTypeBinding\r\n    return R.layout.preference_activity_type;\r\n}",
  "context" : "@Override\r\npublic int getDialogLayoutResource() {\r\n    // TODO PreferenceActivityTypeBinding\r\n    return R.layout.preference_activity_type;\r\n}",
  "start_lineno" : "53",
  "methodName" : "getDialogLayoutResource",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java",
  "task_id" : "OpenTracks/381",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic int getDialogLayoutResource() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AutoCompleteTextView textView;\nprivate ImageView iconView;",
  "app_type" : "life",
  "end_lineno" : "71",
  "ground_truth" : "    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(PreferenceDialogFragmentCompat.ARG_KEY, preferenceKey);\r\n    dialog.setArguments(bundle);\r\n    return dialog;\r\n}",
  "context" : "static ActivityPreferenceDialog newInstance(String preferenceKey) {\r\n    ActivityTypePreference.ActivityPreferenceDialog dialog = new ActivityTypePreference.ActivityPreferenceDialog();\r\n    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(PreferenceDialogFragmentCompat.ARG_KEY, preferenceKey);\r\n    dialog.setArguments(bundle);\r\n    return dialog;\r\n}",
  "start_lineno" : "64",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java",
  "task_id" : "OpenTracks/382",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\nstatic ActivityPreferenceDialog newInstance(String preferenceKey) {\r\n    ActivityTypePreference.ActivityPreferenceDialog dialog = new ActivityTypePreference.ActivityPreferenceDialog();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AutoCompleteTextView textView;\nprivate ImageView iconView;",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "    String category = PreferencesUtils.getDefaultActivityTypeLocalized();\r\n    ChooseActivityTypeDialogFragment.showDialog(getActivity().getSupportFragmentManager(), getContext(), category);\r\n}",
  "context" : "private void showIconSelectDialog() {\r\n    String category = PreferencesUtils.getDefaultActivityTypeLocalized();\r\n    ChooseActivityTypeDialogFragment.showDialog(getActivity().getSupportFragmentManager(), getContext(), category);\r\n}",
  "start_lineno" : "103",
  "methodName" : "showIconSelectDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java",
  "task_id" : "OpenTracks/383",
  "prompt" : "private void showIconSelectDialog() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AutoCompleteTextView textView;\nprivate ImageView iconView;",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "            PreferencesUtils.setDefaultActivityLocalized(newDefaultActivity);\r\n            HackUtils.invalidatePreference(getPreference());\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onDialogClosed(boolean positiveResult) {\r\n    if (positiveResult) {\r\n        String newDefaultActivity = textView.getText().toString();\r\n        if (getPreference().callChangeListener(newDefaultActivity)) {\r\n            PreferencesUtils.setDefaultActivityLocalized(newDefaultActivity);\r\n            HackUtils.invalidatePreference(getPreference());\r\n        }\r\n    }\r\n}",
  "start_lineno" : "108",
  "methodName" : "onDialogClosed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java",
  "task_id" : "OpenTracks/384",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\npublic void onDialogClosed(boolean positiveResult) {\r\n    if (positiveResult) {\r\n        String newDefaultActivity = textView.getText().toString();\r\n        if (getPreference().callChangeListener(newDefaultActivity)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private AutoCompleteTextView textView;\nprivate ImageView iconView;",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "    textView.setText(getActivity().getString(activityType.getLocalizedStringId()));\r\n    textView.clearFocus();\r\n}",
  "context" : "public void updateUI(ActivityType activityType) {\r\n    updateIcon(activityType);\r\n    textView.setText(getActivity().getString(activityType.getLocalizedStringId()));\r\n    textView.clearFocus();\r\n}",
  "start_lineno" : "119",
  "methodName" : "updateUI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java",
  "task_id" : "OpenTracks/385",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\npublic void updateUI(ActivityType activityType) {\r\n    updateIcon(activityType);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_announcements_statistics_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_announcements_statistics_title);\r\n}",
  "start_lineno" : "17",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\AnnouncementsSettingsFragment.java",
  "task_id" : "OpenTracks/386",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "    ListPreference voiceFrequency = findPreference(getString(R.string.voice_announcement_frequency_key));\r\n    voiceFrequency.setEntries(PreferencesUtils.getVoiceAnnouncementFrequencyEntries());\r\n    ListPreference voiceDistance = findPreference(getString(R.string.voice_announcement_distance_key));\r\n    voiceDistance.setEntries(PreferencesUtils.getVoiceAnnouncementDistanceEntries());\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    ListPreference voiceFrequency = findPreference(getString(R.string.voice_announcement_frequency_key));\r\n    voiceFrequency.setEntries(PreferencesUtils.getVoiceAnnouncementFrequencyEntries());\r\n    ListPreference voiceDistance = findPreference(getString(R.string.voice_announcement_distance_key));\r\n    voiceDistance.setEntries(PreferencesUtils.getVoiceAnnouncementDistanceEntries());\r\n}",
  "start_lineno" : "23",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\AnnouncementsSettingsFragment.java",
  "task_id" : "OpenTracks/387",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Contains a unique list (by address) of devices.\r\n */\r\nprivate final List<Device> devices = new ArrayList<>();\n@NonNull\r\nprivate final String address;\nprivate String name;",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "            }\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "/**\r\n * @return Data changed?\r\n */\r\npublic boolean add(String address, String name) {\r\n    Device device = new Device(address, name);\r\n    if (!devices.contains(device)) {\r\n        devices.add(device);\r\n        return true;\r\n    } else {\r\n        for (Device currentDevice : devices) {\r\n            if (currentDevice.address.equals(address)) {\r\n                currentDevice.name = name;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "60",
  "methodName" : "add",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeAdapter.java",
  "task_id" : "OpenTracks/388",
  "prompt" : "/**\r\n * @return Data changed?\r\n */\r\npublic boolean add(String address, String name) {\r\n    Device device = new Device(address, name);\r\n    if (!devices.contains(device)) {\r\n        devices.add(device);\r\n        return true;\r\n    } else {\r\n        for (Device currentDevice : devices) {\r\n            if (currentDevice.address.equals(address)) {\r\n                currentDevice.name = name;\r\n                return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Contains a unique list (by address) of devices.\r\n */\r\nprivate final List<Device> devices = new ArrayList<>();\n@NonNull\r\nprivate final String address;\nprivate String name;",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    if (dataSetChanged)\r\n        notifyDataSetChanged();\r\n}",
  "context" : "public void addAll(List<BluetoothDevice> bluetoothDevices) {\r\n    boolean dataSetChanged = bluetoothDevices.stream().anyMatch(bluetoothDevice -> add(bluetoothDevice.getAddress(), bluetoothDevice.getName()));\r\n    if (dataSetChanged)\r\n        notifyDataSetChanged();\r\n}",
  "start_lineno" : "76",
  "methodName" : "addAll",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeAdapter.java",
  "task_id" : "OpenTracks/389",
  "prompt" : "public void addAll(List<BluetoothDevice> bluetoothDevices) {\r\n    boolean dataSetChanged = bluetoothDevices.stream().anyMatch(bluetoothDevice -> add(bluetoothDevice.getAddress(), bluetoothDevice.getName()));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "/**\r\n * Contains a unique list (by address) of devices.\r\n */\r\nprivate final List<Device> devices = new ArrayList<>();\n@NonNull\r\nprivate final String address;\nprivate String name;",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        return true;\r\n    if (!(o instanceof Device device))\r\n        return false;\r\n    return address.equals(device.address);\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof Device device))\r\n        return false;\r\n    return address.equals(device.address);\r\n}",
  "start_lineno" : "107",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeAdapter.java",
  "task_id" : "OpenTracks/390",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "    boolean hasInternalSensor = pressureSensor != null;\r\n    return BluetoothLeSensorPreference.BluetoothLeSensorPreferenceDialog.newInstance(getKey(), List.of(BluetoothHandlerBarometricPressure.BAROMETRIC_PRESSURE), hasInternalSensor);\r\n}",
  "context" : "@Override\r\npublic PreferenceDialogFragmentCompat createInstance() {\r\n    SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);\r\n    Sensor pressureSensor = sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE);\r\n    boolean hasInternalSensor = pressureSensor != null;\r\n    return BluetoothLeSensorPreference.BluetoothLeSensorPreferenceDialog.newInstance(getKey(), List.of(BluetoothHandlerBarometricPressure.BAROMETRIC_PRESSURE), hasInternalSensor);\r\n}",
  "start_lineno" : "32",
  "methodName" : "createInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLePressurePreference.java",
  "task_id" : "OpenTracks/391",
  "prompt" : "import androidx.preference.PreferenceDialogFragmentCompat\nimport android.hardware.SensorManager\nimport android.hardware.Sensor\nimport android.content.Context\n@Override\r\npublic PreferenceDialogFragmentCompat createInstance() {\r\n    SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);\r\n    Sensor pressureSensor = sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        if (changed) {\r\n            notifyChanged();\r\n        }\r\n    }\r\n}",
  "context" : "private void setValue(String value) {\r\n    final boolean changed = !TextUtils.equals(this.value, value);\r\n    if (changed || !valueSet) {\r\n        this.value = value;\r\n        valueSet = true;\r\n        persistString(value);\r\n        if (changed) {\r\n            notifyChanged();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "71",
  "methodName" : "setValue",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/392",
  "prompt" : "import android.text.TextUtils\nprivate void setValue(String value) {\r\n    final boolean changed = !TextUtils.equals(this.value, value);\r\n    if (changed || !valueSet) {\r\n        this.value = value;\r\n        valueSet = true;\r\n        persistString(value);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n    onBatchScanResults(List.of(result));\r\n}",
  "context" : "@Override\r\npublic void onScanResult(int callbackType, ScanResult result) {\r\n    Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n    onBatchScanResults(List.of(result));\r\n}",
  "start_lineno" : "121",
  "methodName" : "onScanResult",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/393",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.bluetooth.le.ScanResult\n@Override\r\npublic void onScanResult(int callbackType, ScanResult result) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "    Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n    dismiss();\r\n}",
  "context" : "@Override\r\npublic void onScanFailed(int errorCode) {\r\n    super.onScanFailed(errorCode);\r\n    Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n    Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n    dismiss();\r\n}",
  "start_lineno" : "132",
  "methodName" : "onScanFailed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/394",
  "prompt" : "import android.util.Log\n@Override\r\npublic void onScanFailed(int errorCode) {\r\n    super.onScanFailed(errorCode);\r\n    Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "    b.putParcelableArrayList(ARG_BLE_SERVICE_UUIDS, new ArrayList<>(sensorUUIDs.stream().map(ServiceMeasurementUUID::serviceUUID).map(ParcelUuid::new).collect(Collectors.toList())));\r\n    b.putBoolean(ARG_INCLUDE_INTERNAL, includeInternalSensor);\r\n    fragment.setArguments(b);\r\n    return fragment;\r\n}",
  "context" : "public static BluetoothLeSensorPreferenceDialog newInstance(String preferenceKey, List<ServiceMeasurementUUID> sensorUUIDs, boolean includeInternalSensor) {\r\n    final BluetoothLeSensorPreferenceDialog fragment = new BluetoothLeSensorPreferenceDialog();\r\n    final Bundle b = new Bundle(3);\r\n    b.putString(ARG_KEY, preferenceKey);\r\n    b.putParcelableArrayList(ARG_BLE_SERVICE_UUIDS, new ArrayList<>(sensorUUIDs.stream().map(ServiceMeasurementUUID::serviceUUID).map(ParcelUuid::new).collect(Collectors.toList())));\r\n    b.putBoolean(ARG_INCLUDE_INTERNAL, includeInternalSensor);\r\n    fragment.setArguments(b);\r\n    return fragment;\r\n}",
  "start_lineno" : "145",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/395",
  "prompt" : "import de.dennisguse.opentracks.sensors.ServiceMeasurementUUID\nimport de.dennisguse.opentracks.R\nimport java.util.List\nimport android.os.Bundle\npublic static BluetoothLeSensorPreferenceDialog newInstance(String preferenceKey, List<ServiceMeasurementUUID> sensorUUIDs, boolean includeInternalSensor) {\r\n    final BluetoothLeSensorPreferenceDialog fragment = new BluetoothLeSensorPreferenceDialog();\r\n    final Bundle b = new Bundle(3);\r\n    b.putString(ARG_KEY, preferenceKey);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "252",
  "ground_truth" : "        dialog.dismiss();\r\n    });\r\n    builder.setIcon(bluetoothIcon);\r\n    builder.setPositiveButton(null, null);\r\n}",
  "context" : "//Behave like ListPreferenceDialogFragmentCompat, but uses a custom listAdapter.\r\n@Override\r\nprotected void onPrepareDialogBuilder(AlertDialog.Builder builder) {\r\n    super.onPrepareDialogBuilder(builder);\r\n    builder.setSingleChoiceItems(listAdapter, selectedEntryIndex, (dialog, which) -> {\r\n        selectedEntryIndex = which;\r\n        BluetoothLeSensorPreferenceDialog.this.onClick(dialog, DialogInterface.BUTTON_POSITIVE);\r\n        dialog.dismiss();\r\n    });\r\n    builder.setIcon(bluetoothIcon);\r\n    builder.setPositiveButton(null, null);\r\n}",
  "start_lineno" : "237",
  "methodName" : "onPrepareDialogBuilder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/396",
  "prompt" : "import java.util.List\nimport androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.appcompat.app.AlertDialog\nimport android.content.DialogInterface\n//Behave like ListPreferenceDialogFragmentCompat, but uses a custom listAdapter.\r\n@Override\r\nprotected void onPrepareDialogBuilder(AlertDialog.Builder builder) {\r\n    super.onPrepareDialogBuilder(builder);\r\n    builder.setSingleChoiceItems(listAdapter, selectedEntryIndex, (dialog, which) -> {\r\n        selectedEntryIndex = which;\r\n        BluetoothLeSensorPreferenceDialog.this.onClick(dialog, DialogInterface.BUTTON_POSITIVE);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "267",
  "ground_truth" : "        if (preference.callChangeListener(value)) {\r\n            preference.setValue(value);\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onDialogClosed(boolean positiveResult) {\r\n    if (scanner != null) {\r\n        scanner.stopScan(scanCallback);\r\n    }\r\n    if (positiveResult && selectedEntryIndex >= 0) {\r\n        String value = listAdapter.get(selectedEntryIndex).getAddress();\r\n        BluetoothLeSensorPreference preference = (BluetoothLeSensorPreference) getPreference();\r\n        if (preference.callChangeListener(value)) {\r\n            preference.setValue(value);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "254",
  "methodName" : "onDialogClosed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/397",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onDialogClosed(boolean positiveResult) {\r\n    if (scanner != null) {\r\n        scanner.stopScan(scanCallback);\r\n    }\r\n    if (positiveResult && selectedEntryIndex >= 0) {\r\n        String value = listAdapter.get(selectedEntryIndex).getAddress();\r\n        BluetoothLeSensorPreference preference = (BluetoothLeSensorPreference) getPreference();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = BluetoothLeSensorPreference.class.getSimpleName();\nprivate static final String ARG_BLE_SERVICE_UUIDS = \"bluetoothUUID\";\nprivate static final String ARG_INCLUDE_INTERNAL = \"supportsInternal\";\nprivate static final int DEVICE_NONE_RESOURCEID = R.string.value_none;\nprivate static final int SENSOR_INTERNAL_RESOURCEID = R.string.value_internal_sensor;\nprivate String value;\nprivate boolean valueSet = false;\nprivate AnimatedVectorDrawableCompat bluetoothIcon;\nprivate int selectedEntryIndex;\nprivate final BluetoothLeAdapter listAdapter = new BluetoothLeAdapter();\nprivate BluetoothLeScanner scanner = null;\nprivate final ScanCallback scanCallback = new ScanCallback() {\r\n\r\n    @Override\r\n    public void onScanResult(int callbackType, ScanResult result) {\r\n        Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n        onBatchScanResults(List.of(result));\r\n    }\r\n\r\n    @Override\r\n    public void onBatchScanResults(List<ScanResult> results) {\r\n        listAdapter.addAll(results.stream().map(ScanResult::getDevice).collect(Collectors.toList()));\r\n    }\r\n\r\n    @Override\r\n    public void onScanFailed(int errorCode) {\r\n        super.onScanFailed(errorCode);\r\n        Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r\n        Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n        dismiss();\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "274",
  "ground_truth" : "    bluetoothIcon = null;\r\n    scanner = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    bluetoothIcon = null;\r\n    scanner = null;\r\n}",
  "start_lineno" : "269",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java",
  "task_id" : "OpenTracks/398",
  "prompt" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        getActivity().runOnUiThread(this::updateUnits);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_defaults_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_defaults_title);\r\n}",
  "start_lineno" : "31",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java",
  "task_id" : "OpenTracks/399",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        getActivity().runOnUiThread(this::updateUnits);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    updateUnits();\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    updateUnits();\r\n}",
  "start_lineno" : "37",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java",
  "task_id" : "OpenTracks/400",
  "prompt" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        getActivity().runOnUiThread(this::updateUnits);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "44",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java",
  "task_id" : "OpenTracks/401",
  "prompt" : "@Override\r\npublic void onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        getActivity().runOnUiThread(this::updateUnits);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        activityPreferenceDialog.updateUI(activityType);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    if (activityPreferenceDialog != null) {\r\n        activityPreferenceDialog.updateUI(activityType);\r\n    }\r\n}",
  "start_lineno" : "86",
  "methodName" : "onChooseActivityTypeDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java",
  "task_id" : "OpenTracks/402",
  "prompt" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    if (activityPreferenceDialog != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_gps_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_gps_title);\r\n}",
  "start_lineno" : "60",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\GpsSettingsFragment.java",
  "task_id" : "OpenTracks/403",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "    preference.setVisible(!isEnabled);\r\n    preference.setVisible(isEnabled);\r\n}",
  "context" : "/**\r\n * Triggers a redraw of the summary of a preference if it was set programmatically.\r\n * Need to trigger androidx.preference.preferences.notifyChanged() to trigger a redraw, but method is protected.\r\n * This workaround also works when this preference has not changed, but it's entries (see R.string.stats_rate_key).\r\n * TODO\r\n */\r\npublic static void invalidatePreference(@NonNull Preference preference) {\r\n    boolean isEnabled = preference.isEnabled();\r\n    preference.setVisible(!isEnabled);\r\n    preference.setVisible(isEnabled);\r\n}",
  "start_lineno" : "17",
  "methodName" : "invalidatePreference",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\HackUtils.java",
  "task_id" : "OpenTracks/404",
  "prompt" : "import androidx.preference.Preference\nimport androidx.annotation.NonNull\n/**\r\n * Triggers a redraw of the summary of a preference if it was set programmatically.\r\n * Need to trigger androidx.preference.preferences.notifyChanged() to trigger a redraw, but method is protected.\r\n * This workaround also works when this preference has not changed, but it's entries (see R.string.stats_rate_key).\r\n * TODO\r\n */\r\npublic static void invalidatePreference(@NonNull Preference preference) {\r\n    boolean isEnabled = preference.isEnabled();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportExportSettingsFragment.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "    setExportDirectorySummary();\r\n    setFilenameTemplate();\r\n}",
  "context" : "@Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n    addPreferencesFromResource(R.xml.settings_import_export);\r\n    setExportTrackFileFormatOptions();\r\n    setExportDirectorySummary();\r\n    setFilenameTemplate();\r\n}",
  "start_lineno" : "23",
  "methodName" : "onCreatePreferences",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ImportExportSettingsFragment.java",
  "task_id" : "OpenTracks/405",
  "prompt" : "import de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.R\nimport androidx.preference.Preference\nimport android.os.Bundle\n@Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n    addPreferencesFromResource(R.xml.settings_import_export);\r\n    setExportTrackFileFormatOptions();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportExportSettingsFragment.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_import_export_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_import_export_title);\r\n}",
  "start_lineno" : "32",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ImportExportSettingsFragment.java",
  "task_id" : "OpenTracks/406",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ImportExportSettingsFragment.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "    Preference instantExportEnabledPreference = findPreference(getString(R.string.post_workout_export_enabled_key));\r\n    instantExportEnabledPreference.setEnabled(PreferencesUtils.isDefaultExportDirectoryUri());\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    setExportDirectorySummary();\r\n    Preference instantExportEnabledPreference = findPreference(getString(R.string.post_workout_export_enabled_key));\r\n    instantExportEnabledPreference.setEnabled(PreferencesUtils.isDefaultExportDirectoryUri());\r\n}",
  "start_lineno" : "38",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ImportExportSettingsFragment.java",
  "task_id" : "OpenTracks/407",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    setExportDirectorySummary();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "        dialogFragment.show(getParentFragmentManager(), getClass().getSimpleName());\r\n        return;\r\n    }\r\n    super.onDisplayPreferenceDialog(preference);\r\n}",
  "context" : "@Override\r\npublic void onDisplayPreferenceDialog(@NonNull Preference preference) {\r\n    DialogFragment dialogFragment = null;\r\n    if (preference instanceof ResetDialogPreference) {\r\n        dialogFragment = ResetDialogPreference.ResetPreferenceDialog.newInstance(preference.getKey());\r\n    }\r\n    if (dialogFragment != null) {\r\n        dialogFragment.setTargetFragment(this, 0);\r\n        dialogFragment.show(getParentFragmentManager(), getClass().getSimpleName());\r\n        return;\r\n    }\r\n    super.onDisplayPreferenceDialog(preference);\r\n}",
  "start_lineno" : "54",
  "methodName" : "onDisplayPreferenceDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\MainSettingsFragment.java",
  "task_id" : "OpenTracks/408",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.preference.Preference\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\n@Override\r\npublic void onDisplayPreferenceDialog(@NonNull Preference preference) {\r\n    DialogFragment dialogFragment = null;\r\n    if (preference instanceof ResetDialogPreference) {\r\n        dialogFragment = ResetDialogPreference.ResetPreferenceDialog.newInstance(preference.getKey());\r\n    }\r\n    if (dialogFragment != null) {\r\n        dialogFragment.setTargetFragment(this, 0);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final int version;",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        onUpgrade();\r\n    } else if (version < lastVersion) {\r\n        onDowngrade();\r\n    }\r\n}",
  "context" : "void check() {\r\n    int lastVersion = PreferencesUtils.getInt(R.string.prefs_last_version_key, 0);\r\n    if (version > lastVersion) {\r\n        onUpgrade();\r\n    } else if (version < lastVersion) {\r\n        onDowngrade();\r\n    }\r\n}",
  "start_lineno" : "22",
  "methodName" : "check",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesOpenHelper.java",
  "task_id" : "OpenTracks/409",
  "prompt" : "import de.dennisguse.opentracks.R\nvoid check() {\r\n    int lastVersion = PreferencesUtils.getInt(R.string.prefs_last_version_key, 0);\r\n    if (version > lastVersion) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final int version;",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "            default ->\r\n                throw new RuntimeException(\"Not implemented: upgrade to \" + version);\r\n        }\r\n    }\r\n}",
  "context" : "private void onUpgrade() {\r\n    PreferencesUtils.setInt(R.string.prefs_last_version_key, version);\r\n    for (int i = 1; i <= version; i++) {\r\n        switch(i) {\r\n            case 1 ->\r\n                upgradeFrom0to1();\r\n            case 2 ->\r\n                upgradeFrom1to2();\r\n            default ->\r\n                throw new RuntimeException(\"Not implemented: upgrade to \" + version);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "31",
  "methodName" : "onUpgrade",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesOpenHelper.java",
  "task_id" : "OpenTracks/410",
  "prompt" : "import de.dennisguse.opentracks.R\nprivate void onUpgrade() {\r\n    PreferencesUtils.setInt(R.string.prefs_last_version_key, version);\r\n    for (int i = 1; i <= version; i++) {\r\n        switch(i) {\r\n            case 1 ->\r\n                upgradeFrom0to1();\r\n            case 2 ->\r\n                upgradeFrom1to2();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final int version;",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        PreferencesUtils.setString(R.string.stats_custom_layouts_key, PreferencesUtils.buildDefaultLayout());\r\n    }\r\n}",
  "context" : "private void upgradeFrom0to1() {\r\n    String preferenceValue = PreferencesUtils.getString(R.string.stats_custom_layouts_key, \"\");\r\n    if (preferenceValue.isEmpty()) {\r\n        PreferencesUtils.setString(R.string.stats_custom_layouts_key, PreferencesUtils.buildDefaultLayout());\r\n    }\r\n}",
  "start_lineno" : "42",
  "methodName" : "upgradeFrom0to1",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesOpenHelper.java",
  "task_id" : "OpenTracks/411",
  "prompt" : "import de.dennisguse.opentracks.R\nprivate void upgradeFrom0to1() {\r\n    String preferenceValue = PreferencesUtils.getString(R.string.stats_custom_layouts_key, \"\");\r\n    if (preferenceValue.isEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "    PreferencesUtils.sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n    PreferencesOpenHelper.newInstance(PREFERENCES_VERSION).check();\r\n}",
  "context" : "/**\r\n * Must be called during application startup.\r\n */\r\npublic static void initPreferences(final Context context) {\r\n    PreferencesUtils.resources = context.getResources();\r\n    PreferencesUtils.sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n    PreferencesOpenHelper.newInstance(PREFERENCES_VERSION).check();\r\n}",
  "start_lineno" : "78",
  "methodName" : "initPreferences",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/412",
  "prompt" : "/**\r\n * Must be called during application startup.\r\n */\r\npublic static void initPreferences(final Context context) {\r\n    PreferencesUtils.resources = context.getResources();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "    sharedPreferences.registerOnSharedPreferenceChangeListener(changeListener);\r\n    changeListener.onSharedPreferenceChanged(sharedPreferences, null);\r\n}",
  "context" : "public static void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener changeListener) {\r\n    sharedPreferences.registerOnSharedPreferenceChangeListener(changeListener);\r\n    changeListener.onSharedPreferenceChanged(sharedPreferences, null);\r\n}",
  "start_lineno" : "85",
  "methodName" : "registerOnSharedPreferenceChangeListener",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/413",
  "prompt" : "public static void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener changeListener) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "public static boolean isKey(int[] keyIds, String key) {\r\n    for (int keyId : keyIds) {\r\n        if (isKey(keyId, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "122",
  "methodName" : "isKey",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/414",
  "prompt" : "public static boolean isKey(int[] keyIds, String key) {\r\n    for (int keyId : keyIds) {\r\n        if (isKey(keyId, key)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        return Integer.parseInt(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "context" : "static int getInt(int keyId, int defaultValue) {\r\n    try {\r\n        return sharedPreferences.getInt(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r\n        return Integer.parseInt(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "start_lineno" : "135",
  "methodName" : "getInt",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/415",
  "prompt" : "static int getInt(int keyId, int defaultValue) {\r\n    try {\r\n        return sharedPreferences.getInt(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "165",
  "ground_truth" : "        return Float.parseFloat(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "context" : "private static float getFloat(int keyId, float defaultValue) {\r\n    try {\r\n        return sharedPreferences.getFloat(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r\n        return Float.parseFloat(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "start_lineno" : "151",
  "methodName" : "getFloat",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/416",
  "prompt" : "private static float getFloat(int keyId, float defaultValue) {\r\n    try {\r\n        return sharedPreferences.getFloat(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    editor.putString(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "context" : "@VisibleForTesting\r\npublic static void setString(int keyId, String value) {\r\n    Editor editor = sharedPreferences.edit();\r\n    editor.putString(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "start_lineno" : "171",
  "methodName" : "setString",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/417",
  "prompt" : "@VisibleForTesting\r\npublic static void setString(int keyId, String value) {\r\n    Editor editor = sharedPreferences.edit();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "188",
  "ground_truth" : "    editor.putBoolean(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "context" : "@VisibleForTesting\r\npublic static void setBoolean(int keyId, Boolean value) {\r\n    Editor editor = sharedPreferences.edit();\r\n    editor.putBoolean(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "start_lineno" : "183",
  "methodName" : "setBoolean",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/418",
  "prompt" : "@VisibleForTesting\r\npublic static void setBoolean(int keyId, Boolean value) {\r\n    Editor editor = sharedPreferences.edit();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "194",
  "ground_truth" : "    editor.putInt(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "context" : "static void setInt(int keyId, int value) {\r\n    Editor editor = sharedPreferences.edit();\r\n    editor.putInt(getKey(keyId), value);\r\n    editor.apply();\r\n}",
  "start_lineno" : "190",
  "methodName" : "setInt",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/419",
  "prompt" : "static void setInt(int keyId, int value) {\r\n    Editor editor = sharedPreferences.edit();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "220",
  "ground_truth" : "    return Arrays.stream(UnitSystem.values()).filter(d -> VALUE.equals(resources.getString(d.getPreferenceId(), STATS_UNIT_DEFAULT))).findFirst().orElse(//TODO This AGAIN defines the default\r\n    UnitSystem.defaultUnitSystem());\r\n}",
  "context" : "public static UnitSystem getUnitSystem() {\r\n    final String STATS_UNIT_DEFAULT = resources.getString(R.string.stats_units_default);\r\n    final String VALUE = getString(R.string.stats_units_key, STATS_UNIT_DEFAULT);\r\n    return Arrays.stream(UnitSystem.values()).filter(d -> VALUE.equals(resources.getString(d.getPreferenceId(), STATS_UNIT_DEFAULT))).findFirst().orElse(//TODO This AGAIN defines the default\r\n    UnitSystem.defaultUnitSystem());\r\n}",
  "start_lineno" : "212",
  "methodName" : "getUnitSystem",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/420",
  "prompt" : "public static UnitSystem getUnitSystem() {\r\n    final String STATS_UNIT_DEFAULT = resources.getString(R.string.stats_units_default);\r\n    final String VALUE = getString(R.string.stats_units_key, STATS_UNIT_DEFAULT);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "235",
  "ground_truth" : "        } else {\r\n            setUnit(UnitSystem.IMPERIAL_FEET);\r\n        }\r\n    }\r\n}",
  "context" : "//TODO Check if actually needed or can be superseeded by a flexible default in getUnit()\r\npublic static void applyDefaultUnit() {\r\n    if (getString(R.string.stats_units_key, \"\").equals(\"\")) {\r\n        if (!Locale.US.equals(Locale.getDefault())) {\r\n            setUnit(UnitSystem.METRIC);\r\n        } else {\r\n            setUnit(UnitSystem.IMPERIAL_FEET);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "227",
  "methodName" : "applyDefaultUnit",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/421",
  "prompt" : "//TODO Check if actually needed or can be superseeded by a flexible default in getUnit()\r\npublic static void applyDefaultUnit() {\r\n    if (getString(R.string.stats_units_key, \"\").equals(\"\")) {\r\n        if (!Locale.US.equals(Locale.getDefault())) {\r\n            setUnit(UnitSystem.METRIC);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "246",
  "ground_truth" : "    if (currentStatsRate.equals(getString(R.string.stats_rate_speed_or_pace_default, STATS_RATE_DEFAULT))) {\r\n        return ActivityType.findByLocalizedString(resources, activityTypeLocalized).isShowSpeedPreferred();\r\n    }\r\n    return currentStatsRate.equals(resources.getString(R.string.stats_rate_speed));\r\n}",
  "context" : "public static boolean isReportSpeed(String activityTypeLocalized) {\r\n    final String STATS_RATE_DEFAULT = resources.getString(R.string.stats_rate_default);\r\n    String currentStatsRate = getString(R.string.stats_rate_key, STATS_RATE_DEFAULT);\r\n    if (currentStatsRate.equals(getString(R.string.stats_rate_speed_or_pace_default, STATS_RATE_DEFAULT))) {\r\n        return ActivityType.findByLocalizedString(resources, activityTypeLocalized).isShowSpeedPreferred();\r\n    }\r\n    return currentStatsRate.equals(resources.getString(R.string.stats_rate_speed));\r\n}",
  "start_lineno" : "237",
  "methodName" : "isReportSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/422",
  "prompt" : "public static boolean isReportSpeed(String activityTypeLocalized) {\r\n    final String STATS_RATE_DEFAULT = resources.getString(R.string.stats_rate_default);\r\n    String currentStatsRate = getString(R.string.stats_rate_key, STATS_RATE_DEFAULT);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "282",
  "ground_truth" : "    final int DEFAULT = Integer.parseInt(resources.getString(R.string.settings_sensor_bluetooth_cycling_speed_wheel_circumference_default));\r\n    return Distance.ofMM(getInt(R.string.settings_sensor_bluetooth_cycling_speed_wheel_circumference_key, DEFAULT));\r\n}",
  "context" : "public static Distance getWheelCircumference() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.settings_sensor_bluetooth_cycling_speed_wheel_circumference_default));\r\n    return Distance.ofMM(getInt(R.string.settings_sensor_bluetooth_cycling_speed_wheel_circumference_key, DEFAULT));\r\n}",
  "start_lineno" : "279",
  "methodName" : "getWheelCircumference",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/423",
  "prompt" : "public static Distance getWheelCircumference() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "295",
  "ground_truth" : "    final boolean DEFAULT = resources.getBoolean(R.bool.settings_sensor_bluetooth_service_filter_enabled_default);\r\n    return getBoolean(R.string.settings_sensor_bluetooth_service_filter_enabled_key, DEFAULT);\r\n}",
  "context" : "public static boolean getBluetoothFilterEnabled() {\r\n    final boolean DEFAULT = resources.getBoolean(R.bool.settings_sensor_bluetooth_service_filter_enabled_default);\r\n    return getBoolean(R.string.settings_sensor_bluetooth_service_filter_enabled_key, DEFAULT);\r\n}",
  "start_lineno" : "292",
  "methodName" : "getBluetoothFilterEnabled",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/424",
  "prompt" : "public static boolean getBluetoothFilterEnabled() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "301",
  "ground_truth" : "    int value = getInt(R.string.settings_sensor_heart_rate_max_key, DEFAULT);\r\n    return new HeartRateZones(HeartRate.of(value));\r\n}",
  "context" : "public static HeartRateZones getHeartRateZones() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.settings_sensor_heart_rate_max_default));\r\n    int value = getInt(R.string.settings_sensor_heart_rate_max_key, DEFAULT);\r\n    return new HeartRateZones(HeartRate.of(value));\r\n}",
  "start_lineno" : "297",
  "methodName" : "getHeartRateZones",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/425",
  "prompt" : "public static HeartRateZones getHeartRateZones() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.settings_sensor_heart_rate_max_default));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "306",
  "ground_truth" : "    final boolean STATS_SHOW_ON_LOCKSCREEN_DEFAULT = resources.getBoolean(R.bool.stats_show_on_lockscreen_while_recording_default);\r\n    return getBoolean(R.string.stats_show_on_lockscreen_while_recording_key, STATS_SHOW_ON_LOCKSCREEN_DEFAULT);\r\n}",
  "context" : "public static boolean shouldShowStatsOnLockscreen() {\r\n    final boolean STATS_SHOW_ON_LOCKSCREEN_DEFAULT = resources.getBoolean(R.bool.stats_show_on_lockscreen_while_recording_default);\r\n    return getBoolean(R.string.stats_show_on_lockscreen_while_recording_key, STATS_SHOW_ON_LOCKSCREEN_DEFAULT);\r\n}",
  "start_lineno" : "303",
  "methodName" : "shouldShowStatsOnLockscreen",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/426",
  "prompt" : "public static boolean shouldShowStatsOnLockscreen() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "311",
  "ground_truth" : "    final boolean DEFAULT = resources.getBoolean(R.bool.stats_keep_screen_on_while_recording_default);\r\n    return getBoolean(R.string.stats_keep_screen_on_while_recording_key, DEFAULT);\r\n}",
  "context" : "public static boolean shouldKeepScreenOn() {\r\n    final boolean DEFAULT = resources.getBoolean(R.bool.stats_keep_screen_on_while_recording_default);\r\n    return getBoolean(R.string.stats_keep_screen_on_while_recording_key, DEFAULT);\r\n}",
  "start_lineno" : "308",
  "methodName" : "shouldKeepScreenOn",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/427",
  "prompt" : "public static boolean shouldKeepScreenOn() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "316",
  "ground_truth" : "    final boolean DEFAULT = resources.getBoolean(R.bool.stats_fullscreen_while_recording_default);\r\n    return getBoolean(R.string.stats_fullscreen_while_recording_key, DEFAULT);\r\n}",
  "context" : "public static boolean shouldUseFullscreen() {\r\n    final boolean DEFAULT = resources.getBoolean(R.bool.stats_fullscreen_while_recording_default);\r\n    return getBoolean(R.string.stats_fullscreen_while_recording_key, DEFAULT);\r\n}",
  "start_lineno" : "313",
  "methodName" : "shouldUseFullscreen",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/428",
  "prompt" : "public static boolean shouldUseFullscreen() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "321",
  "ground_truth" : "    final boolean DEFAULT = resources.getBoolean(R.bool.settings_ui_dynamic_colors_default);\r\n    return getBoolean(R.string.settings_ui_dynamic_colors_key, DEFAULT);\r\n}",
  "context" : "public static boolean shouldUseDynamicColors() {\r\n    final boolean DEFAULT = resources.getBoolean(R.bool.settings_ui_dynamic_colors_default);\r\n    return getBoolean(R.string.settings_ui_dynamic_colors_key, DEFAULT);\r\n}",
  "start_lineno" : "318",
  "methodName" : "shouldUseDynamicColors",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/429",
  "prompt" : "public static boolean shouldUseDynamicColors() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "326",
  "ground_truth" : "    final boolean DEFAULT = resources.getBoolean(R.bool.voice_on_device_speaker_default);\r\n    return getBoolean(R.string.voice_on_device_speaker_key, DEFAULT);\r\n}",
  "context" : "public static boolean shouldVoiceAnnouncementOnDeviceSpeaker() {\r\n    final boolean DEFAULT = resources.getBoolean(R.bool.voice_on_device_speaker_default);\r\n    return getBoolean(R.string.voice_on_device_speaker_key, DEFAULT);\r\n}",
  "start_lineno" : "323",
  "methodName" : "shouldVoiceAnnouncementOnDeviceSpeaker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/430",
  "prompt" : "public static boolean shouldVoiceAnnouncementOnDeviceSpeaker() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "336",
  "ground_truth" : "    int value = getInt(R.string.voice_announcement_frequency_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}",
  "context" : "public static Duration getVoiceAnnouncementFrequency() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.voice_announcement_frequency_default));\r\n    int value = getInt(R.string.voice_announcement_frequency_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}",
  "start_lineno" : "332",
  "methodName" : "getVoiceAnnouncementFrequency",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/431",
  "prompt" : "public static Duration getVoiceAnnouncementFrequency() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.voice_announcement_frequency_default));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "359",
  "ground_truth" : "    float value = getFloat(R.string.voice_announcement_distance_key, DEFAULT);\r\n    return Distance.one(getUnitSystem()).multipliedBy(value);\r\n}",
  "context" : "/**\r\n * @return Result depends on getUnitSystem\r\n */\r\npublic static Distance getVoiceAnnouncementDistance() {\r\n    final float DEFAULT = Integer.parseInt(resources.getString(R.string.voice_announcement_distance_default));\r\n    float value = getFloat(R.string.voice_announcement_distance_key, DEFAULT);\r\n    return Distance.one(getUnitSystem()).multipliedBy(value);\r\n}",
  "start_lineno" : "355",
  "methodName" : "getVoiceAnnouncementDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/432",
  "prompt" : "/**\r\n * @return Result depends on getUnitSystem\r\n */\r\npublic static Distance getVoiceAnnouncementDistance() {\r\n    final float DEFAULT = Integer.parseInt(resources.getString(R.string.voice_announcement_distance_default));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "387",
  "ground_truth" : "    final float DEFAULT = Float.parseFloat(resources.getString(R.string.voice_speed_rate_default));\r\n    return getFloat(R.string.voice_speed_rate_key, DEFAULT);\r\n}",
  "context" : "public static float getVoiceSpeedRate() {\r\n    final float DEFAULT = Float.parseFloat(resources.getString(R.string.voice_speed_rate_default));\r\n    return getFloat(R.string.voice_speed_rate_key, DEFAULT);\r\n}",
  "start_lineno" : "384",
  "methodName" : "getVoiceSpeedRate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/433",
  "prompt" : "public static float getVoiceSpeedRate() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "497",
  "ground_truth" : "    final int MAX_RECORDING_DISTANCE = Integer.parseInt(resources.getString(R.string.max_recording_distance_default));\r\n    return Distance.of(getInt(R.string.max_recording_distance_key, MAX_RECORDING_DISTANCE));\r\n}",
  "context" : "public static Distance getMaxRecordingDistance() {\r\n    final int MAX_RECORDING_DISTANCE = Integer.parseInt(resources.getString(R.string.max_recording_distance_default));\r\n    return Distance.of(getInt(R.string.max_recording_distance_key, MAX_RECORDING_DISTANCE));\r\n}",
  "start_lineno" : "494",
  "methodName" : "getMaxRecordingDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/434",
  "prompt" : "public static Distance getMaxRecordingDistance() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "541",
  "ground_truth" : "    final Duration MIN_SAMPLING_INTERVAL = getMinSamplingIntervalDefault();\r\n    return Duration.ofSeconds(getInt(R.string.min_sampling_interval_key, (int) MIN_SAMPLING_INTERVAL.getSeconds()));\r\n}",
  "context" : "public static Duration getMinSamplingInterval() {\r\n    final Duration MIN_SAMPLING_INTERVAL = getMinSamplingIntervalDefault();\r\n    return Duration.ofSeconds(getInt(R.string.min_sampling_interval_key, (int) MIN_SAMPLING_INTERVAL.getSeconds()));\r\n}",
  "start_lineno" : "538",
  "methodName" : "getMinSamplingInterval",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/435",
  "prompt" : "public static Duration getMinSamplingInterval() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "567",
  "ground_truth" : "    final int RECORDING_GPS_ACCURACY = Integer.parseInt(resources.getString(R.string.recording_gps_accuracy_default));\r\n    return Distance.of(getInt(R.string.recording_gps_accuracy_key, RECORDING_GPS_ACCURACY));\r\n}",
  "context" : "public static Distance getThresholdHorizontalAccuracy() {\r\n    final int RECORDING_GPS_ACCURACY = Integer.parseInt(resources.getString(R.string.recording_gps_accuracy_default));\r\n    return Distance.of(getInt(R.string.recording_gps_accuracy_key, RECORDING_GPS_ACCURACY));\r\n}",
  "start_lineno" : "564",
  "methodName" : "getThresholdHorizontalAccuracy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/436",
  "prompt" : "public static Distance getThresholdHorizontalAccuracy() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "622",
  "ground_truth" : "    int value = getInt(R.string.idle_duration_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}",
  "context" : "public static Duration getIdleDurationTimeout() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.idle_duration_default));\r\n    int value = getInt(R.string.idle_duration_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}",
  "start_lineno" : "618",
  "methodName" : "getIdleDurationTimeout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/437",
  "prompt" : "public static Duration getIdleDurationTimeout() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.idle_duration_default));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "647",
  "ground_truth" : "    final boolean INSTANT_POST_WORKOUT_EXPORT_DEFAULT = resources.getBoolean(R.bool.post_workout_export_enabled_default);\r\n    return getBoolean(R.string.post_workout_export_enabled_key, INSTANT_POST_WORKOUT_EXPORT_DEFAULT) && isDefaultExportDirectoryUri();\r\n}",
  "context" : "public static boolean shouldInstantExportAfterWorkout() {\r\n    final boolean INSTANT_POST_WORKOUT_EXPORT_DEFAULT = resources.getBoolean(R.bool.post_workout_export_enabled_default);\r\n    return getBoolean(R.string.post_workout_export_enabled_key, INSTANT_POST_WORKOUT_EXPORT_DEFAULT) && isDefaultExportDirectoryUri();\r\n}",
  "start_lineno" : "644",
  "methodName" : "shouldInstantExportAfterWorkout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/438",
  "prompt" : "public static boolean shouldInstantExportAfterWorkout() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "657",
  "ground_truth" : "        return generator;\r\n    } else {\r\n        return new TrackFilenameGenerator(DEFAULT);\r\n    }\r\n}",
  "context" : "public static TrackFilenameGenerator getTrackFileformatGenerator() {\r\n    String DEFAULT = resources.getString(R.string.export_filename_format_default);\r\n    TrackFilenameGenerator generator = new TrackFilenameGenerator(getString(R.string.export_filename_format_key, DEFAULT));\r\n    if (generator.isValid()) {\r\n        return generator;\r\n    } else {\r\n        return new TrackFilenameGenerator(DEFAULT);\r\n    }\r\n}",
  "start_lineno" : "649",
  "methodName" : "getTrackFileformatGenerator",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/439",
  "prompt" : "public static TrackFilenameGenerator getTrackFileformatGenerator() {\r\n    String DEFAULT = resources.getString(R.string.export_filename_format_default);\r\n    TrackFilenameGenerator generator = new TrackFilenameGenerator(getString(R.string.export_filename_format_key, DEFAULT));\r\n    if (generator.isValid()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "665",
  "ground_truth" : "    String trackFileFormatName = getString(R.string.export_trackfileformat_key, TRACKFILEFORMAT_NAME_DEFAULT);\r\n    return Arrays.stream(TrackFileFormat.values()).filter(format -> format.getPreferenceId().equals(trackFileFormatName)).findFirst().orElse(TrackFileFormat.KMZ_WITH_TRACKDETAIL_AND_SENSORDATA_AND_PICTURES);\r\n}",
  "context" : "public static TrackFileFormat getExportTrackFileFormat() {\r\n    final String TRACKFILEFORMAT_NAME_DEFAULT = getString(R.string.export_trackfileformat_default, null);\r\n    String trackFileFormatName = getString(R.string.export_trackfileformat_key, TRACKFILEFORMAT_NAME_DEFAULT);\r\n    return Arrays.stream(TrackFileFormat.values()).filter(format -> format.getPreferenceId().equals(trackFileFormatName)).findFirst().orElse(TrackFileFormat.KMZ_WITH_TRACKDETAIL_AND_SENSORDATA_AND_PICTURES);\r\n}",
  "start_lineno" : "659",
  "methodName" : "getExportTrackFileFormat",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/440",
  "prompt" : "public static TrackFileFormat getExportTrackFileFormat() {\r\n    final String TRACKFILEFORMAT_NAME_DEFAULT = getString(R.string.export_trackfileformat_default, null);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "670",
  "ground_truth" : "    final boolean defaultValue = getBoolean(R.bool.import_prevent_reimport_default, false);\r\n    return getBoolean(R.string.import_prevent_reimport_key, defaultValue);\r\n}",
  "context" : "public static boolean getPreventReimportTracks() {\r\n    final boolean defaultValue = getBoolean(R.bool.import_prevent_reimport_default, false);\r\n    return getBoolean(R.string.import_prevent_reimport_key, defaultValue);\r\n}",
  "start_lineno" : "667",
  "methodName" : "getPreventReimportTracks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/441",
  "prompt" : "public static boolean getPreventReimportTracks() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "680",
  "ground_truth" : "    final String value = getString(R.string.night_mode_key, defaultValue);\r\n    return Integer.parseInt(value);\r\n}",
  "context" : "/**\r\n * @return {@link androidx.appcompat.app.AppCompatDelegate}.MODE_*\r\n */\r\npublic static int getDefaultNightMode() {\r\n    final String defaultValue = getKey(R.string.night_mode_default);\r\n    final String value = getString(R.string.night_mode_key, defaultValue);\r\n    return Integer.parseInt(value);\r\n}",
  "start_lineno" : "675",
  "methodName" : "getDefaultNightMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/442",
  "prompt" : "/**\r\n * @return {@link androidx.appcompat.app.AppCompatDelegate}.MODE_*\r\n */\r\npublic static int getDefaultNightMode() {\r\n    final String defaultValue = getKey(R.string.night_mode_default);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "688",
  "ground_truth" : "        // We want to really clear settings now.\r\n        sharedPreferences.edit().clear().commit();\r\n    }\r\n    PreferenceManager.setDefaultValues(context, R.xml.settings, readAgain);\r\n}",
  "context" : "public static void resetPreferences(Context context, boolean readAgain) {\r\n    if (readAgain) {\r\n        // We want to really clear settings now.\r\n        sharedPreferences.edit().clear().commit();\r\n    }\r\n    PreferenceManager.setDefaultValues(context, R.xml.settings, readAgain);\r\n}",
  "start_lineno" : "682",
  "methodName" : "resetPreferences",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/443",
  "prompt" : "public static void resetPreferences(Context context, boolean readAgain) {\r\n    if (readAgain) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "702",
  "ground_truth" : "    } catch (Exception e) {\r\n        Log.w(TAG, \"Could not parse default export directory Uri: \" + e.getMessage());\r\n    }\r\n    return null;\r\n}",
  "context" : "public static Uri getDefaultExportDirectoryUri() {\r\n    String singleExportDirectory = getString(R.string.settings_default_export_directory_key, null);\r\n    if (singleExportDirectory == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        Log.d(TAG, \"DefaultExportDirectoryUri: \" + singleExportDirectory);\r\n        return Uri.parse(singleExportDirectory);\r\n    } catch (Exception e) {\r\n        Log.w(TAG, \"Could not parse default export directory Uri: \" + e.getMessage());\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "690",
  "methodName" : "getDefaultExportDirectoryUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/444",
  "prompt" : "public static Uri getDefaultExportDirectoryUri() {\r\n    String singleExportDirectory = getString(R.string.settings_default_export_directory_key, null);\r\n    if (singleExportDirectory == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        Log.d(TAG, \"DefaultExportDirectoryUri: \" + singleExportDirectory);\r\n        return Uri.parse(singleExportDirectory);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "709",
  "ground_truth" : "    Log.d(TAG, \"Set ExportDirectoryUri: \" + directoryUri);\r\n    setString(R.string.settings_default_export_directory_key, value);\r\n}",
  "context" : "public static void setDefaultExportDirectoryUri(Uri directoryUri) {\r\n    String value = directoryUri != null ? directoryUri.toString() : null;\r\n    Log.d(TAG, \"Set ExportDirectoryUri: \" + directoryUri);\r\n    setString(R.string.settings_default_export_directory_key, value);\r\n}",
  "start_lineno" : "704",
  "methodName" : "setDefaultExportDirectoryUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/445",
  "prompt" : "public static void setDefaultExportDirectoryUri(Uri directoryUri) {\r\n    String value = directoryUri != null ? directoryUri.toString() : null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "748",
  "ground_truth" : "    List<TypedArray> fieldsArrays = getMultiTypedArray();\r\n    return fieldsArrays.stream().map(i -> i.getString(0) + CsvLayoutUtils.PROPERTY_SEPARATOR + i.getString(1)).collect(Collectors.joining(CsvLayoutUtils.ITEM_SEPARATOR)) + CsvLayoutUtils.ITEM_SEPARATOR;\r\n}",
  "context" : "@SuppressLint(\"ResourceType\")\r\nprivate static String buildDefaultFields() {\r\n    List<TypedArray> fieldsArrays = getMultiTypedArray();\r\n    return fieldsArrays.stream().map(i -> i.getString(0) + CsvLayoutUtils.PROPERTY_SEPARATOR + i.getString(1)).collect(Collectors.joining(CsvLayoutUtils.ITEM_SEPARATOR)) + CsvLayoutUtils.ITEM_SEPARATOR;\r\n}",
  "start_lineno" : "743",
  "methodName" : "buildDefaultFields",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/446",
  "prompt" : "@SuppressLint(\"ResourceType\")\r\nprivate static String buildDefaultFields() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "797",
  "ground_truth" : "    String customLayoutCsv = getString(R.string.stats_custom_layouts_key, buildDefaultLayout()) + CsvLayoutUtils.LINE_SEPARATOR + newLayoutCsv;\r\n    setString(R.string.stats_custom_layouts_key, customLayoutCsv);\r\n}",
  "context" : "public static void addCustomLayout(@NonNull String layoutName) {\r\n    String newLayoutCsv = layoutName + CsvLayoutUtils.ITEM_SEPARATOR + getLayoutColumnsByDefault() + CsvLayoutUtils.ITEM_SEPARATOR + buildDefaultFields();\r\n    String customLayoutCsv = getString(R.string.stats_custom_layouts_key, buildDefaultLayout()) + CsvLayoutUtils.LINE_SEPARATOR + newLayoutCsv;\r\n    setString(R.string.stats_custom_layouts_key, customLayoutCsv);\r\n}",
  "start_lineno" : "793",
  "methodName" : "addCustomLayout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/447",
  "prompt" : "public static void addCustomLayout(@NonNull String layoutName) {\r\n    String newLayoutCsv = layoutName + CsvLayoutUtils.ITEM_SEPARATOR + getLayoutColumnsByDefault() + CsvLayoutUtils.ITEM_SEPARATOR + buildDefaultFields();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "812",
  "ground_truth" : "    for (String line : csvLines) {\r\n        recordingLayouts.add(RecordingLayoutIO.fromCsv(line, resources));\r\n    }\r\n    return recordingLayouts;\r\n}",
  "context" : "public static List<RecordingLayout> getAllCustomLayouts() {\r\n    List<RecordingLayout> recordingLayouts = new ArrayList<>();\r\n    String csvCustomLayout = getString(R.string.stats_custom_layouts_key, buildDefaultLayout());\r\n    String[] csvLines = csvCustomLayout.split(CsvLayoutUtils.LINE_SEPARATOR);\r\n    for (String line : csvLines) {\r\n        recordingLayouts.add(RecordingLayoutIO.fromCsv(line, resources));\r\n    }\r\n    return recordingLayouts;\r\n}",
  "start_lineno" : "803",
  "methodName" : "getAllCustomLayouts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/448",
  "prompt" : "public static List<RecordingLayout> getAllCustomLayouts() {\r\n    List<RecordingLayout> recordingLayouts = new ArrayList<>();\r\n    String csvCustomLayout = getString(R.string.stats_custom_layouts_key, buildDefaultLayout());\r\n    String[] csvLines = csvCustomLayout.split(CsvLayoutUtils.LINE_SEPARATOR);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "824",
  "ground_truth" : "        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.remove(resources.getString(R.string.stats_custom_layouts_key));\r\n        editor.commit();\r\n    }\r\n}",
  "context" : "public static void resetCustomLayoutPreferences() {\r\n    if (sharedPreferences.contains(resources.getString(R.string.stats_custom_layouts_key))) {\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.remove(resources.getString(R.string.stats_custom_layouts_key));\r\n        editor.commit();\r\n    }\r\n}",
  "start_lineno" : "818",
  "methodName" : "resetCustomLayoutPreferences",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/449",
  "prompt" : "public static void resetCustomLayoutPreferences() {\r\n    if (sharedPreferences.contains(resources.getString(R.string.stats_custom_layouts_key))) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = PreferencesUtils.class.getSimpleName();\nprivate static final int PREFERENCES_VERSION = 2;\nprivate static SharedPreferences sharedPreferences;\nprivate static Resources resources;",
  "app_type" : "life",
  "end_lineno" : "852",
  "ground_truth" : "    int newTotalRowsDeleted = getTotalRowsDeleted() + totalRowsDeletedToAdd;\r\n    setInt(R.string.total_rows_deleted_key, newTotalRowsDeleted);\r\n}",
  "context" : "public static void addTotalRowsDeleted(final int totalRowsDeletedToAdd) {\r\n    int newTotalRowsDeleted = getTotalRowsDeleted() + totalRowsDeletedToAdd;\r\n    setInt(R.string.total_rows_deleted_key, newTotalRowsDeleted);\r\n}",
  "start_lineno" : "849",
  "methodName" : "addTotalRowsDeleted",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java",
  "task_id" : "OpenTracks/450",
  "prompt" : "public static void addTotalRowsDeleted(final int totalRowsDeletedToAdd) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_api_title);\r\n    findPreference(getString(R.string.publicapi_package_key)).setSummary(BuildConfig.APPLICATION_ID);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_api_title);\r\n    findPreference(getString(R.string.publicapi_package_key)).setSummary(BuildConfig.APPLICATION_ID);\r\n}",
  "start_lineno" : "17",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PublicAPISettingsFragment.java",
  "task_id" : "OpenTracks/451",
  "prompt" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(PreferenceDialogFragmentCompat.ARG_KEY, preferenceKey);\r\n    dialog.setArguments(bundle);\r\n    return dialog;\r\n}",
  "context" : "static PreferenceDialogFragmentCompat newInstance(String preferenceKey) {\r\n    ResetPreferenceDialog dialog = new ResetPreferenceDialog();\r\n    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(PreferenceDialogFragmentCompat.ARG_KEY, preferenceKey);\r\n    dialog.setArguments(bundle);\r\n    return dialog;\r\n}",
  "start_lineno" : "26",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ResetDialogPreference.java",
  "task_id" : "OpenTracks/452",
  "prompt" : "static PreferenceDialogFragmentCompat newInstance(String preferenceKey) {\r\n    ResetPreferenceDialog dialog = new ResetPreferenceDialog();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = SensorsSettingsFragment.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "    addPreferencesFromResource(R.xml.settings_sensors);\r\n    setWheelCircumferenceInputFilter();\r\n}",
  "context" : "@Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n    addPreferencesFromResource(R.xml.settings_sensors);\r\n    setWheelCircumferenceInputFilter();\r\n}",
  "start_lineno" : "21",
  "methodName" : "onCreatePreferences",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SensorsSettingsFragment.java",
  "task_id" : "OpenTracks/453",
  "prompt" : "@Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final static String TAG = SensorsSettingsFragment.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_sensors_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_sensors_title);\r\n}",
  "start_lineno" : "27",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SensorsSettingsFragment.java",
  "task_id" : "OpenTracks/454",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRAS_EXPORT_ERROR_MESSAGE = \"Export error message\";\nprivate String exportErrorMessage = null;\npublic static final String FRAGMENT_KEY = \"fragmentKey\";\nprivate PreferenceFragmentCompat fragment = null;\nprivate SettingsBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        new AlertDialog.Builder(this).setIcon(R.drawable.ic_logo_24dp).setTitle(R.string.app_name).setMessage(getString(R.string.export_error_post_workout) + \"\\n\" + exportErrorMessage).setNeutralButton(android.R.string.ok, null).create().show();\r\n        exportErrorMessage = null;\r\n    }\r\n    super.onResume();\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    if (exportErrorMessage != null) {\r\n        new AlertDialog.Builder(this).setIcon(R.drawable.ic_logo_24dp).setTitle(R.string.app_name).setMessage(getString(R.string.export_error_post_workout) + \"\\n\" + exportErrorMessage).setNeutralButton(android.R.string.ok, null).create().show();\r\n        exportErrorMessage = null;\r\n    }\r\n    super.onResume();\r\n}",
  "start_lineno" : "50",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java",
  "task_id" : "OpenTracks/455",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\nprotected void onResume() {\r\n    if (exportErrorMessage != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRAS_EXPORT_ERROR_MESSAGE = \"Export error message\";\nprivate String exportErrorMessage = null;\npublic static final String FRAGMENT_KEY = \"fragmentKey\";\nprivate PreferenceFragmentCompat fragment = null;\nprivate SettingsBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        getSupportFragmentManager().putFragment(outState, FRAGMENT_KEY, fragment);\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (fragment != null && fragment.isAdded()) {\r\n        getSupportFragmentManager().putFragment(outState, FRAGMENT_KEY, fragment);\r\n    }\r\n}",
  "start_lineno" : "66",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java",
  "task_id" : "OpenTracks/456",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (fragment != null && fragment.isAdded()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRAS_EXPORT_ERROR_MESSAGE = \"Export error message\";\nprivate String exportErrorMessage = null;\npublic static final String FRAGMENT_KEY = \"fragmentKey\";\nprivate PreferenceFragmentCompat fragment = null;\nprivate SettingsBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    viewBinding = SettingsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = SettingsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "74",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java",
  "task_id" : "OpenTracks/457",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRAS_EXPORT_ERROR_MESSAGE = \"Export error message\";\nprivate String exportErrorMessage = null;\npublic static final String FRAGMENT_KEY = \"fragmentKey\";\nprivate PreferenceFragmentCompat fragment = null;\nprivate SettingsBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "    getSupportFragmentManager().beginTransaction().replace(R.id.settings_fragment, fragment).addToBackStack(key).commit();\r\n    return fragment;\r\n}",
  "context" : "public PreferenceFragmentCompat openScreen(String key) {\r\n    fragment = getPreferenceScreen(key);\r\n    getSupportFragmentManager().beginTransaction().replace(R.id.settings_fragment, fragment).addToBackStack(key).commit();\r\n    return fragment;\r\n}",
  "start_lineno" : "102",
  "methodName" : "openScreen",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java",
  "task_id" : "OpenTracks/458",
  "prompt" : "import androidx.preference.PreferenceFragmentCompat\npublic PreferenceFragmentCompat openScreen(String key) {\r\n    fragment = getPreferenceScreen(key);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRAS_EXPORT_ERROR_MESSAGE = \"Export error message\";\nprivate String exportErrorMessage = null;\npublic static final String FRAGMENT_KEY = \"fragmentKey\";\nprivate PreferenceFragmentCompat fragment = null;\nprivate SettingsBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "        ((ChooseActivityTypeDialogFragment.ChooseActivityTypeCaller) this.fragment).onChooseActivityTypeDone(activityType);\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(this.fragment.getClass().getSimpleName() + \" must implement \" + ChooseActivityTypeDialogFragment.ChooseActivityTypeCaller.class.getSimpleName());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    try {\r\n        ((ChooseActivityTypeDialogFragment.ChooseActivityTypeCaller) this.fragment).onChooseActivityTypeDone(activityType);\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(this.fragment.getClass().getSimpleName() + \" must implement \" + ChooseActivityTypeDialogFragment.ChooseActivityTypeCaller.class.getSimpleName());\r\n    }\r\n}",
  "start_lineno" : "108",
  "methodName" : "onChooseActivityTypeDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java",
  "task_id" : "OpenTracks/459",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\n@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_LAYOUT = \"extraLayout\";\nprivate ActivitySettingsCustomLayoutBinding viewBinding;\nprivate GridLayoutManager gridLayoutManager;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsVisible;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsHidden;\nprivate String profile;\nprivate RecordingLayout recordingLayoutFieldsVisible;\nprivate RecordingLayout recordingLayoutFieldsHidden;\nprivate int numColumns;",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "    }\r\n    return 1;\r\n}",
  "context" : "@Override\r\npublic int getSpanSize(int position) {\r\n    if (adapterFieldsVisible.isItemWide(position)) {\r\n        return numColumns;\r\n    }\r\n    return 1;\r\n}",
  "start_lineno" : "50",
  "methodName" : "getSpanSize",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java",
  "task_id" : "OpenTracks/460",
  "prompt" : "@Override\r\npublic int getSpanSize(int position) {\r\n    if (adapterFieldsVisible.isItemWide(position)) {\r\n        return numColumns;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_LAYOUT = \"extraLayout\";\nprivate ActivitySettingsCustomLayoutBinding viewBinding;\nprivate GridLayoutManager gridLayoutManager;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsVisible;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsHidden;\nprivate String profile;\nprivate RecordingLayout recordingLayoutFieldsVisible;\nprivate RecordingLayout recordingLayoutFieldsHidden;\nprivate int numColumns;",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "    recordingLayoutFieldsVisible = adapterFieldsVisible.move(fromPosition, toPosition);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n    int fromPosition = viewHolder.getAdapterPosition();\r\n    int toPosition = target.getAdapterPosition();\r\n    recordingLayoutFieldsVisible = adapterFieldsVisible.move(fromPosition, toPosition);\r\n    return true;\r\n}",
  "start_lineno" : "63",
  "methodName" : "onMove",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java",
  "task_id" : "OpenTracks/461",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n    int fromPosition = viewHolder.getAdapterPosition();\r\n    int toPosition = target.getAdapterPosition();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_LAYOUT = \"extraLayout\";\nprivate ActivitySettingsCustomLayoutBinding viewBinding;\nprivate GridLayoutManager gridLayoutManager;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsVisible;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsHidden;\nprivate String profile;\nprivate RecordingLayout recordingLayoutFieldsVisible;\nprivate RecordingLayout recordingLayoutFieldsHidden;\nprivate int numColumns;",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "        recordingLayout.addFields(recordingLayoutFieldsVisible.getFields());\r\n        recordingLayout.addFields(recordingLayoutFieldsHidden.getFields());\r\n        PreferencesUtils.updateCustomLayout(recordingLayout);\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    if (!recordingLayoutFieldsVisible.getFields().isEmpty() || !recordingLayoutFieldsHidden.getFields().isEmpty()) {\r\n        RecordingLayout recordingLayout = new RecordingLayout(profile, numColumns);\r\n        recordingLayout.addFields(recordingLayoutFieldsVisible.getFields());\r\n        recordingLayout.addFields(recordingLayoutFieldsHidden.getFields());\r\n        PreferencesUtils.updateCustomLayout(recordingLayout);\r\n    }\r\n}",
  "start_lineno" : "102",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java",
  "task_id" : "OpenTracks/462",
  "prompt" : "import de.dennisguse.opentracks.ui.customRecordingLayout.RecordingLayout\nimport de.dennisguse.opentracks.R\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    if (!recordingLayoutFieldsVisible.getFields().isEmpty() || !recordingLayoutFieldsHidden.getFields().isEmpty()) {\r\n        RecordingLayout recordingLayout = new RecordingLayout(profile, numColumns);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_LAYOUT = \"extraLayout\";\nprivate ActivitySettingsCustomLayoutBinding viewBinding;\nprivate GridLayoutManager gridLayoutManager;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsVisible;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsHidden;\nprivate String profile;\nprivate RecordingLayout recordingLayoutFieldsVisible;\nprivate RecordingLayout recordingLayoutFieldsHidden;\nprivate int numColumns;",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "    super.onDestroy();\r\n    recordingLayoutFieldsVisible = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    recordingLayoutFieldsVisible = null;\r\n}",
  "start_lineno" : "113",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java",
  "task_id" : "OpenTracks/463",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_LAYOUT = \"extraLayout\";\nprivate ActivitySettingsCustomLayoutBinding viewBinding;\nprivate GridLayoutManager gridLayoutManager;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsVisible;\nprivate SettingsCustomLayoutEditAdapter adapterFieldsHidden;\nprivate String profile;\nprivate RecordingLayout recordingLayoutFieldsVisible;\nprivate RecordingLayout recordingLayoutFieldsHidden;\nprivate int numColumns;",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "    viewBinding = ActivitySettingsCustomLayoutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = ActivitySettingsCustomLayoutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "119",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java",
  "task_id" : "OpenTracks/464",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "    // When there's only one profile it cannot be deleted (so, \"disable\" movements: drag flags and swipe flags).\r\n    return adapter.getItemCount() > 1 ? makeMovementFlags(0, ItemTouchHelper.LEFT) : makeMovementFlags(0, 0);\r\n}",
  "context" : "@Override\r\npublic int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {\r\n    // When there's only one profile it cannot be deleted (so, \"disable\" movements: drag flags and swipe flags).\r\n    return adapter.getItemCount() > 1 ? makeMovementFlags(0, ItemTouchHelper.LEFT) : makeMovementFlags(0, 0);\r\n}",
  "start_lineno" : "76",
  "methodName" : "getMovementFlags",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/465",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "    super.onResume();\r\n    adapter.reloadLayouts();\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    adapter.reloadLayouts();\r\n}",
  "start_lineno" : "105",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/466",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\nprotected void onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "    viewBinding = ActivitySettingsCustomLayoutListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    PreferencesUtils.getCustomLayout();\r\n    viewBinding = ActivitySettingsCustomLayoutListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "111",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/467",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r\n    PreferencesUtils.getCustomLayout();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "    getMenuInflater().inflate(R.menu.custom_layout_edit, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.custom_layout_edit, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "118",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/468",
  "prompt" : "import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        imm.showSoftInput(viewBinding.customLayoutListEditName, InputMethodManager.SHOW_IMPLICIT);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "context" : "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.custom_layout_edit_add_profile) {\r\n        viewBinding.customLayoutListAddLinearLayout.setVisibility(View.VISIBLE);\r\n        viewBinding.customLayoutListEditName.requestFocus();\r\n        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n        imm.showSoftInput(viewBinding.customLayoutListEditName, InputMethodManager.SHOW_IMPLICIT);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "start_lineno" : "124",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/469",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.inputmethod.InputMethodManager\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Context\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.custom_layout_edit_add_profile) {\r\n        viewBinding.customLayoutListAddLinearLayout.setVisibility(View.VISIBLE);\r\n        viewBinding.customLayoutListEditName.requestFocus();\r\n        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "    intent.putExtra(SettingsCustomLayoutEditActivity.EXTRA_LAYOUT, recordingLayout);\r\n    startActivity(intent);\r\n}",
  "context" : "@Override\r\npublic void onSettingsCustomLayoutProfileClicked(@NonNull RecordingLayout recordingLayout) {\r\n    Intent intent = new Intent(this, SettingsCustomLayoutEditActivity.class);\r\n    intent.putExtra(SettingsCustomLayoutEditActivity.EXTRA_LAYOUT, recordingLayout);\r\n    startActivity(intent);\r\n}",
  "start_lineno" : "137",
  "methodName" : "onSettingsCustomLayoutProfileClicked",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/470",
  "prompt" : "import de.dennisguse.opentracks.ui.customRecordingLayout.RecordingLayout\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\npublic void onSettingsCustomLayoutProfileClicked(@NonNull RecordingLayout recordingLayout) {\r\n    Intent intent = new Intent(this, SettingsCustomLayoutEditActivity.class);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private ActivitySettingsCustomLayoutListBinding viewBinding;\nprivate SettingsCustomLayoutListAdapter adapter;",
  "app_type" : "life",
  "end_lineno" : "148",
  "ground_truth" : "    viewBinding.customLayoutListInputLayout.setError(\"\");\r\n    viewBinding.customLayoutListAddLinearLayout.setVisibility(View.GONE);\r\n}",
  "context" : "private void clearAndHideEditLayout() {\r\n    viewBinding.customLayoutListEditName.setText(\"\");\r\n    viewBinding.customLayoutListInputLayout.setError(\"\");\r\n    viewBinding.customLayoutListAddLinearLayout.setVisibility(View.GONE);\r\n}",
  "start_lineno" : "144",
  "methodName" : "clearAndHideEditLayout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java",
  "task_id" : "OpenTracks/471",
  "prompt" : "private void clearAndHideEditLayout() {\r\n    viewBinding.customLayoutListEditName.setText(\"\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.night_mode_key, key)) {\r\n        getActivity().runOnUiThread(PreferencesUtils::applyNightMode);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_ui_title);\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_ui_title);\r\n}",
  "start_lineno" : "44",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java",
  "task_id" : "OpenTracks/472",
  "prompt" : "@Override\r\npublic void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.night_mode_key, key)) {\r\n        getActivity().runOnUiThread(PreferencesUtils::applyNightMode);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "50",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java",
  "task_id" : "OpenTracks/473",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.night_mode_key, key)) {\r\n        getActivity().runOnUiThread(PreferencesUtils::applyNightMode);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}",
  "start_lineno" : "56",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java",
  "task_id" : "OpenTracks/474",
  "prompt" : "@Override\r\npublic void onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.night_mode_key, key)) {\r\n        getActivity().runOnUiThread(PreferencesUtils::applyNightMode);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        dialogFragment.show(getParentFragmentManager(), getClass().getSimpleName());\r\n        return;\r\n    }\r\n    super.onDisplayPreferenceDialog(preference);\r\n}",
  "context" : "@Override\r\npublic void onDisplayPreferenceDialog(Preference preference) {\r\n    DialogFragment dialogFragment = null;\r\n    if (preference instanceof ResetDialogPreference) {\r\n        dialogFragment = ResetDialogPreference.ResetPreferenceDialog.newInstance(preference.getKey());\r\n    }\r\n    if (dialogFragment != null) {\r\n        dialogFragment.setTargetFragment(this, 0);\r\n        dialogFragment.show(getParentFragmentManager(), getClass().getSimpleName());\r\n        return;\r\n    }\r\n    super.onDisplayPreferenceDialog(preference);\r\n}",
  "start_lineno" : "62",
  "methodName" : "onDisplayPreferenceDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java",
  "task_id" : "OpenTracks/475",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.preference.Preference\nimport androidx.fragment.app.DialogFragment\n@Override\r\npublic void onDisplayPreferenceDialog(Preference preference) {\r\n    DialogFragment dialogFragment = null;\r\n    if (preference instanceof ResetDialogPreference) {\r\n        dialogFragment = ResetDialogPreference.ResetPreferenceDialog.newInstance(preference.getKey());\r\n    }\r\n    if (dialogFragment != null) {\r\n        dialogFragment.setTargetFragment(this, 0);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String HTML_LINE_BREAK = \"<br>\";\nprivate static final String HTML_PARAGRAPH_SEPARATOR = \"<p>\";\nprivate static final String TEXT_LINE_BREAK = \"\\n\";\nprivate static final String TEXT_PARAGRAPH_SEPARATOR = \"\\n\\n\";\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "        text = context.getString(R.string.value_unknown);\r\n    }\r\n    builder.append(context.getString(resId, text));\r\n    builder.append(lineBreak);\r\n}",
  "context" : "/**\r\n * Writes a string to a string builder.\r\n *\r\n * @param text      the string\r\n * @param builder   the string builder\r\n * @param resId     the resource id containing one string placeholder\r\n * @param lineBreak the line break\r\n */\r\nprivate void writeString(String text, StringBuilder builder, int resId, String lineBreak) {\r\n    if (text == null || text.length() == 0) {\r\n        text = context.getString(R.string.value_unknown);\r\n    }\r\n    builder.append(context.getString(resId, text));\r\n    builder.append(lineBreak);\r\n}",
  "start_lineno" : "90",
  "methodName" : "writeString",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java",
  "task_id" : "OpenTracks/476",
  "prompt" : "/**\r\n * Writes a string to a string builder.\r\n *\r\n * @param text      the string\r\n * @param builder   the string builder\r\n * @param resId     the resource id containing one string placeholder\r\n * @param lineBreak the line break\r\n */\r\nprivate void writeString(String text, StringBuilder builder, int resId, String lineBreak) {\r\n    if (text == null || text.length() == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String HTML_LINE_BREAK = \"<br>\";\nprivate static final String HTML_PARAGRAPH_SEPARATOR = \"<p>\";\nprivate static final String TEXT_LINE_BREAK = \"\\n\";\nprivate static final String TEXT_PARAGRAPH_SEPARATOR = \"\\n\\n\";\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    builder.append(context.getString(resId, distanceInKm, distanceInMi));\r\n    builder.append(lineBreak);\r\n}",
  "context" : "/**\r\n * Writes distance.\r\n *\r\n * @param distance  distance in meters\r\n * @param builder   StringBuilder to append distance\r\n * @param resId     resource id of distance string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeDistance(Distance distance, StringBuilder builder, int resId, String lineBreak) {\r\n    double distanceInKm = distance.toKM();\r\n    double distanceInMi = distance.toMI();\r\n    builder.append(context.getString(resId, distanceInKm, distanceInMi));\r\n    builder.append(lineBreak);\r\n}",
  "start_lineno" : "170",
  "methodName" : "writeDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java",
  "task_id" : "OpenTracks/477",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes distance.\r\n *\r\n * @param distance  distance in meters\r\n * @param builder   StringBuilder to append distance\r\n * @param resId     resource id of distance string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeDistance(Distance distance, StringBuilder builder, int resId, String lineBreak) {\r\n    double distanceInKm = distance.toKM();\r\n    double distanceInMi = distance.toMI();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String HTML_LINE_BREAK = \"<br>\";\nprivate static final String HTML_PARAGRAPH_SEPARATOR = \"<p>\";\nprivate static final String TEXT_LINE_BREAK = \"\\n\";\nprivate static final String TEXT_PARAGRAPH_SEPARATOR = \"\\n\\n\";\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "    builder.append(context.getString(resId, StringUtils.formatElapsedTime(time)));\r\n    builder.append(lineBreak);\r\n}",
  "context" : "/**\r\n * Writes time.\r\n *\r\n * @param time      time in milliseconds.\r\n * @param builder   StringBuilder to append time\r\n * @param resId     resource id of time string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeTime(Duration time, StringBuilder builder, int resId, String lineBreak) {\r\n    builder.append(context.getString(resId, StringUtils.formatElapsedTime(time)));\r\n    builder.append(lineBreak);\r\n}",
  "start_lineno" : "186",
  "methodName" : "writeTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java",
  "task_id" : "OpenTracks/478",
  "prompt" : "import java.time.Duration\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes time.\r\n *\r\n * @param time      time in milliseconds.\r\n * @param builder   StringBuilder to append time\r\n * @param resId     resource id of time string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeTime(Duration time, StringBuilder builder, int resId, String lineBreak) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String HTML_LINE_BREAK = \"<br>\";\nprivate static final String HTML_PARAGRAPH_SEPARATOR = \"<p>\";\nprivate static final String TEXT_LINE_BREAK = \"\\n\";\nprivate static final String TEXT_PARAGRAPH_SEPARATOR = \"\\n\\n\";\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "204",
  "ground_truth" : "    builder.append(context.getString(resId, speed.toKMH(), speed.toMPH()));\r\n    builder.append(lineBreak);\r\n}",
  "context" : "/**\r\n * Writes speed.\r\n *\r\n * @param speed     speed in meters per second\r\n * @param builder   StringBuilder to append speed\r\n * @param resId     resource id of speed string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeSpeed(Speed speed, StringBuilder builder, int resId, String lineBreak) {\r\n    builder.append(context.getString(resId, speed.toKMH(), speed.toMPH()));\r\n    builder.append(lineBreak);\r\n}",
  "start_lineno" : "200",
  "methodName" : "writeSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java",
  "task_id" : "OpenTracks/479",
  "prompt" : "import de.dennisguse.opentracks.data.models.Speed\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes speed.\r\n *\r\n * @param speed     speed in meters per second\r\n * @param builder   StringBuilder to append speed\r\n * @param resId     resource id of speed string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeSpeed(Speed speed, StringBuilder builder, int resId, String lineBreak) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String HTML_LINE_BREAK = \"<br>\";\nprivate static final String HTML_PARAGRAPH_SEPARATOR = \"<p>\";\nprivate static final String TEXT_LINE_BREAK = \"\\n\";\nprivate static final String TEXT_PARAGRAPH_SEPARATOR = \"\\n\\n\";\nprivate final Context context;",
  "app_type" : "life",
  "end_lineno" : "235",
  "ground_truth" : "    builder.append(context.getString(resId, altitudeInM, altitudeInFt));\r\n    builder.append(lineBreak);\r\n}",
  "context" : "/**\r\n * @param altitude_m altitude_m in meters\r\n * @param builder    StringBuilder to append\r\n * @param resId      resource id of altitude string\r\n * @param lineBreak  line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeAltitude(double altitude_m, StringBuilder builder, int resId, String lineBreak) {\r\n    long altitudeInM = Math.round(altitude_m);\r\n    long altitudeInFt = Math.round(Distance.of(altitude_m).toFT());\r\n    builder.append(context.getString(resId, altitudeInM, altitudeInFt));\r\n    builder.append(lineBreak);\r\n}",
  "start_lineno" : "229",
  "methodName" : "writeAltitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java",
  "task_id" : "OpenTracks/480",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\nimport androidx.annotation.VisibleForTesting\n/**\r\n * @param altitude_m altitude_m in meters\r\n * @param builder    StringBuilder to append\r\n * @param resId      resource id of altitude string\r\n * @param lineBreak  line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeAltitude(double altitude_m, StringBuilder builder, int resId, String lineBreak) {\r\n    long altitudeInM = Math.round(altitude_m);\r\n    long altitudeInFt = Math.round(Distance.of(altitude_m).toFT());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    viewBinding.showErrorToolbar.setTitle(createErrorTitle());\r\n    setSupportActionBar(viewBinding.bottomAppBarLayout.bottomAppBar);\r\n}",
  "context" : "@Override\r\npublic void onCreate(final Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    viewBinding.textViewError.setText(getIntent().getStringExtra(EXTRA_ERROR_TEXT));\r\n    viewBinding.showErrorToolbar.setTitle(createErrorTitle());\r\n    setSupportActionBar(viewBinding.bottomAppBarLayout.bottomAppBar);\r\n}",
  "start_lineno" : "22",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/481",
  "prompt" : "import android.view.View\nimport android.os.Bundle\nimport android.content.Intent\n@Override\r\npublic void onCreate(final Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    viewBinding.textViewError.setText(getIntent().getStringExtra(EXTRA_ERROR_TEXT));\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "    viewBinding = ActivityShowErrorBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = ActivityShowErrorBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "31",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/482",
  "prompt" : "import android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "        return;\r\n    }\r\n    Intent intent = new Intent(Intent.ACTION_VIEW, uriUrl);\r\n    startActivity(intent);\r\n}",
  "context" : "private void reportBug() {\r\n    Uri uriUrl;\r\n    try {\r\n        uriUrl = Uri.parse(String.format(getString(R.string.report_issue_link), URLEncoder.encode(viewBinding.textViewError.getText().toString(), StandardCharsets.UTF_8.toString())));\r\n    } catch (final UnsupportedEncodingException ignored) {\r\n        // can't happen as UTF-8 is always available\r\n        return;\r\n    }\r\n    Intent intent = new Intent(Intent.ACTION_VIEW, uriUrl);\r\n    startActivity(intent);\r\n}",
  "start_lineno" : "41",
  "methodName" : "reportBug",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/483",
  "prompt" : "import java.nio.charset.StandardCharsets\nimport java.net.URLEncoder\nimport java.io.UnsupportedEncodingException\nimport android.view.View\nimport android.net.Uri\nprivate void reportBug() {\r\n    Uri uriUrl;\r\n    try {\r\n        uriUrl = Uri.parse(String.format(getString(R.string.report_issue_link), URLEncoder.encode(viewBinding.textViewError.getText().toString(), StandardCharsets.UTF_8.toString())));\r\n    } catch (final UnsupportedEncodingException ignored) {\r\n        // can't happen as UTF-8 is always available\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "    getMenuInflater().inflate(R.menu.show_error, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    getMenuInflater().inflate(R.menu.show_error, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "58",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/484",
  "prompt" : "import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        reportBug();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "context" : "@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\n    if (item.getItemId() == R.id.error_share) {\r\n        onClickedShare();\r\n        return true;\r\n    } else if (item.getItemId() == R.id.error_report) {\r\n        reportBug();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "start_lineno" : "64",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/485",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\n    if (item.getItemId() == R.id.error_share) {\r\n        onClickedShare();\r\n        return true;\r\n    } else if (item.getItemId() == R.id.error_report) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_ERROR_TEXT = \"error\";\nprivate ActivityShowErrorBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "    intent.putExtra(Intent.EXTRA_SUBJECT, createErrorTitle());\r\n    intent.putExtra(Intent.EXTRA_TEXT, viewBinding.textViewError.getText());\r\n    intent.setType(\"text/plain\");\r\n    startActivity(intent);\r\n}",
  "context" : "private void onClickedShare() {\r\n    Intent intent = new Intent(Intent.ACTION_SEND);\r\n    intent.putExtra(Intent.EXTRA_SUBJECT, createErrorTitle());\r\n    intent.putExtra(Intent.EXTRA_TEXT, viewBinding.textViewError.getText());\r\n    intent.setType(\"text/plain\");\r\n    startActivity(intent);\r\n}",
  "start_lineno" : "76",
  "methodName" : "onClickedShare",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java",
  "task_id" : "OpenTracks/486",
  "prompt" : "import android.content.Intent\nprivate void onClickedShare() {\r\n    Intent intent = new Intent(Intent.ACTION_SEND);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = Startup.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        Thread.UncaughtExceptionHandler defaultPlatformHandler = Thread.getDefaultUncaughtExceptionHandler();\r\n        ExceptionHandler crashReporter = new ExceptionHandler(this, defaultPlatformHandler);\r\n        Thread.setDefaultUncaughtExceptionHandler(crashReporter);\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void attachBaseContext(final Context base) {\r\n    super.attachBaseContext(base);\r\n    // handle crashes only outside the crash reporter activity/process\r\n    if (!isCrashReportingProcess()) {\r\n        Thread.UncaughtExceptionHandler defaultPlatformHandler = Thread.getDefaultUncaughtExceptionHandler();\r\n        ExceptionHandler crashReporter = new ExceptionHandler(this, defaultPlatformHandler);\r\n        Thread.setDefaultUncaughtExceptionHandler(crashReporter);\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "attachBaseContext",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\Startup.java",
  "task_id" : "OpenTracks/487",
  "prompt" : "import android.content.Context\n@Override\r\nprotected void attachBaseContext(final Context base) {\r\n    super.attachBaseContext(base);\r\n    // handle crashes only outside the crash reporter activity/process\r\n    if (!isCrashReportingProcess()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "    min = Double.POSITIVE_INFINITY;\r\n    max = Double.NEGATIVE_INFINITY;\r\n}",
  "context" : "/**\r\n * Resets this object to it's initial state where the min and max are unknown.\r\n */\r\npublic void reset() {\r\n    min = Double.POSITIVE_INFINITY;\r\n    max = Double.NEGATIVE_INFINITY;\r\n}",
  "start_lineno" : "41",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java",
  "task_id" : "OpenTracks/488",
  "prompt" : "/**\r\n * Resets this object to it's initial state where the min and max are unknown.\r\n */\r\npublic void reset() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "95",
  "ground_truth" : "        max = value;\r\n        changed = true;\r\n    }\r\n    return changed;\r\n}",
  "context" : "/**\r\n * Updates the min and the max with a new value.\r\n *\r\n * @param value the new value\r\n * @return true if an extremity was found\r\n */\r\npublic boolean update(double value) {\r\n    boolean changed = false;\r\n    if (value < min) {\r\n        min = value;\r\n        changed = true;\r\n    }\r\n    if (value > max) {\r\n        max = value;\r\n        changed = true;\r\n    }\r\n    return changed;\r\n}",
  "start_lineno" : "84",
  "methodName" : "update",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java",
  "task_id" : "OpenTracks/489",
  "prompt" : "/**\r\n * Updates the min and the max with a new value.\r\n *\r\n * @param value the new value\r\n * @return true if an extremity was found\r\n */\r\npublic boolean update(double value) {\r\n    boolean changed = false;\r\n    if (value < min) {\r\n        min = value;\r\n        changed = true;\r\n    }\r\n    if (value > max) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "    this.min = min;\r\n    this.max = max;\r\n}",
  "context" : "/**\r\n * Sets the minimum and maximum values.\r\n *\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n */\r\npublic void set(double min, double max) {\r\n    this.min = min;\r\n    this.max = max;\r\n}",
  "start_lineno" : "103",
  "methodName" : "set",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java",
  "task_id" : "OpenTracks/490",
  "prompt" : "/**\r\n * Sets the minimum and maximum values.\r\n *\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n */\r\npublic void set(double min, double max) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    setMaxSpeed(Speed.zero());\r\n    setTotalAltitudeGain(null);\r\n    setTotalAltitudeLoss(null);\r\n    isIdle = false;\r\n}",
  "context" : "public void reset() {\r\n    startTime = null;\r\n    stopTime = null;\r\n    setTotalDistance(Distance.of(0));\r\n    setTotalTime(Duration.ofSeconds(0));\r\n    setMovingTime(Duration.ofSeconds(0));\r\n    setMaxSpeed(Speed.zero());\r\n    setTotalAltitudeGain(null);\r\n    setTotalAltitudeLoss(null);\r\n    isIdle = false;\r\n}",
  "start_lineno" : "164",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/491",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\nimport java.time.Duration\npublic void reset() {\r\n    startTime = null;\r\n    stopTime = null;\r\n    setTotalDistance(Distance.of(0));\r\n    setTotalTime(Duration.ofSeconds(0));\r\n    setMovingTime(Duration.ofSeconds(0));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "181",
  "ground_truth" : "    reset();\r\n    setStartTime(startTime);\r\n}",
  "context" : "public void reset(Instant startTime) {\r\n    reset();\r\n    setStartTime(startTime);\r\n}",
  "start_lineno" : "178",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/492",
  "prompt" : "import java.time.Instant\npublic void reset(Instant startTime) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "193",
  "ground_truth" : "    this.startTime = startTime;\r\n    setStopTime(startTime);\r\n}",
  "context" : "/**\r\n * Should only be called on start.\r\n */\r\npublic void setStartTime(Instant startTime) {\r\n    this.startTime = startTime;\r\n    setStopTime(startTime);\r\n}",
  "start_lineno" : "190",
  "methodName" : "setStartTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/493",
  "prompt" : "import java.time.Instant\n/**\r\n * Should only be called on start.\r\n */\r\npublic void setStartTime(Instant startTime) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "205",
  "ground_truth" : "        // Time must be monotonically increasing, but we might have events at the same point in time (BLE and GPS)\r\n        throw new RuntimeException(\"stopTime cannot be less than startTime: \" + startTime + \" \" + stopTime);\r\n    }\r\n    this.stopTime = stopTime;\r\n}",
  "context" : "public void setStopTime(Instant stopTime) {\r\n    if (stopTime.isBefore(startTime)) {\r\n        // Time must be monotonically increasing, but we might have events at the same point in time (BLE and GPS)\r\n        throw new RuntimeException(\"stopTime cannot be less than startTime: \" + startTime + \" \" + stopTime);\r\n    }\r\n    this.stopTime = stopTime;\r\n}",
  "start_lineno" : "199",
  "methodName" : "setStopTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/494",
  "prompt" : "import java.time.Instant\npublic void setStopTime(Instant stopTime) {\r\n    if (stopTime.isBefore(startTime)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "250",
  "ground_truth" : "    }\r\n    movingTime = movingTime.plus(time);\r\n}",
  "context" : "@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addMovingTime(Duration time) {\r\n    if (time.isNegative()) {\r\n        throw new RuntimeException(\"Moving time cannot be negative\");\r\n    }\r\n    movingTime = movingTime.plus(time);\r\n}",
  "start_lineno" : "244",
  "methodName" : "addMovingTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/495",
  "prompt" : "import java.time.Duration\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addMovingTime(Duration time) {\r\n    if (time.isNegative()) {\r\n        throw new RuntimeException(\"Moving time cannot be negative\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "282",
  "ground_truth" : "    }\r\n    return Speed.of(totalDistance.toM() / totalTime.getSeconds());\r\n}",
  "context" : "/**\r\n * Gets the average speed.\r\n * This calculation only takes into account the displacement until the last point that was accounted for in statistics.\r\n */\r\npublic Speed getAverageSpeed() {\r\n    if (totalTime.isZero()) {\r\n        return Speed.of(0);\r\n    }\r\n    return Speed.of(totalDistance.toM() / totalTime.getSeconds());\r\n}",
  "start_lineno" : "277",
  "methodName" : "getAverageSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/496",
  "prompt" : "import de.dennisguse.opentracks.data.models.Speed\n/**\r\n * Gets the average speed.\r\n * This calculation only takes into account the displacement until the last point that was accounted for in statistics.\r\n */\r\npublic Speed getAverageSpeed() {\r\n    if (totalTime.isZero()) {\r\n        return Speed.of(0);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "328",
  "ground_truth" : "        altitudeExtremities.update(altitude.toM());\r\n    }\r\n}",
  "context" : "public void updateAltitudeExtremities(Altitude altitude) {\r\n    if (altitude != null) {\r\n        altitudeExtremities.update(altitude.toM());\r\n    }\r\n}",
  "start_lineno" : "324",
  "methodName" : "updateAltitudeExtremities",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/497",
  "prompt" : "import de.dennisguse.opentracks.data.models.Altitude\npublic void updateAltitudeExtremities(Altitude altitude) {\r\n    if (altitude != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "334",
  "ground_truth" : "        avgHeartRate = heartRate;\r\n    }\r\n}",
  "context" : "public void setAverageHeartRate(HeartRate heartRate) {\r\n    if (heartRate != null) {\r\n        avgHeartRate = heartRate;\r\n    }\r\n}",
  "start_lineno" : "330",
  "methodName" : "setAverageHeartRate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/498",
  "prompt" : "import de.dennisguse.opentracks.data.models.HeartRate\npublic void setAverageHeartRate(HeartRate heartRate) {\r\n    if (heartRate != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "355",
  "ground_truth" : "    }\r\n    totalAltitudeGain_m += gain_m;\r\n}",
  "context" : "@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeGain(float gain_m) {\r\n    if (totalAltitudeGain_m == null) {\r\n        totalAltitudeGain_m = 0f;\r\n    }\r\n    totalAltitudeGain_m += gain_m;\r\n}",
  "start_lineno" : "349",
  "methodName" : "addTotalAltitudeGain",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/499",
  "prompt" : "import de.dennisguse.opentracks.data.models.Altitude\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeGain(float gain_m) {\r\n    if (totalAltitudeGain_m == null) {\r\n        totalAltitudeGain_m = 0f;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "376",
  "ground_truth" : "    }\r\n    totalAltitudeLoss_m += loss_m;\r\n}",
  "context" : "@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeLoss(float loss_m) {\r\n    if (totalAltitudeLoss_m == null) {\r\n        totalAltitudeLoss_m = 0f;\r\n    }\r\n    totalAltitudeLoss_m += loss_m;\r\n}",
  "start_lineno" : "370",
  "methodName" : "addTotalAltitudeLoss",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/500",
  "prompt" : "import de.dennisguse.opentracks.data.models.Altitude\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeLoss(float loss_m) {\r\n    if (totalAltitudeLoss_m == null) {\r\n        totalAltitudeLoss_m = 0f;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\nprivate boolean isIdle;",
  "app_type" : "life",
  "end_lineno" : "384",
  "ground_truth" : "        return true;\r\n    if (!(o instanceof TrackStatistics))\r\n        return false;\r\n    return toString().equals(o.toString());\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof TrackStatistics))\r\n        return false;\r\n    return toString().equals(o.toString());\r\n}",
  "start_lineno" : "378",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java",
  "task_id" : "OpenTracks/501",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStatisticsUpdater.class.getSimpleName();\nprivate final TrackStatistics trackStatistics;\nprivate float averageHeartRateBPM;\nprivate Duration totalHeartRateDuration = Duration.ZERO;",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    stats.merge(currentSegment);\r\n    return stats;\r\n}",
  "context" : "public TrackStatistics getTrackStatistics() {\r\n    // Take a snapshot - we don't want anyone messing with our trackStatistics\r\n    TrackStatistics stats = new TrackStatistics(trackStatistics);\r\n    stats.merge(currentSegment);\r\n    return stats;\r\n}",
  "start_lineno" : "76",
  "methodName" : "getTrackStatistics",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java",
  "task_id" : "OpenTracks/502",
  "prompt" : "public TrackStatistics getTrackStatistics() {\r\n    // Take a snapshot - we don't want anyone messing with our trackStatistics\r\n    TrackStatistics stats = new TrackStatistics(trackStatistics);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStatisticsUpdater.class.getSimpleName();\nprivate final TrackStatistics trackStatistics;\nprivate float averageHeartRateBPM;\nprivate Duration totalHeartRateDuration = Duration.ZERO;",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "    }\r\n    currentSegment.reset(trackPoint.getTime());\r\n    lastTrackPoint = null;\r\n    resetAverageHeartRate();\r\n}",
  "context" : "private void reset(TrackPoint trackPoint) {\r\n    if (currentSegment.isInitialized()) {\r\n        trackStatistics.merge(currentSegment);\r\n    }\r\n    currentSegment.reset(trackPoint.getTime());\r\n    lastTrackPoint = null;\r\n    resetAverageHeartRate();\r\n}",
  "start_lineno" : "167",
  "methodName" : "reset",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java",
  "task_id" : "OpenTracks/503",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nprivate void reset(TrackPoint trackPoint) {\r\n    if (currentSegment.isInitialized()) {\r\n        trackStatistics.merge(currentSegment);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStatisticsUpdater.class.getSimpleName();\nprivate final TrackStatistics trackStatistics;\nprivate float averageHeartRateBPM;\nprivate Duration totalHeartRateDuration = Duration.ZERO;",
  "app_type" : "life",
  "end_lineno" : "180",
  "ground_truth" : "    averageHeartRateBPM = 0.0f;\r\n    totalHeartRateDuration = Duration.ZERO;\r\n}",
  "context" : "private void resetAverageHeartRate() {\r\n    averageHeartRateBPM = 0.0f;\r\n    totalHeartRateDuration = Duration.ZERO;\r\n}",
  "start_lineno" : "177",
  "methodName" : "resetAverageHeartRate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java",
  "task_id" : "OpenTracks/504",
  "prompt" : "import de.dennisguse.opentracks.data.models.HeartRate\nprivate void resetAverageHeartRate() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStatisticsUpdater.class.getSimpleName();\nprivate final TrackStatistics trackStatistics;\nprivate float averageHeartRateBPM;\nprivate Duration totalHeartRateDuration = Duration.ZERO;",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "        currentSegment.setMaxSpeed(currentSpeed);\r\n    }\r\n}",
  "context" : "/**\r\n * Updates a speed reading while assuming the user is moving.\r\n */\r\nprivate void updateSpeed(@NonNull TrackPoint trackPoint) {\r\n    Speed currentSpeed = trackPoint.getSpeed();\r\n    if (currentSpeed.greaterThan(currentSegment.getMaxSpeed())) {\r\n        currentSegment.setMaxSpeed(currentSpeed);\r\n    }\r\n}",
  "start_lineno" : "185",
  "methodName" : "updateSpeed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java",
  "task_id" : "OpenTracks/505",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Speed\nimport androidx.annotation.NonNull\n/**\r\n * Updates a speed reading while assuming the user is moving.\r\n */\r\nprivate void updateSpeed(@NonNull TrackPoint trackPoint) {\r\n    Speed currentSpeed = trackPoint.getSpeed();\r\n    if (currentSpeed.greaterThan(currentSegment.getMaxSpeed())) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackEditActivity.class.getSimpleName();\nprivate static final String ICON_VALUE_KEY = \"icon_value_key\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate Track track;\nprivate ActivityType activityType;\nprivate TrackEditBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(ICON_VALUE_KEY, activityType);\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(ICON_VALUE_KEY, activityType);\r\n}",
  "start_lineno" : "114",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java",
  "task_id" : "OpenTracks/506",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackEditActivity.class.getSimpleName();\nprivate static final String ICON_VALUE_KEY = \"icon_value_key\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate Track track;\nprivate ActivityType activityType;\nprivate TrackEditBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "124",
  "ground_truth" : "    viewBinding = TrackEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = TrackEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "120",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java",
  "task_id" : "OpenTracks/507",
  "prompt" : "import android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackEditActivity.class.getSimpleName();\nprivate static final String ICON_VALUE_KEY = \"icon_value_key\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate Track track;\nprivate ActivityType activityType;\nprivate TrackEditBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "    this.activityType = activityType;\r\n    viewBinding.fields.trackEditActivityTypeIcon.setImageResource(activityType.getIconDrawableId());\r\n}",
  "context" : "private void setActivityTypeIcon(ActivityType activityType) {\r\n    this.activityType = activityType;\r\n    viewBinding.fields.trackEditActivityTypeIcon.setImageResource(activityType.getIconDrawableId());\r\n}",
  "start_lineno" : "126",
  "methodName" : "setActivityTypeIcon",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java",
  "task_id" : "OpenTracks/508",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\nprivate void setActivityTypeIcon(ActivityType activityType) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackEditActivity.class.getSimpleName();\nprivate static final String ICON_VALUE_KEY = \"icon_value_key\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate Track track;\nprivate ActivityType activityType;\nprivate TrackEditBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "    setActivityTypeIcon(activityType);\r\n    viewBinding.fields.trackEditActivityType.setText(getString(activityType.getLocalizedStringId()));\r\n}",
  "context" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    setActivityTypeIcon(activityType);\r\n    viewBinding.fields.trackEditActivityType.setText(getString(activityType.getLocalizedStringId()));\r\n}",
  "start_lineno" : "131",
  "methodName" : "onChooseActivityTypeDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java",
  "task_id" : "OpenTracks/509",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\n@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "    viewBinding.bottomAppBar.performHide(true);\r\n    viewBinding.trackListFabAction.setVisibility(View.INVISIBLE);\r\n    menu.findItem(R.id.list_context_menu_edit).setVisible(isSingleSelection);\r\n    menu.findItem(R.id.list_context_menu_select_all).setVisible(showSelectAll);\r\n}",
  "context" : "@Override\r\npublic void onPrepare(Menu menu, int[] positions, long[] trackIds, boolean showSelectAll) {\r\n    boolean isSingleSelection = trackIds.length == 1;\r\n    viewBinding.bottomAppBar.performHide(true);\r\n    viewBinding.trackListFabAction.setVisibility(View.INVISIBLE);\r\n    menu.findItem(R.id.list_context_menu_edit).setVisible(isSingleSelection);\r\n    menu.findItem(R.id.list_context_menu_select_all).setVisible(showSelectAll);\r\n}",
  "start_lineno" : "91",
  "methodName" : "onPrepare",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/510",
  "prompt" : "@Override\r\npublic void onPrepare(Menu menu, int[] positions, long[] trackIds, boolean showSelectAll) {\r\n    boolean isSingleSelection = trackIds.length == 1;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "    viewBinding.trackListFabAction.setVisibility(View.VISIBLE);\r\n    viewBinding.bottomAppBar.performShow(true);\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    viewBinding.trackListFabAction.setVisibility(View.VISIBLE);\r\n    viewBinding.bottomAppBar.performShow(true);\r\n}",
  "start_lineno" : "107",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/511",
  "prompt" : "@Override\r\npublic void onDestroy() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "217",
  "ground_truth" : "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    recordingStatusConnection.bind(this);\r\n}",
  "context" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    recordingStatusConnection.bind(this);\r\n}",
  "start_lineno" : "211",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/512",
  "prompt" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "229",
  "ground_truth" : "    this.invalidateOptionsMenu();\r\n    loadData();\r\n    // Float button\r\n    setFloatButton();\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    this.invalidateOptionsMenu();\r\n    loadData();\r\n    // Float button\r\n    setFloatButton();\r\n}",
  "start_lineno" : "219",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/513",
  "prompt" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "237",
  "ground_truth" : "    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    recordingStatusConnection.unbind(this);\r\n}",
  "context" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    recordingStatusConnection.unbind(this);\r\n}",
  "start_lineno" : "231",
  "methodName" : "onStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/514",
  "prompt" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "245",
  "ground_truth" : "    recordingStatusConnection = null;\r\n    adapter = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n    recordingStatusConnection = null;\r\n    adapter = null;\r\n}",
  "start_lineno" : "239",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/515",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "251",
  "ground_truth" : "    viewBinding = TrackListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = TrackListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "247",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/516",
  "prompt" : "@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "    ActivityUtils.configureSearchWidget(this, searchMenuItem);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.track_list, menu);\r\n    searchMenuItem = menu.findItem(R.id.track_list_search);\r\n    ActivityUtils.configureSearchWidget(this, searchMenuItem);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "253",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/517",
  "prompt" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.track_list, menu);\r\n    searchMenuItem = menu.findItem(R.id.track_list_search);\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "267",
  "ground_truth" : "    updateGpsMenuItem(gpsStatusValue.isGpsStarted(), recordingStatus.isRecording());\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r\n    updateGpsMenuItem(gpsStatusValue.isGpsStarted(), recordingStatus.isRecording());\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "start_lineno" : "263",
  "methodName" : "onPrepareOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/518",
  "prompt" : "@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "302",
  "ground_truth" : "    }\r\n    return super.onKeyUp(keyCode, event);\r\n}",
  "context" : "@Override\r\npublic boolean onKeyUp(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_SEARCH && searchMenuItem != null) {\r\n        return true;\r\n    }\r\n    return super.onKeyUp(keyCode, event);\r\n}",
  "start_lineno" : "296",
  "methodName" : "onKeyUp",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/519",
  "prompt" : "@Override\r\npublic boolean onKeyUp(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_SEARCH && searchMenuItem != null) {\r\n        return true;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "318",
  "ground_truth" : "        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r\n        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}",
  "start_lineno" : "304",
  "methodName" : "onBackPressed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/520",
  "prompt" : "@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "329",
  "ground_truth" : "        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r\n        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}",
  "start_lineno" : "320",
  "methodName" : "onNewIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/521",
  "prompt" : "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "379",
  "ground_truth" : "        if (startGpsMenuItem.getIcon() instanceof AnimatedVectorDrawable animatedVectorDrawable) {\r\n            animatedVectorDrawable.start();\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Updates the menu items with the icon specified.\r\n *\r\n * @param isGpsStarted true if gps is started\r\n * @param isRecording  true if recording\r\n */\r\n//TODO Check if if can be avoided to call this outside of onGpsStatusChanged()\r\nprivate void updateGpsMenuItem(boolean isGpsStarted, boolean isRecording) {\r\n    MaterialButton startGpsMenuItem = viewBinding.sensorStartButton;\r\n    startGpsMenuItem.setVisibility(!isRecording ? View.VISIBLE : View.INVISIBLE);\r\n    if (!isRecording) {\r\n        startGpsMenuItem.setIcon(AppCompatResources.getDrawable(this, isGpsStarted ? gpsStatusValue.icon : R.drawable.ic_gps_off_24dp));\r\n        if (startGpsMenuItem.getIcon() instanceof AnimatedVectorDrawable animatedVectorDrawable) {\r\n            animatedVectorDrawable.start();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "370",
  "methodName" : "updateGpsMenuItem",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/522",
  "prompt" : "/**\r\n * Updates the menu items with the icon specified.\r\n *\r\n * @param isGpsStarted true if gps is started\r\n * @param isRecording  true if recording\r\n */\r\n//TODO Check if if can be avoided to call this outside of onGpsStatusChanged()\r\nprivate void updateGpsMenuItem(boolean isGpsStarted, boolean isRecording) {\r\n    MaterialButton startGpsMenuItem = viewBinding.sensorStartButton;\r\n    startGpsMenuItem.setVisibility(!isRecording ? View.VISIBLE : View.INVISIBLE);\r\n    if (!isRecording) {\r\n        startGpsMenuItem.setIcon(AppCompatResources.getDrawable(this, isGpsStarted ? gpsStatusValue.icon : R.drawable.ic_gps_off_24dp));\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "436",
  "ground_truth" : "    gpsStatusValue = newStatus;\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n}",
  "context" : "public void onGpsStatusChanged(GpsStatusValue newStatus) {\r\n    gpsStatusValue = newStatus;\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n}",
  "start_lineno" : "433",
  "methodName" : "onGpsStatusChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/523",
  "prompt" : "public void onGpsStatusChanged(GpsStatusValue newStatus) {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "441",
  "ground_truth" : "    viewBinding.trackListFabAction.setImageResource(recordingStatus.isRecording() ? R.drawable.ic_baseline_stop_24 : R.drawable.ic_baseline_record_24);\r\n    viewBinding.trackListFabAction.setBackgroundTintList(ContextCompat.getColorStateList(this, recordingStatus.isRecording() ? R.color.opentracks : R.color.red_dark));\r\n}",
  "context" : "private void setFloatButton() {\r\n    viewBinding.trackListFabAction.setImageResource(recordingStatus.isRecording() ? R.drawable.ic_baseline_stop_24 : R.drawable.ic_baseline_record_24);\r\n    viewBinding.trackListFabAction.setBackgroundTintList(ContextCompat.getColorStateList(this, recordingStatus.isRecording() ? R.color.opentracks : R.color.red_dark));\r\n}",
  "start_lineno" : "438",
  "methodName" : "setFloatButton",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/524",
  "prompt" : "private void setFloatButton() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackListActivity.class.getSimpleName();\nprivate TrackListAdapter adapter;\nprivate TrackListBinding viewBinding;\nprivate GpsStatusValue gpsStatusValue = TrackRecordingService.STATUS_GPS_DEFAULT;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r\n        unitSystem = PreferencesUtils.getUnitSystem();\r\n        if (adapter != null) {\r\n            adapter.updateUnitSystem(unitSystem);\r\n        }\r\n    }\r\n    if (key != null) {\r\n        runOnUiThread(() -> {\r\n            TrackListActivity.this.invalidateOptionsMenu();\r\n            loadData();\r\n        });\r\n    }\r\n};\nprivate String searchQuery;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackListActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackListActivity.this, this::onGpsStatusChanged);\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n};",
  "app_type" : "life",
  "end_lineno" : "447",
  "ground_truth" : "    setFloatButton();\r\n    adapter.updateRecordingStatus(recordingStatus);\r\n}",
  "context" : "private void onRecordingStatusChanged(RecordingStatus status) {\r\n    recordingStatus = status;\r\n    setFloatButton();\r\n    adapter.updateRecordingStatus(recordingStatus);\r\n}",
  "start_lineno" : "443",
  "methodName" : "onRecordingStatusChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java",
  "task_id" : "OpenTracks/525",
  "prompt" : "private void onRecordingStatusChanged(RecordingStatus status) {\r\n    recordingStatus = status;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "    super.onStart();\r\n    trackDataHub.start();\r\n}",
  "context" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    trackDataHub.start();\r\n}",
  "start_lineno" : "111",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/526",
  "prompt" : "@Override\r\nprotected void onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "    if (trackId != null) {\r\n        trackDataHub.loadTrack(trackId);\r\n    }\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    this.invalidateOptionsMenu();\r\n    if (trackId != null) {\r\n        trackDataHub.loadTrack(trackId);\r\n    }\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "start_lineno" : "118",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/527",
  "prompt" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    this.invalidateOptionsMenu();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}",
  "context" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}",
  "start_lineno" : "132",
  "methodName" : "onStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/528",
  "prompt" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "    super.onSaveInstanceState(outState);\r\n    outState.putInt(CURRENT_TAB_TAG_KEY, viewBinding.trackDetailActivityViewPager.getCurrentItem());\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putInt(CURRENT_TAB_TAG_KEY, viewBinding.trackDetailActivityViewPager.getCurrentItem());\r\n}",
  "start_lineno" : "139",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/529",
  "prompt" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "    viewBinding = TrackRecordedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = TrackRecordedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "145",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/530",
  "prompt" : "@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "156",
  "ground_truth" : "    setIntent(intent);\r\n    handleIntent(intent);\r\n}",
  "context" : "@Override\r\npublic void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    setIntent(intent);\r\n    handleIntent(intent);\r\n}",
  "start_lineno" : "151",
  "methodName" : "onNewIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/531",
  "prompt" : "@Override\r\npublic void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "    getMenuInflater().inflate(R.menu.track_detail, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.track_detail, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "158",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/532",
  "prompt" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "169",
  "ground_truth" : "    menu.findItem(R.id.track_detail_resume_track).setVisible(!recordingStatus.isRecording());\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r\n    menu.findItem(R.id.track_detail_markers).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);\r\n    menu.findItem(R.id.track_detail_resume_track).setVisible(!recordingStatus.isRecording());\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "start_lineno" : "164",
  "methodName" : "onPrepareOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/533",
  "prompt" : "@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r\n    menu.findItem(R.id.track_detail_markers).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "254",
  "ground_truth" : "    if (trackId == null) {\r\n        Log.e(TAG, TrackRecordedActivity.class.getSimpleName() + \" needs EXTRA_TRACK_ID.\");\r\n        finish();\r\n    }\r\n}",
  "context" : "private void handleIntent(Intent intent) {\r\n    trackId = intent.getParcelableExtra(EXTRA_TRACK_ID);\r\n    if (trackId == null) {\r\n        Log.e(TAG, TrackRecordedActivity.class.getSimpleName() + \" needs EXTRA_TRACK_ID.\");\r\n        finish();\r\n    }\r\n}",
  "start_lineno" : "248",
  "methodName" : "handleIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/534",
  "prompt" : "private void handleIntent(Intent intent) {\r\n    trackId = intent.getParcelableExtra(EXTRA_TRACK_ID);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "            ChartFragment.newInstance(true);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            StatisticsRecordedFragment.newInstance(trackId);\r\n        case 1 ->\r\n            IntervalsFragment.newInstance(trackId, true);\r\n        case 2 ->\r\n            ChartFragment.newInstance(false);\r\n        case 3 ->\r\n            ChartFragment.newInstance(true);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "start_lineno" : "262",
  "methodName" : "createFragment",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/535",
  "prompt" : "@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            StatisticsRecordedFragment.newInstance(trackId);\r\n        case 1 ->\r\n            IntervalsFragment.newInstance(trackId, true);\r\n        case 2 ->\r\n            ChartFragment.newInstance(false);\r\n        case 3 ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "289",
  "ground_truth" : "            getString(R.string.settings_chart_by_distance);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "context" : "public CharSequence getPageTitle(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            getString(R.string.track_detail_stats_tab);\r\n        case 1 ->\r\n            getString(R.string.track_detail_intervals_tab);\r\n        case 2 ->\r\n            getString(R.string.settings_chart_by_time);\r\n        case 3 ->\r\n            getString(R.string.settings_chart_by_distance);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "start_lineno" : "280",
  "methodName" : "getPageTitle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/536",
  "prompt" : "public CharSequence getPageTitle(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            getString(R.string.track_detail_stats_tab);\r\n        case 1 ->\r\n            getString(R.string.track_detail_intervals_tab);\r\n        case 2 ->\r\n            getString(R.string.settings_chart_by_time);\r\n        case 3 ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackRecordedActivity.class.getSimpleName();\npublic static final String VIEW_TRACK_ICON = \"track_icon\";\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordedBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(TrackRecordedActivity.this, this::onRecordingStatusChanged);",
  "app_type" : "life",
  "end_lineno" : "295",
  "ground_truth" : "    ViewCompat.setTransitionName(viewIcon, TrackRecordedActivity.VIEW_TRACK_ICON);\r\n    startPostponedEnterTransition();\r\n}",
  "context" : "public void startPostponedEnterTransitionWith(View viewIcon) {\r\n    ViewCompat.setTransitionName(viewIcon, TrackRecordedActivity.VIEW_TRACK_ICON);\r\n    startPostponedEnterTransition();\r\n}",
  "start_lineno" : "292",
  "methodName" : "startPostponedEnterTransitionWith",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java",
  "task_id" : "OpenTracks/537",
  "prompt" : "public void startPostponedEnterTransitionWith(View viewIcon) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "    setFullscreenPolicy();\r\n    super.onAttachedToWindow();\r\n}",
  "context" : "@Override\r\npublic void onAttachedToWindow() {\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r\n    setFullscreenPolicy();\r\n    super.onAttachedToWindow();\r\n}",
  "start_lineno" : "153",
  "methodName" : "onAttachedToWindow",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/538",
  "prompt" : "@Override\r\npublic void onAttachedToWindow() {\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);\r\n    } else {\r\n        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);\r\n    }\r\n}",
  "context" : "private void setLockscreenPolicy() {\r\n    boolean showOnLockScreen = PreferencesUtils.shouldShowStatsOnLockscreen();\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\r\n        setShowWhenLocked(showOnLockScreen);\r\n    } else if (showOnLockScreen) {\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);\r\n    } else {\r\n        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);\r\n    }\r\n}",
  "start_lineno" : "161",
  "methodName" : "setLockscreenPolicy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/539",
  "prompt" : "private void setLockscreenPolicy() {\r\n    boolean showOnLockScreen = PreferencesUtils.shouldShowStatsOnLockscreen();\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\r\n        setShowWhenLocked(showOnLockScreen);\r\n    } else if (showOnLockScreen) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "181",
  "ground_truth" : "        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n    } else {\r\n        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n    }\r\n}",
  "context" : "private void setScreenOnPolicy() {\r\n    boolean keepScreenOn = PreferencesUtils.shouldKeepScreenOn();\r\n    if (keepScreenOn) {\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n    } else {\r\n        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n    }\r\n}",
  "start_lineno" : "173",
  "methodName" : "setScreenOnPolicy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/540",
  "prompt" : "private void setScreenOnPolicy() {\r\n    boolean keepScreenOn = PreferencesUtils.shouldKeepScreenOn();\r\n    if (keepScreenOn) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "212",
  "ground_truth" : "    trackRecordingServiceConnection.bind(this);\r\n    trackDataHub.start();\r\n}",
  "context" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    trackRecordingServiceConnection.bind(this);\r\n    trackDataHub.start();\r\n}",
  "start_lineno" : "204",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/541",
  "prompt" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "        trackDataHub.loadTrack(trackId);\r\n        trackDataHub.setRecordingStatus(recordingStatus);\r\n    }\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    invalidateOptionsMenu();\r\n    if (trackId != null) {\r\n        //TODO Pass recordingStatus directly to them\r\n        trackDataHub.loadTrack(trackId);\r\n        trackDataHub.setRecordingStatus(recordingStatus);\r\n    }\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "start_lineno" : "214",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/542",
  "prompt" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    invalidateOptionsMenu();\r\n    if (trackId != null) {\r\n        //TODO Pass recordingStatus directly to them\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "    super.onSaveInstanceState(outState);\r\n    outState.putInt(CURRENT_TAB_TAG_KEY, viewBinding.trackDetailActivityViewPager.getCurrentItem());\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putInt(CURRENT_TAB_TAG_KEY, viewBinding.trackDetailActivityViewPager.getCurrentItem());\r\n}",
  "start_lineno" : "230",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/543",
  "prompt" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}",
  "context" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}",
  "start_lineno" : "236",
  "methodName" : "onStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/544",
  "prompt" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "249",
  "ground_truth" : "    viewBinding = null;\r\n    trackRecordingServiceConnection = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n    trackRecordingServiceConnection = null;\r\n}",
  "start_lineno" : "244",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/545",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "255",
  "ground_truth" : "    viewBinding = TrackRecordingBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = TrackRecordingBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "251",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/546",
  "prompt" : "@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "    getMenuInflater().inflate(R.menu.track_record, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.track_record, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "257",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/547",
  "prompt" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "323",
  "ground_truth" : "    String activityTypeLocalized = getString(activityType.getLocalizedStringId());\r\n    TrackUtils.updateTrack(this, track, null, activityTypeLocalized, null, contentProviderUtils);\r\n}",
  "context" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    String activityTypeLocalized = getString(activityType.getLocalizedStringId());\r\n    TrackUtils.updateTrack(this, track, null, activityTypeLocalized, null, contentProviderUtils);\r\n}",
  "start_lineno" : "318",
  "methodName" : "onChooseActivityTypeDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/548",
  "prompt" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    Track track = contentProviderUtils.getTrack(trackId);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "            ChartFragment.newInstance(true);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            StatisticsRecordingFragment.newInstance();\r\n        case 1 ->\r\n            IntervalsFragment.newInstance(trackId, false);\r\n        case 2 ->\r\n            ChartFragment.newInstance(false);\r\n        case 3 ->\r\n            ChartFragment.newInstance(true);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "start_lineno" : "331",
  "methodName" : "createFragment",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/549",
  "prompt" : "@NonNull\r\n@Override\r\npublic Fragment createFragment(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            StatisticsRecordingFragment.newInstance();\r\n        case 1 ->\r\n            IntervalsFragment.newInstance(trackId, false);\r\n        case 2 ->\r\n            ChartFragment.newInstance(false);\r\n        case 3 ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "358",
  "ground_truth" : "            getString(R.string.settings_chart_by_distance);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "context" : "public CharSequence getPageTitle(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            getString(R.string.track_detail_stats_tab);\r\n        case 1 ->\r\n            getString(R.string.track_detail_intervals_tab);\r\n        case 2 ->\r\n            getString(R.string.settings_chart_by_time);\r\n        case 3 ->\r\n            getString(R.string.settings_chart_by_distance);\r\n        default ->\r\n            throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\r\n    };\r\n}",
  "start_lineno" : "349",
  "methodName" : "getPageTitle",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/550",
  "prompt" : "public CharSequence getPageTitle(int position) {\r\n    return switch(position) {\r\n        case 0 ->\r\n            getString(R.string.track_detail_stats_tab);\r\n        case 1 ->\r\n            getString(R.string.track_detail_intervals_tab);\r\n        case 2 ->\r\n            getString(R.string.settings_chart_by_time);\r\n        case 3 ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate static final String TAG = TrackRecordingActivity.class.getSimpleName();\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate Snackbar snackbar;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\nprivate Track.Id trackId;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate final TrackRecordingServiceConnection.Callback bindChangedCallback = (service, unused) -> {\r\n    service.getRecordingStatusObservable().observe(TrackRecordingActivity.this, this::onRecordingStatusChanged);\r\n    service.getGpsStatusObservable().observe(TrackRecordingActivity.this, this::onGpsStatusChanged);\r\n    if (!service.isRecording()) {\r\n        finish();\r\n        return;\r\n    }\r\n    trackDataHub.loadTrack(trackId);\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n};\nprivate final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_show_on_lockscreen_while_recording_key, key)) {\r\n        setLockscreenPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_keep_screen_on_while_recording_key, key)) {\r\n        setScreenOnPolicy();\r\n    }\r\n    if (PreferencesUtils.isKey(R.string.stats_fullscreen_while_recording_key, key)) {\r\n        setFullscreenPolicy();\r\n    }\r\n    if (key == null)\r\n        return;\r\n    //TODO Should not be necessary\r\n    runOnUiThread(TrackRecordingActivity.this::invalidateOptionsMenu);\r\n};",
  "app_type" : "life",
  "end_lineno" : "371",
  "ground_truth" : "    recordingStatus = status;\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r\n}",
  "context" : "private void onRecordingStatusChanged(RecordingStatus status) {\r\n    if (!status.isRecording()) {\r\n        finish();\r\n    }\r\n    recordingStatus = status;\r\n    trackDataHub.setRecordingStatus(recordingStatus);\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r\n}",
  "start_lineno" : "361",
  "methodName" : "onRecordingStatusChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java",
  "task_id" : "OpenTracks/551",
  "prompt" : "private void onRecordingStatusChanged(RecordingStatus status) {\r\n    if (!status.isRecording()) {\r\n        finish();\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStoppedActivity.class.getSimpleName();\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackStoppedBinding viewBinding;\nprivate Track.Id trackId;\nprivate boolean isDiscarding = false;",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "        return;\r\n    }\r\n    super.onBackPressed();\r\n    resumeTrackAndFinish();\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    if (isDiscarding) {\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n    resumeTrackAndFinish();\r\n}",
  "start_lineno" : "113",
  "methodName" : "onBackPressed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java",
  "task_id" : "OpenTracks/552",
  "prompt" : "@Override\r\npublic void onBackPressed() {\r\n    if (isDiscarding) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStoppedActivity.class.getSimpleName();\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackStoppedBinding viewBinding;\nprivate Track.Id trackId;\nprivate boolean isDiscarding = false;",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "    viewBinding = TrackStoppedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = TrackStoppedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "122",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java",
  "task_id" : "OpenTracks/553",
  "prompt" : "import android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStoppedActivity.class.getSimpleName();\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackStoppedBinding viewBinding;\nprivate Track.Id trackId;\nprivate boolean isDiscarding = false;",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "    setActivityTypeIcon(activityType);\r\n    viewBinding.trackEditActivityType.setText(getString(activityType.getLocalizedStringId()));\r\n}",
  "context" : "@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    setActivityTypeIcon(activityType);\r\n    viewBinding.trackEditActivityType.setText(getString(activityType.getLocalizedStringId()));\r\n}",
  "start_lineno" : "132",
  "methodName" : "onChooseActivityTypeDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java",
  "task_id" : "OpenTracks/554",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\n@Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStoppedActivity.class.getSimpleName();\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackStoppedBinding viewBinding;\nprivate Track.Id trackId;\nprivate boolean isDiscarding = false;",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        startActivity(newIntent);\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n        finish();\r\n    });\r\n}",
  "context" : "private void resumeTrackAndFinish() {\r\n    TrackRecordingServiceConnection.execute(this, (service, connection) -> {\r\n        service.resumeTrack(trackId);\r\n        Intent newIntent = IntentUtils.newIntent(TrackStoppedActivity.this, TrackRecordingActivity.class).putExtra(TrackRecordingActivity.EXTRA_TRACK_ID, trackId);\r\n        startActivity(newIntent);\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n        finish();\r\n    });\r\n}",
  "start_lineno" : "138",
  "methodName" : "resumeTrackAndFinish",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java",
  "task_id" : "OpenTracks/555",
  "prompt" : "import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.services.TrackRecordingServiceConnection\nimport de.dennisguse.opentracks.data.models.Track\nimport android.content.Intent\nprivate void resumeTrackAndFinish() {\r\n    TrackRecordingServiceConnection.execute(this, (service, connection) -> {\r\n        service.resumeTrack(trackId);\r\n        Intent newIntent = IntentUtils.newIntent(TrackStoppedActivity.this, TrackRecordingActivity.class).putExtra(TrackRecordingActivity.EXTRA_TRACK_ID, trackId);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackStoppedActivity.class.getSimpleName();\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackStoppedBinding viewBinding;\nprivate Track.Id trackId;\nprivate boolean isDiscarding = false;",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "    viewBinding.contentLinearLayout.setVisibility(View.GONE);\r\n    viewBinding.loadingLayout.loadingIndeterminate.setVisibility(View.VISIBLE);\r\n}",
  "context" : "@Override\r\nprotected void onDeleteConfirmed() {\r\n    isDiscarding = true;\r\n    viewBinding.loadingLayout.loadingText.setText(getString(R.string.track_discarding));\r\n    viewBinding.contentLinearLayout.setVisibility(View.GONE);\r\n    viewBinding.loadingLayout.loadingIndeterminate.setVisibility(View.VISIBLE);\r\n}",
  "start_lineno" : "151",
  "methodName" : "onDeleteConfirmed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java",
  "task_id" : "OpenTracks/556",
  "prompt" : "@Override\r\nprotected void onDeleteConfirmed() {\r\n    isDiscarding = true;\r\n    viewBinding.loadingLayout.loadingText.setText(getString(R.string.track_discarding));\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final Map<String, AggregatedStatistic> dataMap = new HashMap<>();\nprivate final List<AggregatedStatistic> dataList = new ArrayList<>();\nprivate final String activityTypeLocalized;\nprivate final TrackStatistics trackStatistics;\nprivate int countTracks = 1;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        dataMap.get(activityTypeLocalized).add(track.getTrackStatistics());\r\n    } else {\r\n        dataMap.put(activityTypeLocalized, new AggregatedStatistic(activityTypeLocalized, track.getTrackStatistics()));\r\n    }\r\n}",
  "context" : "@VisibleForTesting\r\npublic void aggregate(@NonNull Track track) {\r\n    String activityTypeLocalized = track.getActivityTypeLocalized();\r\n    if (dataMap.containsKey(activityTypeLocalized)) {\r\n        dataMap.get(activityTypeLocalized).add(track.getTrackStatistics());\r\n    } else {\r\n        dataMap.put(activityTypeLocalized, new AggregatedStatistic(activityTypeLocalized, track.getTrackStatistics()));\r\n    }\r\n}",
  "start_lineno" : "34",
  "methodName" : "aggregate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatistics.java",
  "task_id" : "OpenTracks/557",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.Map\nimport androidx.annotation.VisibleForTesting\nimport androidx.annotation.NonNull\n@VisibleForTesting\r\npublic void aggregate(@NonNull Track track) {\r\n    String activityTypeLocalized = track.getActivityTypeLocalized();\r\n    if (dataMap.containsKey(activityTypeLocalized)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Map<String, AggregatedStatistic> dataMap = new HashMap<>();\nprivate final List<AggregatedStatistic> dataList = new ArrayList<>();\nprivate final String activityTypeLocalized;\nprivate final TrackStatistics trackStatistics;\nprivate int countTracks = 1;",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    trackStatistics.merge(statistics);\r\n    countTracks++;\r\n}",
  "context" : "void add(TrackStatistics statistics) {\r\n    trackStatistics.merge(statistics);\r\n    countTracks++;\r\n}",
  "start_lineno" : "78",
  "methodName" : "add",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatistics.java",
  "task_id" : "OpenTracks/558",
  "prompt" : "import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nvoid add(TrackStatistics statistics) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    } else {\r\n        viewBinding.aggregatedStatsList.setVisibility(View.VISIBLE);\r\n        viewBinding.aggregatedStatsEmptyView.setVisibility(View.GONE);\r\n    }\r\n}",
  "context" : "private void checkListEmpty() {\r\n    if (adapter.getItemCount() == 0) {\r\n        viewBinding.aggregatedStatsList.setVisibility(View.GONE);\r\n        viewBinding.aggregatedStatsEmptyView.setVisibility(View.VISIBLE);\r\n    } else {\r\n        viewBinding.aggregatedStatsList.setVisibility(View.VISIBLE);\r\n        viewBinding.aggregatedStatsEmptyView.setVisibility(View.GONE);\r\n    }\r\n}",
  "start_lineno" : "70",
  "methodName" : "checkListEmpty",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/559",
  "prompt" : "import java.util.List\nimport android.view.View\nprivate void checkListEmpty() {\r\n    if (adapter.getItemCount() == 0) {\r\n        viewBinding.aggregatedStatsList.setVisibility(View.GONE);\r\n        viewBinding.aggregatedStatsEmptyView.setVisibility(View.VISIBLE);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "    super.onSaveInstanceState(outState);\r\n    outState.putBoolean(STATE_ARE_FILTERS_APPLIED, areFiltersApplied);\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putBoolean(STATE_ARE_FILTERS_APPLIED, areFiltersApplied);\r\n}",
  "start_lineno" : "80",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/560",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "    viewBinding = AggregatedStatsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = AggregatedStatsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "86",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/561",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "    clearFilterItem = menu.findItem(R.id.aggregated_statistics_clear_filter);\r\n    filterItem = menu.findItem(R.id.aggregated_statistics_filter);\r\n    setMenuVisibility(areFiltersApplied);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.aggregated_statistics, menu);\r\n    clearFilterItem = menu.findItem(R.id.aggregated_statistics_clear_filter);\r\n    filterItem = menu.findItem(R.id.aggregated_statistics_filter);\r\n    setMenuVisibility(areFiltersApplied);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "92",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/562",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.aggregated_statistics, menu);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    if (clearFilterItem != null && filterItem != null) {\r\n        clearFilterItem.setVisible(this.areFiltersApplied);\r\n        filterItem.setVisible(!this.areFiltersApplied);\r\n    }\r\n}",
  "context" : "private void setMenuVisibility(boolean areFiltersApplied) {\r\n    this.areFiltersApplied = areFiltersApplied;\r\n    if (clearFilterItem != null && filterItem != null) {\r\n        clearFilterItem.setVisible(this.areFiltersApplied);\r\n        filterItem.setVisible(!this.areFiltersApplied);\r\n    }\r\n}",
  "start_lineno" : "119",
  "methodName" : "setMenuVisibility",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/563",
  "prompt" : "import android.view.Menu\nprivate void setMenuVisibility(boolean areFiltersApplied) {\r\n    this.areFiltersApplied = areFiltersApplied;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_IDS = \"track_ids\";\nstatic final String STATE_ARE_FILTERS_APPLIED = \"areFiltersApplied\";\nprivate AggregatedStatsBinding viewBinding;\nprivate AggregatedStatisticsAdapter adapter;\nprivate AggregatedStatisticsModel viewModel;\nprivate final TrackSelection selection = new TrackSelection();\nprivate boolean areFiltersApplied;\nprivate MenuItem filterItem;\nprivate MenuItem clearFilterItem;",
  "app_type" : "life",
  "end_lineno" : "133",
  "ground_truth" : "    filterItems.stream().filter(fi -> fi.isChecked).forEach(fi -> selection.addActivityType(fi.value));\r\n    viewModel.updateSelection(selection);\r\n}",
  "context" : "@Override\r\npublic void onFilterDone(ArrayList<FilterDialogFragment.FilterItem> filterItems, LocalDateTime from, LocalDateTime to) {\r\n    setMenuVisibility(true);\r\n    selection.addDateRange(from.atZone(ZoneId.systemDefault()).toInstant(), to.atZone(ZoneId.systemDefault()).toInstant());\r\n    filterItems.stream().filter(fi -> fi.isChecked).forEach(fi -> selection.addActivityType(fi.value));\r\n    viewModel.updateSelection(selection);\r\n}",
  "start_lineno" : "127",
  "methodName" : "onFilterDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java",
  "task_id" : "OpenTracks/564",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport java.util.ArrayList\nimport java.time.ZoneId\nimport java.time.LocalDateTime\nimport android.view.Menu\n@Override\r\npublic void onFilterDone(ArrayList<FilterDialogFragment.FilterItem> filterItems, LocalDateTime from, LocalDateTime to) {\r\n    setMenuVisibility(true);\r\n    selection.addDateRange(from.atZone(ZoneId.systemDefault()).toInstant(), to.atZone(ZoneId.systemDefault()).toInstant());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private AggregatedStatistics aggregatedStatistics;\nprivate final Context context;\nprivate final AggregatedStatsListItemBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        viewHolder.setSpeed(aggregatedStatistic);\r\n    } else {\r\n        viewHolder.setPace(aggregatedStatistic);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r\n    AggregatedStatistics.AggregatedStatistic aggregatedStatistic = aggregatedStatistics.getItem(position);\r\n    String type = aggregatedStatistic.getActivityTypeLocalized();\r\n    if (ActivityType.findByLocalizedString(context, type).isShowSpeedPreferred()) {\r\n        viewHolder.setSpeed(aggregatedStatistic);\r\n    } else {\r\n        viewHolder.setPace(aggregatedStatistic);\r\n    }\r\n}",
  "start_lineno" : "39",
  "methodName" : "onBindViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java",
  "task_id" : "OpenTracks/565",
  "prompt" : "import de.dennisguse.opentracks.data.models.ActivityType\nimport de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r\n    AggregatedStatistics.AggregatedStatistic aggregatedStatistic = aggregatedStatistics.getItem(position);\r\n    String type = aggregatedStatistic.getActivityTypeLocalized();\r\n    if (ActivityType.findByLocalizedString(context, type).isShowSpeedPreferred()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private AggregatedStatistics aggregatedStatistics;\nprivate final Context context;\nprivate final AggregatedStatsListItemBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "    }\r\n    return aggregatedStatistics.getCount();\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (aggregatedStatistics == null) {\r\n        return 0;\r\n    }\r\n    return aggregatedStatistics.getCount();\r\n}",
  "start_lineno" : "53",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java",
  "task_id" : "OpenTracks/566",
  "prompt" : "@Override\r\npublic int getItemCount() {\r\n    if (aggregatedStatistics == null) {\r\n        return 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AggregatedStatistics aggregatedStatistics;\nprivate final Context context;\nprivate final AggregatedStatsListItemBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "    this.aggregatedStatistics = aggregatedStatistics;\r\n    this.notifyDataSetChanged();\r\n}",
  "context" : "public void swapData(AggregatedStatistics aggregatedStatistics) {\r\n    this.aggregatedStatistics = aggregatedStatistics;\r\n    this.notifyDataSetChanged();\r\n}",
  "start_lineno" : "61",
  "methodName" : "swapData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java",
  "task_id" : "OpenTracks/567",
  "prompt" : "public void swapData(AggregatedStatistics aggregatedStatistics) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AggregatedStatistics aggregatedStatistics;\nprivate final Context context;\nprivate final AggregatedStatsListItemBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "    for (int i = 0; i < aggregatedStatistics.getCount(); i++) {\r\n        categories.add(aggregatedStatistics.getItem(i).getActivityTypeLocalized());\r\n    }\r\n    return categories;\r\n}",
  "context" : "public List<String> getCategories() {\r\n    List<String> categories = new ArrayList<>();\r\n    for (int i = 0; i < aggregatedStatistics.getCount(); i++) {\r\n        categories.add(aggregatedStatistics.getItem(i).getActivityTypeLocalized());\r\n    }\r\n    return categories;\r\n}",
  "start_lineno" : "66",
  "methodName" : "getCategories",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java",
  "task_id" : "OpenTracks/568",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\npublic List<String> getCategories() {\r\n    List<String> categories = new ArrayList<>();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private AggregatedStatistics aggregatedStatistics;\nprivate final Context context;\nprivate final AggregatedStatsListItemBinding viewBinding;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "    String localizedActivityType = aggregatedStatistic.getActivityTypeLocalized();\r\n    return ActivityType.findByLocalizedString(context, localizedActivityType).getIconDrawableId();\r\n}",
  "context" : "private int getIcon(AggregatedStatistics.AggregatedStatistic aggregatedStatistic) {\r\n    String localizedActivityType = aggregatedStatistic.getActivityTypeLocalized();\r\n    return ActivityType.findByLocalizedString(context, localizedActivityType).getIconDrawableId();\r\n}",
  "start_lineno" : "142",
  "methodName" : "getIcon",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java",
  "task_id" : "OpenTracks/569",
  "prompt" : "private int getIcon(AggregatedStatistics.AggregatedStatistic aggregatedStatistic) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private MutableLiveData<AggregatedStatistics> aggregatedStats;",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "        aggregatedStats = new MutableLiveData<>();\r\n        loadAggregatedStats(selection);\r\n    }\r\n    return aggregatedStats;\r\n}",
  "context" : "public LiveData<AggregatedStatistics> getAggregatedStats(@Nullable TrackSelection selection) {\r\n    if (aggregatedStats == null) {\r\n        aggregatedStats = new MutableLiveData<>();\r\n        loadAggregatedStats(selection);\r\n    }\r\n    return aggregatedStats;\r\n}",
  "start_lineno" : "25",
  "methodName" : "getAggregatedStats",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsModel.java",
  "task_id" : "OpenTracks/570",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackSelection\nimport androidx.lifecycle.LiveData\nimport androidx.annotation.Nullable\npublic LiveData<AggregatedStatistics> getAggregatedStats(@Nullable TrackSelection selection) {\r\n    if (aggregatedStats == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private MutableLiveData<AggregatedStatistics> aggregatedStats;",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        List<Track> tracks = selection != null ? contentProviderUtils.getTracks(selection) : contentProviderUtils.getTracks();\r\n        AggregatedStatistics aggregatedStatistics = new AggregatedStatistics(tracks);\r\n        aggregatedStats.postValue(aggregatedStatistics);\r\n    }).start();\r\n}",
  "context" : "private void loadAggregatedStats(TrackSelection selection) {\r\n    new Thread(() -> {\r\n        ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getApplication().getApplicationContext());\r\n        List<Track> tracks = selection != null ? contentProviderUtils.getTracks(selection) : contentProviderUtils.getTracks();\r\n        AggregatedStatistics aggregatedStatistics = new AggregatedStatistics(tracks);\r\n        aggregatedStats.postValue(aggregatedStatistics);\r\n    }).start();\r\n}",
  "start_lineno" : "41",
  "methodName" : "loadAggregatedStats",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsModel.java",
  "task_id" : "OpenTracks/571",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackSelection\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport android.app.Application\nprivate void loadAggregatedStats(TrackSelection selection) {\r\n    new Thread(() -> {\r\n        ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getApplication().getApplicationContext());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String CONFIRM_DELETE_DIALOG_TAG = \"confirmDeleteDialog\";\nprivate static final String KEY_TRACK_IDS = \"trackIds\";\nprivate ConfirmDeleteCaller caller;",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "    bundle.putParcelableArray(KEY_TRACK_IDS, trackIds);\r\n    ConfirmDeleteDialogFragment deleteTrackDialogFragment = new ConfirmDeleteDialogFragment();\r\n    deleteTrackDialogFragment.setArguments(bundle);\r\n    deleteTrackDialogFragment.show(fragmentManager, CONFIRM_DELETE_DIALOG_TAG);\r\n}",
  "context" : "/**\r\n * Create a new instance.\r\n *\r\n * @param trackIds list of track ids to delete.\r\n */\r\npublic static void showDialog(FragmentManager fragmentManager, Track.Id... trackIds) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelableArray(KEY_TRACK_IDS, trackIds);\r\n    ConfirmDeleteDialogFragment deleteTrackDialogFragment = new ConfirmDeleteDialogFragment();\r\n    deleteTrackDialogFragment.setArguments(bundle);\r\n    deleteTrackDialogFragment.show(fragmentManager, CONFIRM_DELETE_DIALOG_TAG);\r\n}",
  "start_lineno" : "48",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\ConfirmDeleteDialogFragment.java",
  "task_id" : "OpenTracks/572",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport androidx.fragment.app.FragmentManager\nimport android.os.Bundle\nimport android.app.Dialog\n/**\r\n * Create a new instance.\r\n *\r\n * @param trackIds list of track ids to delete.\r\n */\r\npublic static void showDialog(FragmentManager fragmentManager, Track.Id... trackIds) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String CONFIRM_DELETE_DIALOG_TAG = \"confirmDeleteDialog\";\nprivate static final String KEY_TRACK_IDS = \"trackIds\";\nprivate ConfirmDeleteCaller caller;",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "        caller = (ConfirmDeleteCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + ConfirmDeleteCaller.class.getSimpleName());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        caller = (ConfirmDeleteCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + ConfirmDeleteCaller.class.getSimpleName());\r\n    }\r\n}",
  "start_lineno" : "57",
  "methodName" : "onAttach",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\ConfirmDeleteDialogFragment.java",
  "task_id" : "OpenTracks/573",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FilterDialogFragment.class.getSimpleName();\npublic static final String KEY_FILTER_ITEMS = \"filterItems\";\nprivate FilterDialogListener filterDialogListener;\nprivate ArrayList<FilterItem> filterItems = new ArrayList<>();\npublic final String id;\npublic final String value;\npublic boolean isChecked;\npublic static final Creator<FilterItem> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public FilterItem createFromParcel(Parcel in) {\r\n        return new FilterItem(in);\r\n    }\r\n\r\n    @Override\r\n    public FilterItem[] newArray(int size) {\r\n        return new FilterItem[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    FilterDialogFragment filterDialogFragment = new FilterDialogFragment();\r\n    filterDialogFragment.show(fragmentManager, TAG);\r\n}",
  "context" : "public static void showDialog(FragmentManager fragmentManager) {\r\n    FilterDialogFragment filterDialogFragment = new FilterDialogFragment();\r\n    filterDialogFragment.show(fragmentManager, TAG);\r\n}",
  "start_lineno" : "36",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\FilterDialogFragment.java",
  "task_id" : "OpenTracks/574",
  "prompt" : "import androidx.fragment.app.FragmentManager\nimport android.app.Dialog\npublic static void showDialog(FragmentManager fragmentManager) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FilterDialogFragment.class.getSimpleName();\npublic static final String KEY_FILTER_ITEMS = \"filterItems\";\nprivate FilterDialogListener filterDialogListener;\nprivate ArrayList<FilterItem> filterItems = new ArrayList<>();\npublic final String id;\npublic final String value;\npublic boolean isChecked;\npublic static final Creator<FilterItem> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public FilterItem createFromParcel(Parcel in) {\r\n        return new FilterItem(in);\r\n    }\r\n\r\n    @Override\r\n    public FilterItem[] newArray(int size) {\r\n        return new FilterItem[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    bundle.putParcelableArrayList(KEY_FILTER_ITEMS, items);\r\n    FilterDialogFragment filterDialogFragment = new FilterDialogFragment();\r\n    filterDialogFragment.setArguments(bundle);\r\n    filterDialogFragment.show(fragmentManager, TAG);\r\n}",
  "context" : "public static void showDialog(FragmentManager fragmentManager, ArrayList<FilterItem> items) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelableArrayList(KEY_FILTER_ITEMS, items);\r\n    FilterDialogFragment filterDialogFragment = new FilterDialogFragment();\r\n    filterDialogFragment.setArguments(bundle);\r\n    filterDialogFragment.show(fragmentManager, TAG);\r\n}",
  "start_lineno" : "41",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\FilterDialogFragment.java",
  "task_id" : "OpenTracks/575",
  "prompt" : "import java.util.ArrayList\nimport androidx.fragment.app.FragmentManager\nimport android.os.Bundle\nimport android.app.Dialog\npublic static void showDialog(FragmentManager fragmentManager, ArrayList<FilterItem> items) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FilterDialogFragment.class.getSimpleName();\npublic static final String KEY_FILTER_ITEMS = \"filterItems\";\nprivate FilterDialogListener filterDialogListener;\nprivate ArrayList<FilterItem> filterItems = new ArrayList<>();\npublic final String id;\npublic final String value;\npublic boolean isChecked;\npublic static final Creator<FilterItem> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public FilterItem createFromParcel(Parcel in) {\r\n        return new FilterItem(in);\r\n    }\r\n\r\n    @Override\r\n    public FilterItem[] newArray(int size) {\r\n        return new FilterItem[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "119",
  "ground_truth" : "        filterDialogListener = (FilterDialogListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + FilterDialogListener.class.getSimpleName());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        filterDialogListener = (FilterDialogListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + FilterDialogListener.class.getSimpleName());\r\n    }\r\n}",
  "start_lineno" : "111",
  "methodName" : "onAttach",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\FilterDialogFragment.java",
  "task_id" : "OpenTracks/576",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FilterDialogFragment.class.getSimpleName();\npublic static final String KEY_FILTER_ITEMS = \"filterItems\";\nprivate FilterDialogListener filterDialogListener;\nprivate ArrayList<FilterItem> filterItems = new ArrayList<>();\npublic final String id;\npublic final String value;\npublic boolean isChecked;\npublic static final Creator<FilterItem> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public FilterItem createFromParcel(Parcel in) {\r\n        return new FilterItem(in);\r\n    }\r\n\r\n    @Override\r\n    public FilterItem[] newArray(int size) {\r\n        return new FilterItem[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "170",
  "ground_truth" : "    dest.writeString(value);\r\n    dest.writeByte((byte) (isChecked ? 1 : 0));\r\n}",
  "context" : "@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(id);\r\n    dest.writeString(value);\r\n    dest.writeByte((byte) (isChecked ? 1 : 0));\r\n}",
  "start_lineno" : "165",
  "methodName" : "writeToParcel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\FilterDialogFragment.java",
  "task_id" : "OpenTracks/577",
  "prompt" : "import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(id);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String LINE_SEPARATOR = \"\\n\";\npublic static final String ITEM_SEPARATOR = \";\";\npublic static final String PROPERTY_SEPARATOR = \",\";",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "    if (csvParts.size() < 3 || !hasValue(csvParts.get(0)) || !isInt(csvParts.get(1))) {\r\n        return null;\r\n    }\r\n    return csvParts;\r\n}",
  "context" : "/**\r\n * @param csvLine Layout description in a CSV format.\r\n * @return All CSV parts from the csvLine or null if it's malformed.\r\n */\r\n@Nullable\r\npublic static List<String> getCsvLineParts(String csvLine) {\r\n    if (csvLine == null) {\r\n        return null;\r\n    }\r\n    // The line must have three items, at least: layout's name, number of columns and one field.\r\n    List<String> csvParts = Arrays.asList(csvLine.split(ITEM_SEPARATOR));\r\n    if (csvParts.size() < 3 || !hasValue(csvParts.get(0)) || !isInt(csvParts.get(1))) {\r\n        return null;\r\n    }\r\n    return csvParts;\r\n}",
  "start_lineno" : "21",
  "methodName" : "getCsvLineParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\CsvLayoutUtils.java",
  "task_id" : "OpenTracks/578",
  "prompt" : "import java.util.List\nimport java.util.Arrays\nimport androidx.annotation.Nullable\n/**\r\n * @param csvLine Layout description in a CSV format.\r\n * @return All CSV parts from the csvLine or null if it's malformed.\r\n */\r\n@Nullable\r\npublic static List<String> getCsvLineParts(String csvLine) {\r\n    if (csvLine == null) {\r\n        return null;\r\n    }\r\n    // The line must have three items, at least: layout's name, number of columns and one field.\r\n    List<String> csvParts = Arrays.asList(csvLine.split(ITEM_SEPARATOR));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String LINE_SEPARATOR = \"\\n\";\npublic static final String ITEM_SEPARATOR = \";\";\npublic static final String PROPERTY_SEPARATOR = \",\";",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "    if (fieldParts.length < 3 || !hasValue(fieldParts[0]) || !hasZeroOneValue(fieldParts[1]) || !hasZeroOneValue(fieldParts[2])) {\r\n        return null;\r\n    }\r\n    return fieldParts;\r\n}",
  "context" : "/**\r\n * @param csvField Layout's field in a CSV format.\r\n */\r\n@Nullable\r\npublic static String[] getCsvFieldParts(@Nullable String csvField) {\r\n    if (csvField == null) {\r\n        return null;\r\n    }\r\n    // Field must have three items: key, is visible (0 or 1), is primary (0 or 1).\r\n    String[] fieldParts = csvField.split(CsvLayoutUtils.PROPERTY_SEPARATOR);\r\n    if (fieldParts.length < 3 || !hasValue(fieldParts[0]) || !hasZeroOneValue(fieldParts[1]) || !hasZeroOneValue(fieldParts[2])) {\r\n        return null;\r\n    }\r\n    return fieldParts;\r\n}",
  "start_lineno" : "39",
  "methodName" : "getCsvFieldParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\CsvLayoutUtils.java",
  "task_id" : "OpenTracks/579",
  "prompt" : "import androidx.annotation.Nullable\n/**\r\n * @param csvField Layout's field in a CSV format.\r\n */\r\n@Nullable\r\npublic static String[] getCsvFieldParts(@Nullable String csvField) {\r\n    if (csvField == null) {\r\n        return null;\r\n    }\r\n    // Field must have three items: key, is visible (0 or 1), is primary (0 or 1).\r\n    String[] fieldParts = csvField.split(CsvLayoutUtils.PROPERTY_SEPARATOR);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String LINE_SEPARATOR = \"\\n\";\npublic static final String ITEM_SEPARATOR = \";\";\npublic static final String PROPERTY_SEPARATOR = \",\";",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "    } catch (NumberFormatException nfe) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
  "context" : "private static boolean isInt(String value) {\r\n    if (value == null || value.isEmpty()) {\r\n        return false;\r\n    }\r\n    try {\r\n        Integer.parseInt(value);\r\n    } catch (NumberFormatException nfe) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "58",
  "methodName" : "isInt",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\CsvLayoutUtils.java",
  "task_id" : "OpenTracks/580",
  "prompt" : "private static boolean isInt(String value) {\r\n    if (value == null || value.isEmpty()) {\r\n        return false;\r\n    }\r\n    try {\r\n        Integer.parseInt(value);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String key;\nprivate boolean isVisible;\nprivate boolean isPrimary;\nprivate final boolean isWide;\npublic static final Creator<DataField> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public DataField createFromParcel(Parcel in) {\r\n        return new DataField(in);\r\n    }\r\n\r\n    @Override\r\n    public DataField[] newArray(int size) {\r\n        return new DataField[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    parcel.writeByte((byte) (isPrimary ? 1 : 0));\r\n    parcel.writeByte((byte) (isWide ? 1 : 0));\r\n}",
  "context" : "@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(key);\r\n    parcel.writeByte((byte) (isVisible ? 1 : 0));\r\n    parcel.writeByte((byte) (isPrimary ? 1 : 0));\r\n    parcel.writeByte((byte) (isWide ? 1 : 0));\r\n}",
  "start_lineno" : "70",
  "methodName" : "writeToParcel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\DataField.java",
  "task_id" : "OpenTracks/581",
  "prompt" : "import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(key);\r\n    parcel.writeByte((byte) (isVisible ? 1 : 0));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final String key;\nprivate boolean isVisible;\nprivate boolean isPrimary;\nprivate final boolean isWide;\npublic static final Creator<DataField> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public DataField createFromParcel(Parcel in) {\r\n        return new DataField(in);\r\n    }\r\n\r\n    @Override\r\n    public DataField[] newArray(int size) {\r\n        return new DataField[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    DataField dataField = (DataField) o;\r\n    return isVisible == dataField.isVisible && isPrimary == dataField.isPrimary && isWide == dataField.isWide && Objects.equals(key, dataField.key);\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    DataField dataField = (DataField) o;\r\n    return isVisible == dataField.isVisible && isPrimary == dataField.isPrimary && isWide == dataField.isWide && Objects.equals(key, dataField.key);\r\n}",
  "start_lineno" : "78",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\DataField.java",
  "task_id" : "OpenTracks/582",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "    dataFields.clear();\r\n    addFields(newFields);\r\n}",
  "context" : "public void replaceAllFields(List<DataField> newFields) {\r\n    dataFields.clear();\r\n    addFields(newFields);\r\n}",
  "start_lineno" : "60",
  "methodName" : "replaceAllFields",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/583",
  "prompt" : "import java.util.List\npublic void replaceAllFields(List<DataField> newFields) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "    result.addFields(dataFields.stream().filter(f -> f.isVisible() == visibility).collect(Collectors.toList()));\r\n    return result;\r\n}",
  "context" : "public RecordingLayout toRecordingLayout(boolean visibility) {\r\n    RecordingLayout result = new RecordingLayout(this.getName());\r\n    result.addFields(dataFields.stream().filter(f -> f.isVisible() == visibility).collect(Collectors.toList()));\r\n    return result;\r\n}",
  "start_lineno" : "69",
  "methodName" : "toRecordingLayout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/584",
  "prompt" : "public RecordingLayout toRecordingLayout(boolean visibility) {\r\n    RecordingLayout result = new RecordingLayout(this.getName());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    DataField dataFieldToMove = dataFields.remove(from);\r\n    dataFields.add(to, dataFieldToMove);\r\n}",
  "context" : "public void moveField(int from, int to) {\r\n    DataField dataFieldToMove = dataFields.remove(from);\r\n    dataFields.add(to, dataFieldToMove);\r\n}",
  "start_lineno" : "75",
  "methodName" : "moveField",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/585",
  "prompt" : "public void moveField(int from, int to) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "    if (fields.isEmpty()) {\r\n        return \"\";\r\n    }\r\n    return getName() + CsvLayoutUtils.ITEM_SEPARATOR + getColumnsPerRow() + CsvLayoutUtils.ITEM_SEPARATOR + fields.stream().map(RecordingLayoutIO::toCsv).collect(Collectors.joining(CsvLayoutUtils.ITEM_SEPARATOR)) + CsvLayoutUtils.ITEM_SEPARATOR;\r\n}",
  "context" : "public String toCsv() {\r\n    List<DataField> fields = getFields();\r\n    if (fields.isEmpty()) {\r\n        return \"\";\r\n    }\r\n    return getName() + CsvLayoutUtils.ITEM_SEPARATOR + getColumnsPerRow() + CsvLayoutUtils.ITEM_SEPARATOR + fields.stream().map(RecordingLayoutIO::toCsv).collect(Collectors.joining(CsvLayoutUtils.ITEM_SEPARATOR)) + CsvLayoutUtils.ITEM_SEPARATOR;\r\n}",
  "start_lineno" : "100",
  "methodName" : "toCsv",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/586",
  "prompt" : "import java.util.List\npublic String toCsv() {\r\n    List<DataField> fields = getFields();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "    parcel.writeInt(columnsPerRow);\r\n    parcel.writeList(dataFields);\r\n}",
  "context" : "@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(name);\r\n    parcel.writeInt(columnsPerRow);\r\n    parcel.writeList(dataFields);\r\n}",
  "start_lineno" : "116",
  "methodName" : "writeToParcel",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/587",
  "prompt" : "import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(name);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int columnsPerRow;\nprivate final List<DataField> dataFields = new ArrayList<>();\npublic static final Creator<RecordingLayout> CREATOR = new Creator<>() {\r\n\r\n    @Override\r\n    public RecordingLayout createFromParcel(Parcel in) {\r\n        return new RecordingLayout(in);\r\n    }\r\n\r\n    @Override\r\n    public RecordingLayout[] newArray(int size) {\r\n        return new RecordingLayout[size];\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    RecordingLayout recordingLayout = (RecordingLayout) o;\r\n    return columnsPerRow == recordingLayout.columnsPerRow && Objects.equals(name, recordingLayout.name) && Objects.equals(dataFields, recordingLayout.dataFields);\r\n}",
  "context" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    RecordingLayout recordingLayout = (RecordingLayout) o;\r\n    return columnsPerRow == recordingLayout.columnsPerRow && Objects.equals(name, recordingLayout.name) && Objects.equals(dataFields, recordingLayout.dataFields);\r\n}",
  "start_lineno" : "123",
  "methodName" : "equals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java",
  "task_id" : "OpenTracks/588",
  "prompt" : "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = RecordingLayout.class.getSimpleName();\nprivate static final String YES_VALUE = \"1\";\nprivate static final String NOT_VALUE = \"0\";",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    String wide = datafield.isWide() ? YES_VALUE : NOT_VALUE;\r\n    return datafield.getKey() + CsvLayoutUtils.PROPERTY_SEPARATOR + visible + CsvLayoutUtils.PROPERTY_SEPARATOR + primary + CsvLayoutUtils.PROPERTY_SEPARATOR + wide;\r\n}",
  "context" : "static String toCsv(DataField datafield) {\r\n    String visible = datafield.isVisible() ? YES_VALUE : NOT_VALUE;\r\n    String primary = datafield.isPrimary() ? YES_VALUE : NOT_VALUE;\r\n    String wide = datafield.isWide() ? YES_VALUE : NOT_VALUE;\r\n    return datafield.getKey() + CsvLayoutUtils.PROPERTY_SEPARATOR + visible + CsvLayoutUtils.PROPERTY_SEPARATOR + primary + CsvLayoutUtils.PROPERTY_SEPARATOR + wide;\r\n}",
  "start_lineno" : "52",
  "methodName" : "toCsv",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayoutIO.java",
  "task_id" : "OpenTracks/589",
  "prompt" : "static String toCsv(DataField datafield) {\r\n    String visible = datafield.isVisible() ? YES_VALUE : NOT_VALUE;\r\n    String primary = datafield.isPrimary() ? YES_VALUE : NOT_VALUE;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SettingsCustomLayoutEditAdapter.class.getSimpleName();\nprivate static final RecordingData demoData;\nprivate RecordingLayout recordingLayout;\nprivate final Context context;\nprivate final SettingsCustomLayoutItemClickListener itemClickListener;\nprivate final Map<String, Callable<StatisticViewHolder<?>>> mapping;\nfinal CustomStatsItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "    CustomStatsItemBinding binding = CustomStatsItemBinding.inflate(LayoutInflater.from(context), parent, false);\r\n    return new SettingsCustomLayoutEditAdapter.ViewHolder(binding);\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    CustomStatsItemBinding binding = CustomStatsItemBinding.inflate(LayoutInflater.from(context), parent, false);\r\n    return new SettingsCustomLayoutEditAdapter.ViewHolder(binding);\r\n}",
  "start_lineno" : "75",
  "methodName" : "onCreateViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java",
  "task_id" : "OpenTracks/590",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SettingsCustomLayoutEditAdapter.class.getSimpleName();\nprivate static final RecordingData demoData;\nprivate RecordingLayout recordingLayout;\nprivate final Context context;\nprivate final SettingsCustomLayoutItemClickListener itemClickListener;\nprivate final Map<String, Callable<StatisticViewHolder<?>>> mapping;\nfinal CustomStatsItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "        return 0;\r\n    } else {\r\n        return recordingLayout.getFields().size();\r\n    }\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (recordingLayout == null) {\r\n        return 0;\r\n    } else {\r\n        return recordingLayout.getFields().size();\r\n    }\r\n}",
  "start_lineno" : "104",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java",
  "task_id" : "OpenTracks/591",
  "prompt" : "@Override\r\npublic int getItemCount() {\r\n    if (recordingLayout == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SettingsCustomLayoutEditAdapter.class.getSimpleName();\nprivate static final RecordingData demoData;\nprivate RecordingLayout recordingLayout;\nprivate final Context context;\nprivate final SettingsCustomLayoutItemClickListener itemClickListener;\nprivate final Map<String, Callable<StatisticViewHolder<?>>> mapping;\nfinal CustomStatsItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "        this.notifyDataSetChanged();\r\n    }\r\n}",
  "context" : "public void swapValues(RecordingLayout data) {\r\n    this.recordingLayout = data;\r\n    if (this.recordingLayout != null) {\r\n        this.notifyDataSetChanged();\r\n    }\r\n}",
  "start_lineno" : "121",
  "methodName" : "swapValues",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java",
  "task_id" : "OpenTracks/592",
  "prompt" : "import de.dennisguse.opentracks.R\npublic void swapValues(RecordingLayout data) {\r\n    this.recordingLayout = data;\r\n    if (this.recordingLayout != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SettingsCustomLayoutEditAdapter.class.getSimpleName();\nprivate static final RecordingData demoData;\nprivate RecordingLayout recordingLayout;\nprivate final Context context;\nprivate final SettingsCustomLayoutItemClickListener itemClickListener;\nprivate final Map<String, Callable<StatisticViewHolder<?>>> mapping;\nfinal CustomStatsItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "    notifyItemMoved(fromPosition, toPosition);\r\n    return recordingLayout;\r\n}",
  "context" : "public RecordingLayout move(int fromPosition, int toPosition) {\r\n    recordingLayout.moveField(fromPosition, toPosition);\r\n    notifyItemMoved(fromPosition, toPosition);\r\n    return recordingLayout;\r\n}",
  "start_lineno" : "128",
  "methodName" : "move",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java",
  "task_id" : "OpenTracks/593",
  "prompt" : "import de.dennisguse.opentracks.R\npublic RecordingLayout move(int fromPosition, int toPosition) {\r\n    recordingLayout.moveField(fromPosition, toPosition);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SettingsCustomLayoutEditAdapter.class.getSimpleName();\nprivate static final RecordingData demoData;\nprivate RecordingLayout recordingLayout;\nprivate final Context context;\nprivate final SettingsCustomLayoutItemClickListener itemClickListener;\nprivate final Map<String, Callable<StatisticViewHolder<?>>> mapping;\nfinal CustomStatsItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "    Optional<DataField> optionalField = recordingLayout.getFields().stream().filter(f -> f.getKey().equals(statTitle)).findFirst();\r\n    optionalField.ifPresent(itemClickListener::onSettingsCustomLayoutItemClicked);\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    String statTitle = (String) view.getTag();\r\n    Optional<DataField> optionalField = recordingLayout.getFields().stream().filter(f -> f.getKey().equals(statTitle)).findFirst();\r\n    optionalField.ifPresent(itemClickListener::onSettingsCustomLayoutItemClicked);\r\n}",
  "start_lineno" : "145",
  "methodName" : "onClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java",
  "task_id" : "OpenTracks/594",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    String statTitle = (String) view.getTag();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "    View view = LayoutInflater.from(context).inflate(R.layout.custom_layout_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    View view = LayoutInflater.from(context).inflate(R.layout.custom_layout_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "start_lineno" : "30",
  "methodName" : "onCreateViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/595",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "    viewHolder.itemView.setTag(recordingLayout.getName());\r\n    viewHolder.title.setText(recordingLayout.getName());\r\n}",
  "context" : "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    SettingsCustomLayoutListAdapter.ViewHolder viewHolder = (SettingsCustomLayoutListAdapter.ViewHolder) holder;\r\n    RecordingLayout recordingLayout = recordingLayoutList.get(position);\r\n    viewHolder.itemView.setTag(recordingLayout.getName());\r\n    viewHolder.title.setText(recordingLayout.getName());\r\n}",
  "start_lineno" : "37",
  "methodName" : "onBindViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/596",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    SettingsCustomLayoutListAdapter.ViewHolder viewHolder = (SettingsCustomLayoutListAdapter.ViewHolder) holder;\r\n    RecordingLayout recordingLayout = recordingLayoutList.get(position);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "    }\r\n    return recordingLayoutList.size();\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (recordingLayoutList == null) {\r\n        return 0;\r\n    }\r\n    return recordingLayoutList.size();\r\n}",
  "start_lineno" : "45",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/597",
  "prompt" : "import java.util.List\n@Override\r\npublic int getItemCount() {\r\n    if (recordingLayoutList == null) {\r\n        return 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "    recordingLayoutList = PreferencesUtils.getAllCustomLayouts();\r\n    notifyDataSetChanged();\r\n}",
  "context" : "public void reloadLayouts() {\r\n    recordingLayoutList = PreferencesUtils.getAllCustomLayouts();\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "57",
  "methodName" : "reloadLayouts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/598",
  "prompt" : "public void reloadLayouts() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}",
  "context" : "public void removeLayout(int position) {\r\n    recordingLayoutList.remove(position);\r\n    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "62",
  "methodName" : "removeLayout",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/599",
  "prompt" : "import java.util.List\npublic void removeLayout(int position) {\r\n    recordingLayoutList.remove(position);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}",
  "context" : "public void restoreItem(RecordingLayout recordingLayout, int position) {\r\n    recordingLayoutList.add(position, recordingLayout);\r\n    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "68",
  "methodName" : "restoreItem",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/600",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\npublic void restoreItem(RecordingLayout recordingLayout, int position) {\r\n    recordingLayoutList.add(position, recordingLayout);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<RecordingLayout> recordingLayoutList;\nprivate final Context context;\nprivate final SettingsCustomLayoutProfileClickListener itemClickListener;\nfinal TextView title;",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "    Optional<RecordingLayout> optionalLayout = recordingLayoutList.stream().filter(layout -> layout.sameName(new RecordingLayout(profile))).findFirst();\r\n    optionalLayout.ifPresent(itemClickListener::onSettingsCustomLayoutProfileClicked);\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    String profile = (String) view.getTag();\r\n    Optional<RecordingLayout> optionalLayout = recordingLayoutList.stream().filter(layout -> layout.sameName(new RecordingLayout(profile))).findFirst();\r\n    optionalLayout.ifPresent(itemClickListener::onSettingsCustomLayoutProfileClicked);\r\n}",
  "start_lineno" : "83",
  "methodName" : "onClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java",
  "task_id" : "OpenTracks/601",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    String profile = (String) view.getTag();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    bundle.putParcelable(TRACK_ID_KEY, trackId);\r\n    IntervalsFragment intervalsFragment = new IntervalsFragment();\r\n    intervalsFragment.setArguments(bundle);\r\n    return intervalsFragment;\r\n}",
  "context" : "/**\r\n * Creates an instance of this class.\r\n *\r\n * @param fromTopToBottom If true then the intervals are shown from top to bottom (the first interval on top). Otherwise the intervals are shown from bottom to top.\r\n * @return IntervalsFragment instance.\r\n */\r\npublic static Fragment newInstance(@NonNull Track.Id trackId, boolean fromTopToBottom) {\r\n    Objects.nonNull(trackId);\r\n    Bundle bundle = new Bundle();\r\n    bundle.putBoolean(FROM_TOP_TO_BOTTOM_KEY, fromTopToBottom);\r\n    bundle.putParcelable(TRACK_ID_KEY, trackId);\r\n    IntervalsFragment intervalsFragment = new IntervalsFragment();\r\n    intervalsFragment.setArguments(bundle);\r\n    return intervalsFragment;\r\n}",
  "start_lineno" : "68",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/602",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.util.Objects\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nimport android.os.Bundle\n/**\r\n * Creates an instance of this class.\r\n *\r\n * @param fromTopToBottom If true then the intervals are shown from top to bottom (the first interval on top). Otherwise the intervals are shown from bottom to top.\r\n * @return IntervalsFragment instance.\r\n */\r\npublic static Fragment newInstance(@NonNull Track.Id trackId, boolean fromTopToBottom) {\r\n    Objects.nonNull(trackId);\r\n    Bundle bundle = new Bundle();\r\n    bundle.putBoolean(FROM_TOP_TO_BOTTOM_KEY, fromTopToBottom);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "    trackId = getArguments().getParcelable(TRACK_ID_KEY);\r\n    if (savedInstanceState != null) {\r\n        selectedInterval = (IntervalStatisticsModel.IntervalOption) savedInstanceState.getSerializable(SELECTED_INTERVAL_KEY);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    stackModeListView = getArguments().getBoolean(FROM_TOP_TO_BOTTOM_KEY, true) ? IntervalStatisticsAdapter.StackMode.STACK_FROM_TOP : IntervalStatisticsAdapter.StackMode.STACK_FROM_BOTTOM;\r\n    trackId = getArguments().getParcelable(TRACK_ID_KEY);\r\n    if (savedInstanceState != null) {\r\n        selectedInterval = (IntervalStatisticsModel.IntervalOption) savedInstanceState.getSerializable(SELECTED_INTERVAL_KEY);\r\n    }\r\n}",
  "start_lineno" : "78",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/603",
  "prompt" : "import de.dennisguse.opentracks.R\nimport java.util.List\nimport androidx.annotation.Nullable\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    stackModeListView = getArguments().getBoolean(FROM_TOP_TO_BOTTOM_KEY, true) ? IntervalStatisticsAdapter.StackMode.STACK_FROM_TOP : IntervalStatisticsAdapter.StackMode.STACK_FROM_BOTTOM;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(SELECTED_INTERVAL_KEY, selectedInterval);\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(SELECTED_INTERVAL_KEY, selectedInterval);\r\n}",
  "start_lineno" : "88",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/604",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "    viewBinding = IntervalListViewBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = IntervalListViewBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "94",
  "methodName" : "onCreateView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/605",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    IntervalStatisticsModel.IntervalOption option = getItem(position);\r\n    String stringValue = formatter.formatDistance(option.getDistance(unitSystem));\r\n    v.setText(stringValue);\r\n    return v;\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n    TextView v = (TextView) super.getView(position, convertView, parent);\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setUnit(unitSystem).build(getContext());\r\n    IntervalStatisticsModel.IntervalOption option = getItem(position);\r\n    String stringValue = formatter.formatDistance(option.getDistance(unitSystem));\r\n    v.setText(stringValue);\r\n    return v;\r\n}",
  "start_lineno" : "111",
  "methodName" : "getView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/606",
  "prompt" : "import de.dennisguse.opentracks.data.models.DistanceFormatter\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\n@NonNull\r\n@Override\r\npublic View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n    TextView v = (TextView) super.getView(position, convertView, parent);\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setUnit(unitSystem).build(getContext());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "        isReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    viewModel = new ViewModelProvider(getActivity()).get(IntervalStatisticsModel.class);\r\n    loadIntervals();\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getContext());\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    if (track != null) {\r\n        isReportSpeed = PreferencesUtils.isReportSpeed(track);\r\n    }\r\n    viewModel = new ViewModelProvider(getActivity()).get(IntervalStatisticsModel.class);\r\n    loadIntervals();\r\n}",
  "start_lineno" : "145",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/607",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport de.dennisguse.opentracks.R\nimport java.util.List\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getContext());\r\n    Track track = contentProviderUtils.getTrack(trackId);\r\n    if (track != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "170",
  "ground_truth" : "    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    if (viewModel != null) {\r\n        viewModel.onPause();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    if (viewModel != null) {\r\n        viewModel.onPause();\r\n    }\r\n}",
  "start_lineno" : "161",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/608",
  "prompt" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "172",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/609",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "    adapter = null;\r\n    viewModel = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    adapter = null;\r\n    viewModel = null;\r\n}",
  "start_lineno" : "178",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/610",
  "prompt" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "199",
  "ground_truth" : "    viewBinding.intervalRate.setText(isReportSpeed ? getString(R.string.stats_speed) : getString(R.string.stats_pace));\r\n    LiveData<List<IntervalStatistics.Interval>> liveData = viewModel.getIntervalStats(trackId, unitSystem, selectedInterval);\r\n    liveData.observe(getActivity(), intervalList -> adapter.swapData(intervalList, unitSystem, isReportSpeed));\r\n    setIntervalsDropdownText();\r\n}",
  "context" : "/**\r\n * Update intervals through {@link IntervalStatisticsModel} view model.\r\n */\r\nprotected synchronized void loadIntervals() {\r\n    if (viewModel == null) {\r\n        return;\r\n    }\r\n    viewBinding.intervalRate.setText(isReportSpeed ? getString(R.string.stats_speed) : getString(R.string.stats_pace));\r\n    LiveData<List<IntervalStatistics.Interval>> liveData = viewModel.getIntervalStats(trackId, unitSystem, selectedInterval);\r\n    liveData.observe(getActivity(), intervalList -> adapter.swapData(intervalList, unitSystem, isReportSpeed));\r\n    setIntervalsDropdownText();\r\n}",
  "start_lineno" : "189",
  "methodName" : "loadIntervals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/611",
  "prompt" : "/**\r\n * Update intervals through {@link IntervalStatisticsModel} view model.\r\n */\r\nprotected synchronized void loadIntervals() {\r\n    if (viewModel == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "210",
  "ground_truth" : "    String stringValue = formatter.formatDistance(option.getDistance(unitSystem));\r\n    viewBinding.intervalsDropdown.setText(stringValue, false);\r\n}",
  "context" : "private void setIntervalsDropdownText() {\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setUnit(unitSystem).build(getContext());\r\n    IntervalStatisticsModel.IntervalOption option = selectedInterval != null ? selectedInterval : IntervalStatisticsModel.IntervalOption.DEFAULT;\r\n    String stringValue = formatter.formatDistance(option.getDistance(unitSystem));\r\n    viewBinding.intervalsDropdown.setText(stringValue, false);\r\n}",
  "start_lineno" : "201",
  "methodName" : "setIntervalsDropdownText",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/612",
  "prompt" : "import de.dennisguse.opentracks.data.models.DistanceFormatter\nprivate void setIntervalsDropdownText() {\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setUnit(unitSystem).build(getContext());\r\n    IntervalStatisticsModel.IntervalOption option = selectedInterval != null ? selectedInterval : IntervalStatisticsModel.IntervalOption.DEFAULT;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalsFragment.class.getSimpleName();\nprivate static final String FROM_TOP_TO_BOTTOM_KEY = \"fromTopToBottom\";\nprivate static final String TRACK_ID_KEY = \"trackId\";\nprivate static final String SELECTED_INTERVAL_KEY = \"selectedIntervalKey\";\nprivate IntervalStatisticsModel viewModel;\nprotected IntervalStatisticsAdapter.StackMode stackModeListView;\nprivate IntervalStatisticsModel.IntervalOption selectedInterval;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate IntervalStatisticsAdapter adapter;\nprivate ArrayAdapter<IntervalStatisticsModel.IntervalOption> intervalsAdapter;\nprivate boolean isReportSpeed;\nprivate IntervalListViewBinding viewBinding;\nprotected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (sharedPreferences, key) -> {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key) || PreferencesUtils.isKey(R.string.stats_rate_key, key)) {\r\n        updateIntervals(PreferencesUtils.getUnitSystem(), selectedInterval);\r\n        if (intervalsAdapter != null) {\r\n            intervalsAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "222",
  "ground_truth" : "    this.selectedInterval = selectedInterval;\r\n    if (update && viewModel != null) {\r\n        viewModel.update(trackId, this.unitSystem, this.selectedInterval);\r\n    }\r\n}",
  "context" : "private synchronized void updateIntervals(UnitSystem unitSystem, IntervalStatisticsModel.IntervalOption selectedInterval) {\r\n    boolean update = unitSystem != this.unitSystem || selectedInterval == null || !selectedInterval.sameMultiplier(this.selectedInterval);\r\n    this.unitSystem = unitSystem;\r\n    this.selectedInterval = selectedInterval;\r\n    if (update && viewModel != null) {\r\n        viewModel.update(trackId, this.unitSystem, this.selectedInterval);\r\n    }\r\n}",
  "start_lineno" : "212",
  "methodName" : "updateIntervals",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java",
  "task_id" : "OpenTracks/613",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nprivate synchronized void updateIntervals(UnitSystem unitSystem, IntervalStatisticsModel.IntervalOption selectedInterval) {\r\n    boolean update = unitSystem != this.unitSystem || selectedInterval == null || !selectedInterval.sameMultiplier(this.selectedInterval);\r\n    this.unitSystem = unitSystem;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private TrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater();\nprivate final List<Interval> intervalList;\nprivate final Distance distanceInterval;\nprivate Interval interval, lastInterval;\nprivate Distance distance = Distance.of(0);\nprivate Duration time = Duration.ofSeconds(0);\nprivate Float gain_m;\nprivate Float loss_m;\nprivate HeartRate avgHeartRate;",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "            return this.intervalList.get(i);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "/**\r\n * Return the last completed interval.\r\n * An interval is complete if its distance is equal to distanceInterval_m.\r\n *\r\n * @return the interval object or null if any interval is completed.\r\n */\r\npublic Interval getLastInterval() {\r\n    if (intervalList.size() == 1 && intervalList.get(0).getDistance().lessThan(distanceInterval)) {\r\n        return null;\r\n    }\r\n    for (int i = intervalList.size() - 1; i >= 0; i--) {\r\n        if (intervalList.get(i).getDistance().greaterOrEqualThan(distanceInterval)) {\r\n            return this.intervalList.get(i);\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "86",
  "methodName" : "getLastInterval",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatistics.java",
  "task_id" : "OpenTracks/614",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\nimport java.util.List\n/**\r\n * Return the last completed interval.\r\n * An interval is complete if its distance is equal to distanceInterval_m.\r\n *\r\n * @return the interval object or null if any interval is completed.\r\n */\r\npublic Interval getLastInterval() {\r\n    if (intervalList.size() == 1 && intervalList.get(0).getDistance().lessThan(distanceInterval)) {\r\n        return null;\r\n    }\r\n    for (int i = intervalList.size() - 1; i >= 0; i--) {\r\n        if (intervalList.get(i).getDistance().greaterOrEqualThan(distanceInterval)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private TrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater();\nprivate final List<Interval> intervalList;\nprivate final Distance distanceInterval;\nprivate Interval interval, lastInterval;\nprivate Distance distance = Distance.of(0);\nprivate Duration time = Duration.ofSeconds(0);\nprivate Float gain_m;\nprivate Float loss_m;\nprivate HeartRate avgHeartRate;",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "    time = trackStatistics.getTotalTime();\r\n    gain_m = trackStatistics.hasTotalAltitudeGain() ? trackStatistics.getTotalAltitudeGain() : gain_m;\r\n    loss_m = trackStatistics.hasTotalAltitudeLoss() ? trackStatistics.getTotalAltitudeLoss() : loss_m;\r\n    avgHeartRate = trackStatistics.getAverageHeartRate();\r\n}",
  "context" : "private void set(TrackStatistics trackStatistics) {\r\n    distance = trackStatistics.getTotalDistance();\r\n    time = trackStatistics.getTotalTime();\r\n    gain_m = trackStatistics.hasTotalAltitudeGain() ? trackStatistics.getTotalAltitudeGain() : gain_m;\r\n    loss_m = trackStatistics.hasTotalAltitudeLoss() ? trackStatistics.getTotalAltitudeLoss() : loss_m;\r\n    avgHeartRate = trackStatistics.getAverageHeartRate();\r\n}",
  "start_lineno" : "180",
  "methodName" : "set",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatistics.java",
  "task_id" : "OpenTracks/615",
  "prompt" : "import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Distance\nprivate void set(TrackStatistics trackStatistics) {\r\n    distance = trackStatistics.getTotalDistance();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<IntervalStatistics.Interval> intervalList;\nprivate final Context context;\nprivate final StackMode stackMode;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean isReportSpeed;\nfinal IntervalStatsListItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "    }\r\n    return intervalList.size();\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (intervalList == null) {\r\n        return 0;\r\n    }\r\n    return intervalList.size();\r\n}",
  "start_lineno" : "68",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsAdapter.java",
  "task_id" : "OpenTracks/616",
  "prompt" : "import java.util.List\n@Override\r\npublic int getItemCount() {\r\n    if (intervalList == null) {\r\n        return 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<IntervalStatistics.Interval> intervalList;\nprivate final Context context;\nprivate final StackMode stackMode;\nprivate UnitSystem unitSystem = UnitSystem.defaultUnitSystem();\nprivate boolean isReportSpeed;\nfinal IntervalStatsListItemBinding viewBinding;",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "    if (data != null) {\r\n        this.notifyDataSetChanged();\r\n    }\r\n    return data;\r\n}",
  "context" : "public List<IntervalStatistics.Interval> swapData(List<IntervalStatistics.Interval> data, UnitSystem unitSystem, boolean isReportSpeed) {\r\n    this.unitSystem = unitSystem;\r\n    this.isReportSpeed = isReportSpeed;\r\n    intervalList = data;\r\n    if (data != null) {\r\n        this.notifyDataSetChanged();\r\n    }\r\n    return data;\r\n}",
  "start_lineno" : "76",
  "methodName" : "swapData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsAdapter.java",
  "task_id" : "OpenTracks/617",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport java.util.List\npublic List<IntervalStatistics.Interval> swapData(List<IntervalStatistics.Interval> data, UnitSystem unitSystem, boolean isReportSpeed) {\r\n    this.unitSystem = unitSystem;\r\n    this.isReportSpeed = isReportSpeed;\r\n    intervalList = data;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalStatisticsModel.class.getSimpleName();\nprivate MutableLiveData<List<IntervalStatistics.Interval>> intervalsLiveData;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance distanceInterval;\nprivate final ContentResolver contentResolver;\nprivate ContentObserver trackPointsTableObserver;\nprivate TrackPoint.Id lastTrackPointId;\nprivate final Executor executor = Executors.newSingleThreadExecutor();\nprivate HandlerThread handlerThread;\nprivate Handler handler;\nstatic final IntervalOption DEFAULT = OPTION_1;\nprivate final double multiplier;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        handlerThread.getLooper().quit();\r\n        handlerThread = null;\r\n    }\r\n    handler = null;\r\n}",
  "context" : "@Override\r\nprotected void onCleared() {\r\n    super.onCleared();\r\n    if (trackPointsTableObserver != null) {\r\n        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n        trackPointsTableObserver = null;\r\n    }\r\n    if (handlerThread != null) {\r\n        handlerThread.getLooper().quit();\r\n        handlerThread = null;\r\n    }\r\n    handler = null;\r\n}",
  "start_lineno" : "54",
  "methodName" : "onCleared",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java",
  "task_id" : "OpenTracks/618",
  "prompt" : "import android.database.ContentObserver\n@Override\r\nprotected void onCleared() {\r\n    super.onCleared();\r\n    if (trackPointsTableObserver != null) {\r\n        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n        trackPointsTableObserver = null;\r\n    }\r\n    if (handlerThread != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalStatisticsModel.class.getSimpleName();\nprivate MutableLiveData<List<IntervalStatistics.Interval>> intervalsLiveData;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance distanceInterval;\nprivate final ContentResolver contentResolver;\nprivate ContentObserver trackPointsTableObserver;\nprivate TrackPoint.Id lastTrackPointId;\nprivate final Executor executor = Executors.newSingleThreadExecutor();\nprivate HandlerThread handlerThread;\nprivate Handler handler;\nstatic final IntervalOption DEFAULT = OPTION_1;\nprivate final double multiplier;",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "            lastTrackPointId = intervalStatistics.addTrackPoints(trackPointIterator);\r\n            intervalsLiveData.postValue(intervalStatistics.getIntervalList());\r\n        }\r\n    });\r\n}",
  "context" : "private void loadIntervalStatistics(Track.Id trackId) {\r\n    executor.execute(() -> {\r\n        ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getApplication());\r\n        try (TrackPointIterator trackPointIterator = contentProviderUtils.getTrackPointLocationIterator(trackId, lastTrackPointId)) {\r\n            lastTrackPointId = intervalStatistics.addTrackPoints(trackPointIterator);\r\n            intervalsLiveData.postValue(intervalStatistics.getIntervalList());\r\n        }\r\n    });\r\n}",
  "start_lineno" : "92",
  "methodName" : "loadIntervalStatistics",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java",
  "task_id" : "OpenTracks/619",
  "prompt" : "import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackPointIterator\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport android.app.Application\nprivate void loadIntervalStatistics(Track.Id trackId) {\r\n    executor.execute(() -> {\r\n        ContentProviderUtils contentProviderUtils = new ContentProviderUtils(getApplication());\r\n        try (TrackPointIterator trackPointIterator = contentProviderUtils.getTrackPointLocationIterator(trackId, lastTrackPointId)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalStatisticsModel.class.getSimpleName();\nprivate MutableLiveData<List<IntervalStatistics.Interval>> intervalsLiveData;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance distanceInterval;\nprivate final ContentResolver contentResolver;\nprivate ContentObserver trackPointsTableObserver;\nprivate TrackPoint.Id lastTrackPointId;\nprivate final Executor executor = Executors.newSingleThreadExecutor();\nprivate HandlerThread handlerThread;\nprivate Handler handler;\nstatic final IntervalOption DEFAULT = OPTION_1;\nprivate final double multiplier;",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n    }\r\n}",
  "context" : "public void onPause() {\r\n    if (trackPointsTableObserver != null) {\r\n        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n    }\r\n}",
  "start_lineno" : "102",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java",
  "task_id" : "OpenTracks/620",
  "prompt" : "public void onPause() {\r\n    if (trackPointsTableObserver != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntervalStatisticsModel.class.getSimpleName();\nprivate MutableLiveData<List<IntervalStatistics.Interval>> intervalsLiveData;\nprivate IntervalStatistics intervalStatistics;\nprivate Distance distanceInterval;\nprivate final ContentResolver contentResolver;\nprivate ContentObserver trackPointsTableObserver;\nprivate TrackPoint.Id lastTrackPointId;\nprivate final Executor executor = Executors.newSingleThreadExecutor();\nprivate HandlerThread handlerThread;\nprivate Handler handler;\nstatic final IntervalOption DEFAULT = OPTION_1;\nprivate final double multiplier;",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "    lastTrackPointId = null;\r\n    distanceInterval = interval.getDistance(unitSystem);\r\n    intervalStatistics = new IntervalStatistics(distanceInterval);\r\n    loadIntervalStatistics(trackId);\r\n}",
  "context" : "public void update(Track.Id trackId, UnitSystem unitSystem, @Nullable IntervalOption interval) {\r\n    if (interval == null) {\r\n        interval = IntervalOption.DEFAULT;\r\n    }\r\n    lastTrackPointId = null;\r\n    distanceInterval = interval.getDistance(unitSystem);\r\n    intervalStatistics = new IntervalStatistics(distanceInterval);\r\n    loadIntervalStatistics(trackId);\r\n}",
  "start_lineno" : "108",
  "methodName" : "update",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java",
  "task_id" : "OpenTracks/621",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.Nullable\npublic void update(Track.Id trackId, UnitSystem unitSystem, @Nullable IntervalOption interval) {\r\n    if (interval == null) {\r\n        interval = IntervalOption.DEFAULT;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String DELETE_MARKER_DIALOG_TAG = \"deleteMarkerDialog\";\nprivate static final String KEY_MARKER_IDS = \"markerIds\";\nprivate DeleteMarkerCaller caller;",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "    bundle.putParcelableArray(KEY_MARKER_IDS, markerIds);\r\n    DeleteMarkerDialogFragment deleteMarkerDialogFragment = new DeleteMarkerDialogFragment();\r\n    deleteMarkerDialogFragment.setArguments(bundle);\r\n    deleteMarkerDialogFragment.show(fragmentManager, DELETE_MARKER_DIALOG_TAG);\r\n}",
  "context" : "public static void showDialog(FragmentManager fragmentManager, Marker.Id... markerIds) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelableArray(KEY_MARKER_IDS, markerIds);\r\n    DeleteMarkerDialogFragment deleteMarkerDialogFragment = new DeleteMarkerDialogFragment();\r\n    deleteMarkerDialogFragment.setArguments(bundle);\r\n    deleteMarkerDialogFragment.show(fragmentManager, DELETE_MARKER_DIALOG_TAG);\r\n}",
  "start_lineno" : "45",
  "methodName" : "showDialog",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\DeleteMarkerDialogFragment.java",
  "task_id" : "OpenTracks/622",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport androidx.fragment.app.FragmentManager\nimport android.os.Bundle\nimport android.app.Dialog\npublic static void showDialog(FragmentManager fragmentManager, Marker.Id... markerIds) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String DELETE_MARKER_DIALOG_TAG = \"deleteMarkerDialog\";\nprivate static final String KEY_MARKER_IDS = \"markerIds\";\nprivate DeleteMarkerCaller caller;",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        caller = (DeleteMarkerCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + DeleteMarkerCaller.class.getSimpleName());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        caller = (DeleteMarkerCaller) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context + \" must implement \" + DeleteMarkerCaller.class.getSimpleName());\r\n    }\r\n}",
  "start_lineno" : "54",
  "methodName" : "onAttach",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\DeleteMarkerDialogFragment.java",
  "task_id" : "OpenTracks/623",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String TAG = MarkerDetailActivity.class.getSimpleName();\nprivate MarkerDetailActivityBinding viewBinding;\nprivate List<Marker.Id> markerIds;",
  "app_type" : "life",
  "end_lineno" : "110",
  "ground_truth" : "    viewBinding.markerDetailToolbar.setTitle(markerAdapter.getPageTitle(position));\r\n    //                viewBinding.bottomAppBarLayout.bottomAppBarTitle.setText(markerAdapter.getPageTitle(position)); TOOD\r\n}",
  "context" : "@Override\r\npublic void onPageSelected(int position) {\r\n    viewBinding.markerDetailToolbar.setTitle(markerAdapter.getPageTitle(position));\r\n    //                viewBinding.bottomAppBarLayout.bottomAppBarTitle.setText(markerAdapter.getPageTitle(position)); TOOD\r\n}",
  "start_lineno" : "106",
  "methodName" : "onPageSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailActivity.java",
  "task_id" : "OpenTracks/624",
  "prompt" : "@Override\r\npublic void onPageSelected(int position) {\r",
  "type" : "android",
  "actions" : "de.dennisguse.opentracks.MarkerDetails"
}, {
  "variables" : "public static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String TAG = MarkerDetailActivity.class.getSimpleName();\nprivate MarkerDetailActivityBinding viewBinding;\nprivate List<Marker.Id> markerIds;",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "    viewBinding = MarkerDetailActivityBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = MarkerDetailActivityBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "121",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailActivity.java",
  "task_id" : "OpenTracks/625",
  "prompt" : "@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : "de.dennisguse.opentracks.MarkerDetails"
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "    viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n    viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n}",
  "context" : "@Override\r\npublic void onAnimationEnd(Animation anim) {\r\n    viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n    viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n}",
  "start_lineno" : "84",
  "methodName" : "onAnimationEnd",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/626",
  "prompt" : "import android.view.animation.Animation\n@Override\r\npublic void onAnimationEnd(Animation anim) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "    bundle.putParcelable(KEY_MARKER_ID, markerId);\r\n    MarkerDetailFragment fragment = new MarkerDetailFragment();\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "context" : "public static MarkerDetailFragment newInstance(Marker.Id markerId) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putParcelable(KEY_MARKER_ID, markerId);\r\n    MarkerDetailFragment fragment = new MarkerDetailFragment();\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "start_lineno" : "95",
  "methodName" : "newInstance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/627",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport androidx.fragment.app.Fragment\nimport android.os.Bundle\npublic static MarkerDetailFragment newInstance(Marker.Id markerId) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "    }\r\n    contentProviderUtils = new ContentProviderUtils(getActivity());\r\n    handler = new Handler();\r\n    setHasOptionsMenu(true);\r\n}",
  "context" : "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    markerId = getArguments().getParcelable(KEY_MARKER_ID);\r\n    if (markerId == null) {\r\n        Log.d(TAG, \"invalid marker id\");\r\n        getParentFragmentManager().popBackStack();\r\n        return;\r\n    }\r\n    contentProviderUtils = new ContentProviderUtils(getActivity());\r\n    handler = new Handler();\r\n    setHasOptionsMenu(true);\r\n}",
  "start_lineno" : "104",
  "methodName" : "onCreate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/628",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.fragment.app.Fragment\nimport android.util.Log\nimport android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    markerId = getArguments().getParcelable(KEY_MARKER_ID);\r\n    if (markerId == null) {\r\n        Log.d(TAG, \"invalid marker id\");\r\n        getParentFragmentManager().popBackStack();\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "    // Need to update the marker in case returning after an edit\r\n    updateMarker(true);\r\n    updateUi();\r\n    updateMenuItems();\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    // Need to update the marker in case returning after an edit\r\n    updateMarker(true);\r\n    updateUi();\r\n    updateMenuItems();\r\n}",
  "start_lineno" : "135",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/629",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "    super.onPause();\r\n    handler.removeCallbacks(hideText);\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    handler.removeCallbacks(hideText);\r\n}",
  "start_lineno" : "145",
  "methodName" : "onPause",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/630",
  "prompt" : "@Override\r\npublic void onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    viewBinding = null;\r\n}",
  "start_lineno" : "151",
  "methodName" : "onDestroyView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/631",
  "prompt" : "import android.view.View\n@Override\r\npublic void onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "    markerId = null;\r\n    marker = null;\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    markerId = null;\r\n    marker = null;\r\n}",
  "start_lineno" : "157",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/632",
  "prompt" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "176",
  "ground_truth" : "        } else {\r\n            handler.removeCallbacks(hideText);\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void setMenuVisibility(boolean menuVisible) {\r\n    super.setMenuVisibility(menuVisible);\r\n    // View pager caches the neighboring fragments in the resumed state.\r\n    // If becoming visible from the resumed state, update the UI to display the text above the image.\r\n    if (isResumed()) {\r\n        if (menuVisible) {\r\n            updateUi();\r\n        } else {\r\n            handler.removeCallbacks(hideText);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "164",
  "methodName" : "setMenuVisibility",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/633",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\nimport android.view.Menu\n@Override\r\npublic void setMenuVisibility(boolean menuVisible) {\r\n    super.setMenuVisibility(menuVisible);\r\n    // View pager caches the neighboring fragments in the resumed state.\r\n    // If becoming visible from the resumed state, update the UI to display the text above the image.\r\n    if (isResumed()) {\r\n        if (menuVisible) {\r\n            updateUi();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "    updateMarker(false);\r\n    updateMenuItems();\r\n}",
  "context" : "@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.marker_detail, menu);\r\n    shareMarkerImageMenuItem = menu.findItem(R.id.marker_detail_share);\r\n    updateMarker(false);\r\n    updateMenuItems();\r\n}",
  "start_lineno" : "178",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/634",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.MenuInflater\nimport android.view.Menu\n@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.marker_detail, menu);\r\n    shareMarkerImageMenuItem = menu.findItem(R.id.marker_detail_share);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "189",
  "ground_truth" : "    if (shareMarkerImageMenuItem != null)\r\n        shareMarkerImageMenuItem.setVisible(marker.hasPhoto());\r\n}",
  "context" : "private void updateMenuItems() {\r\n    if (shareMarkerImageMenuItem != null)\r\n        shareMarkerImageMenuItem.setVisible(marker.hasPhoto());\r\n}",
  "start_lineno" : "186",
  "methodName" : "updateMenuItems",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/635",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\nprivate void updateMenuItems() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "232",
  "ground_truth" : "            Log.d(TAG, \"marker is null\");\r\n            getParentFragmentManager().popBackStack();\r\n        }\r\n    }\r\n}",
  "context" : "private void updateMarker(boolean refresh) {\r\n    if (refresh || marker == null) {\r\n        marker = contentProviderUtils.getMarker(markerId);\r\n        if (marker == null) {\r\n            Log.d(TAG, \"marker is null\");\r\n            getParentFragmentManager().popBackStack();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "224",
  "methodName" : "updateMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/636",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nprivate void updateMarker(boolean refresh) {\r\n    if (refresh || marker == null) {\r\n        marker = contentProviderUtils.getMarker(markerId);\r\n        if (marker == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerDetailFragment.class.getSimpleName();\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate static final Duration HIDE_TEXT_DELAY = Duration.ofSeconds(4);\nprivate MenuItem shareMarkerImageMenuItem;\nprivate ContentProviderUtils contentProviderUtils;\nprivate Handler handler;\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate MarkerDetailFragmentBinding viewBinding;\nprivate final Runnable hideText = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.fadeout);\r\n        animation.setAnimationListener(new AnimationListener() {\r\n\r\n            @Override\r\n            public void onAnimationStart(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation anim) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation anim) {\r\n                viewBinding.markerDetailMarkerTextGradient.setVisibility(View.GONE);\r\n                viewBinding.markerDetailMarkerInfo.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        viewBinding.markerDetailMarkerTextGradient.startAnimation(animation);\r\n        viewBinding.markerDetailMarkerInfo.startAnimation(animation);\r\n    }\r\n};",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "    String value = \"[\" + getString(R.string.stats_latitude) + \" \" + StringUtils.formatCoordinate(getContext(), marker.getLatitude()) + \", \" + getString(R.string.stats_longitude) + \" \" + StringUtils.formatCoordinate(getContext(), marker.getLongitude()) + \"]\";\r\n    ListItemUtils.setTextView(getActivity(), viewBinding.markerDetailMarkerLocation, value, addShadow);\r\n}",
  "context" : "private void setLocation(boolean addShadow) {\r\n    String value = \"[\" + getString(R.string.stats_latitude) + \" \" + StringUtils.formatCoordinate(getContext(), marker.getLatitude()) + \", \" + getString(R.string.stats_longitude) + \" \" + StringUtils.formatCoordinate(getContext(), marker.getLongitude()) + \"]\";\r\n    ListItemUtils.setTextView(getActivity(), viewBinding.markerDetailMarkerLocation, value, addShadow);\r\n}",
  "start_lineno" : "254",
  "methodName" : "setLocation",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java",
  "task_id" : "OpenTracks/637",
  "prompt" : "private void setLocation(boolean addShadow) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "    viewBinding = MarkerEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = MarkerEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "85",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/638",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "    } catch (IllegalStateException e) {\r\n        Log.e(TAG, \"Unable to add marker.\", e);\r\n        return null;\r\n    }\r\n}",
  "context" : "private Marker.Id createNewMarker(TrackRecordingService trackRecordingService) {\r\n    try {\r\n        Marker.Id marker = trackRecordingService.insertMarker(\"\", \"\", \"\", null);\r\n        if (marker == null) {\r\n            Toast.makeText(this, R.string.marker_add_error, Toast.LENGTH_LONG).show();\r\n            return null;\r\n        }\r\n        return marker;\r\n    } catch (IllegalStateException e) {\r\n        Log.e(TAG, \"Unable to add marker.\", e);\r\n        return null;\r\n    }\r\n}",
  "start_lineno" : "177",
  "methodName" : "createNewMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/639",
  "prompt" : "import de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport android.widget.Toast\nprivate Marker.Id createNewMarker(TrackRecordingService trackRecordingService) {\r\n    try {\r\n        Marker.Id marker = trackRecordingService.insertMarker(\"\", \"\", \"\", null);\r\n        if (marker == null) {\r\n            Toast.makeText(this, R.string.marker_add_error, Toast.LENGTH_LONG).show();\r\n            return null;\r\n        }\r\n        return marker;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "217",
  "ground_truth" : "    viewBinding = null;\r\n    viewModel = null;\r\n    takePictureFromGallery = null;\r\n    takePictureFromCamera = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    trackId = null;\r\n    viewBinding = null;\r\n    viewModel = null;\r\n    takePictureFromGallery = null;\r\n    takePictureFromCamera = null;\r\n}",
  "start_lineno" : "208",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/640",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    trackId = null;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "227",
  "ground_truth" : "    if (cameraPhotoUri != null) {\r\n        outState.putString(CAMERA_PHOTO_URI_KEY, cameraPhotoUri.toString());\r\n    }\r\n    outState.putParcelable(NEW_MARKER_ID, marker.getId());\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (cameraPhotoUri != null) {\r\n        outState.putString(CAMERA_PHOTO_URI_KEY, cameraPhotoUri.toString());\r\n    }\r\n    outState.putParcelable(NEW_MARKER_ID, marker.getId());\r\n}",
  "start_lineno" : "219",
  "methodName" : "onSaveInstanceState",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/641",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "239",
  "ground_truth" : "    insertPhotoMenuItem.setVisible(hasCamera);\r\n    insertGalleryImgMenuItem = menu.findItem(R.id.marker_edit_insert_gallery_img);\r\n    hideAndShowOptions();\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.marker_edit, menu);\r\n    insertPhotoMenuItem = menu.findItem(R.id.marker_edit_insert_photo);\r\n    insertPhotoMenuItem.setVisible(hasCamera);\r\n    insertGalleryImgMenuItem = menu.findItem(R.id.marker_edit_insert_gallery_img);\r\n    hideAndShowOptions();\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "229",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/642",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.marker_edit, menu);\r\n    insertPhotoMenuItem = menu.findItem(R.id.marker_edit_insert_photo);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "254",
  "ground_truth" : "        createMarkerWithGalleryImage();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "context" : "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.marker_edit_insert_photo) {\r\n        createMarkerWithPicture();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_gallery_img) {\r\n        createMarkerWithGalleryImage();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "start_lineno" : "241",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/643",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.marker_edit_insert_photo) {\r\n        createMarkerWithPicture();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_gallery_img) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "268",
  "ground_truth" : "        insertPhotoMenuItem.setVisible(!isPhotoSet);\r\n        insertGalleryImgMenuItem.setVisible(!isPhotoSet);\r\n    }\r\n    viewBinding.markerEditPhotoDelete.setVisibility(isPhotoSet ? View.VISIBLE : View.GONE);\r\n}",
  "context" : "/**\r\n * Checks and hide/shows all buttons/options about marker photo options.\r\n * <p>\r\n * If a photo is set then one's options are shown, otherwise another ones are shown.\r\n */\r\nprivate void hideAndShowOptions() {\r\n    boolean isPhotoSet = (marker != null && marker.hasPhoto());\r\n    if (insertPhotoMenuItem != null && insertGalleryImgMenuItem != null) {\r\n        insertPhotoMenuItem.setVisible(!isPhotoSet);\r\n        insertGalleryImgMenuItem.setVisible(!isPhotoSet);\r\n    }\r\n    viewBinding.markerEditPhotoDelete.setVisibility(isPhotoSet ? View.VISIBLE : View.GONE);\r\n}",
  "start_lineno" : "261",
  "methodName" : "hideAndShowOptions",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/644",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\n/**\r\n * Checks and hide/shows all buttons/options about marker photo options.\r\n * <p>\r\n * If a photo is set then one's options are shown, otherwise another ones are shown.\r\n */\r\nprivate void hideAndShowOptions() {\r\n    boolean isPhotoSet = (marker != null && marker.hasPhoto());\r\n    if (insertPhotoMenuItem != null && insertGalleryImgMenuItem != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "287",
  "ground_truth" : "    } catch (IOException e) {\r\n        Log.e(TAG, e.getMessage());\r\n        Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "private void setMarkerImageView(@NonNull Uri uri) {\r\n    try (ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(uri, \"r\")) {\r\n        FileDescriptor fd = pfd.getFileDescriptor();\r\n        Bitmap bitmap = BitmapFactory.decodeFileDescriptor(fd);\r\n        viewBinding.markerEditPhoto.setImageBitmap(bitmap);\r\n        hideAndShowOptions();\r\n    } catch (IOException e) {\r\n        Log.e(TAG, e.getMessage());\r\n        Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "277",
  "methodName" : "setMarkerImageView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/645",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport java.io.FileDescriptor\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.ParcelFileDescriptor\nimport android.net.Uri\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nprivate void setMarkerImageView(@NonNull Uri uri) {\r\n    try (ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(uri, \"r\")) {\r\n        FileDescriptor fd = pfd.getFileDescriptor();\r\n        Bitmap bitmap = BitmapFactory.decodeFileDescriptor(fd);\r\n        viewBinding.markerEditPhoto.setImageBitmap(bitmap);\r\n        hideAndShowOptions();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "298",
  "ground_truth" : "        takePictureFromCamera.launch(intentAndPhotoUri.first);\r\n    } catch (ActivityNotFoundException e) {\r\n        Toast.makeText(this, R.string.no_compatible_camera_installed, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "private void createMarkerWithPicture() {\r\n    Pair<Intent, Uri> intentAndPhotoUri = MarkerUtils.createTakePictureIntent(this, getTrackId());\r\n    cameraPhotoUri = intentAndPhotoUri.second;\r\n    try {\r\n        takePictureFromCamera.launch(intentAndPhotoUri.first);\r\n    } catch (ActivityNotFoundException e) {\r\n        Toast.makeText(this, R.string.no_compatible_camera_installed, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "289",
  "methodName" : "createMarkerWithPicture",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/646",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport android.util.Pair\nimport android.net.Uri\nimport android.content.Intent\nprivate void createMarkerWithPicture() {\r\n    Pair<Intent, Uri> intentAndPhotoUri = MarkerUtils.createTakePictureIntent(this, getTrackId());\r\n    cameraPhotoUri = intentAndPhotoUri.second;\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\npublic static final String EXTRA_MARKER_ID = \"marker_id\";\nprivate static final String CAMERA_PHOTO_URI_KEY = \"camera_photo_uri_key\";\nprivate static final String NEW_MARKER_ID = \"new_marker_id\";\nprivate static final String TAG = MarkerEditActivity.class.getSimpleName();\nprivate Track.Id trackId;\nprivate Marker marker;\nprivate MenuItem insertPhotoMenuItem;\nprivate MenuItem insertGalleryImgMenuItem;\nprivate boolean hasCamera;\nprivate Uri cameraPhotoUri;\nprivate ActivityResultLauncher<Intent> takePictureFromCamera;\nprivate ActivityResultLauncher<PickVisualMediaRequest> takePictureFromGallery;\nprivate MarkerEditViewModel viewModel;",
  "app_type" : "life",
  "end_lineno" : "309",
  "ground_truth" : "        takePictureFromGallery.launch(request);\r\n    } catch (ActivityNotFoundException e) {\r\n        Toast.makeText(this, R.string.no_compatible_gallery_installed, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "private void createMarkerWithGalleryImage() {\r\n    PickVisualMediaRequest request = new PickVisualMediaRequest.Builder().setMediaType(ActivityResultContracts.PickVisualMedia.ImageOnly.INSTANCE).build();\r\n    try {\r\n        takePictureFromGallery.launch(request);\r\n    } catch (ActivityNotFoundException e) {\r\n        Toast.makeText(this, R.string.no_compatible_gallery_installed, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "300",
  "methodName" : "createMarkerWithGalleryImage",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java",
  "task_id" : "OpenTracks/647",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.activity.result.PickVisualMediaRequest\nprivate void createMarkerWithGalleryImage() {\r\n    PickVisualMediaRequest request = new PickVisualMediaRequest.Builder().setMediaType(ActivityResultContracts.PickVisualMedia.ImageOnly.INSTANCE).build();\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        }\r\n        markerData.postValue(marker);\r\n    }\r\n    return markerData;\r\n}",
  "context" : "public LiveData<Marker> getMarkerData(@NonNull Marker.Id markerId) {\r\n    if (markerData == null) {\r\n        markerData = new MutableLiveData<>();\r\n        Marker marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\r\n        if (marker.hasPhoto()) {\r\n            photoOriginalUri = marker.getPhotoURI();\r\n        }\r\n        markerData.postValue(marker);\r\n    }\r\n    return markerData;\r\n}",
  "start_lineno" : "36",
  "methodName" : "getMarkerData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/648",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport de.dennisguse.opentracks.R\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.LiveData\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.app.Application\npublic LiveData<Marker> getMarkerData(@NonNull Marker.Id markerId) {\r\n    if (markerData == null) {\r\n        markerData = new MutableLiveData<>();\r\n        Marker marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\r\n        if (marker.hasPhoto()) {\r\n            photoOriginalUri = marker.getPhotoURI();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    if (marker == null) {\r\n        throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\r\n    }\r\n    return marker;\r\n}",
  "context" : "@NonNull\r\nprivate Marker getMarker() throws NoSuchElementException {\r\n    Marker marker = markerData != null ? markerData.getValue() : null;\r\n    if (marker == null) {\r\n        throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\r\n    }\r\n    return marker;\r\n}",
  "start_lineno" : "50",
  "methodName" : "getMarker",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/649",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport java.util.NoSuchElementException\nimport androidx.annotation.NonNull\n@NonNull\r\nprivate Marker getMarker() throws NoSuchElementException {\r\n    Marker marker = markerData != null ? markerData.getValue() : null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "    File photoFile = MarkerUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\r\n    if (photoFile != null) {\r\n        FileUtils.deleteDirectoryRecurse(photoFile);\r\n    }\r\n}",
  "context" : "private void deletePhoto(@Nullable Uri photoUri) {\r\n    if (photoUri == null) {\r\n        return;\r\n    }\r\n    File photoFile = MarkerUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\r\n    if (photoFile != null) {\r\n        FileUtils.deleteDirectoryRecurse(photoFile);\r\n    }\r\n}",
  "start_lineno" : "59",
  "methodName" : "deletePhoto",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/650",
  "prompt" : "import androidx.annotation.Nullable\nimport android.net.Uri\nprivate void deletePhoto(@Nullable Uri photoUri) {\r\n    if (photoUri == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        deletePhoto(marker.getPhotoURI());\r\n    }\r\n}",
  "context" : "private void deletePhoto(Marker marker) {\r\n    if (marker.hasPhoto()) {\r\n        deletePhoto(marker.getPhotoURI());\r\n    }\r\n}",
  "start_lineno" : "70",
  "methodName" : "deletePhoto",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/651",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nprivate void deletePhoto(Marker marker) {\r\n    if (marker.hasPhoto()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        marker.setCategory(category);\r\n        marker.setDescription(description);\r\n        markerData.postValue(marker);\r\n    }\r\n}",
  "context" : "public void onPhotoDelete(String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    if (marker.hasPhoto()) {\r\n        if (!marker.getPhotoURI().equals(photoOriginalUri)) {\r\n            deletePhoto(marker.getPhotoURI());\r\n        }\r\n        marker.setPhotoUrl(null);\r\n        marker.setName(name);\r\n        marker.setCategory(category);\r\n        marker.setDescription(description);\r\n        markerData.postValue(marker);\r\n    }\r\n}",
  "start_lineno" : "76",
  "methodName" : "onPhotoDelete",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/652",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport android.net.Uri\npublic void onPhotoDelete(String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    if (marker.hasPhoto()) {\r\n        if (!marker.getPhotoURI().equals(photoOriginalUri)) {\r\n            deletePhoto(marker.getPhotoURI());\r\n        }\r\n        marker.setPhotoUrl(null);\r\n        marker.setName(name);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "    marker.setName(name);\r\n    marker.setCategory(category);\r\n    marker.setDescription(description);\r\n    markerData.postValue(marker);\r\n}",
  "context" : "public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    marker.setPhotoUrl(photoUri.toString());\r\n    marker.setName(name);\r\n    marker.setCategory(category);\r\n    marker.setDescription(description);\r\n    markerData.postValue(marker);\r\n}",
  "start_lineno" : "90",
  "methodName" : "onNewCameraPhoto",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/653",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.net.Uri\npublic void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    marker.setPhotoUrl(photoUri.toString());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "    new ContentProviderUtils(getApplication()).updateMarker(getApplication(), marker);\r\n    if (photoOriginalUri != null && (!marker.hasPhoto() || !photoOriginalUri.equals(marker.getPhotoURI()))) {\r\n        deletePhoto(photoOriginalUri);\r\n    }\r\n}",
  "context" : "public void onDone(String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    marker.setName(name);\r\n    marker.setCategory(category);\r\n    marker.setDescription(description);\r\n    new ContentProviderUtils(getApplication()).updateMarker(getApplication(), marker);\r\n    if (photoOriginalUri != null && (!marker.hasPhoto() || !photoOriginalUri.equals(marker.getPhotoURI()))) {\r\n        deletePhoto(photoOriginalUri);\r\n    }\r\n}",
  "start_lineno" : "119",
  "methodName" : "onDone",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java",
  "task_id" : "OpenTracks/654",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\npublic void onDone(String name, String category, String description) {\r\n    Marker marker = getMarker();\r\n    marker.setName(name);\r\n    marker.setCategory(category);\r\n    marker.setDescription(description);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "    super.onStart();\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "context" : "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    trackRecordingServiceConnection.bind(this);\r\n}",
  "start_lineno" : "119",
  "methodName" : "onStart",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/655",
  "prompt" : "@Override\r\nprotected void onStart() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "    this.invalidateOptionsMenu();\r\n    loadData();\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    trackRecordingServiceConnection.bind(this);\r\n    this.invalidateOptionsMenu();\r\n    loadData();\r\n}",
  "start_lineno" : "125",
  "methodName" : "onResume",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/656",
  "prompt" : "import de.dennisguse.opentracks.R\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    trackRecordingServiceConnection.bind(this);\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "    super.onStop();\r\n    trackRecordingServiceConnection.unbind(this);\r\n}",
  "context" : "@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    trackRecordingServiceConnection.unbind(this);\r\n}",
  "start_lineno" : "133",
  "methodName" : "onStop",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/657",
  "prompt" : "@Override\r\nprotected void onStop() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "145",
  "ground_truth" : "    adapter = null;\r\n    contentProviderUtils = null;\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r\n    adapter = null;\r\n    contentProviderUtils = null;\r\n}",
  "start_lineno" : "139",
  "methodName" : "onDestroy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/658",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "151",
  "ground_truth" : "    viewBinding = MarkerListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "context" : "@Override\r\nprotected View getRootView() {\r\n    viewBinding = MarkerListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}",
  "start_lineno" : "147",
  "methodName" : "getRootView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/659",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "163",
  "ground_truth" : "    insertMarkerMenuItem = menu.findItem(R.id.marker_list_insert_marker);\r\n    searchMenuItem = menu.findItem(R.id.marker_list_search);\r\n    ActivityUtils.configureSearchWidget(this, searchMenuItem);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.marker_list, menu);\r\n    insertMarkerMenuItem = menu.findItem(R.id.marker_list_insert_marker);\r\n    searchMenuItem = menu.findItem(R.id.marker_list_search);\r\n    ActivityUtils.configureSearchWidget(this, searchMenuItem);\r\n    return super.onCreateOptionsMenu(menu);\r\n}",
  "start_lineno" : "153",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/660",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.marker_list, menu);\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "169",
  "ground_truth" : "    insertMarkerMenuItem.setVisible(trackId != null && trackId.equals(recordingStatus.trackId()));\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "context" : "@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r\n    insertMarkerMenuItem.setVisible(trackId != null && trackId.equals(recordingStatus.trackId()));\r\n    return super.onPrepareOptionsMenu(menu);\r\n}",
  "start_lineno" : "165",
  "methodName" : "onPrepareOptionsMenu",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/661",
  "prompt" : "import android.view.Menu\n@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "180",
  "ground_truth" : "        startActivity(intent);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "context" : "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (trackId != null && item.getItemId() == R.id.marker_list_insert_marker) {\r\n        Intent intent = IntentUtils.newIntent(this, MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_TRACK_ID, trackId);\r\n        startActivity(intent);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}",
  "start_lineno" : "171",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/662",
  "prompt" : "import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (trackId != null && item.getItemId() == R.id.marker_list_insert_marker) {\r\n        Intent intent = IntentUtils.newIntent(this, MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_TRACK_ID, trackId);\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "247",
  "ground_truth" : "        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r\n        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}",
  "start_lineno" : "233",
  "methodName" : "onBackPressed",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/663",
  "prompt" : "import androidx.appcompat.widget.SearchView\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "public static final String EXTRA_TRACK_ID = \"track_id\";\nprivate ContentProviderUtils contentProviderUtils;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate Track.Id trackId;\nprivate MarkerListAdapter adapter;\nprivate MarkerListBinding viewBinding;\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate final TrackRecordingServiceConnection.Callback bindCallback = (service, unused) -> service.getRecordingStatusObservable().observe(MarkerListActivity.this, this::onRecordingStatusChanged);\nprivate MenuItem insertMarkerMenuItem;\nprivate MenuItem searchMenuItem;\nprivate String searchQuery;",
  "app_type" : "life",
  "end_lineno" : "258",
  "ground_truth" : "        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r\n        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}",
  "start_lineno" : "249",
  "methodName" : "onNewIntent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java",
  "task_id" : "OpenTracks/664",
  "prompt" : "import de.dennisguse.opentracks.R\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r",
  "type" : "android",
  "actions" : "android.intent.action.SEARCH"
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.marker_list_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.marker_list_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "start_lineno" : "80",
  "methodName" : "onCreateViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/665",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    ViewHolder viewHolder = (ViewHolder) holder;\r\n    viewHolder.bind(markers.get(position));\r\n}",
  "context" : "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r\n    viewHolder.bind(markers.get(position));\r\n}",
  "start_lineno" : "87",
  "methodName" : "onBindViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/666",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "    }\r\n    return markers.size();\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (markers == null) {\r\n        return 0;\r\n    }\r\n    return markers.size();\r\n}",
  "start_lineno" : "94",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/667",
  "prompt" : "@Override\r\npublic int getItemCount() {\r\n    if (markers == null) {\r\n        return 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "    this.markers = markers;\r\n    this.notifyDataSetChanged();\r\n}",
  "context" : "public void swapData(List<Marker> markers) {\r\n    this.markers = markers;\r\n    this.notifyDataSetChanged();\r\n}",
  "start_lineno" : "102",
  "methodName" : "swapData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/668",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\npublic void swapData(List<Marker> markers) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "    actionMode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r\n    actionMode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}",
  "start_lineno" : "107",
  "methodName" : "onCreateActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/669",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\r\n    selectionMode = true;\r\n    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}",
  "start_lineno" : "113",
  "methodName" : "onPrepareActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/670",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\r\n    selectionMode = true;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\r\n    if (actionModeCallback.onClick(menuItem.getItemId(), null, getCheckedIds())) {\r\n        actionMode.finish();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "120",
  "methodName" : "onActionItemClicked",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/671",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\r\n    if (actionModeCallback.onClick(menuItem.getItemId(), null, getCheckedIds())) {\r\n        actionMode.finish();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}",
  "context" : "@Override\r\npublic void onDestroyActionMode(ActionMode actionMode) {\r\n    selectionMode = false;\r\n    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}",
  "start_lineno" : "128",
  "methodName" : "onDestroyActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/672",
  "prompt" : "import androidx.appcompat.view.ActionMode\n@Override\r\npublic void onDestroyActionMode(ActionMode actionMode) {\r\n    selectionMode = false;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "    for (int i = 0; i < recyclerView.getChildCount(); i++) {\r\n        ViewHolder holder = (ViewHolder) recyclerView.getChildViewHolder(recyclerView.getChildAt(i));\r\n        holder.setSelected(isSelected);\r\n    }\r\n}",
  "context" : "public void setAllSelected(boolean isSelected) {\r\n    if (isSelected) {\r\n        for (Marker marker : markers) {\r\n            selection.put((int) marker.getId().id(), true);\r\n        }\r\n    } else {\r\n        selection.clear();\r\n    }\r\n    for (int i = 0; i < recyclerView.getChildCount(); i++) {\r\n        ViewHolder holder = (ViewHolder) recyclerView.getChildViewHolder(recyclerView.getChildAt(i));\r\n        holder.setSelected(isSelected);\r\n    }\r\n}",
  "start_lineno" : "137",
  "methodName" : "setAllSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/673",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\npublic void setAllSelected(boolean isSelected) {\r\n    if (isSelected) {\r\n        for (Marker marker : markers) {\r\n            selection.put((int) marker.getId().id(), true);\r\n        }\r\n    } else {\r\n        selection.clear();\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}",
  "context" : "private long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r\n            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}",
  "start_lineno" : "152",
  "methodName" : "getCheckedIds",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/674",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nprivate long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "212",
  "ground_truth" : "    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}",
  "context" : "public void setSelected(boolean isSelected) {\r\n    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}",
  "start_lineno" : "209",
  "methodName" : "setSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/675",
  "prompt" : "public void setSelected(boolean isSelected) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "    } else {\r\n        Intent intent = IntentUtils.newIntent(context, MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, marker.getId());\r\n        context.startActivity(intent);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    if (selectionMode) {\r\n        setSelected(!view.isActivated());\r\n        actionMode.invalidate();\r\n    } else {\r\n        Intent intent = IntentUtils.newIntent(context, MarkerDetailActivity.class).putExtra(MarkerDetailActivity.EXTRA_MARKER_ID, marker.getId());\r\n        context.startActivity(intent);\r\n    }\r\n}",
  "start_lineno" : "218",
  "methodName" : "onClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/676",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    if (selectionMode) {\r\n        setSelected(!view.isActivated());\r\n        actionMode.invalidate();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = MarkerListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate List<Marker> markers;\nprivate final SparseBooleanArray selection;\nprivate boolean selectionMode;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final ExecutorListViewService<Marker.Id> executorService = new ExecutorListViewService<>(128);\nprivate final LruCache<Marker.Id, Bitmap> memoryCache;\nprivate final MarkerListItemBinding viewBinding;\nprivate final View view;\nprivate Marker marker;",
  "app_type" : "life",
  "end_lineno" : "239",
  "ground_truth" : "    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View view) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(MarkerListAdapter.this);\r\n    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "230",
  "methodName" : "onLongClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java",
  "task_id" : "OpenTracks/677",
  "prompt" : "import de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View view) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(MarkerListAdapter.this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\nstatic final int ICON_ID = R.drawable.ic_marker_orange_pushpin_with_shadow;\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "    File file = new File(dir, FileUtils.buildUniqueFileName(dir, fileName, JPEG_EXTENSION));\r\n    return file.getAbsolutePath();\r\n}",
  "context" : "@VisibleForTesting(otherwise = 3)\r\npublic static String getImageUrl(Context context, Track.Id trackId) {\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    String fileName = SimpleDateFormat.getDateTimeInstance().format(new Date());\r\n    File file = new File(dir, FileUtils.buildUniqueFileName(dir, fileName, JPEG_EXTENSION));\r\n    return file.getAbsolutePath();\r\n}",
  "start_lineno" : "60",
  "methodName" : "getImageUrl",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerUtils.java",
  "task_id" : "OpenTracks/678",
  "prompt" : "import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.io.File\nimport androidx.annotation.VisibleForTesting\nimport android.content.Context\n@VisibleForTesting(otherwise = 3)\r\npublic static String getImageUrl(Context context, Track.Id trackId) {\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    String fileName = SimpleDateFormat.getDateTimeInstance().format(new Date());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\nstatic final int ICON_ID = R.drawable.ic_marker_orange_pushpin_with_shadow;\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "    if (!file.exists()) {\r\n        return null;\r\n    }\r\n    return file;\r\n}",
  "context" : "/**\r\n * Checks that there is a file inside track photo directory whose name is the same that uri file.\r\n * If there is a file inside photo directory whose name is the same that uri then returns File. Otherwise returns null.\r\n *\r\n * @param context the Context.\r\n * @param trackId the id of the Track.\r\n * @param uri     the uri to check.\r\n * @return File object or null.\r\n */\r\npublic static File getPhotoFileIfExists(Context context, Track.Id trackId, Uri uri) {\r\n    if (uri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = uri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r\n        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    File file = new File(dir, filename);\r\n    if (!file.exists()) {\r\n        return null;\r\n    }\r\n    return file;\r\n}",
  "start_lineno" : "79",
  "methodName" : "getPhotoFileIfExists",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerUtils.java",
  "task_id" : "OpenTracks/679",
  "prompt" : "import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.io.File\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\n/**\r\n * Checks that there is a file inside track photo directory whose name is the same that uri file.\r\n * If there is a file inside photo directory whose name is the same that uri then returns File. Otherwise returns null.\r\n *\r\n * @param context the Context.\r\n * @param trackId the id of the Track.\r\n * @param uri     the uri to check.\r\n * @return File object or null.\r\n */\r\npublic static File getPhotoFileIfExists(Context context, Track.Id trackId, Uri uri) {\r\n    if (uri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = uri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r\n        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    File file = new File(dir, filename);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\nstatic final int ICON_ID = R.drawable.ic_marker_orange_pushpin_with_shadow;\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    return new File(dir, filename);\r\n}",
  "context" : "@Nullable\r\npublic static File buildInternalPhotoFile(Context context, Track.Id trackId, @NonNull Uri fileNameUri) {\r\n    if (fileNameUri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = fileNameUri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r\n        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    return new File(dir, filename);\r\n}",
  "start_lineno" : "100",
  "methodName" : "buildInternalPhotoFile",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerUtils.java",
  "task_id" : "OpenTracks/680",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\n@Nullable\r\npublic static File buildInternalPhotoFile(Context context, Track.Id trackId, @NonNull Uri fileNameUri) {\r\n    if (fileNameUri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = fileNameUri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.track_list_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.track_list_item, parent, false);\r\n    return new ViewHolder(view);\r\n}",
  "start_lineno" : "65",
  "methodName" : "onCreateViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/681",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "    cursor.moveToPosition(position);\r\n    viewHolder.bind(cursor);\r\n}",
  "context" : "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r\n    cursor.moveToPosition(position);\r\n    viewHolder.bind(cursor);\r\n}",
  "start_lineno" : "72",
  "methodName" : "onBindViewHolder",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/682",
  "prompt" : "import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "    }\r\n    return cursor.getCount();\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (cursor == null) {\r\n        return 0;\r\n    }\r\n    return cursor.getCount();\r\n}",
  "start_lineno" : "80",
  "methodName" : "getItemCount",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/683",
  "prompt" : "@Override\r\npublic int getItemCount() {\r\n    if (cursor == null) {\r\n        return 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "    this.cursor = cursor;\r\n    this.notifyDataSetChanged();\r\n}",
  "context" : "public void swapData(Cursor cursor) {\r\n    this.cursor = cursor;\r\n    this.notifyDataSetChanged();\r\n}",
  "start_lineno" : "88",
  "methodName" : "swapData",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/684",
  "prompt" : "import android.database.Cursor\npublic void swapData(Cursor cursor) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "    mode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\r\n    mode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}",
  "start_lineno" : "101",
  "methodName" : "onCreateActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/685",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n    selectionMode = true;\r\n    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}",
  "start_lineno" : "107",
  "methodName" : "onPrepareActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/686",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n    selectionMode = true;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n    if (actionModeCallback.onClick(item.getItemId(), null, getCheckedIds())) {\r\n        mode.finish();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "115",
  "methodName" : "onActionItemClicked",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/687",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n    if (actionModeCallback.onClick(item.getItemId(), null, getCheckedIds())) {\r\n        mode.finish();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}",
  "context" : "@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    selectionMode = false;\r\n    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}",
  "start_lineno" : "123",
  "methodName" : "onDestroyActionMode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/688",
  "prompt" : "import androidx.appcompat.view.ActionMode\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    selectionMode = false;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "160",
  "ground_truth" : "            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}",
  "context" : "private long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r\n            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}",
  "start_lineno" : "150",
  "methodName" : "getCheckedIds",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/689",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nprivate long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}",
  "context" : "public void setSelected(boolean isSelected) {\r\n    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}",
  "start_lineno" : "239",
  "methodName" : "setSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/690",
  "prompt" : "public void setSelected(boolean isSelected) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = TrackListAdapter.class.getSimpleName();\nprivate final AppCompatActivity context;\nprivate final RecyclerView recyclerView;\nprivate final SparseBooleanArray selection = new SparseBooleanArray();\nprivate RecordingStatus recordingStatus;\nprivate UnitSystem unitSystem;\nprivate Cursor cursor;\nprivate boolean selectionMode = false;\nprivate ActivityUtils.ContextualActionModeCallback actionModeCallback;\nprivate ActionMode actionMode;\nprivate final TrackListItemBinding viewBinding;\nprivate final View view;\nprivate Track.Id trackId;",
  "app_type" : "life",
  "end_lineno" : "282",
  "ground_truth" : "    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View v) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(TrackListAdapter.this);\r\n    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "273",
  "methodName" : "onLongClick",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java",
  "task_id" : "OpenTracks/691",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(TrackListAdapter.this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ActivityUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        vibrator.vibrate(VibrationEffect.createOneShot(milliseconds, VibrationEffect.DEFAULT_AMPLITUDE));\r\n    } else {\r\n        vibrator.vibrate(milliseconds);\r\n    }\r\n}",
  "context" : "public static void vibrate(@NonNull Context context, int milliseconds) {\r\n    final Vibrator vibrator = (Vibrator) context.getSystemService(VIBRATOR_SERVICE);\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n        vibrator.vibrate(VibrationEffect.createOneShot(milliseconds, VibrationEffect.DEFAULT_AMPLITUDE));\r\n    } else {\r\n        vibrator.vibrate(milliseconds);\r\n    }\r\n}",
  "start_lineno" : "35",
  "methodName" : "vibrate",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ActivityUtils.java",
  "task_id" : "OpenTracks/692",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Vibrator\nimport android.os.Build\nimport android.content.Context\nimport android.content.Context.VIBRATOR_SERVICE\npublic static void vibrate(@NonNull Context context, int milliseconds) {\r\n    final Vibrator vibrator = (Vibrator) context.getSystemService(VIBRATOR_SERVICE);\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "        notifyDataSetChanged();\r\n    } else {\r\n        notifyDataSetInvalidated();\r\n    }\r\n}",
  "context" : "protected void publishResults(CharSequence constraint, FilterResults results) {\r\n    if (ArrayAdapterFilterDisabled.this.getCount() > 0) {\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyDataSetInvalidated();\r\n    }\r\n}",
  "start_lineno" : "27",
  "methodName" : "publishResults",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ArrayAdapterFilterDisabled.java",
  "task_id" : "OpenTracks/693",
  "prompt" : "import android.widget.Filter\nimport android.widget.ArrayAdapter\nprotected void publishResults(CharSequence constraint, FilterResults results) {\r\n    if (ArrayAdapterFilterDisabled.this.getCount() > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<T> enqueueObjects = new ArrayList<>();\nprivate final ExecutorService executorService;",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "    enqueueObjects.clear();\r\n    executorService.shutdown();\r\n}",
  "context" : "public void shutdown() {\r\n    enqueueObjects.clear();\r\n    executorService.shutdown();\r\n}",
  "start_lineno" : "24",
  "methodName" : "shutdown",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java",
  "task_id" : "OpenTracks/694",
  "prompt" : "public void shutdown() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<T> enqueueObjects = new ArrayList<>();\nprivate final ExecutorService executorService;",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "            e.printStackTrace();\r\n        }\r\n        postExecute(object);\r\n    }).start();\r\n}",
  "context" : "/**\r\n * Execute the runnable for the object.\r\n *\r\n * @param object   the Object.\r\n * @param runnable the Runnable.\r\n */\r\npublic void execute(T object, Runnable runnable) {\r\n    if (!preExecute(object)) {\r\n        return;\r\n    }\r\n    new Thread(() -> {\r\n        Future<?> future = executorService.submit(runnable);\r\n        try {\r\n            future.get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        postExecute(object);\r\n    }).start();\r\n}",
  "start_lineno" : "35",
  "methodName" : "execute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java",
  "task_id" : "OpenTracks/695",
  "prompt" : "import java.util.concurrent.Future\nimport java.util.concurrent.ExecutionException\n/**\r\n * Execute the runnable for the object.\r\n *\r\n * @param object   the Object.\r\n * @param runnable the Runnable.\r\n */\r\npublic void execute(T object, Runnable runnable) {\r\n    if (!preExecute(object)) {\r\n        return;\r\n    }\r\n    new Thread(() -> {\r\n        Future<?> future = executorService.submit(runnable);\r\n        try {\r\n            future.get();\r\n        } catch (ExecutionException | InterruptedException e) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<T> enqueueObjects = new ArrayList<>();\nprivate final ExecutorService executorService;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        } else {\r\n            return false;\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Before execution it must checks if the object is already enqueued.\r\n *\r\n * @param object the object to check.\r\n * @return       true if it can be executed or false otherwise.\r\n */\r\nprivate boolean preExecute(T object) {\r\n    synchronized (enqueueObjects) {\r\n        if (!enqueueObjects.contains(object)) {\r\n            enqueueObjects.add(object);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}",
  "start_lineno" : "57",
  "methodName" : "preExecute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java",
  "task_id" : "OpenTracks/696",
  "prompt" : "/**\r\n * Before execution it must checks if the object is already enqueued.\r\n *\r\n * @param object the object to check.\r\n * @return       true if it can be executed or false otherwise.\r\n */\r\nprivate boolean preExecute(T object) {\r\n    synchronized (enqueueObjects) {\r\n        if (!enqueueObjects.contains(object)) {\r\n            enqueueObjects.add(object);\r\n            return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<T> enqueueObjects = new ArrayList<>();\nprivate final ExecutorService executorService;",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        enqueueObjects.remove(object);\r\n    }\r\n}",
  "context" : "/**\r\n * After execution remove the object from the queue.\r\n *\r\n * @param object the object to be removed from the queue.\r\n */\r\nprivate void postExecute(T object) {\r\n    synchronized (enqueueObjects) {\r\n        enqueueObjects.remove(object);\r\n    }\r\n}",
  "start_lineno" : "73",
  "methodName" : "postExecute",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java",
  "task_id" : "OpenTracks/697",
  "prompt" : "/**\r\n * After execution remove the object from the queue.\r\n *\r\n * @param object the object to be removed from the queue.\r\n */\r\nprivate void postExecute(T object) {\r\n    synchronized (enqueueObjects) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        }\r\n        builder.append(\"(\").append(totalDistance).append(\")\");\r\n    }\r\n    return builder.toString();\r\n}",
  "context" : "/**\r\n * Gets a string for share owner, total time, and total distance.\r\n *\r\n * @param totalTime     the total time. Can be null\r\n * @param totalDistance the total distance. Can be null\r\n */\r\nprivate static String getTimeDistance(String totalTime, String totalDistance) {\r\n    StringBuilder builder = new StringBuilder();\r\n    if (totalTime != null && totalTime.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" ‧ \");\r\n        }\r\n        builder.append(totalTime);\r\n    }\r\n    if (totalDistance != null && totalDistance.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" \");\r\n        }\r\n        builder.append(\"(\").append(totalDistance).append(\")\");\r\n    }\r\n    return builder.toString();\r\n}",
  "start_lineno" : "53",
  "methodName" : "getTimeDistance",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ListItemUtils.java",
  "task_id" : "OpenTracks/698",
  "prompt" : "import de.dennisguse.opentracks.data.models.Distance\n/**\r\n * Gets a string for share owner, total time, and total distance.\r\n *\r\n * @param totalTime     the total time. Can be null\r\n * @param totalDistance the total distance. Can be null\r\n */\r\nprivate static String getTimeDistance(String totalTime, String totalDistance) {\r\n    StringBuilder builder = new StringBuilder();\r\n    if (totalTime != null && totalTime.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" ‧ \");\r\n        }\r\n        builder.append(totalTime);\r\n    }\r\n    if (totalDistance != null && totalDistance.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" \");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        textView.setShadowLayer(5, 0, 2, ContextCompat.getColor(context, android.R.color.black));\r\n    } else {\r\n        textView.setShadowLayer(0, 0, 0, 0);\r\n    }\r\n}",
  "context" : "/**\r\n * Sets a text view.\r\n *\r\n * @param context   the context\r\n * @param textView  the text view\r\n * @param value     the value for the text view\r\n * @param addShadow true to add shadow\r\n */\r\npublic static void setTextView(Context context, TextView textView, String value, boolean addShadow) {\r\n    if (value == null || value.length() == 0) {\r\n        textView.setVisibility(View.GONE);\r\n        return;\r\n    }\r\n    textView.setVisibility(View.VISIBLE);\r\n    textView.setText(value);\r\n    if (addShadow) {\r\n        textView.setShadowLayer(5, 0, 2, ContextCompat.getColor(context, android.R.color.black));\r\n    } else {\r\n        textView.setShadowLayer(0, 0, 0, 0);\r\n    }\r\n}",
  "start_lineno" : "100",
  "methodName" : "setTextView",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ListItemUtils.java",
  "task_id" : "OpenTracks/699",
  "prompt" : "import android.widget.TextView\nimport android.view.View\nimport android.content.Context\n/**\r\n * Sets a text view.\r\n *\r\n * @param context   the context\r\n * @param textView  the text view\r\n * @param value     the value for the text view\r\n * @param addShadow true to add shadow\r\n */\r\npublic static void setTextView(Context context, TextView textView, String value, boolean addShadow) {\r\n    if (value == null || value.length() == 0) {\r\n        textView.setVisibility(View.GONE);\r\n        return;\r\n    }\r\n    textView.setVisibility(View.VISIBLE);\r\n    textView.setText(value);\r\n    if (addShadow) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "    }\r\n    String timeContent = offsetDateTime.format(DateTimeFormatter.ofPattern(pattern));\r\n    dateView.setText(dateContent);\r\n    timeView.setText(timeContent);\r\n}",
  "context" : "public static void setDateAndTime(Context context, TextView dateView, TextView timeView, Instant time, ZoneOffset timeZone) {\r\n    OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(time, timeZone);\r\n    String dateContent = StringUtils.formatDateTodayRelative(context, offsetDateTime);\r\n    String pattern = \"HH:mm\";\r\n    if (!offsetDateTime.getOffset().equals(OffsetDateTime.now().getOffset())) {\r\n        pattern = \"HH:mm x\";\r\n    }\r\n    String timeContent = offsetDateTime.format(DateTimeFormatter.ofPattern(pattern));\r\n    dateView.setText(dateContent);\r\n    timeView.setText(timeContent);\r\n}",
  "start_lineno" : "115",
  "methodName" : "setDateAndTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ListItemUtils.java",
  "task_id" : "OpenTracks/700",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.R\nimport java.time.ZoneOffset\nimport java.time.OffsetDateTime\nimport java.time.Instant\nimport android.widget.TextView\nimport android.view.View\nimport android.content.Context\npublic static void setDateAndTime(Context context, TextView dateView, TextView timeView, Instant time, ZoneOffset timeZone) {\r\n    OffsetDateTime offsetDateTime = OffsetDateTime.ofInstant(time, timeZone);\r\n    String dateContent = StringUtils.formatDateTodayRelative(context, offsetDateTime);\r\n    String pattern = \"HH:mm\";\r\n    if (!offsetDateTime.getOffset().equals(OffsetDateTime.now().getOffset())) {\r\n        pattern = \"HH:mm x\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "16",
  "ground_truth" : "    float density = context.getResources().getDisplayMetrics().density;\r\n    return Math.round(dp * density);\r\n}",
  "context" : "/**\r\n * Convert display density to physical pixel.\r\n */\r\npublic static int dpToPx(Context context, int dp) {\r\n    float density = context.getResources().getDisplayMetrics().density;\r\n    return Math.round(dp * density);\r\n}",
  "start_lineno" : "13",
  "methodName" : "dpToPx",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ResourceUtils.java",
  "task_id" : "OpenTracks/701",
  "prompt" : "import android.content.Context\n/**\r\n * Convert display density to physical pixel.\r\n */\r\npublic static int dpToPx(Context context, int dp) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private int from = -1;\nprivate int to = -1;\nprivate final VisibleViewsListener visibleViewsListener;",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "                visibleViewsListener.onViewVisible(viewChild, i);\r\n            }\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onScrollStateChanged(AbsListView view, int scrollState) {\r\n    if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {\r\n        if (from >= 0 && to >= 0) {\r\n            for (int i = from; i < to; i++) {\r\n                View viewChild = view.getChildAt(i - from);\r\n                visibleViewsListener.onViewVisible(viewChild, i);\r\n            }\r\n        }\r\n    }\r\n}",
  "start_lineno" : "21",
  "methodName" : "onScrollStateChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ScrollVisibleViews.java",
  "task_id" : "OpenTracks/702",
  "prompt" : "import android.widget.AbsListView\nimport android.view.View\n@Override\r\npublic void onScrollStateChanged(AbsListView view, int scrollState) {\r\n    if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {\r\n        if (from >= 0 && to >= 0) {\r\n            for (int i = from; i < to; i++) {\r\n                View viewChild = view.getChildAt(i - from);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private int from = -1;\nprivate int to = -1;\nprivate final VisibleViewsListener visibleViewsListener;",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "    from = firstVisibleItem;\r\n    to = firstVisibleItem + visibleItemCount;\r\n}",
  "context" : "@Override\r\npublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\r\n    from = firstVisibleItem;\r\n    to = firstVisibleItem + visibleItemCount;\r\n}",
  "start_lineno" : "33",
  "methodName" : "onScroll",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ScrollVisibleViews.java",
  "task_id" : "OpenTracks/703",
  "prompt" : "import android.widget.AbsListView\nimport android.view.View\n@Override\r\npublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "    theme.resolveAttribute(android.R.attr.colorBackground, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "context" : "/**\r\n * Get the material design default background color.\r\n */\r\npublic static int getBackgroundColor(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r\n    theme.resolveAttribute(android.R.attr.colorBackground, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "start_lineno" : "18",
  "methodName" : "getBackgroundColor",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/704",
  "prompt" : "import android.util.TypedValue\nimport android.content.res.Resources\nimport android.content.Context\n/**\r\n * Get the material design default background color.\r\n */\r\npublic static int getBackgroundColor(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "    theme.resolveAttribute(android.R.attr.textColorPrimary, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "context" : "public static int getTextColorPrimary(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r\n    theme.resolveAttribute(android.R.attr.textColorPrimary, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "start_lineno" : "26",
  "methodName" : "getTextColorPrimary",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/705",
  "prompt" : "import android.util.TypedValue\nimport android.content.res.Resources\nimport android.content.Context\npublic static int getTextColorPrimary(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "    theme.resolveAttribute(android.R.attr.textColorSecondary, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "context" : "public static int getTextColorSecondary(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r\n    theme.resolveAttribute(android.R.attr.textColorSecondary, typedValue, true);\r\n    return ContextCompat.getColor(context, typedValue.resourceId);\r\n}",
  "start_lineno" : "34",
  "methodName" : "getTextColorSecondary",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/706",
  "prompt" : "import android.util.TypedValue\nimport android.content.res.Resources\nimport android.content.Context\npublic static int getTextColorSecondary(Context context) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "    typedArray.recycle();\r\n    return fontSize;\r\n}",
  "context" : "public static int getFontSizeSmallInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body2, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 12);\r\n    typedArray.recycle();\r\n    return fontSize;\r\n}",
  "start_lineno" : "42",
  "methodName" : "getFontSizeSmallInPx",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/707",
  "prompt" : "import android.content.res.TypedArray\nimport android.content.Context\npublic static int getFontSizeSmallInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body2, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 12);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "    typedArray.recycle();\r\n    return fontSize;\r\n}",
  "context" : "public static int getFontSizeMediumInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body1, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 15);\r\n    typedArray.recycle();\r\n    return fontSize;\r\n}",
  "start_lineno" : "49",
  "methodName" : "getFontSizeMediumInPx",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/708",
  "prompt" : "import android.content.res.TypedArray\nimport android.content.Context\npublic static int getFontSizeMediumInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body1, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 15);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "    TypedArray typeArray = context.obtainStyledAttributes(attrs);\r\n    int height = typeArray.getDimensionPixelSize(0, 128);\r\n    typeArray.recycle();\r\n    return 2 * height;\r\n}",
  "context" : "/**\r\n * Gets the photo height.\r\n */\r\npublic static int getPhotoHeight(Context context) {\r\n    int[] attrs = new int[] { android.R.attr.listPreferredItemHeight };\r\n    TypedArray typeArray = context.obtainStyledAttributes(attrs);\r\n    int height = typeArray.getDimensionPixelSize(0, 128);\r\n    typeArray.recycle();\r\n    return 2 * height;\r\n}",
  "start_lineno" : "59",
  "methodName" : "getPhotoHeight",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java",
  "task_id" : "OpenTracks/709",
  "prompt" : "import android.content.Context\n/**\r\n * Gets the photo height.\r\n */\r\npublic static int getPhotoHeight(Context context) {\r\n    int[] attrs = new int[] { android.R.attr.listPreferredItemHeight };\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        } else if (child instanceof TextView childTv) {\r\n            childTv.setMovementMethod(LinkMovementMethod.getInstance());\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Traverses all childs of {@link View} recursively and makes links within {@link TextView}s clickable.\r\n */\r\npublic static void makeClickableLinks(ViewGroup view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r\n    for (int i = 0; i < view.getChildCount(); i++) {\r\n        final View child = view.getChildAt(i);\r\n        if (child instanceof ViewGroup childVg) {\r\n            makeClickableLinks(childVg);\r\n        } else if (child instanceof TextView childTv) {\r\n            childTv.setMovementMethod(LinkMovementMethod.getInstance());\r\n        }\r\n    }\r\n}",
  "start_lineno" : "16",
  "methodName" : "makeClickableLinks",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ViewUtils.java",
  "task_id" : "OpenTracks/710",
  "prompt" : "/**\r\n * Traverses all childs of {@link View} recursively and makes links within {@link TextView}s clickable.\r\n */\r\npublic static void makeClickableLinks(ViewGroup view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r\n    for (int i = 0; i < view.getChildCount(); i++) {\r\n        final View child = view.getChildAt(i);\r\n        if (child instanceof ViewGroup childVg) {\r\n            makeClickableLinks(childVg);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int EGM2008_5_DATA = R.raw.egm2008_5;\nprivate static final int HEADER_LENGTH = 404;\nprivate static final int RESOLUTION_IN_MINUTES = 60 / 5;\nprivate static final int LATITUDE_CORRECTION = 360 * RESOLUTION_IN_MINUTES;\nprotected final Indices indices;\nprotected final int v00;\nprotected final int v10;\nprotected final int v01;\nprotected final int v11;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        return new EGM2008Correction(indices, dataInputStream);\r\n    }\r\n}",
  "context" : "public static EGM2008Correction createCorrection(Context context, Location location) throws IOException {\r\n    Indices indices = getIndices(location);\r\n    try (DataInputStream dataInputStream = new DataInputStream(context.getResources().openRawResource(EGM2008_5_DATA))) {\r\n        return new EGM2008Correction(indices, dataInputStream);\r\n    }\r\n}",
  "start_lineno" : "36",
  "methodName" : "createCorrection",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\EGM2008Utils.java",
  "task_id" : "OpenTracks/711",
  "prompt" : "public static EGM2008Correction createCorrection(Context context, Location location) throws IOException {\r\n    Indices indices = getIndices(location);\r\n    try (DataInputStream dataInputStream = new DataInputStream(context.getResources().openRawResource(EGM2008_5_DATA))) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int EGM2008_5_DATA = R.raw.egm2008_5;\nprivate static final int HEADER_LENGTH = 404;\nprivate static final int RESOLUTION_IN_MINUTES = 60 / 5;\nprivate static final int LATITUDE_CORRECTION = 360 * RESOLUTION_IN_MINUTES;\nprotected final Indices indices;\nprotected final int v00;\nprotected final int v10;\nprotected final int v01;\nprotected final int v11;",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "    int absoluteIndex = indices.getAbsoluteIndex();\r\n    return getUndulationRaw(dataInputStream, absoluteIndex);\r\n}",
  "context" : "@VisibleForTesting\r\nstatic int getUndulationRaw(DataInputStream dataInputStream, Indices indices) throws IOException {\r\n    dataInputStream.reset();\r\n    int absoluteIndex = indices.getAbsoluteIndex();\r\n    return getUndulationRaw(dataInputStream, absoluteIndex);\r\n}",
  "start_lineno" : "44",
  "methodName" : "getUndulationRaw",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\EGM2008Utils.java",
  "task_id" : "OpenTracks/712",
  "prompt" : "@VisibleForTesting\r\nstatic int getUndulationRaw(DataInputStream dataInputStream, Indices indices) throws IOException {\r\n    dataInputStream.reset();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static final int EGM2008_5_DATA = R.raw.egm2008_5;\nprivate static final int HEADER_LENGTH = 404;\nprivate static final int RESOLUTION_IN_MINUTES = 60 / 5;\nprivate static final int LATITUDE_CORRECTION = 360 * RESOLUTION_IN_MINUTES;\nprotected final Indices indices;\nprotected final int v00;\nprotected final int v10;\nprotected final int v01;\nprotected final int v11;",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    //byte size is 2\r\n    int index = HEADER_LENGTH + undulationIndex * 2;\r\n    long ignored = dataInputStream.skip(index);\r\n    return dataInputStream.readUnsignedShort();\r\n}",
  "context" : "private static int getUndulationRaw(DataInputStream dataInputStream, int undulationIndex) throws IOException {\r\n    dataInputStream.reset();\r\n    //byte size is 2\r\n    int index = HEADER_LENGTH + undulationIndex * 2;\r\n    long ignored = dataInputStream.skip(index);\r\n    return dataInputStream.readUnsignedShort();\r\n}",
  "start_lineno" : "51",
  "methodName" : "getUndulationRaw",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\EGM2008Utils.java",
  "task_id" : "OpenTracks/713",
  "prompt" : "private static int getUndulationRaw(DataInputStream dataInputStream, int undulationIndex) throws IOException {\r\n    dataInputStream.reset();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Context context;\nprivate final Thread.UncaughtExceptionHandler defaultExceptionHandler;",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "    Writer writer = new StringWriter();\r\n    exception.printStackTrace(new PrintWriter(writer));\r\n    stringBuilder.append(writer);\r\n    return stringBuilder.toString();\r\n}",
  "context" : "private String formatException(final Thread thread, final Throwable exception) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    stringBuilder.append(String.format(\"Exception in thread \\\"%s\\\": \", thread.getName()));\r\n    // print available stacktrace\r\n    Writer writer = new StringWriter();\r\n    exception.printStackTrace(new PrintWriter(writer));\r\n    stringBuilder.append(writer);\r\n    return stringBuilder.toString();\r\n}",
  "start_lineno" : "44",
  "methodName" : "formatException",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExceptionHandler.java",
  "task_id" : "OpenTracks/714",
  "prompt" : "import android.os.Build\nprivate String formatException(final Thread thread, final Throwable exception) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    stringBuilder.append(String.format(\"Exception in thread \\\"%s\\\": \", thread.getName()));\r\n    // print available stacktrace\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    intent.putExtra(SettingsActivity.EXTRAS_EXPORT_ERROR_MESSAGE, errorMessage);\r\n    context.startActivity(intent);\r\n}",
  "context" : "@Override\r\npublic void onExportError(ExportTask unused, String errorMessage) {\r\n    Intent intent = new Intent(context, SettingsActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n    intent.putExtra(SettingsActivity.EXTRAS_EXPORT_ERROR_MESSAGE, errorMessage);\r\n    context.startActivity(intent);\r\n}",
  "start_lineno" : "42",
  "methodName" : "onExportError",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExportUtils.java",
  "task_id" : "OpenTracks/715",
  "prompt" : "import de.dennisguse.opentracks.settings.SettingsActivity\nimport de.dennisguse.opentracks.io.file.exporter.ExportTask\nimport android.content.Intent\n@Override\r\npublic void onExportError(ExportTask unused, String errorMessage) {\r\n    Intent intent = new Intent(context, SettingsActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "    String exportFileName = PreferencesUtils.getTrackFileformatGenerator().format(track, trackFileFormat);\r\n    return getExportDocumentFileUri(context, exportFileName, trackFileFormat, directory);\r\n}",
  "context" : "private static Uri getExportDocumentFileUri(Context context, Track track, TrackFileFormat trackFileFormat, DocumentFile directory) {\r\n    String exportFileName = PreferencesUtils.getTrackFileformatGenerator().format(track, trackFileFormat);\r\n    return getExportDocumentFileUri(context, exportFileName, trackFileFormat, directory);\r\n}",
  "start_lineno" : "101",
  "methodName" : "getExportDocumentFileUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExportUtils.java",
  "task_id" : "OpenTracks/716",
  "prompt" : "import de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\nprivate static Uri getExportDocumentFileUri(Context context, Track track, TrackFileFormat trackFileFormat, DocumentFile directory) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = ExportUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "            exportDocumentFileUri = file.getUri();\r\n        }\r\n    }\r\n    return exportDocumentFileUri;\r\n}",
  "context" : "private static Uri getExportDocumentFileUri(Context context, String exportFileName, TrackFileFormat trackFileFormat, DocumentFile directory) {\r\n    Uri exportDocumentFileUri = findFile(context, directory.getUri(), exportFileName);\r\n    if (exportDocumentFileUri == null) {\r\n        final DocumentFile file = directory.createFile(trackFileFormat.getMimeType(), exportFileName);\r\n        if (file != null) {\r\n            exportDocumentFileUri = file.getUri();\r\n        }\r\n    }\r\n    return exportDocumentFileUri;\r\n}",
  "start_lineno" : "106",
  "methodName" : "getExportDocumentFileUri",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExportUtils.java",
  "task_id" : "OpenTracks/717",
  "prompt" : "import de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\nprivate static Uri getExportDocumentFileUri(Context context, String exportFileName, TrackFileFormat trackFileFormat, DocumentFile directory) {\r\n    Uri exportDocumentFileUri = findFile(context, directory.getUri(), exportFileName);\r\n    if (exportDocumentFileUri == null) {\r\n        final DocumentFile file = directory.createFile(trackFileFormat.getMimeType(), exportFileName);\r\n        if (file != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "    photoDirectory.mkdirs();\r\n    return photoDirectory;\r\n}",
  "context" : "public static File getPhotoDir(Context context, Track.Id trackId) {\r\n    File photoDirectory = new File(getPhotoDir(context), \"\" + trackId.id());\r\n    photoDirectory.mkdirs();\r\n    return photoDirectory;\r\n}",
  "start_lineno" : "61",
  "methodName" : "getPhotoDir",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/718",
  "prompt" : "import de.dennisguse.opentracks.data.models.Track\nimport java.io.File\nimport android.content.Context\npublic static File getPhotoDir(Context context, Track.Id trackId) {\r\n    File photoDirectory = new File(getPhotoDir(context), \"\" + trackId.id());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    if (file.getParentFile() == null) {\r\n        return file.getName();\r\n    }\r\n    return getPath(file.getParentFile()) + File.pathSeparatorChar + file.getName();\r\n}",
  "context" : "public static String getPath(DocumentFile file) {\r\n    if (file == null) {\r\n        return \"\";\r\n    }\r\n    if (file.getParentFile() == null) {\r\n        return file.getName();\r\n    }\r\n    return getPath(file.getParentFile()) + File.pathSeparatorChar + file.getName();\r\n}",
  "start_lineno" : "68",
  "methodName" : "getPath",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/719",
  "prompt" : "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\npublic static String getPath(DocumentFile file) {\r\n    if (file == null) {\r\n        return \"\";\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "    if (index == -1) {\r\n        return null;\r\n    }\r\n    return fileName.substring(index + 1);\r\n}",
  "context" : "/**\r\n * Gets the extension from a file name.\r\n *\r\n * @param fileName the file name\r\n * @return null if there is no extension or fileName is null.\r\n */\r\npublic static String getExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return null;\r\n    }\r\n    int index = fileName.lastIndexOf('.');\r\n    if (index == -1) {\r\n        return null;\r\n    }\r\n    return fileName.substring(index + 1);\r\n}",
  "start_lineno" : "96",
  "methodName" : "getExtension",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/720",
  "prompt" : "/**\r\n * Gets the extension from a file name.\r\n *\r\n * @param fileName the file name\r\n * @return null if there is no extension or fileName is null.\r\n */\r\npublic static String getExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return null;\r\n    }\r\n    int index = fileName.lastIndexOf('.');\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "    if (!new File(directory, fullName).exists()) {\r\n        return fullName;\r\n    }\r\n    return buildUniqueFileName(directory, base, extension, suffix + 1);\r\n}",
  "context" : "/**\r\n * Builds a filename with the given base and the given extension, possibly adding a suffix to ensure the file doesn't exist.\r\n *\r\n * @param directory the directory the filename will be located in\r\n * @param base      the base for the filename\r\n * @param extension the extension for the filename\r\n * @param suffix    the first numeric suffix to try to use, or 0 for none\r\n * @return the complete filename, without the directory\r\n */\r\nprivate static String buildUniqueFileName(File directory, String base, String extension, int suffix) {\r\n    String suffixName = \"\";\r\n    if (suffix > 0) {\r\n        suffixName += \"(\" + suffix + \")\";\r\n    }\r\n    suffixName += \".\" + extension;\r\n    String baseName = sanitizeFileName(base);\r\n    baseName = truncateFileName(directory, baseName, suffixName);\r\n    String fullName = baseName + suffixName;\r\n    if (!new File(directory, fullName).exists()) {\r\n        return fullName;\r\n    }\r\n    return buildUniqueFileName(directory, base, extension, suffix + 1);\r\n}",
  "start_lineno" : "121",
  "methodName" : "buildUniqueFileName",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/721",
  "prompt" : "import java.io.File\n/**\r\n * Builds a filename with the given base and the given extension, possibly adding a suffix to ensure the file doesn't exist.\r\n *\r\n * @param directory the directory the filename will be located in\r\n * @param base      the base for the filename\r\n * @param extension the extension for the filename\r\n * @param suffix    the first numeric suffix to try to use, or 0 for none\r\n * @return the complete filename, without the directory\r\n */\r\nprivate static String buildUniqueFileName(File directory, String base, String extension, int suffix) {\r\n    String suffixName = \"\";\r\n    if (suffix > 0) {\r\n        suffixName += \"(\" + suffix + \")\";\r\n    }\r\n    suffixName += \".\" + extension;\r\n    String baseName = sanitizeFileName(base);\r\n    baseName = truncateFileName(directory, baseName, suffixName);\r\n    String fullName = baseName + suffixName;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "        int limit = MAX_FAT32_PATH_LENGTH - requiredLength;\r\n        return name.substring(0, limit);\r\n    }\r\n    return name;\r\n}",
  "context" : "/**\r\n * Truncates the name if necessary so the filename path length (directory + name + suffix) meets the Fat32 path limit.\r\n *\r\n * @param directory directory\r\n * @param name      name\r\n * @param suffix    suffix\r\n */\r\nstatic String truncateFileName(File directory, String name, String suffix) {\r\n    // 1 at the end accounts for the FAT32 filename trailing NUL character\r\n    int requiredLength = directory.getPath().length() + suffix.length() + 1;\r\n    if (name.length() + requiredLength > MAX_FAT32_PATH_LENGTH) {\r\n        int limit = MAX_FAT32_PATH_LENGTH - requiredLength;\r\n        return name.substring(0, limit);\r\n    }\r\n    return name;\r\n}",
  "start_lineno" : "177",
  "methodName" : "truncateFileName",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/722",
  "prompt" : "import java.io.File\n/**\r\n * Truncates the name if necessary so the filename path length (directory + name + suffix) meets the Fat32 path limit.\r\n *\r\n * @param directory directory\r\n * @param name      name\r\n * @param suffix    suffix\r\n */\r\nstatic String truncateFileName(File directory, String name, String suffix) {\r\n    // 1 at the end accounts for the FAT32 filename trailing NUL character\r\n    int requiredLength = directory.getPath().length() + suffix.length() + 1;\r\n    if (name.length() + requiredLength > MAX_FAT32_PATH_LENGTH) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "202",
  "ground_truth" : "    } catch (Exception e) {\r\n        // post to log\r\n        Log.e(TAG, e.getMessage());\r\n    }\r\n}",
  "context" : "/**\r\n * Copy a File (src) to a File (dst).\r\n *\r\n * @param src source file.\r\n * @param dst destination file.\r\n */\r\npublic static void copy(FileDescriptor src, File dst) {\r\n    try (FileChannel in = new FileInputStream(src).getChannel();\r\n        FileChannel out = new FileOutputStream(dst).getChannel()) {\r\n        in.transferTo(0, in.size(), out);\r\n    } catch (Exception e) {\r\n        // post to log\r\n        Log.e(TAG, e.getMessage());\r\n    }\r\n}",
  "start_lineno" : "194",
  "methodName" : "copy",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/723",
  "prompt" : "import java.nio.channels.FileChannel\nimport java.io.FileOutputStream\nimport java.io.FileInputStream\nimport java.io.FileDescriptor\nimport java.io.File\n/**\r\n * Copy a File (src) to a File (dst).\r\n *\r\n * @param src source file.\r\n * @param dst destination file.\r\n */\r\npublic static void copy(FileDescriptor src, File dst) {\r\n    try (FileChannel in = new FileInputStream(src).getChannel();\r\n        FileChannel out = new FileOutputStream(dst).getChannel()) {\r\n        in.transferTo(0, in.size(), out);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "        file.delete();\r\n    } else if (file != null && file.isFile()) {\r\n        file.delete();\r\n    }\r\n}",
  "context" : "/**\r\n * Delete the directory recursively.\r\n *\r\n * @param file the directory\r\n */\r\npublic static void deleteDirectoryRecurse(File file) {\r\n    if (file != null && file.exists() && file.isDirectory()) {\r\n        for (File child : file.listFiles()) {\r\n            deleteDirectoryRecurse(child);\r\n        }\r\n        file.delete();\r\n    } else if (file != null && file.isFile()) {\r\n        file.delete();\r\n    }\r\n}",
  "start_lineno" : "219",
  "methodName" : "deleteDirectoryRecurse",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/724",
  "prompt" : "import java.io.File\n/**\r\n * Delete the directory recursively.\r\n *\r\n * @param file the directory\r\n */\r\npublic static void deleteDirectoryRecurse(File file) {\r\n    if (file != null && file.exists() && file.isDirectory()) {\r\n        for (File child : file.listFiles()) {\r\n            deleteDirectoryRecurse(child);\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = FileUtils.class.getSimpleName();\npublic static final String FILEPROVIDER = BuildConfig.APPLICATION_ID + \".fileprovider\";\n/**\r\n * The maximum FAT32 path length. See the FAT32 spec at\r\n * <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463080\">...</a>\r\n */\r\nstatic final int MAX_FAT32_PATH_LENGTH = 260;",
  "app_type" : "life",
  "end_lineno" : "247",
  "ground_truth" : "            files.addAll(getFiles(candidate));\r\n        }\r\n    }\r\n    return files;\r\n}",
  "context" : "public static ArrayList<DocumentFile> getFiles(DocumentFile file) {\r\n    ArrayList<DocumentFile> files = new ArrayList<>();\r\n    if (!file.isDirectory()) {\r\n        files.add(file);\r\n        return files;\r\n    }\r\n    for (DocumentFile candidate : file.listFiles()) {\r\n        if (!candidate.isDirectory()) {\r\n            files.add(candidate);\r\n        } else {\r\n            files.addAll(getFiles(candidate));\r\n        }\r\n    }\r\n    return files;\r\n}",
  "start_lineno" : "230",
  "methodName" : "getFiles",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java",
  "task_id" : "OpenTracks/725",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport java.io.File\nimport androidx.documentfile.provider.DocumentFile\npublic static ArrayList<DocumentFile> getFiles(DocumentFile file) {\r\n    ArrayList<DocumentFile> files = new ArrayList<>();\r\n    if (!file.isDirectory()) {\r\n        files.add(file);\r\n        return files;\r\n    }\r\n    for (DocumentFile candidate : file.listFiles()) {\r\n        if (!candidate.isDirectory()) {\r\n            files.add(candidate);\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntentDashboardUtils.class.getSimpleName();\nprivate static final String ACTION_DASHBOARD = \"Intent.OpenTracks-Dashboard\";\nprivate static final String ACTION_DASHBOARD_PAYLOAD = ACTION_DASHBOARD + \".Payload\";\npublic static final TrackFileFormat[] SHOW_ON_MAP_TRACK_FILE_FORMATS = new TrackFileFormat[] { TrackFileFormat.KMZ_WITH_TRACKDETAIL_AND_SENSORDATA_AND_PICTURES, TrackFileFormat.KML_WITH_TRACKDETAIL_AND_SENSORDATA, TrackFileFormat.GPX };\npublic static final String PREFERENCE_ID_DASHBOARD = ACTION_DASHBOARD;\npublic static final String PREFERENCE_ID_ASK = \"ASK\";\n/**\r\n * Assume \"v1\" if not present.\r\n */\r\nprivate static final String EXTRAS_PROTOCOL_VERSION = \"PROTOCOL_VERSION\";\n/**\r\n * version 1: the initial version.\r\n * version 2: replaced pause/resume trackpoints for track segmentation (lat=100 / lat=200) by TrackPoint.Type.\r\n */\r\nprivate static final int CURRENT_VERSION = 2;\nprivate static final String EXTRAS_OPENTRACKS_IS_RECORDING_THIS_TRACK = \"EXTRAS_OPENTRACKS_IS_RECORDING_THIS_TRACK\";\nprivate static final String EXTRAS_SHOULD_KEEP_SCREEN_ON = \"EXTRAS_SHOULD_KEEP_SCREEN_ON\";\nprivate static final String EXTRAS_SHOW_WHEN_LOCKED = \"EXTRAS_SHOULD_KEEP_SCREEN_ON\";\nprivate static final String EXTRAS_SHOW_FULLSCREEN = \"EXTRAS_SHOULD_FULLSCREEN\";\nprivate static final int TRACK_URI_INDEX = 0;\nprivate static final int TRACKPOINTS_URI_INDEX = 1;\nprivate static final int MARKERS_URI_INDEX = 2;\nprivate static final int NONE_SELECTED = -1;",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        showTrackOnMapWithFileFormat(context, trackFileFormat, Set.of(trackIds));\r\n    } else {\r\n        startDashboard(context, isRecording, null, null, trackIds);\r\n    }\r\n}",
  "context" : "/**\r\n * A format was selected, remember if <code>always</code> is true and start the necessary action\r\n *\r\n * @param context the context\r\n * @param isRecording are we currently recording?\r\n * @param selectedValue the chosen format\r\n * @param trackIds the track ids\r\n * @param always set the selectedValue as default preference\r\n */\r\nprivate static void onFormatSelected(final Context context, final boolean isRecording, final String selectedValue, final Track.Id[] trackIds, final boolean always) {\r\n    if (always) {\r\n        PreferencesUtils.setShowOnMapFormat(selectedValue);\r\n    }\r\n    TrackFileFormat trackFileFormat = TrackFileFormat.valueOfPreferenceId(selectedValue);\r\n    if (trackFileFormat != null) {\r\n        showTrackOnMapWithFileFormat(context, trackFileFormat, Set.of(trackIds));\r\n    } else {\r\n        startDashboard(context, isRecording, null, null, trackIds);\r\n    }\r\n}",
  "start_lineno" : "119",
  "methodName" : "onFormatSelected",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentDashboardUtils.java",
  "task_id" : "OpenTracks/726",
  "prompt" : "import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.util.Map\nimport android.content.Context\n/**\r\n * A format was selected, remember if <code>always</code> is true and start the necessary action\r\n *\r\n * @param context the context\r\n * @param isRecording are we currently recording?\r\n * @param selectedValue the chosen format\r\n * @param trackIds the track ids\r\n * @param always set the selectedValue as default preference\r\n */\r\nprivate static void onFormatSelected(final Context context, final boolean isRecording, final String selectedValue, final Track.Id[] trackIds, final boolean always) {\r\n    if (always) {\r\n        PreferencesUtils.setShowOnMapFormat(selectedValue);\r\n    }\r\n    TrackFileFormat trackFileFormat = TrackFileFormat.valueOfPreferenceId(selectedValue);\r\n    if (trackFileFormat != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntentUtils.class.getSimpleName();\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    }\r\n    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n    intent.setData(Uri.parse(uri));\r\n    context.startActivity(Intent.createChooser(intent, null));\r\n}",
  "context" : "/**\r\n * Send intent to show coordinates on a map (needs an another app).\r\n *\r\n * @param context   the context\r\n * @param latitude  the latitude\r\n * @param longitude the longitude\r\n * @param label     the label\r\n */\r\nprivate static void showCoordinateOnMap(Context context, double latitude, double longitude, String label) {\r\n    //SEE https://developer.android.com/guide/components/intents-common.html#Maps\r\n    String uri = \"geo:0,0?q=\" + latitude + \",\" + longitude;\r\n    if (label != null && label.length() > 0) {\r\n        uri += \"(\" + label + \")\";\r\n    }\r\n    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n    intent.setData(Uri.parse(uri));\r\n    context.startActivity(Intent.createChooser(intent, null));\r\n}",
  "start_lineno" : "65",
  "methodName" : "showCoordinateOnMap",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentUtils.java",
  "task_id" : "OpenTracks/727",
  "prompt" : "import android.content.Context\n/**\r\n * Send intent to show coordinates on a map (needs an another app).\r\n *\r\n * @param context   the context\r\n * @param latitude  the latitude\r\n * @param longitude the longitude\r\n * @param label     the label\r\n */\r\nprivate static void showCoordinateOnMap(Context context, double latitude, double longitude, String label) {\r\n    //SEE https://developer.android.com/guide/components/intents-common.html#Maps\r\n    String uri = \"geo:0,0?q=\" + latitude + \",\" + longitude;\r\n    if (label != null && label.length() > 0) {\r\n        uri += \"(\" + label + \")\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntentUtils.class.getSimpleName();\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "    int newFlags = existingFlags & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n    context.getApplicationContext().getContentResolver().takePersistableUriPermission(directoryUri, newFlags);\r\n}",
  "context" : "public static void persistDirectoryAccessPermission(Context context, Uri directoryUri, int existingFlags) {\r\n    int newFlags = existingFlags & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n    context.getApplicationContext().getContentResolver().takePersistableUriPermission(directoryUri, newFlags);\r\n}",
  "start_lineno" : "78",
  "methodName" : "persistDirectoryAccessPermission",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentUtils.java",
  "task_id" : "OpenTracks/728",
  "prompt" : "import android.net.Uri\nimport android.content.Context\npublic static void persistDirectoryAccessPermission(Context context, Uri directoryUri, int existingFlags) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntentUtils.class.getSimpleName();\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "    }\r\n    context.getApplicationContext().getContentResolver().getPersistedUriPermissions().stream().map(UriPermission::getUri).filter(documentUri::equals).forEach(u -> context.getContentResolver().releasePersistableUriPermission(u, 0));\r\n}",
  "context" : "public static void releaseDirectoryAccessPermission(Context context, final Uri documentUri) {\r\n    if (documentUri == null) {\r\n        return;\r\n    }\r\n    context.getApplicationContext().getContentResolver().getPersistedUriPermissions().stream().map(UriPermission::getUri).filter(documentUri::equals).forEach(u -> context.getContentResolver().releasePersistableUriPermission(u, 0));\r\n}",
  "start_lineno" : "83",
  "methodName" : "releaseDirectoryAccessPermission",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentUtils.java",
  "task_id" : "OpenTracks/729",
  "prompt" : "import android.net.Uri\nimport android.content.Context\npublic static void releaseDirectoryAccessPermission(Context context, final Uri documentUri) {\r\n    if (documentUri == null) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = IntentUtils.class.getSimpleName();\nprivate static final String JPEG_EXTENSION = \"jpeg\";",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "    } catch (Exception e) {\r\n        Log.w(TAG, \"Could not decode directory: \" + e.getMessage());\r\n    }\r\n    return null;\r\n}",
  "context" : "public static DocumentFile toDocumentFile(Context context, Uri directoryUri) {\r\n    if (directoryUri == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return DocumentFile.fromTreeUri(context.getApplicationContext(), directoryUri);\r\n    } catch (Exception e) {\r\n        Log.w(TAG, \"Could not decode directory: \" + e.getMessage());\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "94",
  "methodName" : "toDocumentFile",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentUtils.java",
  "task_id" : "OpenTracks/730",
  "prompt" : "import androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\npublic static DocumentFile toDocumentFile(Context context, Uri directoryUri) {\r\n    if (directoryUri == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return DocumentFile.fromTreeUri(context.getApplicationContext(), directoryUri);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final List<String> permissions;\nprivate static final List<String> GPS_PERMISSION;\nprivate static final List<String> BLUETOOTH_PERMISSIONS;\nprivate static final List<String> NOTIFICATION_PERMISSIONS;\nprivate static final List<String> ALL_PERMISSIONS;\nprivate static final List<String> RECORDING_PERMISSIONS;\npublic final static PermissionRequester GPS = new PermissionRequester(GPS_PERMISSION);\npublic final static PermissionRequester BLUETOOTH = new PermissionRequester(BLUETOOTH_PERMISSIONS);\npublic final static PermissionRequester NOTIFICATION = new PermissionRequester(NOTIFICATION_PERMISSIONS);\npublic final static PermissionRequester ALL = new PermissionRequester(ALL_PERMISSIONS);\npublic final static PermissionRequester RECORDING = new PermissionRequester(RECORDING_PERMISSIONS);",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        requestPermission(caller, onGranted, onRejected);\r\n    }\r\n}",
  "context" : "public void requestPermissionsIfNeeded(Context context, ActivityResultCaller caller, @Nullable Runnable onGranted, @Nullable RejectedCallback onRejected) {\r\n    if (!hasPermission(context)) {\r\n        requestPermission(caller, onGranted, onRejected);\r\n    }\r\n}",
  "start_lineno" : "33",
  "methodName" : "requestPermissionsIfNeeded",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\PermissionRequester.java",
  "task_id" : "OpenTracks/731",
  "prompt" : "import androidx.annotation.Nullable\nimport androidx.activity.result.ActivityResultCaller\nimport android.content.Context\npublic void requestPermissionsIfNeeded(Context context, ActivityResultCaller caller, @Nullable Runnable onGranted, @Nullable RejectedCallback onRejected) {\r\n    if (!hasPermission(context)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "    }\r\n    return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));\r\n}",
  "context" : "public static String formatDateTimeWithOffsetIfDifferent(OffsetDateTime odt) {\r\n    if (!odt.getOffset().equals(OffsetDateTime.now().getOffset())) {\r\n        return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));\r\n    }\r\n    return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));\r\n}",
  "start_lineno" : "71",
  "methodName" : "formatDateTimeWithOffsetIfDifferent",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/732",
  "prompt" : "public static String formatDateTimeWithOffsetIfDifferent(OffsetDateTime odt) {\r\n    if (!odt.getOffset().equals(OffsetDateTime.now().getOffset())) {\r\n        return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "    String value = formatElapsedTime(time);\r\n    return TextUtils.split(value, \":\").length == 2 ? \"0:\" + value : value;\r\n}",
  "context" : "/**\r\n * Formats the elapsed time in the form \"H:MM:SS\".\r\n */\r\npublic static String formatElapsedTimeWithHour(@NonNull Duration time) {\r\n    String value = formatElapsedTime(time);\r\n    return TextUtils.split(value, \":\").length == 2 ? \"0:\" + value : value;\r\n}",
  "start_lineno" : "127",
  "methodName" : "formatElapsedTimeWithHour",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/733",
  "prompt" : "/**\r\n * Formats the elapsed time in the form \"H:MM:SS\".\r\n */\r\npublic static String formatElapsedTimeWithHour(@NonNull Duration time) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "    df.setMinimumFractionDigits(decimalPlaces);\r\n    df.setMaximumFractionDigits(decimalPlaces);\r\n    df.setRoundingMode(RoundingMode.HALF_EVEN);\r\n    return df.format(value);\r\n}",
  "context" : "/**\r\n * Format a decimal number while removing trailing zeros of the decimal part (if present).\r\n */\r\npublic static String formatDecimal(double value, int decimalPlaces) {\r\n    DecimalFormat df = new DecimalFormat();\r\n    df.setMinimumFractionDigits(decimalPlaces);\r\n    df.setMaximumFractionDigits(decimalPlaces);\r\n    df.setRoundingMode(RoundingMode.HALF_EVEN);\r\n    return df.format(value);\r\n}",
  "start_lineno" : "136",
  "methodName" : "formatDecimal",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/734",
  "prompt" : "/**\r\n * Format a decimal number while removing trailing zeros of the decimal part (if present).\r\n */\r\npublic static String formatDecimal(double value, int decimalPlaces) {\r\n    DecimalFormat df = new DecimalFormat();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "    if (heartrate != null) {\r\n        value = StringUtils.formatDecimal(heartrate.getBPM(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_beats_per_minute));\r\n}",
  "context" : "public static Pair<String, String> getHeartRateParts(Context context, HeartRate heartrate) {\r\n    String value = context.getString(R.string.value_unknown);\r\n    if (heartrate != null) {\r\n        value = StringUtils.formatDecimal(heartrate.getBPM(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_beats_per_minute));\r\n}",
  "start_lineno" : "165",
  "methodName" : "getHeartRateParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/735",
  "prompt" : "public static Pair<String, String> getHeartRateParts(Context context, HeartRate heartrate) {\r\n    String value = context.getString(R.string.value_unknown);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "181",
  "ground_truth" : "    if (cadence != null) {\r\n        value = StringUtils.formatDecimal(cadence.getRPM(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_rounds_per_minute));\r\n}",
  "context" : "public static Pair<String, String> getCadenceParts(Context context, Cadence cadence) {\r\n    String value = context.getString(R.string.value_unknown);\r\n    if (cadence != null) {\r\n        value = StringUtils.formatDecimal(cadence.getRPM(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_rounds_per_minute));\r\n}",
  "start_lineno" : "174",
  "methodName" : "getCadenceParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/736",
  "prompt" : "public static Pair<String, String> getCadenceParts(Context context, Cadence cadence) {\r\n    String value = context.getString(R.string.value_unknown);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "    if (power != null) {\r\n        value = StringUtils.formatDecimal(power.getW(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_power));\r\n}",
  "context" : "public static Pair<String, String> getPowerParts(Context context, Power power) {\r\n    String value = context.getString(R.string.value_unknown);\r\n    if (power != null) {\r\n        value = StringUtils.formatDecimal(power.getW(), 0);\r\n    }\r\n    return new Pair<>(value, context.getString(R.string.sensor_unit_power));\r\n}",
  "start_lineno" : "183",
  "methodName" : "getPowerParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/737",
  "prompt" : "public static Pair<String, String> getPowerParts(Context context, Power power) {\r\n    String value = context.getString(R.string.value_unknown);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "202",
  "ground_truth" : "    }\r\n    return \"[\" + category + \"]\";\r\n}",
  "context" : "/**\r\n * Gets a string for category.\r\n *\r\n * @param category the category\r\n */\r\npublic static String getCategory(String category) {\r\n    if (category == null || category.length() == 0) {\r\n        return null;\r\n    }\r\n    return \"[\" + category + \"]\";\r\n}",
  "start_lineno" : "197",
  "methodName" : "getCategory",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/738",
  "prompt" : "/**\r\n * Gets a string for category.\r\n *\r\n * @param category the category\r\n */\r\npublic static String getCategory(String category) {\r\n    if (category == null || category.length() == 0) {\r\n        return null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "221",
  "ground_truth" : "    if (description != null && description.length() != 0) {\r\n        builder.append(\" \").append(description);\r\n    }\r\n    return builder.toString();\r\n}",
  "context" : "/**\r\n * Gets a string for category and description.\r\n *\r\n * @param category    the category\r\n * @param description the description\r\n */\r\npublic static String getCategoryDescription(String category, String description) {\r\n    if (category == null || category.length() == 0) {\r\n        return description;\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(getCategory(category));\r\n    if (description != null && description.length() != 0) {\r\n        builder.append(\" \").append(description);\r\n    }\r\n    return builder.toString();\r\n}",
  "start_lineno" : "210",
  "methodName" : "getCategoryDescription",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/739",
  "prompt" : "/**\r\n * Gets a string for category and description.\r\n *\r\n * @param category    the category\r\n * @param description the description\r\n */\r\npublic static String getCategoryDescription(String category, String description) {\r\n    if (category == null || category.length() == 0) {\r\n        return description;\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(getCategory(category));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "252",
  "ground_truth" : "    } catch (Exception e) {\r\n        Log.e(TAG, \"Invalid XML dateTime value\");\r\n        throw e;\r\n    }\r\n}",
  "context" : "/**\r\n * Gets the time, in milliseconds, from an XML date time string (ISO8601) as defined at <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">...</a>\r\n * Let's be lenient: if timezone information is not provided, UTC will be used.\r\n *\r\n * @param xmlDateTime the XML date time string\r\n */\r\npublic static OffsetDateTime parseTime(String xmlDateTime) {\r\n    try {\r\n        TemporalAccessor t = DateTimeFormatter.ISO_DATE_TIME.parseBest(xmlDateTime, ZonedDateTime::from, LocalDateTime::from);\r\n        if (t instanceof LocalDateTime localDateTime) {\r\n            Log.w(TAG, \"Date does not contain timezone information: using UTC.\");\r\n            t = localDateTime.atZone(ZoneOffset.UTC);\r\n        }\r\n        return OffsetDateTime.from(t);\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Invalid XML dateTime value\");\r\n        throw e;\r\n    }\r\n}",
  "start_lineno" : "240",
  "methodName" : "parseTime",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/740",
  "prompt" : "/**\r\n * Gets the time, in milliseconds, from an XML date time string (ISO8601) as defined at <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">...</a>\r\n * Let's be lenient: if timezone information is not provided, UTC will be used.\r\n *\r\n * @param xmlDateTime the XML date time string\r\n */\r\npublic static OffsetDateTime parseTime(String xmlDateTime) {\r\n    try {\r\n        TemporalAccessor t = DateTimeFormatter.ISO_DATE_TIME.parseBest(xmlDateTime, ZonedDateTime::from, LocalDateTime::from);\r\n        if (t instanceof LocalDateTime localDateTime) {\r\n            Log.w(TAG, \"Date does not contain timezone information: using UTC.\");\r\n            t = localDateTime.atZone(ZoneOffset.UTC);\r\n        }\r\n        return OffsetDateTime.from(t);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "267",
  "ground_truth" : "    Distance distance = altitude_m != null ? Distance.of(altitude_m) : Distance.of((Double) null);\r\n    return formatter.getDistanceParts(distance);\r\n}",
  "context" : "/**\r\n * @return the formatted altitude_m (or null) and it's unit as {@link Pair}\r\n */\r\n//TODO altitude_m should be double or a value object\r\npublic static Pair<String, String> getAltitudeParts(Context context, Float altitude_m, UnitSystem unitSystem) {\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setThreshold(Double.MAX_VALUE).setUnit(unitSystem).build(context);\r\n    Distance distance = altitude_m != null ? Distance.of(altitude_m) : Distance.of((Double) null);\r\n    return formatter.getDistanceParts(distance);\r\n}",
  "start_lineno" : "258",
  "methodName" : "getAltitudeParts",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/741",
  "prompt" : "/**\r\n * @return the formatted altitude_m (or null) and it's unit as {@link Pair}\r\n */\r\n//TODO altitude_m should be double or a value object\r\npublic static Pair<String, String> getAltitudeParts(Context context, Float altitude_m, UnitSystem unitSystem) {\r\n    DistanceFormatter formatter = DistanceFormatter.Builder().setDecimalCount(0).setThreshold(Double.MAX_VALUE).setUnit(unitSystem).build(context);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = StringUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "    Pair<String, String> altitudeParts = getAltitudeParts(context, altitude_m, unitSystem);\r\n    return context.getString(R.string.altitude_with_unit, altitudeParts.first, altitudeParts.second);\r\n}",
  "context" : "public static String formatAltitude(Context context, Float altitude_m, UnitSystem unitSystem) {\r\n    Pair<String, String> altitudeParts = getAltitudeParts(context, altitude_m, unitSystem);\r\n    return context.getString(R.string.altitude_with_unit, altitudeParts.first, altitudeParts.second);\r\n}",
  "start_lineno" : "269",
  "methodName" : "formatAltitude",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java",
  "task_id" : "OpenTracks/742",
  "prompt" : "public static String formatAltitude(Context context, Float altitude_m, UnitSystem unitSystem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SystemUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return \"\";\r\n    }\r\n}",
  "context" : "/**\r\n * Get the app version from the manifest.\r\n *\r\n * @return the version, or an empty string in case of failure.\r\n */\r\npublic static String getAppVersionName(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return pi.versionName + \"/\" + BuildConfig.VERSION_NAME_FULL;\r\n    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return \"\";\r\n    }\r\n}",
  "start_lineno" : "49",
  "methodName" : "getAppVersionName",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java",
  "task_id" : "OpenTracks/743",
  "prompt" : "import de.dennisguse.opentracks.BuildConfig\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nimport android.content.Context\n/**\r\n * Get the app version from the manifest.\r\n *\r\n * @return the version, or an empty string in case of failure.\r\n */\r\npublic static String getAppVersionName(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return pi.versionName + \"/\" + BuildConfig.VERSION_NAME_FULL;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SystemUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return -1L;\r\n    }\r\n}",
  "context" : "public static Long getAppVersionCode(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return PackageInfoCompat.getLongVersionCode(pi);\r\n    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return -1L;\r\n    }\r\n}",
  "start_lineno" : "59",
  "methodName" : "getAppVersionCode",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java",
  "task_id" : "OpenTracks/744",
  "prompt" : "import de.dennisguse.opentracks.BuildConfig\nimport androidx.core.content.pm.PackageInfoCompat\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nimport android.content.Context\npublic static Long getAppVersionCode(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return PackageInfoCompat.getLongVersionCode(pi);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SystemUtils.class.getSimpleName();",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "    }\r\n    return null;\r\n}",
  "context" : "/**\r\n * Releases the wake lock if it is held.\r\n *\r\n * @return null\r\n */\r\npublic static WakeLock releaseWakeLock(WakeLock wakeLock) {\r\n    if (wakeLock != null && wakeLock.isHeld()) {\r\n        wakeLock.release();\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "108",
  "methodName" : "releaseWakeLock",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java",
  "task_id" : "OpenTracks/745",
  "prompt" : "import android.os.PowerManager.WakeLock\n/**\r\n * Releases the wake lock if it is held.\r\n *\r\n * @return null\r\n */\r\npublic static WakeLock releaseWakeLock(WakeLock wakeLock) {\r\n    if (wakeLock != null && wakeLock.isHeld()) {\r\n        wakeLock.release();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "    //TODO Unify with GenericStatisticsViewHolder?\r\n    getBinding().statsClock.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n}",
  "context" : "@Override\r\npublic void configureUI(DataField dataField) {\r\n    //TODO Unify with GenericStatisticsViewHolder?\r\n    getBinding().statsClock.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n}",
  "start_lineno" : "18",
  "methodName" : "configureUI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\ClockViewHolder.java",
  "task_id" : "OpenTracks/746",
  "prompt" : "import de.dennisguse.opentracks.ui.customRecordingLayout.DataField\n@Override\r\npublic void configureUI(DataField dataField) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    getBinding().statsValue.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n    getBinding().statsDescriptionMain.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryHeader : R.style.TextAppearance_OpenTracks_SecondaryHeader);\r\n}",
  "context" : "@Override\r\npublic void configureUI(DataField dataField) {\r\n    getBinding().statsValue.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n    getBinding().statsDescriptionMain.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryHeader : R.style.TextAppearance_OpenTracks_SecondaryHeader);\r\n}",
  "start_lineno" : "25",
  "methodName" : "configureUI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/747",
  "prompt" : "import de.dennisguse.opentracks.ui.customRecordingLayout.DataField\n@Override\r\npublic void configureUI(DataField dataField) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_distance));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = DistanceFormatter.Builder().setUnit(unitSystem).build(getContext()).getDistanceParts(data.getTrackStatistics().getTotalDistance());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_distance));\r\n}",
  "start_lineno" : "33",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/748",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.DistanceFormatter\nimport de.dennisguse.opentracks.R\nimport android.util.Pair\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = DistanceFormatter.Builder().setUnit(unitSystem).build(getContext()).getDistanceParts(data.getTrackStatistics().getTotalDistance());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_total_time));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = new Pair<>(StringUtils.formatElapsedTime(data.getTrackStatistics().getTotalTime()), null);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_total_time));\r\n}",
  "start_lineno" : "47",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/749",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.R\nimport android.util.Pair\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = new Pair<>(StringUtils.formatElapsedTime(data.getTrackStatistics().getTotalTime()), null);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "    getBinding().statsValue.setText(value);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_moving_time));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    String value = StringUtils.formatElapsedTime(data.getTrackStatistics().getMovingTime());\r\n    getBinding().statsValue.setText(value);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_moving_time));\r\n}",
  "start_lineno" : "59",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/750",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    String value = StringUtils.formatElapsedTime(data.getTrackStatistics().getMovingTime());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_moving_speed));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_moving_speed));\r\n}",
  "start_lineno" : "119",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/751",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "148",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_speed));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_speed));\r\n}",
  "start_lineno" : "136",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/752",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "165",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getMaxSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_max_speed));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getMaxSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_max_speed));\r\n}",
  "start_lineno" : "153",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/753",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(true).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "182",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_moving_pace));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_moving_pace));\r\n}",
  "start_lineno" : "170",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/754",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "199",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_pace));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getAverageMovingSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_average_pace));\r\n}",
  "start_lineno" : "187",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/755",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "216",
  "ground_truth" : "    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getMaxSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_fastest_pace));\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r\n    Pair<String, String> valueAndUnit = speedFormatterSpeed.getSpeedParts(data.getTrackStatistics().getMaxSpeed());\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(getContext().getString(R.string.stats_fastest_pace));\r\n}",
  "start_lineno" : "204",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/756",
  "prompt" : "import de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.SpeedFormatter\nimport de.dennisguse.opentracks.data.models.Speed\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    SpeedFormatter speedFormatterSpeed = SpeedFormatter.Builder().setUnit(unitSystem).setReportSpeedOrPace(false).build(getContext());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "245",
  "ground_truth" : "    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_gain);\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = StringUtils.getAltitudeParts(getContext(), data.getTrackStatistics().getTotalAltitudeGain(), unitSystem);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_gain);\r\n}",
  "start_lineno" : "237",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/757",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.R\nimport android.util.Pair\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = StringUtils.getAltitudeParts(getContext(), data.getTrackStatistics().getTotalAltitudeGain(), unitSystem);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "258",
  "ground_truth" : "    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_loss);\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = StringUtils.getAltitudeParts(getContext(), data.getTrackStatistics().getTotalAltitudeLoss(), unitSystem);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r\n    getBinding().statsUnit.setText(valueAndUnit.second);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_loss);\r\n}",
  "start_lineno" : "250",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/758",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.R\nimport android.util.Pair\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    Pair<String, String> valueAndUnit = StringUtils.getAltitudeParts(getContext(), data.getTrackStatistics().getTotalAltitudeLoss(), unitSystem);\r\n    getBinding().statsValue.setText(valueAndUnit.first);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final boolean reportSpeed;",
  "app_type" : "life",
  "end_lineno" : "275",
  "ground_truth" : "        value = getContext().getString(R.string.value_unknown);\r\n    }\r\n    getBinding().statsValue.setText(value);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_coordinates);\r\n}",
  "context" : "@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    TrackPoint latestTrackPoint = data.latestTrackPoint();\r\n    String value;\r\n    if (latestTrackPoint != null && latestTrackPoint.hasLocation()) {\r\n        value = StringUtils.formatCoordinate(getContext(), latestTrackPoint.getLatitude(), latestTrackPoint.getLongitude());\r\n    } else {\r\n        value = getContext().getString(R.string.value_unknown);\r\n    }\r\n    getBinding().statsValue.setText(value);\r\n    getBinding().statsDescriptionMain.setText(R.string.stats_coordinates);\r\n}",
  "start_lineno" : "263",
  "methodName" : "onChanged",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\GenericStatisticsViewHolder.java",
  "task_id" : "OpenTracks/759",
  "prompt" : "import de.dennisguse.opentracks.util.StringUtils\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onChanged(UnitSystem unitSystem, RecordingData data) {\r\n    TrackPoint latestTrackPoint = data.latestTrackPoint();\r\n    String value;\r\n    if (latestTrackPoint != null && latestTrackPoint.hasLocation()) {\r\n        value = StringUtils.formatCoordinate(getContext(), latestTrackPoint.getLatitude(), latestTrackPoint.getLongitude());\r\n    } else {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "    getBinding().statsValue.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n    getBinding().statsDescriptionMain.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryHeader : R.style.TextAppearance_OpenTracks_SecondaryHeader);\r\n}",
  "context" : "@Override\r\npublic void configureUI(DataField dataField) {\r\n    getBinding().statsValue.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryValue : R.style.TextAppearance_OpenTracks_SecondaryValue);\r\n    getBinding().statsDescriptionMain.setTextAppearance(dataField.isPrimary() ? R.style.TextAppearance_OpenTracks_PrimaryHeader : R.style.TextAppearance_OpenTracks_SecondaryHeader);\r\n}",
  "start_lineno" : "23",
  "methodName" : "configureUI",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\SensorStatisticsViewHolder.java",
  "task_id" : "OpenTracks/760",
  "prompt" : "import de.dennisguse.opentracks.ui.customRecordingLayout.DataField\n@Override\r\npublic void configureUI(DataField dataField) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Context context;\nprivate T binding;",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "    this.context = context;\r\n    this.binding = createViewBinding(inflater);\r\n}",
  "context" : "public void initialize(Context context, LayoutInflater inflater) {\r\n    this.context = context;\r\n    this.binding = createViewBinding(inflater);\r\n}",
  "start_lineno" : "19",
  "methodName" : "initialize",
  "fpath" : "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\StatisticViewHolder.java",
  "task_id" : "OpenTracks/761",
  "prompt" : "import android.view.LayoutInflater\nimport android.content.Context\npublic void initialize(Context context, LayoutInflater inflater) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel BackupViewModel",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        super.prepareViewModel(items)\r\n        viewModel.uri = uri\r\n    }",
  "context" : "override fun prepareViewModel(items: List<Photo>?) {\r\n        super.prepareViewModel(items)\r\n        viewModel.uri = uri\r\n    }",
  "start_lineno" : "43",
  "methodName" : "prepareViewModel",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupBottomSheetDialogFragment.kt",
  "task_id" : "Photok/0",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\noverride fun prepareViewModel(items: List<Photo>?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uri Uri\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        openZipFile()\r\n        super.preProcess()\r\n    }",
  "context" : "override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r\n        elementsToProcess = items.size\r\n        openZipFile()\r\n        super.preProcess()\r\n    }",
  "start_lineno" : "59",
  "methodName" : "preProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt",
  "task_id" : "Photok/1",
  "prompt" : "override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r\n        elementsToProcess = items.size\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uri Uri\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "            backedUpPhotos.add(item)\r\n        } else {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "context" : "override suspend fun processItem(item: Photo) {\r\n        val success = writePhotoToZipEntry(item)\r\n        if (success) {\r\n            backedUpPhotos.add(item)\r\n        } else {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "start_lineno" : "66",
  "methodName" : "processItem",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt",
  "task_id" : "Photok/2",
  "prompt" : "import java.util.zip.ZipEntry\nimport dev.leonlatsch.photok.model.database.entity.Photo\noverride suspend fun processItem(item: Photo) {\r\n        val success = writePhotoToZipEntry(item)\r\n        if (success) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uri Uri\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "        writeZipEntry(BackupMetaData.FILE_NAME, ByteArrayInputStream(metaBytes))\r\n\r\n        zipOutputStream.lazyClose()\r\n        super.postProcess()\r\n    }",
  "context" : "override suspend fun postProcess() {\r\n        val details = BackupMetaData(config.securityPassword!!, backedUpPhotos)\r\n        val metaBytes = gson.toJson(details).toByteArray()\r\n        writeZipEntry(BackupMetaData.FILE_NAME, ByteArrayInputStream(metaBytes))\r\n\r\n        zipOutputStream.lazyClose()\r\n        super.postProcess()\r\n    }",
  "start_lineno" : "75",
  "methodName" : "postProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt",
  "task_id" : "Photok/3",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport dev.leonlatsch.photok.backup.data.BackupMetaData\noverride suspend fun postProcess() {\r\n        val details = BackupMetaData(config.securityPassword!!, backedUpPhotos)\r\n        val metaBytes = gson.toJson(details).toByteArray()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uri Uri\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson",
  "app_type" : "life",
  "end_lineno" : "87",
  "ground_truth" : "        val out = app.contentResolver.openOutputStream(uri)\r\n        zipOutputStream = ZipOutputStream(out)\r\n    }",
  "context" : "private fun openZipFile() {\r\n        val out = app.contentResolver.openOutputStream(uri)\r\n        zipOutputStream = ZipOutputStream(out)\r\n    }",
  "start_lineno" : "84",
  "methodName" : "openZipFile",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt",
  "task_id" : "Photok/4",
  "prompt" : "private fun openZipFile() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uri Uri\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "        } catch (e: IOException) {\r\n            Timber.d(\"Cloud not write to backup: $e\")\r\n            false\r\n        }\r\n    }",
  "context" : "private fun writeZipEntry(fileName: String, inputStream: InputStream?): Boolean {\r\n        inputStream ?: return false\r\n\r\n        return try {\r\n            val entry = ZipEntry(fileName)\r\n            zipOutputStream.putNextEntry(entry)\r\n            inputStream.copyTo(zipOutputStream)\r\n            zipOutputStream.closeEntry()\r\n            true\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Cloud not write to backup: $e\")\r\n            false\r\n        }\r\n    }",
  "start_lineno" : "112",
  "methodName" : "writeZipEntry",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt",
  "task_id" : "Photok/5",
  "prompt" : "import java.util.zip.ZipEntry\nimport java.io.InputStream\nprivate fun writeZipEntry(fileName: String, inputStream: InputStream?): Boolean {\r\n        inputStream ?: return false\r\n\r\n        return try {\r\n            val entry = ZipEntry(fileName)\r\n            zipOutputStream.putNextEntry(entry)\r\n            inputStream.copyTo(zipOutputStream)\r\n            zipOutputStream.closeEntry()\r\n            true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel RestoreBackupViewModel",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "            UnlockBackupDialogFragment(viewModel.metaData!!.password) { origPassword ->\r\n                viewModel.restoreBackup(origPassword)\r\n            }\r\n        unlockDialog.show(requireActivity().supportFragmentManager)\r\n    }",
  "context" : "fun onRestoreAndUnlock() {\r\n        val unlockDialog =\r\n            UnlockBackupDialogFragment(viewModel.metaData!!.password) { origPassword ->\r\n                viewModel.restoreBackup(origPassword)\r\n            }\r\n        unlockDialog.show(requireActivity().supportFragmentManager)\r\n    }",
  "start_lineno" : "88",
  "methodName" : "onRestoreAndUnlock",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupDialogFragment.kt",
  "task_id" : "Photok/6",
  "prompt" : "import dev.leonlatsch.photok.R\nfun onRestoreAndUnlock() {\r\n        val unlockDialog =\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel RestoreBackupViewModel",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: DialogRestoreBackupBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "96",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupDialogFragment.kt",
  "task_id" : "Photok/7",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogRestoreBackupBinding\nimport dev.leonlatsch.photok.R\noverride fun bind(binding: DialogRestoreBackupBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var restoreState RestoreState\nvar metaData BackupMetaData?\nvar zipFileName String\nvar backupSize Long\nvar fileUri Uri\nvar backupVersion",
  "app_type" : "life",
  "end_lineno" : "148",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return -1\r\n    }",
  "context" : "private fun getVersion(): Int {\r\n        metaData?.let {\r\n            return if (it.backupVersion == 0) { // Treat legacy version 0 as 1\r\n                1\r\n            } else {\r\n                it.backupVersion\r\n            }\r\n        }\r\n\r\n        return -1\r\n    }",
  "start_lineno" : "138",
  "methodName" : "getVersion",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt",
  "task_id" : "Photok/8",
  "prompt" : "private fun getVersion(): Int {\r\n        metaData?.let {\r\n            return if (it.backupVersion == 0) { // Treat legacy version 0 as 1\r\n                1\r\n            } else {\r\n                it.backupVersion\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var restoreState RestoreState\nvar metaData BackupMetaData?\nvar zipFileName String\nvar backupSize Long\nvar fileUri Uri\nvar backupVersion",
  "app_type" : "life",
  "end_lineno" : "164",
  "ground_truth" : "            }\r\n\r\n            restoreState = RestoreState.FINISHED\r\n        }\r\n    }",
  "context" : "fun restoreBackup(origPassword: String) = viewModelScope.launch(Dispatchers.IO) {\r\n        restoreState = RestoreState.RESTORING\r\n\r\n        createStream(fileUri)?.use {\r\n            when (backupVersion) {\r\n                1 -> restoreVersion1(it, origPassword)\r\n                2 -> restoreVersion2(it, origPassword)\r\n            }\r\n\r\n            restoreState = RestoreState.FINISHED\r\n        }\r\n    }",
  "start_lineno" : "153",
  "methodName" : "restoreBackup",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt",
  "task_id" : "Photok/9",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nimport android.net.Uri\nfun restoreBackup(origPassword: String) = viewModelScope.launch(Dispatchers.IO) {\r\n        restoreState = RestoreState.RESTORING\r\n\r\n        createStream(fileUri)?.use {\r\n            when (backupVersion) {\r\n                1 -> restoreVersion1(it, origPassword)\r\n                2 -> restoreVersion2(it, origPassword)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var restoreState RestoreState\nvar metaData BackupMetaData?\nvar zipFileName String\nvar backupSize Long\nvar fileUri Uri\nvar backupVersion",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "            ZipInputStream(BufferedInputStream(inputStream))\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "private fun createStream(uri: Uri): ZipInputStream? {\r\n        val inputStream = try {\r\n            app.contentResolver.openInputStream(uri)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening backup at: $uri\")\r\n            null\r\n        }\r\n        return if (inputStream != null) {\r\n            ZipInputStream(BufferedInputStream(inputStream))\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "261",
  "methodName" : "createStream",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt",
  "task_id" : "Photok/10",
  "prompt" : "import java.util.zip.ZipInputStream\nimport java.io.IOException\nimport timber.log.Timber\nimport android.net.Uri\nprivate fun createStream(uri: Uri): ZipInputStream? {\r\n        val inputStream = try {\r\n            app.contentResolver.openInputStream(uri)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening backup at: $uri\")\r\n            null\r\n        }\r\n        return if (inputStream != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel UnlockBackupViewModel",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "\r\n        viewModel.addOnPropertyChange<String>(BR.password) {\r\n            binding.unlockBackupWrongPasswordWarning.hide()\r\n        }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        viewModel.addOnPropertyChange<String>(BR.password) {\r\n            binding.unlockBackupWrongPasswordWarning.hide()\r\n        }\r\n    }",
  "start_lineno" : "44",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupDialogFragment.kt",
  "task_id" : "Photok/11",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel UnlockBackupViewModel",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "            } else {\r\n                binding.unlockBackupWrongPasswordWarning.show()\r\n            }\r\n        }\r\n    }",
  "context" : "fun onUnlock() {\r\n        binding.unlockBackupWrongPasswordWarning.hide()\r\n        viewModel.verifyPassword(backupPassword) {\r\n            if (it) {\r\n                dismiss()\r\n                onUnlockSuccess(viewModel.password)\r\n            } else {\r\n                binding.unlockBackupWrongPasswordWarning.show()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "onUnlock",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupDialogFragment.kt",
  "task_id" : "Photok/12",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.hide\nfun onUnlock() {\r\n        binding.unlockBackupWrongPasswordWarning.hide()\r\n        viewModel.verifyPassword(backupPassword) {\r\n            if (it) {\r\n                dismiss()\r\n                onUnlockSuccess(viewModel.password)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel UnlockBackupViewModel",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        binding.viewModel = viewModel\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: DialogBackupUnlockBinding) {\r\n        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n        binding.context = this\r\n    }",
  "start_lineno" : "68",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupDialogFragment.kt",
  "task_id" : "Photok/13",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogBackupUnlockBinding\noverride fun bind(binding: DialogBackupUnlockBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var password String",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "            val valid = passwordManager.checkPassword(password, backupPassword)\r\n            result(valid)\r\n        }",
  "context" : "fun verifyPassword(backupPassword: String, result: (valid: Boolean) -> Unit) =\r\n        viewModelScope.launch {\r\n            val valid = passwordManager.checkPassword(password, backupPassword)\r\n            result(valid)\r\n        }",
  "start_lineno" : "52",
  "methodName" : "verifyPassword",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupViewModel.kt",
  "task_id" : "Photok/14",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun verifyPassword(backupPassword: String, result: (valid: Boolean) -> Unit) =\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar encryptionManager EncryptionManager\nvar encryptedStorageManager EncryptedStorageManager\nvar wentToBackgroundAt\nval rawApplicationState\nvar ignoreNextTimeout\nvar applicationState ApplicationState",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "\r\n        ProcessLifecycleOwner.get().lifecycle.addObserver(this)\r\n\r\n        setAppDesign(config.systemDesign)\r\n    }",
  "context" : "override fun onCreate() {\r\n        super.onCreate()\r\n\r\n        if (BuildConfig.DEBUG) {\r\n            Timber.plant(Timber.DebugTree())\r\n        }\r\n\r\n        ProcessLifecycleOwner.get().lifecycle.addObserver(this)\r\n\r\n        setAppDesign(config.systemDesign)\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\BaseApplication.kt",
  "task_id" : "Photok/15",
  "prompt" : "import timber.log.Timber\nimport dev.leonlatsch.photok.settings.data.Config\noverride fun onCreate() {\r\n        super.onCreate()\r\n\r\n        if (BuildConfig.DEBUG) {\r\n            Timber.plant(Timber.DebugTree())\r\n        }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar encryptionManager EncryptionManager\nvar encryptedStorageManager EncryptedStorageManager\nvar wentToBackgroundAt\nval rawApplicationState\nvar ignoreNextTimeout\nvar applicationState ApplicationState",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "            && System.currentTimeMillis() - wentToBackgroundAt >= config.securityLockTimeout\r\n        ) {\r\n            lockApp()\r\n        }\r\n    }",
  "context" : " @OnLifecycleEvent(Lifecycle.Event.ON_START)\r\n    fun onAppForeground() {\r\n        if (ignoreNextTimeout) {\r\n            ignoreNextTimeout = false\r\n            return\r\n        }\r\n\r\n        if (config.securityLockTimeout != -1\r\n            && wentToBackgroundAt != 0L\r\n            && System.currentTimeMillis() - wentToBackgroundAt >= config.securityLockTimeout\r\n        ) {\r\n            lockApp()\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "onAppForeground",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\BaseApplication.kt",
  "task_id" : "Photok/16",
  "prompt" : " @OnLifecycleEvent(Lifecycle.Event.ON_START)\r\n    fun onAppForeground() {\r\n        if (ignoreNextTimeout) {\r\n            ignoreNextTimeout = false\r\n            return\r\n        }\r\n\r\n        if (config.securityLockTimeout != -1\r\n            && wentToBackgroundAt != 0L\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar encryptionManager EncryptionManager\nvar encryptedStorageManager EncryptedStorageManager\nvar wentToBackgroundAt\nval rawApplicationState\nvar ignoreNextTimeout\nvar applicationState ApplicationState",
  "app_type" : "life",
  "end_lineno" : "114",
  "ground_truth" : "        applicationState = ApplicationState.LOCKED\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        startActivity(intent)\r\n    }",
  "context" : "fun lockApp() {\r\n        encryptionManager.reset()\r\n        applicationState = ApplicationState.LOCKED\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        startActivity(intent)\r\n    }",
  "start_lineno" : "108",
  "methodName" : "lockApp",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\BaseApplication.kt",
  "task_id" : "Photok/17",
  "prompt" : "fun lockApp() {\r\n        encryptionManager.reset()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val dateFormat SimpleDateFormat\nval decimalFormat\nval GB_SUFFIX\nval MB_SUFFIX\nval KB_SUFFIX\nval BYTES_SUFFIX",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        val date = Date(millis)\r\n        return dateFormat.format(date)\r\n    }",
  "context" : "fun millisToFormattedDateConverter(millis: Long): String? {\r\n        val date = Date(millis)\r\n        return dateFormat.format(date)\r\n    }",
  "start_lineno" : "39",
  "methodName" : "millisToFormattedDateConverter",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\databinding\\BindingConverters.kt",
  "task_id" : "Photok/18",
  "prompt" : "fun millisToFormattedDateConverter(millis: Long): String? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "        PhotokDatabase::class.java,\r\n        DATABASE_NAME\r\n    ).build()",
  "context" : " @Provides\r\n    @Singleton\r\n    fun providePhotokDatabase(@ApplicationContext app: Context) = Room.databaseBuilder(\r\n        app,\r\n        PhotokDatabase::class.java,\r\n        DATABASE_NAME\r\n    ).build()",
  "start_lineno" : "43",
  "methodName" : "providePhotokDatabase",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\di\\AppModule.kt",
  "task_id" : "Photok/19",
  "prompt" : "import javax.inject.Singleton\nimport dev.leonlatsch.photok.model.database.PhotokDatabase\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport androidx.room.Room\nimport android.content.Context\n @Provides\r\n    @Singleton\r\n    fun providePhotokDatabase(@ApplicationContext app: Context) = Room.databaseBuilder(\r\n        app,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "            val launchIntent = Intent(context, MainActivity::class.java)\r\n            launchIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n            context.startActivity(launchIntent)\r\n        }\r\n    }",
  "context" : "override fun onReceive(context: Context?, intent: Intent?) {\r\n        super.onReceive(context, intent)\r\n        context ?: return\r\n        if (intent?.data?.host == config.securityDialLaunchCode) {\r\n            val launchIntent = Intent(context, MainActivity::class.java)\r\n            launchIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n            context.startActivity(launchIntent)\r\n        }\r\n    }",
  "start_lineno" : "39",
  "methodName" : "onReceive",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\DialLauncher.kt",
  "task_id" : "Photok/20",
  "prompt" : "import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        super.onReceive(context, intent)\r\n        context ?: return\r\n        if (intent?.data?.host == config.securityDialLaunchCode) {\r",
  "type" : "android",
  "actions" : "android.provider.Telephony.SECRET_CODE"
}, {
  "variables" : "val viewModel ForwardDialerViewModel\nvar navigator ForwardDialerNavigator",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "            navigator.navigate(it, this)\r\n        }\r\n\r\n        viewModel.evaluateNavigation()\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        viewModel.navigationEvent.observe(this) {\r\n            navigator.navigate(it, this)\r\n        }\r\n\r\n        viewModel.evaluateNavigation()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerActivity.kt",
  "task_id" : "Photok/21",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        viewModel.navigationEvent.observe(this) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "            NavigationEvent.OpenRecoveryMenu -> navigateOpenRecoveryMenu(activity)\r\n        }\r\n    }",
  "context" : "fun navigate(navigationEvent: NavigationEvent, activity: ForwardDialerActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.ForwardToDialer -> navigateForwardToDialer(activity)\r\n            NavigationEvent.OpenRecoveryMenu -> navigateOpenRecoveryMenu(activity)\r\n        }\r\n    }",
  "start_lineno" : "26",
  "methodName" : "navigate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt",
  "task_id" : "Photok/22",
  "prompt" : "fun navigate(navigationEvent: NavigationEvent, activity: ForwardDialerActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.ForwardToDialer -> navigateForwardToDialer(activity)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        activity.apply {\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n    }",
  "context" : "private fun navigateOpenRecoveryMenu(activity: ForwardDialerActivity) {\r\n        Timber.d(\"opening recovery menu\")\r\n        val intent = Intent(activity, RecoveryMenuActivity::class.java)\r\n        activity.apply {\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "navigateOpenRecoveryMenu",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt",
  "task_id" : "Photok/23",
  "prompt" : "import timber.log.Timber\nimport dev.leonlatsch.photok.recoverymenu.RecoveryMenuActivity\nimport android.content.Intent\nprivate fun navigateOpenRecoveryMenu(activity: ForwardDialerActivity) {\r\n        Timber.d(\"opening recovery menu\")\r\n        val intent = Intent(activity, RecoveryMenuActivity::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        activity.apply {\r\n            startActivity(dialIntent)\r\n            finishAndRemoveTask()\r\n        }\r\n    }",
  "context" : "private fun navigateForwardToDialer(activity: ForwardDialerActivity) {\r\n        val dialIntent = Intent(Intent.ACTION_DIAL).apply {\r\n            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        }\r\n        activity.apply {\r\n            startActivity(dialIntent)\r\n            finishAndRemoveTask()\r\n        }\r\n    }",
  "start_lineno" : "42",
  "methodName" : "navigateForwardToDialer",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt",
  "task_id" : "Photok/24",
  "prompt" : "import android.content.Intent\nprivate fun navigateForwardToDialer(activity: ForwardDialerActivity) {\r\n        val dialIntent = Intent(Intent.ACTION_DIAL).apply {\r\n            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "            context.contentResolver,\r\n            Settings.Global.AIRPLANE_MODE_ON,\r\n            0\r\n        ) != 0\r\n    }",
  "context" : "operator fun invoke(): Boolean {\r\n        return Settings.System.getInt(\r\n            context.contentResolver,\r\n            Settings.Global.AIRPLANE_MODE_ON,\r\n            0\r\n        ) != 0\r\n    }",
  "start_lineno" : "29",
  "methodName" : "invoke",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\usecase\\IsAirplaneModeOnUseCase.kt",
  "task_id" : "Photok/25",
  "prompt" : "import android.provider.Settings\noperator fun invoke(): Boolean {\r\n        return Settings.System.getInt(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "            onDelete = {},\r\n            onExport = {},\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun GalleryInteractionsPreview() {\r\n    MaterialTheme {\r\n        GalleryInteractionsRow(\r\n            onClose = {},\r\n            onSelectAll = {},\r\n            onDelete = {},\r\n            onExport = {},\r\n        )\r\n    }\r\n}",
  "start_lineno" : "79",
  "methodName" : "GalleryInteractionsPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryInteractionsRow.kt",
  "task_id" : "Photok/26",
  "prompt" : "import dev.leonlatsch.photok.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Row\n\r\n@Preview\r\n@Composable\r\nprivate fun GalleryInteractionsPreview() {\r\n    MaterialTheme {\r\n        GalleryInteractionsRow(\r\n            onClose = {},\r\n            onSelectAll = {},\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        GalleryPlaceholder {}\r\n    }\r\n}",
  "context" : "\r\n@Preview(showBackground = true, backgroundColor = 0xFFFFFF)\r\n@Composable\r\nprivate fun GalleryPlaceholderPreview() {\r\n    MaterialTheme {\r\n        GalleryPlaceholder {}\r\n    }\r\n}",
  "start_lineno" : "81",
  "methodName" : "GalleryPlaceholderPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryPlaceholder.kt",
  "task_id" : "Photok/27",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Preview(showBackground = true, backgroundColor = 0xFFFFFF)\r\n@Composable\r\nprivate fun GalleryPlaceholderPreview() {\r\n    MaterialTheme {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "                handleUiEvent = { viewModel.handleUiEvent(it) }\r\n            )\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun GalleryScreen(viewModel: GalleryViewModel) {\r\n\r\n    val uiState by viewModel.uiState.collectAsState()\r\n\r\n    MaterialTheme {\r\n        when (uiState) {\r\n            is GalleryUiState.Empty -> GalleryPlaceholder { viewModel.handleUiEvent(it) }\r\n\r\n            is GalleryUiState.Content -> GalleryContent(\r\n                uiState as GalleryUiState.Content,\r\n                handleUiEvent = { viewModel.handleUiEvent(it) }\r\n            )\r\n        }\r\n    }\r\n}",
  "start_lineno" : "25",
  "methodName" : "GalleryScreen",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryScreen.kt",
  "task_id" : "Photok/28",
  "prompt" : "import dev.leonlatsch.photok.gallery.ui.GalleryViewModel\nimport dev.leonlatsch.photok.gallery.ui.GalleryUiState\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun GalleryScreen(viewModel: GalleryViewModel) {\r\n\r\n    val uiState by viewModel.uiState.collectAsState()\r\n\r\n    MaterialTheme {\r\n        when (uiState) {\r\n            is GalleryUiState.Empty -> GalleryPlaceholder { viewModel.handleUiEvent(it) }\r\n\r\n            is GalleryUiState.Content -> GalleryContent(\r\n                uiState as GalleryUiState.Content,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "            contentDescription = null,\r\n            tint = Color.White\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun ImportButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    FloatingActionButton(\r\n        onClick = onClick,\r\n        containerColor = colorResource(R.color.colorPrimary),\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(R.drawable.ic_add),\r\n            contentDescription = null,\r\n            tint = Color.White\r\n        )\r\n    }\r\n}",
  "start_lineno" : "28",
  "methodName" : "ImportButton",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\ImportButton.kt",
  "task_id" : "Photok/29",
  "prompt" : "import dev.leonlatsch.photok.R\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.FloatingActionButton\n\r\n@Composable\r\nfun ImportButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    FloatingActionButton(\r\n        onClick = onClick,\r\n        containerColor = colorResource(R.color.colorPrimary),\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(R.drawable.ic_add),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        onClick = {}\r\n    )\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun ImportButtonPreview() {\r\n    ImportButton(\r\n        onClick = {}\r\n    )\r\n}",
  "start_lineno" : "46",
  "methodName" : "ImportButtonPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\ImportButton.kt",
  "task_id" : "Photok/30",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun ImportButtonPreview() {\r\n    ImportButton(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "        multiSelectionState = MultiSelectionState(isActive = true, listOf(\"1\", \"2\", \"5\")),\r\n        handleUiEvent = {},\r\n        columnCount = 3\r\n    )\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun PhotoGridPreview() {\r\n    PhotosGrid(\r\n        photos = listOf(\r\n            PhotoTile(\"\", PhotoType.JPEG, \"1\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"2\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"3\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"4\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"5\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"6\"),\r\n        ),\r\n        multiSelectionState = MultiSelectionState(isActive = true, listOf(\"1\", \"2\", \"5\")),\r\n        handleUiEvent = {},\r\n        columnCount = 3\r\n    )\r\n}",
  "start_lineno" : "85",
  "methodName" : "PhotoGridPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\PhotoGrid.kt",
  "task_id" : "Photok/31",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.PhotoType\nimport dev.leonlatsch.photok.gallery.ui.PhotoTile\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun PhotoGridPreview() {\r\n    PhotosGrid(\r\n        photos = listOf(\r\n            PhotoTile(\"\", PhotoType.JPEG, \"1\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"2\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"3\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"4\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"5\"),\r\n            PhotoTile(\"\", PhotoType.JPEG, \"6\"),\r\n        ),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel GalleryViewModel\nvar navigator GalleryNavigator\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "            ) {\r\n                GalleryScreen(viewModel)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View = ComposeView(requireContext()).apply {\r\n        setContent {\r\n            CompositionLocalProvider(\r\n                LocalEncryptedImageLoader provides viewModel.encryptedImageLoader\r\n            ) {\r\n                GalleryScreen(viewModel)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "48",
  "methodName" : "onCreateView",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt",
  "task_id" : "Photok/32",
  "prompt" : "import dev.leonlatsch.photok.imageloading.compose.LocalEncryptedImageLoader\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.CompositionLocalProvider\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View = ComposeView(requireContext()).apply {\r\n        setContent {\r\n            CompositionLocalProvider(\r\n                LocalEncryptedImageLoader provides viewModel.encryptedImageLoader\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel GalleryViewModel\nvar navigator GalleryNavigator\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "            }\r\n        }\r\n\r\n        viewModel.checkForNewFeatures()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        launchLifecycleAwareJob {\r\n            viewModel.eventsFlow.collect { event ->\r\n                navigator.navigate(event, findNavController(), this)\r\n            }\r\n        }\r\n\r\n        viewModel.checkForNewFeatures()\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt",
  "task_id" : "Photok/33",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.launchLifecycleAwareJob\nimport androidx.navigation.fragment.findNavController\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        launchLifecycleAwareJob {\r\n            viewModel.eventsFlow.collect { event ->\r\n                navigator.navigate(event, findNavController(), this)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel GalleryViewModel\nvar navigator GalleryNavigator\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "\r\n        viewModel.onConfigurationChanged()\r\n    }",
  "context" : "override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n\r\n        viewModel.onConfigurationChanged()\r\n    }",
  "start_lineno" : "74",
  "methodName" : "onConfigurationChanged",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt",
  "task_id" : "Photok/34",
  "prompt" : "import dev.leonlatsch.photok.settings.data.Config\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "                multiSelectionState = multiSelectionState,\r\n                columnCount = columnCount\r\n            )\r\n        }\r\n    }",
  "context" : "fun create(photos: List<Photo>, multiSelectionState: MultiSelectionState, columnCount: Int): GalleryUiState {\r\n        return if (photos.isEmpty()) {\r\n            GalleryUiState.Empty\r\n        } else {\r\n            GalleryUiState.Content(\r\n                selectionMode = false,\r\n                photos = photos.map { PhotoTile(it.fileName, it.type, it.uuid) },\r\n                multiSelectionState = multiSelectionState,\r\n                columnCount = columnCount\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "23",
  "methodName" : "create",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryUiStateFactory.kt",
  "task_id" : "Photok/35",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nfun create(photos: List<Photo>, multiSelectionState: MultiSelectionState, columnCount: Int): GalleryUiState {\r\n        return if (photos.isEmpty()) {\r\n            GalleryUiState.Empty\r\n        } else {\r\n            GalleryUiState.Content(\r\n                selectionMode = false,\r\n                photos = photos.map { PhotoTile(it.fileName, it.type, it.uuid) },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            it.copy(\r\n                isActive = true,\r\n                selectedItemUUIDs = photosFlow.value.map { photo -> photo.uuid })\r\n        }\r\n    }",
  "context" : "private fun onSelectAll() {\r\n        multiSelectionState.update {\r\n            it.copy(\r\n                isActive = true,\r\n                selectedItemUUIDs = photosFlow.value.map { photo -> photo.uuid })\r\n        }\r\n    }",
  "start_lineno" : "84",
  "methodName" : "onSelectAll",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/36",
  "prompt" : "import kotlinx.coroutines.flow.update\nprivate fun onSelectAll() {\r\n        multiSelectionState.update {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "            GalleryNavigationEvent.StartExportDialog(\r\n                photosFlow.value.filter { uuidsToExport.contains(it.uuid) })\r\n        )\r\n        onCancelMultiSelect()\r\n    }",
  "context" : "private fun onExportSelectedItems() {\r\n        val uuidsToExport = multiSelectionState.value.selectedItemUUIDs\r\n        eventsChannel.trySend(\r\n            GalleryNavigationEvent.StartExportDialog(\r\n                photosFlow.value.filter { uuidsToExport.contains(it.uuid) })\r\n        )\r\n        onCancelMultiSelect()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onExportSelectedItems",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/37",
  "prompt" : "import kotlinx.coroutines.channels.Channel\nprivate fun onExportSelectedItems() {\r\n        val uuidsToExport = multiSelectionState.value.selectedItemUUIDs\r\n        eventsChannel.trySend(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "        eventsChannel.trySend(GalleryNavigationEvent.StartDeleteDialog(\r\n            photosFlow.value.filter { uuidsToDelete.contains(it.uuid) }\r\n        ))\r\n        onCancelMultiSelect()\r\n    }",
  "context" : "private fun onDeleteSelectedItems() {\r\n        val uuidsToDelete = multiSelectionState.value.selectedItemUUIDs\r\n        eventsChannel.trySend(GalleryNavigationEvent.StartDeleteDialog(\r\n            photosFlow.value.filter { uuidsToDelete.contains(it.uuid) }\r\n        ))\r\n        onCancelMultiSelect()\r\n    }",
  "start_lineno" : "101",
  "methodName" : "onDeleteSelectedItems",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/38",
  "prompt" : "private fun onDeleteSelectedItems() {\r\n        val uuidsToDelete = multiSelectionState.value.selectedItemUUIDs\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "                    selectedItemUUIDs = listOf(item.uuid)\r\n                )\r\n            }\r\n        }\r\n    }",
  "context" : "private fun onPhotoLongPressed(item: PhotoTile) {\r\n        if (multiSelectionState.value.isActive.not()) {\r\n            multiSelectionState.update {\r\n                it.copy(\r\n                    isActive = true,\r\n                    selectedItemUUIDs = listOf(item.uuid)\r\n                )\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "113",
  "methodName" : "onPhotoLongPressed",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/39",
  "prompt" : "import kotlinx.coroutines.flow.update\nprivate fun onPhotoLongPressed(item: PhotoTile) {\r\n        if (multiSelectionState.value.isActive.not()) {\r\n            multiSelectionState.update {\r\n                it.copy(\r\n                    isActive = true,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "154",
  "ground_truth" : "        eventsChannel.trySend(GalleryNavigationEvent.ShowNewFeaturesDialog)\r\n        config.systemLastFeatureVersionCode = FEATURE_VERSION_CODE\r\n    }",
  "context" : "fun checkForNewFeatures() = viewModelScope.launch {\r\n        if (config.systemLastFeatureVersionCode >= FEATURE_VERSION_CODE) return@launch\r\n\r\n        eventsChannel.trySend(GalleryNavigationEvent.ShowNewFeaturesDialog)\r\n        config.systemLastFeatureVersionCode = FEATURE_VERSION_CODE\r\n    }",
  "start_lineno" : "149",
  "methodName" : "checkForNewFeatures",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/40",
  "prompt" : "import kotlinx.coroutines.launch\nimport dev.leonlatsch.photok.news.newfeatures.ui.FEATURE_VERSION_CODE\nimport androidx.lifecycle.viewModelScope\nfun checkForNewFeatures() = viewModelScope.launch {\r\n        if (config.systemLastFeatureVersionCode >= FEATURE_VERSION_CODE) return@launch\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val photosFlow\nval multiSelectionState\nval columnCountFlow\nval uiState StateFlow<GalleryUiState>\nval eventsChannel\nval eventsFlow",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "            Configuration.ORIENTATION_PORTRAIT -> PORTRAIT_COLUMN_COUNT\r\n            Configuration.ORIENTATION_LANDSCAPE -> LANDSCAPE_COLUMN_COUNT\r\n            else -> PORTRAIT_COLUMN_COUNT\r\n        }\r\n    }",
  "context" : "fun onConfigurationChanged() {\r\n        columnCountFlow.value = when (resources.configuration.orientation) {\r\n            Configuration.ORIENTATION_PORTRAIT -> PORTRAIT_COLUMN_COUNT\r\n            Configuration.ORIENTATION_LANDSCAPE -> LANDSCAPE_COLUMN_COUNT\r\n            else -> PORTRAIT_COLUMN_COUNT\r\n        }\r\n    }",
  "start_lineno" : "156",
  "methodName" : "onConfigurationChanged",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt",
  "task_id" : "Photok/41",
  "prompt" : "import dev.leonlatsch.photok.settings.data.Config\nimport android.content.res.Configuration\nfun onConfigurationChanged() {\r\n        columnCountFlow.value = when (resources.configuration.orientation) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "        .allowMultiple()\r\n        .requestCode(REQ_CONTENT_PHOTOS)\r\n        .permissionCode(REQ_PERM_IMPORT_PHOTOS)\r\n        .permission(getReadImagesPermission())\r\n        .show(this)",
  "context" : " @AfterPermissionGranted(REQ_PERM_IMPORT_PHOTOS)\r\n    fun startSelectPhotos() = Chooser.Builder()\r\n        .message(\"Select Photos\")\r\n        .mimeType(\"image/*\")\r\n        .allowMultiple()\r\n        .requestCode(REQ_CONTENT_PHOTOS)\r\n        .permissionCode(REQ_PERM_IMPORT_PHOTOS)\r\n        .permission(getReadImagesPermission())\r\n        .show(this)",
  "start_lineno" : "49",
  "methodName" : "startSelectPhotos",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/42",
  "prompt" : "import pub.devrel.easypermissions.AfterPermissionGranted\nimport dev.leonlatsch.photok.uicomponnets.Chooser\nimport dev.leonlatsch.photok.other.REQ_PERM_IMPORT_PHOTOS\nimport dev.leonlatsch.photok.R\n @AfterPermissionGranted(REQ_PERM_IMPORT_PHOTOS)\r\n    fun startSelectPhotos() = Chooser.Builder()\r\n        .message(\"Select Photos\")\r\n        .mimeType(\"image/*\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        .allowMultiple()\r\n        .requestCode(REQ_CONTENT_VIDEOS)\r\n        .permissionCode(REQ_PERM_IMPORT_VIDEOS)\r\n        .permission(getReadVideosPermission())\r\n        .show(this)",
  "context" : " @AfterPermissionGranted(REQ_PERM_IMPORT_VIDEOS)\r\n    fun startSelectVideos() = Chooser.Builder()\r\n        .message(\"Select Videos\")\r\n        .mimeType(\"video/*\")\r\n        .allowMultiple()\r\n        .requestCode(REQ_CONTENT_VIDEOS)\r\n        .permissionCode(REQ_PERM_IMPORT_VIDEOS)\r\n        .permission(getReadVideosPermission())\r\n        .show(this)",
  "start_lineno" : "65",
  "methodName" : "startSelectVideos",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/43",
  "prompt" : "import pub.devrel.easypermissions.AfterPermissionGranted\nimport dev.leonlatsch.photok.uicomponnets.Chooser\nimport dev.leonlatsch.photok.other.REQ_PERM_IMPORT_VIDEOS\nimport dev.leonlatsch.photok.R\n @AfterPermissionGranted(REQ_PERM_IMPORT_VIDEOS)\r\n    fun startSelectVideos() = Chooser.Builder()\r\n        .message(\"Select Videos\")\r\n        .mimeType(\"video/*\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "        .mimeType(\"application/zip\")\r\n        .requestCode(REQ_CONTENT_BACKUP)\r\n        .show(this)",
  "context" : "fun startSelectBackup() = Chooser.Builder()\r\n        .message(\"Select Backup\")\r\n        .mimeType(\"application/zip\")\r\n        .requestCode(REQ_CONTENT_BACKUP)\r\n        .show(this)",
  "start_lineno" : "79",
  "methodName" : "startSelectBackup",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/44",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser\nfun startSelectBackup() = Chooser.Builder()\r\n        .message(\"Select Backup\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "            }\r\n        }\r\n\r\n        dismiss()\r\n    }",
  "context" : "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            when (requestCode) {\r\n                REQ_CONTENT_PHOTOS -> dispatchPhotoImportRequest(data)\r\n                REQ_CONTENT_VIDEOS -> dispatchVideosImportRequest(data)\r\n                REQ_CONTENT_BACKUP -> dispatchBackupImportRequest(data)\r\n            }\r\n        }\r\n\r\n        dismiss()\r\n    }",
  "start_lineno" : "85",
  "methodName" : "onActivityResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/45",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            when (requestCode) {\r\n                REQ_CONTENT_PHOTOS -> dispatchPhotoImportRequest(data)\r\n                REQ_CONTENT_VIDEOS -> dispatchVideosImportRequest(data)\r\n                REQ_CONTENT_BACKUP -> dispatchBackupImportRequest(data)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "            RestoreBackupDialogFragment(uri).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "context" : "private fun dispatchBackupImportRequest(data: Intent?) = data?.let {\r\n        it.data?.let { uri ->\r\n            RestoreBackupDialogFragment(uri).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "dispatchBackupImportRequest",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/46",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.content.Intent\nprivate fun dispatchBackupImportRequest(data: Intent?) = data?.let {\r\n        it.data?.let { uri ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "            ImportBottomSheetDialogFragment(mediaUris).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "context" : "private fun dispatchMediaElementsImportRequest(data: Intent?) = data?.let {\r\n        val mediaUris = resolveUrisFromIntent(it)\r\n        if (mediaUris.isNotEmpty()) {\r\n            ImportBottomSheetDialogFragment(mediaUris).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "start_lineno" : "111",
  "methodName" : "dispatchMediaElementsImportRequest",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/47",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.net.Uri\nimport android.content.Intent\nprivate fun dispatchMediaElementsImportRequest(data: Intent?) = data?.let {\r\n        val mediaUris = resolveUrisFromIntent(it)\r\n        if (mediaUris.isNotEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "            val uri = data.data!!\r\n            uris.add(uri)\r\n        }\r\n        return uris\r\n    }",
  "context" : "private fun resolveUrisFromIntent(data: Intent): MutableList<Uri> {\r\n        val uris = mutableListOf<Uri>()\r\n        if (data.clipData != null) {\r\n            val count = data.clipData!!.itemCount\r\n            for (i in 0 until count) {\r\n                val uri = data.clipData!!.getItemAt(i).uri\r\n                uris.add(uri)\r\n            }\r\n        } else if (data.data != null) {\r\n            val uri = data.data!!\r\n            uris.add(uri)\r\n        }\r\n        return uris\r\n    }",
  "start_lineno" : "118",
  "methodName" : "resolveUrisFromIntent",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/48",
  "prompt" : "import android.net.Uri\nimport android.content.Intent\nprivate fun resolveUrisFromIntent(data: Intent): MutableList<Uri> {\r\n        val uris = mutableListOf<Uri>()\r\n        if (data.clipData != null) {\r\n            val count = data.clipData!!.itemCount\r\n            for (i in 0 until count) {\r\n                val uri = data.clipData!!.getItemAt(i).uri\r\n                uris.add(uri)\r\n            }\r\n        } else if (data.data != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: DialogImportMenuBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "133",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt",
  "task_id" : "Photok/49",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogImportMenuBinding\noverride fun bind(binding: DialogImportMenuBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "            failuresOccurred = true\r\n        }\r\n    }",
  "context" : "override suspend fun processItem(item: Uri) {\r\n        val success = photoRepository.safeImportPhoto(item)\r\n        if (!success) {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "start_lineno" : "38",
  "methodName" : "processItem",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportViewModel.kt",
  "task_id" : "Photok/50",
  "prompt" : "import android.net.Uri\noverride suspend fun processItem(item: Uri) {\r\n        val success = photoRepository.safeImportPhoto(item)\r\n        if (!success) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        val success = photoRepository.safeDeletePhoto(item)\r\n        if (!success) {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "context" : "override suspend fun processItem(item: Photo) {\r\n        if (item.id == null) {\r\n            failuresOccurred = true\r\n            return\r\n        }\r\n\r\n        val success = photoRepository.safeDeletePhoto(item)\r\n        if (!success) {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "start_lineno" : "38",
  "methodName" : "processItem",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\menu\\DeleteViewModel.kt",
  "task_id" : "Photok/51",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\noverride suspend fun processItem(item: Photo) {\r\n        if (item.id == null) {\r\n            failuresOccurred = true\r\n            return\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "            failuresOccurred = true\r\n        }\r\n    }",
  "context" : "override suspend fun processItem(item: Photo) {\r\n        val result = photoRepository.exportPhoto(item)\r\n        if (!result) {\r\n            failuresOccurred = true\r\n        }\r\n    }",
  "start_lineno" : "38",
  "methodName" : "processItem",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\menu\\ExportViewModel.kt",
  "task_id" : "Photok/52",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\noverride suspend fun processItem(item: Photo) {\r\n        val result = photoRepository.exportPhoto(item)\r\n        if (!result) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "            )\r\n        ) { _, _ -> // On positive button clicked\r\n            DeleteBottomSheetDialogFragment(photos).show(fragmentManager)\r\n        }\r\n    }",
  "context" : "private fun navigateStartDeleteDialog(\r\n        context: Context,\r\n        photos: List<Photo>,\r\n        fragmentManager: FragmentManager\r\n    ) {\r\n        Dialogs.showConfirmDialog(\r\n            context,\r\n            String.format(\r\n                context.getString(R.string.delete_are_you_sure),\r\n                photos.size\r\n            )\r\n        ) { _, _ -> // On positive button clicked\r\n            DeleteBottomSheetDialogFragment(photos).show(fragmentManager)\r\n        }\r\n    }",
  "start_lineno" : "92",
  "methodName" : "navigateStartDeleteDialog",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\navigation\\GalleryNavigator.kt",
  "task_id" : "Photok/53",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Dialogs\nimport dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport dev.leonlatsch.photok.R\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nprivate fun navigateStartDeleteDialog(\r\n        context: Context,\r\n        photos: List<Photo>,\r\n        fragmentManager: FragmentManager\r\n    ) {\r\n        Dialogs.showConfirmDialog(\r\n            context,\r\n            String.format(\r\n                context.getString(R.string.delete_are_you_sure),\r\n                photos.size\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "        val args = bundleOf(INTENT_PHOTO_UUID to photoUUID)\r\n        navController.navigate(R.id.action_galleryFragment_to_imageViewerFragment, args)\r\n    }",
  "context" : "private fun navigateOpenPhoto(photoUUID: String, navController: NavController) {\r\n        val args = bundleOf(INTENT_PHOTO_UUID to photoUUID)\r\n        navController.navigate(R.id.action_galleryFragment_to_imageViewerFragment, args)\r\n    }",
  "start_lineno" : "112",
  "methodName" : "navigateOpenPhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\navigation\\GalleryNavigator.kt",
  "task_id" : "Photok/54",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.navigation.NavController\nprivate fun navigateOpenPhoto(photoUUID: String, navController: NavController) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "            source = imageSource,\r\n            mimeType = requestData.mimeType,\r\n            dataSource = DataSource.DISK\r\n        )\r\n    }",
  "context" : "override suspend fun fetch(): FetchResult? {\r\n        val inputStream = encryptedStorageManager.internalOpenEncryptedFileInput(requestData.internalFileName)\r\n        inputStream ?: return null\r\n\r\n        val imageSource = ImageSource(inputStream.source().buffer(), context)\r\n\r\n        return SourceResult(\r\n            source = imageSource,\r\n            mimeType = requestData.mimeType,\r\n            dataSource = DataSource.DISK\r\n        )\r\n    }",
  "start_lineno" : "42",
  "methodName" : "fetch",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageloading\\compose\\EncryptedImageFetcher.kt",
  "task_id" : "Photok/55",
  "prompt" : "import okio.source\nimport okio.buffer\nimport coil.fetch.SourceResult\nimport coil.fetch.FetchResult\nimport coil.decode.ImageSource\noverride suspend fun fetch(): FetchResult? {\r\n        val inputStream = encryptedStorageManager.internalOpenEncryptedFileInput(requestData.internalFileName)\r\n        inputStream ?: return null\r\n\r\n        val imageSource = ImageSource(inputStream.source().buffer(), context)\r\n\r\n        return SourceResult(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "            .error(R.color.design_default_color_error)\r\n            .build(),\r\n        imageLoader = LocalEncryptedImageLoader.current ?: LocalContext.current.imageLoader\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun rememberEncryptedImagePainter(data: EncryptedImageRequestData): AsyncImagePainter {\r\n    val context = LocalContext.current\r\n\r\n    return rememberAsyncImagePainter(\r\n        model = ImageRequest.Builder(context)\r\n            .data(data)\r\n            .placeholder(R.color.lightGray)\r\n            .fallback(R.color.design_default_color_error)\r\n            .error(R.color.design_default_color_error)\r\n            .build(),\r\n        imageLoader = LocalEncryptedImageLoader.current ?: LocalContext.current.imageLoader\r\n    )\r\n}",
  "start_lineno" : "30",
  "methodName" : "rememberEncryptedImagePainter",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageloading\\compose\\EncryptedImagePainter.kt",
  "task_id" : "Photok/56",
  "prompt" : "import dev.leonlatsch.photok.imageloading.compose.model.EncryptedImageRequestData\nimport dev.leonlatsch.photok.R\nimport coil.request.ImageRequest\nimport coil.compose.rememberAsyncImagePainter\nimport coil.compose.AsyncImagePainter\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberEncryptedImagePainter(data: EncryptedImageRequestData): AsyncImagePainter {\r\n    val context = LocalContext.current\r\n\r\n    return rememberAsyncImagePainter(\r\n        model = ImageRequest.Builder(context)\r\n            .data(data)\r\n            .placeholder(R.color.lightGray)\r\n            .fallback(R.color.design_default_color_error)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        super.onViewCreated(view, savedInstanceState)\r\n        photo ?: dismiss()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        photo ?: dismiss()\r\n    }",
  "start_lineno" : "36",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\DetailsBottomSheetDialog.kt",
  "task_id" : "Photok/57",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: DialogBottomSheetDetailsBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "41",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\DetailsBottomSheetDialog.kt",
  "task_id" : "Photok/58",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogBottomSheetDetailsBinding\noverride fun bind(binding: DialogBottomSheetDetailsBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "            }, { // onError\r\n                Dialogs.showLongToast(requireContext(), getString(R.string.common_error))\r\n            })\r\n        }\r\n    }",
  "context" : "fun onDelete() {\r\n        Dialogs.showConfirmDialog(requireContext(), getString(R.string.delete_are_you_sure_this)) { _, _ ->\r\n            viewModel.deletePhoto({ // onSuccess\r\n                findNavController().navigateUp()\r\n            }, { // onError\r\n                Dialogs.showLongToast(requireContext(), getString(R.string.common_error))\r\n            })\r\n        }\r\n    }",
  "start_lineno" : "109",
  "methodName" : "onDelete",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt",
  "task_id" : "Photok/59",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Dialogs\nimport dev.leonlatsch.photok.R\nimport androidx.navigation.fragment.findNavController\nfun onDelete() {\r\n        Dialogs.showConfirmDialog(requireContext(), getString(R.string.delete_are_you_sure_this)) { _, _ ->\r\n            viewModel.deletePhoto({ // onSuccess\r\n                findNavController().navigateUp()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "            onDetails()\r\n            true\r\n        }\r\n        else -> false\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean = when (item.itemId) {\r\n        R.id.menuViewPhotoInfo -> {\r\n            onDetails()\r\n            true\r\n        }\r\n        else -> false\r\n    }",
  "start_lineno" : "184",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt",
  "task_id" : "Photok/60",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean = when (item.itemId) {\r\n        R.id.menuViewPhotoInfo -> {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "198",
  "ground_truth" : "            requireActivity().hideSystemUI()\r\n        } else {\r\n            requireActivity().showSystemUI()\r\n        }\r\n    }",
  "context" : "private fun toggleSystemUI() {\r\n        if (systemUiVisible) {\r\n            requireActivity().hideSystemUI()\r\n        } else {\r\n            requireActivity().showSystemUI()\r\n        }\r\n    }",
  "start_lineno" : "192",
  "methodName" : "toggleSystemUI",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt",
  "task_id" : "Photok/61",
  "prompt" : "private fun toggleSystemUI() {\r\n        if (systemUiVisible) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "203",
  "ground_truth" : "        super.onDestroy()\r\n        requireActivity().showSystemUI()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        requireActivity().showSystemUI()\r\n    }",
  "start_lineno" : "200",
  "methodName" : "onDestroy",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt",
  "task_id" : "Photok/62",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config",
  "app_type" : "life",
  "end_lineno" : "209",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: FragmentImageViewerBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "205",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt",
  "task_id" : "Photok/63",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentImageViewerBinding\nimport android.view.View\noverride fun bind(binding: FragmentImageViewerBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uuids\nvar currentPhoto Photo?",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        }\r\n        onFinished(uuids)\r\n    }",
  "context" : "fun preloadData(onFinished: (List<String>) -> Unit) = viewModelScope.launch {\r\n        if (uuids.isEmpty()) {\r\n            uuids = photoRepository.getAllUUIDs()\r\n        }\r\n        onFinished(uuids)\r\n    }",
  "start_lineno" : "57",
  "methodName" : "preloadData",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt",
  "task_id" : "Photok/64",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun preloadData(onFinished: (List<String>) -> Unit) = viewModelScope.launch {\r\n        if (uuids.isEmpty()) {\r\n            uuids = photoRepository.getAllUUIDs()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uuids\nvar currentPhoto Photo?",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "        val photo = photoRepository.get(uuids[position])\r\n        currentPhoto = photo\r\n    }",
  "context" : "fun updateDetails(position: Int) = viewModelScope.launch {\r\n        val photo = photoRepository.get(uuids[position])\r\n        currentPhoto = photo\r\n    }",
  "start_lineno" : "67",
  "methodName" : "updateDetails",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt",
  "task_id" : "Photok/65",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun updateDetails(position: Int) = viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uuids\nvar currentPhoto Photo?",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "                onMain {\r\n                    if (it) onSuccess() else onError()\r\n                }\r\n            }\r\n        }",
  "context" : "fun deletePhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto ?: return@launch\r\n            currentPhoto!!.id ?: return@launch\r\n\r\n            photoRepository.safeDeletePhoto(currentPhoto!!).let {\r\n                onMain {\r\n                    if (it) onSuccess() else onError()\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "78",
  "methodName" : "deletePhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt",
  "task_id" : "Photok/66",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.lifecycle.viewModelScope\nfun deletePhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto ?: return@launch\r\n            currentPhoto!!.id ?: return@launch\r\n\r\n            photoRepository.safeDeletePhoto(currentPhoto!!).let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var uuids\nvar currentPhoto Photo?",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "                onMain {\r\n                    if (success) onSuccess() else onError()\r\n                }\r\n            }\r\n        }",
  "context" : "fun exportPhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto ?: return@launch\r\n            currentPhoto!!.id ?: return@launch\r\n\r\n            photoRepository.exportPhoto(currentPhoto!!).let { success ->\r\n                onMain {\r\n                    if (success) onSuccess() else onError()\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "96",
  "methodName" : "exportPhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt",
  "task_id" : "Photok/67",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.lifecycle.viewModelScope\nfun exportPhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto ?: return@launch\r\n            currentPhoto!!.id ?: return@launch\r\n\r\n            photoRepository.exportPhoto(currentPhoto!!).let { success ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val imageView TouchImageView\nval playButton ImageView\nvar photoUUID String",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "\r\n        loadPhoto()\r\n    }",
  "context" : "fun bindTo(uuid: String?) {\r\n        uuid ?: return\r\n        photoUUID = uuid\r\n\r\n        loadPhoto()\r\n    }",
  "start_lineno" : "72",
  "methodName" : "bindTo",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\PhotoViewHolder.kt",
  "task_id" : "Photok/68",
  "prompt" : "fun bindTo(uuid: String?) {\r\n        uuid ?: return\r\n        photoUUID = uuid\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val imageView TouchImageView\nval playButton ImageView\nvar photoUUID String",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "        navController.navigate(\r\n            R.id.action_imageViewerFragment_to_videoPlayerFragment,\r\n            args\r\n        )\r\n    }",
  "context" : "private fun openVideoPlayer(photo: Photo) {\r\n        val args = bundleOf(INTENT_PHOTO_UUID to photo.id)\r\n        navController.navigate(\r\n            R.id.action_imageViewerFragment_to_videoPlayerFragment,\r\n            args\r\n        )\r\n    }",
  "start_lineno" : "151",
  "methodName" : "openVideoPlayer",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\PhotoViewHolder.kt",
  "task_id" : "Photok/69",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.core.os.bundleOf\nprivate fun openVideoPlayer(photo: Photo) {\r\n        val args = bundleOf(INTENT_PHOTO_UUID to photo.id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel MainViewModel\nvar config Config\nvar onOrientationChanged",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        enableEdgeToEdge()\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        enableEdgeToEdge()\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt",
  "task_id" : "Photok/70",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel MainViewModel\nvar config Config\nvar onOrientationChanged",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "                intent.getParcelableArrayListExtra<Uri>(Intent.EXTRA_STREAM)?.forEach { uri ->\r\n                    viewModel.addUriToSharedUriStore(uri)\r\n                }\r\n        }\r\n    }",
  "context" : "private fun dispatchIntent() {\r\n        when (intent.action) {\r\n            Intent.ACTION_SEND -> intent.getParcelableExtra<Uri>(Intent.EXTRA_STREAM)?.let { uri ->\r\n                viewModel.addUriToSharedUriStore(uri)\r\n            }\r\n\r\n            Intent.ACTION_SEND_MULTIPLE ->\r\n                intent.getParcelableArrayListExtra<Uri>(Intent.EXTRA_STREAM)?.forEach { uri ->\r\n                    viewModel.addUriToSharedUriStore(uri)\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "116",
  "methodName" : "dispatchIntent",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt",
  "task_id" : "Photok/71",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.net.Uri\nimport android.content.Intent\nprivate fun dispatchIntent() {\r\n        when (intent.action) {\r\n            Intent.ACTION_SEND -> intent.getParcelableExtra<Uri>(Intent.EXTRA_STREAM)?.let { uri ->\r\n                viewModel.addUriToSharedUriStore(uri)\r\n            }\r\n\r\n            Intent.ACTION_SEND_MULTIPLE ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel MainViewModel\nvar config Config\nvar onOrientationChanged",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "            )\r\n        ) { _, _ ->\r\n            onImportConfirmed()\r\n        }\r\n    }",
  "context" : "private fun confirmImport(amount: Int, onImportConfirmed: () -> Unit) {\r\n        Dialogs.showConfirmDialog(\r\n            this,\r\n            String.format(\r\n                getString(R.string.import_sharted_question),\r\n                amount\r\n            )\r\n        ) { _, _ ->\r\n            onImportConfirmed()\r\n        }\r\n    }",
  "start_lineno" : "129",
  "methodName" : "confirmImport",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt",
  "task_id" : "Photok/72",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Dialogs\nimport dev.leonlatsch.photok.R\nprivate fun confirmImport(amount: Int, onImportConfirmed: () -> Unit) {\r\n        Dialogs.showConfirmDialog(\r\n            this,\r\n            String.format(\r\n                getString(R.string.import_sharted_question),\r\n                amount\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel MainViewModel\nvar config Config\nvar onOrientationChanged",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "\r\n        onOrientationChanged(newConfig.orientation)\r\n    }",
  "context" : "override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n\r\n        onOrientationChanged(newConfig.orientation)\r\n    }",
  "start_lineno" : "169",
  "methodName" : "onConfigurationChanged",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt",
  "task_id" : "Photok/73",
  "prompt" : "import dev.leonlatsch.photok.settings.data.Config\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel MainViewModel\nvar config Config\nvar onOrientationChanged",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "            MainMenu(uiState) {\r\n                findNavController(R.id.mainNavHostFragment).navigate(it)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun bind(binding: ActivityMainBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n\r\n        binding.mainMenuComposeContainer.setContent {\r\n            val uiState by viewModel.mainMenuUiState.collectAsState()\r\n\r\n            MainMenu(uiState) {\r\n                findNavController(R.id.mainNavHostFragment).navigate(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "175",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt",
  "task_id" : "Photok/74",
  "prompt" : "import dev.leonlatsch.photok.databinding.ActivityMainBinding\nimport androidx.compose.runtime.collectAsState\noverride fun bind(binding: ActivityMainBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n\r\n        binding.mainMenuComposeContainer.setContent {\r\n            val uiState by viewModel.mainMenuUiState.collectAsState()\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val _mainMenuUiState\nval mainMenuUiState\nval consumedUrisFromStore",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        consumedUrisFromStore.value = sharedUrisStore.getUris()\r\n        sharedUrisStore.clear()\r\n    }",
  "context" : "fun consumeSharedUris() {\r\n        consumedUrisFromStore.value = sharedUrisStore.getUris()\r\n        sharedUrisStore.clear()\r\n    }",
  "start_lineno" : "50",
  "methodName" : "consumeSharedUris",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainViewModel.kt",
  "task_id" : "Photok/75",
  "prompt" : "import android.net.Uri\nfun consumeSharedUris() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            uiState = MainMenuUiState(R.id.galleryFragment),\r\n            onNavigationItemClicked = {}\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun MainMenuPreview() {\r\n    MaterialTheme {\r\n        MainMenu(\r\n            uiState = MainMenuUiState(R.id.galleryFragment),\r\n            onNavigationItemClicked = {}\r\n        )\r\n    }\r\n}",
  "start_lineno" : "58",
  "methodName" : "MainMenuPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\navigation\\MainMenu.kt",
  "task_id" : "Photok/76",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Preview\r\n@Composable\r\nprivate fun MainMenuPreview() {\r\n    MaterialTheme {\r\n        MainMenu(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "            encryptionManager.createCipherInputStream(inputStream, password)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "context" : "fun internalOpenEncryptedFileInput(\r\n        fileName: String,\r\n        password: String? = null\r\n    ): CipherInputStream? =\r\n        try {\r\n            val inputStream = app.openFileInput(fileName)\r\n            encryptionManager.createCipherInputStream(inputStream, password)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "start_lineno" : "50",
  "methodName" : "internalOpenEncryptedFileInput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/77",
  "prompt" : "import javax.crypto.CipherInputStream\nimport java.io.InputStream\nfun internalOpenEncryptedFileInput(\r\n        fileName: String,\r\n        password: String? = null\r\n    ): CipherInputStream? =\r\n        try {\r\n            val inputStream = app.openFileInput(fileName)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "71",
  "ground_truth" : "            app.openFileInput(fileName)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "context" : "fun internalOpenFileInput(fileName: String): InputStream? =\r\n        try {\r\n            app.openFileInput(fileName)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "start_lineno" : "65",
  "methodName" : "internalOpenFileInput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/78",
  "prompt" : "import java.io.InputStream\nfun internalOpenFileInput(fileName: String): InputStream? =\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            encryptionManager.createCipherOutputStream(outputStream, password)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "context" : "fun internalOpenEncryptedFileOutput(\r\n        fileName: String,\r\n        password: String? = null\r\n    ): CipherOutputStream? =\r\n        try {\r\n            val outputStream = app.openFileOutput(fileName, INTERNAL_FILE_MODE)\r\n            encryptionManager.createCipherOutputStream(outputStream, password)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "start_lineno" : "76",
  "methodName" : "internalOpenEncryptedFileOutput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/79",
  "prompt" : "import javax.crypto.CipherOutputStream\nimport java.io.OutputStream\nfun internalOpenEncryptedFileOutput(\r\n        fileName: String,\r\n        password: String? = null\r\n    ): CipherOutputStream? =\r\n        try {\r\n            val outputStream = app.openFileOutput(fileName, INTERNAL_FILE_MODE)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "            app.openFileOutput(fileName, INTERNAL_FILE_MODE)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "context" : "fun internalOpenFileOutput(fileName: String): OutputStream? =\r\n        try {\r\n            app.openFileOutput(fileName, INTERNAL_FILE_MODE)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening internal file: $fileName: $e\")\r\n            null\r\n        }",
  "start_lineno" : "91",
  "methodName" : "internalOpenFileOutput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/80",
  "prompt" : "import java.io.OutputStream\nfun internalOpenFileOutput(fileName: String): OutputStream? =\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "            Timber.d(\"Error deleting internal file: $fileName\")\r\n        }\r\n\r\n        return success\r\n    }",
  "context" : "fun internalDeleteFile(fileName: String): Boolean {\r\n        val success = app.deleteFile(fileName)\r\n        if (!success) {\r\n            Timber.d(\"Error deleting internal file: $fileName\")\r\n        }\r\n\r\n        return success\r\n    }",
  "start_lineno" : "102",
  "methodName" : "internalDeleteFile",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/81",
  "prompt" : "fun internalDeleteFile(fileName: String): Boolean {\r\n        val success = app.deleteFile(fileName)\r\n        if (!success) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "        val newFile = app.getFileStreamPath(newFileName)\r\n        return currentFile.renameTo(newFile)\r\n    }",
  "context" : "private fun internalRenameFile(currentFileName: String, newFileName: String): Boolean {\r\n        val currentFile = app.getFileStreamPath(currentFileName)\r\n        val newFile = app.getFileStreamPath(newFileName)\r\n        return currentFile.renameTo(newFile)\r\n    }",
  "start_lineno" : "114",
  "methodName" : "internalRenameFile",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/82",
  "prompt" : "private fun internalRenameFile(currentFileName: String, newFileName: String): Boolean {\r\n        val currentFile = app.getFileStreamPath(currentFileName)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "            app.contentResolver.openInputStream(fileUri)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening external file at $fileUri: $e\")\r\n            null\r\n        }",
  "context" : "fun externalOpenFileInput(fileUri: Uri): InputStream? =\r\n        try {\r\n            app.contentResolver.openInputStream(fileUri)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening external file at $fileUri: $e\")\r\n            null\r\n        }",
  "start_lineno" : "151",
  "methodName" : "externalOpenFileInput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/83",
  "prompt" : "import java.io.InputStream\nimport android.net.Uri\nfun externalOpenFileInput(fileUri: Uri): InputStream? =\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "174",
  "ground_truth" : "        } catch (e: IOException) {\r\n            Timber.d(\"Error opening external file at $destinationUri: $e\")\r\n            null\r\n        }\r\n    }",
  "context" : "fun externalOpenFileOutput(\r\n        contentResolver: ContentResolver,\r\n        contentValues: ContentValues,\r\n        destinationUri: Uri\r\n    ): OutputStream? {\r\n        return try {\r\n            val externalUrl = contentResolver.insert(destinationUri, contentValues) ?: return null\r\n            contentResolver.openOutputStream(externalUrl)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening external file at $destinationUri: $e\")\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "162",
  "methodName" : "externalOpenFileOutput",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/84",
  "prompt" : "import java.io.OutputStream\nimport android.net.Uri\nimport android.content.ContentValues\nimport android.content.ContentResolver\nfun externalOpenFileOutput(\r\n        contentResolver: ContentResolver,\r\n        contentValues: ContentValues,\r\n        destinationUri: Uri\r\n    ): OutputStream? {\r\n        return try {\r\n            val externalUrl = contentResolver.insert(destinationUri, contentValues) ?: return null\r\n            contentResolver.openOutputStream(externalUrl)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val INTERNAL_FILE_MODE",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "            srcDoc?.delete()\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error deleting external file at $fileUri: $e\")\r\n            null\r\n        }",
  "context" : "fun externalDeleteFile(fileUri: Uri): Boolean? =\r\n        try {\r\n            val srcDoc = DocumentFile.fromSingleUri(app.baseContext, fileUri);\r\n            srcDoc?.delete()\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error deleting external file at $fileUri: $e\")\r\n            null\r\n        }",
  "start_lineno" : "179",
  "methodName" : "externalDeleteFile",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt",
  "task_id" : "Photok/85",
  "prompt" : "import androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\nfun externalDeleteFile(fileUri: Uri): Boolean? =\r\n        try {\r\n            val srcDoc = DocumentFile.fromSingleUri(app.baseContext, fileUri);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "            success = photoId != -1L\r\n        }\r\n\r\n        return success\r\n    }",
  "context" : "suspend fun safeCreatePhoto(\r\n        photo: Photo,\r\n        source: InputStream?,\r\n        origUri: Uri? = null\r\n    ): Boolean {\r\n        val fileLen = createPhotoFile(photo, source)\r\n        var success = fileLen != -1L\r\n\r\n        if (success) {\r\n            photo.size = fileLen\r\n\r\n            if (origUri != null) {\r\n                createThumbnail(photo, origUri)\r\n                if (photo.type.isVideo) {\r\n                    createVideoPreview(photo, origUri)\r\n                }\r\n            }\r\n\r\n            val photoId = insert(photo)\r\n            success = photoId != -1L\r\n        }\r\n\r\n        return success\r\n    }",
  "start_lineno" : "150",
  "methodName" : "safeCreatePhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/86",
  "prompt" : "import java.io.InputStream\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport android.net.Uri\nsuspend fun safeCreatePhoto(\r\n        photo: Photo,\r\n        source: InputStream?,\r\n        origUri: Uri? = null\r\n    ): Boolean {\r\n        val fileLen = createPhotoFile(photo, source)\r\n        var success = fileLen != -1L\r\n\r\n        if (success) {\r\n            photo.size = fileLen\r\n\r\n            if (origUri != null) {\r\n                createThumbnail(photo, origUri)\r\n                if (photo.type.isVideo) {\r\n                    createVideoPreview(photo, origUri)\r\n                }\r\n            }\r\n\r\n            val photoId = insert(photo)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "189",
  "ground_truth" : "        val fileLen = source.copyTo(encryptedDestination)\r\n        encryptedDestination.lazyClose()\r\n\r\n        return fileLen\r\n    }",
  "context" : "fun createPhotoFile(photo: Photo, source: InputStream?): Long {\r\n        val encryptedDestination =\r\n            encryptedStorageManager.internalOpenEncryptedFileOutput(photo.internalFileName)\r\n\r\n        source ?: return -1L\r\n        encryptedDestination ?: return -1L\r\n\r\n        val fileLen = source.copyTo(encryptedDestination)\r\n        encryptedDestination.lazyClose()\r\n\r\n        return fileLen\r\n    }",
  "start_lineno" : "178",
  "methodName" : "createPhotoFile",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/87",
  "prompt" : "import java.io.InputStream\nimport dev.leonlatsch.photok.model.database.entity.Photo\nfun createPhotoFile(photo: Photo, source: InputStream?): Long {\r\n        val encryptedDestination =\r\n            encryptedStorageManager.internalOpenEncryptedFileOutput(photo.internalFileName)\r\n\r\n        source ?: return -1L\r\n        encryptedDestination ?: return -1L\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "            photo.internalThumbnailFileName\r\n        )?.use {\r\n            thumbnail?.compress(Bitmap.CompressFormat.JPEG, 100, it)\r\n        }\r\n    }",
  "context" : "private fun internalCreateThumbnail(photo: Photo, obj: Any?) {\r\n        val thumbnail = Glide.with(app)\r\n            .asBitmap()\r\n            .load(obj)\r\n            .centerCrop()\r\n            .submit(THUMBNAIL_SIZE, THUMBNAIL_SIZE)\r\n            .get()\r\n\r\n        encryptedStorageManager.internalOpenEncryptedFileOutput(\r\n            photo.internalThumbnailFileName\r\n        )?.use {\r\n            thumbnail?.compress(Bitmap.CompressFormat.JPEG, 100, it)\r\n        }\r\n    }",
  "start_lineno" : "200",
  "methodName" : "internalCreateThumbnail",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/88",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport com.bumptech.glide.Glide\nimport android.graphics.Bitmap\nprivate fun internalCreateThumbnail(photo: Photo, obj: Any?) {\r\n        val thumbnail = Glide.with(app)\r\n            .asBitmap()\r\n            .load(obj)\r\n            .centerCrop()\r\n            .submit(THUMBNAIL_SIZE, THUMBNAIL_SIZE)\r\n            .get()\r\n\r\n        encryptedStorageManager.internalOpenEncryptedFileOutput(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "227",
  "ground_truth" : "            photo.internalVideoPreviewFileName\r\n        )?.use {\r\n            preview?.compress(Bitmap.CompressFormat.JPEG, 100, it)\r\n        }\r\n    }",
  "context" : "private fun createVideoPreview(photo: Photo, sourceUri: Uri) {\r\n        val preview = Glide.with(app)\r\n            .asBitmap()\r\n            .load(sourceUri)\r\n            .submit()\r\n            .get()\r\n\r\n        encryptedStorageManager.internalOpenEncryptedFileOutput(\r\n            photo.internalVideoPreviewFileName\r\n        )?.use {\r\n            preview?.compress(Bitmap.CompressFormat.JPEG, 100, it)\r\n        }\r\n    }",
  "start_lineno" : "215",
  "methodName" : "createVideoPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/89",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport com.bumptech.glide.Glide\nimport android.net.Uri\nimport android.graphics.Bitmap\nprivate fun createVideoPreview(photo: Photo, sourceUri: Uri) {\r\n        val preview = Glide.with(app)\r\n            .asBitmap()\r\n            .load(sourceUri)\r\n            .submit()\r\n            .get()\r\n\r\n        encryptedStorageManager.internalOpenEncryptedFileOutput(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "243",
  "ground_truth" : "            return it.readBytes()\r\n        }\r\n\r\n        return null\r\n    }",
  "context" : "fun loadPhoto(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalFileName)?.use {\r\n            return it.readBytes()\r\n        }\r\n\r\n        return null\r\n    }",
  "start_lineno" : "237",
  "methodName" : "loadPhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/90",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadPhoto(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalFileName)?.use {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "255",
  "ground_truth" : "                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }",
  "context" : "fun loadThumbnail(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalThumbnailFileName)\r\n            ?.use {\r\n                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }",
  "start_lineno" : "248",
  "methodName" : "loadThumbnail",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/91",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadThumbnail(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalThumbnailFileName)\r\n            ?.use {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "267",
  "ground_truth" : "                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }",
  "context" : "fun loadVideoPreview(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalVideoPreviewFileName)\r\n            ?.use {\r\n                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }",
  "start_lineno" : "260",
  "methodName" : "loadVideoPreview",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/92",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadVideoPreview(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalVideoPreviewFileName)\r\n            ?.use {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "287",
  "ground_truth" : "            deleteInternalPhotoData(photo)\r\n        }\r\n\r\n        return success\r\n    }",
  "context" : "suspend fun safeDeletePhoto(photo: Photo): Boolean {\r\n        val deletedElements = delete(photo)\r\n        val success = deletedElements != -1\r\n\r\n        if (success) {\r\n            deleteInternalPhotoData(photo)\r\n        }\r\n\r\n        return success\r\n    }",
  "start_lineno" : "278",
  "methodName" : "safeDeletePhoto",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/93",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nsuspend fun safeDeletePhoto(photo: Photo): Boolean {\r\n        val deletedElements = delete(photo)\r\n        val success = deletedElements != -1\r\n\r\n        if (success) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val THUMBNAIL_SIZE",
  "app_type" : "life",
  "end_lineno" : "299",
  "ground_truth" : "        encryptedStorageManager.internalDeleteFile(photo.internalFileName)\r\n                && encryptedStorageManager.internalDeleteFile(photo.internalThumbnailFileName)\r\n                && (!photo.type.isVideo || encryptedStorageManager.internalDeleteFile(photo.internalVideoPreviewFileName))",
  "context" : "fun deleteInternalPhotoData(photo: Photo): Boolean =\r\n        encryptedStorageManager.internalDeleteFile(photo.internalFileName)\r\n                && encryptedStorageManager.internalDeleteFile(photo.internalThumbnailFileName)\r\n                && (!photo.type.isVideo || encryptedStorageManager.internalDeleteFile(photo.internalVideoPreviewFileName))",
  "start_lineno" : "296",
  "methodName" : "deleteInternalPhotoData",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt",
  "task_id" : "Photok/94",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nfun deleteInternalPhotoData(photo: Photo): Boolean =\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        val binding = ItemNewsBinding.inflate(LayoutInflater.from(parent.context))\r\n        return NewFeaturesViewHolder(binding)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NewFeaturesViewHolder {\r\n        val binding = ItemNewsBinding.inflate(LayoutInflater.from(parent.context))\r\n        return NewFeaturesViewHolder(binding)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreateViewHolder",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesAdapter.kt",
  "task_id" : "Photok/95",
  "prompt" : "import android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NewFeaturesViewHolder {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        binding.newsRecycler.layoutManager = FixLinearLayoutManager(requireContext())\r\n        binding.newsRecycler.adapter = NewFeaturesAdapter(getNewFeaturesViewData())\r\n\r\n        binding.newsVersion.text = BuildConfig.VERSION_NAME\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding.newsRecycler.layoutManager = FixLinearLayoutManager(requireContext())\r\n        binding.newsRecycler.adapter = NewFeaturesAdapter(getNewFeaturesViewData())\r\n\r\n        binding.newsVersion.text = BuildConfig.VERSION_NAME\r\n    }",
  "start_lineno" : "43",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt",
  "task_id" : "Photok/96",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        val url = getString(R.string.news_changelog_url)\r\n        openUrl(url)\r\n    }",
  "context" : "fun openChangelog() {\r\n        val url = getString(R.string.news_changelog_url)\r\n        openUrl(url)\r\n    }",
  "start_lineno" : "55",
  "methodName" : "openChangelog",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt",
  "task_id" : "Photok/97",
  "prompt" : "fun openChangelog() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "            viewDataList\r\n        } else {\r\n            listOf()\r\n        }\r\n    }",
  "context" : "private fun getNewFeaturesViewData(): List<NewFeatureViewData> {\r\n        val titles = resources.getStringArray(R.array.newsTitles)\r\n        val summaries = resources.getStringArray(R.array.newsSummaries)\r\n\r\n        return if (titles.size == summaries.size) {\r\n            val viewDataList = mutableListOf<NewFeatureViewData>()\r\n            for (i in 0..titles.lastIndex) {\r\n                viewDataList.add(NewFeatureViewData(titles[i], summaries[i]))\r\n            }\r\n            viewDataList\r\n        } else {\r\n            listOf()\r\n        }\r\n    }",
  "start_lineno" : "60",
  "methodName" : "getNewFeaturesViewData",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt",
  "task_id" : "Photok/98",
  "prompt" : "import dev.leonlatsch.photok.news.newfeatures.ui.model.NewFeatureViewData\nimport dev.leonlatsch.photok.R\nimport android.view.View\nprivate fun getNewFeaturesViewData(): List<NewFeatureViewData> {\r\n        val titles = resources.getStringArray(R.array.newsTitles)\r\n        val summaries = resources.getStringArray(R.array.newsSummaries)\r\n\r\n        return if (titles.size == summaries.size) {\r\n            val viewDataList = mutableListOf<NewFeatureViewData>()\r\n            for (i in 0..titles.lastIndex) {\r\n                viewDataList.add(NewFeatureViewData(titles[i], summaries[i]))\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: DialogNewsBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "75",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt",
  "task_id" : "Photok/99",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogNewsBinding\noverride fun bind(binding: DialogNewsBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        binding.itemNewsTitle.text = viewData.title\r\n        binding.itemNewsSummary.text = viewData.summary\r\n    }",
  "context" : "fun bindTo(viewData: NewFeatureViewData) {\r\n        binding.itemNewsTitle.text = viewData.title\r\n        binding.itemNewsSummary.text = viewData.summary\r\n    }",
  "start_lineno" : "33",
  "methodName" : "bindTo",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesViewHolder.kt",
  "task_id" : "Photok/100",
  "prompt" : "import dev.leonlatsch.photok.news.newfeatures.ui.model.NewFeatureViewData\nfun bindTo(viewData: NewFeatureViewData) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar isLastPage\nval onPageChangeListener",
  "app_type" : "life",
  "end_lineno" : "114",
  "ground_truth" : "                binding.onBoardingViewPager.currentItem + 1,\r\n                true\r\n            )\r\n        }\r\n    }",
  "context" : "fun buttonClicked() {\r\n        if (isLastPage) {\r\n            finish()\r\n        } else {\r\n            binding.onBoardingViewPager.setCurrentItem(\r\n                binding.onBoardingViewPager.currentItem + 1,\r\n                true\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "buttonClicked",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\onboarding\\ui\\OnBoardingFragment.kt",
  "task_id" : "Photok/101",
  "prompt" : "import androidx.viewpager.widget.ViewPager\nimport android.view.View\nfun buttonClicked() {\r\n        if (isLastPage) {\r\n            finish()\r\n        } else {\r\n            binding.onBoardingViewPager.setCurrentItem(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar isLastPage\nval onPageChangeListener",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "        findNavController().navigate(R.id.action_onBoardingFragment_to_setupFragment)\r\n        config.systemFirstStart = false\r\n    }",
  "context" : "fun finish() {\r\n        findNavController().navigate(R.id.action_onBoardingFragment_to_setupFragment)\r\n        config.systemFirstStart = false\r\n    }",
  "start_lineno" : "119",
  "methodName" : "finish",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\onboarding\\ui\\OnBoardingFragment.kt",
  "task_id" : "Photok/102",
  "prompt" : "fun finish() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar isLastPage\nval onPageChangeListener",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: FragmentOnboardingBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "124",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\onboarding\\ui\\OnBoardingFragment.kt",
  "task_id" : "Photok/103",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentOnboardingBinding\nimport androidx.fragment.app.Fragment\noverride fun bind(binding: FragmentOnboardingBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_VISIBLE\r\n    }\r\n}",
  "context" : "fun Activity.showSystemUI() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        window.insetsController?.show(WindowInsets.Type.systemBars())\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_VISIBLE\r\n    }\r\n}",
  "start_lineno" : "58",
  "methodName" : "showSystemUI",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\ActivityExtensions.kt",
  "task_id" : "Photok/104",
  "prompt" : "import android.view.WindowInsets\nimport android.os.Build\nimport android.app.Activity\nfun Activity.showSystemUI() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        window.insetsController?.show(WindowInsets.Type.systemBars())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        activity as T\r\n    } catch (e: ClassCastException) {\r\n        throw IllegalArgumentException(\"$activity is not of type ${clazz.simpleName}\")\r\n    }\r\n}",
  "context" : "\r\n@Suppress(\"UNCHECKED_CAST\")\r\nfun <T : AppCompatActivity> Fragment.requireActivityAs(clazz: KClass<T>): T {\r\n    val activity = requireActivity()\r\n    return try {\r\n        activity as T\r\n    } catch (e: ClassCastException) {\r\n        throw IllegalArgumentException(\"$activity is not of type ${clazz.simpleName}\")\r\n    }\r\n}",
  "start_lineno" : "33",
  "methodName" : "requireActivityAs",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\FragmentExtensions.kt",
  "task_id" : "Photok/105",
  "prompt" : "import kotlin.reflect.KClass\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\n\r\n@Suppress(\"UNCHECKED_CAST\")\r\nfun <T : AppCompatActivity> Fragment.requireActivityAs(clazz: KClass<T>): T {\r\n    val activity = requireActivity()\r\n    return try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "    startActivityForResult(intent, reqCode)\r\n    requireActivity().getBaseApplication().ignoreNextTimeout()\r\n}",
  "context" : "fun Fragment.startActivityForResultAndIgnoreTimer(intent: Intent, reqCode: Int) {\r\n    startActivityForResult(intent, reqCode)\r\n    requireActivity().getBaseApplication().ignoreNextTimeout()\r\n}",
  "start_lineno" : "47",
  "methodName" : "startActivityForResultAndIgnoreTimer",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\FragmentExtensions.kt",
  "task_id" : "Photok/106",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.content.Intent\nfun Fragment.startActivityForResultAndIgnoreTimer(intent: Intent, reqCode: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        processedBytes++\r\n    }\r\n\r\n    return processedBytes\r\n}",
  "context" : "fun CipherInputStream.forceSkip(bytesToSkip: Long): Long {\r\n    var processedBytes = 0L\r\n    while (processedBytes < bytesToSkip) {\r\n        read()\r\n        processedBytes++\r\n    }\r\n\r\n    return processedBytes\r\n}",
  "start_lineno" : "46",
  "methodName" : "forceSkip",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\IOExtensions.kt",
  "task_id" : "Photok/107",
  "prompt" : "import javax.crypto.CipherInputStream\nimport java.io.InputStream\nfun CipherInputStream.forceSkip(bytesToSkip: Long): Long {\r\n    var processedBytes = 0L\r\n    while (processedBytes < bytesToSkip) {\r\n        read()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending AtomicBoolean",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(it)\r\n            }\r\n        }\r\n    }",
  "context" : " @MainThread\r\n    override fun observe(owner: LifecycleOwner, observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Timber.w(\"Multiple observers on SingleLiveEvent. Only one will be notified\")\r\n        }\r\n\r\n        super.observe(owner) {\r\n            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "42",
  "methodName" : "observe",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\SingleLiveEvent.kt",
  "task_id" : "Photok/108",
  "prompt" : "import timber.log.Timber\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.annotation.MainThread\n @MainThread\r\n    override fun observe(owner: LifecycleOwner, observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Timber.w(\"Multiple observers on SingleLiveEvent. Only one will be notified\")\r\n        }\r\n\r\n        super.observe(owner) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending AtomicBoolean",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        pending.set(true)\r\n        super.setValue(value)\r\n    }",
  "context" : " @MainThread\r\n    override fun setValue(value: T?) {\r\n        pending.set(true)\r\n        super.setValue(value)\r\n    }",
  "start_lineno" : "60",
  "methodName" : "setValue",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\SingleLiveEvent.kt",
  "task_id" : "Photok/109",
  "prompt" : "import androidx.annotation.MainThread\n @MainThread\r\n    override fun setValue(value: T?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "\r\n        }\r\n    }\r\n    return null\r\n}",
  "context" : "fun getFileName(contentResolver: ContentResolver, uri: Uri): String? {\r\n    val projection = arrayOf(MediaStore.MediaColumns.DISPLAY_NAME)\r\n    contentResolver.query(uri, projection, null, null, null)?.use {\r\n        if (it.moveToFirst()) {\r\n            return it.getString(0)\r\n\r\n        }\r\n    }\r\n    return null\r\n}",
  "start_lineno" : "53",
  "methodName" : "getFileName",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/110",
  "prompt" : "import android.provider.MediaStore\nimport android.net.Uri\nimport android.content.ContentResolver\nfun getFileName(contentResolver: ContentResolver, uri: Uri): String? {\r\n    val projection = arrayOf(MediaStore.MediaColumns.DISPLAY_NAME)\r\n    contentResolver.query(uri, projection, null, null, null)?.use {\r\n        if (it.moveToFirst()) {\r\n            return it.getString(0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        return it.statSize\r\n    }\r\n\r\n    return -1L\r\n}",
  "context" : "fun getFileSize(contentResolver: ContentResolver, uri: Uri): Long {\r\n    contentResolver.openFileDescriptor(uri, \"r\")?.use {\r\n        return it.statSize\r\n    }\r\n\r\n    return -1L\r\n}",
  "start_lineno" : "67",
  "methodName" : "getFileSize",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/111",
  "prompt" : "import android.net.Uri\nimport android.content.ContentResolver\nfun getFileSize(contentResolver: ContentResolver, uri: Uri): Long {\r\n    contentResolver.openFileDescriptor(uri, \"r\")?.use {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "95",
  "ground_truth" : "    }\r\n\r\n    nightMode ?: return\r\n    AppCompatDelegate.setDefaultNightMode(nightMode)\r\n}",
  "context" : "fun setAppDesign(design: String?) {\r\n    design ?: return\r\n\r\n    val nightMode = when (design) {\r\n        \"system\" -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM\r\n        \"light\" -> AppCompatDelegate.MODE_NIGHT_NO\r\n        \"dark\" -> AppCompatDelegate.MODE_NIGHT_YES\r\n        else -> null\r\n    }\r\n\r\n    nightMode ?: return\r\n    AppCompatDelegate.setDefaultNightMode(nightMode)\r\n}",
  "start_lineno" : "83",
  "methodName" : "setAppDesign",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/112",
  "prompt" : "import androidx.appcompat.app.AppCompatDelegate\nfun setAppDesign(design: String?) {\r\n    design ?: return\r\n\r\n    val nightMode = when (design) {\r\n        \"system\" -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM\r\n        \"light\" -> AppCompatDelegate.MODE_NIGHT_NO\r\n        \"dark\" -> AppCompatDelegate.MODE_NIGHT_YES\r\n        else -> null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "    intent.data = Uri.parse(url)\r\n    startActivity(intent)\r\n}",
  "context" : "fun Fragment.openUrl(url: String?) {\r\n    url ?: return\r\n    val intent = Intent(Intent.ACTION_VIEW)\r\n    intent.data = Uri.parse(url)\r\n    startActivity(intent)\r\n}",
  "start_lineno" : "97",
  "methodName" : "openUrl",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/113",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.content.Intent\nfun Fragment.openUrl(url: String?) {\r\n    url ?: return\r\n    val intent = Intent(Intent.ACTION_VIEW)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "    top = this.calculateTopPadding() + other.calculateTopPadding(),\r\n    end = this.calculateEndPadding(LayoutDirection.Ltr) +\r\n            other.calculateEndPadding(LayoutDirection.Ltr),\r\n    bottom = this.calculateBottomPadding() + other.calculateBottomPadding(),\r\n)",
  "context" : "operator fun PaddingValues.plus(other: PaddingValues): PaddingValues = PaddingValues(\r\n    start = this.calculateStartPadding(LayoutDirection.Ltr) +\r\n            other.calculateStartPadding(LayoutDirection.Ltr),\r\n    top = this.calculateTopPadding() + other.calculateTopPadding(),\r\n    end = this.calculateEndPadding(LayoutDirection.Ltr) +\r\n            other.calculateEndPadding(LayoutDirection.Ltr),\r\n    bottom = this.calculateBottomPadding() + other.calculateBottomPadding(),\r\n)",
  "start_lineno" : "164",
  "methodName" : "plus",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/114",
  "prompt" : "import androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.foundation.layout.calculateStartPadding\nimport androidx.compose.foundation.layout.PaddingValues\noperator fun PaddingValues.plus(other: PaddingValues): PaddingValues = PaddingValues(\r\n    start = this.calculateStartPadding(LayoutDirection.Ltr) +\r\n            other.calculateStartPadding(LayoutDirection.Ltr),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "178",
  "ground_truth" : "        insets\r\n    }\r\n}",
  "context" : "fun View.statusBarPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, 0)\r\n        insets\r\n    }\r\n}",
  "start_lineno" : "173",
  "methodName" : "statusBarPadding",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/115",
  "prompt" : "import android.view.WindowInsets\nimport android.view.View\nfun View.statusBarPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "185",
  "ground_truth" : "        insets\r\n    }\r\n}",
  "context" : "fun View.systemBarsPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, insets.bottom())\r\n        insets\r\n    }\r\n}",
  "start_lineno" : "180",
  "methodName" : "systemBarsPadding",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/116",
  "prompt" : "import android.view.WindowInsets\nimport android.view.View\nfun View.systemBarsPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, insets.bottom())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "199",
  "ground_truth" : "\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetTop\r\n    }",
  "context" : "fun WindowInsets.top(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).top\r\n\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetTop\r\n    }",
  "start_lineno" : "192",
  "methodName" : "top",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/117",
  "prompt" : "import android.view.WindowInsets\nimport android.os.Build\nfun WindowInsets.top(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).top\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "208",
  "ground_truth" : "\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetBottom\r\n    }",
  "context" : "fun WindowInsets.bottom(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).bottom\r\n\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetBottom\r\n    }",
  "start_lineno" : "201",
  "methodName" : "bottom",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt",
  "task_id" : "Photok/118",
  "prompt" : "import android.view.WindowInsets\nimport android.os.Build\nfun WindowInsets.bottom(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).bottom\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }",
  "context" : "fun getReadVideosPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_VIDEO\r\n    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }",
  "start_lineno" : "22",
  "methodName" : "getReadVideosPermission",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\permissions\\MediaPermissions.kt",
  "task_id" : "Photok/119",
  "prompt" : "import android.os.Build\nimport android.Manifest\nfun getReadVideosPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_VIDEO\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }",
  "context" : "fun getReadImagesPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_IMAGES\r\n    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }",
  "start_lineno" : "29",
  "methodName" : "getReadImagesPermission",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\permissions\\MediaPermissions.kt",
  "task_id" : "Photok/120",
  "prompt" : "import android.os.Build\nimport android.Manifest\nfun getReadImagesPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_IMAGES\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar navigator RecoveryMenuNavigator\nval viewModel RecoveryMenuViewModel",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "\r\n        viewModel.navigationEvent.observe(this) {\r\n            navigator.navigate(it, this)\r\n        }\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        viewModel.navigationEvent.observe(this) {\r\n            navigator.navigate(it, this)\r\n        }\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuActivity.kt",
  "task_id" : "Photok/121",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var config Config\nvar navigator RecoveryMenuNavigator\nval viewModel RecoveryMenuViewModel",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: ActivityRecoveryMenuBinding) {\r\n        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "48",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuActivity.kt",
  "task_id" : "Photok/122",
  "prompt" : "import dev.leonlatsch.photok.databinding.ActivityRecoveryMenuBinding\nimport dev.leonlatsch.photok.R\noverride fun bind(binding: ActivityRecoveryMenuBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "            NavigationEvent.AfterResetHideApp -> navigateAfterResetHideApp(activity)\r\n        }\r\n    }",
  "context" : "fun navigate(navigationEvent: NavigationEvent, activity: AppCompatActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.AfterResetHideApp -> navigateAfterResetHideApp(activity)\r\n        }\r\n    }",
  "start_lineno" : "26",
  "methodName" : "navigate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuNavigator.kt",
  "task_id" : "Photok/123",
  "prompt" : "import androidx.appcompat.app.AppCompatActivity\nfun navigate(navigationEvent: NavigationEvent, activity: AppCompatActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "            flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        }\r\n        activity.startActivity(intent)\r\n        activity.finish()\r\n    }",
  "context" : "private fun navigateOpenPhotok(activity: AppCompatActivity) {\r\n        val intent = Intent(activity, MainActivity::class.java).apply {\r\n            flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        }\r\n        activity.startActivity(intent)\r\n        activity.finish()\r\n    }",
  "start_lineno" : "37",
  "methodName" : "navigateOpenPhotok",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuNavigator.kt",
  "task_id" : "Photok/124",
  "prompt" : "import dev.leonlatsch.photok.main.ui.MainActivity\nimport androidx.appcompat.app.AppCompatActivity\nimport android.content.Intent\nprivate fun navigateOpenPhotok(activity: AppCompatActivity) {\r\n        val intent = Intent(activity, MainActivity::class.java).apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val navigationEvent",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "\r\n        navigationEvent.value = RecoveryMenuNavigator.NavigationEvent.AfterResetHideApp\r\n    }",
  "context" : "fun resetHidePhotoSetting() {\r\n        toggleMainComponentUseCase()\r\n\r\n        navigationEvent.value = RecoveryMenuNavigator.NavigationEvent.AfterResetHideApp\r\n    }",
  "start_lineno" : "36",
  "methodName" : "resetHidePhotoSetting",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuViewModel.kt",
  "task_id" : "Photok/125",
  "prompt" : "fun resetHidePhotoSetting() {\r\n        toggleMainComponentUseCase()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "71",
  "ground_truth" : "        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error initializing EncryptionManager: $e\")\r\n            isReady = false\r\n        }\r\n    }",
  "context" : "fun initialize(password: String) {\r\n        if (password.length < 6) {\r\n            isReady = false\r\n            return\r\n        }\r\n        try {\r\n            encryptionKey = genSecKey(password)\r\n            ivParameterSpec = genIv(password)\r\n            isReady = true\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error initializing EncryptionManager: $e\")\r\n            isReady = false\r\n        }\r\n    }",
  "start_lineno" : "58",
  "methodName" : "initialize",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/126",
  "prompt" : "fun initialize(password: String) {\r\n        if (password.length < 6) {\r\n            isReady = false\r\n            return\r\n        }\r\n        try {\r\n            encryptionKey = genSecKey(password)\r\n            ivParameterSpec = genIv(password)\r\n            isReady = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "        ivParameterSpec = null\r\n        isReady = false\r\n    }",
  "context" : "fun reset() {\r\n        encryptionKey = null\r\n        ivParameterSpec = null\r\n        isReady = false\r\n    }",
  "start_lineno" : "76",
  "methodName" : "reset",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/127",
  "prompt" : "fun reset() {\r\n        encryptionKey = null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "            null\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "fun createCipherInputStream(\r\n        origInputStream: InputStream,\r\n        password: String? = null\r\n    ): CipherInputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.DECRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.DECRYPT_MODE, password)\r\n            }\r\n\r\n            CipherInputStream(origInputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted input stream: $e\")\r\n            null\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "88",
  "methodName" : "createCipherInputStream",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/128",
  "prompt" : "import javax.crypto.CipherInputStream\nimport javax.crypto.Cipher\nimport java.security.GeneralSecurityException\nimport java.io.InputStream\nimport timber.log.Timber\nfun createCipherInputStream(\r\n        origInputStream: InputStream,\r\n        password: String? = null\r\n    ): CipherInputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.DECRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.DECRYPT_MODE, password)\r\n            }\r\n\r\n            CipherInputStream(origInputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted input stream: $e\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "            null\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "fun createCipherOutputStream(\r\n        origOutputStream: OutputStream,\r\n        password: String? = null\r\n    ): CipherOutputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.ENCRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.ENCRYPT_MODE, password)\r\n            }\r\n\r\n            CipherOutputStream(origOutputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted output stream: $e\")\r\n            null\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "114",
  "methodName" : "createCipherOutputStream",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/129",
  "prompt" : "import javax.crypto.CipherOutputStream\nimport javax.crypto.Cipher\nimport java.security.GeneralSecurityException\nimport java.io.OutputStream\nimport timber.log.Timber\nfun createCipherOutputStream(\r\n        origOutputStream: OutputStream,\r\n        password: String? = null\r\n    ): CipherOutputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.ENCRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.ENCRYPT_MODE, password)\r\n            }\r\n\r\n            CipherOutputStream(origOutputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted output stream: $e\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "\r\n        return createCipher(mode, key, iv)\r\n    }",
  "context" : "private fun createCipher(mode: Int, password: String): Cipher? {\r\n        val key = genSecKey(password)\r\n        val iv = genIv(password)\r\n\r\n        return createCipher(mode, key, iv)\r\n    }",
  "start_lineno" : "134",
  "methodName" : "createCipher",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/130",
  "prompt" : "import javax.crypto.Cipher\nprivate fun createCipher(mode: Int, password: String): Cipher? {\r\n        val key = genSecKey(password)\r\n        val iv = genIv(password)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "        } else {\r\n            Timber.d(\"EncryptionManager has to be ready to create a cipher\")\r\n            null\r\n        }\r\n    }",
  "context" : "private fun createCipher(\r\n        mode: Int,\r\n        secretKeySpec: SecretKeySpec?,\r\n        ivParam: IvParameterSpec?\r\n    ): Cipher? {\r\n        return if (isReady) try {\r\n            Cipher.getInstance(AES_ALGORITHM).apply {\r\n                init(mode, secretKeySpec, ivParam)\r\n            }\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error initializing cipher: $e\")\r\n            null\r\n        } else {\r\n            Timber.d(\"EncryptionManager has to be ready to create a cipher\")\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "146",
  "methodName" : "createCipher",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/131",
  "prompt" : "import javax.crypto.spec.SecretKeySpec\nimport javax.crypto.spec.IvParameterSpec\nimport javax.crypto.Cipher\nimport java.security.GeneralSecurityException\nimport timber.log.Timber\nimport dev.leonlatsch.photok.other.AES_ALGORITHM\nimport dev.leonlatsch.photok.other.AES\nprivate fun createCipher(\r\n        mode: Int,\r\n        secretKeySpec: SecretKeySpec?,\r\n        ivParam: IvParameterSpec?\r\n    ): Cipher? {\r\n        return if (isReady) try {\r\n            Cipher.getInstance(AES_ALGORITHM).apply {\r\n                init(mode, secretKeySpec, ivParam)\r\n            }\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error initializing cipher: $e\")\r\n            null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "168",
  "ground_truth" : "        val bytes = md.digest(password.toByteArray(StandardCharsets.UTF_8))\r\n        return SecretKeySpec(bytes, AES)\r\n    }",
  "context" : "private fun genSecKey(password: String): SecretKeySpec {\r\n        val md = MessageDigest.getInstance(SHA_256)\r\n        val bytes = md.digest(password.toByteArray(StandardCharsets.UTF_8))\r\n        return SecretKeySpec(bytes, AES)\r\n    }",
  "start_lineno" : "164",
  "methodName" : "genSecKey",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/132",
  "prompt" : "import javax.crypto.spec.SecretKeySpec\nimport java.security.MessageDigest\nimport dev.leonlatsch.photok.other.SHA_256\nprivate fun genSecKey(password: String): SecretKeySpec {\r\n        val md = MessageDigest.getInstance(SHA_256)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var encryptionKey SecretKeySpec?\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray",
  "app_type" : "life",
  "end_lineno" : "179",
  "ground_truth" : "            iv[i] = firstChars[i].toByte()\r\n        }\r\n\r\n        return IvParameterSpec(iv)\r\n    }",
  "context" : "private fun genIv(password: String): IvParameterSpec {\r\n        val iv = ByteArray(16)\r\n        val charArray = password.toCharArray()\r\n        val firstChars = charArray.take(16)\r\n        for (i in firstChars.indices) {\r\n            iv[i] = firstChars[i].toByte()\r\n        }\r\n\r\n        return IvParameterSpec(iv)\r\n    }",
  "start_lineno" : "170",
  "methodName" : "genIv",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt",
  "task_id" : "Photok/133",
  "prompt" : "import javax.crypto.spec.IvParameterSpec\nprivate fun genIv(password: String): IvParameterSpec {\r\n        val iv = ByteArray(16)\r\n        val charArray = password.toCharArray()\r\n        val firstChars = charArray.take(16)\r\n        for (i in firstChars.indices) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        val hashedPw = BCrypt.hashpw(password, BCrypt.gensalt())\r\n        config.securityPassword = hashedPw\r\n    }",
  "context" : "fun storePassword(password: String) {\r\n        val hashedPw = BCrypt.hashpw(password, BCrypt.gensalt())\r\n        config.securityPassword = hashedPw\r\n    }",
  "start_lineno" : "37",
  "methodName" : "storePassword",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\PasswordManager.kt",
  "task_id" : "Photok/134",
  "prompt" : "fun storePassword(password: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val preferences SharedPreferences\nvar systemFirstStart Boolean\nvar systemLastFeatureVersionCode Int\nvar systemDesign String?\nvar galleryAutoFullscreen Boolean\nvar securityAllowScreenshots Boolean\nvar securityPassword String?\nvar securityLockTimeout Int\nvar securityDialLaunchCode String?\nvar deleteImportedFiles Boolean\nvar deleteExportedFiles Boolean\nvar timestampLastRecoveryStart Long\nval FILE_NAME\nval MODE\nval SYSTEM_FIRST_START\nval SYSTEM_FIRST_START_DEFAULT\nval SYSTEM_LAST_FEATURE_VERSION_CODE\nval SYSTEM_LAST_FEATURE_VERSION_CODE_DEFAULT\nval SYSTEM_DESIGN\nval SYSTEM_DESIGN_DEFAULT\nval GALLERY_AUTO_FULLSCREEN\nval GALLERY_AUTO_FULLSCREEN_DEFAULT\nval SECURITY_ALLOW_SCREENSHOTS\nval SECURITY_ALLOW_SCREENSHOTS_DEFAULT\nval SECURITY_PASSWORD\nval SECURITY_PASSWORD_DEFAULT\nval SECURITY_LOCK_TIMEOUT\nval SECURITY_LOCK_TIMEOUT_DEFAULT\nval SECURITY_DIAL_LAUNCH_CODE\nval SECURITY_DIAL_LAUNCH_CODE_DEFAULT\nval ADVANCED_DELETE_IMPORTED_FILES\nval ADVANCED_DELETE_IMPORTED_FILES_DEFAULT\nval ADVANCED_DELETE_EXPORTED_FILES\nval ADVANCED_DELETE_EXPORTED_FILES_DEFAULT\nval TIMESTAMP_LAST_RECOVERY_START\nval TIMESTAMP_LAST_RECOVERY_START_DEFAULT",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "        val stringValue = preferences.getString(key, default.toString())\r\n        return stringValue?.toInt() ?: default\r\n    }",
  "context" : "private fun getIntFromString(key: String, default: Int): Int {\r\n        val stringValue = preferences.getString(key, default.toString())\r\n        return stringValue?.toInt() ?: default\r\n    }",
  "start_lineno" : "113",
  "methodName" : "getIntFromString",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt",
  "task_id" : "Photok/135",
  "prompt" : "private fun getIntFromString(key: String, default: Int): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val preferences SharedPreferences\nvar systemFirstStart Boolean\nvar systemLastFeatureVersionCode Int\nvar systemDesign String?\nvar galleryAutoFullscreen Boolean\nvar securityAllowScreenshots Boolean\nvar securityPassword String?\nvar securityLockTimeout Int\nvar securityDialLaunchCode String?\nvar deleteImportedFiles Boolean\nvar deleteExportedFiles Boolean\nvar timestampLastRecoveryStart Long\nval FILE_NAME\nval MODE\nval SYSTEM_FIRST_START\nval SYSTEM_FIRST_START_DEFAULT\nval SYSTEM_LAST_FEATURE_VERSION_CODE\nval SYSTEM_LAST_FEATURE_VERSION_CODE_DEFAULT\nval SYSTEM_DESIGN\nval SYSTEM_DESIGN_DEFAULT\nval GALLERY_AUTO_FULLSCREEN\nval GALLERY_AUTO_FULLSCREEN_DEFAULT\nval SECURITY_ALLOW_SCREENSHOTS\nval SECURITY_ALLOW_SCREENSHOTS_DEFAULT\nval SECURITY_PASSWORD\nval SECURITY_PASSWORD_DEFAULT\nval SECURITY_LOCK_TIMEOUT\nval SECURITY_LOCK_TIMEOUT_DEFAULT\nval SECURITY_DIAL_LAUNCH_CODE\nval SECURITY_DIAL_LAUNCH_CODE_DEFAULT\nval ADVANCED_DELETE_IMPORTED_FILES\nval ADVANCED_DELETE_IMPORTED_FILES_DEFAULT\nval ADVANCED_DELETE_EXPORTED_FILES\nval ADVANCED_DELETE_EXPORTED_FILES_DEFAULT\nval TIMESTAMP_LAST_RECOVERY_START\nval TIMESTAMP_LAST_RECOVERY_START_DEFAULT",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "        edit.putString(key, value)\r\n        edit.apply()\r\n    }",
  "context" : "private fun putString(key: String, value: String) {\r\n        val edit = preferences.edit()\r\n        edit.putString(key, value)\r\n        edit.apply()\r\n    }",
  "start_lineno" : "122",
  "methodName" : "putString",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt",
  "task_id" : "Photok/136",
  "prompt" : "private fun putString(key: String, value: String) {\r\n        val edit = preferences.edit()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val preferences SharedPreferences\nvar systemFirstStart Boolean\nvar systemLastFeatureVersionCode Int\nvar systemDesign String?\nvar galleryAutoFullscreen Boolean\nvar securityAllowScreenshots Boolean\nvar securityPassword String?\nvar securityLockTimeout Int\nvar securityDialLaunchCode String?\nvar deleteImportedFiles Boolean\nvar deleteExportedFiles Boolean\nvar timestampLastRecoveryStart Long\nval FILE_NAME\nval MODE\nval SYSTEM_FIRST_START\nval SYSTEM_FIRST_START_DEFAULT\nval SYSTEM_LAST_FEATURE_VERSION_CODE\nval SYSTEM_LAST_FEATURE_VERSION_CODE_DEFAULT\nval SYSTEM_DESIGN\nval SYSTEM_DESIGN_DEFAULT\nval GALLERY_AUTO_FULLSCREEN\nval GALLERY_AUTO_FULLSCREEN_DEFAULT\nval SECURITY_ALLOW_SCREENSHOTS\nval SECURITY_ALLOW_SCREENSHOTS_DEFAULT\nval SECURITY_PASSWORD\nval SECURITY_PASSWORD_DEFAULT\nval SECURITY_LOCK_TIMEOUT\nval SECURITY_LOCK_TIMEOUT_DEFAULT\nval SECURITY_DIAL_LAUNCH_CODE\nval SECURITY_DIAL_LAUNCH_CODE_DEFAULT\nval ADVANCED_DELETE_IMPORTED_FILES\nval ADVANCED_DELETE_IMPORTED_FILES_DEFAULT\nval ADVANCED_DELETE_EXPORTED_FILES\nval ADVANCED_DELETE_EXPORTED_FILES_DEFAULT\nval TIMESTAMP_LAST_RECOVERY_START\nval TIMESTAMP_LAST_RECOVERY_START_DEFAULT",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "        edit.putInt(key, value)\r\n        edit.apply()\r\n    }",
  "context" : "private fun putInt(key: String, value: Int) {\r\n        val edit = preferences.edit()\r\n        edit.putInt(key, value)\r\n        edit.apply()\r\n    }",
  "start_lineno" : "128",
  "methodName" : "putInt",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt",
  "task_id" : "Photok/137",
  "prompt" : "private fun putInt(key: String, value: Int) {\r\n        val edit = preferences.edit()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val preferences SharedPreferences\nvar systemFirstStart Boolean\nvar systemLastFeatureVersionCode Int\nvar systemDesign String?\nvar galleryAutoFullscreen Boolean\nvar securityAllowScreenshots Boolean\nvar securityPassword String?\nvar securityLockTimeout Int\nvar securityDialLaunchCode String?\nvar deleteImportedFiles Boolean\nvar deleteExportedFiles Boolean\nvar timestampLastRecoveryStart Long\nval FILE_NAME\nval MODE\nval SYSTEM_FIRST_START\nval SYSTEM_FIRST_START_DEFAULT\nval SYSTEM_LAST_FEATURE_VERSION_CODE\nval SYSTEM_LAST_FEATURE_VERSION_CODE_DEFAULT\nval SYSTEM_DESIGN\nval SYSTEM_DESIGN_DEFAULT\nval GALLERY_AUTO_FULLSCREEN\nval GALLERY_AUTO_FULLSCREEN_DEFAULT\nval SECURITY_ALLOW_SCREENSHOTS\nval SECURITY_ALLOW_SCREENSHOTS_DEFAULT\nval SECURITY_PASSWORD\nval SECURITY_PASSWORD_DEFAULT\nval SECURITY_LOCK_TIMEOUT\nval SECURITY_LOCK_TIMEOUT_DEFAULT\nval SECURITY_DIAL_LAUNCH_CODE\nval SECURITY_DIAL_LAUNCH_CODE_DEFAULT\nval ADVANCED_DELETE_IMPORTED_FILES\nval ADVANCED_DELETE_IMPORTED_FILES_DEFAULT\nval ADVANCED_DELETE_EXPORTED_FILES\nval ADVANCED_DELETE_EXPORTED_FILES_DEFAULT\nval TIMESTAMP_LAST_RECOVERY_START\nval TIMESTAMP_LAST_RECOVERY_START_DEFAULT",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "        edit.putBoolean(key, value)\r\n        edit.apply()\r\n    }",
  "context" : "private fun putBoolean(key: String, value: Boolean) {\r\n        val edit = preferences.edit()\r\n        edit.putBoolean(key, value)\r\n        edit.apply()\r\n    }",
  "start_lineno" : "134",
  "methodName" : "putBoolean",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt",
  "task_id" : "Photok/138",
  "prompt" : "private fun putBoolean(key: String, value: Boolean) {\r\n        val edit = preferences.edit()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val preferences SharedPreferences\nvar systemFirstStart Boolean\nvar systemLastFeatureVersionCode Int\nvar systemDesign String?\nvar galleryAutoFullscreen Boolean\nvar securityAllowScreenshots Boolean\nvar securityPassword String?\nvar securityLockTimeout Int\nvar securityDialLaunchCode String?\nvar deleteImportedFiles Boolean\nvar deleteExportedFiles Boolean\nvar timestampLastRecoveryStart Long\nval FILE_NAME\nval MODE\nval SYSTEM_FIRST_START\nval SYSTEM_FIRST_START_DEFAULT\nval SYSTEM_LAST_FEATURE_VERSION_CODE\nval SYSTEM_LAST_FEATURE_VERSION_CODE_DEFAULT\nval SYSTEM_DESIGN\nval SYSTEM_DESIGN_DEFAULT\nval GALLERY_AUTO_FULLSCREEN\nval GALLERY_AUTO_FULLSCREEN_DEFAULT\nval SECURITY_ALLOW_SCREENSHOTS\nval SECURITY_ALLOW_SCREENSHOTS_DEFAULT\nval SECURITY_PASSWORD\nval SECURITY_PASSWORD_DEFAULT\nval SECURITY_LOCK_TIMEOUT\nval SECURITY_LOCK_TIMEOUT_DEFAULT\nval SECURITY_DIAL_LAUNCH_CODE\nval SECURITY_DIAL_LAUNCH_CODE_DEFAULT\nval ADVANCED_DELETE_IMPORTED_FILES\nval ADVANCED_DELETE_IMPORTED_FILES_DEFAULT\nval ADVANCED_DELETE_EXPORTED_FILES\nval ADVANCED_DELETE_EXPORTED_FILES_DEFAULT\nval TIMESTAMP_LAST_RECOVERY_START\nval TIMESTAMP_LAST_RECOVERY_START_DEFAULT",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "        edit.putLong(key, value)\r\n        edit.apply()\r\n    }",
  "context" : "private fun putLong(key: String, value: Long) {\r\n        val edit = preferences.edit()\r\n        edit.putLong(key, value)\r\n        edit.apply()\r\n    }",
  "start_lineno" : "140",
  "methodName" : "putLong",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt",
  "task_id" : "Photok/139",
  "prompt" : "private fun putLong(key: String, value: Long) {\r\n        val edit = preferences.edit()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val version",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        binding.aboutToolbar.setNavigationOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        view.systemBarsPadding()\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setHasOptionsMenu(true)\r\n        setToolbar(binding.aboutToolbar)\r\n        binding.aboutToolbar.setNavigationOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n\r\n    }",
  "start_lineno" : "44",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt",
  "task_id" : "Photok/140",
  "prompt" : "import dev.leonlatsch.photok.other.systemBarsPadding\nimport android.view.View\nimport android.view.Menu\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        view.systemBarsPadding()\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setHasOptionsMenu(true)\r\n        setToolbar(binding.aboutToolbar)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val version",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "        }\r\n        return true\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.menuAboutNews -> NewFeaturesDialog().show(childFragmentManager)\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt",
  "task_id" : "Photok/141",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.news.newfeatures.ui.NewFeaturesDialog\nimport dev.leonlatsch.photok.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.menuAboutNews -> NewFeaturesDialog().show(childFragmentManager)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val version",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: FragmentAboutBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "88",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt",
  "task_id" : "Photok/142",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentAboutBinding\noverride fun bind(binding: FragmentAboutBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ChangePasswordViewModel",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "        binding.changePasswordCheckOldButton.hide()\r\n        binding.changePasswordOldStatusIcon.show()\r\n        binding.changePasswordNewPasswordLayout.show()\r\n        binding.changePasswordNewPasswordLayout.requestFocus()\r\n    }",
  "context" : "private fun handleOldValid() {\r\n        binding.loadingOverlay.hide()\r\n        binding.changePasswordOldPasswordEditText.hide()\r\n        binding.changePasswordCheckOldButton.hide()\r\n        binding.changePasswordOldStatusIcon.show()\r\n        binding.changePasswordNewPasswordLayout.show()\r\n        binding.changePasswordNewPasswordLayout.requestFocus()\r\n    }",
  "start_lineno" : "90",
  "methodName" : "handleOldValid",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordDialog.kt",
  "task_id" : "Photok/143",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.hide\nprivate fun handleOldValid() {\r\n        binding.loadingOverlay.hide()\r\n        binding.changePasswordOldPasswordEditText.hide()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ChangePasswordViewModel",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "                viewModel.newPassword\r\n            ).show(requireActivity().supportFragmentManager)\r\n            dismiss()\r\n        }\r\n    }",
  "context" : "private fun handleReEncryptNeeded() {\r\n        Dialogs.showConfirmDialog(\r\n            requireContext(),\r\n            getString(R.string.change_password_confirm_message)\r\n        ) { _, _ ->\r\n            ReEncryptBottomSheetDialogFragment(\r\n                viewModel.newPassword\r\n            ).show(requireActivity().supportFragmentManager)\r\n            dismiss()\r\n        }\r\n    }",
  "start_lineno" : "99",
  "methodName" : "handleReEncryptNeeded",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordDialog.kt",
  "task_id" : "Photok/144",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Dialogs\nimport dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.R\nprivate fun handleReEncryptNeeded() {\r\n        Dialogs.showConfirmDialog(\r\n            requireContext(),\r\n            getString(R.string.change_password_confirm_message)\r\n        ) { _, _ ->\r\n            ReEncryptBottomSheetDialogFragment(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ChangePasswordViewModel",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: DialogChangePasswordBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "132",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordDialog.kt",
  "task_id" : "Photok/145",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogChangePasswordBinding\noverride fun bind(binding: DialogChangePasswordBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var changePasswordState ChangePasswordState\nvar oldPassword String\nvar newPassword String\nvar newPasswordConfirm String",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            ChangePasswordState.RE_ENCRYPT_NOT_NEEDED\r\n        } else {\r\n            ChangePasswordState.RE_ENCRYPT_NEEDED\r\n        }\r\n    }",
  "context" : "fun checkIfReEncryptNeeded() = viewModelScope.launch(Dispatchers.IO) {\r\n        val isSafeEmpty = photoRepository.countAll() == 0\r\n        changePasswordState = if (isSafeEmpty) {\r\n            passwordManager.storePassword(newPassword)\r\n            ChangePasswordState.RE_ENCRYPT_NOT_NEEDED\r\n        } else {\r\n            ChangePasswordState.RE_ENCRYPT_NEEDED\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "checkIfReEncryptNeeded",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordViewModel.kt",
  "task_id" : "Photok/146",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun checkIfReEncryptNeeded() = viewModelScope.launch(Dispatchers.IO) {\r\n        val isSafeEmpty = photoRepository.countAll() == 0\r\n        changePasswordState = if (isSafeEmpty) {\r\n            passwordManager.storePassword(newPassword)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var changePasswordState ChangePasswordState\nvar oldPassword String\nvar newPassword String\nvar newPasswordConfirm String",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "            ChangePasswordState.OLD_VALID\r\n        } else {\r\n            ChangePasswordState.OLD_INVALID\r\n        }\r\n    }",
  "context" : "fun checkOld() = viewModelScope.launch {\r\n        changePasswordState = ChangePasswordState.CHECKING_OLD\r\n\r\n        val storedPassword = config.securityPassword\r\n        storedPassword ?: return@launch\r\n\r\n        changePasswordState = if (BCrypt.checkpw(oldPassword, storedPassword)) {\r\n            ChangePasswordState.OLD_VALID\r\n        } else {\r\n            ChangePasswordState.OLD_INVALID\r\n        }\r\n    }",
  "start_lineno" : "96",
  "methodName" : "checkOld",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordViewModel.kt",
  "task_id" : "Photok/147",
  "prompt" : "import org.mindrot.jbcrypt.BCrypt\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun checkOld() = viewModelScope.launch {\r\n        changePasswordState = ChangePasswordState.CHECKING_OLD\r\n\r\n        val storedPassword = config.securityPassword\r\n        storedPassword ?: return@launch\r\n\r\n        changePasswordState = if (BCrypt.checkpw(oldPassword, storedPassword)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var changePasswordState ChangePasswordState\nvar oldPassword String\nvar newPassword String\nvar newPasswordConfirm String",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "            ChangePasswordState.NEW_VALID\r\n        } else {\r\n            ChangePasswordState.NEW_INVALID\r\n        }\r\n    }",
  "context" : "fun checkNew() = viewModelScope.launch {\r\n        changePasswordState = if (PasswordUtils.validatePasswords(\r\n                newPassword,\r\n                newPasswordConfirm\r\n            )\r\n        ) {\r\n            ChangePasswordState.NEW_VALID\r\n        } else {\r\n            ChangePasswordState.NEW_INVALID\r\n        }\r\n    }",
  "start_lineno" : "113",
  "methodName" : "checkNew",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordViewModel.kt",
  "task_id" : "Photok/148",
  "prompt" : "import kotlinx.coroutines.launch\nimport dev.leonlatsch.photok.security.PasswordUtils\nimport androidx.lifecycle.viewModelScope\nfun checkNew() = viewModelScope.launch {\r\n        changePasswordState = if (PasswordUtils.validatePasswords(\r\n                newPassword,\r\n                newPasswordConfirm\r\n            )\r\n        ) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ReEncryptViewModel",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        super.prepareViewModel(items)\r\n        viewModel.newPassword = newPassword\r\n    }",
  "context" : "override fun prepareViewModel(items: List<Photo>?) {\r\n        super.prepareViewModel(items)\r\n        viewModel.newPassword = newPassword\r\n    }",
  "start_lineno" : "43",
  "methodName" : "prepareViewModel",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptBottomSheetDialogFragment.kt",
  "task_id" : "Photok/149",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\noverride fun prepareViewModel(items: List<Photo>?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var newPassword String",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        elementsToProcess = items.size\r\n        super.preProcess()\r\n    }",
  "context" : "override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r\n        elementsToProcess = items.size\r\n        super.preProcess()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "preProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptViewModel.kt",
  "task_id" : "Photok/150",
  "prompt" : "override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var newPassword String",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        passwordManager.storePassword(newPassword)\r\n        encryptionManager.initialize(newPassword)\r\n    }",
  "context" : "override suspend fun postProcess() {\r\n        super.postProcess()\r\n        passwordManager.storePassword(newPassword)\r\n        encryptionManager.initialize(newPassword)\r\n    }",
  "start_lineno" : "70",
  "methodName" : "postProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptViewModel.kt",
  "task_id" : "Photok/151",
  "prompt" : "override suspend fun postProcess() {\r\n        super.postProcess()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nameTextView TextView?\nval contributionTextView TextView?\nval contactTextView TextView?\nval websiteTextView TextView?\nval headerHtmlTextView TextView?\nvar rawWebsite String\nval ICON_CREDITS_FILE",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        val rawText = String(bytes)\r\n        return HtmlCompat.fromHtml(rawText, HtmlCompat.FROM_HTML_MODE_COMPACT)\r\n    }",
  "context" : "private fun loadIconCredits(): Spanned {\r\n        val bytes = context.assets.open(ICON_CREDITS_FILE).readBytes()\r\n        val rawText = String(bytes)\r\n        return HtmlCompat.fromHtml(rawText, HtmlCompat.FROM_HTML_MODE_COMPACT)\r\n    }",
  "start_lineno" : "69",
  "methodName" : "loadIconCredits",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditEntryViewHolder.kt",
  "task_id" : "Photok/152",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.text.Spanned\nprivate fun loadIconCredits(): Spanned {\r\n        val bytes = context.assets.open(ICON_CREDITS_FILE).readBytes()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nameTextView TextView?\nval contributionTextView TextView?\nval contactTextView TextView?\nval websiteTextView TextView?\nval headerHtmlTextView TextView?\nvar rawWebsite String\nval ICON_CREDITS_FILE",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "        website.contains(\"https://\") -> website.replace(\"https://\", String.empty)\r\n        else -> website\r\n    }",
  "context" : "private fun prettifyWebsite(website: String) = when {\r\n        website.contains(\"http://\") -> website.replace(\"http://\", String.empty)\r\n        website.contains(\"https://\") -> website.replace(\"https://\", String.empty)\r\n        else -> website\r\n    }",
  "start_lineno" : "79",
  "methodName" : "prettifyWebsite",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditEntryViewHolder.kt",
  "task_id" : "Photok/153",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.empty\nprivate fun prettifyWebsite(website: String) = when {\r\n        website.contains(\"http://\") -> website.replace(\"http://\", String.empty)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val ENTRY_VIEW_TYPE\nval ENTRY_FOOTER_TYPE\nval ENTRY_HEADER_TYPE",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "            LayoutInflater.from(parent.context).inflate(layout, parent, false),\r\n            onClick,\r\n            parent.context\r\n        )\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CreditEntryViewHolder {\r\n        val layout = when (viewType) {\r\n            ENTRY_HEADER_TYPE -> R.layout.item_credits_header\r\n            ENTRY_FOOTER_TYPE -> R.layout.item_icon_credits\r\n            else -> R.layout.item_credit_entry\r\n        }\r\n\r\n        return CreditEntryViewHolder(\r\n            LayoutInflater.from(parent.context).inflate(layout, parent, false),\r\n            onClick,\r\n            parent.context\r\n        )\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreateViewHolder",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditsAdapter.kt",
  "task_id" : "Photok/154",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CreditEntryViewHolder {\r\n        val layout = when (viewType) {\r\n            ENTRY_HEADER_TYPE -> R.layout.item_credits_header\r\n            ENTRY_FOOTER_TYPE -> R.layout.item_icon_credits\r\n            else -> R.layout.item_credit_entry\r\n        }\r\n\r\n        return CreditEntryViewHolder(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val ENTRY_VIEW_TYPE\nval ENTRY_FOOTER_TYPE\nval ENTRY_HEADER_TYPE",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "            creditEntries[position].isFooter -> ENTRY_FOOTER_TYPE\r\n            else -> ENTRY_VIEW_TYPE\r\n        }",
  "context" : "override fun getItemViewType(position: Int) =\r\n        when {\r\n            creditEntries[position].isHeader -> ENTRY_HEADER_TYPE\r\n            creditEntries[position].isFooter -> ENTRY_FOOTER_TYPE\r\n            else -> ENTRY_VIEW_TYPE\r\n        }",
  "start_lineno" : "53",
  "methodName" : "getItemViewType",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditsAdapter.kt",
  "task_id" : "Photok/155",
  "prompt" : "import dev.leonlatsch.photok.R\noverride fun getItemViewType(position: Int) =\r\n        when {\r\n            creditEntries[position].isHeader -> ENTRY_HEADER_TYPE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ToggleAppVisibilityViewModel",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        useViewModel(viewModel)\r\n        setupLayout()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        useViewModel(viewModel)\r\n        setupLayout()\r\n    }",
  "start_lineno" : "41",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt",
  "task_id" : "Photok/156",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel ToggleAppVisibilityViewModel",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        childFragmentManager\r\n            .beginTransaction()\r\n            .replace(R.id.dialogHideAppFragmentContainer, Fragment(layout))\r\n            .commit()\r\n    }",
  "context" : "private fun setupLayout() {\r\n        val layout =\r\n            if (viewModel.isMainComponentDisabled()) {\r\n                R.layout.dialog_fragment_show_app\r\n            } else {\r\n                R.layout.dialog_fragment_hide_app\r\n            }\r\n        childFragmentManager\r\n            .beginTransaction()\r\n            .replace(R.id.dialogHideAppFragmentContainer, Fragment(layout))\r\n            .commit()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "setupLayout",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt",
  "task_id" : "Photok/157",
  "prompt" : "import dev.leonlatsch.photok.R\nprivate fun setupLayout() {\r\n        val layout =\r\n            if (viewModel.isMainComponentDisabled()) {\r\n                R.layout.dialog_fragment_show_app\r\n            } else {\r\n                R.layout.dialog_fragment_hide_app\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ToggleAppVisibilityViewModel",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            dismiss()\r\n        }\r\n    }",
  "context" : "fun toggleAppVisibility() {\r\n        Dialogs.showConfirmDialog(requireContext(), viewModel.confirmText) { _, _ ->\r\n            viewModel.toggleMainComponent()\r\n            dismiss()\r\n        }\r\n    }",
  "start_lineno" : "63",
  "methodName" : "toggleAppVisibility",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt",
  "task_id" : "Photok/158",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Dialogs\nfun toggleAppVisibility() {\r\n        Dialogs.showConfirmDialog(requireContext(), viewModel.confirmText) { _, _ ->\r\n            viewModel.toggleMainComponent()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel ToggleAppVisibilityViewModel",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: DialogToggleAppVisibilityBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "70",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt",
  "task_id" : "Photok/159",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogToggleAppVisibilityBinding\noverride fun bind(binding: DialogToggleAppVisibilityBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var title String\nvar buttonText String\nvar buttonEnabled Boolean\nvar currentState String\nvar hintVisibility Int\nvar confirmText String",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "            app.getString(R.string.hide_app_title_show)\r\n        } else {\r\n            app.getString(R.string.hide_app_title_hide)\r\n        }\r\n    }",
  "context" : "private fun startButtonTextCountDown() = viewModelScope.launch {\r\n        var secondsRemaining = 5\r\n\r\n        for (a in 1..5) {\r\n            buttonText = secondsRemaining.toString()\r\n            delay(1000)\r\n            secondsRemaining--\r\n        }\r\n\r\n        buttonEnabled = true\r\n        buttonText = if (isMainComponentDisabled()) {\r\n            app.getString(R.string.hide_app_title_show)\r\n        } else {\r\n            app.getString(R.string.hide_app_title_hide)\r\n        }\r\n    }",
  "start_lineno" : "114",
  "methodName" : "startButtonTextCountDown",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityViewModel.kt",
  "task_id" : "Photok/160",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport dev.leonlatsch.photok.R\nimport androidx.lifecycle.viewModelScope\nprivate fun startButtonTextCountDown() = viewModelScope.launch {\r\n        var secondsRemaining = 5\r\n\r\n        for (a in 1..5) {\r\n            buttonText = secondsRemaining.toString()\r\n            delay(1000)\r\n            secondsRemaining--\r\n        }\r\n\r\n        buttonEnabled = true\r\n        buttonText = if (isMainComponentDisabled()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "        )\r\n        return enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED\r\n    }",
  "context" : "fun isMainComponentDisabled(): Boolean {\r\n        val enabledSetting = app.packageManager.getComponentEnabledSetting(\r\n            MAIN_LAUNCHER_COMPONENT\r\n        )\r\n        return enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED\r\n    }",
  "start_lineno" : "60",
  "methodName" : "isMainComponentDisabled",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\usecase\\ToggleMainComponentUseCase.kt",
  "task_id" : "Photok/161",
  "prompt" : "fun isMainComponentDisabled(): Boolean {\r\n        val enabledSetting = app.packageManager.getComponentEnabledSetting(\r\n            MAIN_LAUNCHER_COMPONENT\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "\r\n        toolbar = view.findViewById(R.id.settingsToolbar)\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        view.statusBarPadding()\r\n\r\n        toolbar = view.findViewById(R.id.settingsToolbar)\r\n    }",
  "start_lineno" : "65",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/162",
  "prompt" : "import dev.leonlatsch.photok.other.statusBarPadding\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        view.statusBarPadding()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        setupAppCategory()\r\n        setupSecurityCategory()\r\n        setupAdvancedCategory()\r\n        setupOtherCategory()\r\n    }",
  "context" : "override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.settings, rootKey)\r\n\r\n        setupAppCategory()\r\n        setupSecurityCategory()\r\n        setupAdvancedCategory()\r\n        setupOtherCategory()\r\n    }",
  "start_lineno" : "72",
  "methodName" : "onCreatePreferences",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/163",
  "prompt" : "import dev.leonlatsch.photok.R\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.settings, rootKey)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            setAppDesign(it as String)\r\n        }\r\n    }",
  "context" : "private fun setupAppCategory() {\r\n        addCallbackTo<ListPreference>(Config.SYSTEM_DESIGN) {\r\n            setAppDesign(it as String)\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "setupAppCategory",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/164",
  "prompt" : "import dev.leonlatsch.photok.settings.data.Config\nimport androidx.preference.Preference\nimport androidx.preference.ListPreference\nprivate fun setupAppCategory() {\r\n        addCallbackTo<ListPreference>(Config.SYSTEM_DESIGN) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "            ToggleAppVisibilityDialog().show(childFragmentManager)\r\n        }\r\n\r\n        configurePhoneDialPreference()\r\n    }",
  "context" : "private fun setupSecurityCategory() {\r\n        addActionTo(KEY_ACTION_CHANGE_PASSWORD) {\r\n            ChangePasswordDialog().show(childFragmentManager)\r\n        }\r\n\r\n        addActionTo(KEY_ACTION_HIDE_APP) {\r\n            ToggleAppVisibilityDialog().show(childFragmentManager)\r\n        }\r\n\r\n        configurePhoneDialPreference()\r\n    }",
  "start_lineno" : "88",
  "methodName" : "setupSecurityCategory",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/165",
  "prompt" : "import dev.leonlatsch.photok.settings.ui.changepassword.ChangePasswordDialog\nimport dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.R\nprivate fun setupSecurityCategory() {\r\n        addActionTo(KEY_ACTION_CHANGE_PASSWORD) {\r\n            ChangePasswordDialog().show(childFragmentManager)\r\n        }\r\n\r\n        addActionTo(KEY_ACTION_HIDE_APP) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "177",
  "ground_truth" : "                    it.setText(0.toString())\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun configurePhoneDialPreference() {\r\n        val dialPreference = findPreference<EditTextPreference>(Config.SECURITY_DIAL_LAUNCH_CODE)\r\n        dialPreference?.setOnBindEditTextListener {\r\n            it.inputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL\r\n            it.addTextChangedListener { editable ->\r\n                if (editable?.length!! < 1) {\r\n                    it.setText(0.toString())\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "167",
  "methodName" : "configurePhoneDialPreference",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/166",
  "prompt" : "import dev.leonlatsch.photok.settings.data.Config\nimport dev.leonlatsch.photok.R\nimport androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nimport androidx.core.widget.addTextChangedListener\nimport android.text.InputType\nprivate fun configurePhoneDialPreference() {\r\n        val dialPreference = findPreference<EditTextPreference>(Config.SECURITY_DIAL_LAUNCH_CODE)\r\n        dialPreference?.setOnBindEditTextListener {\r\n            it.inputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL\r\n            it.addTextChangedListener { editable ->\r\n                if (editable?.length!! < 1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "            val uri = data?.data\r\n            uri ?: return\r\n            BackupBottomSheetDialogFragment(uri).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "context" : "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQ_BACKUP && resultCode == Activity.RESULT_OK) {\r\n            val uri = data?.data\r\n            uri ?: return\r\n            BackupBottomSheetDialogFragment(uri).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }",
  "start_lineno" : "179",
  "methodName" : "onActivityResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/167",
  "prompt" : "import dev.leonlatsch.photok.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQ_BACKUP && resultCode == Activity.RESULT_OK) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "            ?.setOnPreferenceClickListener {\r\n                action()\r\n                true\r\n            }\r\n    }",
  "context" : "private fun addActionTo(preferenceId: String, action: () -> Unit) {\r\n        preferenceManager\r\n            .findPreference<Preference>(preferenceId)\r\n            ?.setOnPreferenceClickListener {\r\n                action()\r\n                true\r\n            }\r\n    }",
  "start_lineno" : "188",
  "methodName" : "addActionTo",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/168",
  "prompt" : "import androidx.preference.Preference\nprivate fun addActionTo(preferenceId: String, action: () -> Unit) {\r\n        preferenceManager\r\n            .findPreference<Preference>(preferenceId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SettingsViewModel\nvar toolbar Toolbar?\nvar config Config\nval REQ_BACKUP\nval SCHEMA_MAILTO\nval KEY_ACTION_RESET\nval KEY_ACTION_CHANGE_PASSWORD\nval KEY_ACTION_HIDE_APP\nval KEY_ACTION_BACKUP\nval KEY_ACTION_FEEDBACK\nval KEY_ACTION_DONATE\nval KEY_ACTION_SOURCECODE\nval KEY_ACTION_CREDITS\nval KEY_ACTION_ABOUT",
  "app_type" : "life",
  "end_lineno" : "203",
  "ground_truth" : "            ?.setOnPreferenceChangeListener { _, newValue ->\r\n                action(newValue)\r\n                true\r\n            }\r\n    }",
  "context" : "private fun <T : Preference> addCallbackTo(preferenceId: String, action: (value: Any) -> Unit) {\r\n        preferenceManager.findPreference<T>(preferenceId)\r\n            ?.setOnPreferenceChangeListener { _, newValue ->\r\n                action(newValue)\r\n                true\r\n            }\r\n    }",
  "start_lineno" : "197",
  "methodName" : "addCallbackTo",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt",
  "task_id" : "Photok/169",
  "prompt" : "import androidx.preference.Preference\nprivate fun <T : Preference> addCallbackTo(preferenceId: String, action: (value: Any) -> Unit) {\r\n        preferenceManager.findPreference<T>(preferenceId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        photoRepository.deleteAll()\r\n\r\n        passwordManager.resetPassword()\r\n        (app as BaseApplication).lockApp()\r\n    }",
  "context" : "fun resetComponents() = viewModelScope.launch {\r\n        val allPhotos = photoRepository.getAll()\r\n        for (photo in allPhotos) {\r\n            photoRepository.deleteInternalPhotoData(photo)\r\n        }\r\n        photoRepository.deleteAll()\r\n\r\n        passwordManager.resetPassword()\r\n        (app as BaseApplication).lockApp()\r\n    }",
  "start_lineno" : "45",
  "methodName" : "resetComponents",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsViewModel.kt",
  "task_id" : "Photok/170",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun resetComponents() = viewModelScope.launch {\r\n        val allPhotos = photoRepository.getAll()\r\n        for (photo in allPhotos) {\r\n            photoRepository.deleteInternalPhotoData(photo)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "            findNavController().navigateUp()\r\n        }\r\n\r\n        binding.ossRecycler.initialize(LICENSE_REPORT_FILE)\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.root.systemBarsPadding()\r\n\r\n        binding.ossToolbar.setNavigationOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n\r\n        binding.ossRecycler.initialize(LICENSE_REPORT_FILE)\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\thirdparty\\OssLicensesFragment.kt",
  "task_id" : "Photok/171",
  "prompt" : "import dev.leonlatsch.photok.other.systemBarsPadding\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.root.systemBarsPadding()\r\n\r\n        binding.ossToolbar.setNavigationOnClickListener {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel SetupViewModel",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "            if (viewModel.validateBothPasswords()) {\r\n                binding.setupButton.isEnabled = true\r\n            }\r\n        }\r\n    }",
  "context" : "private fun enableOrDisableSetup() {\r\n        if (!viewModel.passwordsEqual()\r\n            && binding.setupConfirmPasswordEditText.isVisible\r\n        ) {\r\n            binding.setupPasswordMatchWarningTextView.show()\r\n            binding.setupButton.isEnabled = false\r\n        } else {\r\n            binding.setupPasswordMatchWarningTextView.hide()\r\n            if (viewModel.validateBothPasswords()) {\r\n                binding.setupButton.isEnabled = true\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "114",
  "methodName" : "enableOrDisableSetup",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\setup\\ui\\SetupFragment.kt",
  "task_id" : "Photok/172",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.other.extensions.hide\nimport androidx.core.view.isVisible\nimport android.view.View\nprivate fun enableOrDisableSetup() {\r\n        if (!viewModel.passwordsEqual()\r\n            && binding.setupConfirmPasswordEditText.isVisible\r\n        ) {\r\n            binding.setupPasswordMatchWarningTextView.show()\r\n            binding.setupButton.isEnabled = false\r\n        } else {\r\n            binding.setupPasswordMatchWarningTextView.hide()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel SetupViewModel",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: FragmentSetupBinding) {\r\n        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "128",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\setup\\ui\\SetupFragment.kt",
  "task_id" : "Photok/173",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentSetupBinding\noverride fun bind(binding: FragmentSetupBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var password String\nvar confirmPassword String\nvar setupState SetupState",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "            SetupState.FINISHED\r\n        } else {\r\n            SetupState.SETUP\r\n        }\r\n    }",
  "context" : "fun savePassword() = viewModelScope.launch {\r\n        setupState = SetupState.LOADING\r\n\r\n        setupState = if (validateBothPasswords()) {\r\n            passwordManager.storePassword(password)\r\n            encryptionManager.initialize(this@SetupViewModel.password)\r\n            SetupState.FINISHED\r\n        } else {\r\n            SetupState.SETUP\r\n        }\r\n    }",
  "start_lineno" : "78",
  "methodName" : "savePassword",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\setup\\ui\\SetupViewModel.kt",
  "task_id" : "Photok/174",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun savePassword() = viewModelScope.launch {\r\n        setupState = SetupState.LOADING\r\n\r\n        setupState = if (validateBothPasswords()) {\r\n            passwordManager.storePassword(password)\r\n            encryptionManager.initialize(this@SetupViewModel.password)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var appStartState AppStartState?",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            AppStartState.SETUP\r\n        } else {\r\n            AppStartState.LOCKED\r\n        }\r\n    }",
  "context" : "fun checkApplicationState() = viewModelScope.launch {\r\n\r\n        // First start\r\n        if (config.systemFirstStart) {\r\n            appStartState = AppStartState.FIRST_START\r\n            return@launch\r\n        }\r\n\r\n        // Unlock or Setup\r\n        val password = config.securityPassword\r\n        appStartState = if (password == null || password.isEmpty()) {\r\n            AppStartState.SETUP\r\n        } else {\r\n            AppStartState.LOCKED\r\n        }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "checkApplicationState",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\splashscreen\\ui\\SplashScreenViewModel.kt",
  "task_id" : "Photok/175",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nimport android.app.Application\nfun checkApplicationState() = viewModelScope.launch {\r\n\r\n        // First start\r\n        if (config.systemFirstStart) {\r\n            appStartState = AppStartState.FIRST_START\r\n            return@launch\r\n        }\r\n\r\n        // Unlock or Setup\r\n        val password = config.securityPassword\r\n        appStartState = if (password == null || password.isEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "\r\n        if (!config.securityAllowScreenshots) {\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n        }\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        if (!config.securityAllowScreenshots) {\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n        }\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseActivity.kt",
  "task_id" : "Photok/176",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var config Config",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        val inputManager = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputManager.hideSoftInputFromWindow(currentFocus?.windowToken, 0)\r\n    }",
  "context" : "fun hideKeyboard() {\r\n        val inputManager = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputManager.hideSoftInputFromWindow(currentFocus?.windowToken, 0)\r\n    }",
  "start_lineno" : "51",
  "methodName" : "hideKeyboard",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseActivity.kt",
  "task_id" : "Photok/177",
  "prompt" : "fun hideKeyboard() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var config Config",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "context" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "start_lineno" : "56",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseActivity.kt",
  "task_id" : "Photok/178",
  "prompt" : "import dev.leonlatsch.photok.R\noverride fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "context" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "start_lineno" : "30",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseBottomSheetDialogFragment.kt",
  "task_id" : "Photok/179",
  "prompt" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        // Set necessary drawables for rounded corners\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        view.background =\r\n            ResourcesCompat.getDrawable(resources, R.drawable.bg_dialog_round, null)\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // Set necessary drawables for rounded corners\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        view.background =\r\n            ResourcesCompat.getDrawable(resources, R.drawable.bg_dialog_round, null)\r\n    }",
  "start_lineno" : "37",
  "methodName" : "onViewCreated",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseDialogFragment.kt",
  "task_id" : "Photok/180",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "context" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseDialogFragment.kt",
  "task_id" : "Photok/181",
  "prompt" : "import dev.leonlatsch.photok.R\noverride fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "\r\n        activity.supportActionBar?.setDisplayShowTitleEnabled(showTitle)\r\n    }",
  "context" : "internal fun setToolbar(toolbar: Toolbar, showTitle: Boolean = false) {\r\n        val activity = (requireActivity() as AppCompatActivity)\r\n        activity.setSupportActionBar(toolbar)\r\n\r\n        activity.supportActionBar?.setDisplayShowTitleEnabled(showTitle)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "setToolbar",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseFragment.kt",
  "task_id" : "Photok/182",
  "prompt" : "import androidx.appcompat.widget.Toolbar\nimport androidx.appcompat.app.AppCompatActivity\ninternal fun setToolbar(toolbar: Toolbar, showTitle: Boolean = false) {\r\n        val activity = (requireActivity() as AppCompatActivity)\r\n        activity.setSupportActionBar(toolbar)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "context" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        // Forward result to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseFragment.kt",
  "task_id" : "Photok/183",
  "prompt" : "override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel BaseProcessViewModel<T>",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "        binding.processProcessingIndicator.hide()\r\n        if (viewModel.failuresOccurred) {\r\n            binding.processFailuresWarnMessage.show()\r\n        }\r\n    }",
  "context" : "private fun enterFinishedOrAbortedState() {\r\n        isCancelable = true\r\n        binding.processCloseButton.show()\r\n        binding.processAbortButton.hide()\r\n        binding.processProcessingIndicator.hide()\r\n        if (viewModel.failuresOccurred) {\r\n            binding.processFailuresWarnMessage.show()\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "enterFinishedOrAbortedState",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt",
  "task_id" : "Photok/184",
  "prompt" : "import dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.other.extensions.hide\nprivate fun enterFinishedOrAbortedState() {\r\n        isCancelable = true\r\n        binding.processCloseButton.show()\r\n        binding.processAbortButton.hide()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel BaseProcessViewModel<T>",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "            viewModel.elementsToProcess = items.size\r\n        }\r\n    }",
  "context" : "open fun prepareViewModel(items: List<T>?) {\r\n        if (items != null) {\r\n            viewModel.items = items\r\n            viewModel.elementsToProcess = items.size\r\n        }\r\n    }",
  "start_lineno" : "112",
  "methodName" : "prepareViewModel",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt",
  "task_id" : "Photok/185",
  "prompt" : "import android.view.View\nopen fun prepareViewModel(items: List<T>?) {\r\n        if (items != null) {\r\n            viewModel.items = items\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel BaseProcessViewModel<T>",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "                requireContext(),\r\n                color\r\n            )\r\n        )\r\n    }",
  "context" : "private fun setStatusIcon(drawable: Int?, color: Int = 0) {\r\n        if (drawable == null) {\r\n            binding.processStatusImageView.setImageDrawable(null)\r\n            return\r\n        }\r\n\r\n        binding.processStatusImageView.setImageDrawable(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                drawable\r\n            )\r\n        )\r\n        binding.processStatusImageView.setColorFilter(\r\n            ContextCompat.getColor(\r\n                requireContext(),\r\n                color\r\n            )\r\n        )\r\n    }",
  "start_lineno" : "119",
  "methodName" : "setStatusIcon",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt",
  "task_id" : "Photok/186",
  "prompt" : "import androidx.core.content.ContextCompat\nimport android.view.View\nprivate fun setStatusIcon(drawable: Int?, color: Int = 0) {\r\n        if (drawable == null) {\r\n            binding.processStatusImageView.setImageDrawable(null)\r\n            return\r\n        }\r\n\r\n        binding.processStatusImageView.setImageDrawable(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                drawable\r\n            )\r\n        )\r\n        binding.processStatusImageView.setColorFilter(\r\n            ContextCompat.getColor(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel BaseProcessViewModel<T>",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: DialogBottomSheetProcessBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "139",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt",
  "task_id" : "Photok/187",
  "prompt" : "import dev.leonlatsch.photok.databinding.DialogBottomSheetProcessBinding\noverride fun bind(binding: DialogBottomSheetProcessBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "        processLoop()\r\n        postProcess()\r\n    }",
  "context" : "fun runProcessing() = viewModelScope.launch(Dispatchers.IO) {\r\n        preProcess()\r\n        processLoop()\r\n        postProcess()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "runProcessing",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/188",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun runProcessing() = viewModelScope.launch(Dispatchers.IO) {\r\n        preProcess()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "        processState = ProcessState.PROCESSING\r\n        updateProgress()\r\n    }",
  "context" : "open suspend fun preProcess() {\r\n        processState = ProcessState.PROCESSING\r\n        updateProgress()\r\n    }",
  "start_lineno" : "101",
  "methodName" : "preProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/189",
  "prompt" : "open suspend fun preProcess() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "\r\n            processItem(item)\r\n            itemProcessed()\r\n        }\r\n    }",
  "context" : "private suspend fun processLoop() {\r\n        for (item in items) {\r\n            if (processState == ProcessState.ABORTED) {\r\n                return\r\n            }\r\n\r\n            processItem(item)\r\n            itemProcessed()\r\n        }\r\n    }",
  "start_lineno" : "111",
  "methodName" : "processLoop",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/190",
  "prompt" : "private suspend fun processLoop() {\r\n        for (item in items) {\r\n            if (processState == ProcessState.ABORTED) {\r\n                return\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "            processState = ProcessState.FINISHED\r\n        }\r\n    }",
  "context" : "open suspend fun postProcess() {\r\n        if (processState != ProcessState.ABORTED) {\r\n            processState = ProcessState.FINISHED\r\n        }\r\n    }",
  "start_lineno" : "131",
  "methodName" : "postProcess",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/191",
  "prompt" : "open suspend fun postProcess() {\r\n        if (processState != ProcessState.ABORTED) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "        current++\r\n        updateProgress()\r\n    }",
  "context" : "private fun itemProcessed() {\r\n        current++\r\n        updateProgress()\r\n    }",
  "start_lineno" : "147",
  "methodName" : "itemProcessed",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/192",
  "prompt" : "private fun itemProcessed() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var items List<T>\nvar processState ProcessState\nvar progressPercent Int\nvar current Int\nvar elementsToProcess\nvar failuresOccurred",
  "app_type" : "life",
  "end_lineno" : "158",
  "ground_truth" : "            return\r\n        }\r\n\r\n        progressPercent = (current * 100) / elementsToProcess\r\n    }",
  "context" : "private fun updateProgress() {\r\n        if (elementsToProcess == 0) {\r\n            return\r\n        }\r\n\r\n        progressPercent = (current * 100) / elementsToProcess\r\n    }",
  "start_lineno" : "152",
  "methodName" : "updateProgress",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt",
  "task_id" : "Photok/193",
  "prompt" : "private fun updateProgress() {\r\n        if (elementsToProcess == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding BindingType",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        binding = DataBindingUtil.setContentView(this, layout)\r\n        bind(binding)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = DataBindingUtil.setContentView(this, layout)\r\n        bind(binding)\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onCreate",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableActivity.kt",
  "task_id" : "Photok/194",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding BindingType",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        bind(binding)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r\n        bind(binding)\r\n        return binding.root\r\n    }",
  "start_lineno" : "43",
  "methodName" : "onCreateView",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableBottomSheetDialogFragment.kt",
  "task_id" : "Photok/195",
  "prompt" : "import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding BindingType",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        bind(binding)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r\n        bind(binding)\r\n        return binding.root\r\n    }",
  "start_lineno" : "43",
  "methodName" : "onCreateView",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableDialogFragment.kt",
  "task_id" : "Photok/196",
  "prompt" : "import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding BindingType",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        bind(binding)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r\n        bind(binding)\r\n        return binding.root\r\n    }",
  "start_lineno" : "47",
  "methodName" : "onCreateView",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableFragment.kt",
  "task_id" : "Photok/197",
  "prompt" : "import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val changeListeners PropertyChangeRegistry\nval valueChangeRegistry PropertyValueChangeRegistry",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        changeListeners.notifyCallbacks(this, property, null)\r\n        valueChangeRegistry.notifyCallbacks(property, newValue)\r\n    }",
  "context" : "fun notifyChange(property: Int, newValue: Any?) {\r\n        changeListeners.notifyCallbacks(this, property, null)\r\n        valueChangeRegistry.notifyCallbacks(property, newValue)\r\n    }",
  "start_lineno" : "78",
  "methodName" : "notifyChange",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\ObservableViewModel.kt",
  "task_id" : "Photok/198",
  "prompt" : "fun notifyChange(property: Int, newValue: Any?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val callbacks ArrayList<PropertyChangedValueCallback>",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "            it.onCallback(property, newValue)\r\n        }\r\n    }",
  "context" : "fun notifyCallbacks(property: Int, newValue: Any?) {\r\n        callbacks.forEach {\r\n            it.onCallback(property, newValue)\r\n        }\r\n    }",
  "start_lineno" : "42",
  "methodName" : "notifyCallbacks",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\PropertyValueChangeRegistry.kt",
  "task_id" : "Photok/199",
  "prompt" : "fun notifyCallbacks(property: Int, newValue: Any?) {\r\n        callbacks.forEach {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            chooser.message = message\r\n            return this\r\n        }",
  "context" : "fun message(message: String): Builder {\r\n            chooser.message = message\r\n            return this\r\n        }",
  "start_lineno" : "83",
  "methodName" : "message",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/200",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun message(message: String): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "            chooser.mimeType = mimeType\r\n            return this\r\n        }",
  "context" : "fun mimeType(mimeType: String): Builder {\r\n            chooser.mimeType = mimeType\r\n            return this\r\n        }",
  "start_lineno" : "91",
  "methodName" : "mimeType",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/201",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun mimeType(mimeType: String): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "            chooser.requestCode = requestCode\r\n            return this\r\n        }",
  "context" : "fun requestCode(requestCode: Int): Builder {\r\n            chooser.requestCode = requestCode\r\n            return this\r\n        }",
  "start_lineno" : "99",
  "methodName" : "requestCode",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/202",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun requestCode(requestCode: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "110",
  "ground_truth" : "            chooser.permissionRequestCode = permissionCode\r\n            return this\r\n        }",
  "context" : "fun permissionCode(permissionCode: Int): Builder {\r\n            chooser.permissionRequestCode = permissionCode\r\n            return this\r\n        }",
  "start_lineno" : "107",
  "methodName" : "permissionCode",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/203",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun permissionCode(permissionCode: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            chooser.permission = permission\r\n            return this\r\n        }",
  "context" : "fun permission(permission: String): Builder {\r\n            chooser.permission = permission\r\n            return this\r\n        }",
  "start_lineno" : "115",
  "methodName" : "permission",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/204",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun permission(permission: String): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var message String?\nvar mimeType String?\nvar requestCode Int\nvar permissionRequestCode Int\nvar permission String?\nvar allowMultiple Boolean\nval chooser",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "            chooser.allowMultiple = true\r\n            return this\r\n        }",
  "context" : "fun allowMultiple(): Builder {\r\n            chooser.allowMultiple = true\r\n            return this\r\n        }",
  "start_lineno" : "123",
  "methodName" : "allowMultiple",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt",
  "task_id" : "Photok/205",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun allowMultiple(): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        fontFamily = FontFamily(Font(R.font.lobster_regular)),\r\n        fontSize = 38.sp,\r\n        modifier = modifier\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun AppName(\r\n    color: Color = colorResource(R.color.appTitleColor),\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Text(\r\n        text = stringResource(R.string.app_name),\r\n        color = color,\r\n        fontFamily = FontFamily(Font(R.font.lobster_regular)),\r\n        fontSize = 38.sp,\r\n        modifier = modifier\r\n    )\r\n}",
  "start_lineno" : "30",
  "methodName" : "AppName",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\compose\\AppName.kt",
  "task_id" : "Photok/206",
  "prompt" : "import dev.leonlatsch.photok.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\n\r\n@Composable\r\nfun AppName(\r\n    color: Color = colorResource(R.color.appTitleColor),\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Text(\r\n        text = stringResource(R.string.app_name),\r\n        color = color,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        is ContextWrapper -> baseContext.findWindow()\r\n        else -> null\r\n    }",
  "context" : "private tailrec fun Context.findWindow(): Window? =\r\n    when (this) {\r\n        is Activity -> window\r\n        is ContextWrapper -> baseContext.findWindow()\r\n        else -> null\r\n    }",
  "start_lineno" : "36",
  "methodName" : "findWindow",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\compose\\Window.kt",
  "task_id" : "Photok/207",
  "prompt" : "import android.view.Window\nimport android.content.Context\nimport android.app.Activity\nprivate tailrec fun Context.findWindow(): Window? =\r\n    when (this) {\r\n        is Activity -> window\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "                .setPositiveButton(R.string.common_yes, onPositiveButtonClicked)\r\n                .setNegativeButton(R.string.common_no, null)\r\n                .show()\r\n        }\r\n    }",
  "context" : "fun showConfirmDialog(\r\n        context: Context,\r\n        title: String,\r\n        onPositiveButtonClicked: DialogInterface.OnClickListener\r\n    ) {\r\n        onMain {\r\n            AlertDialog.Builder(context)\r\n                .setMessage(HtmlCompat.fromHtml(title, HtmlCompat.FROM_HTML_MODE_LEGACY))\r\n                .setPositiveButton(R.string.common_yes, onPositiveButtonClicked)\r\n                .setNegativeButton(R.string.common_no, null)\r\n                .show()\r\n        }\r\n    }",
  "start_lineno" : "35",
  "methodName" : "showConfirmDialog",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Dialogs.kt",
  "task_id" : "Photok/208",
  "prompt" : "import dev.leonlatsch.photok.other.onMain\nimport dev.leonlatsch.photok.R\nimport androidx.core.text.HtmlCompat\nimport androidx.appcompat.app.AlertDialog\nimport android.content.DialogInterface\nimport android.content.Context\nfun showConfirmDialog(\r\n        context: Context,\r\n        title: String,\r\n        onPositiveButtonClicked: DialogInterface.OnClickListener\r\n    ) {\r\n        onMain {\r\n            AlertDialog.Builder(context)\r\n                .setMessage(HtmlCompat.fromHtml(title, HtmlCompat.FROM_HTML_MODE_LEGACY))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "            Toast.makeText(context, message, Toast.LENGTH_LONG).show()\r\n        }\r\n    }",
  "context" : "fun showLongToast(context: Context, message: String) {\r\n        onMain {\r\n            Toast.makeText(context, message, Toast.LENGTH_LONG).show()\r\n        }\r\n    }",
  "start_lineno" : "49",
  "methodName" : "showLongToast",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Dialogs.kt",
  "task_id" : "Photok/209",
  "prompt" : "import dev.leonlatsch.photok.other.onMain\nimport android.widget.Toast\nimport android.content.Context\nfun showLongToast(context: Context, message: String) {\r\n        onMain {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }",
  "context" : "fun showShortToast(context: Context, message: String) {\r\n        onMain {\r\n            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }",
  "start_lineno" : "55",
  "methodName" : "showShortToast",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Dialogs.kt",
  "task_id" : "Photok/210",
  "prompt" : "import dev.leonlatsch.photok.other.onMain\nimport android.widget.Toast\nimport android.content.Context\nfun showShortToast(context: Context, message: String) {\r\n        onMain {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding PasswordEditTextBinding\nval onShowPasswordClickListener\nval getTextValue String\nval INPUT_TYPE_PASSWORD\nval INPUT_TYPE_TEXT",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "        binding.passwordEditTextValue.setText(value)\r\n        binding.passwordEditTextValue.setSelection(value.length)\r\n    }",
  "context" : "fun setTextValue(value: String) {\r\n        binding.passwordEditTextValue.setText(value)\r\n        binding.passwordEditTextValue.setSelection(value.length)\r\n    }",
  "start_lineno" : "140",
  "methodName" : "setTextValue",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\PasswordEditText.kt",
  "task_id" : "Photok/211",
  "prompt" : "fun setTextValue(value: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding PasswordEditTextBinding\nval onShowPasswordClickListener\nval getTextValue String\nval INPUT_TYPE_PASSWORD\nval INPUT_TYPE_TEXT",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "                if (value != passwordEditText.getTextValue) {\r\n                    passwordEditText.setTextValue(value)\r\n                }\r\n            }\r\n        }",
  "context" : " @BindingAdapter(\"textValue\")\r\n        @JvmStatic\r\n        fun setTextValueAdapter(passwordEditText: PasswordEditText, value: String?) {\r\n            value?.let {\r\n                if (value != passwordEditText.getTextValue) {\r\n                    passwordEditText.setTextValue(value)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "165",
  "methodName" : "setTextValueAdapter",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\PasswordEditText.kt",
  "task_id" : "Photok/212",
  "prompt" : " @BindingAdapter(\"textValue\")\r\n        @JvmStatic\r\n        fun setTextValueAdapter(passwordEditText: PasswordEditText, value: String?) {\r\n            value?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val fragmentList\nval fragmentTitleList",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        fragmentList.add(fragment)\r\n        fragmentTitleList.add(title)\r\n    }",
  "context" : "private fun addFragment(fragment: Fragment, title: String) {\r\n        fragmentList.add(fragment)\r\n        fragmentTitleList.add(title)\r\n    }",
  "start_lineno" : "48",
  "methodName" : "addFragment",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\ViewPagerAdapter.kt",
  "task_id" : "Photok/213",
  "prompt" : "import androidx.fragment.app.Fragment\nprivate fun addFragment(fragment: Fragment, title: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel UnlockViewModel",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "            findNavController().navigate(R.id.action_unlockFragment_to_galleryFragment)\r\n        } else {\r\n            Dialogs.showLongToast(requireContext(), getString(R.string.common_error))\r\n        }\r\n    }",
  "context" : "private fun unlock() {\r\n        requireActivityAs(BaseActivity::class).hideKeyboard()\r\n        binding.loadingOverlay.hide()\r\n\r\n        if (viewModel.encryptionManager.isReady) {\r\n            requireActivity().getBaseApplication().applicationState = ApplicationState.UNLOCKED\r\n            findNavController().navigate(R.id.action_unlockFragment_to_galleryFragment)\r\n        } else {\r\n            Dialogs.showLongToast(requireContext(), getString(R.string.common_error))\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "unlock",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\unlock\\ui\\UnlockFragment.kt",
  "task_id" : "Photok/214",
  "prompt" : "import dev.leonlatsch.photok.uicomponnets.base.BaseActivity\nimport dev.leonlatsch.photok.other.extensions.requireActivityAs\nimport dev.leonlatsch.photok.other.extensions.hide\nimport dev.leonlatsch.photok.other.extensions.getBaseApplication\nimport dev.leonlatsch.photok.R\nimport dev.leonlatsch.photok.ApplicationState\nprivate fun unlock() {\r\n        requireActivityAs(BaseActivity::class).hideKeyboard()\r\n        binding.loadingOverlay.hide()\r\n\r\n        if (viewModel.encryptionManager.isReady) {\r\n            requireActivity().getBaseApplication().applicationState = ApplicationState.UNLOCKED\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel UnlockViewModel",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "context" : "override fun bind(binding: FragmentUnlockBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }",
  "start_lineno" : "87",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\unlock\\ui\\UnlockFragment.kt",
  "task_id" : "Photok/215",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentUnlockBinding\noverride fun bind(binding: FragmentUnlockBinding) {\r\n        super.bind(binding)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var password String\nvar unlockState UnlockState",
  "app_type" : "life",
  "end_lineno" : "75",
  "ground_truth" : "            UnlockState.UNLOCKED\r\n        } else {\r\n            UnlockState.LOCKED\r\n        }\r\n    }",
  "context" : "fun unlock() = viewModelScope.launch {\r\n        unlockState = UnlockState.CHECKING\r\n\r\n        unlockState = if (passwordManager.checkPassword(password)) {\r\n            encryptionManager.initialize(password)\r\n            UnlockState.UNLOCKED\r\n        } else {\r\n            UnlockState.LOCKED\r\n        }\r\n    }",
  "start_lineno" : "66",
  "methodName" : "unlock",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\unlock\\ui\\UnlockViewModel.kt",
  "task_id" : "Photok/216",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun unlock() = viewModelScope.launch {\r\n        unlockState = UnlockState.CHECKING\r\n\r\n        unlockState = if (passwordManager.checkPassword(password)) {\r\n            encryptionManager.initialize(password)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inputStream CipherInputStream?\nvar uri Uri",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "            inputStream?.forceSkip(dataSpec.position)\r\n        }\r\n\r\n        return dataSpec.length\r\n    }",
  "context" : "override fun open(dataSpec: DataSpec): Long {\r\n        uri = dataSpec.uri\r\n        uri.path ?: return 0\r\n\r\n        val file = File(uri.path!!).canonicalFile\r\n        inputStream = encryptionManager.createCipherInputStream(file.inputStream())\r\n        if (dataSpec.position != 0L) {\r\n            inputStream?.forceSkip(dataSpec.position)\r\n        }\r\n\r\n        return dataSpec.length\r\n    }",
  "start_lineno" : "43",
  "methodName" : "open",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\data\\AesDataSource.kt",
  "task_id" : "Photok/217",
  "prompt" : "import javax.crypto.CipherInputStream\nimport java.io.File\nimport com.google.android.exoplayer2.upstream.DataSpec\noverride fun open(dataSpec: DataSpec): Long {\r\n        uri = dataSpec.uri\r\n        uri.path ?: return 0\r\n\r\n        val file = File(uri.path!!).canonicalFile\r\n        inputStream = encryptionManager.createCipherInputStream(file.inputStream())\r\n        if (dataSpec.position != 0L) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inputStream CipherInputStream?\nvar uri Uri",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        } else {\r\n            inputStream?.read(target, offset, length) ?: 0\r\n        }",
  "context" : " @Throws(IOException::class)\r\n    override fun read(target: ByteArray, offset: Int, length: Int): Int =\r\n        if (length == 0) {\r\n            0\r\n        } else {\r\n            inputStream?.read(target, offset, length) ?: 0\r\n        }",
  "start_lineno" : "56",
  "methodName" : "read",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\data\\AesDataSource.kt",
  "task_id" : "Photok/218",
  "prompt" : "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(target: ByteArray, offset: Int, length: Int): Int =\r\n        if (length == 0) {\r\n            0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel VideoPlayerViewModel",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "context" : "override fun bind(binding: FragmentVideoPlayerBinding) {\r\n        super.bind(binding)\r\n        binding.context = this\r\n    }",
  "start_lineno" : "71",
  "methodName" : "bind",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerFragment.kt",
  "task_id" : "Photok/219",
  "prompt" : "import dev.leonlatsch.photok.databinding.FragmentVideoPlayerBinding\noverride fun bind(binding: FragmentVideoPlayerBinding) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var player SimpleExoPlayer?",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            aesDataSource\r\n        }\r\n\r\n        return ProgressiveMediaSource.Factory(factory)\r\n    }",
  "context" : "private fun createMediaSourceFactory(): MediaSourceFactory {\r\n        val aesDataSource = AesDataSource(encryptionManager)\r\n\r\n        val factory = DataSource.Factory {\r\n            aesDataSource\r\n        }\r\n\r\n        return ProgressiveMediaSource.Factory(factory)\r\n    }",
  "start_lineno" : "82",
  "methodName" : "createMediaSourceFactory",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt",
  "task_id" : "Photok/220",
  "prompt" : "import dev.leonlatsch.photok.videoplayer.data.AesDataSource\nimport com.google.android.exoplayer2.upstream.DataSource\nimport com.google.android.exoplayer2.source.MediaSourceFactory\nprivate fun createMediaSourceFactory(): MediaSourceFactory {\r\n        val aesDataSource = AesDataSource(encryptionManager)\r\n\r\n        val factory = DataSource.Factory {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var player SimpleExoPlayer?",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "        return MediaItem.Builder()\r\n            .setMimeType(photo.type.mimeType)\r\n            .setUri(uri)\r\n            .build()\r\n    }",
  "context" : "private fun createMediaItem(photo: Photo): MediaItem {\r\n        val uri = Uri.fromFile(app.getFileStreamPath(photo.internalFileName).canonicalFile)\r\n\r\n        return MediaItem.Builder()\r\n            .setMimeType(photo.type.mimeType)\r\n            .setUri(uri)\r\n            .build()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "createMediaItem",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt",
  "task_id" : "Photok/221",
  "prompt" : "import dev.leonlatsch.photok.model.database.entity.Photo\nimport com.google.android.exoplayer2.MediaItem\nimport android.net.Uri\nprivate fun createMediaItem(photo: Photo): MediaItem {\r\n        val uri = Uri.fromFile(app.getFileStreamPath(photo.internalFileName).canonicalFile)\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var player SimpleExoPlayer?",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "        player?.release()\r\n        player = null\r\n    }",
  "context" : "fun releasePlayer() {\r\n        player?.release()\r\n        player = null\r\n    }",
  "start_lineno" : "104",
  "methodName" : "releasePlayer",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt",
  "task_id" : "Photok/222",
  "prompt" : "fun releasePlayer() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var player SimpleExoPlayer?",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "        super.onCleared()\r\n        releasePlayer()\r\n    }",
  "context" : "override fun onCleared() {\r\n        super.onCleared()\r\n        releasePlayer()\r\n    }",
  "start_lineno" : "109",
  "methodName" : "onCleared",
  "fpath" : "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt",
  "task_id" : "Photok/223",
  "prompt" : "override fun onCleared() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "        }\r\n        return habitResponse.data\r\n    }",
  "context" : "private fun <T> processResponse(habitResponse: HabitResponse<T>): T? {\r\n        habitResponse.notifications?.let {\r\n            notificationsManager.setNotifications(it)\r\n        }\r\n        return habitResponse.data\r\n    }",
  "start_lineno" : "84",
  "methodName" : "processResponse",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/0",
  "prompt" : "import com.habitrpg.common.habitica.models.HabitResponse\nimport com.habitrpg.android.habitica.R\nprivate fun <T> processResponse(habitResponse: HabitResponse<T>): T? {\r\n        habitResponse.notifications?.let {\r\n            notificationsManager.setNotifications(it)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "        } catch (throwable: Throwable) {\r\n            accept(throwable)\r\n        }\r\n        return null\r\n    }",
  "context" : "private suspend fun <T> process(apiCall: suspend () -> HabitResponse<T>): T? {\r\n        try {\r\n            return processResponse(apiCall())\r\n        } catch (throwable: Throwable) {\r\n            accept(throwable)\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "91",
  "methodName" : "process",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/1",
  "prompt" : "import com.habitrpg.common.habitica.models.HabitResponse\nimport com.habitrpg.android.habitica.R\nprivate suspend fun <T> process(apiCall: suspend () -> HabitResponse<T>): T? {\r\n        try {\r\n            return processResponse(apiCall())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "192",
  "ground_truth" : "            buildRetrofit()\r\n        }\r\n    }",
  "context" : "override fun updateServerUrl(newAddress: String?) {\r\n        if (newAddress != null) {\r\n            hostConfig.address = newAddress\r\n            buildRetrofit()\r\n        }\r\n    }",
  "start_lineno" : "187",
  "methodName" : "updateServerUrl",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/2",
  "prompt" : "import com.habitrpg.common.habitica.api.Server\noverride fun updateServerUrl(newAddress: String?) {\r\n        if (newAddress != null) {\r\n            hostConfig.address = newAddress\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "206",
  "ground_truth" : "        auth.password = password\r\n        auth.confirmPassword = confirmPassword\r\n        auth.email = email\r\n        return process { this.apiService.registerUser(auth) }\r\n    }",
  "context" : "override suspend fun registerUser(\r\n        username: String,\r\n        email: String,\r\n        password: String,\r\n        confirmPassword: String\r\n    ): UserAuthResponse? {\r\n        val auth = UserAuth()\r\n        auth.username = username\r\n        auth.password = password\r\n        auth.confirmPassword = confirmPassword\r\n        auth.email = email\r\n        return process { this.apiService.registerUser(auth) }\r\n    }",
  "start_lineno" : "194",
  "methodName" : "registerUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/3",
  "prompt" : "import com.habitrpg.common.habitica.models.auth.UserAuthResponse\nimport com.habitrpg.common.habitica.models.auth.UserAuth\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun registerUser(\r\n        username: String,\r\n        email: String,\r\n        password: String,\r\n        confirmPassword: String\r\n    ): UserAuthResponse? {\r\n        val auth = UserAuth()\r\n        auth.username = username\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "        auth.password = password\r\n        return process { this.apiService.connectLocal(auth) }\r\n    }",
  "context" : "override suspend fun connectUser(username: String, password: String): UserAuthResponse? {\r\n        val auth = UserAuth()\r\n        auth.username = username\r\n        auth.password = password\r\n        return process { this.apiService.connectLocal(auth) }\r\n    }",
  "start_lineno" : "208",
  "methodName" : "connectUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/4",
  "prompt" : "import com.habitrpg.common.habitica.models.auth.UserAuthResponse\nimport com.habitrpg.common.habitica.models.auth.UserAuth\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun connectUser(username: String, password: String): UserAuthResponse? {\r\n        val auth = UserAuth()\r\n        auth.username = username\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "        authResponse.access_token = accessToken\r\n        auth.authResponse = authResponse\r\n\r\n        return process { this.apiService.connectSocial(auth) }\r\n    }",
  "context" : "override suspend fun connectSocial(\r\n        network: String,\r\n        userId: String,\r\n        accessToken: String\r\n    ): UserAuthResponse? {\r\n        val auth = UserAuthSocial()\r\n        auth.network = network\r\n        val authResponse = UserAuthSocialTokens()\r\n        authResponse.client_id = userId\r\n        authResponse.access_token = accessToken\r\n        auth.authResponse = authResponse\r\n\r\n        return process { this.apiService.connectSocial(auth) }\r\n    }",
  "start_lineno" : "215",
  "methodName" : "connectSocial",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/5",
  "prompt" : "import com.habitrpg.common.habitica.models.auth.UserAuthSocialTokens\nimport com.habitrpg.common.habitica.models.auth.UserAuthSocial\nimport com.habitrpg.common.habitica.models.auth.UserAuthResponse\nimport com.habitrpg.common.habitica.models.auth.UserAuth\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun connectSocial(\r\n        network: String,\r\n        userId: String,\r\n        accessToken: String\r\n    ): UserAuthResponse? {\r\n        val auth = UserAuthSocial()\r\n        auth.network = network\r\n        val authResponse = UserAuthSocialTokens()\r\n        authResponse.client_id = userId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "313",
  "ground_truth" : "        } catch (e: IOException) {\r\n            Analytics.logError(\"Json Error: \" + lastAPICallURL + \",  \" + e.message)\r\n            ErrorResponse()\r\n        }\r\n    }",
  "context" : "override fun getErrorResponse(throwable: HttpException): ErrorResponse {\r\n        val errorResponse = throwable.response()?.errorBody() ?: return ErrorResponse()\r\n        val errorConverter = converter\r\n            .responseBodyConverter(ErrorResponse::class.java, arrayOfNulls(0), retrofitAdapter)\r\n        return try {\r\n            errorConverter?.convert(errorResponse) as ErrorResponse\r\n        } catch (e: IOException) {\r\n            Analytics.logError(\"Json Error: \" + lastAPICallURL + \",  \" + e.message)\r\n            ErrorResponse()\r\n        }\r\n    }",
  "start_lineno" : "303",
  "methodName" : "getErrorResponse",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/6",
  "prompt" : "import retrofit2.HttpException\nimport retrofit2.Converter\nimport com.habitrpg.shared.habitica.models.responses.ErrorResponse\nimport com.habitrpg.android.habitica.R\noverride fun getErrorResponse(throwable: HttpException): ErrorResponse {\r\n        val errorResponse = throwable.response()?.errorBody() ?: return ErrorResponse()\r\n        val errorConverter = converter\r\n            .responseBodyConverter(ErrorResponse::class.java, arrayOfNulls(0), retrofitAdapter)\r\n        return try {\r\n            errorConverter?.convert(errorResponse) as ErrorResponse\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "320",
  "ground_truth" : "        user?.tasks = tasks\r\n        return user\r\n    }",
  "context" : "override suspend fun retrieveUser(withTasks: Boolean): User? {\r\n        val user = process { apiService.getUser() }\r\n        val tasks = getTasks()\r\n        user?.tasks = tasks\r\n        return user\r\n    }",
  "start_lineno" : "315",
  "methodName" : "retrieveUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/7",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveUser(withTasks: Boolean): User? {\r\n        val user = process { apiService.getUser() }\r\n        val tasks = getTasks()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "351",
  "ground_truth" : "            context.getString(resourceTitleString),\r\n            context.getString(resourceMessageString),\r\n            isFromUserInput\r\n        )\r\n    }",
  "context" : "private fun showConnectionProblemDialog(\r\n        resourceTitleString: Int,\r\n        resourceMessageString: Int,\r\n        isFromUserInput: Boolean\r\n    ) {\r\n        showConnectionProblemDialog(\r\n            context.getString(resourceTitleString),\r\n            context.getString(resourceMessageString),\r\n            isFromUserInput\r\n        )\r\n    }",
  "start_lineno" : "341",
  "methodName" : "showConnectionProblemDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/8",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nprivate fun showConnectionProblemDialog(\r\n        resourceTitleString: Int,\r\n        resourceMessageString: Int,\r\n        isFromUserInput: Boolean\r\n    ) {\r\n        showConnectionProblemDialog(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "369",
  "ground_truth" : "                resourceTitleString,\r\n                resourceMessageString,\r\n                isFromUserInput\r\n            )\r\n    }",
  "context" : "private fun showConnectionProblemDialog(\r\n        resourceTitleString: String?,\r\n        resourceMessageString: String,\r\n        isFromUserInput: Boolean\r\n    ) {\r\n        erroredRequestCount += 1\r\n        val application = (context as? HabiticaBaseApplication)\r\n            ?: (context.applicationContext as? HabiticaBaseApplication)\r\n        application?.currentActivity?.get()\r\n            ?.showConnectionProblem(\r\n                erroredRequestCount,\r\n                resourceTitleString,\r\n                resourceMessageString,\r\n                isFromUserInput\r\n            )\r\n    }",
  "start_lineno" : "354",
  "methodName" : "showConnectionProblemDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/9",
  "prompt" : "import okhttp3.Request\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.HabiticaBaseApplication\nimport android.content.Context\nprivate fun showConnectionProblemDialog(\r\n        resourceTitleString: String?,\r\n        resourceMessageString: String,\r\n        isFromUserInput: Boolean\r\n    ) {\r\n        erroredRequestCount += 1\r\n        val application = (context as? HabiticaBaseApplication)\r\n            ?: (context.applicationContext as? HabiticaBaseApplication)\r\n        application?.currentActivity?.get()\r\n            ?.showConnectionProblem(\r\n                erroredRequestCount,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "378",
  "ground_truth" : "        val application = (context as? HabiticaBaseApplication)\r\n            ?: (context.applicationContext as? HabiticaBaseApplication)\r\n        application?.currentActivity?.get()\r\n            ?.hideConnectionProblem()\r\n    }",
  "context" : "private fun hideConnectionProblemDialog() {\r\n        if (erroredRequestCount == 0) return\r\n        erroredRequestCount = 0\r\n        val application = (context as? HabiticaBaseApplication)\r\n            ?: (context.applicationContext as? HabiticaBaseApplication)\r\n        application?.currentActivity?.get()\r\n            ?.hideConnectionProblem()\r\n    }",
  "start_lineno" : "371",
  "methodName" : "hideConnectionProblemDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/10",
  "prompt" : "import okhttp3.Request\nimport com.habitrpg.android.habitica.R\nprivate fun hideConnectionProblemDialog() {\r\n        if (erroredRequestCount == 0) return\r\n        erroredRequestCount = 0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "389",
  "ground_truth" : "        this.hostConfig.apiKey = apiToken ?: \"\"\r\n        Analytics.setUserID(hostConfig.userID)\r\n    }",
  "context" : "override fun updateAuthenticationCredentials(userID: String?, apiToken: String?) {\r\n        this.hostConfig.userID = userID ?: \"\"\r\n        this.hostConfig.apiKey = apiToken ?: \"\"\r\n        Analytics.setUserID(hostConfig.userID)\r\n    }",
  "start_lineno" : "385",
  "methodName" : "updateAuthenticationCredentials",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/11",
  "prompt" : "override fun updateAuthenticationCredentials(userID: String?, apiToken: String?) {\r\n        this.hostConfig.userID = userID ?: \"\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "435",
  "ground_truth" : "                itemKey,\r\n                mapOf(Pair(\"quantity\", purchaseQuantity))\r\n            )\r\n        }\r\n    }",
  "context" : "override suspend fun purchaseItem(type: String, itemKey: String, purchaseQuantity: Int): Void? {\r\n        return process {\r\n            apiService.purchaseItem(\r\n                type,\r\n                itemKey,\r\n                mapOf(Pair(\"quantity\", purchaseQuantity))\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "427",
  "methodName" : "purchaseItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/12",
  "prompt" : "override suspend fun purchaseItem(type: String, itemKey: String, purchaseQuantity: Int): Void? {\r\n        return process {\r\n            apiService.purchaseItem(\r\n                type,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "444",
  "ground_truth" : "            process { apiService.validateSubscription(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "override suspend fun validateSubscription(request: PurchaseValidationRequest): Any? {\r\n        return if (lastSubscribeCall == null || Date().time - lastSubscribeCall.time > 60000) {\r\n            process { apiService.validateSubscription(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "438",
  "methodName" : "validateSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/13",
  "prompt" : "import java.util.Date\nimport okhttp3.Request\nimport com.habitrpg.common.habitica.models.PurchaseValidationRequest\nimport com.habitrpg.android.habitica.R\noverride suspend fun validateSubscription(request: PurchaseValidationRequest): Any? {\r\n        return if (lastSubscribeCall == null || Date().time - lastSubscribeCall.time > 60000) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "482",
  "ground_truth" : "        response.data?.message = response.message\r\n        return process { response }\r\n    }",
  "context" : "override suspend fun feedPet(petKey: String, foodKey: String): FeedResponse? {\r\n        val response = apiService.feedPet(petKey, foodKey)\r\n        response.data?.message = response.message\r\n        return process { response }\r\n    }",
  "start_lineno" : "478",
  "methodName" : "feedPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/14",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.habitrpg.android.habitica.R\noverride suspend fun feedPet(petKey: String, foodKey: String): FeedResponse? {\r\n        val response = apiService.feedPet(petKey, foodKey)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "582",
  "ground_truth" : "            } else {\r\n                apiService.changeClass()\r\n            }\r\n        }\r\n    }",
  "context" : "override suspend fun changeClass(className: String?): User? {\r\n        return process {\r\n            if (className != null) {\r\n                apiService.changeClass(className)\r\n            } else {\r\n                apiService.changeClass()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "574",
  "methodName" : "changeClass",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/15",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeClass(className: String?): User? {\r\n        return process {\r\n            if (className != null) {\r\n                apiService.changeClass(className)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "730",
  "ground_truth" : "            return process { apiService.validatePurchase(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "override suspend fun validatePurchase(request: PurchaseValidationRequest): PurchaseValidationResult? {\r\n        // make sure a purchase attempt doesn't happen\r\n        return if (lastPurchaseValidation == null || Date().time - lastPurchaseValidation.time > 5000) {\r\n            return process { apiService.validatePurchase(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "723",
  "methodName" : "validatePurchase",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/16",
  "prompt" : "import java.util.Date\nimport okhttp3.Request\nimport com.habitrpg.common.habitica.models.PurchaseValidationResult\nimport com.habitrpg.common.habitica.models.PurchaseValidationRequest\nimport com.habitrpg.android.habitica.R\noverride suspend fun validatePurchase(request: PurchaseValidationRequest): PurchaseValidationResult? {\r\n        // make sure a purchase attempt doesn't happen\r\n        return if (lastPurchaseValidation == null || Date().time - lastPurchaseValidation.time > 5000) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "784",
  "ground_truth" : "            process { apiService.getUserChallenges(page, memberOnly) }\r\n        } else {\r\n            process { apiService.getUserChallenges(page) }\r\n        }\r\n    }",
  "context" : "override suspend fun getUserChallenges(page: Int, memberOnly: Boolean): List<Challenge>? {\r\n        return if (memberOnly) {\r\n            process { apiService.getUserChallenges(page, memberOnly) }\r\n        } else {\r\n            process { apiService.getUserChallenges(page) }\r\n        }\r\n    }",
  "start_lineno" : "778",
  "methodName" : "getUserChallenges",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/17",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun getUserChallenges(page: Int, memberOnly: Boolean): List<Challenge>? {\r\n        return if (memberOnly) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "856",
  "ground_truth" : "        updateObject[\"password\"] = password\r\n        return process { apiService.resetAccount(updateObject) }\r\n    }",
  "context" : "override suspend fun resetAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"password\"] = password\r\n        return process { apiService.resetAccount(updateObject) }\r\n    }",
  "start_lineno" : "852",
  "methodName" : "resetAccount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/18",
  "prompt" : "override suspend fun resetAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "862",
  "ground_truth" : "        updateObject[\"password\"] = password\r\n        return process { apiService.deleteAccount(updateObject) }\r\n    }",
  "context" : "override suspend fun deleteAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"password\"] = password\r\n        return process { apiService.deleteAccount(updateObject) }\r\n    }",
  "start_lineno" : "858",
  "methodName" : "deleteAccount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/19",
  "prompt" : "override suspend fun deleteAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "872",
  "ground_truth" : "        data[\"email\"] = email\r\n        return process { apiService.sendPasswordResetEmail(data) }\r\n    }",
  "context" : "override suspend fun sendPasswordResetEmail(email: String): Void? {\r\n        val data = HashMap<String, String>()\r\n        data[\"email\"] = email\r\n        return process { apiService.sendPasswordResetEmail(data) }\r\n    }",
  "start_lineno" : "868",
  "methodName" : "sendPasswordResetEmail",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/20",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride suspend fun sendPasswordResetEmail(email: String): Void? {\r\n        val data = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "879",
  "ground_truth" : "        updateObject[\"password\"] = password\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }",
  "context" : "override suspend fun updateLoginName(newLoginName: String, password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"username\"] = newLoginName\r\n        updateObject[\"password\"] = password\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }",
  "start_lineno" : "874",
  "methodName" : "updateLoginName",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/21",
  "prompt" : "override suspend fun updateLoginName(newLoginName: String, password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"username\"] = newLoginName\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "885",
  "ground_truth" : "        updateObject[\"username\"] = newLoginName\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }",
  "context" : "override suspend fun updateUsername(newLoginName: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"username\"] = newLoginName\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }",
  "start_lineno" : "881",
  "methodName" : "updateUsername",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/22",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun updateUsername(newLoginName: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "891",
  "ground_truth" : "        updateObject[\"username\"] = username\r\n        return process { this.apiService.verifyUsername(updateObject) }\r\n    }",
  "context" : "override suspend fun verifyUsername(username: String): VerifyUsernameResponse? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"username\"] = username\r\n        return process { this.apiService.verifyUsername(updateObject) }\r\n    }",
  "start_lineno" : "887",
  "methodName" : "verifyUsername",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/23",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.VerifyUsernameResponse\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun verifyUsername(username: String): VerifyUsernameResponse? {\r\n        val updateObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "900",
  "ground_truth" : "        if (password.isNotBlank()) {\r\n            updateObject[\"password\"] = password\r\n        }\r\n        return process { apiService.updateEmail(updateObject) }\r\n    }",
  "context" : "override suspend fun updateEmail(newEmail: String, password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"newEmail\"] = newEmail\r\n        if (password.isNotBlank()) {\r\n            updateObject[\"password\"] = password\r\n        }\r\n        return process { apiService.updateEmail(updateObject) }\r\n    }",
  "start_lineno" : "893",
  "methodName" : "updateEmail",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/24",
  "prompt" : "override suspend fun updateEmail(newEmail: String, password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"newEmail\"] = newEmail\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "912",
  "ground_truth" : "        updateObject[\"password\"] = oldPassword\r\n        updateObject[\"newPassword\"] = newPassword\r\n        updateObject[\"confirmPassword\"] = newPasswordConfirmation\r\n        return process { apiService.updatePassword(updateObject) }\r\n    }",
  "context" : "override suspend fun updatePassword(\r\n        oldPassword: String,\r\n        newPassword: String,\r\n        newPasswordConfirmation: String\r\n    ): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"password\"] = oldPassword\r\n        updateObject[\"newPassword\"] = newPassword\r\n        updateObject[\"confirmPassword\"] = newPasswordConfirmation\r\n        return process { apiService.updatePassword(updateObject) }\r\n    }",
  "start_lineno" : "902",
  "methodName" : "updatePassword",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/25",
  "prompt" : "override suspend fun updatePassword(\r\n        oldPassword: String,\r\n        newPassword: String,\r\n        newPasswordConfirmation: String\r\n    ): Void? {\r\n        val updateObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "927",
  "ground_truth" : "                    Pair(\"gemAmount\", amount)\r\n                )\r\n            )\r\n        }\r\n    }",
  "context" : "override suspend fun transferGems(giftedID: String, amount: Int): Void? {\r\n        return process {\r\n            apiService.transferGems(\r\n                mapOf(\r\n                    Pair(\"toUserId\", giftedID),\r\n                    Pair(\"gemAmount\", amount)\r\n                )\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "918",
  "methodName" : "transferGems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/26",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun transferGems(giftedID: String, amount: Int): Void? {\r\n        return process {\r\n            apiService.transferGems(\r\n                mapOf(\r\n                    Pair(\"toUserId\", giftedID),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var retrofitAdapter Retrofit\nvar apiService ApiService\nvar languageCode String?\nvar lastAPICallURL String?\nvar erroredRequestCount\nval lastSubscribeCall Date?\nval lastPurchaseValidation Date?",
  "app_type" : "life",
  "end_lineno" : "959",
  "ground_truth" : "        stats[\"con\"] = constitution\r\n        stats[\"per\"] = perception\r\n        body[\"stats\"] = stats\r\n        return process { apiService.bulkAllocatePoints(body) }\r\n    }",
  "context" : "override suspend fun bulkAllocatePoints(\r\n        strength: Int,\r\n        intelligence: Int,\r\n        constitution: Int,\r\n        perception: Int\r\n    ): Stats? {\r\n        val body = HashMap<String, Map<String, Int>>()\r\n        val stats = HashMap<String, Int>()\r\n        stats[\"str\"] = strength\r\n        stats[\"int\"] = intelligence\r\n        stats[\"con\"] = constitution\r\n        stats[\"per\"] = perception\r\n        body[\"stats\"] = stats\r\n        return process { apiService.bulkAllocatePoints(body) }\r\n    }",
  "start_lineno" : "945",
  "methodName" : "bulkAllocatePoints",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt",
  "task_id" : "habitica-android/27",
  "prompt" : "import com.habitrpg.android.habitica.models.user.Stats\noverride suspend fun bulkAllocatePoints(\r\n        strength: Int,\r\n        intelligence: Int,\r\n        constitution: Int,\r\n        perception: Int\r\n    ): Stats? {\r\n        val body = HashMap<String, Map<String, Int>>()\r\n        val stats = HashMap<String, Int>()\r\n        stats[\"str\"] = strength\r\n        stats[\"int\"] = intelligence\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        localRepository.save(challenge)\r\n        return challenge\r\n    }",
  "context" : "override suspend fun retrieveChallenge(challengeID: String): Challenge? {\r\n        val challenge = apiClient.getChallenge(challengeID) ?: return null\r\n        localRepository.save(challenge)\r\n        return challenge\r\n    }",
  "start_lineno" : "42",
  "methodName" : "retrieveChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/28",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallenge(challengeID: String): Challenge? {\r\n        val challenge = apiClient.getChallenge(challengeID) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "            }\r\n            localRepository.save(taskList)\r\n        }\r\n        return tasks\r\n    }",
  "context" : "override suspend fun retrieveChallengeTasks(challengeID: String): TaskList? {\r\n        val tasks = apiClient.getChallengeTasks(challengeID)\r\n        if (tasks != null) {\r\n            val taskList = tasks.tasks.values.toList()\r\n            taskList.forEach {\r\n                it.ownerID = challengeID\r\n            }\r\n            localRepository.save(taskList)\r\n        }\r\n        return tasks\r\n    }",
  "start_lineno" : "48",
  "methodName" : "retrieveChallengeTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/29",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallengeTasks(challengeID: String): TaskList? {\r\n        val tasks = apiClient.getChallengeTasks(challengeID)\r\n        if (tasks != null) {\r\n            val taskList = tasks.tasks.values.toList()\r\n            taskList.forEach {\r\n                it.ownerID = challengeID\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "            addedTaskList.count() > 1 -> apiClient.createChallengeTasks(challenge.id ?: \"\", addedTaskList)\r\n        }\r\n    }",
  "context" : "private suspend fun addChallengeTasks(challenge: Challenge, addedTaskList: List<Task>) {\r\n        when {\r\n            addedTaskList.count() == 1 -> apiClient.createChallengeTask(challenge.id ?: \"\", addedTaskList[0])\r\n            addedTaskList.count() > 1 -> apiClient.createChallengeTasks(challenge.id ?: \"\", addedTaskList)\r\n        }\r\n    }",
  "start_lineno" : "79",
  "methodName" : "addChallengeTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/30",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate suspend fun addChallengeTasks(challenge: Challenge, addedTaskList: List<Task>) {\r\n        when {\r\n            addedTaskList.count() == 1 -> apiClient.createChallengeTask(challenge.id ?: \"\", addedTaskList[0])\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "        if (createdChallenge != null) {\r\n            addChallengeTasks(createdChallenge, taskList)\r\n        }\r\n        return createdChallenge\r\n    }",
  "context" : "override suspend fun createChallenge(challenge: Challenge, taskList: List<Task>): Challenge? {\r\n        challenge.tasksOrder = getTaskOrders(taskList)\r\n\r\n        val createdChallenge = apiClient.createChallenge(challenge)\r\n        if (createdChallenge != null) {\r\n            addChallengeTasks(createdChallenge, taskList)\r\n        }\r\n        return createdChallenge\r\n    }",
  "start_lineno" : "86",
  "methodName" : "createChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/31",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun createChallenge(challenge: Challenge, taskList: List<Task>): Challenge? {\r\n        challenge.tasksOrder = getTaskOrders(taskList)\r\n\r\n        val createdChallenge = apiClient.createChallenge(challenge)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "        if (challenges != null) {\r\n            localRepository.saveChallenges(challenges, page == 0, memberOnly, currentUserID)\r\n        }\r\n        return challenges\r\n    }",
  "context" : "override suspend fun retrieveChallenges(page: Int, memberOnly: Boolean): List<Challenge>? {\r\n        val challenges = apiClient.getUserChallenges(page, memberOnly)\r\n        if (challenges != null) {\r\n            localRepository.saveChallenges(challenges, page == 0, memberOnly, currentUserID)\r\n        }\r\n        return challenges\r\n    }",
  "start_lineno" : "137",
  "methodName" : "retrieveChallenges",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/32",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallenges(page: Int, memberOnly: Boolean): List<Challenge>? {\r\n        val challenges = apiClient.getUserChallenges(page, memberOnly)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        localRepository.setParticipating(currentUserID, challenge.id ?: \"\", false)\r\n        return null\r\n    }",
  "context" : "override suspend fun leaveChallenge(challenge: Challenge, keepTasks: String): Void? {\r\n        apiClient.leaveChallenge(challenge.id ?: \"\", LeaveChallengeBody(keepTasks))\r\n        localRepository.setParticipating(currentUserID, challenge.id ?: \"\", false)\r\n        return null\r\n    }",
  "start_lineno" : "145",
  "methodName" : "leaveChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/33",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.models.LeaveChallengeBody\noverride suspend fun leaveChallenge(challenge: Challenge, keepTasks: String): Void? {\r\n        apiClient.leaveChallenge(challenge.id ?: \"\", LeaveChallengeBody(keepTasks))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "        localRepository.setParticipating(currentUserID, returnedChallenge.id ?: \"\", true)\r\n        return returnedChallenge\r\n    }",
  "context" : "override suspend fun joinChallenge(challenge: Challenge): Challenge? {\r\n        val returnedChallenge = apiClient.joinChallenge(challenge.id ?: \"\") ?: return null\r\n        localRepository.setParticipating(currentUserID, returnedChallenge.id ?: \"\", true)\r\n        return returnedChallenge\r\n    }",
  "start_lineno" : "151",
  "methodName" : "joinChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt",
  "task_id" : "habitica-android/34",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun joinChallenge(challenge: Challenge): Challenge? {\r\n        val returnedChallenge = apiClient.joinChallenge(challenge.id ?: \"\") ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mysteryItem\nvar lastContentSync\nvar lastWorldStateSync",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "            localRepository.saveContent(content)\r\n            return content\r\n        }\r\n        return null\r\n    }",
  "context" : "override suspend fun retrieveContent(forced: Boolean): ContentResult? {\r\n        val now = Date().time\r\n        if (forced || now - this.lastContentSync > 300000) {\r\n            val content = apiClient.getContent() ?: return null\r\n            lastContentSync = now\r\n            content.special = RealmList()\r\n            content.special.add(mysteryItem)\r\n            localRepository.saveContent(content)\r\n            return content\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "28",
  "methodName" : "retrieveContent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ContentRepositoryImpl.kt",
  "task_id" : "habitica-android/35",
  "prompt" : "import java.util.Date\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.ContentResult\noverride suspend fun retrieveContent(forced: Boolean): ContentResult? {\r\n        val now = Date().time\r\n        if (forced || now - this.lastContentSync > 300000) {\r\n            val content = apiClient.getContent() ?: return null\r\n            lastContentSync = now\r\n            content.special = RealmList()\r\n            content.special.add(mysteryItem)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "        if (rewards != null) {\r\n            localRepository.saveInAppRewards(rewards)\r\n        }\r\n        return rewards\r\n    }",
  "context" : "override suspend fun retrieveInAppRewards(): List<ShopItem>? {\r\n        val rewards = apiClient.retrieveInAppRewards()\r\n        if (rewards != null) {\r\n            localRepository.saveInAppRewards(rewards)\r\n        }\r\n        return rewards\r\n    }",
  "start_lineno" : "59",
  "methodName" : "retrieveInAppRewards",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/36",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.shops.Shop\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun retrieveInAppRewards(): List<ShopItem>? {\r\n        val rewards = apiClient.retrieveInAppRewards()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "108",
  "ground_truth" : "            liveEquipment?.owned = true\r\n        }\r\n        localRepository.decrementMysteryItemCount(user)\r\n        return equipment\r\n    }",
  "context" : "override suspend fun openMysteryItem(user: User?): Equipment? {\r\n        val item = apiClient.openMysteryItem()\r\n        val equipment = localRepository.getEquipment(item?.key ?: \"\").firstOrNull() ?: return null\r\n        val liveEquipment = localRepository.getLiveObject(equipment)\r\n        localRepository.executeTransaction {\r\n            liveEquipment?.owned = true\r\n        }\r\n        localRepository.decrementMysteryItemCount(user)\r\n        return equipment\r\n    }",
  "start_lineno" : "99",
  "methodName" : "openMysteryItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/37",
  "prompt" : "import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride suspend fun openMysteryItem(user: User?): Equipment? {\r\n        val item = apiClient.openMysteryItem()\r\n        val equipment = localRepository.getEquipment(item?.key ?: \"\").firstOrNull() ?: return null\r\n        val liveEquipment = localRepository.getLiveObject(equipment)\r\n        localRepository.executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        val item = localRepository.getOwnedItem(currentUserID, type, key, true).firstOrNull() ?: return null\r\n        return sellItem(item)\r\n    }",
  "context" : "override suspend fun sellItem(type: String, key: String): User? {\r\n        val item = localRepository.getOwnedItem(currentUserID, type, key, true).firstOrNull() ?: return null\r\n        return sellItem(item)\r\n    }",
  "start_lineno" : "146",
  "methodName" : "sellItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/38",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun sellItem(type: String, key: String): User? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "154",
  "ground_truth" : "        val itemData = localRepository.getItem(item.itemType ?: \"\", item.key ?: \"\").firstOrNull() ?: return null\r\n        return sellItem(itemData, item)\r\n    }",
  "context" : "override suspend fun sellItem(item: OwnedItem): User? {\r\n        val itemData = localRepository.getItem(item.itemType ?: \"\", item.key ?: \"\").firstOrNull() ?: return null\r\n        return sellItem(itemData, item)\r\n    }",
  "start_lineno" : "151",
  "methodName" : "sellItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/39",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun sellItem(item: OwnedItem): User? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "            liveItem?.numberOwned = (liveItem?.numberOwned ?: 0) - 1\r\n        }\r\n        val user = apiClient.sellItem(item.type, item.key) ?: return null\r\n        return localRepository.soldItem(currentUserID, user)\r\n    }",
  "context" : "private suspend fun sellItem(item: Item, ownedItem: OwnedItem): User? {\r\n        localRepository.executeTransaction {\r\n            val liveItem = localRepository.getLiveObject(ownedItem)\r\n            liveItem?.numberOwned = (liveItem?.numberOwned ?: 0) - 1\r\n        }\r\n        val user = apiClient.sellItem(item.type, item.key) ?: return null\r\n        return localRepository.soldItem(currentUserID, user)\r\n    }",
  "start_lineno" : "164",
  "methodName" : "sellItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/40",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nprivate suspend fun sellItem(item: Item, ownedItem: OwnedItem): User? {\r\n        localRepository.executeTransaction {\r\n            val liveItem = localRepository.getLiveObject(ownedItem)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "        localRepository.feedPet(food.key, pet.key, feedResponse.value ?: 0, currentUserID)\r\n        return feedResponse\r\n    }",
  "context" : "override suspend fun feedPet(pet: Pet, food: Food): FeedResponse? {\r\n        val feedResponse = apiClient.feedPet(pet.key, food.key) ?: return null\r\n        localRepository.feedPet(food.key, pet.key, feedResponse.value ?: 0, currentUserID)\r\n        return feedResponse\r\n    }",
  "start_lineno" : "220",
  "methodName" : "feedPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/41",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\noverride suspend fun feedPet(pet: Pet, food: Food): FeedResponse? {\r\n        val feedResponse = apiClient.feedPet(pet.key, food.key) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "237",
  "ground_truth" : "        if (!appConfigManager.enableLocalChanges()) {\r\n            successFunction()\r\n        }\r\n        return items\r\n    }",
  "context" : "override suspend fun hatchPet(egg: Egg, hatchingPotion: HatchingPotion, successFunction: () -> Unit): Items? {\r\n        if (appConfigManager.enableLocalChanges()) {\r\n            localRepository.hatchPet(egg.key, hatchingPotion.key, currentUserID)\r\n            successFunction()\r\n        }\r\n        val items = apiClient.hatchPet(egg.key, hatchingPotion.key) ?: return null\r\n        localRepository.save(items, currentUserID)\r\n        if (!appConfigManager.enableLocalChanges()) {\r\n            successFunction()\r\n        }\r\n        return items\r\n    }",
  "start_lineno" : "226",
  "methodName" : "hatchPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/42",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\noverride suspend fun hatchPet(egg: Egg, hatchingPotion: HatchingPotion, successFunction: () -> Unit): Items? {\r\n        if (appConfigManager.enableLocalChanges()) {\r\n            localRepository.hatchPet(egg.key, hatchingPotion.key, currentUserID)\r\n            successFunction()\r\n        }\r\n        val items = apiClient.hatchPet(egg.key, hatchingPotion.key) ?: return null\r\n        localRepository.save(items, currentUserID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "243",
  "ground_truth" : "        localRepository.changeOwnedCount(\"quests\", quest.key, currentUserID, -1)\r\n        return newQuest\r\n    }",
  "context" : "override suspend fun inviteToQuest(quest: QuestContent): Quest? {\r\n        val newQuest = apiClient.inviteToQuest(\"party\", quest.key)\r\n        localRepository.changeOwnedCount(\"quests\", quest.key, currentUserID, -1)\r\n        return newQuest\r\n    }",
  "start_lineno" : "239",
  "methodName" : "inviteToQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/43",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.QuestContent\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun inviteToQuest(quest: QuestContent): Quest? {\r\n        val newQuest = apiClient.inviteToQuest(\"party\", quest.key)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "310",
  "ground_truth" : "                user?.purchased?.plan?.gemsBought = purchaseQuantity + (user?.purchased?.plan?.gemsBought ?: 0)\r\n            }\r\n        }\r\n        return response\r\n    }",
  "context" : "override suspend fun purchaseItem(purchaseType: String, key: String, purchaseQuantity: Int): Void? {\r\n        val response = apiClient.purchaseItem(purchaseType, key, purchaseQuantity)\r\n        if (key == \"gem\") {\r\n            val user = localRepository.getLiveUser(currentUserID)\r\n            localRepository.executeTransaction {\r\n                user?.purchased?.plan?.gemsBought = purchaseQuantity + (user?.purchased?.plan?.gemsBought ?: 0)\r\n            }\r\n        }\r\n        return response\r\n    }",
  "start_lineno" : "301",
  "methodName" : "purchaseItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/44",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun purchaseItem(purchaseType: String, key: String, purchaseQuantity: Int): Void? {\r\n        val response = apiClient.purchaseItem(purchaseType, key, purchaseQuantity)\r\n        if (key == \"gem\") {\r\n            val user = localRepository.getLiveUser(currentUserID)\r\n            localRepository.executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "317",
  "ground_truth" : "        }\r\n        return retrieveInAppRewards()\r\n    }",
  "context" : "override suspend fun togglePinnedItem(item: ShopItem): List<ShopItem>? {\r\n        if (item.isValid) {\r\n            apiClient.togglePinnedItem(item.pinType ?: \"\", item.path ?: \"\")\r\n        }\r\n        return retrieveInAppRewards()\r\n    }",
  "start_lineno" : "312",
  "methodName" : "togglePinnedItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt",
  "task_id" : "habitica-android/45",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.shops.Shop\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun togglePinnedItem(item: ShopItem): List<ShopItem>? {\r\n        if (item.isValid) {\r\n            apiClient.togglePinnedItem(item.pinType ?: \"\", item.path ?: \"\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val wheelchairs List<SetupCustomization>\nval glasses List<SetupCustomization>\nval flowers List<SetupCustomization>\nval hairColors List<SetupCustomization>\nval sizes List<SetupCustomization>\nval skins List<SetupCustomization>",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "            context.resources.getIdentifier(resName, \"drawable\", context.packageName)\r\n        } catch (e: Exception) {\r\n            -1\r\n        }\r\n    }",
  "context" : "private fun getResId(resName: String): Int {\r\n        return try {\r\n            context.resources.getIdentifier(resName, \"drawable\", context.packageName)\r\n        } catch (e: Exception) {\r\n            -1\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "getResId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SetupCustomizationRepositoryImpl.kt",
  "task_id" : "habitica-android/46",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun getResId(resName: String): Int {\r\n        return try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        group?.leaderID = userID\r\n        return group?.let { apiClient.updateGroup(groupID, it) }\r\n    }",
  "context" : "override suspend fun transferGroupOwnership(groupID: String, userID: String): Group? {\r\n        val group = localRepository.getGroup(groupID).first()?.let { localRepository.getUnmanagedCopy(it) }\r\n        group?.leaderID = userID\r\n        return group?.let { apiClient.updateGroup(groupID, it) }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "transferGroupOwnership",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/47",
  "prompt" : "import kotlinx.coroutines.flow.first\nimport com.habitrpg.android.habitica.models.social.Group\noverride suspend fun transferGroupOwnership(groupID: String, userID: String): Group? {\r\n        val group = localRepository.getGroup(groupID).first()?.let { localRepository.getUnmanagedCopy(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        apiClient.removeMemberFromGroup(groupID, userID)\r\n        return retrievePartyMembers(groupID, true)\r\n    }",
  "context" : "override suspend fun removeMemberFromGroup(groupID: String, userID: String): List<Member>? {\r\n        apiClient.removeMemberFromGroup(groupID, userID)\r\n        return retrievePartyMembers(groupID, true)\r\n    }",
  "start_lineno" : "39",
  "methodName" : "removeMemberFromGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/48",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun removeMemberFromGroup(groupID: String, userID: String): List<Member>? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        messages?.forEach { it.groupId = groupId }\r\n        return messages\r\n    }",
  "context" : "override suspend fun retrieveGroupChat(groupId: String): List<ChatMessage>? {\r\n        val messages = apiClient.listGroupChat(groupId)\r\n        messages?.forEach { it.groupId = groupId }\r\n        return messages\r\n    }",
  "start_lineno" : "69",
  "methodName" : "retrieveGroupChat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/49",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun retrieveGroupChat(groupId: String): List<ChatMessage>? {\r\n        val messages = apiClient.listGroupChat(groupId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        val message = apiClient.likeMessage(chatMessage.groupId ?: \"\", chatMessage.id)\r\n        message?.groupId = chatMessage.groupId\r\n        message?.let { localRepository.save(it) }\r\n        return null\r\n    }",
  "context" : "override suspend fun likeMessage(chatMessage: ChatMessage): ChatMessage? {\r\n        if (chatMessage.id.isBlank()) {\r\n            return null\r\n        }\r\n        val liked = chatMessage.userLikesMessage(currentUserID)\r\n        localRepository.likeMessage(chatMessage, currentUserID, !liked)\r\n        val message = apiClient.likeMessage(chatMessage.groupId ?: \"\", chatMessage.id)\r\n        message?.groupId = chatMessage.groupId\r\n        message?.let { localRepository.save(it) }\r\n        return null\r\n    }",
  "start_lineno" : "103",
  "methodName" : "likeMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/50",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun likeMessage(chatMessage: ChatMessage): ChatMessage? {\r\n        if (chatMessage.id.isBlank()) {\r\n            return null\r\n        }\r\n        val liked = chatMessage.userLikesMessage(currentUserID)\r\n        localRepository.likeMessage(chatMessage, currentUserID, !liked)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "            apiClient.deleteMessage(chatMessage.groupId ?: \"\", chatMessage.id)\r\n        }\r\n        localRepository.deleteMessage(chatMessage.id)\r\n        return null\r\n    }",
  "context" : "override suspend fun deleteMessage(chatMessage: ChatMessage): Void? {\r\n        if (chatMessage.isInboxMessage) {\r\n            apiClient.deleteInboxMessage(chatMessage.id)\r\n        } else {\r\n            apiClient.deleteMessage(chatMessage.groupId ?: \"\", chatMessage.id)\r\n        }\r\n        localRepository.deleteMessage(chatMessage.id)\r\n        return null\r\n    }",
  "start_lineno" : "115",
  "methodName" : "deleteMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/51",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun deleteMessage(chatMessage: ChatMessage): Void? {\r\n        if (chatMessage.isInboxMessage) {\r\n            apiClient.deleteInboxMessage(chatMessage.id)\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        result?.message?.groupId = groupId\r\n        return result\r\n    }",
  "context" : "override suspend fun postGroupChat(groupId: String, messageObject: HashMap<String, String>): PostChatMessageResult? {\r\n        val result = apiClient.postGroupChat(groupId, messageObject)\r\n        result?.message?.groupId = groupId\r\n        return result\r\n    }",
  "start_lineno" : "125",
  "methodName" : "postGroupChat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/52",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.models.responses.PostChatMessageResult\noverride suspend fun postGroupChat(groupId: String, messageObject: HashMap<String, String>): PostChatMessageResult? {\r\n        val result = apiClient.postGroupChat(groupId, messageObject)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        messageObject[\"message\"] = message\r\n        return postGroupChat(groupId, messageObject)\r\n    }",
  "context" : "override suspend fun postGroupChat(groupId: String, message: String): PostChatMessageResult? {\r\n        val messageObject = HashMap<String, String>()\r\n        messageObject[\"message\"] = message\r\n        return postGroupChat(groupId, messageObject)\r\n    }",
  "start_lineno" : "131",
  "methodName" : "postGroupChat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/53",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.models.responses.PostChatMessageResult\noverride suspend fun postGroupChat(groupId: String, message: String): PostChatMessageResult? {\r\n        val messageObject = HashMap<String, String>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "        retrieveGroupChat(id)\r\n        return group\r\n    }",
  "context" : "override suspend fun retrieveGroup(id: String): Group? {\r\n        val group = apiClient.getGroup(id)\r\n        group?.let { localRepository.saveGroup(it) }\r\n        retrieveGroupChat(id)\r\n        return group\r\n    }",
  "start_lineno" : "137",
  "methodName" : "retrieveGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/54",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun retrieveGroup(id: String): Group? {\r\n        val group = apiClient.getGroup(id)\r\n        group?.let { localRepository.saveGroup(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        }\r\n        return localRepository.getGroup(id)\r\n    }",
  "context" : "override fun getGroup(id: String?): Flow<Group?> {\r\n        if (id?.isNotBlank() != true) {\r\n            return emptyFlow()\r\n        }\r\n        return localRepository.getGroup(id)\r\n    }",
  "start_lineno" : "144",
  "methodName" : "getGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/55",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun getGroup(id: String?): Flow<Group?> {\r\n        if (id?.isNotBlank() != true) {\r\n            return emptyFlow()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "\r\n        apiClient.leaveGroup(id, if (keepChallenges) \"remain-in-challenges\" else \"leave-challenges\")\r\n        localRepository.updateMembership(currentUserID, id, false)\r\n        return localRepository.getGroup(id).firstOrNull()\r\n    }",
  "context" : "override suspend fun leaveGroup(id: String?, keepChallenges: Boolean): Group? {\r\n        if (id?.isNotBlank() != true) {\r\n            return null\r\n        }\r\n\r\n        apiClient.leaveGroup(id, if (keepChallenges) \"remain-in-challenges\" else \"leave-challenges\")\r\n        localRepository.updateMembership(currentUserID, id, false)\r\n        return localRepository.getGroup(id).firstOrNull()\r\n    }",
  "start_lineno" : "151",
  "methodName" : "leaveGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/56",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun leaveGroup(id: String?, keepChallenges: Boolean): Group? {\r\n        if (id?.isNotBlank() != true) {\r\n            return null\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "            localRepository.updateMembership(currentUserID, id, true)\r\n            localRepository.save(group)\r\n        }\r\n        return group\r\n    }",
  "context" : "override suspend fun joinGroup(id: String?): Group? {\r\n        if (id?.isNotBlank() != true) {\r\n            return null\r\n        }\r\n        val group = apiClient.joinGroup(id)\r\n        group?.let {\r\n            localRepository.updateMembership(currentUserID, id, true)\r\n            localRepository.save(group)\r\n        }\r\n        return group\r\n    }",
  "start_lineno" : "161",
  "methodName" : "joinGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/57",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun joinGroup(id: String?): Group? {\r\n        if (id?.isNotBlank() != true) {\r\n            return null\r\n        }\r\n        val group = apiClient.joinGroup(id)\r\n        group?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "        group.privacy = privacy\r\n        val savedGroup = apiClient.createGroup(group)\r\n        savedGroup?.let { localRepository.save(it) }\r\n        return savedGroup\r\n    }",
  "context" : "override suspend fun createGroup(\r\n        name: String?,\r\n        description: String?,\r\n        leader: String?,\r\n        type: String?,\r\n        privacy: String?,\r\n        leaderCreateChallenge: Boolean?\r\n    ): Group? {\r\n        val group = Group()\r\n        group.name = name\r\n        group.description = description\r\n        group.type = type\r\n        group.leaderID = leader\r\n        group.privacy = privacy\r\n        val savedGroup = apiClient.createGroup(group)\r\n        savedGroup?.let { localRepository.save(it) }\r\n        return savedGroup\r\n    }",
  "start_lineno" : "173",
  "methodName" : "createGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/58",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun createGroup(\r\n        name: String?,\r\n        description: String?,\r\n        leader: String?,\r\n        type: String?,\r\n        privacy: String?,\r\n        leaderCreateChallenge: Boolean?\r\n    ): Group? {\r\n        val group = Group()\r\n        group.name = name\r\n        group.description = description\r\n        group.type = type\r\n        group.leaderID = leader\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "209",
  "ground_truth" : "        copiedGroup.leaderID = leader\r\n        copiedGroup.leaderOnlyChallenges = leaderCreateChallenge ?: false\r\n        localRepository.save(copiedGroup)\r\n        return apiClient.updateGroup(copiedGroup.id, copiedGroup)\r\n    }",
  "context" : "override suspend fun updateGroup(\r\n        group: Group?,\r\n        name: String?,\r\n        description: String?,\r\n        leader: String?,\r\n        leaderCreateChallenge: Boolean?\r\n    ): Group? {\r\n        if (group == null) {\r\n            return null\r\n        }\r\n        val copiedGroup = localRepository.getUnmanagedCopy(group)\r\n        copiedGroup.name = name\r\n        copiedGroup.description = description\r\n        copiedGroup.leaderID = leader\r\n        copiedGroup.leaderOnlyChallenges = leaderCreateChallenge ?: false\r\n        localRepository.save(copiedGroup)\r\n        return apiClient.updateGroup(copiedGroup.id, copiedGroup)\r\n    }",
  "start_lineno" : "192",
  "methodName" : "updateGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/59",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun updateGroup(\r\n        group: Group?,\r\n        name: String?,\r\n        description: String?,\r\n        leader: String?,\r\n        leaderCreateChallenge: Boolean?\r\n    ): Group? {\r\n        if (group == null) {\r\n            return null\r\n        }\r\n        val copiedGroup = localRepository.getUnmanagedCopy(group)\r\n        copiedGroup.name = name\r\n        copiedGroup.description = description\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "222",
  "ground_truth" : "            it.isInboxMessage = true\r\n        }\r\n        localRepository.saveInboxMessages(currentUserID, uuid, messages, page)\r\n        return messages\r\n    }",
  "context" : "override suspend fun retrieveInboxMessages(uuid: String, page: Int): List<ChatMessage>? {\r\n        val messages = apiClient.retrieveInboxMessages(uuid, page) ?: return null\r\n        messages.forEach {\r\n            it.isInboxMessage = true\r\n        }\r\n        localRepository.saveInboxMessages(currentUserID, uuid, messages, page)\r\n        return messages\r\n    }",
  "start_lineno" : "215",
  "methodName" : "retrieveInboxMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/60",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun retrieveInboxMessages(uuid: String, page: Int): List<ChatMessage>? {\r\n        val messages = apiClient.retrieveInboxMessages(uuid, page) ?: return null\r\n        messages.forEach {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "        localRepository.saveInboxConversations(currentUserID, conversations)\r\n        return conversations\r\n    }",
  "context" : "override suspend fun retrieveInboxConversations(): List<InboxConversation>? {\r\n        val conversations = apiClient.retrieveInboxConversations() ?: return null\r\n        localRepository.saveInboxConversations(currentUserID, conversations)\r\n        return conversations\r\n    }",
  "start_lineno" : "224",
  "methodName" : "retrieveInboxConversations",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/61",
  "prompt" : "import com.habitrpg.android.habitica.models.social.InboxConversation\noverride suspend fun retrieveInboxConversations(): List<InboxConversation>? {\r\n        val conversations = apiClient.retrieveInboxConversations() ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "233",
  "ground_truth" : "        apiClient.postPrivateMessage(messageObject)\r\n        return retrieveInboxMessages(recipientId, 0)\r\n    }",
  "context" : "override suspend fun postPrivateMessage(recipientId: String, messageObject: HashMap<String, String>): List<ChatMessage>? {\r\n        apiClient.postPrivateMessage(messageObject)\r\n        return retrieveInboxMessages(recipientId, 0)\r\n    }",
  "start_lineno" : "230",
  "methodName" : "postPrivateMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/62",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun postPrivateMessage(recipientId: String, messageObject: HashMap<String, String>): List<ChatMessage>? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "240",
  "ground_truth" : "        messageObject[\"toUserId\"] = recipientId\r\n        return postPrivateMessage(recipientId, messageObject)\r\n    }",
  "context" : "override suspend fun postPrivateMessage(recipientId: String, message: String): List<ChatMessage>? {\r\n        val messageObject = HashMap<String, String>()\r\n        messageObject[\"message\"] = message\r\n        messageObject[\"toUserId\"] = recipientId\r\n        return postPrivateMessage(recipientId, messageObject)\r\n    }",
  "start_lineno" : "235",
  "methodName" : "postPrivateMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/63",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun postPrivateMessage(recipientId: String, message: String): List<ChatMessage>? {\r\n        val messageObject = HashMap<String, String>()\r\n        messageObject[\"message\"] = message\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "249",
  "ground_truth" : "        members?.let { localRepository.savePartyMembers(id, it) }\r\n        return members\r\n    }",
  "context" : "override suspend fun retrievePartyMembers(id: String, includeAllPublicFields: Boolean): List<Member>? {\r\n        val members = apiClient.getGroupMembers(id, includeAllPublicFields)\r\n        members?.let { localRepository.savePartyMembers(id, it) }\r\n        return members\r\n    }",
  "start_lineno" : "245",
  "methodName" : "retrievePartyMembers",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/64",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun retrievePartyMembers(id: String, includeAllPublicFields: Boolean): List<Member>? {\r\n        val members = apiClient.getGroupMembers(id, includeAllPublicFields)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "268",
  "ground_truth" : "                    apiClient.getMemberWithUsername(userId)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override suspend fun retrieveMember(userId: String?, fromHall: Boolean): Member? {\r\n        return if (userId == null) {\r\n            null\r\n        } else {\r\n            if (fromHall) {\r\n                apiClient.getHallMember(userId)\r\n            } else {\r\n                try {\r\n                    val uuid = UUID.fromString(userId).toString()\r\n                    apiClient.getMember(uuid)\r\n                } catch (_: IllegalArgumentException) {\r\n                    apiClient.getMemberWithUsername(userId)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "253",
  "methodName" : "retrieveMember",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/65",
  "prompt" : "import java.util.UUID\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun retrieveMember(userId: String?, fromHall: Boolean): Member? {\r\n        return if (userId == null) {\r\n            null\r\n        } else {\r\n            if (fromHall) {\r\n                apiClient.getHallMember(userId)\r\n            } else {\r\n                try {\r\n                    val uuid = UUID.fromString(userId).toString()\r\n                    apiClient.getMember(uuid)\r\n                } catch (_: IllegalArgumentException) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "283",
  "ground_truth" : "                it.inbox?.hasUserSeenInbox = true\r\n            }\r\n        }\r\n        return apiClient.markPrivateMessagesRead()\r\n    }",
  "context" : "override suspend fun markPrivateMessagesRead(user: User?) {\r\n        if (user?.isManaged == true) {\r\n            localRepository.modify(user) {\r\n                it.inbox?.hasUserSeenInbox = true\r\n            }\r\n        }\r\n        return apiClient.markPrivateMessagesRead()\r\n    }",
  "start_lineno" : "276",
  "methodName" : "markPrivateMessagesRead",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/66",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun markPrivateMessagesRead(user: User?) {\r\n        if (user?.isManaged == true) {\r\n            localRepository.modify(user) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "312",
  "ground_truth" : "        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }",
  "context" : "override suspend fun acceptQuest(user: User?, partyId: String): Void? {\r\n        apiClient.acceptQuest(partyId)\r\n        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "306",
  "methodName" : "acceptQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/67",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun acceptQuest(user: User?, partyId: String): Void? {\r\n        apiClient.acceptQuest(partyId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "320",
  "ground_truth" : "        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }",
  "context" : "override suspend fun rejectQuest(user: User?, partyId: String): Void? {\r\n        apiClient.rejectQuest(partyId)\r\n        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "314",
  "methodName" : "rejectQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/68",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun rejectQuest(user: User?, partyId: String): Void? {\r\n        apiClient.rejectQuest(partyId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "330",
  "ground_truth" : "        localRepository.removeQuest(partyId)\r\n        return null\r\n    }",
  "context" : "override suspend fun cancelQuest(partyId: String): Void? {\r\n        apiClient.cancelQuest(partyId)\r\n        localRepository.removeQuest(partyId)\r\n        return null\r\n    }",
  "start_lineno" : "326",
  "methodName" : "cancelQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/69",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun cancelQuest(partyId: String): Void? {\r\n        apiClient.cancelQuest(partyId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "336",
  "ground_truth" : "        localRepository.removeQuest(partyId)\r\n        return quest\r\n    }",
  "context" : "override suspend fun abortQuest(partyId: String): Quest? {\r\n        val quest = apiClient.abortQuest(partyId)\r\n        localRepository.removeQuest(partyId)\r\n        return quest\r\n    }",
  "start_lineno" : "332",
  "methodName" : "abortQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/70",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun abortQuest(partyId: String): Quest? {\r\n        val quest = apiClient.abortQuest(partyId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "        localRepository.rejectGroupInvitation(currentUserID, groupId)\r\n        return null\r\n    }",
  "context" : "override suspend fun rejectGroupInvite(groupId: String): Void? {\r\n        apiClient.rejectGroupInvite(groupId)\r\n        localRepository.rejectGroupInvitation(currentUserID, groupId)\r\n        return null\r\n    }",
  "start_lineno" : "338",
  "methodName" : "rejectGroupInvite",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/71",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun rejectGroupInvite(groupId: String): Void? {\r\n        apiClient.rejectGroupInvite(groupId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "348",
  "ground_truth" : "        localRepository.setQuestActivity(party, true)\r\n        return quest\r\n    }",
  "context" : "override suspend fun forceStartQuest(party: Group): Quest? {\r\n        val quest = apiClient.forceStartQuest(party.id, localRepository.getUnmanagedCopy(party))\r\n        localRepository.setQuestActivity(party, true)\r\n        return quest\r\n    }",
  "start_lineno" : "344",
  "methodName" : "forceStartQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/72",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun forceStartQuest(party: Group): Quest? {\r\n        val quest = apiClient.forceStartQuest(party.id, localRepository.getUnmanagedCopy(party))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "356",
  "ground_truth" : "            null\r\n        } else {\r\n            apiClient.getMemberAchievements(userId)\r\n        }\r\n    }",
  "context" : "override suspend fun getMemberAchievements(userId: String?): List<Achievement>? {\r\n        return if (userId == null) {\r\n            null\r\n        } else {\r\n            apiClient.getMemberAchievements(userId)\r\n        }\r\n    }",
  "start_lineno" : "350",
  "methodName" : "getMemberAchievements",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt",
  "task_id" : "habitica-android/73",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.models.Achievement\noverride suspend fun getMemberAchievements(userId: String?): List<Achievement>? {\r\n        return if (userId == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        localRepository.save(savedTag)\r\n        return savedTag\r\n    }",
  "context" : "override suspend fun createTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.createTag(tag) ?: return null\r\n        savedTag.userId = currentUserID\r\n        localRepository.save(savedTag)\r\n        return savedTag\r\n    }",
  "start_lineno" : "27",
  "methodName" : "createTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/74",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun createTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.createTag(tag) ?: return null\r\n        savedTag.userId = currentUserID\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        localRepository.save(savedTag)\r\n        return savedTag\r\n    }",
  "context" : "override suspend fun updateTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.updateTag(tag.id, tag) ?: return null\r\n        savedTag.userId = currentUserID\r\n        localRepository.save(savedTag)\r\n        return savedTag\r\n    }",
  "start_lineno" : "34",
  "methodName" : "updateTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/75",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun updateTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.updateTag(tag.id, tag) ?: return null\r\n        savedTag.userId = currentUserID\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        localRepository.deleteTag(id)\r\n        return null\r\n    }",
  "context" : "override suspend fun deleteTag(id: String): Void? {\r\n        apiClient.deleteTag(id)\r\n        localRepository.deleteTag(id)\r\n        return null\r\n    }",
  "start_lineno" : "41",
  "methodName" : "deleteTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/76",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun deleteTag(id: String): Void? {\r\n        apiClient.deleteTag(id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "            createTag(it)\r\n        }\r\n    }",
  "context" : "override suspend fun createTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r\n            createTag(it)\r\n        }\r\n    }",
  "start_lineno" : "47",
  "methodName" : "createTags",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/77",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun createTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "            updateTag(it)\r\n        }\r\n    }",
  "context" : "override suspend fun updateTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r\n            updateTag(it)\r\n        }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "updateTags",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/78",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun updateTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            deleteTag(it)\r\n        }\r\n    }",
  "context" : "override suspend fun deleteTags(tagIds: Collection<String>): List<Void> {\r\n        return tagIds.mapNotNull {\r\n            deleteTag(it)\r\n        }\r\n    }",
  "start_lineno" : "59",
  "methodName" : "deleteTags",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt",
  "task_id" : "habitica-android/79",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride suspend fun deleteTags(tagIds: Collection<String>): List<Void> {\r\n        return tagIds.mapNotNull {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "        this.localRepository.saveTasks(userId, tasksOrder, tasks)\r\n        return tasks\r\n    }",
  "context" : "override suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder): TaskList? {\r\n        val tasks = apiClient.getTasks() ?: return null\r\n        this.localRepository.saveTasks(userId, tasksOrder, tasks)\r\n        return tasks\r\n    }",
  "start_lineno" : "52",
  "methodName" : "retrieveTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/80",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder): TaskList? {\r\n        val tasks = apiClient.getTasks() ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        this.localRepository.saveCompletedTodos(userId ?: authenticationHandler.currentUserID ?: \"\", tasks.values)\r\n        return taskList\r\n    }",
  "context" : "override suspend fun retrieveCompletedTodos(userId: String?): TaskList? {\r\n        val taskList = this.apiClient.getTasks(\"completedTodos\") ?: return null\r\n        val tasks = taskList.tasks\r\n        this.localRepository.saveCompletedTodos(userId ?: authenticationHandler.currentUserID ?: \"\", tasks.values)\r\n        return taskList\r\n    }",
  "start_lineno" : "58",
  "methodName" : "retrieveCompletedTodos",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/81",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveCompletedTodos(userId: String?): TaskList? {\r\n        val taskList = this.apiClient.getTasks(\"completedTodos\") ?: return null\r\n        val tasks = taskList.tasks\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "        this.localRepository.saveTasks(userId, tasksOrder, taskList)\r\n        return taskList\r\n    }",
  "context" : "override suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder, dueDate: Date): TaskList? {\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        val taskList = this.apiClient.getTasks(\"dailys\", formatter.format(dueDate)) ?: return null\r\n        this.localRepository.saveTasks(userId, tasksOrder, taskList)\r\n        return taskList\r\n    }",
  "start_lineno" : "65",
  "methodName" : "retrieveTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/82",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder, dueDate: Date): TaskList? {\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        val taskList = this.apiClient.getTasks(\"dailys\", formatter.format(dueDate)) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "215",
  "ground_truth" : "                it.completedDate = null\r\n            }\r\n            localRepository.save(savedTask)\r\n        }\r\n    }",
  "context" : "override suspend fun markTaskNeedsWork(task: Task, userID: String) {\r\n        val savedTask = apiClient.markTaskNeedsWork(task.id ?: \"\", userID)\r\n        if (savedTask != null) {\r\n            savedTask.id = task.id\r\n            savedTask.position = task.position\r\n            savedTask.group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.let {\r\n                it.completed = false\r\n                it.completedDate = null\r\n            }\r\n            localRepository.save(savedTask)\r\n        }\r\n    }",
  "start_lineno" : "204",
  "methodName" : "markTaskNeedsWork",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/83",
  "prompt" : "import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun markTaskNeedsWork(task: Task, userID: String) {\r\n        val savedTask = apiClient.markTaskNeedsWork(task.id ?: \"\", userID)\r\n        if (savedTask != null) {\r\n            savedTask.id = task.id\r\n            savedTask.position = task.position\r\n            savedTask.group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.let {\r\n                it.completed = false\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "226",
  "ground_truth" : "        val task = localRepository.getTask(taskId).firstOrNull() ?: return null\r\n        return taskChecked(user, task, up, force, notifyFunc)\r\n    }",
  "context" : "override suspend fun taskChecked(\r\n        user: User?,\r\n        taskId: String,\r\n        up: Boolean,\r\n        force: Boolean,\r\n        notifyFunc: ((TaskScoringResult) -> Unit)?\r\n    ): TaskScoringResult? {\r\n        val task = localRepository.getTask(taskId).firstOrNull() ?: return null\r\n        return taskChecked(user, task, up, force, notifyFunc)\r\n    }",
  "start_lineno" : "217",
  "methodName" : "taskChecked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/84",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.TaskScoringResult\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun taskChecked(\r\n        user: User?,\r\n        taskId: String,\r\n        up: Boolean,\r\n        force: Boolean,\r\n        notifyFunc: ((TaskScoringResult) -> Unit)?\r\n    ): TaskScoringResult? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "235",
  "ground_truth" : "        if (updatedItem != null) {\r\n            localRepository.save(updatedItem)\r\n        }\r\n        return task\r\n    }",
  "context" : "override suspend fun scoreChecklistItem(taskId: String, itemId: String): Task? {\r\n        val task = apiClient.scoreChecklistItem(taskId, itemId)\r\n        val updatedItem: ChecklistItem? = task?.checklist?.lastOrNull { itemId == it.id }\r\n        if (updatedItem != null) {\r\n            localRepository.save(updatedItem)\r\n        }\r\n        return task\r\n    }",
  "start_lineno" : "228",
  "methodName" : "scoreChecklistItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/85",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\noverride suspend fun scoreChecklistItem(taskId: String, itemId: String): Task? {\r\n        val task = apiClient.scoreChecklistItem(taskId, itemId)\r\n        val updatedItem: ChecklistItem? = task?.checklist?.lastOrNull { itemId == it.id }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "309",
  "ground_truth" : "        localRepository.deleteTask(taskId)\r\n        return null\r\n    }",
  "context" : "override suspend fun deleteTask(taskId: String): Void? {\r\n        apiClient.deleteTask(taskId) ?: return null\r\n        localRepository.deleteTask(taskId)\r\n        return null\r\n    }",
  "start_lineno" : "305",
  "methodName" : "deleteTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/86",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun deleteTask(taskId: String): Void? {\r\n        apiClient.deleteTask(taskId) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "333",
  "ground_truth" : "        localRepository.updateTaskPositions(positions)\r\n        return positions\r\n    }",
  "context" : "override suspend fun updateTaskPosition(taskType: TaskType, taskID: String, newPosition: Int): List<String>? {\r\n        val positions = apiClient.postTaskNewPosition(taskID, newPosition) ?: return null\r\n        localRepository.updateTaskPositions(positions)\r\n        return positions\r\n    }",
  "start_lineno" : "329",
  "methodName" : "updateTaskPosition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/87",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun updateTaskPosition(taskType: TaskType, taskID: String, newPosition: Int): List<String>? {\r\n        val positions = apiClient.postTaskNewPosition(taskID, newPosition) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "            handleAssignmentChanges(updatedTask, assignChanges)\r\n        }\r\n    }",
  "context" : "override fun updateTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val updatedTask = updateTask(task) ?: return@launchCatching\r\n            handleAssignmentChanges(updatedTask, assignChanges)\r\n        }\r\n    }",
  "start_lineno" : "337",
  "methodName" : "updateTaskInBackground",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/88",
  "prompt" : "import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val updatedTask = updateTask(task) ?: return@launchCatching\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "349",
  "ground_truth" : "            handleAssignmentChanges(createdTask, assignChanges)\r\n        }\r\n    }",
  "context" : "override fun createTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val createdTask = createTask(task) ?: return@launchCatching\r\n            handleAssignmentChanges(createdTask, assignChanges)\r\n        }\r\n    }",
  "start_lineno" : "344",
  "methodName" : "createTaskInBackground",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/89",
  "prompt" : "import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun createTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val createdTask = createTask(task) ?: return@launchCatching\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "385",
  "ground_truth" : "        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        return apiClient.getTasks(\"dailys\", formatter.format(date))\r\n    }",
  "context" : "override suspend fun retrieveDailiesFromDate(date: Date): TaskList? {\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        return apiClient.getTasks(\"dailys\", formatter.format(date))\r\n    }",
  "start_lineno" : "382",
  "methodName" : "retrieveDailiesFromDate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/90",
  "prompt" : "import java.util.Date\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveDailiesFromDate(date: Date): TaskList? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastTaskAction Long",
  "app_type" : "life",
  "end_lineno" : "396",
  "ground_truth" : "            } else {\r\n                updateTask(it, true)\r\n            }\r\n        }\r\n    }",
  "context" : "override suspend fun syncErroredTasks(): List<Task>? {\r\n        val tasks = localRepository.getErroredTasks(currentUserID ?: \"\").firstOrNull()\r\n        return tasks?.map { localRepository.getUnmanagedCopy(it) }?.mapNotNull {\r\n            if (it.isCreating) {\r\n                createTask(it, true)\r\n            } else {\r\n                updateTask(it, true)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "387",
  "methodName" : "syncErroredTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt",
  "task_id" : "habitica-android/91",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun syncErroredTasks(): List<Task>? {\r\n        val tasks = localRepository.getErroredTasks(currentUserID ?: \"\").firstOrNull()\r\n        return tasks?.map { localRepository.getUnmanagedCopy(it) }?.mapNotNull {\r\n            if (it.isCreating) {\r\n                createTask(it, true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "        if (user != null) {\r\n            localRepository.saveUser(user)\r\n        }\r\n        return user\r\n    }",
  "context" : "override suspend fun syncUserStats(): User? {\r\n        val user = apiClient.syncUserStats()\r\n        if (user != null) {\r\n            localRepository.saveUser(user)\r\n        }\r\n        return user\r\n    }",
  "start_lineno" : "54",
  "methodName" : "syncUserStats",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/92",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Stats\noverride suspend fun syncUserStats(): User? {\r\n        val user = apiClient.syncUserStats()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        val oldUser = localRepository.getUser(userID).firstOrNull()\r\n        return mergeUser(oldUser, networkUser)\r\n    }",
  "context" : "private suspend fun updateUser(userID: String, updateData: Map<String, Any?>): User? {\r\n        val networkUser = apiClient.updateUser(updateData) ?: return null\r\n        val oldUser = localRepository.getUser(userID).firstOrNull()\r\n        return mergeUser(oldUser, networkUser)\r\n    }",
  "start_lineno" : "62",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/93",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nprivate suspend fun updateUser(userID: String, updateData: Map<String, Any?>): User? {\r\n        val networkUser = apiClient.updateUser(updateData) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "        for (step in tutorialSteps) {\r\n            updateData[step.flagPath] = false\r\n        }\r\n        return updateUser(updateData)\r\n    }",
  "context" : "override suspend fun resetTutorial(): User? {\r\n        val tutorialSteps = localRepository.getTutorialSteps().firstOrNull() ?: return null\r\n        val updateData = HashMap<String, Any>()\r\n        for (step in tutorialSteps) {\r\n            updateData[step.flagPath] = false\r\n        }\r\n        return updateUser(updateData)\r\n    }",
  "start_lineno" : "123",
  "methodName" : "resetTutorial",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/94",
  "prompt" : "import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\noverride suspend fun resetTutorial(): User? {\r\n        val tutorialSteps = localRepository.getTutorialSteps().firstOrNull() ?: return null\r\n        val updateData = HashMap<String, Any>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "        if (apiClient.sleep() == null) {\r\n            localRepository.modify(user) { it.preferences?.sleep = !newValue }\r\n        }\r\n        return user\r\n    }",
  "context" : "override suspend fun sleep(user: User): User {\r\n        val newValue = !(user.preferences?.sleep ?: false)\r\n        localRepository.modify(user) { it.preferences?.sleep = newValue }\r\n        if (apiClient.sleep() == null) {\r\n            localRepository.modify(user) { it.preferences?.sleep = !newValue }\r\n        }\r\n        return user\r\n    }",
  "start_lineno" : "132",
  "methodName" : "sleep",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/95",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun sleep(user: User): User {\r\n        val newValue = !(user.preferences?.sleep ?: false)\r\n        localRepository.modify(user) { it.preferences?.sleep = newValue }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "        apiClient.changeClass(selectedClass)\r\n        return retrieveUser(false, forced = true)\r\n    }",
  "context" : "override suspend fun changeClass(selectedClass: String?): User? {\r\n        apiClient.changeClass(selectedClass)\r\n        return retrieveUser(false, forced = true)\r\n    }",
  "start_lineno" : "169",
  "methodName" : "changeClass",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/96",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeClass(selectedClass: String?): User? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "208",
  "ground_truth" : "        val data = NewStuffData()\r\n        data.title = baileyAnnouncement\r\n        notification.data = data\r\n        return notification\r\n    }",
  "context" : "override suspend fun getNewsNotification(): Notification {\r\n        val baileyNews = apiClient.getNews()\r\n        val baileyAnnouncement = (baileyNews?.first() as? Map<*, *>)?.get(\"title\") as? String\r\n        val notification = Notification()\r\n        notification.id = \"custom-new-stuff-notification\"\r\n        notification.type = Notification.Type.NEW_STUFF.type\r\n        val data = NewStuffData()\r\n        data.title = baileyAnnouncement\r\n        notification.data = data\r\n        return notification\r\n    }",
  "start_lineno" : "198",
  "methodName" : "getNewsNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/97",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\noverride suspend fun getNewsNotification(): Notification {\r\n        val baileyNews = apiClient.getNews()\r\n        val baileyAnnouncement = (baileyNews?.first() as? Map<*, *>)?.get(\"title\") as? String\r\n        val notification = Notification()\r\n        notification.id = \"custom-new-stuff-notification\"\r\n        notification.type = Notification.Type.NEW_STUFF.type\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "214",
  "ground_truth" : "        lastReadNotification = id\r\n        return apiClient.readNotification(id)\r\n    }",
  "context" : "override suspend fun readNotification(id: String): List<Any>? {\r\n        if (lastReadNotification == id) return null\r\n        lastReadNotification = id\r\n        return apiClient.readNotification(id)\r\n    }",
  "start_lineno" : "210",
  "methodName" : "readNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/98",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\noverride suspend fun readNotification(id: String): List<Any>? {\r\n        if (lastReadNotification == id) return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "231",
  "ground_truth" : "        updateObject[\"dayStart\"] = dayStartTime\r\n        return apiClient.changeCustomDayStart(updateObject)\r\n    }",
  "context" : "override suspend fun changeCustomDayStart(dayStartTime: Int): User? {\r\n        val updateObject = HashMap<String, Any>()\r\n        updateObject[\"dayStart\"] = dayStartTime\r\n        return apiClient.changeCustomDayStart(updateObject)\r\n    }",
  "start_lineno" : "227",
  "methodName" : "changeCustomDayStart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/99",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeCustomDayStart(dayStartTime: Int): User? {\r\n        val updateObject = HashMap<String, Any>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "237",
  "ground_truth" : "        apiClient.languageCode = languageCode\r\n        return user\r\n    }",
  "context" : "override suspend fun updateLanguage(languageCode: String): User? {\r\n        val user = updateUser(\"preferences.language\", languageCode)\r\n        apiClient.languageCode = languageCode\r\n        return user\r\n    }",
  "start_lineno" : "233",
  "methodName" : "updateLanguage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/100",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun updateLanguage(languageCode: String): User? {\r\n        val user = updateUser(\"preferences.language\", languageCode)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "        apiClient.resetAccount(password)\r\n        return retrieveUser(withTasks = true, forced = true)\r\n    }",
  "context" : "override suspend fun resetAccount(password: String): User? {\r\n        apiClient.resetAccount(password)\r\n        return retrieveUser(withTasks = true, forced = true)\r\n    }",
  "start_lineno" : "239",
  "methodName" : "resetAccount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/101",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\noverride suspend fun resetAccount(password: String): User? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "387",
  "ground_truth" : "        localRepository.save(achievements)\r\n        return achievements\r\n    }",
  "context" : "override suspend fun retrieveAchievements(): List<Achievement>? {\r\n        val achievements = apiClient.getMemberAchievements(currentUserID) ?: return null\r\n        localRepository.save(achievements)\r\n        return achievements\r\n    }",
  "start_lineno" : "383",
  "methodName" : "retrieveAchievements",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/102",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Achievement\noverride suspend fun retrieveAchievements(): List<Achievement>? {\r\n        val achievements = apiClient.getMemberAchievements(currentUserID) ?: return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "402",
  "ground_truth" : "        localRepository.save(teams)\r\n        return teams\r\n    }",
  "context" : "override suspend fun retrieveTeamPlans(): List<TeamPlan>? {\r\n        val teams = apiClient.getTeamPlans() ?: return null\r\n        teams.forEach { it.userID = currentUserID }\r\n        localRepository.save(teams)\r\n        return teams\r\n    }",
  "start_lineno" : "397",
  "methodName" : "retrieveTeamPlans",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/103",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride suspend fun retrieveTeamPlans(): List<TeamPlan>? {\r\n        val teams = apiClient.getTeamPlans() ?: return null\r\n        teams.forEach { it.userID = currentUserID }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "432",
  "ground_truth" : "                it ?: retrieveTeamPlan(teamID)\r\n            }\r\n    }",
  "context" : "override fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        return localRepository.getTeamPlan(teamID)\r\n            .map {\r\n                it ?: retrieveTeamPlan(teamID)\r\n            }\r\n    }",
  "start_lineno" : "427",
  "methodName" : "getTeamPlan",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/104",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        return localRepository.getTeamPlan(teamID)\r\n            .map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastReadNotification String?\nvar lastSync Date?",
  "app_type" : "life",
  "end_lineno" : "437",
  "ground_truth" : "        val user = localRepository.getUser(currentUserID).firstOrNull() ?: return null\r\n        return localRepository.getLiveObject(user)\r\n    }",
  "context" : "private suspend fun getLiveUser(): User? {\r\n        val user = localRepository.getUser(currentUserID).firstOrNull() ?: return null\r\n        return localRepository.getLiveObject(user)\r\n    }",
  "start_lineno" : "434",
  "methodName" : "getLiveUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt",
  "task_id" : "habitica-android/105",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nprivate suspend fun getLiveUser(): User? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "            process()\r\n        }\r\n    }",
  "context" : "override fun executeTransaction(transaction: (Realm) -> Unit) {\r\n        pendingSaves.add(transaction)\r\n        if (isSaving.compareAndSet(false, true)) {\r\n            process()\r\n        }\r\n    }",
  "start_lineno" : "26",
  "methodName" : "executeTransaction",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/106",
  "prompt" : "import io.realm.Realm\noverride fun executeTransaction(transaction: (Realm) -> Unit) {\r\n        pendingSaves.add(transaction)\r\n        if (isSaving.compareAndSet(false, true)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "            realm.copyFromRealm(managedObject)\r\n        } else {\r\n            managedObject\r\n        }\r\n    }",
  "context" : "override fun <T : BaseObject> getUnmanagedCopy(managedObject: T): T {\r\n        return if (managedObject is RealmObject && managedObject.isManaged && managedObject.isValid) {\r\n            realm.copyFromRealm(managedObject)\r\n        } else {\r\n            managedObject\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "getUnmanagedCopy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/107",
  "prompt" : "import io.realm.RealmObject\nimport io.realm.Realm\nimport com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> getUnmanagedCopy(managedObject: T): T {\r\n        return if (managedObject is RealmObject && managedObject.isManaged && managedObject.isValid) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        if (isClosed) { return emptyList() }\r\n        return realm.copyFromRealm(list)\r\n    }",
  "context" : "override fun <T : BaseObject> getUnmanagedCopy(list: List<T>): List<T> {\r\n        if (isClosed) { return emptyList() }\r\n        return realm.copyFromRealm(list)\r\n    }",
  "start_lineno" : "41",
  "methodName" : "getUnmanagedCopy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/108",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> getUnmanagedCopy(list: List<T>): List<T> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "        } catch (_: java.lang.IllegalArgumentException) {\r\n        }\r\n    }",
  "context" : "private fun <T : RealmModel> copy(realm: Realm, obj: T) {\r\n        try {\r\n            realm.insertOrUpdate(obj)\r\n        } catch (_: java.lang.IllegalArgumentException) {\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "copy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/109",
  "prompt" : "import io.realm.RealmModel\nimport io.realm.Realm\nprivate fun <T : RealmModel> copy(realm: Realm, obj: T) {\r\n        try {\r\n            realm.insertOrUpdate(obj)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "            process()\r\n        }\r\n    }",
  "context" : "override fun <T : BaseObject> save(obj: T) {\r\n        pendingSaves.add(obj)\r\n        if (isSaving.compareAndSet(false, true)) {\r\n            process()\r\n        }\r\n    }",
  "start_lineno" : "78",
  "methodName" : "save",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/110",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> save(obj: T) {\r\n        pendingSaves.add(obj)\r\n        if (isSaving.compareAndSet(false, true)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            process()\r\n        }\r\n    }",
  "context" : "override fun <T : BaseObject> save(objects: List<T>) {\r\n        pendingSaves.add(objects)\r\n        if (isSaving.compareAndSet(false, true)) {\r\n            process()\r\n        }\r\n    }",
  "start_lineno" : "85",
  "methodName" : "save",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/111",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> save(objects: List<T>) {\r\n        pendingSaves.add(objects)\r\n        if (isSaving.compareAndSet(false, true)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "        val liveObject = getLiveObject(obj) ?: return\r\n        executeTransaction {\r\n            transaction(liveObject)\r\n        }\r\n    }",
  "context" : "override fun <T : BaseMainObject> modify(obj: T, transaction: (T) -> Unit) {\r\n        if (isClosed) { return }\r\n        val liveObject = getLiveObject(obj) ?: return\r\n        executeTransaction {\r\n            transaction(liveObject)\r\n        }\r\n    }",
  "start_lineno" : "92",
  "methodName" : "modify",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/112",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseMainObject\noverride fun <T : BaseMainObject> modify(obj: T, transaction: (T) -> Unit) {\r\n        if (isClosed) { return }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "        val liveObject = getLiveObject(obj) ?: return\r\n        executeTransaction {\r\n            liveObject.deleteFromRealm()\r\n        }\r\n    }",
  "context" : "override fun <T : BaseMainObject> delete(obj: T) {\r\n        if (isClosed) { return }\r\n        val liveObject = getLiveObject(obj) ?: return\r\n        executeTransaction {\r\n            liveObject.deleteFromRealm()\r\n        }\r\n    }",
  "start_lineno" : "100",
  "methodName" : "delete",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/113",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseMainObject\noverride fun <T : BaseMainObject> delete(obj: T) {\r\n        if (isClosed) { return }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "        if (obj !is RealmObject || !obj.isManaged) return obj\r\n        val baseObject = obj as? BaseMainObject ?: return null\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return realm.where(baseObject.realmClass).equalTo(baseObject.primaryIdentifierName, baseObject.primaryIdentifier).findFirst() as? T\r\n    }",
  "context" : "override fun <T : BaseObject> getLiveObject(obj: T): T? {\r\n        if (isClosed) return null\r\n        if (obj !is RealmObject || !obj.isManaged) return obj\r\n        val baseObject = obj as? BaseMainObject ?: return null\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return realm.where(baseObject.realmClass).equalTo(baseObject.primaryIdentifierName, baseObject.primaryIdentifier).findFirst() as? T\r\n    }",
  "start_lineno" : "112",
  "methodName" : "getLiveObject",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/114",
  "prompt" : "import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> getLiveObject(obj: T): T? {\r\n        if (isClosed) return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isClosed Boolean\nvar isSaving\nvar pendingSaves",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.isValid && !it.isEmpty() }\r\n            .map { it.firstOrNull() }\r\n    }",
  "context" : "fun queryUser(userID: String): Flow<User?> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.isValid && !it.isEmpty() }\r\n            .map { it.firstOrNull() }\r\n    }",
  "start_lineno" : "120",
  "methodName" : "queryUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt",
  "task_id" : "habitica-android/115",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\nfun queryUser(userID: String): Flow<User?> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "        .equalTo(\"challengeID\", challengeID)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }\r\n        .map { it.count() > 0 }",
  "context" : "override fun isChallengeMember(userID: String, challengeID: String): Flow<Boolean> = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userID)\r\n        .equalTo(\"challengeID\", challengeID)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }\r\n        .map { it.count() > 0 }",
  "start_lineno" : "20",
  "methodName" : "isChallengeMember",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/116",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun isChallengeMember(userID: String, challengeID: String): Flow<Boolean> = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }\r\n        .map { it.first() }\r\n        .filterNotNull()",
  "context" : "override fun getChallengeMembership(userId: String, id: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .equalTo(\"challengeID\", id)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }\r\n        .map { it.first() }\r\n        .filterNotNull()",
  "start_lineno" : "28",
  "methodName" : "getChallengeMembership",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/117",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMembership(userId: String, id: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .equalTo(\"challengeID\", id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "context" : "override fun getChallengeMemberships(userId: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "start_lineno" : "37",
  "methodName" : "getChallengeMemberships",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/118",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMemberships(userId: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getChallenge(id: String): Flow<Challenge> {\r\n        return realm.where(Challenge::class.java)\r\n            .equalTo(\"id\", id)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "43",
  "methodName" : "getChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/119",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallenge(id: String): Flow<Challenge> {\r\n        return realm.where(Challenge::class.java)\r\n            .equalTo(\"id\", id)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            .equalTo(\"ownerID\", challengeID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded }\r\n    }",
  "context" : "override fun getTasks(challengeID: String): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", challengeID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "getTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/120",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTasks(challengeID: String): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val challenges Flow<List<Challenge>>",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "                val membership = user.challenges?.firstOrNull { it.challengeID == challengeID } ?: return@executeTransaction\r\n                user.challenges?.remove(membership)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun setParticipating(userID: String, challengeID: String, isParticipating: Boolean) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst() ?: return\r\n        executeTransaction {\r\n            if (isParticipating) {\r\n                user.challenges?.add(ChallengeMembership(userID, challengeID))\r\n            } else {\r\n                val membership = user.challenges?.firstOrNull { it.challengeID == challengeID } ?: return@executeTransaction\r\n                user.challenges?.remove(membership)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "94",
  "methodName" : "setParticipating",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt",
  "task_id" : "habitica-android/121",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun setParticipating(userID: String, challengeID: String, isParticipating: Boolean) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst() ?: return\r\n        executeTransaction {\r\n            if (isParticipating) {\r\n                user.challenges?.add(ChallengeMembership(userID, challengeID))\r\n            } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getWorldState(): Flow<WorldState> {\r\n        return realm.where(WorldState::class.java)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "getWorldState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmContentLocalRepository.kt",
  "task_id" : "habitica-android/122",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.WorldState\noverride fun getWorldState(): Flow<WorldState> {\r\n        return realm.where(WorldState::class.java)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val articles Flow<List<FAQArticle>>",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "            .toFlow()\r\n            .filter { it.isLoaded && it.count() > 0 }\r\n            .map { it.firstOrNull() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getArticle(position: Int): Flow<FAQArticle> {\r\n        return realm.where(FAQArticle::class.java)\r\n            .equalTo(\"position\", position)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.count() > 0 }\r\n            .map { it.firstOrNull() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "13",
  "methodName" : "getArticle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmFAQLocalRepository.kt",
  "task_id" : "habitica-android/123",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.FAQArticle\noverride fun getArticle(position: Int): Flow<FAQArticle> {\r\n        return realm.where(FAQArticle::class.java)\r\n            .equalTo(\"position\", position)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "            .`in`(\"key\", keys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getQuestContent(keys: List<String>): Flow<List<QuestContent>> {\r\n        return realm.where(QuestContent::class.java)\r\n            .`in`(\"key\", keys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "36",
  "methodName" : "getQuestContent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/124",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.QuestContent\noverride fun getQuestContent(keys: List<String>): Flow<List<QuestContent>> {\r\n        return realm.where(QuestContent::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { content -> content.isLoaded && content.isValid && !content.isEmpty() }\r\n            .map { content -> content.first() }\r\n    }",
  "context" : "override fun getQuestContent(key: String): Flow<QuestContent?> {\r\n        return realm.where(QuestContent::class.java).equalTo(\"key\", key)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { content -> content.isLoaded && content.isValid && !content.isEmpty() }\r\n            .map { content -> content.first() }\r\n    }",
  "start_lineno" : "44",
  "methodName" : "getQuestContent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/125",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.QuestContent\noverride fun getQuestContent(key: String): Flow<QuestContent?> {\r\n        return realm.where(QuestContent::class.java).equalTo(\"key\", key)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "            .`in`(\"key\", searchedKeys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getEquipment(searchedKeys: List<String>): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .`in`(\"key\", searchedKeys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "52",
  "methodName" : "getEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/126",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getEquipment(searchedKeys: List<String>): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "            .endGroup()\r\n            .findAll()\r\n            .toFlow()\r\n            .map { it.count() }\r\n    }",
  "context" : "override fun getArmoireRemainingCount(): Flow<Int> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"klass\", \"armoire\")\r\n            .beginGroup()\r\n            .equalTo(\"released\", true)\r\n            .or()\r\n            .isNull(\"released\")\r\n            .endGroup()\r\n            .beginGroup()\r\n            .equalTo(\"owned\", false)\r\n            .or()\r\n            .isNull(\"owned\")\r\n            .endGroup()\r\n            .findAll()\r\n            .toFlow()\r\n            .map { it.count() }\r\n    }",
  "start_lineno" : "60",
  "methodName" : "getArmoireRemainingCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/127",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getArmoireRemainingCount(): Flow<Int> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"klass\", \"armoire\")\r\n            .beginGroup()\r\n            .equalTo(\"released\", true)\r\n            .or()\r\n            .isNull(\"released\")\r\n            .endGroup()\r\n            .beginGroup()\r\n            .equalTo(\"owned\", false)\r\n            .or()\r\n            .isNull(\"owned\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getOwnedEquipment(type: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r\n            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "78",
  "methodName" : "getOwnedEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/128",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getOwnedEquipment(type: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getOwnedEquipment(): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "87",
  "methodName" : "getOwnedEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/129",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getOwnedEquipment(): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "            .equalTo(\"gearSet\", set)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getEquipmentType(type: String, set: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r\n            .equalTo(\"gearSet\", set)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "95",
  "methodName" : "getEquipmentType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/130",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getEquipmentType(type: String, set: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        return realm.where(itemClass).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getItems(itemClass: Class<out Item>): Flow<List<Item>> {\r\n        return realm.where(itemClass).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "126",
  "methodName" : "getItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/131",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getItems(itemClass: Class<out Item>): Flow<List<Item>> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "134",
  "ground_truth" : "        return realm.where(itemClass).`in`(\"key\", keys).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getItems(itemClass: Class<out Item>, keys: Array<String>): Flow<List<Item>> {\r\n        return realm.where(itemClass).`in`(\"key\", keys).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "131",
  "methodName" : "getItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/132",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getItems(itemClass: Class<out Item>, keys: Array<String>): Flow<List<Item>> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getEquipment(key: String): Flow<Equipment> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"key\", key)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "153",
  "methodName" : "getEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/133",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getEquipment(key: String): Flow<Equipment> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"key\", key)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "169",
  "ground_truth" : "            .sort(\"type\", Sort.ASCENDING, \"animal\", Sort.ASCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getMounts(): Flow<List<Mount>> {\r\n        return realm.where(Mount::class.java)\r\n            .sort(\"type\", Sort.ASCENDING, \"animal\", Sort.ASCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "163",
  "methodName" : "getMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/134",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Mount\noverride fun getMounts(): Flow<List<Mount>> {\r\n        return realm.where(Mount::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "                it?.items?.mounts?.filter {\r\n                    it.owned\r\n                } ?: emptyList()\r\n            }\r\n    }",
  "context" : "override fun getOwnedMounts(userID: String): Flow<List<OwnedMount>> {\r\n        return queryUser(userID)\r\n            .map {\r\n                it?.items?.mounts?.filter {\r\n                    it.owned\r\n                } ?: emptyList()\r\n            }\r\n    }",
  "start_lineno" : "188",
  "methodName" : "getOwnedMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/135",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\noverride fun getOwnedMounts(userID: String): Flow<List<OwnedMount>> {\r\n        return queryUser(userID)\r\n            .map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "203",
  "ground_truth" : "            .sort(\"type\", Sort.ASCENDING, \"animal\", Sort.ASCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getPets(): Flow<List<Pet>> {\r\n        return realm.where(Pet::class.java)\r\n            .sort(\"type\", Sort.ASCENDING, \"animal\", Sort.ASCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "197",
  "methodName" : "getPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/136",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Pet\noverride fun getPets(): Flow<List<Pet>> {\r\n        return realm.where(Pet::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "233",
  "ground_truth" : "                it.first()?.items?.pets?.filter {\r\n                    it.trained > 0\r\n                } ?: emptyList()\r\n            }\r\n    }",
  "context" : "override fun getOwnedPets(userID: String): Flow<List<OwnedPet>> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.isValid && !it.isEmpty() }\r\n            .map {\r\n                it.first()?.items?.pets?.filter {\r\n                    it.trained > 0\r\n                } ?: emptyList()\r\n            }\r\n    }",
  "start_lineno" : "222",
  "methodName" : "getOwnedPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/137",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.Flow\nimport io.realm.kotlin.toFlow\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\noverride fun getOwnedPets(userID: String): Flow<List<OwnedPet>> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.isValid && !it.isEmpty() }\r\n            .map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "248",
  "ground_truth" : "            changeOwnedCount(item, amountToAdd)\r\n        }\r\n    }",
  "context" : "override suspend fun changeOwnedCount(\r\n        type: String,\r\n        key: String,\r\n        userID: String,\r\n        amountToAdd: Int\r\n    ) {\r\n        val item = getOwnedItem(userID, type, key, true).firstOrNull()\r\n        if (item != null) {\r\n            changeOwnedCount(item, amountToAdd)\r\n        }\r\n    }",
  "start_lineno" : "238",
  "methodName" : "changeOwnedCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/138",
  "prompt" : "import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun changeOwnedCount(\r\n        type: String,\r\n        key: String,\r\n        userID: String,\r\n        amountToAdd: Int\r\n    ) {\r\n        val item = getOwnedItem(userID, type, key, true).firstOrNull()\r\n        if (item != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "255",
  "ground_truth" : "            executeTransaction { liveItem.numberOwned = liveItem.numberOwned + amount }\r\n        }\r\n    }",
  "context" : "override fun changeOwnedCount(item: OwnedItem, amountToAdd: Int?) {\r\n        val liveItem = getLiveObject(item) ?: return\r\n        amountToAdd?.let { amount ->\r\n            executeTransaction { liveItem.numberOwned = liveItem.numberOwned + amount }\r\n        }\r\n    }",
  "start_lineno" : "250",
  "methodName" : "changeOwnedCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/139",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun changeOwnedCount(item: OwnedItem, amountToAdd: Int?) {\r\n        val liveItem = getLiveObject(item) ?: return\r\n        amountToAdd?.let { amount ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "326",
  "ground_truth" : "            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getInAppRewards(): Flow<List<ShopItem>> {\r\n        return realm.where(ShopItem::class.java)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "321",
  "methodName" : "getInAppRewards",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/140",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getInAppRewards(): Flow<List<ShopItem>> {\r\n        return realm.where(ShopItem::class.java)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "336",
  "ground_truth" : "            .toFlow()\r\n            .filter { it.isLoaded }\r\n            .map { it.firstOrNull() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getInAppReward(key: String): Flow<ShopItem> {\r\n        return realm.where(ShopItem::class.java)\r\n            .equalTo(\"key\", key)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n            .map { it.firstOrNull() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "328",
  "methodName" : "getInAppReward",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/141",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getInAppReward(key: String): Flow<ShopItem> {\r\n        return realm.where(ShopItem::class.java)\r\n            .equalTo(\"key\", key)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "348",
  "ground_truth" : "                }\r\n            }\r\n            realm.insertOrUpdate(onlineItems)\r\n        }\r\n    }",
  "context" : "override fun saveInAppRewards(onlineItems: List<ShopItem>) {\r\n        val localItems = realm.where(ShopItem::class.java).findAll().createSnapshot()\r\n        executeTransaction {\r\n            for (localItem in localItems) {\r\n                if (!onlineItems.contains(localItem)) {\r\n                    localItem.deleteFromRealm()\r\n                }\r\n            }\r\n            realm.insertOrUpdate(onlineItems)\r\n        }\r\n    }",
  "start_lineno" : "338",
  "methodName" : "saveInAppRewards",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/142",
  "prompt" : "import io.realm.Realm\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun saveInAppRewards(onlineItems: List<ShopItem>) {\r\n        val localItems = realm.where(ShopItem::class.java).findAll().createSnapshot()\r\n        executeTransaction {\r\n            for (localItem in localItems) {\r\n                if (!onlineItems.contains(localItem)) {\r\n                    localItem.deleteFromRealm()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "370",
  "ground_truth" : "        return realm.where(OwnedItem::class.java).equalTo(\"key\", obj.key)\r\n            .equalTo(\"itemType\", obj.itemType).findFirst()\r\n    }",
  "context" : "override fun getLiveObject(obj: OwnedItem): OwnedItem? {\r\n        if (isClosed) return null\r\n        if (!obj.isManaged) return obj\r\n        return realm.where(OwnedItem::class.java).equalTo(\"key\", obj.key)\r\n            .equalTo(\"itemType\", obj.itemType).findFirst()\r\n    }",
  "start_lineno" : "365",
  "methodName" : "getLiveObject",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/143",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getLiveObject(obj: OwnedItem): OwnedItem? {\r\n        if (isClosed) return null\r\n        if (!obj.isManaged) return obj\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "378",
  "ground_truth" : "        items.setItemTypes()\r\n        executeTransaction {\r\n            user.items = items\r\n        }\r\n    }",
  "context" : "override fun save(items: Items, userID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst() ?: return\r\n        items.setItemTypes()\r\n        executeTransaction {\r\n            user.items = items\r\n        }\r\n    }",
  "start_lineno" : "372",
  "methodName" : "save",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/144",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun save(items: Items, userID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst() ?: return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "423",
  "ground_truth" : "                it.first {\r\n                    it.key?.contains(format.format(Date())) == true\r\n                }\r\n            }\r\n    }",
  "context" : "override fun getLatestMysteryItem(): Flow<Equipment> {\r\n        return realm.where(Equipment::class.java)\r\n            .contains(\"key\", \"mystery_2\")\r\n            .sort(\"mystery\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map {\r\n                val format = SimpleDateFormat(\"yyyyMM\", Locale.US)\r\n                it.first {\r\n                    it.key?.contains(format.format(Date())) == true\r\n                }\r\n            }\r\n    }",
  "start_lineno" : "410",
  "methodName" : "getLatestMysteryItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/145",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.Flow\nimport io.realm.kotlin.toFlow\nimport io.realm.Sort\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getLatestMysteryItem(): Flow<Equipment> {\r\n        return realm.where(Equipment::class.java)\r\n            .contains(\"key\", \"mystery_2\")\r\n            .sort(\"mystery\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map {\r\n                val format = SimpleDateFormat(\"yyyyMM\", Locale.US)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "440",
  "ground_truth" : "                user.stats = stats\r\n            }\r\n        }\r\n        return user\r\n    }",
  "context" : "override fun soldItem(userID: String, updatedUser: User): User {\r\n        val user = realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findFirst() ?: return updatedUser\r\n        executeTransaction {\r\n            val items = updatedUser.items\r\n            if (items != null) {\r\n                user.items = items\r\n            }\r\n            val stats = updatedUser.stats\r\n            if (stats != null) {\r\n                user.stats = stats\r\n            }\r\n        }\r\n        return user\r\n    }",
  "start_lineno" : "425",
  "methodName" : "soldItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt",
  "task_id" : "habitica-android/146",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun soldItem(userID: String, updatedUser: User): User {\r\n        val user = realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findFirst() ?: return updatedUser\r\n        executeTransaction {\r\n            val items = updatedUser.items\r\n            if (items != null) {\r\n                user.items = items\r\n            }\r\n            val stats = updatedUser.stats\r\n            if (stats != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        .equalTo(\"groupID\", id)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded && it.isNotEmpty() }\r\n        .map { it.first() }",
  "context" : "override fun getGroupMembership(userId: String, id: String) = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .equalTo(\"groupID\", id)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded && it.isNotEmpty() }\r\n        .map { it.first() }",
  "start_lineno" : "23",
  "methodName" : "getGroupMembership",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/147",
  "prompt" : "import com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getGroupMembership(userId: String, id: String) = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "context" : "override fun getGroupMemberships(userId: String): Flow<List<GroupMembership>> = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "start_lineno" : "31",
  "methodName" : "getGroupMemberships",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/148",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getGroupMemberships(userId: String): Flow<List<GroupMembership>> = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "                    membership.deleteFromRealm()\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun updateMembership(userId: String, id: String, isMember: Boolean) {\r\n        if (isMember) {\r\n            save(GroupMembership(userId, id))\r\n        } else {\r\n            val membership = realm.where(GroupMembership::class.java).equalTo(\"userID\", userId).equalTo(\"groupID\", id).findFirst()\r\n            if (membership != null) {\r\n                executeTransaction {\r\n                    membership.deleteFromRealm()\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "37",
  "methodName" : "updateMembership",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/149",
  "prompt" : "import com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun updateMembership(userId: String, id: String, isMember: Boolean) {\r\n        if (isMember) {\r\n            save(GroupMembership(userId, id))\r\n        } else {\r\n            val membership = realm.where(GroupMembership::class.java).equalTo(\"userID\", userId).equalTo(\"groupID\", id).findFirst()\r\n            if (membership != null) {\r\n                executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "            executeTransaction {\r\n                existingQuest?.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun saveGroup(group: Group) {\r\n        save(group)\r\n        if (group.quest == null) {\r\n            val existingQuest = realm.where(Quest::class.java).equalTo(\"id\", group.id).findFirst()\r\n            executeTransaction {\r\n                existingQuest?.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "50",
  "methodName" : "saveGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/150",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun saveGroup(group: Group) {\r\n        save(group)\r\n        if (group.quest == null) {\r\n            val existingQuest = realm.where(Quest::class.java).equalTo(\"id\", group.id).findFirst()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { member -> member.isLoaded && member.isValid }\r\n            .map { member -> member.firstOrNull() }\r\n    }",
  "context" : "override fun getMember(userID: String?): Flow<Member?> {\r\n        return realm.where(Member::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { member -> member.isLoaded && member.isValid }\r\n            .map { member -> member.firstOrNull() }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "getMember",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/151",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getMember(userID: String?): Flow<Member?> {\r\n        return realm.where(Member::class.java)\r\n            .equalTo(\"id\", userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "158",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { group -> group.isLoaded && group.isValid && !group.isEmpty() }\r\n            .map { groups -> groups.first() }\r\n    }",
  "context" : "override fun getGroup(id: String): Flow<Group?> {\r\n        return realm.where(Group::class.java)\r\n            .equalTo(\"id\", id)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { group -> group.isLoaded && group.isValid && !group.isEmpty() }\r\n            .map { groups -> groups.first() }\r\n    }",
  "start_lineno" : "151",
  "methodName" : "getGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/152",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun getGroup(id: String): Flow<Group?> {\r\n        return realm.where(Group::class.java)\r\n            .equalTo(\"id\", id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "            .sort(\"timestamp\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getGroupChat(groupId: String): Flow<List<ChatMessage>> {\r\n        return realm.where(ChatMessage::class.java)\r\n            .equalTo(\"groupId\", groupId)\r\n            .sort(\"timestamp\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "160",
  "methodName" : "getGroupChat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/153",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\noverride fun getGroupChat(groupId: String): Flow<List<ChatMessage>> {\r\n        return realm.where(ChatMessage::class.java)\r\n            .equalTo(\"groupId\", groupId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "        val chatMessage = realm.where(ChatMessage::class.java).equalTo(\"id\", id).findFirst()\r\n        executeTransaction { chatMessage?.deleteFromRealm() }\r\n    }",
  "context" : "override fun deleteMessage(id: String) {\r\n        val chatMessage = realm.where(ChatMessage::class.java).equalTo(\"id\", id).findFirst()\r\n        executeTransaction { chatMessage?.deleteFromRealm() }\r\n    }",
  "start_lineno" : "169",
  "methodName" : "deleteMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/154",
  "prompt" : "override fun deleteMessage(id: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "177",
  "ground_truth" : "        .equalTo(\"party.id\", partyId)\r\n        .findAll()\r\n        .toFlow()",
  "context" : "override fun getPartyMembers(partyId: String) = realm.where(Member::class.java)\r\n        .equalTo(\"party.id\", partyId)\r\n        .findAll()\r\n        .toFlow()",
  "start_lineno" : "174",
  "methodName" : "getPartyMembers",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/155",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\noverride fun getPartyMembers(partyId: String) = realm.where(Member::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "        .toFlow()\r\n        .map { memberships -> memberships.map { it.userID }.toTypedArray() }\r\n        .flatMapLatest { realm.where(Member::class.java).`in`(\"id\", it).findAll().toFlow() }",
  "context" : "override fun getGroupMembers(groupID: String) = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"groupID\", groupID)\r\n        .findAll()\r\n        .toFlow()\r\n        .map { memberships -> memberships.map { it.userID }.toTypedArray() }\r\n        .flatMapLatest { realm.where(Member::class.java).`in`(\"id\", it).findAll().toFlow() }",
  "start_lineno" : "179",
  "methodName" : "getGroupMembers",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/156",
  "prompt" : "import com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getGroupMembers(groupID: String) = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"groupID\", groupID)\r\n        .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "            user?.invitations?.removeInvitation(groupID)\r\n        }\r\n    }",
  "context" : "override fun rejectGroupInvitation(userID: String, groupID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst()\r\n        executeTransaction {\r\n            user?.invitations?.removeInvitation(groupID)\r\n        }\r\n    }",
  "start_lineno" : "229",
  "methodName" : "rejectGroupInvitation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/157",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun rejectGroupInvitation(userID: String, groupID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst()\r\n        executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "241",
  "ground_truth" : "            executeTransaction { party.quest = null }\r\n        }\r\n    }",
  "context" : "override fun removeQuest(partyId: String) {\r\n        val party = realm.where(Group::class.java).equalTo(\"id\", partyId).findFirst()\r\n        if (party != null) {\r\n            executeTransaction { party.quest = null }\r\n        }\r\n    }",
  "start_lineno" : "236",
  "methodName" : "removeQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/158",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun removeQuest(partyId: String) {\r\n        val party = realm.where(Group::class.java).equalTo(\"id\", partyId).findFirst()\r\n        if (party != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "249",
  "ground_truth" : "        val liveParty = getLiveObject(party)\r\n        executeTransaction {\r\n            liveParty?.quest?.active = active\r\n        }\r\n    }",
  "context" : "override fun setQuestActivity(party: Group?, active: Boolean) {\r\n        if (party == null) return\r\n        val liveParty = getLiveObject(party)\r\n        executeTransaction {\r\n            liveParty?.quest?.active = active\r\n        }\r\n    }",
  "start_lineno" : "243",
  "methodName" : "setQuestActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/159",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun setQuestActivity(party: Group?, active: Boolean) {\r\n        if (party == null) return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "        val party = realm.where(Group::class.java).equalTo(\"id\", id).findFirst()\r\n        return party != null && party.isValid\r\n    }",
  "context" : "override fun doesGroupExist(id: String): Boolean {\r\n        val party = realm.where(Group::class.java).equalTo(\"id\", id).findFirst()\r\n        return party != null && party.isValid\r\n    }",
  "start_lineno" : "270",
  "methodName" : "doesGroupExist",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/160",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\noverride fun doesGroupExist(id: String): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "282",
  "ground_truth" : "        .equalTo(\"userID\", userId)\r\n        .sort(\"timestamp\", Sort.DESCENDING)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "context" : "override fun getInboxMessages(userId: String, replyToUserID: String?) = realm.where(ChatMessage::class.java)\r\n        .equalTo(\"isInboxMessage\", true)\r\n        .equalTo(\"uuid\", replyToUserID)\r\n        .equalTo(\"userID\", userId)\r\n        .sort(\"timestamp\", Sort.DESCENDING)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "start_lineno" : "275",
  "methodName" : "getInboxMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/161",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.ChatMessage\noverride fun getInboxMessages(userId: String, replyToUserID: String?) = realm.where(ChatMessage::class.java)\r\n        .equalTo(\"isInboxMessage\", true)\r\n        .equalTo(\"uuid\", replyToUserID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "289",
  "ground_truth" : "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "context" : "override fun getInboxConversation(userId: String) = realm.where(InboxConversation::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .sort(\"timestamp\", Sort.DESCENDING)\r\n        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }",
  "start_lineno" : "284",
  "methodName" : "getInboxConversation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt",
  "task_id" : "habitica-android/162",
  "prompt" : "import io.realm.Sort\nimport com.habitrpg.android.habitica.models.social.InboxConversation\noverride fun getInboxConversation(userId: String) = realm.where(InboxConversation::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .sort(\"timestamp\", Sort.DESCENDING)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "13",
  "ground_truth" : "        val tags = realm.where(Tag::class.java).equalTo(\"id\", tagID).findAll()\r\n        executeTransaction { tags.deleteAllFromRealm() }\r\n    }",
  "context" : "override fun deleteTag(tagID: String) {\r\n        val tags = realm.where(Tag::class.java).equalTo(\"id\", tagID).findAll()\r\n        executeTransaction { tags.deleteAllFromRealm() }\r\n    }",
  "start_lineno" : "10",
  "methodName" : "deleteTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTagLocalRepository.kt",
  "task_id" : "habitica-android/163",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\noverride fun deleteTag(tagID: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "28",
  "ground_truth" : "            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getTasks(taskType: TaskType, userID: String, includedGroupIDs: Array<String>): Flow<List<Task>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return findTasks(taskType, userID)\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "23",
  "methodName" : "getTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/164",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTasks(taskType: TaskType, userID: String, includedGroupIDs: Array<String>): Flow<List<Task>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return findTasks(taskType, userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "            .equalTo(\"typeValue\", taskType.value)\r\n            .equalTo(\"ownerID\", ownerID)\r\n            .sort(\"position\", Sort.ASCENDING, \"dateCreated\", Sort.DESCENDING)\r\n            .findAll()\r\n    }",
  "context" : "private fun findTasks(\r\n        taskType: TaskType,\r\n        ownerID: String\r\n    ): RealmResults<Task> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"typeValue\", taskType.value)\r\n            .equalTo(\"ownerID\", ownerID)\r\n            .sort(\"position\", Sort.ASCENDING, \"dateCreated\", Sort.DESCENDING)\r\n            .findAll()\r\n    }",
  "start_lineno" : "30",
  "methodName" : "findTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/165",
  "prompt" : "import io.realm.RealmResults\nimport io.realm.Realm\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun findTasks(\r\n        taskType: TaskType,\r\n        ownerID: String\r\n    ): RealmResults<Task> {\r\n        return realm.where(Task::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "            .sort(\"position\", Sort.ASCENDING, \"dateCreated\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getTasks(userId: String): Flow<List<Task>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(Task::class.java).equalTo(\"ownerID\", userId)\r\n            .sort(\"position\", Sort.ASCENDING, \"dateCreated\", Sort.DESCENDING)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "41",
  "methodName" : "getTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/166",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTasks(userId: String): Flow<List<Task>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(Task::class.java).equalTo(\"ownerID\", userId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "        removeCompletedTodos(userId, tasks)\r\n        executeTransaction { realm1 -> realm1.insertOrUpdate(tasks) }\r\n    }",
  "context" : "override fun saveCompletedTodos(userId: String, tasks: MutableCollection<Task>) {\r\n        removeCompletedTodos(userId, tasks)\r\n        executeTransaction { realm1 -> realm1.insertOrUpdate(tasks) }\r\n    }",
  "start_lineno" : "77",
  "methodName" : "saveCompletedTodos",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/167",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun saveCompletedTodos(userId: String, tasks: MutableCollection<Task>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun removeOldChecklists(onlineItems: List<ChecklistItem>) {\r\n        val localItems = realm.where(ChecklistItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localItems.filterNot { onlineItems.contains(it) }\r\n        realm.executeTransaction {\r\n            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "removeOldChecklists",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/168",
  "prompt" : "import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nprivate fun removeOldChecklists(onlineItems: List<ChecklistItem>) {\r\n        val localItems = realm.where(ChecklistItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localItems.filterNot { onlineItems.contains(it) }\r\n        realm.executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun removeOldReminders(onlineReminders: List<RemindersItem>) {\r\n        val localReminders = realm.where(RemindersItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localReminders.filterNot { onlineReminders.contains(it) }\r\n        realm.executeTransaction {\r\n            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "92",
  "methodName" : "removeOldReminders",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/169",
  "prompt" : "import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.tasks.RemindersItem\nprivate fun removeOldReminders(onlineReminders: List<RemindersItem>) {\r\n        val localReminders = realm.where(RemindersItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localReminders.filterNot { onlineReminders.contains(it) }\r\n        realm.executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "                taskMap.remove(taskId)\r\n            }\r\n        }\r\n        return taskList\r\n    }",
  "context" : "private fun sortTasks(taskMap: MutableMap<String, Task>, taskOrder: List<String>): List<Task> {\r\n        val taskList = ArrayList<Task>()\r\n        var position = 0\r\n        for (taskId in taskOrder) {\r\n            val task = taskMap[taskId]\r\n            if (task != null) {\r\n                task.position = position\r\n                taskList.add(task)\r\n                position++\r\n                taskMap.remove(taskId)\r\n            }\r\n        }\r\n        return taskList\r\n    }",
  "start_lineno" : "102",
  "methodName" : "sortTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/170",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun sortTasks(taskMap: MutableMap<String, Task>, taskOrder: List<String>): List<Task> {\r\n        val taskList = ArrayList<Task>()\r\n        var position = 0\r\n        for (taskId in taskOrder) {\r\n            val task = taskMap[taskId]\r\n            if (task != null) {\r\n                task.position = position\r\n                taskList.add(task)\r\n                position++\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "152",
  "ground_truth" : "            for (localTask in tasksToDelete) {\r\n                localTask.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun removeCompletedTodos(userID: String, onlineTaskList: MutableCollection<Task>) {\r\n        val localTasks = realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"typeValue\", TaskType.TODO.value)\r\n            .equalTo(\"completed\", true)\r\n            .findAll()\r\n            .createSnapshot()\r\n        val tasksToDelete = localTasks.filterNot { onlineTaskList.contains(it) }\r\n        executeTransaction {\r\n            for (localTask in tasksToDelete) {\r\n                localTask.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "139",
  "methodName" : "removeCompletedTodos",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/171",
  "prompt" : "import kotlinx.coroutines.flow.filter\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun removeCompletedTodos(userID: String, onlineTaskList: MutableCollection<Task>) {\r\n        val localTasks = realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"typeValue\", TaskType.TODO.value)\r\n            .equalTo(\"completed\", true)\r\n            .findAll()\r\n            .createSnapshot()\r\n        val tasksToDelete = localTasks.filterNot { onlineTaskList.contains(it) }\r\n        executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "            if (task?.isManaged == true) {\r\n                task.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun deleteTask(taskID: String) {\r\n        val task = realm.where(Task::class.java).equalTo(\"id\", taskID).findFirst()\r\n        executeTransaction {\r\n            if (task?.isManaged == true) {\r\n                task.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "154",
  "methodName" : "deleteTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/172",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun deleteTask(taskID: String) {\r\n        val task = realm.where(Task::class.java).equalTo(\"id\", taskID).findFirst()\r\n        executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "        return realm.where(Task::class.java).equalTo(\"id\", taskId).findAll().toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getTask(taskId: String): Flow<Task> {\r\n        if (realm.isClosed) {\r\n            return emptyFlow()\r\n        }\r\n        return realm.where(Task::class.java).equalTo(\"id\", taskId).findAll().toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "163",
  "methodName" : "getTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/173",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTask(taskId: String): Flow<Task> {\r\n        if (realm.isClosed) {\r\n            return emptyFlow()\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "182",
  "ground_truth" : "                } else {\r\n                    task\r\n                }\r\n            }\r\n    }",
  "context" : "override fun getTaskCopy(taskId: String): Flow<Task> {\r\n        return getTask(taskId)\r\n            .map { task ->\r\n                return@map if (task.isManaged && task.isValid) {\r\n                    realm.copyFromRealm(task)\r\n                } else {\r\n                    task\r\n                }\r\n            }\r\n    }",
  "start_lineno" : "173",
  "methodName" : "getTaskCopy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/174",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport io.realm.Realm\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTaskCopy(taskId: String): Flow<Task> {\r\n        return getTask(taskId)\r\n            .map { task ->\r\n                return@map if (task.isManaged && task.isValid) {\r\n                    realm.copyFromRealm(task)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "187",
  "ground_truth" : "        val task = realm.where(Task::class.java).equalTo(\"id\", taskId).findFirst()\r\n        executeTransaction { task?.completed = true }\r\n    }",
  "context" : "override fun markTaskCompleted(taskId: String, isCompleted: Boolean) {\r\n        val task = realm.where(Task::class.java).equalTo(\"id\", taskId).findFirst()\r\n        executeTransaction { task?.completed = true }\r\n    }",
  "start_lineno" : "184",
  "methodName" : "markTaskCompleted",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/175",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun markTaskCompleted(taskId: String, isCompleted: Boolean) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "198",
  "ground_truth" : "                firstTask.position = secondPosition\r\n                secondTask.position = firstPosition\r\n            }\r\n        }\r\n    }",
  "context" : "override fun swapTaskPosition(firstPosition: Int, secondPosition: Int) {\r\n        val firstTask = realm.where(Task::class.java).equalTo(\"position\", firstPosition).findFirst()\r\n        val secondTask = realm.where(Task::class.java).equalTo(\"position\", secondPosition).findFirst()\r\n        if (firstTask != null && secondTask != null && firstTask.isValid && secondTask.isValid) {\r\n            executeTransaction {\r\n                firstTask.position = secondPosition\r\n                secondTask.position = firstPosition\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "189",
  "methodName" : "swapTaskPosition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/176",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun swapTaskPosition(firstPosition: Int, secondPosition: Int) {\r\n        val firstTask = realm.where(Task::class.java).equalTo(\"position\", firstPosition).findFirst()\r\n        val secondTask = realm.where(Task::class.java).equalTo(\"position\", secondPosition).findFirst()\r\n        if (firstTask != null && secondTask != null && firstTask.isValid && secondTask.isValid) {\r\n            executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "207",
  "ground_truth" : "            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getTaskAtPosition(taskType: String, position: Int): Flow<Task> {\r\n        return realm.where(Task::class.java).equalTo(\"typeValue\", taskType).equalTo(\"position\", position)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isNotEmpty() }\r\n            .map { it.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "200",
  "methodName" : "getTaskAtPosition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/177",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTaskAtPosition(taskType: String, position: Int): Flow<Task> {\r\n        return realm.where(Task::class.java).equalTo(\"typeValue\", taskType).equalTo(\"position\", position)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "215",
  "ground_truth" : "        realm.beginTransaction()\r\n        tasks.filter { daily.tasks.containsKey(it.id) }.forEach { it.isDue = daily.tasks[it.id]?.isDue }\r\n        realm.commitTransaction()\r\n        return daily\r\n    }",
  "context" : "override fun updateIsdue(daily: TaskList): TaskList {\r\n        val tasks = realm.where(Task::class.java).equalTo(\"typeValue\", TaskType.DAILY.value).findAll()\r\n        realm.beginTransaction()\r\n        tasks.filter { daily.tasks.containsKey(it.id) }.forEach { it.isDue = daily.tasks[it.id]?.isDue }\r\n        realm.commitTransaction()\r\n        return daily\r\n    }",
  "start_lineno" : "209",
  "methodName" : "updateIsdue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/178",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateIsdue(daily: TaskList): TaskList {\r\n        val tasks = realm.where(Task::class.java).equalTo(\"typeValue\", TaskType.DAILY.value).findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "            executeTransaction { _ ->\r\n                tasks.filter { taskOrder.contains(it.id) }.forEach { it.position = taskOrder.indexOf(it.id) }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun updateTaskPositions(taskOrder: List<String>) {\r\n        if (taskOrder.isNotEmpty()) {\r\n            val tasks = realm.where(Task::class.java).`in`(\"id\", taskOrder.toTypedArray()).findAll()\r\n            executeTransaction { _ ->\r\n                tasks.filter { taskOrder.contains(it.id) }.forEach { it.position = taskOrder.indexOf(it.id) }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "217",
  "methodName" : "updateTaskPositions",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/179",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateTaskPositions(taskOrder: List<String>) {\r\n        if (taskOrder.isNotEmpty()) {\r\n            val tasks = realm.where(Task::class.java).`in`(\"id\", taskOrder.toTypedArray()).findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "            .sort(\"position\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getErroredTasks(userID: String): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"hasErrored\", true)\r\n            .sort(\"position\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "226",
  "methodName" : "getErroredTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/180",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getErroredTasks(userID: String): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"hasErrored\", true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "244",
  "ground_truth" : "            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && !realmObject.isEmpty() }\r\n            .map { users -> users.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getUser(userID: String): Flow<User> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && !realmObject.isEmpty() }\r\n            .map { users -> users.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "236",
  "methodName" : "getUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/181",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\noverride fun getUser(userID: String): Flow<User> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "253",
  "ground_truth" : "            .equalTo(\"ownerID\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getTasksForChallenge(challengeID: String?, userID: String?): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"challengeID\", challengeID)\r\n            .equalTo(\"ownerID\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "246",
  "methodName" : "getTasksForChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt",
  "task_id" : "habitica-android/182",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTasksForChallenge(challengeID: String?, userID: String?): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"challengeID\", challengeID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && realmObject.isNotEmpty() }\r\n            .map { steps -> steps.first() }\r\n            .filterNotNull()\r\n    }",
  "context" : "override fun getTutorialStep(key: String): Flow<TutorialStep> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(TutorialStep::class.java).equalTo(\"identifier\", key)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && realmObject.isNotEmpty() }\r\n            .map { steps -> steps.first() }\r\n            .filterNotNull()\r\n    }",
  "start_lineno" : "15",
  "methodName" : "getTutorialStep",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTutorialLocalRepository.kt",
  "task_id" : "habitica-android/183",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.TutorialStep\noverride fun getTutorialStep(key: String): Flow<TutorialStep> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(TutorialStep::class.java).equalTo(\"identifier\", key)\r\n            .findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "            .`in`(\"identifier\", keys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getTutorialSteps(keys: List<String>): Flow<out List<TutorialStep>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(TutorialStep::class.java)\r\n            .`in`(\"identifier\", keys.toTypedArray())\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "25",
  "methodName" : "getTutorialSteps",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTutorialLocalRepository.kt",
  "task_id" : "habitica-android/184",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.TutorialStep\noverride fun getTutorialSteps(keys: List<String>): Flow<out List<TutorialStep>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(TutorialStep::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            .sort(\"index\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getAchievements(): Flow<List<Achievement>> {\r\n        return realm.where(Achievement::class.java)\r\n            .sort(\"index\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "getAchievements",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/185",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.Achievement\noverride fun getAchievements(): Flow<List<Achievement>> {\r\n        return realm.where(Achievement::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map { it.first()?.questAchievements ?: emptyList() }\r\n    }",
  "context" : "override fun getQuestAchievements(userID: String): Flow<List<QuestAchievement>> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded && it.size > 0 }\r\n            .map { it.first()?.questAchievements ?: emptyList() }\r\n    }",
  "start_lineno" : "61",
  "methodName" : "getQuestAchievements",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/186",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.QuestAchievement\nimport com.habitrpg.android.habitica.models.Achievement\noverride fun getQuestAchievements(userID: String): Flow<List<QuestAchievement>> {\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && !realmObject.isEmpty() }\r\n            .map { users -> users.first() }\r\n    }",
  "context" : "override fun getUser(userID: String): Flow<User?> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid && !realmObject.isEmpty() }\r\n            .map { users -> users.first() }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "getUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/187",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\noverride fun getUser(userID: String): Flow<User?> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            for (tag in tagsToDelete) {\r\n                tag.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun removeOldTags(userId: String, onlineTags: List<Tag>) {\r\n        val tags = realm.where(Tag::class.java).equalTo(\"userId\", userId).findAll().createSnapshot()\r\n        val tagsToDelete = tags.filterNot { onlineTags.contains(it) }\r\n        executeTransaction {\r\n            for (tag in tagsToDelete) {\r\n                tag.deleteFromRealm()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "104",
  "methodName" : "removeOldTags",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/188",
  "prompt" : "import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.Tag\nprivate fun removeOldTags(userId: String, onlineTags: List<Tag>) {\r\n        val tags = realm.where(Tag::class.java).equalTo(\"userId\", userId).findAll().createSnapshot()\r\n        val tagsToDelete = tags.filterNot { onlineTags.contains(it) }\r\n        executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            it.insertOrUpdate(messages)\r\n        }\r\n    }",
  "context" : "override fun saveMessages(messages: List<ChatMessage>) {\r\n        executeTransaction {\r\n            it.insertOrUpdate(messages)\r\n        }\r\n    }",
  "start_lineno" : "114",
  "methodName" : "saveMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/189",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride fun saveMessages(messages: List<ChatMessage>) {\r\n        executeTransaction {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "            .equalTo(\"userID\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getTeamPlans(userID: String): Flow<List<TeamPlan>> {\r\n        return realm.where(TeamPlan::class.java)\r\n            .equalTo(\"userID\", userID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "120",
  "methodName" : "getTeamPlans",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/190",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride fun getTeamPlans(userID: String): Flow<List<TeamPlan>> {\r\n        return realm.where(TeamPlan::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid }\r\n            .map { teams -> teams.firstOrNull() }\r\n    }",
  "context" : "override fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(Group::class.java)\r\n            .equalTo(\"id\", teamID)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { realmObject -> realmObject.isLoaded && realmObject.isValid }\r\n            .map { teams -> teams.firstOrNull() }\r\n    }",
  "start_lineno" : "128",
  "methodName" : "getTeamPlan",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/191",
  "prompt" : "import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return realm.where(Group::class.java)\r\n            .equalTo(\"id\", teamID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "147",
  "ground_truth" : "            .sort(\"lvl\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "context" : "override fun getSkills(user: User): Flow<List<Skill>> {\r\n        val habitClass =\r\n            if (user.preferences?.disableClasses == true) \"none\" else user.stats?.habitClass\r\n        return realm.where(Skill::class.java)\r\n            .equalTo(\"habitClass\", habitClass)\r\n            .sort(\"lvl\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "getSkills",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt",
  "task_id" : "habitica-android/192",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Skill\noverride fun getSkills(user: User): Flow<List<Skill>> {\r\n        val habitClass =\r\n            if (user.preferences?.disableClasses == true) \"none\" else user.stats?.habitClass\r\n        return realm.where(Skill::class.java)\r\n            .equalTo(\"habitClass\", habitClass)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "10",
  "ground_truth" : "    val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n    imm.hideSoftInputFromWindow(window.decorView.windowToken, 0)\r\n}",
  "context" : "fun Activity.hideKeyboard() {\r\n    val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n    imm.hideSoftInputFromWindow(window.decorView.windowToken, 0)\r\n}",
  "start_lineno" : "7",
  "methodName" : "hideKeyboard",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ActivityExtension.kt",
  "task_id" : "habitica-android/193",
  "prompt" : "import android.app.Activity\nfun Activity.hideKeyboard() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "        else -> {\r\n            type\r\n        }\r\n    }\r\n}",
  "context" : "fun getTranslatedAnimalType(c: Context?, type: String?): String? {\r\n    if (c == null) {\r\n        return type\r\n    }\r\n\r\n    return when (type) {\r\n        \"drop\" -> c.getString(R.string.standard)\r\n        \"quest\" -> c.getString(R.string.quest)\r\n        \"wacky\" -> c.getString(R.string.wacky)\r\n        \"special\" -> c.getString(R.string.special)\r\n        \"premium\" -> c.getString(R.string.magic_potion)\r\n        else -> {\r\n            type\r\n        }\r\n    }\r\n}",
  "start_lineno" : "11",
  "methodName" : "getTranslatedAnimalType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\AnimalExtensions.kt",
  "task_id" : "habitica-android/194",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Animal\nimport com.habitrpg.android.habitica.R\nimport android.content.Context\nfun getTranslatedAnimalType(c: Context?, type: String?): String? {\r\n    if (c == null) {\r\n        return type\r\n    }\r\n\r\n    return when (type) {\r\n        \"drop\" -> c.getString(R.string.standard)\r\n        \"quest\" -> c.getString(R.string.quest)\r\n        \"wacky\" -> c.getString(R.string.wacky)\r\n        \"special\" -> c.getString(R.string.special)\r\n        \"premium\" -> c.getString(R.string.magic_potion)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "            cal.set(Calendar.MINUTE, 0)\r\n            cal.set(Calendar.SECOND, 0)\r\n            cal.set(Calendar.MILLISECOND, 0)\r\n            return cal.time\r\n        }",
  "context" : "fun createDate(year: Int, month: Int, day: Int): Date {\r\n            val cal = Calendar.getInstance()\r\n            cal.set(Calendar.YEAR, year)\r\n            cal.set(Calendar.MONTH, month)\r\n            cal.set(Calendar.DAY_OF_MONTH, day)\r\n            cal.set(Calendar.HOUR_OF_DAY, 0)\r\n            cal.set(Calendar.MINUTE, 0)\r\n            cal.set(Calendar.SECOND, 0)\r\n            cal.set(Calendar.MILLISECOND, 0)\r\n            return cal.time\r\n        }",
  "start_lineno" : "16",
  "methodName" : "createDate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\DateExtensions.kt",
  "task_id" : "habitica-android/195",
  "prompt" : "import java.util.Date\nimport java.util.Calendar\nimport com.habitrpg.android.habitica.R\nfun createDate(year: Int, month: Int, day: Int): Date {\r\n            val cal = Calendar.getInstance()\r\n            cal.set(Calendar.YEAR, year)\r\n            cal.set(Calendar.MONTH, month)\r\n            cal.set(Calendar.DAY_OF_MONTH, day)\r\n            cal.set(Calendar.HOUR_OF_DAY, 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "            cal1.time = date1\r\n            cal2.time = date2\r\n            return cal1[Calendar.DAY_OF_YEAR] == cal2[Calendar.DAY_OF_YEAR] &&\r\n                cal1[Calendar.YEAR] == cal2[Calendar.YEAR]\r\n        }",
  "context" : "fun isSameDay(date1 : Date, date2 : Date) : Boolean {\r\n            val cal1 = Calendar.getInstance()\r\n            val cal2 = Calendar.getInstance()\r\n            cal1.time = date1\r\n            cal2.time = date2\r\n            return cal1[Calendar.DAY_OF_YEAR] == cal2[Calendar.DAY_OF_YEAR] &&\r\n                cal1[Calendar.YEAR] == cal2[Calendar.YEAR]\r\n        }",
  "start_lineno" : "28",
  "methodName" : "isSameDay",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\DateExtensions.kt",
  "task_id" : "habitica-android/196",
  "prompt" : "import java.util.Date\nimport java.util.Calendar\nfun isSameDay(date1 : Date, date2 : Date) : Boolean {\r\n            val cal1 = Calendar.getInstance()\r\n            val cal2 = Calendar.getInstance()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "        SimpleDateFormat.getDateInstance(DateFormat.LONG, locale)\r\n    }\r\n\r\n    return dateFormatter.format(this)\r\n}",
  "context" : "fun Date.formatForLocale(): String {\r\n    val locale = Locale.getDefault()\r\n    val dateFormatter: DateFormat = if (locale == Locale.US || locale == Locale.ENGLISH) {\r\n        SimpleDateFormat(\"M/d/yy\", locale)\r\n    } else {\r\n        SimpleDateFormat.getDateInstance(DateFormat.LONG, locale)\r\n    }\r\n\r\n    return dateFormatter.format(this)\r\n}",
  "start_lineno" : "152",
  "methodName" : "formatForLocale",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\DateExtensions.kt",
  "task_id" : "habitica-android/197",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.text.DateFormat\nfun Date.formatForLocale(): String {\r\n    val locale = Locale.getDefault()\r\n    val dateFormatter: DateFormat = if (locale == Locale.US || locale == Locale.ENGLISH) {\r\n        SimpleDateFormat(\"M/d/yy\", locale)\r\n    } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "10",
  "ground_truth" : "    }\r\n    return \"\"\r\n}",
  "context" : "fun JsonObject?.getAsString(key: String): String {\r\n    if (this?.get(key)?.isJsonPrimitive == true) {\r\n        return this.get(key)?.asString ?: \"\"\r\n    }\r\n    return \"\"\r\n}",
  "start_lineno" : "5",
  "methodName" : "getAsString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\JsonObjectExtensions.kt",
  "task_id" : "habitica-android/198",
  "prompt" : "import com.google.gson.JsonObject\nfun JsonObject?.getAsString(key: String): String {\r\n    if (this?.get(key)?.isJsonPrimitive == true) {\r\n        return this.get(key)?.asString ?: \"\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "12",
  "ground_truth" : "        flags + PendingIntent.FLAG_IMMUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}",
  "context" : "fun withImmutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n        flags + PendingIntent.FLAG_IMMUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}",
  "start_lineno" : "6",
  "methodName" : "withImmutableFlag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\PendingIntentExtensions.kt",
  "task_id" : "habitica-android/199",
  "prompt" : "import android.os.Build\nfun withImmutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "        flags + PendingIntent.FLAG_MUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}",
  "context" : "fun withMutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r\n        flags + PendingIntent.FLAG_MUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}",
  "start_lineno" : "14",
  "methodName" : "withMutableFlag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\PendingIntentExtensions.kt",
  "task_id" : "habitica-android/200",
  "prompt" : "import android.os.Build\nfun withMutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "    }\r\n    updateConfiguration(configuration, displayMetrics)\r\n\r\n    Firebase.crashlytics.setCustomKey(\"language\", locale.toLanguageTag())\r\n}",
  "context" : "fun Resources.forceLocale(activity: BaseActivity, locale: Locale) {\r\n    Locale.setDefault(locale)\r\n    val configuration = Configuration()\r\n    configuration.setLocale(locale)\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        activity.createConfigurationContext(configuration)\r\n    }\r\n    updateConfiguration(configuration, displayMetrics)\r\n\r\n    Firebase.crashlytics.setCustomKey(\"language\", locale.toLanguageTag())\r\n}",
  "start_lineno" : "11",
  "methodName" : "forceLocale",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ResourcesExtensions.kt",
  "task_id" : "habitica-android/201",
  "prompt" : "import java.util.Locale\nimport com.habitrpg.android.habitica.ui.activities.BaseActivity\nimport android.os.Build\nimport android.content.res.Resources\nimport android.content.res.Configuration\nfun Resources.forceLocale(activity: BaseActivity, locale: Locale) {\r\n    Locale.setDefault(locale)\r\n    val configuration = Configuration()\r\n    configuration.setLocale(locale)\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        activity.createConfigurationContext(configuration)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "17",
  "ground_truth" : "        decorView.systemUiVisibility = if (isLight) View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR else View.SYSTEM_UI_FLAG_VISIBLE\r\n    } else {\r\n        statusBarColor = context.getThemeColor(R.attr.colorPrimaryDark)\r\n    }\r\n}",
  "context" : "fun Window.updateStatusBarColor(color: Int, isLight: Boolean) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n        statusBarColor = color\r\n        @Suppress(\"DEPRECATION\")\r\n        decorView.systemUiVisibility = if (isLight) View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR else View.SYSTEM_UI_FLAG_VISIBLE\r\n    } else {\r\n        statusBarColor = context.getThemeColor(R.attr.colorPrimaryDark)\r\n    }\r\n}",
  "start_lineno" : "9",
  "methodName" : "updateStatusBarColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\WindowExtensions.kt",
  "task_id" : "habitica-android/202",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.Window\nimport android.os.Build\nfun Window.updateStatusBarColor(color: Int, isLight: Boolean) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n        statusBarColor = color\r\n        @Suppress(\"DEPRECATION\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "    } else {\r\n        val defaultZone: ZoneId = ZoneId.of(\"UTC\")\r\n        (parsed as LocalDateTime).atZone(defaultZone)\r\n    }\r\n}",
  "context" : "fun String.parseToZonedDateTime(): ZonedDateTime? {\r\n    val parsed: TemporalAccessor = formatter().parseBest(\r\n        this,\r\n        ZonedDateTime::from,\r\n        LocalDateTime::from\r\n    )\r\n    return if (parsed is ZonedDateTime) {\r\n        parsed\r\n    } else {\r\n        val defaultZone: ZoneId = ZoneId.of(\"UTC\")\r\n        (parsed as LocalDateTime).atZone(defaultZone)\r\n    }\r\n}",
  "start_lineno" : "17",
  "methodName" : "parseToZonedDateTime",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ZonedDateExtensions.kt",
  "task_id" : "habitica-android/203",
  "prompt" : "import java.util.Date\nimport java.time.temporal.TemporalAccessor\nimport java.time.ZonedDateTime\nimport java.time.LocalDateTime\nfun String.parseToZonedDateTime(): ZonedDateTime? {\r\n    val parsed: TemporalAccessor = formatter().parseBest(\r\n        this,\r\n        ZonedDateTime::from,\r\n        LocalDateTime::from\r\n    )\r\n    return if (parsed is ZonedDateTime) {\r\n        parsed\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        .append(DateTimeFormatter.ISO_LOCAL_TIME)\r\n        .appendPattern(\"[XX]\")\r\n        .toFormatter()",
  "context" : "fun formatter(): DateTimeFormatter =\r\n    DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE)\r\n        .appendPattern(\"['T'][' ']\")\r\n        .append(DateTimeFormatter.ISO_LOCAL_TIME)\r\n        .appendPattern(\"[XX]\")\r\n        .toFormatter()",
  "start_lineno" : "42",
  "methodName" : "formatter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ZonedDateExtensions.kt",
  "task_id" : "habitica-android/204",
  "prompt" : "import java.util.Date\nimport java.time.format.DateTimeFormatterBuilder\nimport java.time.format.DateTimeFormatter\nfun formatter(): DateTimeFormatter =\r\n    DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE)\r\n        .appendPattern(\"['T'][' ']\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        DayOfWeek.SATURDAY -> repeatDays.s\r\n        DayOfWeek.SUNDAY -> repeatDays.su\r\n        else -> false\r\n    }\r\n}",
  "context" : "fun ZonedDateTime.matchesRepeatDays(repeatDays: Days?): Boolean {\r\n    repeatDays ?: return true // If no repeatDays specified, assume it matches\r\n\r\n    return when (this.dayOfWeek) {\r\n        DayOfWeek.MONDAY -> repeatDays.m\r\n        DayOfWeek.TUESDAY -> repeatDays.t\r\n        DayOfWeek.WEDNESDAY -> repeatDays.w\r\n        DayOfWeek.THURSDAY -> repeatDays.th\r\n        DayOfWeek.FRIDAY -> repeatDays.f\r\n        DayOfWeek.SATURDAY -> repeatDays.s\r\n        DayOfWeek.SUNDAY -> repeatDays.su\r\n        else -> false\r\n    }\r\n}",
  "start_lineno" : "50",
  "methodName" : "matchesRepeatDays",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ZonedDateExtensions.kt",
  "task_id" : "habitica-android/205",
  "prompt" : "import java.util.Date\nimport java.time.ZonedDateTime\nimport java.time.DayOfWeek\nimport com.habitrpg.android.habitica.models.tasks.Days\nfun ZonedDateTime.matchesRepeatDays(repeatDays: Days?): Boolean {\r\n    repeatDays ?: return true // If no repeatDays specified, assume it matches\r\n\r\n    return when (this.dayOfWeek) {\r\n        DayOfWeek.MONDAY -> repeatDays.m\r\n        DayOfWeek.TUESDAY -> repeatDays.t\r\n        DayOfWeek.WEDNESDAY -> repeatDays.w\r\n        DayOfWeek.THURSDAY -> repeatDays.th\r\n        DayOfWeek.FRIDAY -> repeatDays.f\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        super.onResume(owner)\r\n        lastResumeTime = Date().time\r\n    }",
  "context" : "override fun onResume(owner : LifecycleOwner) {\r\n        super.onResume(owner)\r\n        lastResumeTime = Date().time\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/206",
  "prompt" : "import androidx.lifecycle.LifecycleOwner\noverride fun onResume(owner : LifecycleOwner) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "        val duration = Date().time - lastResumeTime\r\n        addDurationToDay(duration / 1000)\r\n    }",
  "context" : "override fun onPause(owner : LifecycleOwner) {\r\n        super.onPause(owner)\r\n        val duration = Date().time - lastResumeTime\r\n        addDurationToDay(duration / 1000)\r\n    }",
  "start_lineno" : "57",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/207",
  "prompt" : "import androidx.lifecycle.LifecycleOwner\noverride fun onPause(owner : LifecycleOwner) {\r\n        super.onPause(owner)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "237",
  "ground_truth" : "            realm1.deleteAll()\r\n            realm1.close()\r\n        }\r\n        return true\r\n    }",
  "context" : "override fun deleteDatabase(name: String): Boolean {\r\n        val realm = Realm.getDefaultInstance()\r\n        realm.executeTransaction { realm1 ->\r\n            realm1.deleteAll()\r\n            realm1.close()\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "230",
  "methodName" : "deleteDatabase",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/208",
  "prompt" : "import io.realm.Realm\noverride fun deleteDatabase(name: String): Boolean {\r\n        val realm = Realm.getDefaultInstance()\r\n        realm.executeTransaction { realm1 ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "247",
  "ground_truth" : "            .build()\r\n        remoteConfig.setConfigSettingsAsync(configSettings)\r\n        remoteConfig.setDefaultsAsync(R.xml.remote_config_defaults)\r\n        remoteConfig.fetchAndActivate()\r\n    }",
  "context" : "private fun setupRemoteConfig() {\r\n        val remoteConfig = FirebaseRemoteConfig.getInstance()\r\n        val configSettings = FirebaseRemoteConfigSettings.Builder()\r\n            .setMinimumFetchIntervalInSeconds(if (BuildConfig.DEBUG) 0 else 3600)\r\n            .build()\r\n        remoteConfig.setConfigSettingsAsync(configSettings)\r\n        remoteConfig.setDefaultsAsync(R.xml.remote_config_defaults)\r\n        remoteConfig.fetchAndActivate()\r\n    }",
  "start_lineno" : "239",
  "methodName" : "setupRemoteConfig",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/209",
  "prompt" : "import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig\nimport android.os.Build\nprivate fun setupRemoteConfig() {\r\n        val remoteConfig = FirebaseRemoteConfig.getInstance()\r\n        val configSettings = FirebaseRemoteConfigSettings.Builder()\r\n            .setMinimumFetchIntervalInSeconds(if (BuildConfig.DEBUG) 0 else 3600)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "260",
  "ground_truth" : "            if (BuildConfig.DEBUG) {\r\n                Log.d(\"Token\", \"Firebase Notification Token: $token\")\r\n            }\r\n        }\r\n    }",
  "context" : "private fun setupNotifications() {\r\n        FirebaseInstallations.getInstance().id.addOnCompleteListener { task ->\r\n            if (!task.isSuccessful) {\r\n                Log.w(\"Token\", \"getInstanceId failed\", task.exception)\r\n                return@addOnCompleteListener\r\n            }\r\n            val token = task.result\r\n            if (BuildConfig.DEBUG) {\r\n                Log.d(\"Token\", \"Firebase Notification Token: $token\")\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "249",
  "methodName" : "setupNotifications",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/210",
  "prompt" : "import com.google.firebase.installations.FirebaseInstallations\nimport android.util.Log\nprivate fun setupNotifications() {\r\n        FirebaseInstallations.getInstance().id.addOnCompleteListener { task ->\r\n            if (!task.isSuccessful) {\r\n                Log.w(\"Token\", \"getInstanceId failed\", task.exception)\r\n                return@addOnCompleteListener\r\n            }\r\n            val token = task.result\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "276",
  "ground_truth" : "            currentActivity = null\r\n        }\r\n    }",
  "context" : "override fun onActivityPaused(activity: Activity) {\r\n        if (currentActivity?.get() == activity) {\r\n            currentActivity = null\r\n        }\r\n    }",
  "start_lineno" : "272",
  "methodName" : "onActivityPaused",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/211",
  "prompt" : "import android.app.Activity\noverride fun onActivityPaused(activity: Activity) {\r\n        if (currentActivity?.get() == activity) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var lastResumeTime\nvar lazyApiHelper ApiClient\nvar sharedPrefs SharedPreferences\nvar pushNotificationManager PushNotificationManager\nvar authenticationHandler AuthenticationHandler\nvar lifecycleTracker ApplicationLifecycleTracker\nvar currentActivity WeakReference<BaseActivity>?",
  "app_type" : "life",
  "end_lineno" : "323",
  "ground_truth" : "            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            context.startActivity(intent)\r\n        }",
  "context" : "private fun startActivity(activityClass: Class<*>, context: Context) {\r\n            val intent = Intent(context, activityClass)\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            context.startActivity(intent)\r\n        }",
  "start_lineno" : "319",
  "methodName" : "startActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt",
  "task_id" : "habitica-android/212",
  "prompt" : "import android.content.Intent\nimport android.content.Context\nimport android.app.Activity\nprivate fun startActivity(activityClass: Class<*>, context: Context) {\r\n            val intent = Intent(context, activityClass)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "        null\r\n    } catch (ex: UnsupportedEncodingException) {\r\n        null\r\n    }\r\n}",
  "context" : "fun String.md5(): String? {\r\n    return try {\r\n        val md = MessageDigest.getInstance(\"MD5\")\r\n        val array = md.digest(this.toByteArray())\r\n        val sb = StringBuffer()\r\n        for (i in array.indices) {\r\n            sb.append(Integer.toHexString(array[i].toInt() and 0xFF or 0x100).substring(1, 3))\r\n        }\r\n        sb.toString()\r\n    } catch (e: java.security.NoSuchAlgorithmException) {\r\n        null\r\n    } catch (ex: UnsupportedEncodingException) {\r\n        null\r\n    }\r\n}",
  "start_lineno" : "46",
  "methodName" : "md5",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/213",
  "prompt" : "import java.security.MessageDigest\nfun String.md5(): String? {\r\n    return try {\r\n        val md = MessageDigest.getInstance(\"MD5\")\r\n        val array = md.digest(this.toByteArray())\r\n        val sb = StringBuffer()\r\n        for (i in array.indices) {\r\n            sb.append(Integer.toHexString(array[i].toInt() and 0xFF or 0x100).substring(1, 3))\r\n        }\r\n        sb.toString()\r\n    } catch (e: java.security.NoSuchAlgorithmException) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "                sharedPreferences.edit {\r\n                    remove(\"nextAd${type.name}\")\r\n                }\r\n            }\r\n        }",
  "context" : "fun setNextAllowedDate(type: AdType) {\r\n            val date = type.cooldownTime\r\n            if (date != null) {\r\n                nextAdAllowed[type] = date\r\n                sharedPreferences.edit {\r\n                    putLong(\"nextAd${type.name}\", date.time)\r\n                }\r\n            } else {\r\n                nextAdAllowed.remove(type)\r\n                sharedPreferences.edit {\r\n                    remove(\"nextAd${type.name}\")\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "88",
  "methodName" : "setNextAllowedDate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/214",
  "prompt" : "import java.util.Date\nimport androidx.core.content.edit\nfun setNextAllowedDate(type: AdType) {\r\n            val date = type.cooldownTime\r\n            if (date != null) {\r\n                nextAdAllowed[type] = date\r\n                sharedPreferences.edit {\r\n                    putLong(\"nextAd${type.name}\", date.time)\r\n                }\r\n            } else {\r\n                nextAdAllowed.remove(type)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "                AdStatus.INITIALIZING -> {\r\n                    return\r\n                }\r\n            }\r\n        }",
  "context" : "fun whenAdsInitialized(context: Context, onComplete: () -> Unit) {\r\n            when (currentAdStatus) {\r\n                AdStatus.READY -> {\r\n                    onComplete()\r\n                }\r\n                AdStatus.DISABLED -> {\r\n                    return\r\n                }\r\n                AdStatus.UNINITIALIZED -> {\r\n                    initialize(context) {\r\n                        onComplete()\r\n                    }\r\n                }\r\n                AdStatus.INITIALIZING -> {\r\n                    return\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "122",
  "methodName" : "whenAdsInitialized",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/215",
  "prompt" : "import android.content.Context\nfun whenAdsInitialized(context: Context, onComplete: () -> Unit) {\r\n            when (currentAdStatus) {\r\n                AdStatus.READY -> {\r\n                    onComplete()\r\n                }\r\n                AdStatus.DISABLED -> {\r\n                    return\r\n                }\r\n                AdStatus.UNINITIALIZED -> {\r\n                    initialize(context) {\r\n                        onComplete()\r\n                    }\r\n                }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "                if (time > 0) {\r\n                    nextAdAllowed[type] = Date(time)\r\n                }\r\n            }\r\n        }",
  "context" : "fun setup(sharedPrefs: SharedPreferences) {\r\n            this.sharedPreferences = sharedPrefs\r\n\r\n            for (type in AdType.values()) {\r\n                val time = sharedPrefs.getLong(\"nextAd${type.name}\", 0)\r\n                if (time > 0) {\r\n                    nextAdAllowed[type] = Date(time)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "141",
  "methodName" : "setup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/216",
  "prompt" : "import android.content.SharedPreferences\nfun setup(sharedPrefs: SharedPreferences) {\r\n            this.sharedPreferences = sharedPrefs\r\n\r\n            for (type in AdType.values()) {\r\n                val time = sharedPrefs.getLong(\"nextAd${type.name}\", 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "205",
  "ground_truth" : "            AdStatus.INITIALIZING -> {\r\n                return\r\n            }\r\n        }\r\n    }",
  "context" : "fun show() {\r\n        when (currentAdStatus) {\r\n            AdStatus.READY -> {\r\n                showRewardedAd()\r\n            }\r\n            AdStatus.DISABLED -> {\r\n                rewardAction(false)\r\n                return\r\n            }\r\n            AdStatus.UNINITIALIZED -> {\r\n                initialize(activity) {\r\n                    showRewardedAd()\r\n                }\r\n            }\r\n            AdStatus.INITIALIZING -> {\r\n                return\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "187",
  "methodName" : "show",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/217",
  "prompt" : "fun show() {\r\n        when (currentAdStatus) {\r\n            AdStatus.READY -> {\r\n                showRewardedAd()\r\n            }\r\n            AdStatus.DISABLED -> {\r\n                rewardAction(false)\r\n                return\r\n            }\r\n            AdStatus.UNINITIALIZED -> {\r\n                initialize(activity) {\r\n                    showRewardedAd()\r\n                }\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nval TAG\nvar currentAdStatus\nvar nextAdAllowed MutableMap<AdType, Date>",
  "app_type" : "life",
  "end_lineno" : "221",
  "ground_truth" : "            setNextAllowedDate(type)\r\n        } else {\r\n            Log.d(TAG, \"The rewarded ad wasn't ready yet.\")\r\n        }*/\r\n    }",
  "context" : "private fun showRewardedAd() {\r\n        if (nextAdAllowedDate(type)?.after(Date()) == true) {\r\n            return\r\n        }\r\n        /*if (rewardedAd != null) {\r\n            rewardedAd?.show(activity, this)\r\n            setNextAllowedDate(type)\r\n        } else {\r\n            Log.d(TAG, \"The rewarded ad wasn't ready yet.\")\r\n        }*/\r\n    }",
  "start_lineno" : "211",
  "methodName" : "showRewardedAd",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt",
  "task_id" : "habitica-android/218",
  "prompt" : "import java.util.Date\nprivate fun showRewardedAd() {\r\n        if (nextAdAllowedDate(type)?.after(Date()) == true) {\r\n            return\r\n        }\r\n        /*if (rewardedAd != null) {\r\n            rewardedAd?.show(activity, this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var firebase FirebaseAnalytics\nvar amplitude Amplitude",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        additionalData[\"page\"] = page\r\n        sendEvent(\"navigated $page\", EventCategory.NAVIGATION, HitType.PAGEVIEW, additionalData)\r\n    }",
  "context" : "fun sendNavigationEvent(page: String) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"page\"] = page\r\n        sendEvent(\"navigated $page\", EventCategory.NAVIGATION, HitType.PAGEVIEW, additionalData)\r\n    }",
  "start_lineno" : "70",
  "methodName" : "sendNavigationEvent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt",
  "task_id" : "habitica-android/219",
  "prompt" : "fun sendNavigationEvent(page: String) {\r\n        val additionalData = HashMap<String, Any>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var firebase FirebaseAnalytics\nvar amplitude Amplitude",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "                context\r\n            )\r\n        )\r\n        firebase = FirebaseAnalytics.getInstance(context)\r\n    }",
  "context" : "fun initialize(context: Context) {\r\n        amplitude = Amplitude(\r\n            Configuration(\r\n                context.getString(R.string.amplitude_app_id),\r\n                context\r\n            )\r\n        )\r\n        firebase = FirebaseAnalytics.getInstance(context)\r\n    }",
  "start_lineno" : "76",
  "methodName" : "initialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt",
  "task_id" : "habitica-android/220",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.amplitude.android.Configuration\nimport com.amplitude.android.Amplitude\nimport android.content.Context\nfun initialize(context: Context) {\r\n        amplitude = Amplitude(\r\n            Configuration(\r\n                context.getString(R.string.amplitude_app_id),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var firebase FirebaseAnalytics\nvar amplitude Amplitude",
  "app_type" : "life",
  "end_lineno" : "95",
  "ground_truth" : "        }\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.identify(identify)\r\n        }\r\n    }",
  "context" : "fun identify(sharedPrefs: SharedPreferences) {\r\n        val identify = Identify()\r\n            .setOnce(\"androidStore\", BuildConfig.STORE)\r\n        sharedPrefs.getString(\"launch_screen\", \"\")?.let {\r\n            identify.set(\"launch_screen\", it)\r\n        }\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.identify(identify)\r\n        }\r\n    }",
  "start_lineno" : "86",
  "methodName" : "identify",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt",
  "task_id" : "habitica-android/221",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.BuildConfig\nimport com.amplitude.android.events.Identify\nimport android.content.SharedPreferences\nfun identify(sharedPrefs: SharedPreferences) {\r\n        val identify = Identify()\r\n            .setOnce(\"androidStore\", BuildConfig.STORE)\r\n        sharedPrefs.getString(\"launch_screen\", \"\")?.let {\r\n            identify.set(\"launch_screen\", it)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var firebase FirebaseAnalytics\nvar amplitude Amplitude",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "        FirebaseCrashlytics.getInstance().setUserId(userID)\r\n        if (this::firebase.isInitialized) {\r\n            firebase.setUserId(userID)\r\n        }\r\n    }",
  "context" : "fun setUserID(userID: String) {\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.setUserId(userID)\r\n        }\r\n        FirebaseCrashlytics.getInstance().setUserId(userID)\r\n        if (this::firebase.isInitialized) {\r\n            firebase.setUserId(userID)\r\n        }\r\n    }",
  "start_lineno" : "97",
  "methodName" : "setUserID",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt",
  "task_id" : "habitica-android/222",
  "prompt" : "fun setUserID(userID: String) {\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.setUserId(userID)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var firebase FirebaseAnalytics\nvar amplitude Amplitude",
  "app_type" : "life",
  "end_lineno" : "114",
  "ground_truth" : "        }\r\n        if (this::firebase.isInitialized) {\r\n            firebase.setUserProperty(identifier, value?.toString())\r\n        }\r\n    }",
  "context" : "fun setUserProperty(identifier: String, value: Any?) {\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.identify(mapOf(identifier to value))\r\n        }\r\n        if (this::firebase.isInitialized) {\r\n            firebase.setUserProperty(identifier, value?.toString())\r\n        }\r\n    }",
  "start_lineno" : "107",
  "methodName" : "setUserProperty",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt",
  "task_id" : "habitica-android/223",
  "prompt" : "fun setUserProperty(identifier: String, value: Any?) {\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.identify(mapOf(identifier to value))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var worldState WorldState?\nval remoteConfig",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "        val type = object : TypeToken<Map<String, Map<String, String>>>() {}.type\r\n        return Gson().fromJson(remoteConfig.getString(\"spriteSubstitutions\"), type)\r\n    }",
  "context" : "override fun spriteSubstitutions(): Map<String, Map<String, String>> {\r\n        val type = object : TypeToken<Map<String, Map<String, String>>>() {}.type\r\n        return Gson().fromJson(remoteConfig.getString(\"spriteSubstitutions\"), type)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "spriteSubstitutions",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AppConfigManager.kt",
  "task_id" : "habitica-android/224",
  "prompt" : "override fun spriteSubstitutions(): Map<String, Map<String, String>> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var worldState WorldState?\nval remoteConfig",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            preferences.getString(\"task_display\", \"standard\") ?: \"standard\"\r\n        } else {\r\n            \"standard\"\r\n        }\r\n    }",
  "context" : "fun taskDisplayMode(context: Context): String {\r\n        return if (enableTaskDisplayMode()) {\r\n            val preferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n            preferences.getString(\"task_display\", \"standard\") ?: \"standard\"\r\n        } else {\r\n            \"standard\"\r\n        }\r\n    }",
  "start_lineno" : "111",
  "methodName" : "taskDisplayMode",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AppConfigManager.kt",
  "task_id" : "habitica-android/225",
  "prompt" : "import androidx.preference.PreferenceManager\nimport android.content.Context\nfun taskDisplayMode(context: Context): String {\r\n        return if (enableTaskDisplayMode()) {\r\n            val preferences = PreferenceManager.getDefaultSharedPreferences(context)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var worldState WorldState?\nval remoteConfig",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "        val type = object : TypeToken<List<Map<String, String>>>() {}.type\r\n        return Gson().fromJson(remoteConfig.getString(\"knownIssues\"), type)\r\n    }",
  "context" : "fun knownIssues(): List<Map<String, String>> {\r\n        val type = object : TypeToken<List<Map<String, String>>>() {}.type\r\n        return Gson().fromJson(remoteConfig.getString(\"knownIssues\"), type)\r\n    }",
  "start_lineno" : "141",
  "methodName" : "knownIssues",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AppConfigManager.kt",
  "task_id" : "habitica-android/226",
  "prompt" : "fun knownIssues(): List<Map<String, String>> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var worldState WorldState?\nval remoteConfig",
  "app_type" : "life",
  "end_lineno" : "177",
  "ground_truth" : "        val events = ((worldState?.events as? List<WorldStateEvent>) ?: listOf(worldState?.currentEvent))\r\n        return events.firstOrNull { it?.eventKey == \"birthday10\" && it.end?.after(Date()) == true }\r\n    }",
  "context" : "fun getBirthdayEvent(): WorldStateEvent? {\r\n        val events = ((worldState?.events as? List<WorldStateEvent>) ?: listOf(worldState?.currentEvent))\r\n        return events.firstOrNull { it?.eventKey == \"birthday10\" && it.end?.after(Date()) == true }\r\n    }",
  "start_lineno" : "174",
  "methodName" : "getBirthdayEvent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AppConfigManager.kt",
  "task_id" : "habitica-android/227",
  "prompt" : "import com.habitrpg.android.habitica.models.WorldStateEvent\nimport com.habitrpg.android.habitica.models.WorldState\nfun getBirthdayEvent(): WorldStateEvent? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eventEnd Date?",
  "app_type" : "life",
  "end_lineno" : "17",
  "ground_truth" : "            }\r\n            when (name) {\r\n                \"invert\" -> invertFools()\r\n            }\r\n        }",
  "context" : "fun handle(name: String?, endDate: Date?) {\r\n            if (endDate != null) {\r\n                this.eventEnd = endDate\r\n            }\r\n            when (name) {\r\n                \"invert\" -> invertFools()\r\n            }\r\n        }",
  "start_lineno" : "10",
  "methodName" : "handle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AprilFoolsHandler.kt",
  "task_id" : "habitica-android/228",
  "prompt" : "import java.util.Date\nfun handle(name: String?, endDate: Date?) {\r\n            if (endDate != null) {\r\n                this.eventEnd = endDate\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eventEnd Date?",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "                } else {\r\n                    InvertPostProcessor()\r\n                }\r\n            }*/\r\n        }",
  "context" : "private fun invertFools() {\r\n            /*AvatarView.postProcessors[AvatarView.LayerType.PET] = {\r\n                if (Date().after(eventEnd)) {\r\n                    null\r\n                } else {\r\n                    InvertPostProcessor()\r\n                }\r\n            }*/\r\n        }",
  "start_lineno" : "19",
  "methodName" : "invertFools",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AprilFoolsHandler.kt",
  "task_id" : "habitica-android/229",
  "prompt" : "import java.util.Date\nprivate fun invertFools() {\r\n            /*AvatarView.postProcessors[AvatarView.LayerType.PET] = {\r\n                if (Date().after(eventEnd)) {\r\n                    null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "    val lifecycleAwareFlow = rememberFlow(flow = this)\r\n    return lifecycleAwareFlow.collectAsState(initial = initial, context = context)\r\n}",
  "context" : "\r\n@Composable\r\nfun <T : R, R> Flow<T>.collectAsStateLifecycleAware(\r\n    initial: R,\r\n    context: CoroutineContext = EmptyCoroutineContext\r\n): State<R> {\r\n    val lifecycleAwareFlow = rememberFlow(flow = this)\r\n    return lifecycleAwareFlow.collectAsState(initial = initial, context = context)\r\n}",
  "start_lineno" : "22",
  "methodName" : "collectAsStateLifecycleAware",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\LifecycleCollect.kt",
  "task_id" : "habitica-android/230",
  "prompt" : "import kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.coroutines.CoroutineContext\nimport kotlinx.coroutines.flow.Flow\nimport androidx.lifecycle.Lifecycle\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun <T : R, R> Flow<T>.collectAsStateLifecycleAware(\r\n    initial: R,\r\n    context: CoroutineContext = EmptyCoroutineContext\r\n): State<R> {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "                MainNavigationController.navigate(R.id.inboxMessageListFragment, bundleOf(\"userID\" to userID, \"username\" to userName))\r\n            } else {\r\n                MainNavigationController.navigate(R.id.inboxFragment)\r\n            }\r\n        }",
  "context" : "private fun openPrivateMessageScreen(userID: String?, userName: String?) {\r\n            if (userID != null && userName != null) {\r\n                MainNavigationController.navigate(R.id.inboxMessageListFragment, bundleOf(\"userID\" to userID, \"username\" to userName))\r\n            } else {\r\n                MainNavigationController.navigate(R.id.inboxFragment)\r\n            }\r\n        }",
  "start_lineno" : "42",
  "methodName" : "openPrivateMessageScreen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationOpenHandler.kt",
  "task_id" : "habitica-android/231",
  "prompt" : "private fun openPrivateMessageScreen(userID: String?, userName: String?) {\r\n            if (userID != null && userName != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "            val tabToOpen = if (isChatNotification) 1 else 0\r\n            MainNavigationController.navigate(R.id.partyFragment, bundleOf(\"tabToOpen\" to tabToOpen))\r\n        }",
  "context" : "private fun openPartyScreen(isChatNotification: Boolean = false) {\r\n            val tabToOpen = if (isChatNotification) 1 else 0\r\n            MainNavigationController.navigate(R.id.partyFragment, bundleOf(\"tabToOpen\" to tabToOpen))\r\n        }",
  "start_lineno" : "50",
  "methodName" : "openPartyScreen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationOpenHandler.kt",
  "task_id" : "habitica-android/232",
  "prompt" : "private fun openPartyScreen(isChatNotification: Boolean = false) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "                \"guild\" -> openGuildDetailScreen(groupID)\r\n            }\r\n        }",
  "context" : "private fun handleChatMessage(type: String?, groupID: String?) {\r\n            when (type) {\r\n                \"party\" -> openPartyScreen()\r\n                \"guild\" -> openGuildDetailScreen(groupID)\r\n            }\r\n        }",
  "start_lineno" : "75",
  "methodName" : "handleChatMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationOpenHandler.kt",
  "task_id" : "habitica-android/233",
  "prompt" : "private fun handleChatMessage(type: String?, groupID: String?) {\r\n            when (type) {\r\n                \"party\" -> openPartyScreen()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "15",
  "ground_truth" : "            .setBigContentTitle(title)\r\n            .bigText(message)\r\n        return super.configureNotificationBuilder(data)\r\n            .setStyle(style)\r\n    }",
  "context" : "override fun configureNotificationBuilder(data: MutableMap<String, String>): NotificationCompat.Builder {\r\n        val style = NotificationCompat.BigTextStyle()\r\n            .setBigContentTitle(title)\r\n            .bigText(message)\r\n        return super.configureNotificationBuilder(data)\r\n            .setStyle(style)\r\n    }",
  "start_lineno" : "9",
  "methodName" : "configureNotificationBuilder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\ChatMentionNotification.kt",
  "task_id" : "habitica-android/234",
  "prompt" : "import androidx.core.app.NotificationCompat\noverride fun configureNotificationBuilder(data: MutableMap<String, String>): NotificationCompat.Builder {\r\n        val style = NotificationCompat.BigTextStyle()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "context" : "override fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r\n        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "start_lineno" : "17",
  "methodName" : "configureMainIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\ChatMentionNotification.kt",
  "task_id" : "habitica-android/235",
  "prompt" : "import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "            messageText,\r\n            timestamp.time,\r\n            sender\r\n        )\r\n    }",
  "context" : "private fun makeMessageFromData(data: Map<String, String>): NotificationCompat.MessagingStyle.Message {\r\n        val sender = Person.Builder().setName(data[\"senderName\"]).build()\r\n        val dateFormat = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US)\r\n        val timestamp = data[\"timestamp\"]?.let { dateFormat.parse(it) } ?: Date()\r\n        val messageText = EmojiParser.parseEmojis(data[\"message\"]?.trim { it <= ' ' })\r\n        return NotificationCompat.MessagingStyle.Message(\r\n            messageText,\r\n            timestamp.time,\r\n            sender\r\n        )\r\n    }",
  "start_lineno" : "52",
  "methodName" : "makeMessageFromData",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GroupActivityNotification.kt",
  "task_id" : "habitica-android/236",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.common.habitica.helpers.EmojiParser\nimport androidx.core.app.Person\nimport androidx.core.app.NotificationCompat\nimport android.os.Build\nimport android.app.Notification\nprivate fun makeMessageFromData(data: Map<String, String>): NotificationCompat.MessagingStyle.Message {\r\n        val sender = Person.Builder().setName(data[\"senderName\"]).build()\r\n        val dateFormat = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US)\r\n        val timestamp = data[\"timestamp\"]?.let { dateFormat.parse(it) } ?: Date()\r\n        val messageText = EmojiParser.parseEmojis(data[\"message\"]?.trim { it <= ' ' })\r\n        return NotificationCompat.MessagingStyle.Message(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "context" : "override fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r\n        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "start_lineno" : "97",
  "methodName" : "configureMainIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GroupActivityNotification.kt",
  "task_id" : "habitica-android/237",
  "prompt" : "import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "18",
  "ground_truth" : "        super.configureMainIntent(intent)\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "context" : "override fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }",
  "start_lineno" : "15",
  "methodName" : "configureMainIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GuildInviteLocalNotification.kt",
  "task_id" : "habitica-android/238",
  "prompt" : "import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var pushNotificationManager PushNotificationManager",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "            if (refreshedToken != null && this::pushNotificationManager.isInitialized) {\r\n                pushNotificationManager.refreshedToken = refreshedToken\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onNewToken(s: String) {\r\n        super.onNewToken(s)\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->\r\n            val refreshedToken = task.result\r\n            if (refreshedToken != null && this::pushNotificationManager.isInitialized) {\r\n                pushNotificationManager.refreshedToken = refreshedToken\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "19",
  "methodName" : "onNewToken",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\HabiticaFirebaseMessagingService.kt",
  "task_id" : "habitica-android/239",
  "prompt" : "import com.google.firebase.messaging.FirebaseMessaging\noverride fun onNewToken(s: String) {\r\n        super.onNewToken(s)\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->\r\n            val refreshedToken = task.result\r",
  "type" : "android",
  "actions" : "com.google.firebase.MESSAGING_EVENT"
}, {
  "variables" : "var data Map<String, String>?\nvar title String?\nvar message String?\nvar notificationBuilder",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "            .setSound(path)\r\n            .setColor(ContextCompat.getColor(context, R.color.brand_300))\r\n    }",
  "context" : "open fun configureNotificationBuilder(data: MutableMap<String, String>): NotificationCompat.Builder {\r\n        val path = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)\r\n        return notificationBuilder\r\n            .setSound(path)\r\n            .setColor(ContextCompat.getColor(context, R.color.brand_300))\r\n    }",
  "start_lineno" : "32",
  "methodName" : "configureNotificationBuilder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\HabiticaLocalNotification.kt",
  "task_id" : "habitica-android/240",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.core.app.NotificationCompat\nimport android.media.RingtoneManager\nopen fun configureNotificationBuilder(data: MutableMap<String, String>): NotificationCompat.Builder {\r\n        val path = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)\r\n        return notificationBuilder\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var data Map<String, String>?\nvar title String?\nvar message String?\nvar notificationBuilder",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "            intent,\r\n            withImmutableFlag(PendingIntent.FLAG_UPDATE_CURRENT)\r\n        )\r\n        notificationBuilder.setContentIntent(pendingIntent)\r\n    }",
  "context" : "protected open fun setNotificationActions(notificationId: Int, data: Map<String, String>) {\r\n        val intent = Intent(context, MainActivity::class.java)\r\n        configureMainIntent(intent)\r\n        intent.putExtra(\"NOTIFICATION_ID\", notificationId)\r\n        val pendingIntent = PendingIntent.getActivity(\r\n            context,\r\n            3000,\r\n            intent,\r\n            withImmutableFlag(PendingIntent.FLAG_UPDATE_CURRENT)\r\n        )\r\n        notificationBuilder.setContentIntent(pendingIntent)\r\n    }",
  "start_lineno" : "68",
  "methodName" : "setNotificationActions",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\HabiticaLocalNotification.kt",
  "task_id" : "habitica-android/241",
  "prompt" : "import com.habitrpg.android.habitica.ui.activities.MainActivity\nimport android.content.Intent\nimport android.app.PendingIntent\nprotected open fun setNotificationActions(notificationId: Int, data: Map<String, String>) {\r\n        val intent = Intent(context, MainActivity::class.java)\r\n        configureMainIntent(intent)\r\n        intent.putExtra(\"NOTIFICATION_ID\", notificationId)\r\n        val pendingIntent = PendingIntent.getActivity(\r\n            context,\r\n            3000,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var data Map<String, String>?\nvar title String?\nvar message String?\nvar notificationBuilder",
  "app_type" : "life",
  "end_lineno" : "87",
  "ground_truth" : "        intent.putExtra(\"notificationTimeStamp\", Date().time)\r\n        if (data?.containsKey(\"openURL\") == true) {\r\n            intent.putExtra(\"openURL\", data?.get(\"openURL\"))\r\n        }\r\n    }",
  "context" : "protected open fun configureMainIntent(intent: Intent) {\r\n        intent.putExtra(\"notificationIdentifier\", identifier)\r\n        intent.putExtra(\"notificationTimeStamp\", Date().time)\r\n        if (data?.containsKey(\"openURL\") == true) {\r\n            intent.putExtra(\"openURL\", data?.get(\"openURL\"))\r\n        }\r\n    }",
  "start_lineno" : "81",
  "methodName" : "configureMainIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\HabiticaLocalNotification.kt",
  "task_id" : "habitica-android/242",
  "prompt" : "import android.content.Intent\nprotected open fun configureMainIntent(intent: Intent) {\r\n        intent.putExtra(\"notificationIdentifier\", identifier)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var refreshedToken String\nvar user User?\nval PARTY_INVITE_PUSH_NOTIFICATION_KEY\nval RECEIVED_PRIVATE_MESSAGE_PUSH_NOTIFICATION_KEY\nval RECEIVED_GEMS_PUSH_NOTIFICATION_KEY\nval RECEIVED_SUBSCRIPTION_GIFT_PUSH_NOTIFICATION_KEY\nval GUILD_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval WON_CHALLENGE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHAT_MENTION_NOTIFICATION_KEY\nval GROUP_ACTIVITY_NOTIFICATION_KEY\nval CONTENT_RELEASE_NOTIFICATION_KEY\nval G1G1_PROMO_KEY\nval DEVICE_TOKEN_PREFERENCE_KEY",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        val notificationManager = NotificationManagerCompat.from(context)\r\n        return notificationManager.areNotificationsEnabled()\r\n    }",
  "context" : "fun notificationPermissionEnabled(): Boolean {\r\n        val notificationManager = NotificationManagerCompat.from(context)\r\n        return notificationManager.areNotificationsEnabled()\r\n    }",
  "start_lineno" : "48",
  "methodName" : "notificationPermissionEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt",
  "task_id" : "habitica-android/243",
  "prompt" : "fun notificationPermissionEnabled(): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var refreshedToken String\nvar user User?\nval PARTY_INVITE_PUSH_NOTIFICATION_KEY\nval RECEIVED_PRIVATE_MESSAGE_PUSH_NOTIFICATION_KEY\nval RECEIVED_GEMS_PUSH_NOTIFICATION_KEY\nval RECEIVED_SUBSCRIPTION_GIFT_PUSH_NOTIFICATION_KEY\nval GUILD_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval WON_CHALLENGE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHAT_MENTION_NOTIFICATION_KEY\nval GROUP_ACTIVITY_NOTIFICATION_KEY\nval CONTENT_RELEASE_NOTIFICATION_KEY\nval G1G1_PROMO_KEY\nval DEVICE_TOKEN_PREFERENCE_KEY",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "        pushDeviceData[\"type\"] = \"android\"\r\n        MainScope().launchCatching {\r\n            apiClient.addPushDevice(pushDeviceData)\r\n        }\r\n    }",
  "context" : "private fun addRefreshToken() {\r\n        if (this.refreshedToken.isEmpty() || this.user == null || this.userHasPushDevice()) {\r\n            return\r\n        }\r\n        val pushDeviceData = HashMap<String, String>()\r\n        pushDeviceData[\"regId\"] = this.refreshedToken\r\n        pushDeviceData[\"type\"] = \"android\"\r\n        MainScope().launchCatching {\r\n            apiClient.addPushDevice(pushDeviceData)\r\n        }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "addRefreshToken",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt",
  "task_id" : "habitica-android/244",
  "prompt" : "private fun addRefreshToken() {\r\n        if (this.refreshedToken.isEmpty() || this.user == null || this.userHasPushDevice()) {\r\n            return\r\n        }\r\n        val pushDeviceData = HashMap<String, String>()\r\n        pushDeviceData[\"regId\"] = this.refreshedToken\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var refreshedToken String\nvar user User?\nval PARTY_INVITE_PUSH_NOTIFICATION_KEY\nval RECEIVED_PRIVATE_MESSAGE_PUSH_NOTIFICATION_KEY\nval RECEIVED_GEMS_PUSH_NOTIFICATION_KEY\nval RECEIVED_SUBSCRIPTION_GIFT_PUSH_NOTIFICATION_KEY\nval GUILD_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval WON_CHALLENGE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHAT_MENTION_NOTIFICATION_KEY\nval GROUP_ACTIVITY_NOTIFICATION_KEY\nval CONTENT_RELEASE_NOTIFICATION_KEY\nval G1G1_PROMO_KEY\nval DEVICE_TOKEN_PREFERENCE_KEY",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        }\r\n        apiClient.deletePushDevice(refreshedToken)\r\n    }",
  "context" : "suspend fun removePushDeviceUsingStoredToken() {\r\n        if (this.refreshedToken.isEmpty() || !userHasPushDevice()) {\r\n            return\r\n        }\r\n        apiClient.deletePushDevice(refreshedToken)\r\n    }",
  "start_lineno" : "86",
  "methodName" : "removePushDeviceUsingStoredToken",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt",
  "task_id" : "habitica-android/245",
  "prompt" : "suspend fun removePushDeviceUsingStoredToken() {\r\n        if (this.refreshedToken.isEmpty() || !userHasPushDevice()) {\r\n            return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var refreshedToken String\nvar user User?\nval PARTY_INVITE_PUSH_NOTIFICATION_KEY\nval RECEIVED_PRIVATE_MESSAGE_PUSH_NOTIFICATION_KEY\nval RECEIVED_GEMS_PUSH_NOTIFICATION_KEY\nval RECEIVED_SUBSCRIPTION_GIFT_PUSH_NOTIFICATION_KEY\nval GUILD_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_INVITE_PUSH_NOTIFICATION_KEY\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval WON_CHALLENGE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHAT_MENTION_NOTIFICATION_KEY\nval GROUP_ACTIVITY_NOTIFICATION_KEY\nval CONTENT_RELEASE_NOTIFICATION_KEY\nval G1G1_PROMO_KEY\nval DEVICE_TOKEN_PREFERENCE_KEY",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "                return true\r\n            }\r\n        }\r\n        return this.user?.pushDevices == null\r\n    }",
  "context" : "private fun userHasPushDevice(): Boolean {\r\n        for (pushDevice in this.user?.pushDevices ?: emptyList()) {\r\n            if (pushDevice.regId == this.refreshedToken) {\r\n                return true\r\n            }\r\n        }\r\n        return this.user?.pushDevices == null\r\n    }",
  "start_lineno" : "93",
  "methodName" : "userHasPushDevice",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt",
  "task_id" : "habitica-android/246",
  "prompt" : "private fun userHasPushDevice(): Boolean {\r\n        for (pushDevice in this.user?.pushDevices ?: emptyList()) {\r\n            if (pushDevice.regId == this.refreshedToken) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "        intent.putExtra(\"replyToUUID\", data?.get(\"replyTo\"))\r\n        intent.putExtra(\"replyToUsername\", data?.get(\"senderName\"))\r\n    }",
  "context" : "override fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r\n        intent.putExtra(\"replyToUUID\", data?.get(\"replyTo\"))\r\n        intent.putExtra(\"replyToUsername\", data?.get(\"senderName\"))\r\n    }",
  "start_lineno" : "56",
  "methodName" : "configureMainIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\ReceivedPrivateMessageLocalNotification.kt",
  "task_id" : "habitica-android/247",
  "prompt" : "import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val displayNotificationEvents Flow<Notification>\nvar apiClient WeakReference<ApiClient>?\nval seenNotifications MutableMap<String, Boolean>\nvar lastNotificationHandling Date?\nval notificationsFlow\nval displayedNotificationEvents",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        notificationsFlow.value = current\r\n        this.handlePopupNotifications(current)\r\n    }",
  "context" : "override fun setNotifications(current: List<Notification>) {\r\n        notificationsFlow.value = current\r\n        this.handlePopupNotifications(current)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "setNotifications",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationsManager.kt",
  "task_id" : "habitica-android/248",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\noverride fun setNotifications(current: List<Notification>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val displayNotificationEvents Flow<Notification>\nvar apiClient WeakReference<ApiClient>?\nval seenNotifications MutableMap<String, Boolean>\nvar lastNotificationHandling Date?\nval notificationsFlow\nval displayedNotificationEvents",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "            displayedNotificationEvents.send(notification)\r\n            seenNotifications[notification.id] = true\r\n            apiClient?.get()?.readNotification(notification.id)\r\n        }\r\n    }",
  "context" : "private fun readNotification(notification: Notification) {\r\n        MainScope().launchCatching {\r\n            displayedNotificationEvents.send(notification)\r\n            seenNotifications[notification.id] = true\r\n            apiClient?.get()?.readNotification(notification.id)\r\n        }\r\n    }",
  "start_lineno" : "117",
  "methodName" : "readNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationsManager.kt",
  "task_id" : "habitica-android/249",
  "prompt" : "import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.helpers.launchCatching\nprivate fun readNotification(notification: Notification) {\r\n        MainScope().launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "185",
  "ground_truth" : "            // try again after 30 seconds\r\n            delay(30.seconds)\r\n            startListening()\r\n        }\r\n    }",
  "context" : "private fun retryListening() {\r\n        listeningRetryCount += 1\r\n        CoroutineScope(Dispatchers.IO).launchCatching {\r\n            // try again after 30 seconds\r\n            delay(30.seconds)\r\n            startListening()\r\n        }\r\n    }",
  "start_lineno" : "178",
  "methodName" : "retryListening",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/250",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nprivate fun retryListening() {\r\n        listeningRetryCount += 1\r\n        CoroutineScope(Dispatchers.IO).launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "231",
  "ground_truth" : "        val inventory = loadInventory(type, listOf(identifier))\r\n        return inventory?.firstOrNull()\r\n    }",
  "context" : "private suspend fun getSKU(type: String, identifier: String): ProductDetails? {\r\n        val inventory = loadInventory(type, listOf(identifier))\r\n        return inventory?.firstOrNull()\r\n    }",
  "start_lineno" : "228",
  "methodName" : "getSKU",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/251",
  "prompt" : "import com.android.billingclient.api.QueryProductDetailsParams.Product\nimport com.android.billingclient.api.ProductDetails\nprivate suspend fun getSKU(type: String, identifier: String): ProductDetails? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "374",
  "ground_truth" : "        if (response.responseCode != BillingClient.BillingResponseCode.OK) {\r\n            delay(500)\r\n            acknowledgePurchase(purchase, retries - 1)\r\n        }\r\n    }",
  "context" : "private suspend fun acknowledgePurchase(purchase: Purchase, retries: Int = 4) {\r\n        val params =\r\n            AcknowledgePurchaseParams.newBuilder().setPurchaseToken(purchase.purchaseToken).build()\r\n        val response = billingClient.acknowledgePurchase(params)\r\n        if (response.responseCode != BillingClient.BillingResponseCode.OK) {\r\n            delay(500)\r\n            acknowledgePurchase(purchase, retries - 1)\r\n        }\r\n    }",
  "start_lineno" : "366",
  "methodName" : "acknowledgePurchase",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/252",
  "prompt" : "import com.android.billingclient.api.acknowledgePurchase\nimport com.android.billingclient.api.Purchase\nimport com.android.billingclient.api.AcknowledgePurchaseParams\nprivate suspend fun acknowledgePurchase(purchase: Purchase, retries: Int = 4) {\r\n        val params =\r\n            AcknowledgePurchaseParams.newBuilder().setPurchaseToken(purchase.purchaseToken).build()\r\n        val response = billingClient.acknowledgePurchase(params)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "380",
  "ground_truth" : "            userViewModel.userRepository.retrieveUser(false, true)\r\n        }\r\n    }",
  "context" : "private fun processedPurchase(purchase: Purchase) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            userViewModel.userRepository.retrieveUser(false, true)\r\n        }\r\n    }",
  "start_lineno" : "376",
  "methodName" : "processedPurchase",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/253",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.android.billingclient.api.Purchase\nprivate fun processedPurchase(purchase: Purchase) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "462",
  "ground_truth" : "        apiClient.cancelSubscription()\r\n        return userViewModel.userRepository.retrieveUser(false, true)\r\n    }",
  "context" : "suspend fun cancelSubscription(): User? {\r\n        if (alreadyTriedCancellation) return null\r\n        alreadyTriedCancellation = true\r\n        apiClient.cancelSubscription()\r\n        return userViewModel.userRepository.retrieveUser(false, true)\r\n    }",
  "start_lineno" : "457",
  "methodName" : "cancelSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/254",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nsuspend fun cancelSubscription(): User? {\r\n        if (alreadyTriedCancellation) return null\r\n        alreadyTriedCancellation = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "472",
  "ground_truth" : "            PurchaseTypes.Subscription6MonthNoRenew, PurchaseTypes.Subscription6Month -> \"6\"\r\n            PurchaseTypes.Subscription12MonthNoRenew, PurchaseTypes.Subscription12Month -> \"12\"\r\n            else -> \"\"\r\n        }\r\n    }",
  "context" : "private fun durationString(sku: String): String {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1MonthNoRenew, PurchaseTypes.Subscription1Month -> \"1\"\r\n            PurchaseTypes.Subscription3MonthNoRenew, PurchaseTypes.Subscription3Month -> \"3\"\r\n            PurchaseTypes.Subscription6MonthNoRenew, PurchaseTypes.Subscription6Month -> \"6\"\r\n            PurchaseTypes.Subscription12MonthNoRenew, PurchaseTypes.Subscription12Month -> \"12\"\r\n            else -> \"\"\r\n        }\r\n    }",
  "start_lineno" : "464",
  "methodName" : "durationString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/255",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.android.billingclient.api.Purchase\nprivate fun durationString(sku: String): String {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1MonthNoRenew, PurchaseTypes.Subscription1Month -> \"1\"\r\n            PurchaseTypes.Subscription3MonthNoRenew, PurchaseTypes.Subscription3Month -> \"3\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "596",
  "ground_truth" : "            pendingGifts[sku] = Triple(Date(), userID, username)\r\n            savePendingGifts()\r\n        }",
  "context" : "fun addGift(sku: String, userID: String, username: String) {\r\n            pendingGifts[sku] = Triple(Date(), userID, username)\r\n            savePendingGifts()\r\n        }",
  "start_lineno" : "593",
  "methodName" : "addGift",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/256",
  "prompt" : "fun addGift(sku: String, userID: String, username: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "602",
  "ground_truth" : "            savePendingGifts()\r\n            return gift\r\n        }",
  "context" : "private fun removeGift(sku: String?): Triple<Date, String, String>? {\r\n            val gift = pendingGifts.remove(sku)\r\n            savePendingGifts()\r\n            return gift\r\n        }",
  "start_lineno" : "598",
  "methodName" : "removeGift",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/257",
  "prompt" : "import java.util.Date\nprivate fun removeGift(sku: String?): Triple<Date, String, String>? {\r\n            val gift = pendingGifts.remove(sku)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "610",
  "ground_truth" : "            val jsonString = jsonObject.toString()\r\n            preferences?.edit {\r\n                putString(PENDING_GIFTS_KEY, jsonString)\r\n            }\r\n        }",
  "context" : "private fun savePendingGifts() {\r\n            val jsonObject = JSONObject(pendingGifts as Map<*, *>)\r\n            val jsonString = jsonObject.toString()\r\n            preferences?.edit {\r\n                putString(PENDING_GIFTS_KEY, jsonString)\r\n            }\r\n        }",
  "start_lineno" : "604",
  "methodName" : "savePendingGifts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/258",
  "prompt" : "import org.json.JSONObject\nprivate fun savePendingGifts() {\r\n            val jsonObject = JSONObject(pendingGifts as Map<*, *>)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val billingClient\nvar billingClientState BillingClientState\nvar listeningRetryCount\nvar processedPurchases\nvar alreadyTriedCancellation\nvar isSaleGemPurchase\nval displayedConfirmations\nval PENDING_GIFTS_KEY\nvar pendingGifts MutableMap<String, Triple<Date, String, String>>\nvar preferences SharedPreferences?",
  "app_type" : "life",
  "end_lineno" : "627",
  "ground_truth" : "        if (block()) return\r\n        delay(currentDelay)\r\n        currentDelay = (currentDelay * factor).toLong().coerceAtMost(maxDelay)\r\n    }\r\n}",
  "context" : "suspend fun retryUntil(\r\n    times: Int = Int.MAX_VALUE,\r\n    initialDelay: Long = 100, // 0.1 second\r\n    maxDelay: Long = 1000, // 1 second\r\n    factor: Double = 2.0,\r\n    block: suspend () -> Boolean\r\n) {\r\n    var currentDelay = initialDelay\r\n    repeat(times - 1) {\r\n        if (block()) return\r\n        delay(currentDelay)\r\n        currentDelay = (currentDelay * factor).toLong().coerceAtMost(maxDelay)\r\n    }\r\n}",
  "start_lineno" : "614",
  "methodName" : "retryUntil",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt",
  "task_id" : "habitica-android/259",
  "prompt" : "suspend fun retryUntil(\r\n    times: Int = Int.MAX_VALUE,\r\n    initialDelay: Long = 100, // 0.1 second\r\n    maxDelay: Long = 1000, // 1 second\r\n    factor: Double = 2.0,\r\n    block: suspend () -> Boolean\r\n) {\r\n    var currentDelay = initialDelay\r\n    repeat(times - 1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val reviewManager\nval sharedPref\nval REVIEW_REQUEST_COUNT_KEY\nval INITIAL_CHECKINS_KEY\nval SHOULD_QUEUE_REVIEW\nval LAST_REVIEW_CHECKIN_KEY",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "            putInt(REVIEW_REQUEST_COUNT_KEY, currentCount + 1)\r\n        }\r\n    }",
  "context" : "private fun incrementReviewRequestCount() {\r\n        val currentCount = sharedPref.getInt(REVIEW_REQUEST_COUNT_KEY, 0)\r\n        sharedPref.edit {\r\n            putInt(REVIEW_REQUEST_COUNT_KEY, currentCount + 1)\r\n        }\r\n    }",
  "start_lineno" : "79",
  "methodName" : "incrementReviewRequestCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\ReviewManager.kt",
  "task_id" : "habitica-android/260",
  "prompt" : "import androidx.core.content.edit\nprivate fun incrementReviewRequestCount() {\r\n        val currentCount = sharedPref.getInt(REVIEW_REQUEST_COUNT_KEY, 0)\r\n        sharedPref.edit {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val am AlarmManager?\nval upcomingReminderOccurrencesToSchedule\nval TASK_ID_INTENT_KEY\nval TASK_NAME_INTENT_KEY",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "                    removeAlarmForRemindersItem(reminder, index)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "fun removeAlarmsForTask(task: Task) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            task.reminders?.let { reminders ->\r\n                // Remove not only the immediate reminder, but also the next however many (upcomingReminderOccurrencesToSchedule) reminders\r\n                reminders.forEachIndexed { index, reminder ->\r\n                    removeAlarmForRemindersItem(reminder, index)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "removeAlarmsForTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt",
  "task_id" : "habitica-android/261",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.android.habitica.models.tasks.Task\nfun removeAlarmsForTask(task: Task) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            task.reminders?.let { reminders ->\r\n                // Remove not only the immediate reminder, but also the next however many (upcomingReminderOccurrencesToSchedule) reminders\r\n                reminders.forEachIndexed { index, reminder ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val am AlarmManager?\nval upcomingReminderOccurrencesToSchedule\nval TASK_ID_INTENT_KEY\nval TASK_NAME_INTENT_KEY",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "                .filter { task -> task.isValid && task.isManaged && TaskType.DAILY == task.type }\r\n                .first()\r\n            setAlarmsForTask(task)\r\n        }\r\n    }",
  "context" : "fun addAlarmForTaskId(taskId: String) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            val task = taskRepository.getTaskCopy(taskId)\r\n                .filter { task -> task.isValid && task.isManaged && TaskType.DAILY == task.type }\r\n                .first()\r\n            setAlarmsForTask(task)\r\n        }\r\n    }",
  "start_lineno" : "89",
  "methodName" : "addAlarmForTaskId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt",
  "task_id" : "habitica-android/262",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.tasks.Task\nfun addAlarmForTaskId(taskId: String) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            val task = taskRepository.getTaskCopy(taskId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val am AlarmManager?\nval upcomingReminderOccurrencesToSchedule\nval TASK_ID_INTENT_KEY\nval TASK_NAME_INTENT_KEY",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "\r\n        if (!preventDailyReminder) {\r\n            scheduleDailyReminder(context)\r\n        }\r\n    }",
  "context" : "suspend fun scheduleAllSavedAlarms(preventDailyReminder: Boolean) {\r\n        val tasks = taskRepository.getTaskCopies().firstOrNull()\r\n        tasks?.forEach { this.setAlarmsForTask(it) }\r\n\r\n        if (!preventDailyReminder) {\r\n            scheduleDailyReminder(context)\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "scheduleAllSavedAlarms",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt",
  "task_id" : "habitica-android/263",
  "prompt" : "import kotlinx.coroutines.flow.firstOrNull\nimport kotlinx.coroutines.flow.first\nimport com.habitrpg.android.habitica.models.tasks.Task\nsuspend fun scheduleAllSavedAlarms(preventDailyReminder: Boolean) {\r\n        val tasks = taskRepository.getTaskCopies().firstOrNull()\r\n        tasks?.forEach { this.setAlarmsForTask(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val am AlarmManager?\nval upcomingReminderOccurrencesToSchedule\nval TASK_ID_INTENT_KEY\nval TASK_NAME_INTENT_KEY",
  "app_type" : "life",
  "end_lineno" : "245",
  "ground_truth" : "            val alarmManager = context?.getSystemService(Context.ALARM_SERVICE) as? AlarmManager\r\n            val displayIntent =\r\n                PendingIntent.getBroadcast(context, 0, notificationIntent, withImmutableFlag(0))\r\n            alarmManager?.cancel(displayIntent)\r\n        }",
  "context" : "fun removeDailyReminder(context: Context?) {\r\n            val notificationIntent = Intent(context, NotificationPublisher::class.java)\r\n            val alarmManager = context?.getSystemService(Context.ALARM_SERVICE) as? AlarmManager\r\n            val displayIntent =\r\n                PendingIntent.getBroadcast(context, 0, notificationIntent, withImmutableFlag(0))\r\n            alarmManager?.cancel(displayIntent)\r\n        }",
  "start_lineno" : "239",
  "methodName" : "removeDailyReminder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt",
  "task_id" : "habitica-android/264",
  "prompt" : "import com.habitrpg.android.habitica.receivers.NotificationPublisher\nimport android.content.Intent\nimport android.content.Context\nfun removeDailyReminder(context: Context?) {\r\n            val notificationIntent = Intent(context, NotificationPublisher::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val dateFormatter",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        } else {\r\n            dayStrings?.joinToString(\", \") ?: \"\"\r\n        }",
  "context" : "private fun joinToCount(dayStrings: List<String>?) =\r\n        if (dayStrings?.size == 2) {\r\n            context.getString(R.string.x_and_y, dayStrings[0], dayStrings[1])\r\n        } else {\r\n            dayStrings?.joinToString(\", \") ?: \"\"\r\n        }",
  "start_lineno" : "108",
  "methodName" : "joinToCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskDescriptionBuilder.kt",
  "task_id" : "habitica-android/265",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun joinToCount(dayStrings: List<String>?) =\r\n        if (dayStrings?.size == 2) {\r\n            context.getString(R.string.x_and_y, dayStrings[0], dayStrings[1])\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val dateFormatter",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "            formatter.format(arrayOf(day))\r\n        } else {\r\n            day.toString()\r\n        }\r\n    }",
  "context" : "private fun withOrdinal(day: Int): String {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            val formatter = MessageFormat(\"{0,ordinal}\", Locale.getDefault())\r\n            formatter.format(arrayOf(day))\r\n        } else {\r\n            day.toString()\r\n        }\r\n    }",
  "start_lineno" : "115",
  "methodName" : "withOrdinal",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskDescriptionBuilder.kt",
  "task_id" : "habitica-android/266",
  "prompt" : "import java.util.Locale\nimport com.habitrpg.android.habitica.R\nimport android.os.Build\nimport android.icu.text.MessageFormat\nprivate fun withOrdinal(day: Int): String {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            val formatter = MessageFormat(\"{0,ordinal}\", Locale.getDefault())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val dateFormatter",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "            context.getString(R.string.positive_sentence)\r\n        } else {\r\n            context.getString(R.string.negative_sentence)\r\n        }\r\n    }",
  "context" : "private fun describeHabitDirections(up: Boolean, down: Boolean): String {\r\n        return if (up && down) {\r\n            context.getString(R.string.positive_and_negative)\r\n        } else if (up) {\r\n            context.getString(R.string.positive_sentence)\r\n        } else {\r\n            context.getString(R.string.negative_sentence)\r\n        }\r\n    }",
  "start_lineno" : "141",
  "methodName" : "describeHabitDirections",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskDescriptionBuilder.kt",
  "task_id" : "habitica-android/267",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun describeHabitDirections(up: Boolean, down: Boolean): String {\r\n        return if (up && down) {\r\n            context.getString(R.string.positive_and_negative)\r\n        } else if (up) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "        soundManager.loadAndPlayAudio(SoundManager.SoundReward)\r\n        return response\r\n    }",
  "context" : "override suspend fun run(requestValues: RequestValues): TaskScoringResult? {\r\n        val response = taskRepository.taskChecked(requestValues.user, requestValues.task, false, false, requestValues.notifyFunc)\r\n        soundManager.loadAndPlayAudio(SoundManager.SoundReward)\r\n        return response\r\n    }",
  "start_lineno" : "16",
  "methodName" : "run",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\BuyRewardUseCase.kt",
  "task_id" : "habitica-android/268",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.TaskScoringResult\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun run(requestValues: RequestValues): TaskScoringResult? {\r\n        val response = taskRepository.taskChecked(requestValues.user, requestValues.task, false, false, requestValues.notifyFunc)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "\r\n        val intent = Intent(activity, ClassSelectionActivity::class.java)\r\n        intent.putExtras(bundle)\r\n        activity.startActivity(intent)\r\n    }",
  "context" : "private fun displayClassSelectionActivity(\r\n        isClassSelected: Boolean,\r\n        currentClass: String?,\r\n        activity: Activity\r\n    ) {\r\n        val bundle = Bundle()\r\n        bundle.putBoolean(\"isClassSelected\", isClassSelected)\r\n        bundle.putString(\"currentClass\", currentClass)\r\n\r\n        val intent = Intent(activity, ClassSelectionActivity::class.java)\r\n        intent.putExtras(bundle)\r\n        activity.startActivity(intent)\r\n    }",
  "start_lineno" : "26",
  "methodName" : "displayClassSelectionActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\CheckClassSelectionUseCase.kt",
  "task_id" : "habitica-android/269",
  "prompt" : "import com.habitrpg.android.habitica.ui.activities.ClassSelectionActivity\nimport android.os.Bundle\nimport android.app.Activity\nprivate fun displayClassSelectionActivity(\r\n        isClassSelected: Boolean,\r\n        currentClass: String?,\r\n        activity: Activity\r\n    ) {\r\n        val bundle = Bundle()\r\n        bundle.putBoolean(\"isClassSelected\", isClassSelected)\r\n        bundle.putString(\"currentClass\", currentClass)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "            PurchaseTypes.Purchase4Gems\r\n        }\r\n        val sku = purchaseHandler.getInAppPurchaseSKU(gemSku) ?: return\r\n        purchaseHandler.purchase(activity, sku)\r\n    }",
  "context" : "override suspend fun run(requestValues: RequestValues) {\r\n        val activity = requestValues.activity as? MainActivity ?: return\r\n        val gemSku = if (requestValues.gemPrice > 4) {\r\n            PurchaseTypes.Purchase21Gems\r\n        } else {\r\n            PurchaseTypes.Purchase4Gems\r\n        }\r\n        val sku = purchaseHandler.getInAppPurchaseSKU(gemSku) ?: return\r\n        purchaseHandler.purchase(activity, sku)\r\n    }",
  "start_lineno" : "13",
  "methodName" : "run",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\InsufficientGemsUseCase.kt",
  "task_id" : "habitica-android/270",
  "prompt" : "import com.habitrpg.android.habitica.ui.activities.MainActivity\nimport com.habitrpg.android.habitica.helpers.PurchaseTypes\nimport android.app.Activity\noverride suspend fun run(requestValues: RequestValues) {\r\n        val activity = requestValues.activity as? MainActivity ?: return\r\n        val gemSku = if (requestValues.gemPrice > 4) {\r\n            PurchaseTypes.Purchase21Gems\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val formatter",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "                \" + \" + formatter.format(abs(value))\r\n            } else {\r\n                \" - \" + formatter.format(abs(value))\r\n            }\r\n        }",
  "context" : "private fun formatValue(value: Double): String {\r\n            return if (value >= 0) {\r\n                \" + \" + formatter.format(abs(value))\r\n            } else {\r\n                \" - \" + formatter.format(abs(value))\r\n            }\r\n        }",
  "start_lineno" : "131",
  "methodName" : "formatValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\NotifyUserUseCase.kt",
  "task_id" : "habitica-android/271",
  "prompt" : "private fun formatValue(value: Double): String {\r\n            return if (value >= 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val MAX_TASK_VALUE\nval MIN_TASK_VALUE\nval CLOSE_ENOUGH",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "                conBonus = 0.1f\r\n            }\r\n            val hpMod = delta * conBonus * task.priority * 2\r\n            result.hp = (stats.hp ?: 0.0) + (hpMod * 10).roundToLong() / 10.0\r\n        }",
  "context" : "private fun subtractPoints(\r\n            result: TaskDirectionData,\r\n            delta: Double,\r\n            stats: Stats,\r\n            computedStats: Stats,\r\n            task: Task\r\n        ) {\r\n            var conBonus = 1f - ((computedStats.constitution?.toFloat() ?: 0f) / 250f)\r\n            if (conBonus < 0.1) {\r\n                conBonus = 0.1f\r\n            }\r\n            val hpMod = delta * conBonus * task.priority * 2\r\n            result.hp = (stats.hp ?: 0.0) + (hpMod * 10).roundToLong() / 10.0\r\n        }",
  "start_lineno" : "94",
  "methodName" : "subtractPoints",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\ScoreTaskLocallyInteractor.kt",
  "task_id" : "habitica-android/272",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.TaskDirectionData\nimport com.habitrpg.shared.habitica.models.responses.TaskDirection\nimport com.habitrpg.android.habitica.models.user.Stats\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun subtractPoints(\r\n            result: TaskDirectionData,\r\n            delta: Double,\r\n            stats: Stats,\r\n            computedStats: Stats,\r\n            task: Task\r\n        ) {\r\n            var conBonus = 1f - ((computedStats.constitution?.toFloat() ?: 0f) / 250f)\r\n            if (conBonus < 0.1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        avatarView.onAvatarImageReady { image ->\r\n            sharedImage = image?.scale(image.width * 3, image.height * 3, false)\r\n            requestValues.activity.shareContent(requestValues.identifier, requestValues.message, sharedImage)\r\n        }\r\n    }",
  "context" : "override suspend fun run(requestValues: RequestValues) {\r\n        val avatarView = AvatarView(requestValues.activity, showBackground = true, showMount = true, showPet = true)\r\n        avatarView.setAvatar(requestValues.avatar)\r\n        var sharedImage: Bitmap? = null\r\n        avatarView.onAvatarImageReady { image ->\r\n            sharedImage = image?.scale(image.width * 3, image.height * 3, false)\r\n            requestValues.activity.shareContent(requestValues.identifier, requestValues.message, sharedImage)\r\n        }\r\n    }",
  "start_lineno" : "11",
  "methodName" : "run",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\ShareAvatarUseCase.kt",
  "task_id" : "habitica-android/273",
  "prompt" : "import com.habitrpg.shared.habitica.models.Avatar\nimport com.habitrpg.common.habitica.views.AvatarView\nimport android.graphics.Bitmap\noverride suspend fun run(requestValues: RequestValues) {\r\n        val avatarView = AvatarView(requestValues.activity, showBackground = true, showMount = true, showPet = true)\r\n        avatarView.setAvatar(requestValues.avatar)\r\n        var sharedImage: Bitmap? = null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "            val dialog = FirstDropDialog(activity)\r\n            dialog.configure(data.egg ?: \"\", data.hatchingPotion ?: \"\")\r\n            dialog.enqueue()\r\n        }\r\n    }",
  "context" : "private fun showFirstDropDialog(notification: Notification) {\r\n        val data = notification.data as? FirstDropData ?: return\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r\n            val dialog = FirstDropDialog(activity)\r\n            dialog.configure(data.egg ?: \"\", data.hatchingPotion ?: \"\")\r\n            dialog.enqueue()\r\n        }\r\n    }",
  "start_lineno" : "143",
  "methodName" : "showFirstDropDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\ShowNotificationInteractor.kt",
  "task_id" : "habitica-android/274",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.habitrpg.common.habitica.models.notifications.FirstDropData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.ui.views.dialogs.FirstDropDialog\nprivate fun showFirstDropDialog(notification: Notification) {\r\n        val data = notification.data as? FirstDropData ?: return\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "158",
  "ground_truth" : "            val dialog = WonChallengeDialog(activity)\r\n            dialog.configure(notification.data as? ChallengeWonData)\r\n            dialog.enqueue()\r\n        }\r\n    }",
  "context" : "private fun showWonChallengeDialog(notification: Notification) {\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r\n            val dialog = WonChallengeDialog(activity)\r\n            dialog.configure(notification.data as? ChallengeWonData)\r\n            dialog.enqueue()\r\n        }\r\n    }",
  "start_lineno" : "152",
  "methodName" : "showWonChallengeDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\ShowNotificationInteractor.kt",
  "task_id" : "habitica-android/275",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.ui.views.dialogs.WonChallengeDialog\nprivate fun showWonChallengeDialog(notification: Notification) {\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "166",
  "ground_truth" : "            FirebaseAnalytics.getInstance(activity).logEvent(type, null)\r\n        } else if (type == Notification.Type.ACHIEVEMENT_ONBOARDING_COMPLETE.type) {\r\n            FirebaseAnalytics.getInstance(activity).logEvent(type, null)\r\n        }\r\n    }",
  "context" : "private fun logOnboardingEvents(type: String) {\r\n        if (User.ONBOARDING_ACHIEVEMENT_KEYS.contains(type)) {\r\n            FirebaseAnalytics.getInstance(activity).logEvent(type, null)\r\n        } else if (type == Notification.Type.ACHIEVEMENT_ONBOARDING_COMPLETE.type) {\r\n            FirebaseAnalytics.getInstance(activity).logEvent(type, null)\r\n        }\r\n    }",
  "start_lineno" : "160",
  "methodName" : "logOnboardingEvents",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\ShowNotificationInteractor.kt",
  "task_id" : "habitica-android/276",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nprivate fun logOnboardingEvents(type: String) {\r\n        if (User.ONBOARDING_ACHIEVEMENT_KEYS.contains(type)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "12",
  "ground_truth" : "            run(requestValues)\r\n        }\r\n    }",
  "context" : "suspend fun callInteractor(requestValues: Q): T {\r\n        return withContext(Dispatchers.Main) {\r\n            run(requestValues)\r\n        }\r\n    }",
  "start_lineno" : "8",
  "methodName" : "callInteractor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\UseCase.kt",
  "task_id" : "habitica-android/277",
  "prompt" : "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nsuspend fun callInteractor(requestValues: Q): T {\r\n        return withContext(Dispatchers.Main) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isFiltering Boolean",
  "app_type" : "life",
  "end_lineno" : "18",
  "ground_truth" : "        }\r\n        return super.equals(other)\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (other is CustomizationFilter) {\r\n            return onlyPurchased == other.onlyPurchased && ascending == other.ascending && months.size == other.months.size && months.containsAll(other.months)\r\n        }\r\n        return super.equals(other)\r\n    }",
  "start_lineno" : "13",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\CustomizationFilter.kt",
  "task_id" : "habitica-android/278",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (other is CustomizationFilter) {\r\n            return onlyPurchased == other.onlyPurchased && ascending == other.ascending && months.size == other.months.size && months.containsAll(other.months)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isFiltering Boolean",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        result = 31 * result + months.hashCode()\r\n        return result\r\n    }",
  "context" : "override fun hashCode(): Int {\r\n        var result = onlyPurchased.hashCode()\r\n        result = 31 * result + ascending.hashCode()\r\n        result = 31 * result + months.hashCode()\r\n        return result\r\n    }",
  "start_lineno" : "20",
  "methodName" : "hashCode",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\CustomizationFilter.kt",
  "task_id" : "habitica-android/279",
  "prompt" : "override fun hashCode(): Int {\r\n        var result = onlyPurchased.hashCode()\r\n        result = 31 * result + ascending.hashCode()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var text String?\nvar identifier String?\nvar price Int\nvar hasPurchasable\nvar customizations MutableList<Customization>\nvar ownedCustomizations MutableList<Customization>",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "                customization.price?.let { total += it }\r\n            }\r\n        }\r\n        return total >= price\r\n    }",
  "context" : "fun isSetDeal(): Boolean {\r\n        var total = 0\r\n        for (customization in customizations) {\r\n            if (!ownedCustomizations.contains(customization)) {\r\n                customization.price?.let { total += it }\r\n            }\r\n        }\r\n        return total >= price\r\n    }",
  "start_lineno" : "11",
  "methodName" : "isSetDeal",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\CustomizationSet.kt",
  "task_id" : "habitica-android/280",
  "prompt" : "fun isSetDeal(): Boolean {\r\n        var total = 0\r\n        for (customization in customizations) {\r\n            if (!ownedCustomizations.contains(customization)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String?\nvar key String\nvar active Boolean\nvar leader String?\nvar RSVPNeeded Boolean\nvar members RealmList<QuestMember>?\nvar progress QuestProgress?\nvar participants RealmList<Member>?\nvar rageStrikes RealmList<QuestRageStrike>?\nvar completed String?\nval activeRageStrikeNumber Int",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        }\r\n        rageStrikes?.add(rageStrike)\r\n    }",
  "context" : "fun addRageStrike(rageStrike: QuestRageStrike) {\r\n        if (rageStrikes == null) {\r\n            rageStrikes = RealmList()\r\n        }\r\n        rageStrikes?.add(rageStrike)\r\n    }",
  "start_lineno" : "37",
  "methodName" : "addRageStrike",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\Quest.kt",
  "task_id" : "habitica-android/281",
  "prompt" : "import io.realm.RealmList\nfun addRageStrike(rageStrike: QuestRageStrike) {\r\n        if (rageStrikes == null) {\r\n            rageStrikes = RealmList()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String\nvar notes String\nvar completion String\nvar value Int\nvar previous String?\nvar lvl Int\nvar isCanBuy Boolean\nvar category String?\nvar boss QuestBoss?\nvar drop QuestDrops?\nvar colors QuestColors?\nvar collect RealmList<QuestCollect>?\nvar event ItemEvent?\nval isBossQuest Boolean\nval type String",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "                return collect\r\n            }\r\n        }\r\n        return null\r\n    }",
  "context" : "fun getCollectWithKey(key: String?): QuestCollect? {\r\n        for (collect in this.collect ?: emptyList<QuestCollect>()) {\r\n            if (collect.key == key) {\r\n                return collect\r\n            }\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "56",
  "methodName" : "getCollectWithKey",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\QuestContent.kt",
  "task_id" : "habitica-android/282",
  "prompt" : "fun getCollectWithKey(key: String?): QuestCollect? {\r\n        for (collect in this.collect ?: emptyList<QuestCollect>()) {\r\n            if (collect.key == key) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String\nvar notes String\nvar completion String\nvar value Int\nvar previous String?\nvar lvl Int\nvar isCanBuy Boolean\nvar category String?\nvar boss QuestBoss?\nvar drop QuestDrops?\nvar colors QuestColors?\nvar collect RealmList<QuestCollect>?\nvar event ItemEvent?\nval isBossQuest Boolean\nval type String",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        val gifImageKeys = listOf(\"lostMasterclasser4\")\r\n        return gifImageKeys.contains(key)\r\n    }",
  "context" : "fun hasGifImage(): Boolean {\r\n        val gifImageKeys = listOf(\"lostMasterclasser4\")\r\n        return gifImageKeys.contains(key)\r\n    }",
  "start_lineno" : "65",
  "methodName" : "hasGifImage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\QuestContent.kt",
  "task_id" : "habitica-android/283",
  "prompt" : "fun hasGifImage(): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val type String\nvar key String\nvar text String\nvar notes String\nvar value Int\nvar event ItemEvent?\nvar target String?\nvar isMysteryItem Boolean",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "            item.notes = context.getString(R.string.myster_item_notes)\r\n            item.key = \"inventory_present\"\r\n            item.isMysteryItem = true\r\n            return item\r\n        }",
  "context" : "fun makeMysteryItem(context: Context): SpecialItem {\r\n            val item = SpecialItem()\r\n            item.text = context.getString(R.string.mystery_item)\r\n            item.notes = context.getString(R.string.myster_item_notes)\r\n            item.key = \"inventory_present\"\r\n            item.isMysteryItem = true\r\n            return item\r\n        }",
  "start_lineno" : "23",
  "methodName" : "makeMysteryItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\SpecialItem.kt",
  "task_id" : "habitica-android/284",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun makeMysteryItem(context: Context): SpecialItem {\r\n            val item = SpecialItem()\r\n            item.text = context.getString(R.string.mystery_item)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var party PartyInvite?\nvar parties RealmList<PartyInvite>?\nvar guilds RealmList<GuildInvite>?",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "\r\n        parties?.removeAll {\r\n            it.id == groupID\r\n        }\r\n    }",
  "context" : "fun removeInvitation(groupID: String) {\r\n        if (party?.id == groupID) {\r\n            party = null\r\n        }\r\n\r\n        guilds?.removeAll {\r\n            it.id == groupID\r\n        }\r\n\r\n        parties?.removeAll {\r\n            it.id == groupID\r\n        }\r\n    }",
  "start_lineno" : "14",
  "methodName" : "removeInvitation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\invitations\\Invitations.kt",
  "task_id" : "habitica-android/285",
  "prompt" : "fun removeInvitation(groupID: String) {\r\n        if (party?.id == groupID) {\r\n            party = null\r\n        }\r\n\r\n        guilds?.removeAll {\r\n            it.id == groupID\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun promoBackgroundDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "promoBackgroundDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\FallExtraGemsHabiticaPromotion.kt",
  "task_id" : "habitica-android/286",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.fall_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun buttonDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.fall_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "44",
  "methodName" : "buttonDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\FallExtraGemsHabiticaPromotion.kt",
  "task_id" : "habitica-android/287",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun promoBackgroundDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "promoBackgroundDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\GiftOneGetOneHabiticaPromotion.kt",
  "task_id" : "habitica-android/288",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun buttonDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "44",
  "methodName" : "buttonDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\GiftOneGetOneHabiticaPromotion.kt",
  "task_id" : "habitica-android/289",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isActive Boolean\nval identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date\nvar url String?",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        \"g1g1\" -> GiftOneGetOneHabiticaPromotion(startDate, endDate)\r\n        \"survey2021\" -> Survey2021Promotion()\r\n        else -> null\r\n    }\r\n}",
  "context" : "fun getHabiticaPromotionFromKey(key: String, startDate: Date?, endDate: Date?): HabiticaPromotion? {\r\n    return when (key) {\r\n        \"fall_extra_gems\", \"fall2020\", \"testFall2020\" -> FallExtraGemsHabiticaPromotion(startDate, endDate)\r\n        \"spooky_extra_gems\", \"fall2020SecondPromo\", \"spooky2020\" -> SpookyExtraGemsHabiticaPromotion(startDate, endDate)\r\n        \"g1g1\" -> GiftOneGetOneHabiticaPromotion(startDate, endDate)\r\n        \"survey2021\" -> Survey2021Promotion()\r\n        else -> null\r\n    }\r\n}",
  "start_lineno" : "47",
  "methodName" : "getHabiticaPromotionFromKey",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\HabiticaPromotion.kt",
  "task_id" : "habitica-android/290",
  "prompt" : "import java.util.Date\nfun getHabiticaPromotionFromKey(key: String, startDate: Date?, endDate: Date?): HabiticaPromotion? {\r\n    return when (key) {\r\n        \"fall_extra_gems\", \"fall2020\", \"testFall2020\" -> FallExtraGemsHabiticaPromotion(startDate, endDate)\r\n        \"spooky_extra_gems\", \"fall2020SecondPromo\", \"spooky2020\" -> SpookyExtraGemsHabiticaPromotion(startDate, endDate)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun promoBackgroundDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "promoBackgroundDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\SpookyExtraGemsHabiticaPromotion.kt",
  "task_id" : "habitica-android/291",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.spooky_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun buttonDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.spooky_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "44",
  "methodName" : "buttonDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\SpookyExtraGemsHabiticaPromotion.kt",
  "task_id" : "habitica-android/292",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date\nvar url String?",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun promoBackgroundDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "35",
  "methodName" : "promoBackgroundDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\Survey2021Promotion.kt",
  "task_id" : "habitica-android/293",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val identifier String\nval promoType PromoType\nval startDate Date\nval endDate Date\nvar url String?",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }",
  "context" : "override fun buttonDrawable(context: Context): Drawable {\r\n        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }",
  "start_lineno" : "40",
  "methodName" : "buttonDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\Survey2021Promotion.kt",
  "task_id" : "habitica-android/294",
  "prompt" : "import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "            customization.path = \"size\"\r\n            customization.category = \"body\"\r\n            customization.subcategory = \"size\"\r\n            return customization\r\n        }",
  "context" : "fun createSize(key: String, drawableId: Int, text: String): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.text = text\r\n            customization.path = \"size\"\r\n            customization.category = \"body\"\r\n            customization.subcategory = \"size\"\r\n            return customization\r\n        }",
  "start_lineno" : "15",
  "methodName" : "createSize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/295",
  "prompt" : "fun createSize(key: String, drawableId: Int, text: String): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.text = text\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "            customization.path = \"shirt\"\r\n            customization.category = \"body\"\r\n            customization.subcategory = \"shirt\"\r\n            return customization\r\n        }",
  "context" : "fun createShirt(key: String, drawableId: Int): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"shirt\"\r\n            customization.category = \"body\"\r\n            customization.subcategory = \"shirt\"\r\n            return customization\r\n        }",
  "start_lineno" : "26",
  "methodName" : "createShirt",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/296",
  "prompt" : "fun createShirt(key: String, drawableId: Int): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "            customization.colorId = colorId\r\n            customization.path = \"skin\"\r\n            customization.category = \"skin\"\r\n            return customization\r\n        }",
  "context" : "fun createSkin(key: String, colorId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.colorId = colorId\r\n            customization.path = \"skin\"\r\n            customization.category = \"skin\"\r\n            return customization\r\n        }",
  "start_lineno" : "36",
  "methodName" : "createSkin",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/297",
  "prompt" : "fun createSkin(key: String, colorId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "            customization.path = \"hair.color\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"color\"\r\n            return customization\r\n        }",
  "context" : "fun createHairColor(key: String, colorId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.colorId = colorId\r\n            customization.path = \"hair.color\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"color\"\r\n            return customization\r\n        }",
  "start_lineno" : "45",
  "methodName" : "createHairColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/298",
  "prompt" : "fun createHairColor(key: String, colorId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.colorId = colorId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            customization.path = \"hair.bangs\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"bangs\"\r\n            return customization\r\n        }",
  "context" : "fun createHairBangs(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"hair.bangs\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"bangs\"\r\n            return customization\r\n        }",
  "start_lineno" : "55",
  "methodName" : "createHairBangs",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/299",
  "prompt" : "fun createHairBangs(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "            customization.path = \"hair.base\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"base\"\r\n            return customization\r\n        }",
  "context" : "fun createHairPonytail(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"hair.base\"\r\n            customization.category = \"hair\"\r\n            customization.subcategory = \"base\"\r\n            return customization\r\n        }",
  "start_lineno" : "65",
  "methodName" : "createHairPonytail",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/300",
  "prompt" : "fun createHairPonytail(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "            customization.path = \"glasses\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"glasses\"\r\n            return customization\r\n        }",
  "context" : "fun createGlasses(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"glasses\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"glasses\"\r\n            return customization\r\n        }",
  "start_lineno" : "75",
  "methodName" : "createGlasses",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/301",
  "prompt" : "fun createGlasses(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "            customization.path = \"hair.flower\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"flower\"\r\n            return customization\r\n        }",
  "context" : "fun createFlower(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"hair.flower\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"flower\"\r\n            return customization\r\n        }",
  "start_lineno" : "85",
  "methodName" : "createFlower",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/302",
  "prompt" : "fun createFlower(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar drawableId Int?\nvar colorId Int?\nvar text String\nvar path String\nvar category String\nvar subcategory String",
  "app_type" : "life",
  "end_lineno" : "103",
  "ground_truth" : "            customization.path = \"chair\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"wheelchair\"\r\n            return customization\r\n        }",
  "context" : "fun createWheelchair(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r\n            customization.path = \"chair\"\r\n            customization.category = \"extras\"\r\n            customization.subcategory = \"wheelchair\"\r\n            return customization\r\n        }",
  "start_lineno" : "95",
  "methodName" : "createWheelchair",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\SetupCustomization.kt",
  "task_id" : "habitica-android/303",
  "prompt" : "fun createWheelchair(key: String, drawableId: Int?): SetupCustomization {\r\n            val customization = SetupCustomization()\r\n            customization.key = key\r\n            customization.drawableId = drawableId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String?\nvar notes String?\nvar imageName String?\nvar value Int\nvar locked Boolean\nvar isLimited Boolean\nvar currency String?\nvar purchaseType String\nvar categoryIdentifier String\nvar limitedNumberLeft Int?\nvar unlockCondition ShopItemUnlockCondition?\nvar path String?\nvar unlockPath String?\nvar isSuggested String?\nvar pinType String?\nvar habitClass String?\nvar previous String?\nvar level Int?\nvar event ItemEvent?\nvar setImageNames\nval isTypeItem Boolean\nval isTypeQuest Boolean\nval isTypeGear Boolean\nval isTypeAnimal Boolean\nval canPurchaseBulk Boolean\nval GEM_FOR_GOLD",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        \"hourglasses\" -> (value * quantity) <= (user?.hourglassCount ?: 0)\r\n        else -> true\r\n    }",
  "context" : "fun canAfford(user: User?, quantity: Int): Boolean = when (currency) {\r\n        \"gold\" -> (value * quantity) <= (user?.stats?.gp ?: 0.0)\r\n        \"gems\" -> (value * quantity) <= (user?.gemCount ?: 0)\r\n        \"hourglasses\" -> (value * quantity) <= (user?.hourglassCount ?: 0)\r\n        else -> true\r\n    }",
  "start_lineno" : "74",
  "methodName" : "canAfford",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItem.kt",
  "task_id" : "habitica-android/304",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nfun canAfford(user: User?, quantity: Int): Boolean = when (currency) {\r\n        \"gold\" -> (value * quantity) <= (user?.stats?.gp ?: 0.0)\r\n        \"gems\" -> (value * quantity) <= (user?.gemCount ?: 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String?\nvar notes String?\nvar imageName String?\nvar value Int\nvar locked Boolean\nvar isLimited Boolean\nvar currency String?\nvar purchaseType String\nvar categoryIdentifier String\nvar limitedNumberLeft Int?\nvar unlockCondition ShopItemUnlockCondition?\nvar path String?\nvar unlockPath String?\nvar isSuggested String?\nvar pinType String?\nvar habitClass String?\nvar previous String?\nvar level Int?\nvar event ItemEvent?\nvar setImageNames\nval isTypeItem Boolean\nval isTypeQuest Boolean\nval isTypeGear Boolean\nval isTypeAnimal Boolean\nval canPurchaseBulk Boolean\nval GEM_FOR_GOLD",
  "app_type" : "life",
  "end_lineno" : "87",
  "ground_truth" : "            val otherItem = other as? ShopItem\r\n            return this.key == otherItem?.key\r\n        }\r\n        return super.equals(other)\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (other != null && ShopItem::class.java.isAssignableFrom(other.javaClass)) {\r\n            val otherItem = other as? ShopItem\r\n            return this.key == otherItem?.key\r\n        }\r\n        return super.equals(other)\r\n    }",
  "start_lineno" : "81",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItem.kt",
  "task_id" : "habitica-android/305",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (other != null && ShopItem::class.java.isAssignableFrom(other.javaClass)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String?\nvar notes String?\nvar imageName String?\nvar value Int\nvar locked Boolean\nvar isLimited Boolean\nvar currency String?\nvar purchaseType String\nvar categoryIdentifier String\nvar limitedNumberLeft Int?\nvar unlockCondition ShopItemUnlockCondition?\nvar path String?\nvar unlockPath String?\nvar isSuggested String?\nvar pinType String?\nvar habitClass String?\nvar previous String?\nvar level Int?\nvar event ItemEvent?\nvar setImageNames\nval isTypeItem Boolean\nval isTypeQuest Boolean\nval isTypeGear Boolean\nval isTypeAnimal Boolean\nval canPurchaseBulk Boolean\nval GEM_FOR_GOLD",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "            item.purchaseType = \"gems\"\r\n            item.pinType = \"gem\"\r\n            item.path = \"special.gems\"\r\n            return item\r\n        }",
  "context" : "fun makeGemItem(res: Resources?): ShopItem {\r\n            val item = ShopItem()\r\n            item.key = GEM_FOR_GOLD\r\n            item.text = res?.getString(R.string.gem_shop) ?: \"\"\r\n            item.notes = res?.getString(R.string.gem_for_gold_description) ?: \"\"\r\n            item.imageName = \"gem_shop\"\r\n            item.value = 20\r\n            item.currency = \"gold\"\r\n            item.purchaseType = \"gems\"\r\n            item.pinType = \"gem\"\r\n            item.path = \"special.gems\"\r\n            return item\r\n        }",
  "start_lineno" : "137",
  "methodName" : "makeGemItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItem.kt",
  "task_id" : "habitica-android/306",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.res.Resources\nfun makeGemItem(res: Resources?): ShopItem {\r\n            val item = ShopItem()\r\n            item.key = GEM_FOR_GOLD\r\n            item.text = res?.getString(R.string.gem_shop) ?: \"\"\r\n            item.notes = res?.getString(R.string.gem_for_gold_description) ?: \"\"\r\n            item.imageName = \"gem_shop\"\r\n            item.value = 20\r\n            item.currency = \"gold\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var key String\nvar text String?\nvar notes String?\nvar imageName String?\nvar value Int\nvar locked Boolean\nvar isLimited Boolean\nvar currency String?\nvar purchaseType String\nvar categoryIdentifier String\nvar limitedNumberLeft Int?\nvar unlockCondition ShopItemUnlockCondition?\nvar path String?\nvar unlockPath String?\nvar isSuggested String?\nvar pinType String?\nvar habitClass String?\nvar previous String?\nvar level Int?\nvar event ItemEvent?\nvar setImageNames\nval isTypeItem Boolean\nval isTypeQuest Boolean\nval isTypeGear Boolean\nval isTypeAnimal Boolean\nval canPurchaseBulk Boolean\nval GEM_FOR_GOLD",
  "app_type" : "life",
  "end_lineno" : "163",
  "ground_truth" : "            item.pinType = \"fortify\"\r\n            item.path = \"special.fortify\"\r\n            item.purchaseType = \"fortify\"\r\n            return item\r\n        }",
  "context" : "fun makeFortifyItem(res: Resources?): ShopItem {\r\n            val item = ShopItem()\r\n            item.key = \"fortify\"\r\n            item.text = res?.getString(R.string.fortify_shop) ?: \"\"\r\n            item.notes = res?.getString(R.string.fortify_shop_description) ?: \"\"\r\n            item.imageName = \"inventory_special_fortify\"\r\n            item.value = 4\r\n            item.currency = \"gems\"\r\n            item.pinType = \"fortify\"\r\n            item.path = \"special.fortify\"\r\n            item.purchaseType = \"fortify\"\r\n            return item\r\n        }",
  "start_lineno" : "151",
  "methodName" : "makeFortifyItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItem.kt",
  "task_id" : "habitica-android/307",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.res.Resources\nfun makeFortifyItem(res: Resources?): ShopItem {\r\n            val item = ShopItem()\r\n            item.key = \"fortify\"\r\n            item.text = res?.getString(R.string.fortify_shop) ?: \"\"\r\n            item.notes = res?.getString(R.string.fortify_shop_description) ?: \"\"\r\n            item.imageName = \"inventory_special_fortify\"\r\n            item.value = 4\r\n            item.currency = \"gems\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var condition String?\nvar incentiveThreshold Int?",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "        \"create account\" -> context.getString(R.string.create_account)\r\n        else -> \"\"\r\n    }",
  "context" : "fun readableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_count, incentiveThreshold) else context.getString(R.string.login_incentive)\r\n        \"create account\" -> context.getString(R.string.create_account)\r\n        else -> \"\"\r\n    }",
  "start_lineno" : "15",
  "methodName" : "readableUnlockCondition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItemUnlockCondition.kt",
  "task_id" : "habitica-android/308",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun readableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_count, incentiveThreshold) else context.getString(R.string.login_incentive)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var condition String?\nvar incentiveThreshold Int?",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "        \"create account\" -> context.getString(R.string.create_account_short)\r\n        else -> \"\"\r\n    }",
  "context" : "fun shortReadableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite_short)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_short_count, incentiveThreshold) else context.getString(R.string.login_incentive_short)\r\n        \"create account\" -> context.getString(R.string.create_account_short)\r\n        else -> \"\"\r\n    }",
  "start_lineno" : "22",
  "methodName" : "shortReadableUnlockCondition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItemUnlockCondition.kt",
  "task_id" : "habitica-android/309",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun shortReadableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite_short)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_short_count, incentiveThreshold) else context.getString(R.string.login_incentive_short)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String?\nvar name String?\nvar shortName String?\nvar description String?\nvar leaderName String?\nvar leaderId String?\nvar groupName String?\nvar groupId String?\nvar prize Int\nvar official Boolean\nvar memberCount Int\nvar todoList String?\nvar habitList String?\nvar dailyList String?\nvar rewardList String?\nvar createdAt Date?\nvar updatedAt Date?\nvar group Group?\nvar leader User?\nvar tasksOrder TasksOrder?\nvar summary String?\nval realmClass Class<out RealmModel>\nval primaryIdentifier String?\nval primaryIdentifierName String\nval TASK_ORDER_HABITS\nval TASK_ORDER_TODOS\nval TASK_ORDER_DAILYS\nval TASK_ORDER_REWARDS",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "            this.id == (other as Challenge).id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        return if (other?.javaClass == Challenge::class.java && this.id != null) {\r\n            this.id == (other as Challenge).id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "start_lineno" : "70",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Challenge.kt",
  "task_id" : "habitica-android/310",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        return if (other?.javaClass == Challenge::class.java && this.id != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isGroupPlan Boolean\nval realmClass Class<Group>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar id String\nvar balance Double\nvar description String?\nvar summary String?\nvar leaderID String?\nvar leaderName String?\nvar managers RealmList<String>?\nvar name String?\nvar memberCount Int\nvar type String?\nvar logo String?\nvar quest Quest?\nvar privacy String?\nvar challengeCount Int\nvar leaderMessage String?\nvar leaderOnlyChallenges Boolean\nvar leaderOnlyGetGems Boolean\nvar categories RealmList<GroupCategory>?\nvar purchased SubscriptionPlan?\nvar tasksOrder TasksOrder?\nval hasActiveQuest Boolean\nval gemCount Int\nval TAVERN_ID",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "            return true\r\n        }\r\n        val group = other as? Group\r\n        return id == group?.id\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        val group = other as? Group\r\n        return id == group?.id\r\n    }",
  "start_lineno" : "51",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Group.kt",
  "task_id" : "habitica-android/311",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isGroupPlan Boolean\nval realmClass Class<Group>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar id String\nvar balance Double\nvar description String?\nvar summary String?\nvar leaderID String?\nvar leaderName String?\nvar managers RealmList<String>?\nvar name String?\nvar memberCount Int\nvar type String?\nvar logo String?\nvar quest Quest?\nvar privacy String?\nvar challengeCount Int\nvar leaderMessage String?\nvar leaderOnlyChallenges Boolean\nvar leaderOnlyGetGems Boolean\nvar categories RealmList<GroupCategory>?\nvar purchased SubscriptionPlan?\nvar tasksOrder TasksOrder?\nval hasActiveQuest Boolean\nval gemCount Int\nval TAVERN_ID",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        }\r\n        return isManager(userID)\r\n    }",
  "context" : "fun hasTaskEditPrivileges(userID: String): Boolean {\r\n        if (isLeader(userID)) {\r\n            return true\r\n        }\r\n        return isManager(userID)\r\n    }",
  "start_lineno" : "63",
  "methodName" : "hasTaskEditPrivileges",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Group.kt",
  "task_id" : "habitica-android/312",
  "prompt" : "fun hasTaskEditPrivileges(userID: String): Boolean {\r\n        if (isLeader(userID)) {\r\n            return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String\nvar userId String?\nvar name String\nvar group String?\nvar challenge Boolean",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "        }\r\n        return super.equals(other)\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (other is Tag) {\r\n            return this.id == other.id\r\n        }\r\n        return super.equals(other)\r\n    }",
  "start_lineno" : "16",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\Tag.kt",
  "task_id" : "habitica-android/313",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (other is Tag) {\r\n            return this.id == other.id\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<ChecklistItem>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar id String?\nvar text String?\nvar completed Boolean\nvar position Int",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        dest.writeByte(if (completed) 1.toByte() else 0.toByte())\r\n        dest.writeInt(position)\r\n    }",
  "context" : "override fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r\n        dest.writeString(text)\r\n        dest.writeByte(if (completed) 1.toByte() else 0.toByte())\r\n        dest.writeInt(position)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "writeToParcel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\ChecklistItem.kt",
  "task_id" : "habitica-android/314",
  "prompt" : "import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r\n        dest.writeString(text)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<ChecklistItem>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar id String?\nvar text String?\nvar completed Boolean\nvar position Int",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        return if (other is ChecklistItem) {\r\n            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "start_lineno" : "66",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\ChecklistItem.kt",
  "task_id" : "habitica-android/315",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        return if (other is ChecklistItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isEveryDay Boolean\nval isOnlyWeekdays Boolean\nval isOnlyWeekends Boolean\nvar m Boolean\nvar t Boolean\nvar w Boolean\nvar th Boolean\nvar f Boolean\nvar s Boolean\nvar su Boolean",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        dest.writeByte(if (th) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (f) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (s) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (su) 1.toByte() else 0.toByte())\r\n    }",
  "context" : "override fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeByte(if (m) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (t) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (w) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (th) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (f) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (s) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (su) 1.toByte() else 0.toByte())\r\n    }",
  "start_lineno" : "24",
  "methodName" : "writeToParcel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Days.kt",
  "task_id" : "habitica-android/316",
  "prompt" : "import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeByte(if (m) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (t) 1.toByte() else 0.toByte())\r\n        dest.writeByte(if (w) 1.toByte() else 0.toByte())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isEveryDay Boolean\nval isOnlyWeekdays Boolean\nval isOnlyWeekends Boolean\nvar m Boolean\nvar t Boolean\nvar w Boolean\nvar th Boolean\nvar f Boolean\nvar s Boolean\nvar su Boolean",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        if (f) days.add(context.getString(R.string.friday))\r\n        if (s) days.add(context.getString(R.string.saturday))\r\n        if (su) days.add(context.getString(R.string.sunday))\r\n        return days\r\n    }",
  "context" : "fun dayStrings(context: Context): List<String> {\r\n        val days = mutableListOf<String>()\r\n        if (m) days.add(context.getString(R.string.monday))\r\n        if (t) days.add(context.getString(R.string.tuesday))\r\n        if (w) days.add(context.getString(R.string.wednesday))\r\n        if (th) days.add(context.getString(R.string.thursday))\r\n        if (f) days.add(context.getString(R.string.friday))\r\n        if (s) days.add(context.getString(R.string.saturday))\r\n        if (su) days.add(context.getString(R.string.sunday))\r\n        return days\r\n    }",
  "start_lineno" : "48",
  "methodName" : "dayStrings",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Days.kt",
  "task_id" : "habitica-android/317",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun dayStrings(context: Context): List<String> {\r\n        val days = mutableListOf<String>()\r\n        if (m) days.add(context.getString(R.string.monday))\r\n        if (t) days.add(context.getString(R.string.tuesday))\r\n        if (w) days.add(context.getString(R.string.wednesday))\r\n        if (th) days.add(context.getString(R.string.thursday))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String?\nvar startDate String?\nvar time String?\nvar type String?",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "        dest.writeString(startDate)\r\n        dest.writeString(time)\r\n    }",
  "context" : "override fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r\n        dest.writeString(startDate)\r\n        dest.writeString(time)\r\n    }",
  "start_lineno" : "29",
  "methodName" : "writeToParcel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\RemindersItem.kt",
  "task_id" : "habitica-android/318",
  "prompt" : "import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String?\nvar startDate String?\nvar time String?\nvar type String?",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        return if (other is RemindersItem) {\r\n            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\RemindersItem.kt",
  "task_id" : "habitica-android/319",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        return if (other is RemindersItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "            group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == byUserID }?.completed ?: completed\r\n        } else {\r\n            completed\r\n        }\r\n    }",
  "context" : "fun completed(byUserID: String?): Boolean {\r\n        return if (isGroupTask) {\r\n            group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == byUserID }?.completed ?: completed\r\n        } else {\r\n            completed\r\n        }\r\n    }",
  "start_lineno" : "133",
  "methodName" : "completed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/320",
  "prompt" : "fun completed(byUserID: String?): Boolean {\r\n        return if (isGroupTask) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "            }\r\n        } else {\r\n            this.completed = completed\r\n        }\r\n    }",
  "context" : "fun completeForUser(userID: String?, completed: Boolean) {\r\n        if (isGroupTask && group?.assignedUsersDetail?.isNotEmpty() == true) {\r\n            group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.completed = completed\r\n            if (group?.assignedUsersDetail?.none { it.completed != completed } == true) {\r\n                this.completed = completed\r\n            }\r\n        } else {\r\n            this.completed = completed\r\n        }\r\n    }",
  "start_lineno" : "141",
  "methodName" : "completeForUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/321",
  "prompt" : "fun completeForUser(userID: String?, completed: Boolean) {\r\n        if (isGroupTask && group?.assignedUsersDetail?.isNotEmpty() == true) {\r\n            group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.completed = completed\r\n            if (group?.assignedUsersDetail?.none { it.completed != completed } == true) {\r\n                this.completed = completed\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "        val isActive = ((isDue == true && type == TaskType.DAILY) || type == TaskType.TODO)\r\n        return isActive && !completed(userID)\r\n    }",
  "context" : "fun isDisplayedActiveForUser(userID: String?): Boolean {\r\n        val isActive = ((isDue == true && type == TaskType.DAILY) || type == TaskType.TODO)\r\n        return isActive && !completed(userID)\r\n    }",
  "start_lineno" : "152",
  "methodName" : "isDisplayedActiveForUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/322",
  "prompt" : "fun isDisplayedActiveForUser(userID: String?): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "165",
  "ground_truth" : "            val year = ZonedDateTime.now().year\r\n            return (zonedDueDate.dayOfYear == day) && (zonedDueDate.year == year)\r\n        }\r\n        return null\r\n    }",
  "context" : "fun isDueToday(): Boolean? {\r\n        val zonedDueDate = dueDate?.toZonedDateTime()\r\n        if (zonedDueDate != null) {\r\n            val day = ZonedDateTime.now().dayOfYear\r\n            val year = ZonedDateTime.now().year\r\n            return (zonedDueDate.dayOfYear == day) && (zonedDueDate.year == year)\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "157",
  "methodName" : "isDueToday",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/323",
  "prompt" : "import java.util.Date\nimport java.time.ZonedDateTime\nimport com.habitrpg.android.habitica.extensions.toZonedDateTime\nfun isDueToday(): Boolean? {\r\n        val zonedDueDate = dueDate?.toZonedDateTime()\r\n        if (zonedDueDate != null) {\r\n            val day = ZonedDateTime.now().dayOfYear\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "170",
  "ground_truth" : "        val zonedDueDate = dueDate?.toZonedDateTime()\r\n        return zonedDueDate?.toLocalDate()?.isBefore(LocalDate.now())\r\n    }",
  "context" : "fun isDayOrMorePastDue(): Boolean? {\r\n        val zonedDueDate = dueDate?.toZonedDateTime()\r\n        return zonedDueDate?.toLocalDate()?.isBefore(LocalDate.now())\r\n    }",
  "start_lineno" : "167",
  "methodName" : "isDayOrMorePastDue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/324",
  "prompt" : "fun isDayOrMorePastDue(): Boolean? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "448",
  "ground_truth" : "        parsedText = MarkdownParser.parseMarkdown(text)\r\n        parsedNotes = MarkdownParser.parseMarkdown(notes)\r\n    }",
  "context" : "fun parseMarkdown() {\r\n        parsedText = MarkdownParser.parseMarkdown(text)\r\n        parsedNotes = MarkdownParser.parseMarkdown(notes)\r\n    }",
  "start_lineno" : "445",
  "methodName" : "parseMarkdown",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/325",
  "prompt" : "fun parseMarkdown() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "461",
  "ground_truth" : "            callback(parsedText)\r\n        }\r\n\r\n        return this.text\r\n    }",
  "context" : "fun markdownText(callback: (CharSequence) -> Unit): CharSequence {\r\n        if (this.parsedText != null) {\r\n            return this.parsedText ?: \"\"\r\n        }\r\n\r\n        MarkdownParser.parseMarkdownAsync(this.text) { parsedText ->\r\n            this.parsedText = parsedText\r\n            callback(parsedText)\r\n        }\r\n\r\n        return this.text\r\n    }",
  "start_lineno" : "450",
  "methodName" : "markdownText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/326",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MarkdownParser\nfun markdownText(callback: (CharSequence) -> Unit): CharSequence {\r\n        if (this.parsedText != null) {\r\n            return this.parsedText ?: \"\"\r\n        }\r\n\r\n        MarkdownParser.parseMarkdownAsync(this.text) { parsedText ->\r\n            this.parsedText = parsedText\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "475",
  "ground_truth" : "                callback(parsedText)\r\n            }\r\n        }\r\n        return notes\r\n    }",
  "context" : "fun markdownNotes(callback: (CharSequence) -> Unit): CharSequence? {\r\n        if (parsedNotes != null) {\r\n            return parsedNotes\r\n        }\r\n\r\n        if (notes?.isNotEmpty() == true) {\r\n            MarkdownParser.parseMarkdownAsync(notes) { parsedText ->\r\n                parsedNotes = parsedText\r\n                callback(parsedText)\r\n            }\r\n        }\r\n        return notes\r\n    }",
  "start_lineno" : "463",
  "methodName" : "markdownNotes",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/327",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MarkdownParser\nfun markdownNotes(callback: (CharSequence) -> Unit): CharSequence? {\r\n        if (parsedNotes != null) {\r\n            return parsedNotes\r\n        }\r\n\r\n        if (notes?.isNotEmpty() == true) {\r\n            MarkdownParser.parseMarkdownAsync(notes) { parsedText ->\r\n                parsedNotes = parsedText\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "491",
  "ground_truth" : "            }\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (other == null) {\r\n            return false\r\n        }\r\n        return if (Task::class.java.isAssignableFrom(other.javaClass)) {\r\n            val otherTask = other as? Task\r\n            if (this.isValid && otherTask?.isValid == true) {\r\n                this.id == otherTask.id\r\n            } else {\r\n                false\r\n            }\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }",
  "start_lineno" : "477",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/328",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (other == null) {\r\n            return false\r\n        }\r\n        return if (Task::class.java.isAssignableFrom(other.javaClass)) {\r\n            val otherTask = other as? Task\r\n            if (this.isValid && otherTask?.isValid == true) {\r\n                this.id == otherTask.id\r\n            } else {\r\n                false\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "617",
  "ground_truth" : "            this.weeksOfMonthString = this.weeksOfMonth?.toString()\r\n        } else {\r\n            weeksOfMonthString = \"[]\"\r\n        }\r\n    }",
  "context" : "fun setWeeksOfMonth(weeksOfMonth: List<Int>?) {\r\n        this.weeksOfMonth = weeksOfMonth\r\n        if ((weeksOfMonth?.size ?: 0) > 0) {\r\n            this.weeksOfMonthString = this.weeksOfMonth?.toString()\r\n        } else {\r\n            weeksOfMonthString = \"[]\"\r\n        }\r\n    }",
  "start_lineno" : "610",
  "methodName" : "setWeeksOfMonth",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/329",
  "prompt" : "fun setWeeksOfMonth(weeksOfMonth: List<Int>?) {\r\n        this.weeksOfMonth = weeksOfMonth\r\n        if ((weeksOfMonth?.size ?: 0) > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<Task>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar combinedID String?\nvar id String?\nvar ownerID String\nvar priority Float\nvar text String\nvar notes String?\nvar type TaskType?\nvar typeValue String?\nvar challengeID String?\nvar challengeBroken String?\nvar attribute Attribute?\nvar attributeValue String?\nvar value Double\nvar tags RealmList<Tag>?\nvar dateCreated Date?\nvar position Int\nvar group TaskGroupPlan?\nvar up Boolean?\nvar down Boolean?\nvar counterUp Int?\nvar counterDown Int?\nvar completed Boolean\nvar checklist RealmList<ChecklistItem>?\nvar reminders RealmList<RemindersItem>?\nvar frequency Frequency?\nvar frequencyValue String?\nvar everyX Int?\nvar streak Int?\nvar startDate Date?\nvar repeat Days?\nvar dueDate Date?\nvar parsedText Spanned?\nvar parsedNotes Spanned?\nvar isDue Boolean?\nvar nextDue RealmList<Date>?\nvar updatedAt Date?\nval isUpdatedToday Boolean\nvar isSaving Boolean\nvar hasErrored Boolean\nvar isCreating Boolean\nvar yesterDaily Boolean\nvar daysOfMonthString String?\nvar weeksOfMonthString String?\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nval completedChecklistCount Int\nval streakString String?\nval lightestTaskColor Int\nval extraExtraLightTaskColor Int\nval extraLightTaskColor Int\nval lightTaskColor Int\nval mediumTaskColor Int\nval darkTaskColor Int\nval extraDarkTaskColor Int\nval lowSaturationTaskColor Int\nval extraExtraDarkTaskColor Int\nval darkestTaskColor Int\nval isChecklistDisplayActive Boolean\nval isGroupTask Boolean\nval isPendingApproval Boolean\nval FILTER_ALL\nval FILTER_WEAK\nval FILTER_STRONG\nval FILTER_ACTIVE\nval FILTER_GRAY\nval FILTER_DATED\nval FILTER_COMPLETED\nval CREATOR Parcelable.Creator<Task>",
  "app_type" : "life",
  "end_lineno" : "646",
  "ground_truth" : "            this.daysOfMonthString = this.daysOfMonth?.toString()\r\n        } else {\r\n            daysOfMonthString = \"[]\"\r\n        }\r\n    }",
  "context" : "fun setDaysOfMonth(daysOfMonth: List<Int>?) {\r\n        this.daysOfMonth = daysOfMonth\r\n        if ((daysOfMonth?.size ?: 0) > 0) {\r\n            this.daysOfMonthString = this.daysOfMonth?.toString()\r\n        } else {\r\n            daysOfMonthString = \"[]\"\r\n        }\r\n    }",
  "start_lineno" : "639",
  "methodName" : "setDaysOfMonth",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt",
  "task_id" : "habitica-android/330",
  "prompt" : "fun setDaysOfMonth(daysOfMonth: List<Int>?) {\r\n        this.daysOfMonth = daysOfMonth\r\n        if ((daysOfMonth?.size ?: 0) > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var id String\nvar userID String?\nvar summary String\nvar leaderID String?\nvar isActive Boolean",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        }\r\n        return super.equals(other)\r\n    }",
  "context" : "override fun equals(other: Any?): Boolean {\r\n        if (other is TeamPlan) {\r\n            return this.id == other.id\r\n        }\r\n        return super.equals(other)\r\n    }",
  "start_lineno" : "20",
  "methodName" : "equals",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\TeamPlan.kt",
  "task_id" : "habitica-android/331",
  "prompt" : "override fun equals(other: Any?): Boolean {\r\n        if (other is TeamPlan) {\r\n            return this.id == other.id\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var blocked Boolean\nval hasPassword Boolean\nvar localAuthentication LocalAuthentication?\nvar googleAuthentication SocialAuthentication?\nvar appleAuthentication SocialAuthentication?\nvar facebookAuthentication SocialAuthentication?\nval hasGoogleAuth Boolean\nval hasAppleAuth Boolean\nval hasFacebookAuth Boolean\nvar timestamps AuthenticationTimestamps?",
  "app_type" : "life",
  "end_lineno" : "20",
  "ground_truth" : "                return auth.emails.first()\r\n            }\r\n        }\r\n        return null\r\n    }",
  "context" : "fun findFirstSocialEmail(): String? {\r\n        for (auth in listOf(googleAuthentication, appleAuthentication, facebookAuthentication)) {\r\n            if (auth?.emails?.isNotEmpty() == true) {\r\n                return auth.emails.first()\r\n            }\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "13",
  "methodName" : "findFirstSocialEmail",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\Authentication.kt",
  "task_id" : "habitica-android/332",
  "prompt" : "fun findFirstSocialEmail(): String? {\r\n        for (auth in listOf(googleAuthentication, appleAuthentication, facebookAuthentication)) {\r\n            if (auth?.emails?.isNotEmpty() == true) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eggs RealmList<OwnedItem>?\nvar food RealmList<OwnedItem>?\nvar hatchingPotions RealmList<OwnedItem>?\nvar quests RealmList<OwnedItem>?\nvar special RealmList<OwnedItem>?\nvar pets RealmList<OwnedPet>?\nvar mounts RealmList<OwnedMount>?\nvar currentMount String?\nvar currentPet String?\nvar lastDropCount Int\nvar lastDropDate Date?\nvar gear Gear?\nval hasTransformationItems Boolean",
  "app_type" : "life",
  "end_lineno" : "18",
  "ground_truth" : "        eggs?.forEach { it.itemType = \"eggs\" }\r\n        food?.forEach { it.itemType = \"food\" }\r\n        quests?.forEach { it.itemType = \"quests\" }\r\n        special?.forEach { it.itemType = \"special\" }\r\n    }",
  "context" : "fun setItemTypes() {\r\n        hatchingPotions?.forEach { it.itemType = \"hatchingPotions\" }\r\n        eggs?.forEach { it.itemType = \"eggs\" }\r\n        food?.forEach { it.itemType = \"food\" }\r\n        quests?.forEach { it.itemType = \"quests\" }\r\n        special?.forEach { it.itemType = \"special\" }\r\n    }",
  "start_lineno" : "12",
  "methodName" : "setItemTypes",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\Items.kt",
  "task_id" : "habitica-android/333",
  "prompt" : "fun setItemTypes() {\r\n        hatchingPotions?.forEach { it.itemType = \"hatchingPotions\" }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var con Float\nvar str Float\nvar per Float\nvar _int Float",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        con = stats.con\r\n        str = stats.str\r\n        per = stats.per\r\n        _int = stats._int\r\n    }",
  "context" : "fun merge(stats: Training?) {\r\n        if (stats == null) {\r\n            return\r\n        }\r\n        con = stats.con\r\n        str = stats.str\r\n        per = stats.per\r\n        _int = stats._int\r\n    }",
  "start_lineno" : "17",
  "methodName" : "merge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\Training.kt",
  "task_id" : "habitica-android/334",
  "prompt" : "fun merge(stats: Training?) {\r\n        if (stats == null) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val realmClass Class<User>\nval primaryIdentifier String?\nval primaryIdentifierName String\nvar tasks TaskList?\nvar id String?\nvar versionNumber Int\nvar balance Double\nvar stats Stats?\nvar inbox Inbox?\nvar permissions Permissions?\nvar preferences Preferences?\nvar profile Profile?\nvar party UserParty?\nvar items Items?\nvar authentication Authentication?\nvar flags Flags?\nvar contributor ContributorInfo?\nvar backer Backer?\nvar invitations Invitations?\nvar tags\nvar achievements\nvar questAchievements\nvar challengeAchievements\nvar pushDevices List<PushDevice>?\nvar purchased Purchases?\nvar tasksOrder TasksOrder?\nvar challenges RealmList<ChallengeMembership>?\nvar abTests RealmList<ABTest>?\nvar lastCron Date?\nvar needsCron Boolean\nvar loginIncentives Int\nvar streakCount Int\nval petsFoundCount Int\nval mountsTamedCount Int\nval contributorColor Int\nvar hourglassCount Int\nval hasParty Boolean\nval isSubscribed Boolean\nval onboardingAchievements List<UserAchievement>\nval hasCompletedOnboarding Boolean\nval ONBOARDING_ACHIEVEMENT_KEYS",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "        return when (permission) {\r\n            Permission.MODERATOR -> permissions?.moderator\r\n            Permission.USER_SUPPORT -> permissions?.userSupport\r\n        } == true\r\n    }",
  "context" : "fun hasPermission(permission: Permission): Boolean {\r\n        if (permissions?.fullAccess == true) return true\r\n        return when (permission) {\r\n            Permission.MODERATOR -> permissions?.moderator\r\n            Permission.USER_SUPPORT -> permissions?.userSupport\r\n        } == true\r\n    }",
  "start_lineno" : "28",
  "methodName" : "hasPermission",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\User.kt",
  "task_id" : "habitica-android/335",
  "prompt" : "fun hasPermission(permission: Permission): Boolean {\r\n        if (permissions?.fullAccess == true) return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            context\r\n        )\r\n        notificationsManager.apiClient = WeakReference(apiClient)\r\n        return apiClient\r\n    }",
  "context" : " @Provides\r\n    @Singleton\r\n    fun providesApiHelper(\r\n        gsonConverter: GsonConverterFactory,\r\n        hostConfig: HostConfig,\r\n        notificationsManager: NotificationsManager,\r\n        @ApplicationContext context: Context\r\n    ): ApiClient {\r\n        val apiClient = ApiClientImpl(\r\n            gsonConverter,\r\n            hostConfig,\r\n            notificationsManager,\r\n            context\r\n        )\r\n        notificationsManager.apiClient = WeakReference(apiClient)\r\n        return apiClient\r\n    }",
  "start_lineno" : "47",
  "methodName" : "providesApiHelper",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\ApiModule.kt",
  "task_id" : "habitica-android/336",
  "prompt" : "import javax.inject.Singleton\nimport retrofit2.converter.gson.GsonConverterFactory\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.habitrpg.common.habitica.api.HostConfig\nimport com.habitrpg.android.habitica.helpers.NotificationsManager\nimport com.habitrpg.android.habitica.data.implementation.ApiClientImpl\nimport com.habitrpg.android.habitica.data.ApiClient\nimport android.content.Context\n @Provides\r\n    @Singleton\r\n    fun providesApiHelper(\r\n        gsonConverter: GsonConverterFactory,\r\n        hostConfig: HostConfig,\r\n        notificationsManager: NotificationsManager,\r\n        @ApplicationContext context: Context\r\n    ): ApiClient {\r\n        val apiClient = ApiClientImpl(\r\n            gsonConverter,\r\n            hostConfig,\r\n            notificationsManager,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "            .baseUrl(\"https://habitica-assets.s3.amazonaws.com/mobileApp/endpoint/\")\r\n            .addConverterFactory(gsonConverter)\r\n            .build()\r\n        return adapter.create(MaintenanceApiService::class.java)\r\n    }",
  "context" : " @Provides\r\n    fun providesMaintenanceApiService(gsonConverter: GsonConverterFactory): MaintenanceApiService {\r\n        val adapter = Retrofit.Builder()\r\n            .baseUrl(\"https://habitica-assets.s3.amazonaws.com/mobileApp/endpoint/\")\r\n            .addConverterFactory(gsonConverter)\r\n            .build()\r\n        return adapter.create(MaintenanceApiService::class.java)\r\n    }",
  "start_lineno" : "65",
  "methodName" : "providesMaintenanceApiService",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\ApiModule.kt",
  "task_id" : "habitica-android/337",
  "prompt" : "import retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.Retrofit\nimport dagger.Provides\nimport com.habitrpg.android.habitica.api.MaintenanceApiService\n @Provides\r\n    fun providesMaintenanceApiService(gsonConverter: GsonConverterFactory): MaintenanceApiService {\r\n        val adapter = Retrofit.Builder()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "            null\r\n        } else {\r\n            getInstance(context, sharedPreferences, keyStore)\r\n        }\r\n    }",
  "context" : " @Provides\r\n    fun provideKeyHelper(\r\n        @ApplicationContext context: Context,\r\n        sharedPreferences: SharedPreferences,\r\n        keyStore: KeyStore?\r\n    ): KeyHelper? {\r\n        return if (keyStore == null) {\r\n            null\r\n        } else {\r\n            getInstance(context, sharedPreferences, keyStore)\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "provideKeyHelper",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\AppModule.kt",
  "task_id" : "habitica-android/338",
  "prompt" : "import java.security.KeyStore\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.habitrpg.common.habitica.helpers.KeyHelper\nimport android.content.SharedPreferences\nimport android.content.Context\n @Provides\r\n    fun provideKeyHelper(\r\n        @ApplicationContext context: Context,\r\n        sharedPreferences: SharedPreferences,\r\n        keyStore: KeyStore?\r\n    ): KeyHelper? {\r\n        return if (keyStore == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "            AuthenticationHandler(BuildConfig.TEST_USER_ID)\r\n        } else {\r\n            AuthenticationHandler(sharedPreferences)\r\n        }\r\n    }",
  "context" : " @Provides\r\n    @Singleton\r\n    fun providesAuthenticationHandler(sharedPreferences: SharedPreferences): AuthenticationHandler {\r\n        return if (BuildConfig.DEBUG && BuildConfig.TEST_USER_ID.isNotEmpty()) {\r\n            AuthenticationHandler(BuildConfig.TEST_USER_ID)\r\n        } else {\r\n            AuthenticationHandler(sharedPreferences)\r\n        }\r\n    }",
  "start_lineno" : "69",
  "methodName" : "providesAuthenticationHandler",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\AppModule.kt",
  "task_id" : "habitica-android/339",
  "prompt" : "import javax.inject.Singleton\nimport dagger.Provides\nimport com.habitrpg.android.habitica.BuildConfig\nimport android.content.SharedPreferences\n @Provides\r\n    @Singleton\r\n    fun providesAuthenticationHandler(sharedPreferences: SharedPreferences): AuthenticationHandler {\r\n        return if (BuildConfig.DEBUG && BuildConfig.TEST_USER_ID.isNotEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "            apiClient,\r\n            context,\r\n            authenticationHandler\r\n        )\r\n    }",
  "context" : " @Provides\r\n    fun providesContentRepository(\r\n        contentLocalRepository: ContentLocalRepository,\r\n        apiClient: ApiClient,\r\n        @ApplicationContext context: Context,\r\n        authenticationHandler: AuthenticationHandler\r\n    ): ContentRepository {\r\n        return ContentRepositoryImpl(\r\n            contentLocalRepository,\r\n            apiClient,\r\n            context,\r\n            authenticationHandler\r\n        )\r\n    }",
  "start_lineno" : "29",
  "methodName" : "providesContentRepository",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\RepositoryModule.kt",
  "task_id" : "habitica-android/340",
  "prompt" : "import dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.habitrpg.android.habitica.data.local.ContentLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.ContentRepositoryImpl\nimport com.habitrpg.android.habitica.data.ContentRepository\nimport com.habitrpg.android.habitica.data.ApiClient\nimport android.content.Context\n @Provides\r\n    fun providesContentRepository(\r\n        contentLocalRepository: ContentLocalRepository,\r\n        apiClient: ApiClient,\r\n        @ApplicationContext context: Context,\r\n        authenticationHandler: AuthenticationHandler\r\n    ): ContentRepository {\r\n        return ContentRepositoryImpl(\r\n            contentLocalRepository,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "            apiClient,\r\n            authenticationHandler,\r\n            appConfigManager\r\n        )\r\n    }",
  "context" : " @Provides\r\n    fun providesTaskRepository(\r\n        localRepository: TaskLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        appConfigManager: AppConfigManager,\r\n    ): TaskRepository {\r\n        return TaskRepositoryImpl(\r\n            localRepository,\r\n            apiClient,\r\n            authenticationHandler,\r\n            appConfigManager\r\n        )\r\n    }",
  "start_lineno" : "67",
  "methodName" : "providesTaskRepository",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\UserRepositoryModule.kt",
  "task_id" : "habitica-android/341",
  "prompt" : "import dagger.Provides\nimport com.habitrpg.android.habitica.helpers.AppConfigManager\nimport com.habitrpg.android.habitica.data.local.TaskLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.TaskRepositoryImpl\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.data.ApiClient\n @Provides\r\n    fun providesTaskRepository(\r\n        localRepository: TaskLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        appConfigManager: AppConfigManager,\r\n    ): TaskRepository {\r\n        return TaskRepositoryImpl(\r\n            localRepository,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "            authenticationHandler,\r\n            taskRepository,\r\n            appConfigManager,\r\n        )\r\n    }",
  "context" : " @Provides\r\n    fun providesUserRepository(\r\n        localRepository: UserLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        taskRepository: TaskRepository,\r\n        appConfigManager: AppConfigManager,\r\n    ): UserRepository {\r\n        return UserRepositoryImpl(\r\n            localRepository,\r\n            apiClient,\r\n            authenticationHandler,\r\n            taskRepository,\r\n            appConfigManager,\r\n        )\r\n    }",
  "start_lineno" : "115",
  "methodName" : "providesUserRepository",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\UserRepositoryModule.kt",
  "task_id" : "habitica-android/342",
  "prompt" : "import dagger.Provides\nimport com.habitrpg.android.habitica.helpers.AppConfigManager\nimport com.habitrpg.android.habitica.data.local.UserLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.UserRepositoryImpl\nimport com.habitrpg.android.habitica.data.UserRepository\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.data.ApiClient\n @Provides\r\n    fun providesUserRepository(\r\n        localRepository: UserLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        taskRepository: TaskRepository,\r\n        appConfigManager: AppConfigManager,\r\n    ): UserRepository {\r\n        return UserRepositoryImpl(\r\n            localRepository,\r\n            apiClient,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var timeval String?\nval lastHour Int\nval lastMinute Int\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        } else {\r\n            getPersistedString(defaultValue.toString())\r\n        }\r\n        summary = timeval ?: \"\"\r\n    }",
  "context" : "override fun onSetInitialValue(defaultValue: Any?) {\r\n        timeval = null\r\n        timeval = if (defaultValue == null) {\r\n            getPersistedString(\"19:00\")\r\n        } else {\r\n            getPersistedString(defaultValue.toString())\r\n        }\r\n        summary = timeval ?: \"\"\r\n    }",
  "start_lineno" : "17",
  "methodName" : "onSetInitialValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\prefs\\TimePreference.kt",
  "task_id" : "habitica-android/343",
  "prompt" : "override fun onSetInitialValue(defaultValue: Any?) {\r\n        timeval = null\r\n        timeval = if (defaultValue == null) {\r\n            getPersistedString(\"19:00\")\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var timeval String?\nval lastHour Int\nval lastMinute Int\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "        calendar.set(Calendar.HOUR_OF_DAY, getHour(timeval))\r\n        calendar.set(Calendar.MINUTE, getMinute(timeval))\r\n        val formatter = DateFormat.getTimeInstance(DateFormat.SHORT)\r\n        super.setSummary(formatter.format(calendar.time))\r\n    }",
  "context" : "override fun setSummary(summary: CharSequence?) {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r\n        calendar.set(Calendar.HOUR_OF_DAY, getHour(timeval))\r\n        calendar.set(Calendar.MINUTE, getMinute(timeval))\r\n        val formatter = DateFormat.getTimeInstance(DateFormat.SHORT)\r\n        super.setSummary(formatter.format(calendar.time))\r\n    }",
  "start_lineno" : "43",
  "methodName" : "setSummary",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\prefs\\TimePreference.kt",
  "task_id" : "habitica-android/344",
  "prompt" : "import java.util.Locale\nimport java.util.Calendar\noverride fun setSummary(summary: CharSequence?) {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nval messageClient",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        startActivity(intent)\r\n        messageClient.sendMessage(event.sourceNodeId, \"/action_completed\", null)\r\n    }",
  "context" : "private fun openActivity(event: MessageEvent, activityClass: Class<*>) {\r\n        val intent = Intent(this, activityClass)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        startActivity(intent)\r\n        messageClient.sendMessage(event.sourceNodeId, \"/action_completed\", null)\r\n    }",
  "start_lineno" : "33",
  "methodName" : "openActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\DeviceCommunicationService.kt",
  "task_id" : "habitica-android/345",
  "prompt" : "import com.google.android.gms.wearable.MessageEvent\nimport android.content.Intent\nprivate fun openActivity(event: MessageEvent, activityClass: Class<*>) {\r\n        val intent = Intent(this, activityClass)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r",
  "type" : "android",
  "actions" : "com.google.android.gms.wearable.MESSAGE_RECEIVED"
}, {
  "variables" : "var hostConfig HostConfig\nval messageClient",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        }\r\n        startIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        startActivity(startIntent)\r\n        messageClient.sendMessage(event.sourceNodeId, \"/action_completed\", null)\r\n    }",
  "context" : "private fun openTaskForm(event: MessageEvent) {\r\n        val taskID = String(event.data)\r\n        val startIntent = Intent(this, TaskFormActivity::class.java).apply {\r\n            putExtra(TaskFormActivity.TASK_ID_KEY, taskID)\r\n        }\r\n        startIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        startActivity(startIntent)\r\n        messageClient.sendMessage(event.sourceNodeId, \"/action_completed\", null)\r\n    }",
  "start_lineno" : "40",
  "methodName" : "openTaskForm",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\DeviceCommunicationService.kt",
  "task_id" : "habitica-android/346",
  "prompt" : "import com.habitrpg.android.habitica.ui.activities.TaskFormActivity\nimport com.google.android.gms.wearable.MessageEvent\nimport android.content.Intent\nprivate fun openTaskForm(event: MessageEvent) {\r\n        val taskID = String(event.data)\r\n        val startIntent = Intent(this, TaskFormActivity::class.java).apply {\r\n            putExtra(TaskFormActivity.TASK_ID_KEY, taskID)\r",
  "type" : "android",
  "actions" : "com.google.android.gms.wearable.MESSAGE_RECEIVED"
}, {
  "variables" : "var hostConfig HostConfig\nval messageClient",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "            event.sourceNodeId,\r\n            \"/auth\",\r\n            \"${hostConfig.userID}:${hostConfig.apiKey}\".toByteArray()\r\n        )\r\n    }",
  "context" : "private fun processAuthRequest(event: MessageEvent) {\r\n        messageClient.sendMessage(\r\n            event.sourceNodeId,\r\n            \"/auth\",\r\n            \"${hostConfig.userID}:${hostConfig.apiKey}\".toByteArray()\r\n        )\r\n    }",
  "start_lineno" : "50",
  "methodName" : "processAuthRequest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\DeviceCommunicationService.kt",
  "task_id" : "habitica-android/347",
  "prompt" : "import com.google.android.gms.wearable.MessageEvent\nprivate fun processAuthRequest(event: MessageEvent) {\r\n        messageClient.sendMessage(\r",
  "type" : "android",
  "actions" : "com.google.android.gms.wearable.MESSAGE_RECEIVED"
}, {
  "variables" : "var userRepository UserRepository\nvar socialRepository SocialRepository\nvar taskRepository TaskRepository\nvar apiClient ApiClient\nvar user User?\nval groupID String?\nval senderID String?\nval taskID String?\nvar context Context?\nvar intent Intent?",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        this.context = context\r\n        handleLocalNotificationAction(intent.action)\r\n    }",
  "context" : "override fun onReceive(context: Context, intent: Intent) {\r\n        this.intent = intent\r\n        this.context = context\r\n        handleLocalNotificationAction(intent.action)\r\n    }",
  "start_lineno" : "49",
  "methodName" : "onReceive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt",
  "task_id" : "habitica-android/348",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\r\n        this.intent = intent\r",
  "type" : "android",
  "actions" : "ACCEPT_PARTY_INVITE\nREJECT_PARTY_INVITE\nACCEPT_QUEST_INVITE\nREJECT_QUEST_INVITE"
}, {
  "variables" : "var userRepository UserRepository\nvar socialRepository SocialRepository\nvar taskRepository TaskRepository\nvar apiClient ApiClient\nvar user User?\nval groupID String?\nval senderID String?\nval taskID String?\nvar context Context?\nvar intent Intent?",
  "app_type" : "life",
  "end_lineno" : "140",
  "ground_truth" : "        val toast = Toast.makeText(context, text, Toast.LENGTH_LONG)\r\n        toast.show()\r\n    }",
  "context" : "private fun showToast(text: Spannable) {\r\n        val toast = Toast.makeText(context, text, Toast.LENGTH_LONG)\r\n        toast.show()\r\n    }",
  "start_lineno" : "137",
  "methodName" : "showToast",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt",
  "task_id" : "habitica-android/349",
  "prompt" : "import android.widget.Toast\nimport android.text.Spannable\nprivate fun showToast(text: Spannable) {\r",
  "type" : "android",
  "actions" : "ACCEPT_PARTY_INVITE\nREJECT_PARTY_INVITE\nACCEPT_QUEST_INVITE\nREJECT_QUEST_INVITE"
}, {
  "variables" : "var userRepository UserRepository\nvar socialRepository SocialRepository\nvar taskRepository TaskRepository\nvar apiClient ApiClient\nvar user User?\nval groupID String?\nval senderID String?\nval taskID String?\nvar context Context?\nvar intent Intent?",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "            RemoteInput.getResultsFromIntent(it)?.getCharSequence(key)?.toString()\r\n        }\r\n    }",
  "context" : "private fun getMessageText(key: String?): String? {\r\n        return intent?.let {\r\n            RemoteInput.getResultsFromIntent(it)?.getCharSequence(key)?.toString()\r\n        }\r\n    }",
  "start_lineno" : "142",
  "methodName" : "getMessageText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt",
  "task_id" : "habitica-android/350",
  "prompt" : "private fun getMessageText(key: String?): String? {\r\n        return intent?.let {\r",
  "type" : "java",
  "actions" : "ACCEPT_PARTY_INVITE\nREJECT_PARTY_INVITE\nACCEPT_QUEST_INVITE\nREJECT_QUEST_INVITE"
}, {
  "variables" : "var taskRepository TaskRepository\nvar userRepository UserRepository\nvar sharedPreferences SharedPreferences\nvar wasInjected\nvar context Context?\nvar NOTIFICATION_ID\nvar CHECK_DAILIES",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "        val id = intent.getIntExtra(NOTIFICATION_ID, 0)\r\n        notification?.let { notificationManager?.notify(id, it) }\r\n    }",
  "context" : "private fun notify(intent: Intent, notification: Notification?) {\r\n        val notificationManager = context?.let { NotificationManagerCompat.from(it) }\r\n        val id = intent.getIntExtra(NOTIFICATION_ID, 0)\r\n        notification?.let { notificationManager?.notify(id, it) }\r\n    }",
  "start_lineno" : "80",
  "methodName" : "notify",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\NotificationPublisher.kt",
  "task_id" : "habitica-android/351",
  "prompt" : "import androidx.core.app.NotificationManagerCompat\nimport android.content.Intent\nimport android.app.Notification\nprivate fun notify(intent: Intent, notification: Notification?) {\r\n        val notificationManager = context?.let { NotificationManagerCompat.from(it) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskAlarmManager TaskAlarmManager\nvar sharedPreferences SharedPreferences",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            taskAlarmManager.scheduleAllSavedAlarms(sharedPreferences.getBoolean(\"preventDailyReminder\", false))\r\n        }\r\n        HLogger.log(LogLevel.INFO, this::javaClass.name, \"onReceive\")\r\n    }",
  "context" : "override fun onReceive(context: Context, intent: Intent) {\r\n        if (intent.action != Intent.ACTION_BOOT_COMPLETED) {\r\n            return\r\n        }\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            taskAlarmManager.scheduleAllSavedAlarms(sharedPreferences.getBoolean(\"preventDailyReminder\", false))\r\n        }\r\n        HLogger.log(LogLevel.INFO, this::javaClass.name, \"onReceive\")\r\n    }",
  "start_lineno" : "25",
  "methodName" : "onReceive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\TaskAlarmBootReceiver.kt",
  "task_id" : "habitica-android/352",
  "prompt" : "import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\r\n        if (intent.action != Intent.ACTION_BOOT_COMPLETED) {\r\n            return\r\n        }\r",
  "type" : "android",
  "actions" : "android.intent.action.BOOT_COMPLETED"
}, {
  "variables" : "var widgetId Int\nvar binding WidgetConfigureAddTaskBinding",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "\r\n        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, this, AddTaskWidgetProvider::class.java)\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, intArrayOf(widgetId))\r\n        sendBroadcast(intent)\r\n    }",
  "context" : "private fun finishWithSelection(selectedTaskType: TaskType) {\r\n        storeSelectedTaskType(selectedTaskType)\r\n\r\n        val resultValue = Intent()\r\n        resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)\r\n        setResult(Activity.RESULT_OK, resultValue)\r\n        finish()\r\n\r\n        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, this, AddTaskWidgetProvider::class.java)\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, intArrayOf(widgetId))\r\n        sendBroadcast(intent)\r\n    }",
  "start_lineno" : "62",
  "methodName" : "finishWithSelection",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AddTaskWidgetActivity.kt",
  "task_id" : "habitica-android/353",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport android.content.Intent\nimport android.appwidget.AppWidgetManager\nimport android.app.Activity\nprivate fun finishWithSelection(selectedTaskType: TaskType) {\r\n        storeSelectedTaskType(selectedTaskType)\r\n\r\n        val resultValue = Intent()\r\n        resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)\r\n        setResult(Activity.RESULT_OK, resultValue)\r\n        finish()\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "var widgetId Int\nvar binding WidgetConfigureAddTaskBinding",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "            putString(\"add_task_widget_$widgetId\", selectedTaskType.value)\r\n        }\r\n    }",
  "context" : "private fun storeSelectedTaskType(selectedTaskType: TaskType) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r\n            putString(\"add_task_widget_$widgetId\", selectedTaskType.value)\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "storeSelectedTaskType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AddTaskWidgetActivity.kt",
  "task_id" : "habitica-android/354",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nprivate fun storeSelectedTaskType(selectedTaskType: TaskType) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "var binding ActivityAdventureGuideBinding\nvar userViewModel MainUserViewModel\nvar achievementTitles Map<String, String>\nvar achievementDescriptions Map<String, String>",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        binding = ActivityAdventureGuideBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityAdventureGuideBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "37",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AdventureGuideActivity.kt",
  "task_id" : "habitica-android/355",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityAdventureGuideBinding\nvar userViewModel MainUserViewModel\nvar achievementTitles Map<String, String>\nvar achievementDescriptions Map<String, String>",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            NavUtils.navigateUpFromSameTask(this)\r\n            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AdventureGuideActivity.kt",
  "task_id" : "habitica-android/356",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.core.app.NavUtils\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            NavUtils.navigateUpFromSameTask(this)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equipmentKey String?\nvar gold Double?\nvar hasAnimatedChanges Boolean\nvar binding ActivityArmoireBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "        binding = ActivityArmoireBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityArmoireBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "66",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt",
  "task_id" : "habitica-android/357",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equipmentKey String?\nvar gold Double?\nvar hasAnimatedChanges Boolean\nvar binding ActivityArmoireBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "        lifecycleScope.launchCatching {\r\n            delay(500L)\r\n            startAnimation(true)\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r\n            delay(500L)\r\n            startAnimation(true)\r\n        }\r\n    }",
  "start_lineno" : "236",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt",
  "task_id" : "habitica-android/358",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equipmentKey String?\nvar gold Double?\nvar hasAnimatedChanges Boolean\nvar binding ActivityArmoireBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager",
  "app_type" : "life",
  "end_lineno" : "312",
  "ground_truth" : "            .setScaleRange(1.0f, 1.6f)\r\n            .setSpeedByComponentsRange(-0.15f, 0.15f, 0.15f, 0.45f)\r\n            .setFadeOut(200, AccelerateInterpolator())\r\n            .emitWithGravity(binding.confettiAnchor, Gravity.TOP, 15, 2000)\r\n    }",
  "context" : "private fun createParticles(container: FrameLayout, resource: Int) {\r\n        ParticleSystem(\r\n            container,\r\n            30,\r\n            ContextCompat.getDrawable(this, resource),\r\n            6000\r\n        )\r\n            .setRotationSpeed(144f)\r\n            .setScaleRange(1.0f, 1.6f)\r\n            .setSpeedByComponentsRange(-0.15f, 0.15f, 0.15f, 0.45f)\r\n            .setFadeOut(200, AccelerateInterpolator())\r\n            .emitWithGravity(binding.confettiAnchor, Gravity.TOP, 15, 2000)\r\n    }",
  "start_lineno" : "300",
  "methodName" : "createParticles",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt",
  "task_id" : "habitica-android/359",
  "prompt" : "import com.plattysoft.leonids.ParticleSystem\nimport com.habitrpg.android.habitica.R\nimport androidx.core.content.ContextCompat\nimport android.widget.FrameLayout\nprivate fun createParticles(container: FrameLayout, resource: Int) {\r\n        ParticleSystem(\r\n            container,\r\n            30,\r\n            ContextCompat.getDrawable(this, resource),\r\n            6000\r\n        )\r\n            .setRotationSpeed(144f)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equipmentKey String?\nvar gold Double?\nvar hasAnimatedChanges Boolean\nvar binding ActivityArmoireBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "        dialog.setContentView(R.layout.armoire_drop_rate_dialog)\r\n        dialog.show()\r\n    }",
  "context" : "private fun showDropRateDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(this)\r\n        dialog.setContentView(R.layout.armoire_drop_rate_dialog)\r\n        dialog.show()\r\n    }",
  "start_lineno" : "338",
  "methodName" : "showDropRateDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt",
  "task_id" : "habitica-android/360",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaBottomSheetDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showDropRateDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "116",
  "ground_truth" : "        val languageHelper = LanguageHelper(sharedPreferences.getString(\"language\", \"en\"))\r\n        resources.forceLocale(this, languageHelper.locale)\r\n    }",
  "context" : "override fun onRestart() {\r\n        super.onRestart()\r\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n        val languageHelper = LanguageHelper(sharedPreferences.getString(\"language\", \"en\"))\r\n        resources.forceLocale(this, languageHelper.locale)\r\n    }",
  "start_lineno" : "111",
  "methodName" : "onRestart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/361",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\noverride fun onRestart() {\r\n        super.onRestart()\r\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "        isActivityVisible = true\r\n        loadTheme(PreferenceManager.getDefaultSharedPreferences(this))\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        isActivityVisible = true\r\n        loadTheme(PreferenceManager.getDefaultSharedPreferences(this))\r\n    }",
  "start_lineno" : "118",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/362",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "        isActivityVisible = false\r\n        super.onPause()\r\n    }",
  "context" : "override fun onPause() {\r\n        isActivityVisible = false\r\n        super.onPause()\r\n    }",
  "start_lineno" : "124",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/363",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "129",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/364",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "208",
  "ground_truth" : "        toolbar?.let { ToolbarColorHelper.colorizeToolbar(it, this) }\r\n        return ret\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val ret = super.onCreateOptionsMenu(menu)\r\n        toolbar?.let { ToolbarColorHelper.colorizeToolbar(it, this) }\r\n        return ret\r\n    }",
  "start_lineno" : "204",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/365",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val ret = super.onCreateOptionsMenu(menu)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "        destroyed = true\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        destroyed = true\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "210",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/366",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "            isNightMode = newNightMode\r\n            val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n            loadTheme(sharedPreferences, true)\r\n        }\r\n    }",
  "context" : "override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        val newNightMode = isUsingNightModeResources()\r\n        if (newNightMode != isNightMode) {\r\n            isNightMode = newNightMode\r\n            val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n            loadTheme(sharedPreferences, true)\r\n        }\r\n    }",
  "start_lineno" : "215",
  "methodName" : "onConfigurationChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/367",
  "prompt" : "import com.habitrpg.common.habitica.extensions.isUsingNightModeResources\nimport com.habitrpg.android.habitica.R\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        val newNightMode = isUsingNightModeResources()\r\n        if (newNightMode != isNightMode) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "231",
  "ground_truth" : "        alert.setTitle(title)\r\n        alert.setMessage(message)\r\n        alert.addButton(android.R.string.ok, isPrimary = true, isDestructive = false, function = null)\r\n        alert.enqueue()\r\n    }",
  "context" : "open fun showConnectionProblem(errorCount: Int, title: String?, message: String, isFromUserInput: Boolean) {\r\n        val alert = HabiticaAlertDialog(this)\r\n        alert.setTitle(title)\r\n        alert.setMessage(message)\r\n        alert.addButton(android.R.string.ok, isPrimary = true, isDestructive = false, function = null)\r\n        alert.enqueue()\r\n    }",
  "start_lineno" : "225",
  "methodName" : "showConnectionProblem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/368",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nopen fun showConnectionProblem(errorCount: Int, title: String?, message: String, isFromUserInput: Boolean) {\r\n        val alert = HabiticaAlertDialog(this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var notificationsManager NotificationsManager\nvar userRepository UserRepository\nvar currentTheme String?\nvar isNightMode Boolean\nvar forcedTheme String?\nvar forcedIsNight Boolean?\nvar destroyed Boolean\nvar overrideModernHeader Boolean?\nvar toolbar Toolbar?\nval habiticaApplication HabiticaApplication\nvar isActivityVisible",
  "app_type" : "life",
  "end_lineno" : "282",
  "ground_truth" : "        overridePendingTransition(R.anim.activity_fade_in, R.anim.activity_fade_out)\r\n        startActivity(intent)\r\n    }",
  "context" : "fun reload() {\r\n        finish()\r\n        overridePendingTransition(R.anim.activity_fade_in, R.anim.activity_fade_out)\r\n        startActivity(intent)\r\n    }",
  "start_lineno" : "278",
  "methodName" : "reload",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt",
  "task_id" : "habitica-android/369",
  "prompt" : "fun reload() {\r\n        finish()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar purchaseHandler PurchaseHandler\nvar inventoryRepository InventoryRepository\nvar configManager AppConfigManager\nval scaffoldState ScaffoldState\nval isPurchasing\nval price\nval hasGryphatrice\nval hasEquipped\nvar gryphatriceProductDetails ProductDetails?",
  "app_type" : "life",
  "end_lineno" : "194",
  "ground_truth" : "        userRepository.retrieveUser(false, true)\r\n        isPurchasing.value = false\r\n    }",
  "context" : "private suspend fun purchaseWithGems() {\r\n        inventoryRepository.purchaseItem(\"pets\", \"Gryphatrice-Jubilant\", 1)\r\n        userRepository.retrieveUser(false, true)\r\n        isPurchasing.value = false\r\n    }",
  "start_lineno" : "190",
  "methodName" : "purchaseWithGems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BirthdayActivity.kt",
  "task_id" : "habitica-android/370",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\nprivate suspend fun purchaseWithGems() {\r\n        inventoryRepository.purchaseItem(\"pets\", \"Gryphatrice-Jubilant\", 1)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar purchaseHandler PurchaseHandler\nvar inventoryRepository InventoryRepository\nvar configManager AppConfigManager\nval scaffoldState ScaffoldState\nval isPurchasing\nval price\nval hasGryphatrice\nval hasEquipped\nvar gryphatriceProductDetails ProductDetails?",
  "app_type" : "life",
  "end_lineno" : "625",
  "ground_truth" : "    BirthdayActivityView(scaffoldState, true, false, false, \"\", Date(), Date(), {\r\n    }, {}) {}\r\n}",
  "context" : "\r\n@Preview(device = Devices.PIXEL_4)\r\n@Preview(device = Devices.PIXEL_4, uiMode = UI_MODE_NIGHT_YES)\r\n@Composable\r\nprivate fun Preview() {\r\n    val scaffoldState = rememberScaffoldState()\r\n    BirthdayActivityView(scaffoldState, true, false, false, \"\", Date(), Date(), {\r\n    }, {}) {}\r\n}",
  "start_lineno" : "617",
  "methodName" : "Preview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BirthdayActivity.kt",
  "task_id" : "habitica-android/371",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberScaffoldState\nimport androidx.compose.material.ScaffoldState\nimport androidx.compose.material.Scaffold\nimport android.content.res.Configuration.UI_MODE_NIGHT_YES\n\r\n@Preview(device = Devices.PIXEL_4)\r\n@Preview(device = Devices.PIXEL_4, uiMode = UI_MODE_NIGHT_YES)\r\n@Composable\r\nprivate fun Preview() {\r\n    val scaffoldState = rememberScaffoldState()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "        binding = ActivityCreateChallengeBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityCreateChallengeBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "88",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/372",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        inflater.inflate(R.menu.menu_create_challenge, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater = menuInflater\r\n        inflater.inflate(R.menu.menu_create_challenge, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "start_lineno" : "125",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/373",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater = menuInflater\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "266",
  "ground_truth" : "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "public override fun onDestroy() {\r\n        socialRepository.close()\r\n        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "262",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/374",
  "prompt" : "import com.habitrpg.android.habitica.R\npublic override fun onDestroy() {\r\n        socialRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "279",
  "ground_truth" : "\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }",
  "context" : "private fun onAddGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal++\r\n\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }",
  "start_lineno" : "268",
  "methodName" : "onAddGem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/375",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nprivate fun onAddGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal++\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "292",
  "ground_truth" : "\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }",
  "context" : "private fun onRemoveGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal--\r\n\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }",
  "start_lineno" : "281",
  "methodName" : "onRemoveGem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/376",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.R\nprivate fun onRemoveGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal--\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "490",
  "ground_truth" : "        taskList.remove(addTodo)\r\n        taskList.remove(addReward)\r\n\r\n        return challengeRepository.createChallenge(c, taskList)\r\n    }",
  "context" : "private suspend fun createChallenge(): Challenge? {\r\n        val c = challengeData\r\n\r\n        val taskList = challengeTasks.taskList\r\n        taskList.remove(addHabit)\r\n        taskList.remove(addDaily)\r\n        taskList.remove(addTodo)\r\n        taskList.remove(addReward)\r\n\r\n        return challengeRepository.createChallenge(c, taskList)\r\n    }",
  "start_lineno" : "480",
  "methodName" : "createChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/377",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate suspend fun createChallenge(): Challenge? {\r\n        val c = challengeData\r\n\r\n        val taskList = challengeTasks.taskList\r\n        taskList.remove(addHabit)\r\n        taskList.remove(addDaily)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "508",
  "ground_truth" : "            ArrayList(addedTasks.values),\r\n            ArrayList(updatedTasks.values),\r\n            ArrayList(removedTasks.keys)\r\n        )\r\n    }",
  "context" : "private suspend fun updateChallenge(): Challenge? {\r\n        val c = challengeData\r\n\r\n        val taskList = challengeTasks.taskList\r\n        taskList.remove(addHabit)\r\n        taskList.remove(addDaily)\r\n        taskList.remove(addTodo)\r\n        taskList.remove(addReward)\r\n\r\n        return challengeRepository.updateChallenge(\r\n            c,\r\n            taskList,\r\n            ArrayList(addedTasks.values),\r\n            ArrayList(updatedTasks.values),\r\n            ArrayList(removedTasks.keys)\r\n        )\r\n    }",
  "start_lineno" : "492",
  "methodName" : "updateChallenge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/378",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.R\nprivate suspend fun updateChallenge(): Challenge? {\r\n        val c = challengeData\r\n\r\n        val taskList = challengeTasks.taskList\r\n        taskList.remove(addHabit)\r\n        taskList.remove(addDaily)\r\n        taskList.remove(addTodo)\r\n        taskList.remove(addReward)\r\n\r\n        return challengeRepository.updateChallenge(\r\n            c,\r\n            taskList,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "548",
  "ground_truth" : "            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }",
  "context" : "override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView = super.getView(position, convertView, parent) as? TextView\r\n            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }",
  "start_lineno" : "544",
  "methodName" : "getView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/379",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView = super.getView(position, convertView, parent) as? TextView\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "555",
  "ground_truth" : "            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }",
  "context" : "override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView =\r\n                super.getDropDownView(position, convertView, parent) as? AppCompatCheckedTextView\r\n            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }",
  "start_lineno" : "550",
  "methodName" : "getDropDownView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/380",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport androidx.appcompat.widget.AppCompatCheckedTextView\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView =\r\n                super.getDropDownView(position, convertView, parent) as? AppCompatCheckedTextView\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityCreateChallengeBinding\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar tasksViewModel TasksViewModel\nvar challengeTasks ChallengeTasksRecyclerViewAdapter\nvar locationAdapter GroupArrayAdapter\nvar challengeId String?\nvar groupID String?\nvar editMode Boolean\nval addedTasks\nval updatedTasks\nval removedTasks\nvar overrideModernHeader Boolean?\nvar addHabit Task\nvar addDaily Task\nvar addTodo Task\nvar addReward Task\nvar user User?\nvar savingInProgress\nval challengeData Challenge\nval newTaskResult\nval CHALLENGE_ID_KEY",
  "app_type" : "life",
  "end_lineno" : "568",
  "ground_truth" : "            t.id = \"addtask\"\r\n            t.text = taskName\r\n\r\n            return t\r\n        }",
  "context" : "private fun createTask(taskName: String): Task {\r\n            val t = Task()\r\n\r\n            t.id = \"addtask\"\r\n            t.text = taskName\r\n\r\n            return t\r\n        }",
  "start_lineno" : "561",
  "methodName" : "createTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt",
  "task_id" : "habitica-android/381",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun createTask(taskName: String): Task {\r\n            val t = Task()\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        binding = ActivityClassSelectionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityClassSelectionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "71",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/382",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "        menuInflater.inflate(R.menu.class_selection, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.class_selection, menu)\r\n        return true\r\n    }",
  "start_lineno" : "102",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/383",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.opt_out -> optOutSelected()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "107",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/384",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.opt_out -> optOutSelected()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "162",
  "ground_truth" : "        user.items = Items()\r\n        user.items?.gear = Gear()\r\n        user.items?.gear?.equipped = outfit\r\n        return user\r\n    }",
  "context" : "private fun makeUser(preferences: Preferences, outfit: Outfit): User {\r\n        val user = User()\r\n        user.preferences = preferences\r\n        user.items = Items()\r\n        user.items?.gear = Gear()\r\n        user.items?.gear?.equipped = outfit\r\n        return user\r\n    }",
  "start_lineno" : "155",
  "methodName" : "makeUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/385",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Preferences\nimport com.habitrpg.android.habitica.models.user.Outfit\nprivate fun makeUser(preferences: Preferences, outfit: Outfit): User {\r\n        val user = User()\r\n        user.preferences = preferences\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "268",
  "ground_truth" : "        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.disableClasses()\r\n            dismiss()\r\n        }\r\n    }",
  "context" : "private fun optOutOfClasses() {\r\n        shouldFinish = true\r\n        this.displayProgressDialog(getString(R.string.opting_out_progress))\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.disableClasses()\r\n            dismiss()\r\n        }\r\n    }",
  "start_lineno" : "261",
  "methodName" : "optOutOfClasses",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/386",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun optOutOfClasses() {\r\n        shouldFinish = true\r\n        this.displayProgressDialog(getString(R.string.opting_out_progress))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "302",
  "ground_truth" : "            finish()\r\n        }\r\n    }",
  "context" : "private fun dismiss() {\r\n        if (shouldFinish == true) {\r\n            progressDialog?.dismiss()\r\n            finish()\r\n        }\r\n    }",
  "start_lineno" : "297",
  "methodName" : "dismiss",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/387",
  "prompt" : "private fun dismiss() {\r\n        if (shouldFinish == true) {\r\n            progressDialog?.dismiss()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar binding ActivityClassSelectionBinding\nvar currentClass String?\nvar newClass String\nvar className String?\nvar isClassSelected Boolean\nvar classWasUnset Boolean?\nvar shouldFinish Boolean?\nvar progressDialog HabiticaProgressDialog?",
  "app_type" : "life",
  "end_lineno" : "310",
  "ground_truth" : "            user?.loginIncentives?.let { totalCheckins ->\r\n                reviewManager.requestReview(this, totalCheckins)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun checkForReviewPromptAfterClassSelection() {\r\n        userViewModel.user.observeOnce(this) { user ->\r\n            user?.loginIncentives?.let { totalCheckins ->\r\n                reviewManager.requestReview(this, totalCheckins)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "304",
  "methodName" : "checkForReviewPromptAfterClassSelection",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt",
  "task_id" : "habitica-android/388",
  "prompt" : "import com.habitrpg.common.habitica.extensions.observeOnce\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun checkForReviewPromptAfterClassSelection() {\r\n        userViewModel.user.observeOnce(this) { user ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityDeathBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar sharedPreferences SharedPreferences",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "        binding = ActivityDeathBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityDeathBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "80",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\DeathActivity.kt",
  "task_id" : "habitica-android/389",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityDeathBinding\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar sharedPreferences SharedPreferences",
  "app_type" : "life",
  "end_lineno" : "238",
  "ground_truth" : "        binding.heartView.post {\r\n            makeCoins(305)\r\n            makeCoins(160)\r\n        }\r\n    }",
  "context" : "private fun startAnimating() {\r\n        binding.ghostView.startAnimation(Animations.bobbingAnimation())\r\n        binding.heartView.post {\r\n            makeCoins(305)\r\n            makeCoins(160)\r\n        }\r\n    }",
  "start_lineno" : "232",
  "methodName" : "startAnimating",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\DeathActivity.kt",
  "task_id" : "habitica-android/390",
  "prompt" : "import com.habitrpg.common.habitica.helpers.Animations\nimport android.view.View\nprivate fun startAnimating() {\r\n        binding.ghostView.startAnimation(Animations.bobbingAnimation())\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityFixcharacterBinding\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "        binding = ActivityFixcharacterBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityFixcharacterBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "30",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt",
  "task_id" : "habitica-android/391",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityFixcharacterBinding\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        menuInflater.inflate(R.menu.menu_save, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.menu_save, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "start_lineno" : "71",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt",
  "task_id" : "habitica-android/392",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityFixcharacterBinding\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        backgroundDrawable?.alpha = 50\r\n        view.background = backgroundDrawable\r\n    }",
  "context" : "private fun setIconBackground(view: View, color: Int) {\r\n        val backgroundDrawable = ContextCompat.getDrawable(this, R.drawable.layout_rounded_bg)\r\n        backgroundDrawable?.setTintWith(color, PorterDuff.Mode.MULTIPLY)\r\n        backgroundDrawable?.alpha = 50\r\n        view.background = backgroundDrawable\r\n    }",
  "start_lineno" : "144",
  "methodName" : "setIconBackground",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt",
  "task_id" : "habitica-android/393",
  "prompt" : "import com.habitrpg.common.habitica.extensions.setTintWith\nimport com.habitrpg.android.habitica.R\nimport androidx.core.content.ContextCompat\nimport android.view.View\nimport android.graphics.PorterDuff\nprivate fun setIconBackground(view: View, color: Int) {\r\n        val backgroundDrawable = ContextCompat.getDrawable(this, R.drawable.layout_rounded_bg)\r\n        backgroundDrawable?.setTintWith(color, PorterDuff.Mode.MULTIPLY)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityFixcharacterBinding\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "158",
  "ground_truth" : "            stringValue.toDouble()\r\n        } catch (_: NumberFormatException) {\r\n            0.0\r\n        }\r\n    }",
  "context" : "private fun EditText.getDoubleValue(): Double {\r\n        val stringValue = this.text.toString()\r\n        return try {\r\n            stringValue.toDouble()\r\n        } catch (_: NumberFormatException) {\r\n            0.0\r\n        }\r\n    }",
  "start_lineno" : "151",
  "methodName" : "getDoubleValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt",
  "task_id" : "habitica-android/394",
  "prompt" : "import android.widget.EditText\nprivate fun EditText.getDoubleValue(): Double {\r\n        val stringValue = this.text.toString()\r\n        return try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "166",
  "ground_truth" : "            }\r\n        } else if (member != null) {\r\n            updateAccountStatus(member)\r\n        }\r\n    }",
  "context" : "private suspend fun refresh(fromHall: Boolean) {\r\n        val member = socialRepository.retrieveMember(userID, fromHall)\r\n        if (member != null && !fromHall) {\r\n            updateView(member)\r\n            this.member.value = member\r\n            if (isMyProfile() && member.loginIncentives > 10) {\r\n                reviewManager.requestReview(this@FullProfileActivity, member.loginIncentives)\r\n            }\r\n        } else if (member != null) {\r\n            updateAccountStatus(member)\r\n        }\r\n    }",
  "start_lineno" : "155",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/395",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate suspend fun refresh(fromHall: Boolean) {\r\n        val member = socialRepository.retrieveMember(userID, fromHall)\r\n        if (member != null && !fromHall) {\r\n            updateView(member)\r\n            this.member.value = member\r\n            if (isMyProfile() && member.loginIncentives > 10) {\r\n                reviewManager.requestReview(this@FullProfileActivity, member.loginIncentives)\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "168",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/396",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "391",
  "ground_truth" : "            socialRepository.blockMember(userID)\r\n            userRepository.retrieveUser(false, true)\r\n            invalidateOptionsMenu()\r\n        }\r\n    }",
  "context" : "private fun useBlock() {\r\n        lifecycleScope.launchCatching {\r\n            socialRepository.blockMember(userID)\r\n            userRepository.retrieveUser(false, true)\r\n            invalidateOptionsMenu()\r\n        }\r\n    }",
  "start_lineno" : "385",
  "methodName" : "useBlock",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/397",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.lifecycleScope\nprivate fun useBlock() {\r\n        lifecycleScope.launchCatching {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "402",
  "ground_truth" : "            useBlock()\r\n        }\r\n        dialog.addCancelButton()\r\n        dialog.show()\r\n    }",
  "context" : "private fun showBlockDialog() {\r\n        val dialog = HabiticaAlertDialog(this)\r\n        dialog.setTitle(getString(R.string.block_user_title, userDisplayName))\r\n        dialog.setMessage(R.string.block_user_description)\r\n        dialog.addButton(R.string.block, isPrimary = true, isDestructive = true) { _, _ ->\r\n            useBlock()\r\n        }\r\n        dialog.addCancelButton()\r\n        dialog.show()\r\n    }",
  "start_lineno" : "393",
  "methodName" : "showBlockDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/398",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showBlockDialog() {\r\n        val dialog = HabiticaAlertDialog(this)\r\n        dialog.setTitle(getString(R.string.block_user_title, userDisplayName))\r\n        dialog.setMessage(R.string.block_user_description)\r\n        dialog.addButton(R.string.block, isPrimary = true, isDestructive = true) { _, _ ->\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "413",
  "ground_truth" : "                R.id.inboxMessageListFragment,\r\n                bundleOf(Pair(\"username\", username), Pair(\"userID\", userID))\r\n            )\r\n        }\r\n    }",
  "context" : "private fun showSendMessageToUserDialog() {\r\n        finish()\r\n        MainScope().launch(context = Dispatchers.Main) {\r\n            delay(500L)\r\n            MainNavigationController.navigate(\r\n                R.id.inboxMessageListFragment,\r\n                bundleOf(Pair(\"username\", username), Pair(\"userID\", userID))\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "404",
  "methodName" : "showSendMessageToUserDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/399",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.Dispatchers\nimport com.habitrpg.common.habitica.helpers.MainNavigationController\nprivate fun showSendMessageToUserDialog() {\r\n        finish()\r\n        MainScope().launch(context = Dispatchers.Main) {\r\n            delay(500L)\r\n            MainNavigationController.navigate(\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "469",
  "ground_truth" : "        binding.mountsTamedCount.text = user.mountsTamedCount.toString()\r\n\r\n        if (user.currentPet?.isNotBlank() == true) binding.currentPetDrawee.loadImage(\"Pet-\" + user.currentPet)\r\n        if (user.currentMount?.isNotBlank() == true) binding.currentMountDrawee.loadImage(\"Mount_Icon_\" + user.currentMount)\r\n    }",
  "context" : "private fun updatePetsMountsView(user: Member) {\r\n        binding.petsFoundCount.text = user.petsFoundCount.toString()\r\n        binding.mountsTamedCount.text = user.mountsTamedCount.toString()\r\n\r\n        if (user.currentPet?.isNotBlank() == true) binding.currentPetDrawee.loadImage(\"Pet-\" + user.currentPet)\r\n        if (user.currentMount?.isNotBlank() == true) binding.currentMountDrawee.loadImage(\"Mount_Icon_\" + user.currentMount)\r\n    }",
  "start_lineno" : "463",
  "methodName" : "updatePetsMountsView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/400",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport android.view.View\nprivate fun updatePetsMountsView(user: Member) {\r\n        binding.petsFoundCount.text = user.petsFoundCount.toString()\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "544",
  "ground_truth" : "        }\r\n\r\n        targetList.add(getString(labelID))\r\n        targetList.addAll(achievementList)\r\n    }",
  "context" : "private fun fillAchievements(\r\n        labelID: Int,\r\n        achievements: List<Achievement>,\r\n        targetList: MutableList<Any>\r\n    ) {\r\n        // Order by ID first\r\n        val achievementList = ArrayList(achievements)\r\n        achievementList.sortWith { achievement, t1 ->\r\n            achievement.index.toDouble().compareTo(t1.index.toDouble())\r\n        }\r\n\r\n        targetList.add(getString(labelID))\r\n        targetList.addAll(achievementList)\r\n    }",
  "start_lineno" : "531",
  "methodName" : "fillAchievements",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/401",
  "prompt" : "import com.habitrpg.android.habitica.models.Achievement\nprivate fun fillAchievements(\r\n        labelID: Int,\r\n        achievements: List<Achievement>,\r\n        targetList: MutableList<Any>\r\n    ) {\r\n        // Order by ID first\r\n        val achievementList = ArrayList(achievements)\r\n        achievementList.sortWith { achievement, t1 ->\r\n            achievement.index.toDouble().compareTo(t1.index.toDouble())\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "556",
  "ground_truth" : "            } else {\r\n                `val`.toString()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun getFloorValueString(`val`: Float, roundDown: Boolean): String {\r\n        return if (roundDown) {\r\n            floor(`val`.toDouble()).toString()\r\n        } else {\r\n            if (`val`.toDouble() == 0.0) {\r\n                \"0\"\r\n            } else {\r\n                `val`.toString()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "546",
  "methodName" : "getFloorValueString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/402",
  "prompt" : "import kotlin.math.floor\nprivate fun getFloorValueString(`val`: Float, roundDown: Boolean): String {\r\n        return if (roundDown) {\r\n            floor(`val`.toDouble()).toString()\r\n        } else {\r\n            if (`val`.toDouble() == 0.0) {\r\n                \"0\"\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "564",
  "ground_truth" : "            floor(value.toDouble()).toFloat()\r\n        } else {\r\n            value\r\n        }\r\n    }",
  "context" : "private fun getFloorValue(value: Float, roundDown: Boolean): Float {\r\n        return if (roundDown) {\r\n            floor(value.toDouble()).toFloat()\r\n        } else {\r\n            value\r\n        }\r\n    }",
  "start_lineno" : "558",
  "methodName" : "getFloorValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/403",
  "prompt" : "private fun getFloorValue(value: Float, roundDown: Boolean): Float {\r\n        return if (roundDown) {\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "604",
  "ground_truth" : "            byLevelStat,\r\n            roundDown = true,\r\n            isSummary = false\r\n        )\r\n    }",
  "context" : "private fun addLevelAttributes(user: Member) {\r\n        val byLevelStat = min((user.stats?.lvl ?: 0) / 2.0f, 50f)\r\n        addAttributeRow(\r\n            getString(R.string.profile_level),\r\n            byLevelStat,\r\n            byLevelStat,\r\n            byLevelStat,\r\n            byLevelStat,\r\n            roundDown = true,\r\n            isSummary = false\r\n        )\r\n    }",
  "start_lineno" : "593",
  "methodName" : "addLevelAttributes",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/404",
  "prompt" : "import kotlin.math.min\nimport com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nprivate fun addLevelAttributes(user: Member) {\r\n        val byLevelStat = min((user.stats?.lvl ?: 0) / 2.0f, 50f)\r\n        addAttributeRow(\r\n            getString(R.string.profile_level),\r\n            byLevelStat,\r\n            byLevelStat,\r\n            byLevelStat,\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "619",
  "ground_truth" : "            outfitList.add(outfit.shield)\r\n            outfitList.add(outfit.weapon)\r\n        }\r\n        return inventoryRepository.getEquipment(outfitList)\r\n    }",
  "context" : "private fun loadItemDataByOutfit(outfit: Outfit?): Flow<List<Equipment>> {\r\n        val outfitList = ArrayList<String>()\r\n        if (outfit != null) {\r\n            outfitList.add(outfit.armor)\r\n            outfitList.add(outfit.back)\r\n            outfitList.add(outfit.body)\r\n            outfitList.add(outfit.eyeWear)\r\n            outfitList.add(outfit.head)\r\n            outfitList.add(outfit.headAccessory)\r\n            outfitList.add(outfit.shield)\r\n            outfitList.add(outfit.weapon)\r\n        }\r\n        return inventoryRepository.getEquipment(outfitList)\r\n    }",
  "start_lineno" : "606",
  "methodName" : "loadItemDataByOutfit",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/405",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.Outfit\nimport com.habitrpg.android.habitica.models.inventory.Equipment\nprivate fun loadItemDataByOutfit(outfit: Outfit?): Flow<List<Equipment>> {\r\n        val outfitList = ArrayList<String>()\r\n        if (outfit != null) {\r\n            outfitList.add(outfit.armor)\r\n            outfitList.add(outfit.back)\r\n            outfitList.add(outfit.body)\r\n            outfitList.add(outfit.eyeWear)\r\n            outfitList.add(outfit.head)\r\n            outfitList.add(outfit.headAccessory)\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "660",
  "ground_truth" : "        binding.costumeTableLayout.removeAllViews()\r\n        for (i in obj) {\r\n            addEquipmentRow(binding.costumeTableLayout, i.key, i.text, \"\")\r\n        }\r\n    }",
  "context" : "private fun gotCostume(obj: List<Equipment>) {\r\n        // fill costume table\r\n        binding.costumeTableLayout.removeAllViews()\r\n        for (i in obj) {\r\n            addEquipmentRow(binding.costumeTableLayout, i.key, i.text, \"\")\r\n        }\r\n    }",
  "start_lineno" : "654",
  "methodName" : "gotCostume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/406",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Equipment\nprivate fun gotCostume(obj: List<Equipment>) {\r\n        // fill costume table\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "769",
  "ground_truth" : "        finish()\r\n        return true\r\n    }",
  "context" : "override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r\n        return true\r\n    }",
  "start_lineno" : "766",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/407",
  "prompt" : "override fun onSupportNavigateUp(): Boolean {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "787",
  "ground_truth" : "        binding = ActivityFullProfileBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityFullProfileBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "784",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/408",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var blocks List<String>\nvar isModerator\nvar isUserSupport\nvar member MutableState<Member?>\nvar inventoryRepository InventoryRepository\nvar apiClient ApiClient\nvar socialRepository SocialRepository\nvar sharedPrefs SharedPreferences\nvar reviewManager ReviewManager\nvar userID\nvar username String?\nvar userDisplayName String?\nvar attributeStrSum\nvar attributeIntSum\nvar attributeConSum\nvar attributePerSum\nvar attributeDetailsHidden\nval attributeRows\nval dateFormatter\nvar binding ActivityFullProfileBinding",
  "app_type" : "life",
  "end_lineno" : "798",
  "ground_truth" : "            }\r\n            val bundle = Bundle()\r\n            bundle.putString(\"userID\", userId)\r\n            MainNavigationController.navigate(R.id.fullProfileActivity, bundle)\r\n        }",
  "context" : "fun open(userId: String) {\r\n            if (userId == \"system\") {\r\n                return\r\n            }\r\n            val bundle = Bundle()\r\n            bundle.putString(\"userID\", userId)\r\n            MainNavigationController.navigate(R.id.fullProfileActivity, bundle)\r\n        }",
  "start_lineno" : "791",
  "methodName" : "open",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt",
  "task_id" : "habitica-android/409",
  "prompt" : "fun open(userId: String) {\r\n            if (userId == \"system\") {\r\n                return\r",
  "type" : "java",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "        supportFragmentManager\r\n            .beginTransaction()\r\n            .replace(R.id.fragment_container, fragment as Fragment)\r\n            .commit()\r\n    }",
  "context" : "private fun createFragment(showSubscription: Boolean) {\r\n        val fragment = if (showSubscription) {\r\n            SubscriptionFragment()\r\n        } else {\r\n            GemsPurchaseFragment()\r\n        }\r\n        supportFragmentManager\r\n            .beginTransaction()\r\n            .replace(R.id.fragment_container, fragment as Fragment)\r\n            .commit()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "createFragment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GemPurchaseActivity.kt",
  "task_id" : "habitica-android/410",
  "prompt" : "import com.habitrpg.android.habitica.ui.fragments.purchases.SubscriptionFragment\nimport com.habitrpg.android.habitica.ui.fragments.purchases.GemsPurchaseFragment\nimport androidx.fragment.app.Fragment\nprivate fun createFragment(showSubscription: Boolean) {\r\n        val fragment = if (showSubscription) {\r\n            SubscriptionFragment()\r\n        } else {\r\n            GemsPurchaseFragment()\r\n        }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftGemsBinding\nval currencyView CurrencyView\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar giftedMember Member?\nvar purchaseFragment GiftPurchaseGemsFragment?\nvar balanceFragment GiftBalanceGemsFragment?",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "        binding = ActivityGiftGemsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityGiftGemsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "58",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftGemsActivity.kt",
  "task_id" : "habitica-android/411",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftGemsBinding\nval currencyView CurrencyView\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar giftedMember Member?\nvar purchaseFragment GiftPurchaseGemsFragment?\nvar balanceFragment GiftBalanceGemsFragment?",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "        dialog.setTitle(R.string.error_loading_member)\r\n        dialog.setMessage(R.string.error_loading_member_body)\r\n        dialog.addCloseButton(isPrimary = true) { _, _ -> finish() }\r\n        dialog.show()\r\n    }",
  "context" : "private fun showMemberLoadingErrorDialog() {\r\n        val dialog = HabiticaAlertDialog(this)\r\n        dialog.setTitle(R.string.error_loading_member)\r\n        dialog.setMessage(R.string.error_loading_member_body)\r\n        dialog.addCloseButton(isPrimary = true) { _, _ -> finish() }\r\n        dialog.show()\r\n    }",
  "start_lineno" : "115",
  "methodName" : "showMemberLoadingErrorDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftGemsActivity.kt",
  "task_id" : "habitica-android/412",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.models.members.Member\nprivate fun showMemberLoadingErrorDialog() {\r\n        val dialog = HabiticaAlertDialog(this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        binding = ActivityGiftSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityGiftSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "51",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/413",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "        dialog.setTitle(R.string.error_loading_member)\r\n        dialog.setMessage(R.string.error_loading_member_body)\r\n        dialog.addCloseButton(isPrimary = true) { _, _ -> finish() }\r\n        dialog.show()\r\n    }",
  "context" : "private fun showMemberLoadingErrorDialog() {\r\n        val dialog = HabiticaAlertDialog(this@GiftSubscriptionActivity)\r\n        dialog.setTitle(R.string.error_loading_member)\r\n        dialog.setMessage(R.string.error_loading_member_body)\r\n        dialog.addCloseButton(isPrimary = true) { _, _ -> finish() }\r\n        dialog.show()\r\n    }",
  "start_lineno" : "117",
  "methodName" : "showMemberLoadingErrorDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/414",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nprivate fun showMemberLoadingErrorDialog() {\r\n        val dialog = HabiticaAlertDialog(this@GiftSubscriptionActivity)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "145",
  "ground_truth" : "            matchingView.setPriceText(sku.oneTimePurchaseOfferDetails?.formattedPrice ?: \"\")\r\n            matchingView.sku = sku.productId\r\n            matchingView.setOnPurchaseClickListener { selectSubscription(sku) }\r\n        }\r\n    }",
  "context" : "private fun updateButtonLabel(sku: ProductDetails) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(sku.oneTimePurchaseOfferDetails?.formattedPrice ?: \"\")\r\n            matchingView.sku = sku.productId\r\n            matchingView.setOnPurchaseClickListener { selectSubscription(sku) }\r\n        }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "updateButtonLabel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/415",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r\n        subscriptionOptionButton?.setIsSelected(true)\r\n        binding.subscriptionButton.isEnabled = true\r\n    }",
  "context" : "private fun selectSubscription(sku: ProductDetails) {\r\n        for (thisSku in skus) {\r\n            buttonForSku(thisSku)?.setIsSelected(false)\r\n        }\r\n        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r\n        subscriptionOptionButton?.setIsSelected(true)\r\n        binding.subscriptionButton.isEnabled = true\r\n    }",
  "start_lineno" : "147",
  "methodName" : "selectSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/416",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nprivate fun selectSubscription(sku: ProductDetails) {\r\n        for (thisSku in skus) {\r\n            buttonForSku(thisSku)?.setIsSelected(false)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "169",
  "ground_truth" : "            PurchaseTypes.Subscription6MonthNoRenew -> binding.subscription6MonthView\r\n            PurchaseTypes.Subscription12MonthNoRenew -> binding.subscription12MonthView\r\n            else -> null\r\n        }\r\n    }",
  "context" : "private fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1MonthNoRenew -> binding.subscription1MonthView\r\n            PurchaseTypes.Subscription3MonthNoRenew -> binding.subscription3MonthView\r\n            PurchaseTypes.Subscription6MonthNoRenew -> binding.subscription6MonthView\r\n            PurchaseTypes.Subscription12MonthNoRenew -> binding.subscription12MonthView\r\n            else -> null\r\n        }\r\n    }",
  "start_lineno" : "161",
  "methodName" : "buttonForSku",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/417",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.subscriptions.SubscriptionOptionView\nimport com.habitrpg.android.habitica.helpers.PurchaseTypes\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1MonthNoRenew -> binding.subscription1MonthView\r\n            PurchaseTypes.Subscription3MonthNoRenew -> binding.subscription3MonthView\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGiftSubscriptionBinding\nvar socialRepository SocialRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar giftedUsername String?\nvar giftedUserID String?\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>",
  "app_type" : "life",
  "end_lineno" : "179",
  "ground_truth" : "            }\r\n            PurchaseHandler.addGift(sku.productId, id, giftedUsername ?: id)\r\n            purchaseHandler.purchase(this, sku)\r\n        }\r\n    }",
  "context" : "private fun purchaseSubscription(sku: ProductDetails) {\r\n        giftedUserID?.let { id ->\r\n            if (id.isEmpty()) {\r\n                return\r\n            }\r\n            PurchaseHandler.addGift(sku.productId, id, giftedUsername ?: id)\r\n            purchaseHandler.purchase(this, sku)\r\n        }\r\n    }",
  "start_lineno" : "171",
  "methodName" : "purchaseSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt",
  "task_id" : "habitica-android/418",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nprivate fun purchaseSubscription(sku: ProductDetails) {\r\n        giftedUserID?.let { id ->\r\n            if (id.isEmpty()) {\r\n                return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGroupFormBinding\nvar groupID String?\nvar groupType String?\nvar groupName String?\nvar groupDescription String?\nvar groupPrivacy String?\nvar groupLeader String?\nvar leaderCreateChallenge\nvar autocompleteAdapter AutocompleteAdapter?\nval GROUP_FORM_ACTIVITY",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        binding = ActivityGroupFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityGroupFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "33",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt",
  "task_id" : "habitica-android/419",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGroupFormBinding\nvar groupID String?\nvar groupType String?\nvar groupName String?\nvar groupDescription String?\nvar groupPrivacy String?\nvar groupLeader String?\nvar leaderCreateChallenge\nvar autocompleteAdapter AutocompleteAdapter?\nval GROUP_FORM_ACTIVITY",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "        binding.groupDescriptionEditText.setText(groupDescription)\r\n        binding.leaderCreateChallengeSwitch.isChecked = leaderCreateChallenge\r\n        binding.privacyWrapper.visibility = View.GONE\r\n        binding.saveButton.text = getString(R.string.save)\r\n    }",
  "context" : "private fun fillForm() {\r\n        binding.groupNameEditText.setText(groupName)\r\n        binding.groupDescriptionEditText.setText(groupDescription)\r\n        binding.leaderCreateChallengeSwitch.isChecked = leaderCreateChallenge\r\n        binding.privacyWrapper.visibility = View.GONE\r\n        binding.saveButton.text = getString(R.string.save)\r\n    }",
  "start_lineno" : "70",
  "methodName" : "fillForm",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt",
  "task_id" : "habitica-android/420",
  "prompt" : "private fun fillForm() {\r\n        binding.groupNameEditText.setText(groupName)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGroupFormBinding\nvar groupID String?\nvar groupType String?\nvar groupName String?\nvar groupDescription String?\nvar groupPrivacy String?\nvar groupLeader String?\nvar leaderCreateChallenge\nvar autocompleteAdapter AutocompleteAdapter?\nval GROUP_FORM_ACTIVITY",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "        dismissKeyboard()\r\n        return true\r\n    }",
  "context" : "override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r\n        dismissKeyboard()\r\n        return true\r\n    }",
  "start_lineno" : "78",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt",
  "task_id" : "habitica-android/421",
  "prompt" : "override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityGroupFormBinding\nvar groupID String?\nvar groupType String?\nvar groupName String?\nvar groupDescription String?\nvar groupPrivacy String?\nvar groupLeader String?\nvar leaderCreateChallenge\nvar autocompleteAdapter AutocompleteAdapter?\nval GROUP_FORM_ACTIVITY",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        finish()\r\n        dismissKeyboard()\r\n    }",
  "context" : " @SuppressLint(\"MissingSuperCall\")\r\n    override fun onBackPressed() {\r\n        finish()\r\n        dismissKeyboard()\r\n    }",
  "start_lineno" : "84",
  "methodName" : "onBackPressed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt",
  "task_id" : "habitica-android/422",
  "prompt" : "import android.annotation.SuppressLint\n @SuppressLint(\"MissingSuperCall\")\r\n    override fun onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityPartyInviteBinding\nvar socialRepository SocialRepository\nvar fragments MutableList<PartyInviteFragment>\nval RESULT_SEND_INVITES\nval USER_IDS_KEY\nval IS_EMAIL_KEY\nval EMAILS_KEY",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        binding = ActivityPartyInviteBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityPartyInviteBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "34",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt",
  "task_id" : "habitica-android/423",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityPartyInviteBinding\nvar socialRepository SocialRepository\nvar fragments MutableList<PartyInviteFragment>\nval RESULT_SEND_INVITES\nval USER_IDS_KEY\nval IS_EMAIL_KEY\nval EMAILS_KEY",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "\r\n        supportActionBar?.title = null\r\n\r\n        setViewPagerAdapter()\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n        binding.viewPager.currentItem = 0\r\n\r\n        supportActionBar?.title = null\r\n\r\n        setViewPagerAdapter()\r\n    }",
  "start_lineno" : "39",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt",
  "task_id" : "habitica-android/424",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n        binding.viewPager.currentItem = 0\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityPartyInviteBinding\nvar socialRepository SocialRepository\nvar fragments MutableList<PartyInviteFragment>\nval RESULT_SEND_INVITES\nval USER_IDS_KEY\nval IS_EMAIL_KEY\nval EMAILS_KEY",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "        menuInflater.inflate(R.menu.menu_party_invite, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.menu_party_invite, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }",
  "start_lineno" : "49",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt",
  "task_id" : "habitica-android/425",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityPartyInviteBinding\nvar socialRepository SocialRepository\nvar fragments MutableList<PartyInviteFragment>\nval RESULT_SEND_INVITES\nval USER_IDS_KEY\nval IS_EMAIL_KEY\nval EMAILS_KEY",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_send_invites -> {\r\n                setResult(Activity.RESULT_OK, createResultIntent())\r\n                dismissKeyboard()\r\n                true\r\n            }\r\n            android.R.id.home -> {\r\n                onBackPressed()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "54",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt",
  "task_id" : "habitica-android/426",
  "prompt" : "import com.habitrpg.android.habitica.ui.helpers.dismissKeyboard\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\nimport android.app.Activity\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_send_invites -> {\r\n                setResult(Activity.RESULT_OK, createResultIntent())\r\n                dismissKeyboard()\r\n                true\r\n            }\r\n            android.R.id.home -> {\r\n                onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityPartyInviteBinding\nvar socialRepository SocialRepository\nvar fragments MutableList<PartyInviteFragment>\nval RESULT_SEND_INVITES\nval USER_IDS_KEY\nval IS_EMAIL_KEY\nval EMAILS_KEY",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        if (fragments.size == 0) return intent\r\n        return intent\r\n    }",
  "context" : "private fun createResultIntent(): Intent {\r\n        val intent = Intent()\r\n        if (fragments.size == 0) return intent\r\n        return intent\r\n    }",
  "start_lineno" : "69",
  "methodName" : "createResultIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt",
  "task_id" : "habitica-android/427",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun createResultIntent(): Intent {\r\n        val intent = Intent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r\n            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "48",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GuidelinesActivity.kt",
  "task_id" : "habitica-android/428",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val job\nvar binding WidgetConfigureHabitButtonBinding\nvar taskRepository TaskRepository\nvar widgetId Int\nvar adapter SkillTasksRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        binding = WidgetConfigureHabitButtonBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = WidgetConfigureHabitButtonBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "42",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\HabitButtonWidgetActivity.kt",
  "task_id" : "habitica-android/429",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "val job\nvar binding WidgetConfigureHabitButtonBinding\nvar taskRepository TaskRepository\nvar widgetId Int\nvar adapter SkillTasksRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "\r\n        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, this, HabitButtonWidgetProvider::class.java)\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, intArrayOf(widgetId))\r\n        sendBroadcast(intent)\r\n    }",
  "context" : "private fun finishWithSelection(selectedTaskId: String?) {\r\n        storeSelectedTaskId(selectedTaskId)\r\n\r\n        val resultValue = Intent()\r\n        resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)\r\n        setResult(Activity.RESULT_OK, resultValue)\r\n        finish()\r\n\r\n        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, this, HabitButtonWidgetProvider::class.java)\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, intArrayOf(widgetId))\r\n        sendBroadcast(intent)\r\n    }",
  "start_lineno" : "85",
  "methodName" : "finishWithSelection",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\HabitButtonWidgetActivity.kt",
  "task_id" : "habitica-android/430",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.appwidget.AppWidgetManager\nimport android.app.Activity\nprivate fun finishWithSelection(selectedTaskId: String?) {\r\n        storeSelectedTaskId(selectedTaskId)\r\n\r\n        val resultValue = Intent()\r\n        resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)\r\n        setResult(Activity.RESULT_OK, resultValue)\r\n        finish()\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "val job\nvar binding WidgetConfigureHabitButtonBinding\nvar taskRepository TaskRepository\nvar widgetId Int\nvar adapter SkillTasksRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "            putString(\"habit_button_widget_$widgetId\", selectedTaskId)\r\n        }\r\n    }",
  "context" : "private fun storeSelectedTaskId(selectedTaskId: String?) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r\n            putString(\"habit_button_widget_$widgetId\", selectedTaskId)\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "storeSelectedTaskId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\HabitButtonWidgetActivity.kt",
  "task_id" : "habitica-android/431",
  "prompt" : "import androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nprivate fun storeSelectedTaskId(selectedTaskId: String?) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        binding = ActivityIntroBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityIntroBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "37",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/432",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "\r\n        binding.viewPager.addOnPageChangeListener(this)\r\n    }",
  "context" : "private fun setupIntro() {\r\n        binding.viewPager.adapter = PagerAdapter(supportFragmentManager)\r\n\r\n        binding.viewPager.addOnPageChangeListener(this)\r\n    }",
  "start_lineno" : "59",
  "methodName" : "setupIntro",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/433",
  "prompt" : "import androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nprivate fun setupIntro() {\r\n        binding.viewPager.adapter = PagerAdapter(supportFragmentManager)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "\r\n        this.startActivity(intent)\r\n        overridePendingTransition(0, R.anim.activity_fade_out)\r\n        finish()\r\n    }",
  "context" : "private fun finishIntro() {\r\n        val intent = Intent(this, LoginActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n\r\n        this.startActivity(intent)\r\n        overridePendingTransition(0, R.anim.activity_fade_out)\r\n        finish()\r\n    }",
  "start_lineno" : "69",
  "methodName" : "finishIntro",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/434",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun finishIntro() {\r\n        val intent = Intent(this, LoginActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            binding.finishButton.visibility = View.VISIBLE\r\n        } else {\r\n            binding.finishButton.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "override fun onPageSelected(position: Int) {\r\n        if (position == 2) {\r\n            binding.finishButton.visibility = View.VISIBLE\r\n        } else {\r\n            binding.finishButton.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "80",
  "methodName" : "onPageSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/435",
  "prompt" : "override fun onPageSelected(position: Int) {\r\n        if (position == 2) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "            configureFragment(fragment, position)\r\n            return fragment\r\n        }",
  "context" : "override fun getItem(position: Int): Fragment {\r\n            val fragment = IntroFragment()\r\n            configureFragment(fragment, position)\r\n            return fragment\r\n        }",
  "start_lineno" : "92",
  "methodName" : "getItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/436",
  "prompt" : "import com.habitrpg.android.habitica.ui.fragments.setup.IntroFragment\nimport androidx.fragment.app.Fragment\noverride fun getItem(position: Int): Fragment {\r\n            val fragment = IntroFragment()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityIntroBinding\nvar contentRepository ContentRepository",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            if (item is IntroFragment) {\r\n                configureFragment(item, position)\r\n            }\r\n            return item\r\n        }",
  "context" : "override fun instantiateItem(container: ViewGroup, position: Int): Any {\r\n            val item = super.instantiateItem(container, position)\r\n            if (item is IntroFragment) {\r\n                configureFragment(item, position)\r\n            }\r\n            return item\r\n        }",
  "start_lineno" : "106",
  "methodName" : "instantiateItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt",
  "task_id" : "habitica-android/437",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\noverride fun instantiateItem(container: ViewGroup, position: Int): Any {\r\n            val item = super.instantiateItem(container, position)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "143",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/438",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "186",
  "ground_truth" : "        super.loadTheme(sharedPreferences, forced)\r\n        window.updateStatusBarColor(R.color.black_20_alpha, false)\r\n    }",
  "context" : "override fun loadTheme(sharedPreferences: SharedPreferences, forced: Boolean) {\r\n        super.loadTheme(sharedPreferences, forced)\r\n        window.updateStatusBarColor(R.color.black_20_alpha, false)\r\n    }",
  "start_lineno" : "183",
  "methodName" : "loadTheme",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/439",
  "prompt" : "import android.content.SharedPreferences\noverride fun loadTheme(sharedPreferences: SharedPreferences, forced: Boolean) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "194",
  "ground_truth" : "            hideForm()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        if (isShowingForm) {\r\n            hideForm()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }",
  "start_lineno" : "188",
  "methodName" : "onBackPressed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/440",
  "prompt" : "override fun onBackPressed() {\r\n        if (isShowingForm) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "219",
  "ground_truth" : "        startActivity(intent)\r\n        finish()\r\n    }",
  "context" : "private fun startMainActivity() {\r\n        val intent = Intent(this@LoginActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(intent)\r\n        finish()\r\n    }",
  "start_lineno" : "214",
  "methodName" : "startMainActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/441",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startMainActivity() {\r\n        val intent = Intent(this@LoginActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "226",
  "ground_truth" : "        startActivity(intent)\r\n        finish()\r\n    }",
  "context" : "private fun startSetupActivity() {\r\n        val intent = Intent(this@LoginActivity, SetupActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(intent)\r\n        finish()\r\n    }",
  "start_lineno" : "221",
  "methodName" : "startSetupActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/442",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startSetupActivity() {\r\n        val intent = Intent(this@LoginActivity, SetupActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "231",
  "ground_truth" : "        this.isRegistering = (!this.isRegistering)\r\n        this.setRegistering()\r\n    }",
  "context" : "private fun toggleRegistering() {\r\n        this.isRegistering = (!this.isRegistering)\r\n        this.setRegistering()\r\n    }",
  "start_lineno" : "228",
  "methodName" : "toggleRegistering",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/443",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun toggleRegistering() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "311",
  "ground_truth" : "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_toggleRegistering -> toggleRegistering()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "306",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/444",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_toggleRegistering -> toggleRegistering()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "318",
  "ground_truth" : "            binding.PBAsyncTask.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun hideProgress() {\r\n        runOnUiThread {\r\n            binding.googleLoginProgress.visibility = View.GONE\r\n            binding.PBAsyncTask.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "313",
  "methodName" : "hideProgress",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/445",
  "prompt" : "import android.view.View\nprivate fun hideProgress() {\r\n        runOnUiThread {\r\n            binding.googleLoginProgress.visibility = View.GONE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "331",
  "ground_truth" : "        alert.setTitle(R.string.login_validation_error_title)\r\n        alert.setMessage(message)\r\n        alert.addOkButton()\r\n        alert.show()\r\n    }",
  "context" : "private fun showValidationError(message: String) {\r\n        binding.PBAsyncTask.visibility = View.GONE\r\n        val alert = HabiticaAlertDialog(this)\r\n        alert.setTitle(R.string.login_validation_error_title)\r\n        alert.setMessage(message)\r\n        alert.addOkButton()\r\n        alert.show()\r\n    }",
  "start_lineno" : "324",
  "methodName" : "showValidationError",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/446",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport android.view.View\nprivate fun showValidationError(message: String) {\r\n        binding.PBAsyncTask.visibility = View.GONE\r\n        val alert = HabiticaAlertDialog(this)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "358",
  "ground_truth" : "        showForm()\r\n        setRegistering()\r\n    }",
  "context" : "private fun newGameButtonClicked() {\r\n        isRegistering = true\r\n        showForm()\r\n        setRegistering()\r\n    }",
  "start_lineno" : "354",
  "methodName" : "newGameButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/447",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "364",
  "ground_truth" : "        showForm()\r\n        setRegistering()\r\n    }",
  "context" : "private fun showLoginButtonClicked() {\r\n        isRegistering = false\r\n        showForm()\r\n        setRegistering()\r\n    }",
  "start_lineno" : "360",
  "methodName" : "showLoginButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/448",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun showLoginButtonClicked() {\r\n        isRegistering = false\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "370",
  "ground_truth" : "            hideForm()\r\n        }\r\n    }",
  "context" : "private fun backButtonClicked() {\r\n        if (isShowingForm) {\r\n            hideForm()\r\n        }\r\n    }",
  "start_lineno" : "366",
  "methodName" : "backButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/449",
  "prompt" : "private fun backButtonClicked() {\r\n        if (isShowingForm) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "486",
  "ground_truth" : "        alert.addOkButton()\r\n        alert.show()\r\n    }",
  "context" : "private fun showPasswordEmailConfirmation() {\r\n        val alert = HabiticaAlertDialog(this)\r\n        alert.setMessage(R.string.forgot_password_confirmation)\r\n        alert.addOkButton()\r\n        alert.show()\r\n    }",
  "start_lineno" : "481",
  "methodName" : "showPasswordEmailConfirmation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/450",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showPasswordEmailConfirmation() {\r\n        val alert = HabiticaAlertDialog(this)\r\n        alert.setMessage(R.string.forgot_password_confirmation)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityLoginBinding\nvar apiClient ApiClient\nvar sharedPrefs SharedPreferences\nvar configManager AppConfigManager\nvar viewModel AuthenticationViewModel\nvar isRegistering Boolean\nvar isShowingForm Boolean\nval loginClick\nval pickAccountResult\nval recoverFromPlayServicesErrorResult",
  "app_type" : "life",
  "end_lineno" : "491",
  "ground_truth" : "        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "context" : "override fun finish() {\r\n        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "start_lineno" : "488",
  "methodName" : "finish",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt",
  "task_id" : "habitica-android/451",
  "prompt" : "override fun finish() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "199",
  "ground_truth" : "        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "196",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/452",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "407",
  "ground_truth" : "        }\r\n        drawerFragment?.setSelection(destination.id, null, false)\r\n    }",
  "context" : "private fun updateToolbarTitle(destination: NavDestination, arguments: Bundle?) {\r\n        viewModel.getToolbarTitle(destination.id, destination.label, arguments?.getString(\"type\")) {\r\n            title = it\r\n        }\r\n        drawerFragment?.setSelection(destination.id, null, false)\r\n    }",
  "start_lineno" : "402",
  "methodName" : "updateToolbarTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/453",
  "prompt" : "import androidx.navigation.NavDestination\nimport android.os.Bundle\nprivate fun updateToolbarTitle(destination: NavDestination, arguments: Bundle?) {\r\n        viewModel.getToolbarTitle(destination.id, destination.label, arguments?.getString(\"type\")) {\r\n            title = it\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "413",
  "ground_truth" : "        onBackPressed()\r\n        return true\r\n    }",
  "context" : "override fun onSupportNavigateUp(): Boolean {\r\n        hideKeyboard()\r\n        onBackPressed()\r\n        return true\r\n    }",
  "start_lineno" : "409",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/454",
  "prompt" : "import com.habitrpg.android.habitica.extensions.hideKeyboard\noverride fun onSupportNavigateUp(): Boolean {\r\n        hideKeyboard()\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "426",
  "ground_truth" : "            )\r\n            val manager = getSystemService(NotificationManager::class.java)\r\n            manager?.createNotificationChannel(channel)\r\n        }\r\n    }",
  "context" : "private fun setupNotifications() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channelId = \"default\"\r\n            val channel = NotificationChannel(\r\n                channelId,\r\n                \"Habitica Notifications\",\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            val manager = getSystemService(NotificationManager::class.java)\r\n            manager?.createNotificationChannel(channel)\r\n        }\r\n    }",
  "start_lineno" : "415",
  "methodName" : "setupNotifications",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/455",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.os.Build\nimport android.app.NotificationManager\nimport android.app.NotificationChannel\nprivate fun setupNotifications() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channelId = \"default\"\r\n            val channel = NotificationChannel(\r\n                channelId,\r\n                \"Habitica Notifications\",\r\n                NotificationManager.IMPORTANCE_DEFAULT\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "441",
  "ground_truth" : "            } else {\r\n                snackbarContainer.setPadding(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun setupBottomnavigationLayoutListener() {\r\n        binding.content.bottomNavigation.viewTreeObserver.addOnGlobalLayoutListener {\r\n            if (binding.content.bottomNavigation.visibility == View.VISIBLE) {\r\n                snackbarContainer.setPadding(\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    binding.content.bottomNavigation.barHeight + 12.dpToPx(this)\r\n                )\r\n            } else {\r\n                snackbarContainer.setPadding(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "428",
  "methodName" : "setupBottomnavigationLayoutListener",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/456",
  "prompt" : "import com.habitrpg.common.habitica.extensions.dpToPx\nimport androidx.core.view.setPadding\nimport androidx.compose.ui.unit.dp\nimport android.view.View\nprivate fun setupBottomnavigationLayoutListener() {\r\n        binding.content.bottomNavigation.viewTreeObserver.addOnGlobalLayoutListener {\r\n            if (binding.content.bottomNavigation.visibility == View.VISIBLE) {\r\n                snackbarContainer.setPadding(\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    binding.content.bottomNavigation.barHeight + 12.dpToPx(this)\r\n                )\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "449",
  "ground_truth" : "        // Sync the toggle state after onRestoreInstanceState has occurred.\r\n        drawerToggle?.syncState()\r\n\r\n        launchScreen = viewModel.launchScreen\r\n    }",
  "context" : "override fun onPostCreate(savedInstanceState: Bundle?) {\r\n        super.onPostCreate(savedInstanceState)\r\n        // Sync the toggle state after onRestoreInstanceState has occurred.\r\n        drawerToggle?.syncState()\r\n\r\n        launchScreen = viewModel.launchScreen\r\n    }",
  "start_lineno" : "443",
  "methodName" : "onPostCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/457",
  "prompt" : "import android.os.Bundle\noverride fun onPostCreate(savedInstanceState: Bundle?) {\r\n        super.onPostCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "454",
  "ground_truth" : "        super.onConfigurationChanged(newConfig)\r\n        drawerToggle?.onConfigurationChanged(newConfig)\r\n    }",
  "context" : "override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        drawerToggle?.onConfigurationChanged(newConfig)\r\n    }",
  "start_lineno" : "451",
  "methodName" : "onConfigurationChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/458",
  "prompt" : "import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "469",
  "ground_truth" : "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (binding.root.parent is DrawerLayout && drawerToggle?.onOptionsItemSelected(item) == true) {\r\n            true\r\n        } else if (item.itemId == android.R.id.home) {\r\n            if (showBackButton != true) {\r\n                drawerFragment?.toggleDrawer()\r\n            } else {\r\n                MainNavigationController.navigateBack()\r\n            }\r\n            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "456",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/459",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MainNavigationController\nimport com.habitrpg.android.habitica.R\nimport androidx.drawerlayout.widget.DrawerLayout\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (binding.root.parent is DrawerLayout && drawerToggle?.onOptionsItemSelected(item) == true) {\r\n            true\r\n        } else if (item.itemId == android.R.id.home) {\r\n            if (showBackButton != true) {\r\n                drawerFragment?.toggleDrawer()\r\n            } else {\r\n                MainNavigationController.navigateBack()\r\n            }\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "543",
  "ground_truth" : "                notificationPermissionLauncher.launch(android.Manifest.permission.POST_NOTIFICATIONS)\r\n                viewModel.requestNotificationPermission.value = false\r\n            }\r\n        }\r\n    }",
  "context" : " @RequiresApi(33)\r\n    fun observeNotificationPermission() {\r\n        viewModel.requestNotificationPermission.observe(this) { requestNotificationPermission ->\r\n            if (requestNotificationPermission) {\r\n                notificationPermissionLauncher.launch(android.Manifest.permission.POST_NOTIFICATIONS)\r\n                viewModel.requestNotificationPermission.value = false\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "535",
  "methodName" : "observeNotificationPermission",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/460",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.annotation.RequiresApi\n @RequiresApi(33)\r\n    fun observeNotificationPermission() {\r\n        viewModel.requestNotificationPermission.observe(this) { requestNotificationPermission ->\r\n            if (requestNotificationPermission) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "548",
  "ground_truth" : "        updateWidgets()\r\n        super.onPause()\r\n    }",
  "context" : "override fun onPause() {\r\n        updateWidgets()\r\n        super.onPause()\r\n    }",
  "start_lineno" : "545",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/461",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "553",
  "ground_truth" : "        resumeFromActivity = true\r\n        super.startActivity(intent)\r\n    }",
  "context" : "override fun startActivity(intent: Intent?) {\r\n        resumeFromActivity = true\r\n        super.startActivity(intent)\r\n    }",
  "start_lineno" : "550",
  "methodName" : "startActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/462",
  "prompt" : "import android.content.Intent\noverride fun startActivity(intent: Intent?) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "558",
  "ground_truth" : "        resumeFromActivity = true\r\n        super.startActivity(intent, options)\r\n    }",
  "context" : "override fun startActivity(intent: Intent?, options: Bundle?) {\r\n        resumeFromActivity = true\r\n        super.startActivity(intent, options)\r\n    }",
  "start_lineno" : "555",
  "methodName" : "startActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/463",
  "prompt" : "import android.os.Bundle\nimport android.content.Intent\noverride fun startActivity(intent: Intent?, options: Bundle?) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "565",
  "ground_truth" : "        updateWidget(DailiesWidgetProvider::class.java)\r\n        updateWidget(HabitButtonWidgetProvider::class.java)\r\n    }",
  "context" : "private fun updateWidgets() {\r\n        updateWidget(AvatarStatsWidgetProvider::class.java)\r\n        updateWidget(TodoListWidgetProvider::class.java)\r\n        updateWidget(DailiesWidgetProvider::class.java)\r\n        updateWidget(HabitButtonWidgetProvider::class.java)\r\n    }",
  "start_lineno" : "560",
  "methodName" : "updateWidgets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/464",
  "prompt" : "import com.habitrpg.android.habitica.widget.TodoListWidgetProvider\nimport com.habitrpg.android.habitica.widget.AvatarStatsWidgetProvider\nprivate fun updateWidgets() {\r\n        updateWidget(AvatarStatsWidgetProvider::class.java)\r\n        updateWidget(TodoListWidgetProvider::class.java)\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "574",
  "ground_truth" : "        val ids = AppWidgetManager.getInstance(application)\r\n            .getAppWidgetIds(ComponentName(application, widgetClass))\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, ids)\r\n        sendBroadcast(intent)\r\n    }",
  "context" : "private fun updateWidget(widgetClass: Class<*>) {\r\n        val intent = Intent(this, widgetClass)\r\n        intent.action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r\n        val ids = AppWidgetManager.getInstance(application)\r\n            .getAppWidgetIds(ComponentName(application, widgetClass))\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, ids)\r\n        sendBroadcast(intent)\r\n    }",
  "start_lineno" : "567",
  "methodName" : "updateWidget",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/465",
  "prompt" : "import android.content.Intent\nimport android.appwidget.AppWidgetManager\nprivate fun updateWidget(widgetClass: Class<*>) {\r\n        val intent = Intent(this, widgetClass)\r\n        intent.action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "633",
  "ground_truth" : "                super.onBackPressed()\r\n            } catch (ignored: Exception) {\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        if (drawerFragment?.isDrawerOpen == true) {\r\n            drawerFragment?.closeDrawer()\r\n        } else {\r\n            try {\r\n                super.onBackPressed()\r\n            } catch (ignored: Exception) {\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "624",
  "methodName" : "onBackPressed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/466",
  "prompt" : "override fun onBackPressed() {\r\n        if (drawerFragment?.isDrawerOpen == true) {\r\n            drawerFragment?.closeDrawer()\r\n        } else {\r\n            try {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "641",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "public override fun onDestroy() {\r\n        userRepository.close()\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "637",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/467",
  "prompt" : "import com.habitrpg.android.habitica.R\npublic override fun onDestroy() {\r\n        userRepository.close()\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "696",
  "ground_truth" : "                lastDeathDialogDisplay = now\r\n                MainNavigationController.navigate(R.id.deathActivity)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun displayDeathDialogIfNeeded() {\r\n        if (!viewModel.userViewModel.isUserFainted) {\r\n            return\r\n        }\r\n\r\n        val now = Date().time\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r\n            delay(1000L)\r\n            if (!this@MainActivity.isFinishing && MainNavigationController.isReady && now - lastDeathDialogDisplay > 10000) {\r\n                lastDeathDialogDisplay = now\r\n                MainNavigationController.navigate(R.id.deathActivity)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "683",
  "methodName" : "displayDeathDialogIfNeeded",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/468",
  "prompt" : "import java.util.Date\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.Dispatchers\nimport com.habitrpg.common.habitica.helpers.MainNavigationController\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nimport android.view.View\nprivate fun displayDeathDialogIfNeeded() {\r\n        if (!viewModel.userViewModel.isUserFainted) {\r\n            return\r\n        }\r\n\r\n        val now = Date().time\r\n        lifecycleScope.launch(context = Dispatchers.Main) {\r\n            delay(1000L)\r\n            if (!this@MainActivity.isFinishing && MainNavigationController.isReady && now - lastDeathDialogDisplay > 10000) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "705",
  "ground_truth" : "            return true\r\n        }\r\n\r\n        return super.onKeyUp(keyCode, event)\r\n    }",
  "context" : "override fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {\r\n        if (keyCode == KeyEvent.KEYCODE_MENU) {\r\n            drawerFragment?.openDrawer()\r\n            return true\r\n        }\r\n\r\n        return super.onKeyUp(keyCode, event)\r\n    }",
  "start_lineno" : "698",
  "methodName" : "onKeyUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/469",
  "prompt" : "import android.view.KeyEvent\noverride fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {\r\n        if (keyCode == KeyEvent.KEYCODE_MENU) {\r\n            drawerFragment?.openDrawer()\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "722",
  "ground_truth" : "            }\r\n        }\r\n        binding.content.overlayFrameLayout.addView(view)\r\n        viewModel.logTutorialStatus(step, false)\r\n    }",
  "context" : "fun displayTutorialStep(step: TutorialStep, texts: List<String>, canBeDeferred: Boolean) {\r\n        val view = TutorialView(this, step, viewModel)\r\n        view.setTutorialTexts(texts)\r\n        view.setCanBeDeferred(canBeDeferred)\r\n        binding.content.overlayFrameLayout.children.forEach {\r\n            if (it is TutorialView) {\r\n                binding.content.overlayFrameLayout.removeView(it)\r\n            }\r\n        }\r\n        binding.content.overlayFrameLayout.addView(view)\r\n        viewModel.logTutorialStatus(step, false)\r\n    }",
  "start_lineno" : "711",
  "methodName" : "displayTutorialStep",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/470",
  "prompt" : "import com.habitrpg.android.habitica.ui.TutorialView\nimport com.habitrpg.android.habitica.models.TutorialStep\nimport androidx.core.view.children\nimport androidx.compose.material.Text\nimport android.view.View\nfun displayTutorialStep(step: TutorialStep, texts: List<String>, canBeDeferred: Boolean) {\r\n        val view = TutorialView(this, step, viewModel)\r\n        view.setTutorialTexts(texts)\r\n        view.setCanBeDeferred(canBeDeferred)\r\n        binding.content.overlayFrameLayout.children.forEach {\r\n            if (it is TutorialView) {\r\n                binding.content.overlayFrameLayout.removeView(it)\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "758",
  "ground_truth" : "        data.putString(\"description\", maintenanceResponse.description)\r\n        data.putBoolean(\"deprecationNotice\", isDeprecationNotice)\r\n        intent.putExtras(data)\r\n        return intent\r\n    }",
  "context" : "private fun createMaintenanceIntent(\r\n        maintenanceResponse: MaintenanceResponse,\r\n        isDeprecationNotice: Boolean\r\n    ): Intent {\r\n        val intent = Intent(this, MaintenanceActivity::class.java)\r\n        val data = Bundle()\r\n        data.putString(\"title\", maintenanceResponse.title)\r\n        data.putString(\"imageUrl\", maintenanceResponse.imageUrl)\r\n        data.putString(\"description\", maintenanceResponse.description)\r\n        data.putBoolean(\"deprecationNotice\", isDeprecationNotice)\r\n        intent.putExtras(data)\r\n        return intent\r\n    }",
  "start_lineno" : "746",
  "methodName" : "createMaintenanceIntent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/471",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.MaintenanceResponse\nimport com.habitrpg.android.habitica.R\nimport android.os.Bundle\nimport android.content.Intent\nprivate fun createMaintenanceIntent(\r\n        maintenanceResponse: MaintenanceResponse,\r\n        isDeprecationNotice: Boolean\r\n    ): Intent {\r\n        val intent = Intent(this, MaintenanceActivity::class.java)\r\n        val data = Bundle()\r\n        data.putString(\"title\", maintenanceResponse.title)\r\n        data.putString(\"imageUrl\", maintenanceResponse.imageUrl)\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "794",
  "ground_truth" : "            if (binding.content.connectionIssueView.visibility == View.VISIBLE) {\r\n                binding.content.connectionIssueView.visibility = View.GONE\r\n            }\r\n        }\r\n    }",
  "context" : "override fun hideConnectionProblem() {\r\n        if (errorJob?.isCancelled == false) {\r\n            errorJob?.cancel()\r\n        }\r\n        lifecycleScope.launch(Dispatchers.Main) {\r\n            if (binding.content.connectionIssueView.visibility == View.VISIBLE) {\r\n                binding.content.connectionIssueView.visibility = View.GONE\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "785",
  "methodName" : "hideConnectionProblem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/472",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\noverride fun hideConnectionProblem() {\r\n        if (errorJob?.isCancelled == false) {\r\n            errorJob?.cancel()\r\n        }\r\n        lifecycleScope.launch(Dispatchers.Main) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var launchScreen String?\nvar apiClient ApiClient\nvar soundManager SoundManager\nvar checkClassSelectionUseCase CheckClassSelectionUseCase\nvar displayItemDropUseCase DisplayItemDropUseCase\nvar notifyUserUseCase NotifyUserUseCase\nvar taskRepository TaskRepository\nvar inventoryRepository InventoryRepository\nvar appConfigManager AppConfigManager\nvar reviewManager ReviewManager\nvar binding ActivityMainBinding\nval snackbarContainer ViewGroup\nval notificationsViewModel NotificationsViewModel\nval viewModel MainActivityViewModel\nvar sideAvatarView AvatarView?\nvar drawerFragment NavigationDrawerFragment?\nvar drawerToggle ActionBarDrawerToggle?\nvar showBirthdayIcon\nvar showBackButton Boolean?\nvar resumeFromActivity\nvar userQuestStatus\nvar lastNotificationOpen Long?\nval notificationPermissionLauncher\nval classSelectionResult\nval isAppBarExpanded Boolean\nvar launchTrace com?.google?.firebase?.perf?.metrics?.Trace?\nvar lastDeathDialogDisplay\nvar errorJob Job?",
  "app_type" : "life",
  "end_lineno" : "804",
  "ground_truth" : "            binding.content.toolbarTitle.setScaledPadding(this, 16, 4, 16, 4)\r\n        } else {\r\n            binding.content.toolbarTitle.setPadding(0)\r\n        }\r\n    }",
  "context" : "fun updateToolbarInteractivity(titleInteractive: Boolean) {\r\n        viewModel.canShowTeamPlanHeader.value = titleInteractive\r\n        binding.content.toolbarTitle.background?.alpha = if (titleInteractive) 255 else 0\r\n        if (titleInteractive) {\r\n            binding.content.toolbarTitle.setScaledPadding(this, 16, 4, 16, 4)\r\n        } else {\r\n            binding.content.toolbarTitle.setPadding(0)\r\n        }\r\n    }",
  "start_lineno" : "796",
  "methodName" : "updateToolbarInteractivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt",
  "task_id" : "habitica-android/473",
  "prompt" : "fun updateToolbarInteractivity(titleInteractive: Boolean) {\r\n        viewModel.canShowTeamPlanHeader.value = titleInteractive\r\n        binding.content.toolbarTitle.background?.alpha = if (titleInteractive) 255 else 0\r\n        if (titleInteractive) {\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "var binding ActivityMaintenanceBinding\nvar maintenanceService MaintenanceApiService\nvar apiClient ApiClient\nvar isDeprecationNotice Boolean",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        binding = ActivityMaintenanceBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityMaintenanceBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "35",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MaintenanceActivity.kt",
  "task_id" : "habitica-android/474",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityMaintenanceBinding\nvar maintenanceService MaintenanceApiService\nvar apiClient ApiClient\nvar isDeprecationNotice Boolean",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "                    finish()\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (!isDeprecationNotice) {\r\n            lifecycleScope.launchCatching {\r\n                val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n                if (maintenanceResponse?.activeMaintenance == false) {\r\n                    finish()\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MaintenanceActivity.kt",
  "task_id" : "habitica-android/475",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        if (!isDeprecationNotice) {\r\n            lifecycleScope.launchCatching {\r\n                val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n                if (maintenanceResponse?.activeMaintenance == false) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityMaintenanceBinding\nvar maintenanceService MaintenanceApiService\nvar apiClient ApiClient\nvar isDeprecationNotice Boolean",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "            startActivity(Intent(Intent.ACTION_VIEW, \"market://details?id=$appPackageName\".toUri()))\r\n        } catch (anfe: android.content.ActivityNotFoundException) {\r\n            startActivity(Intent(Intent.ACTION_VIEW, \"https://play.google.com/store/apps/details?id=$appPackageName\".toUri()))\r\n        }\r\n    }",
  "context" : "private fun openInPlayStore() {\r\n        val appPackageName = packageName\r\n        try {\r\n            startActivity(Intent(Intent.ACTION_VIEW, \"market://details?id=$appPackageName\".toUri()))\r\n        } catch (anfe: android.content.ActivityNotFoundException) {\r\n            startActivity(Intent(Intent.ACTION_VIEW, \"https://play.google.com/store/apps/details?id=$appPackageName\".toUri()))\r\n        }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "openInPlayStore",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MaintenanceActivity.kt",
  "task_id" : "habitica-android/476",
  "prompt" : "private fun openInPlayStore() {\r\n        val appPackageName = packageName\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        binding = ActivityNotificationsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityNotificationsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "74",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/477",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "133",
  "ground_truth" : "            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }",
  "context" : "override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r\n            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }",
  "start_lineno" : "127",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/478",
  "prompt" : "override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            viewModel.refreshNotifications()\r\n            binding.notificationsRefreshLayout.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        binding.notificationsRefreshLayout.isRefreshing = true\r\n\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            viewModel.refreshNotifications()\r\n            binding.notificationsRefreshLayout.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "135",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/479",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        binding.notificationsRefreshLayout.isRefreshing = true\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "152",
  "ground_truth" : "            displayNoNotificationsView()\r\n        } else {\r\n            displayNotificationsListView(notifications)\r\n        }\r\n    }",
  "context" : "private fun setNotifications(notifications: List<Notification>) {\r\n        this.notifications = notifications\r\n\r\n        if (notifications.isEmpty()) {\r\n            displayNoNotificationsView()\r\n        } else {\r\n            displayNotificationsListView(notifications)\r\n        }\r\n    }",
  "start_lineno" : "144",
  "methodName" : "setNotifications",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/480",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nprivate fun setNotifications(notifications: List<Notification>) {\r\n        this.notifications = notifications\r\n\r\n        if (notifications.isEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "        binding.notificationItems.addView(inflater?.inflate(R.layout.no_notifications, binding.notificationItems, false))\r\n        binding.progressView.isVisible = false\r\n    }",
  "context" : "private fun displayNoNotificationsView() {\r\n        binding.notificationItems.removeAllViewsInLayout()\r\n        binding.notificationItems.showDividers = LinearLayout.SHOW_DIVIDER_NONE\r\n        binding.notificationItems.addView(inflater?.inflate(R.layout.no_notifications, binding.notificationItems, false))\r\n        binding.progressView.isVisible = false\r\n    }",
  "start_lineno" : "154",
  "methodName" : "displayNoNotificationsView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/481",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.R\nimport android.widget.LinearLayout\nimport android.view.View\nprivate fun displayNoNotificationsView() {\r\n        binding.notificationItems.removeAllViewsInLayout()\r\n        binding.notificationItems.showDividers = LinearLayout.SHOW_DIVIDER_NONE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "214",
  "ground_truth" : "            displayNoNotificationsView()\r\n        } else {\r\n            displayNotificationsListView(notifications)\r\n        }\r\n    }",
  "context" : "private fun removeNotificationAndRefresh(notification: Notification) {\r\n        // Immediately remove notification for better user experience\r\n        // (To avoid waiting for the server to respond for potential slower connections)\r\n        this.notifications = this.notifications.filter { it.id != notification.id }\r\n\r\n        if (notifications.isEmpty()) {\r\n            displayNoNotificationsView()\r\n        } else {\r\n            displayNotificationsListView(notifications)\r\n        }\r\n    }",
  "start_lineno" : "204",
  "methodName" : "removeNotificationAndRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/482",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.R\nprivate fun removeNotificationAndRefresh(notification: Notification) {\r\n        // Immediately remove notification for better user experience\r\n        // (To avoid waiting for the server to respond for potential slower connections)\r\n        this.notifications = this.notifications.filter { it.id != notification.id }\r\n\r\n        if (notifications.isEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(getString(stringId, data?.group?.name))\r\n        )\r\n    }",
  "context" : "private fun createNewChatMessageNotification(notification: Notification): View? {\r\n        val data = notification.data as? NewChatMessageData\r\n        val stringId = if (viewModel.isPartyMessage(data)) R.string.new_msg_party else R.string.new_msg_guild\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(getString(stringId, data?.group?.name))\r\n        )\r\n    }",
  "start_lineno" : "216",
  "methodName" : "createNewChatMessageNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/483",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.NewChatMessageData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createNewChatMessageNotification(notification: Notification): View? {\r\n        val data = notification.data as? NewChatMessageData\r\n        val stringId = if (viewModel.isPartyMessage(data)) R.string.new_msg_party else R.string.new_msg_guild\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "233",
  "ground_truth" : "            notification,\r\n            fromHtml(\"<b>\" + data?.title + \"</b><br>\" + data?.text),\r\n            imageName = data?.icon\r\n        )\r\n    }",
  "context" : "private fun createItemReceivedNotification(notification: Notification): View? {\r\n        val data = notification.data as? ItemReceivedData\r\n        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(\"<b>\" + data?.title + \"</b><br>\" + data?.text),\r\n            imageName = data?.icon\r\n        )\r\n    }",
  "start_lineno" : "226",
  "methodName" : "createItemReceivedNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/484",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.ItemReceivedData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createItemReceivedNotification(notification: Notification): View? {\r\n        val data = notification.data as? ItemReceivedData\r\n        return createDismissableNotificationItem(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "            )\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "private fun createUnallocatedStatsNotification(notification: Notification): View? {\r\n        val level = userLvl ?: return null\r\n        return if (level >= 10) {\r\n            val data = notification.data as? UnallocatedPointsData\r\n\r\n            createDismissableNotificationItem(\r\n                notification,\r\n                fromHtml(getString(R.string.unallocated_stats_points, data?.points.toString())),\r\n                R.drawable.notification_stat_sparkles\r\n            )\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "260",
  "methodName" : "createUnallocatedStatsNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/485",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.UnallocatedPointsData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createUnallocatedStatsNotification(notification: Notification): View? {\r\n        val level = userLvl ?: return null\r\n        return if (level >= 10) {\r\n            val data = notification.data as? UnallocatedPointsData\r\n\r\n            createDismissableNotificationItem(\r\n                notification,\r\n                fromHtml(getString(R.string.unallocated_stats_points, data?.points.toString())),\r\n                R.drawable.notification_stat_sparkles\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "281",
  "ground_truth" : "            notification,\r\n            fromHtml(getString(R.string.new_subscriber_item)),\r\n            R.drawable.notification_mystery_item\r\n        )\r\n    }",
  "context" : "private fun createMysteryItemsNotification(notification: Notification): View? {\r\n        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(getString(R.string.new_subscriber_item)),\r\n            R.drawable.notification_mystery_item\r\n        )\r\n    }",
  "start_lineno" : "275",
  "methodName" : "createMysteryItemsNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/486",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nimport android.view.View\nprivate fun createMysteryItemsNotification(notification: Notification): View? {\r\n        return createDismissableNotificationItem(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "293",
  "ground_truth" : "            fromHtml(message),\r\n            null,\r\n            textColor = R.color.yellow_5\r\n        )\r\n    }",
  "context" : "private fun createGroupTaskNeedsWorkNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskNeedsWorkData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(message),\r\n            null,\r\n            textColor = R.color.yellow_5\r\n        )\r\n    }",
  "start_lineno" : "283",
  "methodName" : "createGroupTaskNeedsWorkNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/487",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.GroupTaskNeedsWorkData\nimport com.habitrpg.common.habitica.models.Notification\nimport android.view.View\nprivate fun createGroupTaskNeedsWorkNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskNeedsWorkData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "305",
  "ground_truth" : "            fromHtml(message),\r\n            null,\r\n            textColor = R.color.green_10\r\n        )\r\n    }",
  "context" : "private fun createGroupTaskApprovedNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskApprovedData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r\n            fromHtml(message),\r\n            null,\r\n            textColor = R.color.green_10\r\n        )\r\n    }",
  "start_lineno" : "295",
  "methodName" : "createGroupTaskApprovedNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/488",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.GroupTaskApprovedData\nimport com.habitrpg.common.habitica.models.Notification\nimport android.view.View\nprivate fun createGroupTaskApprovedNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskApprovedData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "318",
  "ground_truth" : "        )\r\n        // Hide for now\r\n        item?.visibility = View.GONE\r\n        return item\r\n    }",
  "context" : "private fun createGroupTaskNeedsApprovalNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskRequiresApprovalData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        val item = createActionableNotificationItem(\r\n            notification,\r\n            fromHtml(message)\r\n        )\r\n        // Hide for now\r\n        item?.visibility = View.GONE\r\n        return item\r\n    }",
  "start_lineno" : "307",
  "methodName" : "createGroupTaskNeedsApprovalNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/489",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.GroupTaskRequiresApprovalData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createGroupTaskNeedsApprovalNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskRequiresApprovalData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        val item = createActionableNotificationItem(\r\n            notification,\r\n            fromHtml(message)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityNotificationsBinding\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nval viewModel NotificationsViewModel\nvar inflater LayoutInflater?\nvar userLvl Int?\nvar notifications List<Notification>\nvar baileyNewsNotification Notification?",
  "app_type" : "life",
  "end_lineno" : "331",
  "ground_truth" : "\r\n        return message.replace(pattern, \"strong\")\r\n    }",
  "context" : "private fun convertGroupMessageHtml(message: String): String {\r\n        // Using positive lookbehind to make sure \"span\" is preceded by \"<\" or \"</\"\r\n        val pattern = \"(?<=</?)span\".toRegex()\r\n\r\n        return message.replace(pattern, \"strong\")\r\n    }",
  "start_lineno" : "326",
  "methodName" : "convertGroupMessageHtml",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt",
  "task_id" : "habitica-android/490",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun convertGroupMessageHtml(message: String): String {\r\n        // Using positive lookbehind to make sure \"span\" is preceded by \"<\" or \"</\"\r\n        val pattern = \"(?<=</?)span\".toRegex()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "28",
  "ground_truth" : "\r\n        supportFragmentManager.beginTransaction()\r\n            .replace(R.id.fragment_container, PreferencesFragment())\r\n            .commit()\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n\r\n        supportFragmentManager.beginTransaction()\r\n            .replace(R.id.fragment_container, PreferencesFragment())\r\n            .commit()\r\n    }",
  "start_lineno" : "20",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\PrefsActivity.kt",
  "task_id" : "habitica-android/491",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setupToolbar(findViewById(R.id.toolbar))\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }",
  "context" : "override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r\n            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }",
  "start_lineno" : "30",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\PrefsActivity.kt",
  "task_id" : "habitica-android/492",
  "prompt" : "override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "            \"my_account\" -> AccountPreferenceFragment()\r\n            \"pushNotifications\" -> PushNotificationsPreferencesFragment()\r\n            \"emailNotifications\" -> EmailNotificationsPreferencesFragment()\r\n            else -> null\r\n        }",
  "context" : "private fun createNextPage(preferenceScreen: PreferenceScreen): PreferenceFragmentCompat? =\r\n        when (preferenceScreen.key) {\r\n            \"my_account\" -> AccountPreferenceFragment()\r\n            \"pushNotifications\" -> PushNotificationsPreferencesFragment()\r\n            \"emailNotifications\" -> EmailNotificationsPreferencesFragment()\r\n            else -> null\r\n        }",
  "start_lineno" : "56",
  "methodName" : "createNextPage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\PrefsActivity.kt",
  "task_id" : "habitica-android/493",
  "prompt" : "import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceFragmentCompat\nprivate fun createNextPage(preferenceScreen: PreferenceScreen): PreferenceFragmentCompat? =\r\n        when (preferenceScreen.key) {\r",
  "type" : "android",
  "actions" : "android.intent.action.VIEW"
}, {
  "variables" : "var binding ActivityReportMessageBinding\nvar socialRepository SocialRepository\nvar raisedElevation\nvar messageID String?\nvar groupID String?\nvar isReporting Boolean",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        binding = ActivityReportMessageBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityReportMessageBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "43",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt",
  "task_id" : "habitica-android/494",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityReportMessageBinding\nvar socialRepository SocialRepository\nvar raisedElevation\nvar messageID String?\nvar groupID String?\nvar isReporting Boolean",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        super.onBackPressed()\r\n        finish()\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        finish()\r\n    }",
  "start_lineno" : "85",
  "methodName" : "onBackPressed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt",
  "task_id" : "habitica-android/495",
  "prompt" : "override fun onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityReportMessageBinding\nvar socialRepository SocialRepository\nvar raisedElevation\nvar messageID String?\nvar groupID String?\nvar isReporting Boolean",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "                socialRepository.flagMessage(messageID ?: \"\", binding.additionalInfoEdittext.text.toString(), groupID)\r\n                finish()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun reportMessage() {\r\n        if (isReporting) {\r\n            return\r\n        }\r\n        isReporting = true\r\n        messageID?.let {\r\n            lifecycleScope.launch(\r\n                ExceptionHandler.coroutine {\r\n                    isReporting = false\r\n                }\r\n            ) {\r\n                socialRepository.flagMessage(messageID ?: \"\", binding.additionalInfoEdittext.text.toString(), groupID)\r\n                finish()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "90",
  "methodName" : "reportMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt",
  "task_id" : "habitica-android/496",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun reportMessage() {\r\n        if (isReporting) {\r\n            return\r\n        }\r\n        isReporting = true\r\n        messageID?.let {\r\n            lifecycleScope.launch(\r\n                ExceptionHandler.coroutine {\r\n                    isReporting = false\r\n                }\r\n            ) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivityReportMessageBinding\nvar socialRepository SocialRepository\nvar raisedElevation\nvar messageID String?\nvar groupID String?\nvar isReporting Boolean",
  "app_type" : "life",
  "end_lineno" : "128",
  "ground_truth" : "        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "context" : "override fun finish() {\r\n        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "start_lineno" : "125",
  "methodName" : "finish",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt",
  "task_id" : "habitica-android/497",
  "prompt" : "override fun finish() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ActivityReportMessageBinding\nvar socialRepository SocialRepository\nvar raisedElevation\nvar messageID String?\nvar groupID String?\nvar isReporting Boolean",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "        // Update the SystemUiVisibility dependening on whether we want a Light or Dark theme.\r\n        window.decorView.systemUiVisibility = if (isDark) lFlags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv() else lFlags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n    }",
  "context" : " @RequiresApi(api = VERSION_CODES.M)\r\n    fun setSystemBarTheme(isDark: Boolean) {\r\n        // Fetch the current flags.\r\n        val lFlags = window.decorView.systemUiVisibility\r\n        // Update the SystemUiVisibility dependening on whether we want a Light or Dark theme.\r\n        window.decorView.systemUiVisibility = if (isDark) lFlags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv() else lFlags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n    }",
  "start_lineno" : "130",
  "methodName" : "setSystemBarTheme",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt",
  "task_id" : "habitica-android/498",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.annotation.RequiresApi\nimport android.view.View\nimport android.os.Build.VERSION_CODES\n @RequiresApi(api = VERSION_CODES.M)\r\n    fun setSystemBarTheme(isDark: Boolean) {\r\n        // Fetch the current flags.\r\n        val lFlags = window.decorView.systemUiVisibility\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        binding = ActivitySetupBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivitySetupBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "74",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/499",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "128",
  "ground_truth" : "        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "125",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/500",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "        binding.viewPager.adapter = ViewPageAdapter(fragmentManager)\r\n\r\n        binding.viewPager.addOnPageChangeListener(this)\r\n        binding.viewPagerIndicator.setViewPager(binding.viewPager)\r\n    }",
  "context" : "private fun setupViewpager() {\r\n        val fragmentManager = supportFragmentManager\r\n\r\n        binding.viewPager.adapter = ViewPageAdapter(fragmentManager)\r\n\r\n        binding.viewPager.addOnPageChangeListener(this)\r\n        binding.viewPagerIndicator.setViewPager(binding.viewPager)\r\n    }",
  "start_lineno" : "130",
  "methodName" : "setupViewpager",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/501",
  "prompt" : "import androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun setupViewpager() {\r\n        val fragmentManager = supportFragmentManager\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "            binding.previousButton.text = null\r\n            leftDrawable = AppCompatResources.getDrawable(this, R.drawable.back_arrow_disabled)\r\n        }\r\n        binding.previousButton.setCompoundDrawablesWithIntrinsicBounds(leftDrawable, null, null, null)\r\n    }",
  "context" : "private fun setPreviousButtonEnabled(enabled: Boolean) {\r\n        val leftDrawable: Drawable?\r\n        if (enabled) {\r\n            binding.previousButton.setText(R.string.action_back)\r\n            leftDrawable = AppCompatResources.getDrawable(this, R.drawable.back_arrow_enabled)\r\n        } else {\r\n            binding.previousButton.text = null\r\n            leftDrawable = AppCompatResources.getDrawable(this, R.drawable.back_arrow_disabled)\r\n        }\r\n        binding.previousButton.setCompoundDrawablesWithIntrinsicBounds(leftDrawable, null, null, null)\r\n    }",
  "start_lineno" : "173",
  "methodName" : "setPreviousButtonEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/502",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.appcompat.content.res.AppCompatResources\nimport android.graphics.drawable.Drawable\nprivate fun setPreviousButtonEnabled(enabled: Boolean) {\r\n        val leftDrawable: Drawable?\r\n        if (enabled) {\r\n            binding.previousButton.setText(R.string.action_back)\r\n            leftDrawable = AppCompatResources.getDrawable(this, R.drawable.back_arrow_enabled)\r\n        } else {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "246",
  "ground_truth" : "        startActivity(intent)\r\n        finish()\r\n    }",
  "context" : "private fun startMainActivity() {\r\n        val intent = Intent(this@SetupActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(intent)\r\n        finish()\r\n    }",
  "start_lineno" : "241",
  "methodName" : "startMainActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/503",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun startMainActivity() {\r\n        val intent = Intent(this@SetupActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySetupBinding\nvar apiClient ApiClient\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar welcomeFragment WelcomeFragment?\nvar avatarSetupFragment AvatarSetupFragment?\nvar taskSetupFragment TaskSetupFragment?\nvar user User?\nvar completedSetup\nvar createdTasks\nval isLastPage Boolean\nvar hasCompleted",
  "app_type" : "life",
  "end_lineno" : "253",
  "ground_truth" : "            userRepository.updateLoginName(username)\r\n        }\r\n    }",
  "context" : "private fun confirmNames(displayName: String, username: String) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(\"profile.name\", displayName)\r\n            userRepository.updateLoginName(username)\r\n        }\r\n    }",
  "start_lineno" : "248",
  "methodName" : "confirmNames",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt",
  "task_id" : "habitica-android/504",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun confirmNames(displayName: String, username: String) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(\"profile.name\", displayName)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillMembersBinding\nvar viewAdapter PartyMemberRecyclerViewAdapter?\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        binding = ActivitySkillMembersBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivitySkillMembersBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "38",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillMemberActivity.kt",
  "task_id" : "habitica-android/505",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillMembersBinding\nvar viewAdapter PartyMemberRecyclerViewAdapter?\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        setupToolbar(findViewById(R.id.toolbar))\r\n        loadMemberList()\r\n    }",
  "context" : "public override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n        loadMemberList()\r\n    }",
  "start_lineno" : "43",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillMemberActivity.kt",
  "task_id" : "habitica-android/506",
  "prompt" : "import android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillTasksBinding\nvar taskRepository TaskRepository\nvar viewFragmentsDictionary",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        setupToolbar(findViewById(R.id.toolbar))\r\n        loadTaskLists()\r\n    }",
  "context" : "public override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n        loadTaskLists()\r\n    }",
  "start_lineno" : "34",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt",
  "task_id" : "habitica-android/507",
  "prompt" : "import android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillTasksBinding\nvar taskRepository TaskRepository\nvar viewFragmentsDictionary",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        binding = ActivitySkillTasksBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivitySkillTasksBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "40",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt",
  "task_id" : "habitica-android/508",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillTasksBinding\nvar taskRepository TaskRepository\nvar viewFragmentsDictionary",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "        setResult(Activity.RESULT_OK, resultIntent)\r\n        finish()\r\n    }",
  "context" : "fun taskSelected(task: Task) {\r\n        val resultIntent = Intent()\r\n        resultIntent.putExtra(\"taskID\", task.id)\r\n        setResult(Activity.RESULT_OK, resultIntent)\r\n        finish()\r\n    }",
  "start_lineno" : "78",
  "methodName" : "taskSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt",
  "task_id" : "habitica-android/509",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport android.content.Intent\nfun taskSelected(task: Task) {\r\n        val resultIntent = Intent()\r\n        resultIntent.putExtra(\"taskID\", task.id)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding ActivitySkillTasksBinding\nvar taskRepository TaskRepository\nvar viewFragmentsDictionary",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r\n            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "85",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt",
  "task_id" : "habitica-android/510",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "        binding = ActivityTaskFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun getContentView(layoutResId: Int?): View {\r\n        binding = ActivityTaskFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "180",
  "methodName" : "getContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/511",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "405",
  "ground_truth" : "        checkIfShowNotifLayout()\r\n        super.onResume()\r\n    }",
  "context" : "override fun onResume() {\r\n        checkIfShowNotifLayout()\r\n        super.onResume()\r\n    }",
  "start_lineno" : "402",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/512",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "412",
  "ground_truth" : "            if (forcedTheme == \"taskform\") getThemeColor(R.attr.taskFormTint) else getThemeColor(R.attr.colorAccent)\r\n        window.statusBarColor = upperTintColor\r\n    }",
  "context" : "override fun loadTheme(sharedPreferences: SharedPreferences, forced: Boolean) {\r\n        super.loadTheme(sharedPreferences, forced)\r\n        val upperTintColor =\r\n            if (forcedTheme == \"taskform\") getThemeColor(R.attr.taskFormTint) else getThemeColor(R.attr.colorAccent)\r\n        window.statusBarColor = upperTintColor\r\n    }",
  "start_lineno" : "407",
  "methodName" : "loadTheme",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/513",
  "prompt" : "import android.graphics.Color\nimport android.content.SharedPreferences\noverride fun loadTheme(sharedPreferences: SharedPreferences, forced: Boolean) {\r\n        super.loadTheme(sharedPreferences, forced)\r\n        val upperTintColor =\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "419",
  "ground_truth" : "            binding.textEditText.requestFocus()\r\n        }\r\n    }",
  "context" : "override fun onStart() {\r\n        super.onStart()\r\n        if (isCreating) {\r\n            binding.textEditText.requestFocus()\r\n        }\r\n    }",
  "start_lineno" : "414",
  "methodName" : "onStart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/514",
  "prompt" : "override fun onStart() {\r\n        super.onStart()\r\n        if (isCreating) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "466",
  "ground_truth" : "            R.id.action_save -> saveTask()\r\n            R.id.action_delete -> deleteTask()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_save -> saveTask()\r\n            R.id.action_delete -> deleteTask()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "460",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/515",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "471",
  "ground_truth" : "        val newCanSave = binding.textEditText.text?.isNotBlank() == true\r\n        canSave = newCanSave\r\n    }",
  "context" : "private fun checkCanSave() {\r\n        val newCanSave = binding.textEditText.text?.isNotBlank() == true\r\n        canSave = newCanSave\r\n    }",
  "start_lineno" : "468",
  "methodName" : "checkCanSave",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/516",
  "prompt" : "private fun checkCanSave() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "610",
  "ground_truth" : "            }\r\n        } else {\r\n            hasPreselectedTags = true\r\n        }\r\n    }",
  "context" : "private fun setAllTagSelections() {\r\n        if (hasPreselectedTags) {\r\n            tags.forEachIndexed { index, tag ->\r\n                val view = binding.tagsWrapper.getChildAt(index) as? CheckBox\r\n                view?.isChecked = task?.tags?.find { it.id == tag.id } != null\r\n            }\r\n        } else {\r\n            hasPreselectedTags = true\r\n        }\r\n    }",
  "start_lineno" : "601",
  "methodName" : "setAllTagSelections",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/517",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nimport androidx.core.view.forEachIndexed\nimport android.widget.CheckBox\nprivate fun setAllTagSelections() {\r\n        if (hasPreselectedTags) {\r\n            tags.forEachIndexed { index, tag ->\r\n                val view = binding.tagsWrapper.getChildAt(index) as? CheckBox\r\n                view?.isChecked = task?.tags?.find { it.id == tag.id } != null\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "953",
  "ground_truth" : "        binding.taskSchedulingControls.isEnabled = false\r\n        binding.habitScoringButtons.isEnabled = false\r\n    }",
  "context" : "private fun disableEditingForUneditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = false\r\n        binding.taskDifficultyButtons.isEnabled = false\r\n        binding.taskSchedulingControls.isEnabled = false\r\n        binding.habitScoringButtons.isEnabled = false\r\n    }",
  "start_lineno" : "948",
  "methodName" : "disableEditingForUneditableFieldsInChallengeTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/518",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate fun disableEditingForUneditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = false\r\n        binding.taskDifficultyButtons.isEnabled = false\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "958",
  "ground_truth" : "        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "context" : "override fun finish() {\r\n        dismissKeyboard()\r\n        super.finish()\r\n    }",
  "start_lineno" : "955",
  "methodName" : "finish",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/519",
  "prompt" : "override fun finish() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "975",
  "ground_truth" : "                },\r\n                onClose\r\n            )\r\n        }\r\n    }",
  "context" : "private fun showAssignDialog() {\r\n        showAsBottomSheet { onClose ->\r\n            AssignSheet(\r\n                groupMembers,\r\n                assignedIDs,\r\n                {\r\n                    if (assignedIDs.contains(it)) {\r\n                        assignedIDs.remove(it)\r\n                    } else {\r\n                        assignedIDs.add(it)\r\n                    }\r\n                },\r\n                onClose\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "960",
  "methodName" : "showAssignDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/520",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.tasks.AssignSheet\nimport com.habitrpg.android.habitica.ui.views.showAsBottomSheet\nimport com.habitrpg.android.habitica.models.members.Member\nprivate fun showAssignDialog() {\r\n        showAsBottomSheet { onClose ->\r\n            AssignSheet(\r\n                groupMembers,\r\n                assignedIDs,\r\n                {\r\n                    if (assignedIDs.contains(it)) {\r\n                        assignedIDs.remove(it)\r\n                    } else {\r\n                        assignedIDs.add(it)\r\n                    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TaskFormViewModel\nvar binding ActivityTaskFormBinding\nvar userScrolled Boolean\nvar isSaving Boolean\nvar taskRepository TaskRepository\nvar tagRepository TagRepository\nvar taskAlarmManager TaskAlarmManager\nvar pushNotificationManager PushNotificationManager\nvar challengeRepository ChallengeRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\nvar challenge Challenge?\nval notificationPermissionLauncher\nvar isCreating\nvar isChallengeTask\nvar usesTaskAttributeStats\nvar task Task?\nvar initialTaskInstance Task?\nvar taskType TaskType\nvar tags\nvar groupID String?\nvar groupMembers\nvar assignedIDs\nvar taskCompletedMap\nvar preselectedTags ArrayList<String>?\nvar hasPreselectedTags\nvar isDiscardCancelled Boolean\nvar canSave Boolean\nvar tintColor Int\nval SELECTED_TAGS_KEY\nval TASK_ID_KEY\nval GROUP_ID_KEY\nval TASK_VALUE_KEY\nval USER_ID_KEY\nval TASK_TYPE_KEY\nval IS_CHALLENGE_TASK\nval PARCELABLE_TASK\nval SET_IGNORE_FLAG",
  "app_type" : "life",
  "end_lineno" : "999",
  "ground_truth" : "        toInt()\r\n    } catch (e: NumberFormatException) {\r\n        0\r\n    }\r\n}",
  "context" : "private fun String.toIntCatchOverflow(): Int? {\r\n    return try {\r\n        toInt()\r\n    } catch (e: NumberFormatException) {\r\n        0\r\n    }\r\n}",
  "start_lineno" : "993",
  "methodName" : "toIntCatchOverflow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt",
  "task_id" : "habitica-android/521",
  "prompt" : "private fun String.toIntCatchOverflow(): Int? {\r\n    return try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskID String\nval task\nval viewModel TaskSummaryViewModel",
  "app_type" : "life",
  "end_lineno" : "103",
  "ground_truth" : "            HabiticaTheme {\r\n                TaskSummaryView(viewModel = viewModel)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            HabiticaTheme {\r\n                TaskSummaryView(viewModel = viewModel)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "96",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskSummaryActivity.kt",
  "task_id" : "habitica-android/522",
  "prompt" : "import androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val taskID String\nval task\nval viewModel TaskSummaryViewModel",
  "app_type" : "life",
  "end_lineno" : "342",
  "ground_truth" : "            }\r\n            isBold = !isBold\r\n        }\r\n    }\r\n}",
  "context" : "private fun String.makeBoldComposable(): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var isBold = false\r\n        for (segment in split(\"**\")) {\r\n            withStyle(style = SpanStyle(fontWeight = if (isBold) FontWeight.SemiBold else FontWeight.Normal)) {\r\n                append(segment)\r\n            }\r\n            isBold = !isBold\r\n        }\r\n    }\r\n}",
  "start_lineno" : "332",
  "methodName" : "makeBoldComposable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskSummaryActivity.kt",
  "task_id" : "habitica-android/523",
  "prompt" : "import androidx.compose.ui.unit.sp\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.runtime.Composable\nprivate fun String.makeBoldComposable(): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var isBold = false\r\n        for (segment in split(\"**\")) {\r\n            withStyle(style = SpanStyle(fontWeight = if (isBold) FontWeight.SemiBold else FontWeight.Normal)) {\r\n                append(segment)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var useGridLayout Boolean\nvar entries\nvar binding\nvar achievement Achievement?\nval achievementContainer ViewGroup?\nval achievementIconView PixelArtView\nval achievementCountView TextView\nval achievementTitleView TextView\nval achievementDescriptionView TextView?\nvar achievement QuestAchievement?",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "            is QuestAchievement -> (holder as? QuestAchievementViewHolder)?.bind(entry)\r\n            is String -> (holder as? ChallengeAchievementViewHolder)?.bind(entry)\r\n            is Pair<*, *> -> (holder as? SectionViewHolder)?.bind(entry)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (val entry = entries[position]) {\r\n            is Achievement -> (holder as? AchievementViewHolder)?.bind(entry)\r\n            is QuestAchievement -> (holder as? QuestAchievementViewHolder)?.bind(entry)\r\n            is String -> (holder as? ChallengeAchievementViewHolder)?.bind(entry)\r\n            is Pair<*, *> -> (holder as? SectionViewHolder)?.bind(entry)\r\n        }\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt",
  "task_id" : "habitica-android/524",
  "prompt" : "import com.habitrpg.android.habitica.models.Achievement\nimport com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (val entry = entries[position]) {\r\n            is Achievement -> (holder as? AchievementViewHolder)?.bind(entry)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var useGridLayout Boolean\nvar entries\nvar binding\nvar achievement Achievement?\nval achievementContainer ViewGroup?\nval achievementIconView PixelArtView\nval achievementCountView TextView\nval achievementTitleView TextView\nval achievementDescriptionView TextView?\nvar achievement QuestAchievement?",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            4\r\n        } else {\r\n            if (useGridLayout) 1 else 2\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (entries.size <= position) return 0\r\n        val entry = entries[position]\r\n        return if (entry is Pair<*, *>) {\r\n            0\r\n        } else if (entry is QuestAchievement) {\r\n            3\r\n        } else if (entry is String) {\r\n            4\r\n        } else {\r\n            if (useGridLayout) 1 else 2\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt",
  "task_id" : "habitica-android/525",
  "prompt" : "import com.habitrpg.android.habitica.models.QuestAchievement\nimport com.habitrpg.android.habitica.models.Achievement\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (entries.size <= position) return 0\r\n        val entry = entries[position]\r\n        return if (entry is Pair<*, *>) {\r\n            0\r\n        } else if (entry is QuestAchievement) {\r\n            3\r\n        } else if (entry is String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var useGridLayout Boolean\nvar entries\nvar binding\nvar achievement Achievement?\nval achievementContainer ViewGroup?\nval achievementIconView PixelArtView\nval achievementCountView TextView\nval achievementTitleView TextView\nval achievementDescriptionView TextView?\nvar achievement QuestAchievement?",
  "app_type" : "life",
  "end_lineno" : "71",
  "ground_truth" : "            binding.title.text = category.first as? String\r\n            binding.countLabel.text = category.second.toString()\r\n        }",
  "context" : "fun bind(category: Pair<*, *>) {\r\n            binding.title.text = category.first as? String\r\n            binding.countLabel.text = category.second.toString()\r\n        }",
  "start_lineno" : "68",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt",
  "task_id" : "habitica-android/526",
  "prompt" : "fun bind(category: Pair<*, *>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var useGridLayout Boolean\nvar entries\nvar binding\nvar achievement Achievement?\nval achievementContainer ViewGroup?\nval achievementIconView PixelArtView\nval achievementCountView TextView\nval achievementTitleView TextView\nval achievementDescriptionView TextView?\nvar achievement QuestAchievement?",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }",
  "context" : "override fun onClick(v: View?) {\r\n            achievement?.let {\r\n                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }",
  "start_lineno" : "111",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt",
  "task_id" : "habitica-android/527",
  "prompt" : "import android.view.View\noverride fun onClick(v: View?) {\r\n            achievement?.let {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var useGridLayout Boolean\nvar entries\nvar binding\nvar achievement Achievement?\nval achievementContainer ViewGroup?\nval achievementIconView PixelArtView\nval achievementCountView TextView\nval achievementTitleView TextView\nval achievementDescriptionView TextView?\nvar achievement QuestAchievement?",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "            binding.achievementTitle.text = achievement.title\r\n            binding.achievementCountLabel.text = achievement.count.toString()\r\n        }",
  "context" : "fun bind(achievement: QuestAchievement) {\r\n            this.achievement = achievement\r\n            binding.achievementTitle.text = achievement.title\r\n            binding.achievementCountLabel.text = achievement.count.toString()\r\n        }",
  "start_lineno" : "122",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt",
  "task_id" : "habitica-android/528",
  "prompt" : "import com.habitrpg.android.habitica.models.QuestAchievement\nimport com.habitrpg.android.habitica.models.Achievement\nfun bind(achievement: QuestAchievement) {\r\n            this.achievement = achievement\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var data List<T>",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        val newItem = newList[newItemPosition]\r\n        return oldItem == newItem\r\n    }",
  "context" : "override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\r\n        val oldItem = oldList[oldItemPosition]\r\n        val newItem = newList[newItemPosition]\r\n        return oldItem == newItem\r\n    }",
  "start_lineno" : "25",
  "methodName" : "areContentsTheSame",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\BaseRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/529",
  "prompt" : "override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\r\n        val oldItem = oldList[oldItemPosition]\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var data List<T>",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "            data[position]\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "open fun getItem(position: Int): T? {\r\n        return if (position >= 0 && data.size > position) {\r\n            data[position]\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "54",
  "methodName" : "getItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\BaseRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/530",
  "prompt" : "open fun getItem(position: Int): T? {\r\n        return if (position >= 0 && data.size > position) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var gemBalance Int?\nvar equipmentList MutableList<Equipment>\nvar activeEquipment String?\nvar onSelect\nvar onUnlock\nval binding\nvar equipment Equipment?",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        val view = LayoutInflater.from(parent.context).inflate(viewID, parent, false)\r\n        return EquipmentViewHolder(view)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder {\r\n        val viewID: Int = R.layout.customization_grid_item\r\n\r\n        val view = LayoutInflater.from(parent.context).inflate(viewID, parent, false)\r\n        return EquipmentViewHolder(view)\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationEquipmentRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/531",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder {\r\n        val viewID: Int = R.layout.customization_grid_item\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var gemBalance Int?\nvar equipmentList MutableList<Equipment>\nvar activeEquipment String?\nvar onSelect\nvar onUnlock\nval binding\nvar equipment Equipment?",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "            0\r\n        } else {\r\n            1\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (equipmentList.size <= position) return 0\r\n        return if (this.equipmentList[position].javaClass == CustomizationSet::class.java) {\r\n            0\r\n        } else {\r\n            1\r\n        }\r\n    }",
  "start_lineno" : "58",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationEquipmentRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/532",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.CustomizationSet\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (equipmentList.size <= position) return 0\r\n        return if (this.equipmentList[position].javaClass == CustomizationSet::class.java) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var gemBalance Int?\nvar equipmentList MutableList<Equipment>\nvar activeEquipment String?\nvar onSelect\nvar onUnlock\nval binding\nvar equipment Equipment?",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        equipmentList.add(0, emptyEquipment)\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setEquipment(newEquipmentList: List<Equipment>) {\r\n        this.equipmentList = newEquipmentList.toMutableList()\r\n        val emptyEquipment = Equipment()\r\n        equipmentList.add(0, emptyEquipment)\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "67",
  "methodName" : "setEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationEquipmentRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/533",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Equipment\nfun setEquipment(newEquipmentList: List<Equipment>) {\r\n        this.equipmentList = newEquipmentList.toMutableList()\r\n        val emptyEquipment = Equipment()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userSize String?\nvar hairColor String?\nvar avatar Avatar?\nvar customizationType String?\nvar gemBalance\nvar columnCount\nvar unsortedCustomizations List<Customization>\nvar customizationList MutableList<Any>\nvar additionalSetItems List<Customization>\nvar activeCustomization String?\nvar ownedCustomizations List<String>\nvar pinnedItemKeys List<String>\nvar onCustomizationSelected\nvar onShowPurchaseDialog\nval binding\nvar customization Customization?\nvar context Context\nvar set CustomizationSet?\nvar additionalSetItems List<Customization>?\nvar buttonWidth Int",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "            0\r\n        } else {\r\n            2\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (customizationList.size <= position) return 0\r\n        return if (this.customizationList[position] is CustomizationSet &&\r\n            (position == (customizationList.size - 1) || (position < customizationList.size && customizationList[position + 1] is CustomizationSet))\r\n        ) {\r\n            1\r\n        } else if (this.customizationList[position] is CustomizationSet) {\r\n            0\r\n        } else {\r\n            2\r\n        }\r\n    }",
  "start_lineno" : "90",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/534",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.CustomizationSet\nimport com.habitrpg.android.habitica.models.inventory.Customization\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (customizationList.size <= position) return 0\r\n        return if (this.customizationList[position] is CustomizationSet &&\r\n            (position == (customizationList.size - 1) || (position < customizationList.size && customizationList[position + 1] is CustomizationSet))\r\n        ) {\r\n            1\r\n        } else if (this.customizationList[position] is CustomizationSet) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userSize String?\nvar hairColor String?\nvar avatar Avatar?\nvar customizationType String?\nvar gemBalance\nvar columnCount\nvar unsortedCustomizations List<Customization>\nvar customizationList MutableList<Any>\nvar additionalSetItems List<Customization>\nvar activeCustomization String?\nvar ownedCustomizations List<String>\nvar pinnedItemKeys List<String>\nvar onCustomizationSelected\nvar onShowPurchaseDialog\nval binding\nvar customization Customization?\nvar context Context\nvar set CustomizationSet?\nvar additionalSetItems List<Customization>?\nvar buttonWidth Int",
  "app_type" : "life",
  "end_lineno" : "158",
  "ground_truth" : "        this.pinnedItemKeys = pinnedItemKeys\r\n        if (customizationList.size > 0) this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r\n        this.pinnedItemKeys = pinnedItemKeys\r\n        if (customizationList.size > 0) this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "155",
  "methodName" : "setPinnedItemKeys",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/535",
  "prompt" : "fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userSize String?\nvar hairColor String?\nvar avatar Avatar?\nvar customizationType String?\nvar gemBalance\nvar columnCount\nvar unsortedCustomizations List<Customization>\nvar customizationList MutableList<Any>\nvar additionalSetItems List<Customization>\nvar activeCustomization String?\nvar ownedCustomizations List<String>\nvar pinnedItemKeys List<String>\nvar onCustomizationSelected\nvar onShowPurchaseDialog\nval binding\nvar customization Customization?\nvar context Context\nvar set CustomizationSet?\nvar additionalSetItems List<Customization>?\nvar buttonWidth Int",
  "app_type" : "life",
  "end_lineno" : "287",
  "ground_truth" : "                binding.setPriceLabel.currency = \"gems\"\r\n            } else {\r\n                binding.purchaseSetButton.visibility = View.GONE\r\n            }\r\n        }",
  "context" : "fun bind(set: CustomizationSet) {\r\n            this.set = set\r\n            if (set.hasPurchasable && set.identifier?.contains(\"timeTravel\") != true) {\r\n                binding.purchaseSetButton.visibility = View.VISIBLE\r\n                binding.setPriceLabel.value = set.price.toDouble()\r\n                binding.setPriceLabel.currency = \"gems\"\r\n            } else {\r\n                binding.purchaseSetButton.visibility = View.GONE\r\n            }\r\n        }",
  "start_lineno" : "278",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/536",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.CustomizationSet\nimport com.habitrpg.android.habitica.models.inventory.Customization\nimport android.view.View\nfun bind(set: CustomizationSet) {\r\n            this.set = set\r\n            if (set.hasPurchasable && set.identifier?.contains(\"timeTravel\") != true) {\r\n                binding.purchaseSetButton.visibility = View.VISIBLE\r\n                binding.setPriceLabel.value = set.price.toDouble()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userSize String?\nvar hairColor String?\nvar avatar Avatar?\nvar customizationType String?\nvar gemBalance\nvar columnCount\nvar unsortedCustomizations List<Customization>\nvar customizationList MutableList<Any>\nvar additionalSetItems List<Customization>\nvar activeCustomization String?\nvar ownedCustomizations List<String>\nvar pinnedItemKeys List<String>\nvar onCustomizationSelected\nvar onShowPurchaseDialog\nval binding\nvar customization Customization?\nvar context Context\nvar set CustomizationSet?\nvar additionalSetItems List<Customization>?\nvar buttonWidth Int",
  "app_type" : "life",
  "end_lineno" : "293",
  "ground_truth" : "                onShowPurchaseDialog?.invoke(ShopItem.fromCustomizationSet(it, additionalSetItems, userSize, hairColor))\r\n            }\r\n        }",
  "context" : "override fun onClick(v: View) {\r\n            set?.let {\r\n                onShowPurchaseDialog?.invoke(ShopItem.fromCustomizationSet(it, additionalSetItems, userSize, hairColor))\r\n            }\r\n        }",
  "start_lineno" : "289",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/537",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n            set?.let {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equippedGear String?\nvar isCostume Boolean?\nvar type String?\nvar onEquip\nval binding\nvar gear Equipment?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        val view = LayoutInflater.from(parent.context).inflate(R.layout.gear_list_item, parent, false)\r\n        return GearViewHolder(view)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GearViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.gear_list_item, parent, false)\r\n        return GearViewHolder(view)\r\n    }",
  "start_lineno" : "26",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\EquipmentRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/538",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GearViewHolder {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var equippedGear String?\nvar isCostume Boolean?\nvar type String?\nvar onEquip\nval binding\nvar gear Equipment?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "91",
  "ground_truth" : "            } else {\r\n                label.visibility = View.GONE\r\n                valueTextView.visibility = View.GONE\r\n            }\r\n        }",
  "context" : "private fun set(label: TextView, valueTextView: TextView, value: Int) {\r\n            if (value > 0) {\r\n                label.visibility = View.VISIBLE\r\n                valueTextView.visibility = View.VISIBLE\r\n                @SuppressLint(\"SetTextI18n\")\r\n                valueTextView.text = \"+$value\"\r\n            } else {\r\n                label.visibility = View.GONE\r\n                valueTextView.visibility = View.GONE\r\n            }\r\n        }",
  "start_lineno" : "81",
  "methodName" : "set",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\EquipmentRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/539",
  "prompt" : "import android.widget.TextView\nimport android.view.View\nimport android.annotation.SuppressLint\nprivate fun set(label: TextView, valueTextView: TextView, value: Int) {\r\n            if (value > 0) {\r\n                label.visibility = View.VISIBLE\r\n                valueTextView.visibility = View.VISIBLE\r\n                @SuppressLint(\"SetTextI18n\")\r\n                valueTextView.text = \"+$value\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar fragment DialogFragment?\nvar itemType\nvar itemText\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar items Map<String, Item>?\nvar onSellItem\nvar onQuestInvitation\nvar onOpenMysteryItem\nvar onStartHatching\nvar onHatchPet\nvar onFeedPet\nvar onCreateNewParty\nvar onUseSpecialItem\nvar onOpenShop\nvar ownedItem OwnedItem?\nvar item Item?\nvar resources Resources\nval canHatch Boolean",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "            ItemViewHolder(ItemItemBinding.inflate(context.layoutInflater, parent, false))\r\n        } else {\r\n            ShopAdViewHolder(ShopAdBinding.inflate(context.layoutInflater, parent, false))\r\n        }\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return if (viewType == 0) {\r\n            ItemViewHolder(ItemItemBinding.inflate(context.layoutInflater, parent, false))\r\n        } else {\r\n            ShopAdViewHolder(ShopAdBinding.inflate(context.layoutInflater, parent, false))\r\n        }\r\n    }",
  "start_lineno" : "63",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt",
  "task_id" : "habitica-android/540",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return if (viewType == 0) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar fragment DialogFragment?\nvar itemType\nvar itemText\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar items Map<String, Item>?\nvar onSellItem\nvar onQuestInvitation\nvar onOpenMysteryItem\nvar onStartHatching\nvar onHatchPet\nvar onFeedPet\nvar onCreateNewParty\nvar onUseSpecialItem\nvar onOpenShop\nvar ownedItem OwnedItem?\nvar item Item?\nvar resources Resources\nval canHatch Boolean",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "        val actualCount = super.getItemCount()\r\n        return actualCount + if (itemType == \"special\" || actualCount == 0 || itemType == \"\") 0 else 1\r\n    }",
  "context" : "override fun getItemCount(): Int {\r\n        val actualCount = super.getItemCount()\r\n        return actualCount + if (itemType == \"special\" || actualCount == 0 || itemType == \"\") 0 else 1\r\n    }",
  "start_lineno" : "97",
  "methodName" : "getItemCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt",
  "task_id" : "habitica-android/541",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Item\noverride fun getItemCount(): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar fragment DialogFragment?\nvar itemType\nvar itemText\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar items Map<String, Item>?\nvar onSellItem\nvar onQuestInvitation\nvar onOpenMysteryItem\nvar onStartHatching\nvar onHatchPet\nvar onFeedPet\nvar onCreateNewParty\nvar onUseSpecialItem\nvar onOpenShop\nvar ownedItem OwnedItem?\nvar item Item?\nvar resources Resources\nval canHatch Boolean",
  "app_type" : "life",
  "end_lineno" : "108",
  "ground_truth" : "            0\r\n        } else {\r\n            -1\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        return if (position < data.size) {\r\n            0\r\n        } else {\r\n            -1\r\n        }\r\n    }",
  "start_lineno" : "102",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt",
  "task_id" : "habitica-android/542",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Item\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if (position < data.size) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar fragment DialogFragment?\nvar itemType\nvar itemText\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar items Map<String, Item>?\nvar onSellItem\nvar onQuestInvitation\nvar onOpenMysteryItem\nvar onStartHatching\nvar onHatchPet\nvar onFeedPet\nvar onCreateNewParty\nvar onUseSpecialItem\nvar onOpenShop\nvar ownedItem OwnedItem?\nvar item Item?\nvar resources Resources\nval canHatch Boolean",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "        existingPets = pets\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setExistingPets(pets: List<Pet>) {\r\n        existingPets = pets\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "110",
  "methodName" : "setExistingPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt",
  "task_id" : "habitica-android/543",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Pet\nfun setExistingPets(pets: List<Pet>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar fragment DialogFragment?\nvar itemType\nvar itemText\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar items Map<String, Item>?\nvar onSellItem\nvar onQuestInvitation\nvar onOpenMysteryItem\nvar onStartHatching\nvar onHatchPet\nvar onFeedPet\nvar onCreateNewParty\nvar onUseSpecialItem\nvar onOpenShop\nvar ownedItem OwnedItem?\nvar item Item?\nvar resources Resources\nval canHatch Boolean",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r\n        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "115",
  "methodName" : "setOwnedPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt",
  "task_id" : "habitica-android/544",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onEquip\nvar ownedMounts Map<String, OwnedMount>?\nvar currentMount String?\nvar itemList List<Any>",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setItemList(itemList: List<Any>) {\r\n        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "22",
  "methodName" : "setItemList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/545",
  "prompt" : "fun setItemList(itemList: List<Any>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onEquip\nvar ownedMounts Map<String, OwnedMount>?\nvar currentMount String?\nvar itemList List<Any>",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "            1 -> SectionViewHolder(parent)\r\n            else -> MountViewHolder(parent, onEquip)\r\n        }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder =\r\n        when (viewType) {\r\n            1 -> SectionViewHolder(parent)\r\n            else -> MountViewHolder(parent, onEquip)\r\n        }",
  "start_lineno" : "27",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/546",
  "prompt" : "import android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder =\r\n        when (viewType) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var onEquip\nvar ownedMounts Map<String, OwnedMount>?\nvar currentMount String?\nvar itemList List<Any>",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "            is Mount -> (holder as? MountViewHolder)?.bind(obj, ownedMounts?.get(obj.key ?: \"\")?.owned == true, currentMount)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(\r\n        holder: androidx.recyclerview.widget.RecyclerView.ViewHolder,\r\n        position: Int\r\n    ) {\r\n        when (val obj = this.itemList[position]) {\r\n            is StableSection -> (holder as? SectionViewHolder)?.bind(obj)\r\n            is Mount -> (holder as? MountViewHolder)?.bind(obj, ownedMounts?.get(obj.key ?: \"\")?.owned == true, currentMount)\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/547",
  "prompt" : "import com.habitrpg.android.habitica.ui.viewHolders.SectionViewHolder\nimport com.habitrpg.android.habitica.models.inventory.StableSection\noverride fun onBindViewHolder(\r\n        holder: androidx.recyclerview.widget.RecyclerView.ViewHolder,\r\n        position: Int\r\n    ) {\r\n        when (val obj = this.itemList[position]) {\r\n            is StableSection -> (holder as? SectionViewHolder)?.bind(obj)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var onEquip\nvar ownedMounts Map<String, OwnedMount>?\nvar currentMount String?\nvar itemList List<Any>",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r\n        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "setOwnedMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/548",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setItemList(itemList: List<Any>) {\r\n        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "41",
  "methodName" : "setItemList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/549",
  "prompt" : "fun setItemList(itemList: List<Any>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }",
  "context" : "private fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r\n                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }",
  "start_lineno" : "48",
  "methodName" : "canRaiseToMount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/550",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Mount\nimport com.habitrpg.android.habitica.R\nprivate fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "            2 -> CanHatchViewHolder(parent, animalIngredientsRetriever)\r\n            else -> PetViewHolder(parent, onEquip, onFeed, animalIngredientsRetriever)\r\n        }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder =\r\n        when (viewType) {\r\n            1 -> SectionViewHolder(parent)\r\n            2 -> CanHatchViewHolder(parent, animalIngredientsRetriever)\r\n            else -> PetViewHolder(parent, onEquip, onFeed, animalIngredientsRetriever)\r\n        }",
  "start_lineno" : "65",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/551",
  "prompt" : "import com.habitrpg.android.habitica.ui.viewHolders.SectionViewHolder\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder =\r\n        when (viewType) {\r\n            1 -> SectionViewHolder(parent)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "            } else {\r\n                3\r\n            }\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 3\r\n        return if (itemList[position] is StableSection) {\r\n            1\r\n        } else {\r\n            val pet = itemList[position] as Pet\r\n            if ((\r\n                ownedPets?.get(pet.key)?.trained\r\n                    ?: 0\r\n                ) <= 0 && eggCount(pet) > 0 && potionCount(pet) > 0\r\n            ) {\r\n                2\r\n            } else {\r\n                3\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "111",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/552",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.StableSection\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 3\r\n        return if (itemList[position] is StableSection) {\r\n            1\r\n        } else {\r\n            val pet = itemList[position] as Pet\r\n            if ((\r\n                ownedPets?.get(pet.key)?.trained\r\n                    ?: 0\r\n                ) <= 0 && eggCount(pet) > 0 && potionCount(pet) > 0\r\n            ) {\r\n                2\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r\n        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "135",
  "methodName" : "setOwnedMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/553",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r\n        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "140",
  "methodName" : "setOwnedPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/554",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onFeed\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar currentPet String?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar animalIngredientsRetriever\nvar binding\nvar hasMount Boolean\nvar hasUnlockedPotion Boolean\nvar hasUnlockedEgg Boolean\nvar eggCount Int\nvar potionCount Int\nvar animal Pet?",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "        ownsSaddles = if (ownedItems.containsKey(\"Saddle-food\")) (ownedItems[\"Saddle-food\"]?.numberOwned ?: 0) > 0 else false\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r\n        ownsSaddles = if (ownedItems.containsKey(\"Saddle-food\")) (ownedItems[\"Saddle-food\"]?.numberOwned ?: 0) > 0 else false\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "145",
  "methodName" : "setOwnedItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt",
  "task_id" : "habitica-android/555",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedItem\nfun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "225",
  "ground_truth" : "        is ShopCategory -> 1\r\n        is Pair<*, *> -> 3\r\n        is ShopItem -> 4\r\n        else -> 2\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int = when (getItem(position)) {\r\n        is Shop -> 0\r\n        is ShopCategory -> 1\r\n        is Pair<*, *> -> 3\r\n        is ShopItem -> 4\r\n        else -> 2\r\n    }",
  "start_lineno" : "219",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/556",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.Shop\nimport android.view.View\noverride fun getItemViewType(position: Int): Int = when (getItem(position)) {\r\n        is Shop -> 0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "            2\r\n        } else {\r\n            size\r\n        }\r\n    }",
  "context" : "override fun getItemCount(): Int {\r\n        val size = items.size + getGearItemCount()\r\n        return if (size == 1) {\r\n            2\r\n        } else {\r\n            size\r\n        }\r\n    }",
  "start_lineno" : "227",
  "methodName" : "getItemCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/557",
  "prompt" : "override fun getItemCount(): Int {\r\n        val size = items.size + getGearItemCount()\r\n        return if (size == 1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "251",
  "ground_truth" : "            } else {\r\n                0\r\n            }\r\n        }\r\n    }",
  "context" : "private fun getGearItemCount(): Int {\r\n        return if (selectedGearCategory == \"\") {\r\n            0\r\n        } else {\r\n            val selectedCategory: ShopCategory? = getSelectedShopCategory()\r\n            if (selectedCategory != null) {\r\n                if (selectedCategory.items.size == 0) {\r\n                    2\r\n                } else {\r\n                    selectedCategory.items.size + 1\r\n                }\r\n            } else {\r\n                0\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "236",
  "methodName" : "getGearItemCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/558",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopCategory\nimport com.habitrpg.android.habitica.models.shops.Shop\nprivate fun getGearItemCount(): Int {\r\n        return if (selectedGearCategory == \"\") {\r\n            0\r\n        } else {\r\n            val selectedCategory: ShopCategory? = getSelectedShopCategory()\r\n            if (selectedCategory != null) {\r\n                if (selectedCategory.items.size == 0) {\r\n                    2\r\n                } else {\r\n                    selectedCategory.items.size + 1\r\n                }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "            this.notifyDataSetChanged()\r\n        }\r\n    }",
  "context" : "fun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r\n        if (items.size > 0) {\r\n            this.notifyDataSetChanged()\r\n        }\r\n    }",
  "start_lineno" : "256",
  "methodName" : "setOwnedItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/559",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedItem\nfun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r\n        if (items.size > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "268",
  "ground_truth" : "            this.notifyDataSetChanged()\r\n        }\r\n    }",
  "context" : "fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r\n        this.pinnedItemKeys = pinnedItemKeys\r\n        if (items.size > 0) {\r\n            this.notifyDataSetChanged()\r\n        }\r\n    }",
  "start_lineno" : "263",
  "methodName" : "setPinnedItemKeys",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/560",
  "prompt" : "fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r\n        this.pinnedItemKeys = pinnedItemKeys\r\n        if (items.size > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var completedQuests List<String?>\nvar armoireCount Int\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nval items MutableList<Any>\nvar shopIdentifier String?\nvar ownedItems Map<String, OwnedItem>\nvar armoireItem ShopItem?\nvar changeClassEvents\nvar shopSpriteSuffix String?\nvar context Context?\nvar mainActivity MainActivity?\nvar user User?\nvar pinnedItemKeys List<String>\nvar gearCategories MutableList<ShopCategory>\nvar selectedGearCategory String\nval emptyViewResource Int\nval binding\nval subscribeButton Button?\nval textView TextView?\nvar text String?",
  "app_type" : "life",
  "end_lineno" : "283",
  "ground_truth" : "            binding.npcBannerView.identifier = shop.identifier\r\n\r\n            binding.descriptionView.text = shop.notes.fromHtml()\r\n            binding.namePlate.setText(shop.npcNameResource)\r\n        }",
  "context" : "fun bind(shop: Shop, shopSpriteSuffix: String?) {\r\n            binding.npcBannerView.shopSpriteSuffix = shopSpriteSuffix\r\n            binding.npcBannerView.identifier = shop.identifier\r\n\r\n            binding.descriptionView.text = shop.notes.fromHtml()\r\n            binding.namePlate.setText(shop.npcNameResource)\r\n        }",
  "start_lineno" : "277",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt",
  "task_id" : "habitica-android/561",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.Shop\nimport android.view.View\nfun bind(shop: Shop, shopSpriteSuffix: String?) {\r\n            binding.npcBannerView.shopSpriteSuffix = shopSpriteSuffix\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }",
  "context" : "private fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r\n                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }",
  "start_lineno" : "56",
  "methodName" : "canRaiseToMount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/562",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Mount\nimport com.habitrpg.android.habitica.R\nprivate fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r\n        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "74",
  "methodName" : "setOwnedPets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/563",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r\n        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "79",
  "methodName" : "setOwnedMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/564",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        ownsSaddles = if (ownedItems.containsKey(\"Saddle-food\")) (ownedItems[\"Saddle-food\"]?.numberOwned ?: 0) > 0 else false\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r\n        ownsSaddles = if (ownedItems.containsKey(\"Saddle-food\")) (ownedItems[\"Saddle-food\"]?.numberOwned ?: 0) > 0 else false\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "84",
  "methodName" : "setOwnedItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/565",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedItem\nfun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "        this.existingMounts = existingMounts\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setExistingMounts(existingMounts: List<Mount>) {\r\n        this.existingMounts = existingMounts\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "90",
  "methodName" : "setExistingMounts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/566",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Mount\nfun setExistingMounts(existingMounts: List<Mount>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "        this.itemList = itemList\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setItemList(itemList: List<Any>) {\r\n        this.itemList = itemList\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "95",
  "methodName" : "setItemList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/567",
  "prompt" : "fun setItemList(itemList: List<Any>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "202",
  "ground_truth" : "        this.eggs = eggs\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun setEggs(eggs: Map<String, Egg>) {\r\n        this.eggs = eggs\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "199",
  "methodName" : "setEggs",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/568",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Egg\nfun setEggs(eggs: Map<String, Egg>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var shopSpriteSuffix String?\nvar eggs Map<String, Egg>\nvar animalIngredientsRetriever\nvar onFeed\nvar itemType String?\nvar currentPet String?\nvar currentMount String?\nvar onEquip\nvar existingMounts List<Mount>?\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nvar ownsSaddles Boolean\nvar itemList List<Any>\nvar binding ShopHeaderBinding\nvar animal Animal?\nval imageView PixelArtView\nval titleView TextView\nval ownedTextView TextView",
  "app_type" : "life",
  "end_lineno" : "216",
  "ground_truth" : "            binding.namePlate.setText(R.string.stable_owner)\r\n            binding.descriptionView.visibility = View.GONE\r\n        }",
  "context" : "fun bind() {\r\n            binding.npcBannerView.shopSpriteSuffix = shopSpriteSuffix ?: \"\"\r\n            binding.npcBannerView.identifier = \"stable\"\r\n            binding.namePlate.setText(R.string.stable_owner)\r\n            binding.descriptionView.visibility = View.GONE\r\n        }",
  "start_lineno" : "211",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt",
  "task_id" : "habitica-android/569",
  "prompt" : "import android.view.View\nfun bind() {\r\n            binding.npcBannerView.shopSpriteSuffix = shopSpriteSuffix ?: \"\"\r\n            binding.npcBannerView.identifier = \"stable\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tintColor Int\nvar backgroundTintColor Int\nval items MutableList<HabiticaDrawerItem>\nvar selectedItem Int?\nvar itemSelectedEvents\nvar promoClosedSubject\nvar activePromo HabiticaPromotion?\nvar currentEvent WorldStateEvent?\nval titleTextView TextView?\nval pillView TextView?\nval bubbleView View?\nval additionalInfoView TextView?",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "        items[position] = item\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun updateItem(item: HabiticaDrawerItem) {\r\n        val position = getItemPosition(item.identifier)\r\n        items[position] = item\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "65",
  "methodName" : "updateItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt",
  "task_id" : "habitica-android/570",
  "prompt" : "import com.habitrpg.android.habitica.ui.menu.HabiticaDrawerItem\nfun updateItem(item: HabiticaDrawerItem) {\r\n        val position = getItemPosition(item.identifier)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tintColor Int\nvar backgroundTintColor Int\nval items MutableList<HabiticaDrawerItem>\nvar selectedItem Int?\nvar itemSelectedEvents\nvar promoClosedSubject\nvar activePromo HabiticaPromotion?\nvar currentEvent WorldStateEvent?\nval titleTextView TextView?\nval pillView TextView?\nval bubbleView View?\nval additionalInfoView TextView?",
  "app_type" : "life",
  "end_lineno" : "75",
  "ground_truth" : "        items.addAll(newItems)\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun updateItems(newItems: List<HabiticaDrawerItem>) {\r\n        items.clear()\r\n        items.addAll(newItems)\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "71",
  "methodName" : "updateItems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt",
  "task_id" : "habitica-android/571",
  "prompt" : "import com.habitrpg.android.habitica.ui.menu.HabiticaDrawerItem\nfun updateItems(newItems: List<HabiticaDrawerItem>) {\r\n        items.clear()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tintColor Int\nvar backgroundTintColor Int\nval items MutableList<HabiticaDrawerItem>\nvar selectedItem Int?\nvar itemSelectedEvents\nvar promoClosedSubject\nvar activePromo HabiticaPromotion?\nvar currentEvent WorldStateEvent?\nval titleTextView TextView?\nval pillView TextView?\nval bubbleView View?\nval additionalInfoView TextView?",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "            1\r\n        } else {\r\n            getItem(position).itemViewType ?: 0\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        return if (getItem(position).isHeader) {\r\n            1\r\n        } else {\r\n            getItem(position).itemViewType ?: 0\r\n        }\r\n    }",
  "start_lineno" : "115",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt",
  "task_id" : "habitica-android/572",
  "prompt" : "import android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if (getItem(position).isHeader) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tintColor Int\nvar backgroundTintColor Int\nval items MutableList<HabiticaDrawerItem>\nvar selectedItem Int?\nvar itemSelectedEvents\nvar promoClosedSubject\nvar activePromo HabiticaPromotion?\nvar currentEvent WorldStateEvent?\nval titleTextView TextView?\nval pillView TextView?\nval bubbleView View?\nval additionalInfoView TextView?",
  "app_type" : "life",
  "end_lineno" : "205",
  "ground_truth" : "            (itemView as? TextView)?.text = drawerItem.text\r\n            itemView.setBackgroundColor(backgroundTintColor)\r\n        }",
  "context" : "fun bind(drawerItem: HabiticaDrawerItem) {\r\n            (itemView as? TextView)?.text = drawerItem.text\r\n            itemView.setBackgroundColor(backgroundTintColor)\r\n        }",
  "start_lineno" : "202",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt",
  "task_id" : "habitica-android/573",
  "prompt" : "import com.habitrpg.android.habitica.ui.menu.HabiticaDrawerItem\nfun bind(drawerItem: HabiticaDrawerItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userSize String?\nvar user User?\nvar customizationList List<SetupCustomization>\nvar onEquipGear\nvar onUpdateUser\nval binding\nvar customization SetupCustomization?",
  "app_type" : "life",
  "end_lineno" : "28",
  "ground_truth" : "        this.customizationList = newCustomizationList\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setCustomizationList(newCustomizationList: List<SetupCustomization>) {\r\n        this.customizationList = newCustomizationList\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "25",
  "methodName" : "setCustomizationList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\setup\\CustomizationSetupAdapter.kt",
  "task_id" : "habitica-android/574",
  "prompt" : "import com.habitrpg.android.habitica.models.SetupCustomization\nfun setCustomizationList(newCustomizationList: List<SetupCustomization>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var checkedList MutableList<Boolean>\nvar taskList List<List<String>>\nval icon Drawable?\nval textView TextView\nvar taskGroup List<String>?\nvar isChecked Boolean?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "        this.checkedList = ArrayList()\r\n        for (ignored in this.taskList) {\r\n            this.checkedList.add(false)\r\n        }\r\n    }",
  "context" : "fun setTaskList(taskList: List<List<String>>) {\r\n        this.taskList = taskList\r\n        this.checkedList = ArrayList()\r\n        for (ignored in this.taskList) {\r\n            this.checkedList.add(false)\r\n        }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "setTaskList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\setup\\TaskSetupAdapter.kt",
  "task_id" : "habitica-android/575",
  "prompt" : "fun setTaskList(taskList: List<List<String>>) {\r\n        this.taskList = taskList\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var checkedList MutableList<Boolean>\nvar taskList List<List<String>>\nval icon Drawable?\nval textView TextView\nvar taskGroup List<String>?\nvar isChecked Boolean?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "            checkedList[position] = !checkedList[position]\r\n            notifyItemChanged(position)\r\n        }",
  "context" : "override fun onClick(v: View) {\r\n            val position = this.bindingAdapterPosition\r\n            checkedList[position] = !checkedList[position]\r\n            notifyItemChanged(position)\r\n        }",
  "start_lineno" : "76",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\setup\\TaskSetupAdapter.kt",
  "task_id" : "habitica-android/576",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n            val position = this.bindingAdapterPosition\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "17",
  "ground_truth" : "        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }",
  "context" : "override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = parent.inflate(R.layout.spinner_item, false) ?: View(context)\r\n        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }",
  "start_lineno" : "13",
  "methodName" : "getDropDownView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SimpleSpinnerAdapter.kt",
  "task_id" : "habitica-android/577",
  "prompt" : "import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = parent.inflate(R.layout.spinner_item, false) ?: View(context)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }",
  "context" : "override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = convertView ?: parent.inflate(android.R.layout.simple_spinner_item, false)\r\n        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }",
  "start_lineno" : "19",
  "methodName" : "getView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SimpleSpinnerAdapter.kt",
  "task_id" : "habitica-android/578",
  "prompt" : "import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = convertView ?: parent.inflate(android.R.layout.simple_spinner_item, false)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onUseSkill\nvar mana Double\nvar level Int\nvar specialItems RealmList<OwnedItem>?\nvar skillList List<Skill>\nval binding\nval magicDrawable Drawable\nval lockDrawable Drawable\nvar skill Skill?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        this.skillList = skillList\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setSkillList(skillList: List<Skill>) {\r\n        this.skillList = skillList\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "41",
  "methodName" : "setSkillList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/579",
  "prompt" : "import com.habitrpg.android.habitica.models.Skill\nfun setSkillList(skillList: List<Skill>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onUseSkill\nvar mana Double\nvar level Int\nvar specialItems RealmList<OwnedItem>?\nvar skillList List<Skill>\nval binding\nval magicDrawable Drawable\nval lockDrawable Drawable\nvar skill Skill?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "131",
  "ground_truth" : "                skill?.let { onUseSkill?.invoke(it) }\r\n            }\r\n        }",
  "context" : "override fun onClick(v: View) {\r\n            if ((skill?.lvl ?: 0) <= level) {\r\n                skill?.let { onUseSkill?.invoke(it) }\r\n            }\r\n        }",
  "start_lineno" : "127",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/580",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n            if ((skill?.lvl ?: 0) <= level) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var onTaskSelection\nval binding\nvar task Task?",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "        if (task?.id?.length == 36) {\r\n            return UUID.fromString(task.id).mostSignificantBits\r\n        }\r\n        return UUID.randomUUID().mostSignificantBits\r\n    }",
  "context" : "override fun getItemId(position: Int): Long {\r\n        val task = getItem(position)\r\n        if (task?.id?.length == 36) {\r\n            return UUID.fromString(task.id).mostSignificantBits\r\n        }\r\n        return UUID.randomUUID().mostSignificantBits\r\n    }",
  "start_lineno" : "17",
  "methodName" : "getItemId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/581",
  "prompt" : "override fun getItemId(position: Int): Long {\r\n        val task = getItem(position)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onTaskSelection\nval binding\nvar task Task?",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "            .inflate(R.layout.skill_task_item_card, parent, false)\r\n        return TaskViewHolder(view)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.skill_task_item_card, parent, false)\r\n        return TaskViewHolder(view)\r\n    }",
  "start_lineno" : "25",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/582",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var onTaskSelection\nval binding\nvar task Task?",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "                task?.let {\r\n                    onTaskSelection?.invoke(it)\r\n                }\r\n            }\r\n        }",
  "context" : "override fun onClick(v: View) {\r\n            if (v == itemView) {\r\n                task?.let {\r\n                    onTaskSelection?.invoke(it)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "56",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/583",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n            if (v == itemView) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var itemType String?\nvar activity MainActivity?\nvar itemList List<Any>\nval binding\nvar achievement Achievement?",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun setItemList(itemList: List<Any>) {\r\n        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "21",
  "methodName" : "setItemList",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt",
  "task_id" : "habitica-android/584",
  "prompt" : "fun setItemList(itemList: List<Any>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var itemType String?\nvar activity MainActivity?\nvar itemList List<Any>\nval binding\nvar achievement Achievement?",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "            SectionViewHolder(parent.inflate(R.layout.profile_achievement_category))\r\n        } else {\r\n            AchievementViewHolder(parent.inflate(R.layout.profile_achievement_item))\r\n        }\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return if (viewType == 0) {\r\n            SectionViewHolder(parent.inflate(R.layout.profile_achievement_category))\r\n        } else {\r\n            AchievementViewHolder(parent.inflate(R.layout.profile_achievement_item))\r\n        }\r\n    }",
  "start_lineno" : "26",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt",
  "task_id" : "habitica-android/585",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return if (viewType == 0) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var itemType String?\nvar activity MainActivity?\nvar itemList List<Any>\nval binding\nvar achievement Achievement?",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "            (holder as? SectionViewHolder)?.bind(obj as String)\r\n        } else {\r\n            (holder as? AchievementViewHolder)?.bind(itemList[position] as Achievement)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        val obj = this.itemList[position]\r\n        if (obj.javaClass == String::class.java) {\r\n            (holder as? SectionViewHolder)?.bind(obj as String)\r\n        } else {\r\n            (holder as? AchievementViewHolder)?.bind(itemList[position] as Achievement)\r\n        }\r\n    }",
  "start_lineno" : "34",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt",
  "task_id" : "habitica-android/586",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        val obj = this.itemList[position]\r\n        if (obj.javaClass == String::class.java) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var itemType String?\nvar activity MainActivity?\nvar itemList List<Any>\nval binding\nvar achievement Achievement?",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "            0\r\n        } else {\r\n            1\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 0\r\n        return if (this.itemList[position].javaClass == String::class.java) {\r\n            0\r\n        } else {\r\n            1\r\n        }\r\n    }",
  "start_lineno" : "43",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt",
  "task_id" : "habitica-android/587",
  "prompt" : "import android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 0\r\n        return if (this.itemList[position].javaClass == String::class.java) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var itemType String?\nvar activity MainActivity?\nvar itemList List<Any>\nval binding\nvar achievement Achievement?",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }",
  "context" : "override fun onClick(view: View) {\r\n            achievement?.let {\r\n                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }",
  "start_lineno" : "79",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt",
  "task_id" : "habitica-android/588",
  "prompt" : "import android.view.View\noverride fun onClick(view: View) {\r\n            achievement?.let {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val entries List<Group>\nval checkedEntries MutableList<Group>\nval binding",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "            .inflate(R.layout.dialog_challenge_filter_group_item, parent, false)\r\n        return ChallengeViewHolder(view)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChallengeViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.dialog_challenge_filter_group_item, parent, false)\r\n        return ChallengeViewHolder(view)\r\n    }",
  "start_lineno" : "20",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengesFilterRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/589",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChallengeViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val entries List<Group>\nval checkedEntries MutableList<Group>\nval binding",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "                } else if (!isChecked && checkedEntries.contains(group)) {\r\n                    checkedEntries.remove(group)\r\n                }\r\n            }\r\n        }",
  "context" : "fun bind(group: Group, checkedEntries: MutableList<Group>) {\r\n            binding.root.text = group.name\r\n            binding.root.isChecked = checkedEntries.contains(group)\r\n            binding.root.setOnCheckedChangeListener { _, isChecked ->\r\n                if (isChecked && !checkedEntries.contains(group)) {\r\n                    checkedEntries.add(group)\r\n                } else if (!isChecked && checkedEntries.contains(group)) {\r\n                    checkedEntries.remove(group)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "37",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengesFilterRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/590",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nfun bind(group: Group, checkedEntries: MutableList<Group>) {\r\n            binding.root.text = group.name\r\n            binding.root.isChecked = checkedEntries.contains(group)\r\n            binding.root.setOnCheckedChangeListener { _, isChecked ->\r\n                if (isChecked && !checkedEntries.contains(group)) {\r\n                    checkedEntries.add(group)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskList MutableList<Task>\nvar onAddItem\nvar onTaskOpen\nval addBtn Button\nvar newTask Task?\nval dividerName TextView\nval TYPE_HEADER\nval TYPE_HABIT\nval TYPE_DAILY\nval TYPE_TODO\nval TYPE_REWARD\nval TYPE_ADD_ITEM",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "            TaskType.TODO -> TYPE_TODO\r\n            TaskType.REWARD -> TYPE_REWARD\r\n            else -> if (task?.id == \"addtask\") TYPE_ADD_ITEM else TYPE_HEADER\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        val task = this.filteredContent?.get(position)\r\n\r\n        return when (task?.type) {\r\n            TaskType.HABIT -> TYPE_HABIT\r\n            TaskType.DAILY -> TYPE_DAILY\r\n            TaskType.TODO -> TYPE_TODO\r\n            TaskType.REWARD -> TYPE_REWARD\r\n            else -> if (task?.id == \"addtask\") TYPE_ADD_ITEM else TYPE_HEADER\r\n        }\r\n    }",
  "start_lineno" : "35",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/591",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        val task = this.filteredContent?.get(position)\r\n\r\n        return when (task?.type) {\r\n            TaskType.HABIT -> TYPE_HABIT\r\n            TaskType.DAILY -> TYPE_DAILY\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskList MutableList<Task>\nvar onAddItem\nvar onTaskOpen\nval addBtn Button\nvar newTask Task?\nval dividerName TextView\nval TYPE_HEADER\nval TYPE_HABIT\nval TYPE_DAILY\nval TYPE_TODO\nval TYPE_REWARD\nval TYPE_ADD_ITEM",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        content?.add(position + 1, taskToAdd)\r\n        filter()\r\n\r\n        return position\r\n    }",
  "context" : "fun addTaskUnder(taskToAdd: Task, taskAbove: Task?): Int {\r\n        val position = content?.indexOfFirst { t -> t.id == taskAbove?.id } ?: 0\r\n\r\n        content?.add(position + 1, taskToAdd)\r\n        filter()\r\n\r\n        return position\r\n    }",
  "start_lineno" : "47",
  "methodName" : "addTaskUnder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/592",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nfun addTaskUnder(taskToAdd: Task, taskAbove: Task?): Int {\r\n        val position = content?.indexOfFirst { t -> t.id == taskAbove?.id } ?: 0\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskList MutableList<Task>\nvar onAddItem\nvar onTaskOpen\nval addBtn Button\nvar newTask Task?\nval dividerName TextView\nval TYPE_HEADER\nval TYPE_HABIT\nval TYPE_DAILY\nval TYPE_TODO\nval TYPE_REWARD\nval TYPE_ADD_ITEM",
  "app_type" : "life",
  "end_lineno" : "98",
  "ground_truth" : "            return true\r\n        }\r\n\r\n        return false\r\n    }",
  "context" : "fun replaceTask(task: Task): Boolean {\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r\n        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n\r\n            filter()\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }",
  "start_lineno" : "82",
  "methodName" : "replaceTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/593",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nfun replaceTask(task: Task): Boolean {\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r\n        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n\r\n            filter()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskList MutableList<Task>\nvar onAddItem\nvar onTaskOpen\nval addBtn Button\nvar newTask Task?\nval dividerName TextView\nval TYPE_HEADER\nval TYPE_HABIT\nval TYPE_DAILY\nval TYPE_TODO\nval TYPE_REWARD\nval TYPE_ADD_ITEM",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "            this.newTask = data\r\n            addBtn.text = data.text\r\n        }",
  "context" : "override fun bind(\r\n            data: Task,\r\n            position: Int,\r\n            displayMode: String\r\n        ) {\r\n            this.newTask = data\r\n            addBtn.text = data.text\r\n        }",
  "start_lineno" : "113",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/594",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun bind(\r\n            data: Task,\r\n            position: Int,\r\n            displayMode: String\r\n        ) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Challenge>?\nvar challengeMemberships List<ChallengeMembership>?\nvar onOpenChallengeFragment\nval binding\nvar challenge Challenge?",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: ChallengeViewHolder, position: Int) {\r\n        data[position].let { challenge ->\r\n            holder.bind(challenge, challengeMemberships?.first { challenge.id == it.challengeID } != null)\r\n            holder.itemView.setOnClickListener {\r\n                if (challenge.isManaged && challenge.isValid) {\r\n                    challenge.id?.let {\r\n                        onOpenChallengeFragment?.invoke(it)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "30",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChallengesListViewAdapter.kt",
  "task_id" : "habitica-android/595",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nimport android.view.View\noverride fun onBindViewHolder(holder: ChallengeViewHolder, position: Int) {\r\n        data[position].let { challenge ->\r\n            holder.bind(challenge, challengeMemberships?.first { challenge.id == it.challengeID } != null)\r\n            holder.itemView.setOnClickListener {\r\n                if (challenge.isManaged && challenge.isValid) {\r\n                    challenge.id?.let {\r\n                        onOpenChallengeFragment?.invoke(it)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Challenge>?\nvar challengeMemberships List<ChallengeMembership>?\nvar onOpenChallengeFragment\nval binding\nvar challenge Challenge?",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        this.data = data ?: emptyList()\r\n        unfilteredData = data\r\n    }",
  "context" : "fun updateUnfilteredData(data: List<Challenge>?) {\r\n        this.data = data ?: emptyList()\r\n        unfilteredData = data\r\n    }",
  "start_lineno" : "43",
  "methodName" : "updateUnfilteredData",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChallengesListViewAdapter.kt",
  "task_id" : "habitica-android/596",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nfun updateUnfilteredData(data: List<Challenge>?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user\nvar uuid String\nvar expandedMessageId String?\nvar onMessageLike\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval dateTime\nval binding\nvar onShouldExpand",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "        val newItem = newList[newItemPosition] as ChatMessage\r\n        return oldItem.likeCount == newItem.likeCount && oldItem.id == newItem.id\r\n    }",
  "context" : "override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\r\n        val oldItem = oldList[oldItemPosition] as ChatMessage\r\n        val newItem = newList[newItemPosition] as ChatMessage\r\n        return oldItem.likeCount == newItem.likeCount && oldItem.id == newItem.id\r\n    }",
  "start_lineno" : "22",
  "methodName" : "areContentsTheSame",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/597",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\noverride fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\r\n        val oldItem = oldList[oldItemPosition] as ChatMessage\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user\nvar uuid String\nvar expandedMessageId String?\nvar onMessageLike\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval dateTime\nval binding\nvar onShouldExpand",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "            SystemChatMessageViewHolder(parent.inflate(R.layout.system_chat_message))\r\n        } else {\r\n            ChatRecyclerMessageViewHolder(parent.inflate(R.layout.chat_item), uuid, isTavern)\r\n        }\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return if (viewType == 0) {\r\n            SystemChatMessageViewHolder(parent.inflate(R.layout.system_chat_message))\r\n        } else {\r\n            ChatRecyclerMessageViewHolder(parent.inflate(R.layout.chat_item), uuid, isTavern)\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/598",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return if (viewType == 0) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var user\nvar uuid String\nvar expandedMessageId String?\nvar onMessageLike\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval dateTime\nval binding\nvar onShouldExpand",
  "app_type" : "life",
  "end_lineno" : "95",
  "ground_truth" : "        if (data.size <= position) return 0\r\n        return if (data[position].isSystemMessage) 0 else 1\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (data.size <= position) return 0\r\n        return if (data[position].isSystemMessage) 0 else 1\r\n    }",
  "start_lineno" : "92",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/599",
  "prompt" : "import android.view.View\noverride fun getItemViewType(position: Int): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user\nvar uuid String\nvar expandedMessageId String?\nvar onMessageLike\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval dateTime\nval binding\nvar onShouldExpand",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "        } else {\r\n            message.id\r\n        }\r\n        notifyItemChanged(position ?: data.indexOf(message))\r\n    }",
  "context" : "private fun expandMessage(message: ChatMessage, position: Int?) {\r\n        expandedMessageId = if (expandedMessageId == message.id) {\r\n            null\r\n        } else {\r\n            message.id\r\n        }\r\n        notifyItemChanged(position ?: data.indexOf(message))\r\n    }",
  "start_lineno" : "97",
  "methodName" : "expandMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/600",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\nprivate fun expandMessage(message: ChatMessage, position: Int?) {\r\n        expandedMessageId = if (expandedMessageId == message.id) {\r\n            null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user\nvar uuid String\nvar expandedMessageId String?\nvar onMessageLike\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval dateTime\nval binding\nvar onShouldExpand",
  "app_type" : "life",
  "end_lineno" : "128",
  "ground_truth" : "            binding.systemMessageTimestamp.visibility = View.VISIBLE\r\n        } else {\r\n            binding.systemMessageTimestamp.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "fun bind(chatMessage: ChatMessage?, isExpanded: Boolean) {\r\n        binding.textView.text = chatMessage?.text?.removePrefix(\"`\")?.removeSuffix(\"`\")\r\n        binding.systemMessageTimestamp.text = chatMessage?.timestamp?.let { java.util.Date(it) }\r\n            ?.let { dateTime.format(it) }\r\n        if (isExpanded) {\r\n            binding.systemMessageTimestamp.visibility = View.VISIBLE\r\n        } else {\r\n            binding.systemMessageTimestamp.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "119",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/601",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\nimport android.view.View\nfun bind(chatMessage: ChatMessage?, isExpanded: Boolean) {\r\n        binding.textView.text = chatMessage?.text?.removePrefix(\"`\")?.removeSuffix(\"`\")\r\n        binding.systemMessageTimestamp.text = chatMessage?.timestamp?.let { java.util.Date(it) }\r\n            ?.let { dateTime.format(it) }\r\n        if (isExpanded) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var replyToUser Member?\nval FIRST_MESSAGE\nval NORMAL_MESSAGE\nvar expandedMessageId String?\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval DIFF_CALLBACK",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "            ChatRecyclerIntroViewHolder(parent.inflate(R.layout.tavern_chat_intro_item), replyToUser?.id ?: \"\")\r\n        } else {\r\n            ChatRecyclerMessageViewHolder(parent.inflate(R.layout.chat_item), user?.id ?: \"\", false)\r\n        }\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatRecyclerViewHolder {\r\n        return if (viewType == FIRST_MESSAGE) {\r\n            ChatRecyclerIntroViewHolder(parent.inflate(R.layout.tavern_chat_intro_item), replyToUser?.id ?: \"\")\r\n        } else {\r\n            ChatRecyclerMessageViewHolder(parent.inflate(R.layout.chat_item), user?.id ?: \"\", false)\r\n        }\r\n    }",
  "start_lineno" : "43",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\InboxAdapter.kt",
  "task_id" : "habitica-android/602",
  "prompt" : "import com.habitrpg.android.habitica.ui.viewHolders.ChatRecyclerViewHolder\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatRecyclerViewHolder {\r\n        return if (viewType == FIRST_MESSAGE) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var replyToUser Member?\nval FIRST_MESSAGE\nval NORMAL_MESSAGE\nvar expandedMessageId String?\nvar onOpenProfile\nvar onDeleteMessage\nvar onFlagMessage\nvar onReply\nvar onCopyMessage\nval DIFF_CALLBACK",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "        } else {\r\n            id\r\n        }\r\n        notifyItemChanged(position)\r\n    }",
  "context" : "private fun expandMessage(id: String, position: Int) {\r\n        if (isPositionIntroMessage(position)) {\r\n            return\r\n        }\r\n        expandedMessageId = if (expandedMessageId == id) {\r\n            null\r\n        } else {\r\n            id\r\n        }\r\n        notifyItemChanged(position)\r\n    }",
  "start_lineno" : "75",
  "methodName" : "expandMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\InboxAdapter.kt",
  "task_id" : "habitica-android/603",
  "prompt" : "private fun expandMessage(id: String, position: Int) {\r\n        if (isPositionIntroMessage(position)) {\r\n            return\r\n        }\r\n        expandedMessageId = if (expandedMessageId == id) {\r\n            null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var leaderID String?\nvar onUserClicked",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "            onUserClicked?.invoke(data[position].id)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: GroupMemberViewHolder, position: Int) {\r\n        holder.bind(data[position], leaderID, null)\r\n        holder.onClickEvent = {\r\n            onUserClicked?.invoke(data[position].id)\r\n        }\r\n    }",
  "start_lineno" : "20",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\PartyMemberRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/604",
  "prompt" : "import com.habitrpg.android.habitica.ui.viewHolders.GroupMemberViewHolder\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun onBindViewHolder(holder: GroupMemberViewHolder, position: Int) {\r\n        holder.bind(data[position], leaderID, null)\r\n        holder.onClickEvent = {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var content MutableList<Task>?\nvar filteredContent MutableList<Task>?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "            holder.bind(item, position, \"normal\")\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: VH, position: Int) {\r\n        val item = filteredContent?.get(position)\r\n        if (item != null) {\r\n            holder.bind(item, position, \"normal\")\r\n        }\r\n    }",
  "start_lineno" : "28",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/605",
  "prompt" : "import android.view.View\noverride fun onBindViewHolder(holder: VH, position: Int) {\r\n        val item = filteredContent?.get(position)\r\n        if (item != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var content MutableList<Task>?\nvar filteredContent MutableList<Task>?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        val task = filteredContent?.get(position)\r\n        return task?.id?.hashCode()?.toLong() ?: 0\r\n    }",
  "context" : "override fun getItemId(position: Int): Long {\r\n        val task = filteredContent?.get(position)\r\n        return task?.id?.hashCode()?.toLong() ?: 0\r\n    }",
  "start_lineno" : "35",
  "methodName" : "getItemId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/606",
  "prompt" : "override fun getItemId(position: Int): Long {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var content MutableList<Task>?\nvar filteredContent MutableList<Task>?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n        }\r\n        filter()\r\n    }",
  "context" : "private fun updateTask(task: Task) {\r\n        if (taskType != task.type) {\r\n            return\r\n        }\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r\n        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n        }\r\n        filter()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "updateTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/607",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun updateTask(task: Task) {\r\n        if (taskType != task.type) {\r\n            return\r\n        }\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var content MutableList<Task>?\nvar filteredContent MutableList<Task>?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "75",
  "ground_truth" : "            }\r\n        }\r\n\r\n        this.notifyDataSetChanged()\r\n    }",
  "context" : "fun filter() {\r\n        if (this.viewModel.filterCount(taskType) == 0) {\r\n            filteredContent = content\r\n        } else {\r\n            filteredContent = ArrayList()\r\n            content?.let {\r\n                filteredContent?.addAll(this.viewModel.filter(it))\r\n            }\r\n        }\r\n\r\n        this.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "64",
  "methodName" : "filter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/608",
  "prompt" : "fun filter() {\r\n        if (this.viewModel.filterCount(taskType) == 0) {\r\n            filteredContent = content\r\n        } else {\r\n            filteredContent = ArrayList()\r\n            content?.let {\r\n                filteredContent?.addAll(this.viewModel.filter(it))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var content MutableList<Task>?\nvar filteredContent MutableList<Task>?\nvar context Context",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        this.content?.addAll(tasks)\r\n        filter()\r\n    }",
  "context" : "fun setTasks(tasks: List<Task>) {\r\n        this.content = ArrayList()\r\n        this.content?.addAll(tasks)\r\n        filter()\r\n    }",
  "start_lineno" : "77",
  "methodName" : "setTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/609",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nfun setTasks(tasks: List<Task>) {\r\n        this.content = ArrayList()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        this.data = data ?: emptyList()\r\n        filter()\r\n    }",
  "context" : "override fun updateUnfilteredData(data: List<Task>?) {\r\n        unfilteredData = data\r\n        this.data = data ?: emptyList()\r\n        filter()\r\n    }",
  "start_lineno" : "58",
  "methodName" : "updateUnfilteredData",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/610",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateUnfilteredData(data: List<Task>?) {\r\n        unfilteredData = data\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "        val binding = AdventureGuideMenuBannerBinding.inflate(parent.context.layoutInflater, parent, false)\r\n        return AdventureGuideViewHolder(binding.root)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        val binding = AdventureGuideMenuBannerBinding.inflate(parent.context.layoutInflater, parent, false)\r\n        return AdventureGuideViewHolder(binding.root)\r\n    }",
  "start_lineno" : "64",
  "methodName" : "onCreateViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/611",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "95",
  "ground_truth" : "        } else if (showAdventureGuide) {\r\n            return super.getItem(position - 1)\r\n        }\r\n        return super.getItem(position)\r\n    }",
  "context" : "override fun getItem(position: Int): Task? {\r\n        if (showAdventureGuide && position == 0) {\r\n            return null\r\n        } else if (showAdventureGuide) {\r\n            return super.getItem(position - 1)\r\n        }\r\n        return super.getItem(position)\r\n    }",
  "start_lineno" : "88",
  "methodName" : "getItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/612",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun getItem(position: Int): Task? {\r\n        if (showAdventureGuide && position == 0) {\r\n            return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "100",
  "ground_truth" : "        if (showAdventureGuide && position == 0) return 1\r\n        return super.getItemViewType(position)\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        if (showAdventureGuide && position == 0) return 1\r\n        return super.getItemViewType(position)\r\n    }",
  "start_lineno" : "97",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/613",
  "prompt" : "import android.view.View\noverride fun getItemViewType(position: Int): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            }\r\n        } else {\r\n            data = unfilteredData\r\n        }\r\n    }",
  "context" : "final override fun filter() {\r\n        val unfilteredData = this.unfilteredData ?: return\r\n\r\n        if (unfilteredData is OrderedRealmCollection) {\r\n            val query = viewModel.createQuery(unfilteredData)\r\n            if (query != null) {\r\n                data = query.findAll()\r\n            }\r\n        } else {\r\n            data = unfilteredData\r\n        }\r\n    }",
  "start_lineno" : "107",
  "methodName" : "filter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/614",
  "prompt" : "import io.realm.OrderedRealmCollection\nimport com.habitrpg.android.habitica.R\nfinal override fun filter() {\r\n        val unfilteredData = this.unfilteredData ?: return\r\n\r\n        if (unfilteredData is OrderedRealmCollection) {\r\n            val query = viewModel.createQuery(unfilteredData)\r\n            if (query != null) {\r\n                data = query.findAll()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var unfilteredData List<Task>?\nvar showAdventureGuide\nvar user User?\nvar taskDisplayMode String\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar progressBar ProgressBar\nvar countView TextView",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "        val completed = achievements.count { it.earned }\r\n        progressBar.max = achievements.size\r\n        progressBar.progress = completed\r\n        countView.text = \"$completed / ${achievements.size}\"\r\n    }",
  "context" : "fun update(user: User) {\r\n        val achievements = user.onboardingAchievements\r\n        val completed = achievements.count { it.earned }\r\n        progressBar.max = achievements.size\r\n        progressBar.progress = completed\r\n        countView.text = \"$completed / ${achievements.size}\"\r\n    }",
  "start_lineno" : "136",
  "methodName" : "update",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/615",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nfun update(user: User) {\r\n        val achievements = user.onboardingAchievements\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar showAdventureGuide Boolean\nvar inAppRewards List<ShopItem>?\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar purchaseCardEvents\nvar onShowPurchaseDialog\nvar goldGemsLeft Int?\nvar taskDisplayMode String\nval inAppRewardCount Int\nval customRewardCount Int\nval VIEWTYPE_CUSTOM_REWARD\nval VIEWTYPE_IN_APP_REWARD",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "            VIEWTYPE_CUSTOM_REWARD\r\n        } else {\r\n            VIEWTYPE_IN_APP_REWARD\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        return if ((customRewards != null && position < customRewardCount) || (customRewardCount == 0 && inAppRewardCount == 0)) {\r\n            VIEWTYPE_CUSTOM_REWARD\r\n        } else {\r\n            VIEWTYPE_IN_APP_REWARD\r\n        }\r\n    }",
  "start_lineno" : "111",
  "methodName" : "getItemViewType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/616",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if ((customRewards != null && position < customRewardCount) || (customRewardCount == 0 && inAppRewardCount == 0)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar showAdventureGuide Boolean\nvar inAppRewards List<ShopItem>?\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar purchaseCardEvents\nvar onShowPurchaseDialog\nvar goldGemsLeft Int?\nvar taskDisplayMode String\nval inAppRewardCount Int\nval customRewardCount Int\nval VIEWTYPE_CUSTOM_REWARD\nval VIEWTYPE_IN_APP_REWARD",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        if (viewModel.isPersonalBoard) {\r\n            rewardCount += inAppRewardCount\r\n        }\r\n        return rewardCount\r\n    }",
  "context" : "override fun getItemCount(): Int {\r\n        var rewardCount = customRewardCount\r\n        if (viewModel.isPersonalBoard) {\r\n            rewardCount += inAppRewardCount\r\n        }\r\n        return rewardCount\r\n    }",
  "start_lineno" : "123",
  "methodName" : "getItemCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/617",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun getItemCount(): Int {\r\n        var rewardCount = customRewardCount\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar showAdventureGuide Boolean\nvar inAppRewards List<ShopItem>?\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar purchaseCardEvents\nvar onShowPurchaseDialog\nvar goldGemsLeft Int?\nvar taskDisplayMode String\nval inAppRewardCount Int\nval customRewardCount Int\nval VIEWTYPE_CUSTOM_REWARD\nval VIEWTYPE_IN_APP_REWARD",
  "app_type" : "life",
  "end_lineno" : "134",
  "ground_truth" : "        this.customRewards = tasks\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun updateData(tasks: List<Task>?) {\r\n        this.customRewards = tasks\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "131",
  "methodName" : "updateData",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/618",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nfun updateData(tasks: List<Task>?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var user User?\nvar showAdventureGuide Boolean\nvar inAppRewards List<ShopItem>?\nvar errorButtonEvents\nvar taskScoreEvents\nvar checklistItemScoreEvents\nvar taskOpenEvents\nvar brokenTaskEvents\nvar adventureGuideOpenEvents\nvar purchaseCardEvents\nvar onShowPurchaseDialog\nvar goldGemsLeft Int?\nvar taskDisplayMode String\nval inAppRewardCount Int\nval customRewardCount Int\nval VIEWTYPE_CUSTOM_REWARD\nval VIEWTYPE_IN_APP_REWARD",
  "app_type" : "life",
  "end_lineno" : "145",
  "ground_truth" : "            }\r\n        }\r\n        this.inAppRewards = items\r\n        notifyDataSetChanged()\r\n    }",
  "context" : "fun updateItemRewards(items: List<ShopItem>) {\r\n        if (items.isNotEmpty()) {\r\n            if (Task::class.java.isAssignableFrom(items.first().javaClass)) {\r\n                // this catches a weird bug where the observable gets a list of tasks for no apparent reason.\r\n                return\r\n            }\r\n        }\r\n        this.inAppRewards = items\r\n        notifyDataSetChanged()\r\n    }",
  "start_lineno" : "136",
  "methodName" : "updateItemRewards",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt",
  "task_id" : "habitica-android/619",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.R\nfun updateItemRewards(items: List<ShopItem>) {\r\n        if (items.isNotEmpty()) {\r\n            if (Task::class.java.isAssignableFrom(items.first().javaClass)) {\r\n                // this catches a weird bug where the observable gets a list of tasks for no apparent reason.\r\n                return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var appConfigManager AppConfigManager\nval privacyPolicyLink\nval termsLink\nval androidSourceCodeLink\nval twitterLink\nvar versionNumberTappedCount\nval versionName String\nval versionCode Int\nvar binding FragmentAboutBinding?",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        intent.data = \"market://details?id=com.habitrpg.android.habitica\".toUri()\r\n        startActivity(intent)\r\n    }",
  "context" : "private fun openGooglePlay() {\r\n        val intent = Intent(Intent.ACTION_VIEW)\r\n        intent.data = \"market://details?id=com.habitrpg.android.habitica\".toUri()\r\n        startActivity(intent)\r\n    }",
  "start_lineno" : "36",
  "methodName" : "openGooglePlay",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt",
  "task_id" : "habitica-android/620",
  "prompt" : "import android.content.Intent\nprivate fun openGooglePlay() {\r\n        val intent = Intent(Intent.ACTION_VIEW)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var appConfigManager AppConfigManager\nval privacyPolicyLink\nval termsLink\nval androidSourceCodeLink\nval twitterLink\nvar versionNumberTappedCount\nval versionName String\nval versionCode Int\nvar binding FragmentAboutBinding?",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt",
  "task_id" : "habitica-android/621",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var appConfigManager AppConfigManager\nval privacyPolicyLink\nval termsLink\nval androidSourceCodeLink\nval twitterLink\nvar versionNumberTappedCount\nval versionName String\nval versionCode Int\nvar binding FragmentAboutBinding?",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "        val launchBrowser = Intent(Intent.ACTION_VIEW, uriUrl)\r\n        startActivity(launchBrowser)\r\n    }",
  "context" : "private fun openBrowserLink(url: String) {\r\n        val uriUrl = url.toUri()\r\n        val launchBrowser = Intent(Intent.ACTION_VIEW, uriUrl)\r\n        startActivity(launchBrowser)\r\n    }",
  "start_lineno" : "118",
  "methodName" : "openBrowserLink",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt",
  "task_id" : "habitica-android/622",
  "prompt" : "import androidx.core.net.toUri\nprivate fun openBrowserLink(url: String) {\r\n        val uriUrl = url.toUri()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar menuID Int\nvar adapter AchievementsAdapter\nvar useGridLayout",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        onRefresh()\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        adapter = AchievementsAdapter()\r\n        onRefresh()\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "53",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt",
  "task_id" : "habitica-android/623",
  "prompt" : "import com.habitrpg.android.habitica.ui.adapter.AchievementsAdapter\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        adapter = AchievementsAdapter()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar menuID Int\nvar adapter AchievementsAdapter\nvar useGridLayout",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "        super.onViewStateRestored(savedInstanceState)\r\n        useGridLayout = savedInstanceState?.getBoolean(\"useGridLayout\") ?: false\r\n    }",
  "context" : "override fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n        useGridLayout = savedInstanceState?.getBoolean(\"useGridLayout\") ?: false\r\n    }",
  "start_lineno" : "64",
  "methodName" : "onViewStateRestored",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt",
  "task_id" : "habitica-android/624",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar menuID Int\nvar adapter AchievementsAdapter\nvar useGridLayout",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        outState.putBoolean(\"useGridLayout\", useGridLayout)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putBoolean(\"useGridLayout\", useGridLayout)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt",
  "task_id" : "habitica-android/625",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar menuID Int\nvar adapter AchievementsAdapter\nvar useGridLayout",
  "app_type" : "life",
  "end_lineno" : "168",
  "ground_truth" : "            useGridLayout = !useGridLayout\r\n            mainActivity?.invalidateOptionsMenu()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == menuID) {\r\n            useGridLayout = !useGridLayout\r\n            mainActivity?.invalidateOptionsMenu()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "162",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt",
  "task_id" : "habitica-android/626",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == menuID) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar menuID Int\nvar adapter AchievementsAdapter\nvar useGridLayout",
  "app_type" : "life",
  "end_lineno" : "174",
  "ground_truth" : "            userRepository.retrieveAchievements()\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launchCatching {\r\n            userRepository.retrieveAchievements()\r\n        }\r\n    }",
  "start_lineno" : "170",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt",
  "task_id" : "habitica-android/627",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launchCatching {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts MutableList<String>\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        Analytics.sendNavigationEvent(this.javaClass.simpleName)\r\n\r\n        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }",
  "start_lineno" : "37",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt",
  "task_id" : "habitica-android/628",
  "prompt" : "import com.habitrpg.android.habitica.helpers.Analytics\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        Analytics.sendNavigationEvent(this.javaClass.simpleName)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts MutableList<String>\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }",
  "start_lineno" : "48",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt",
  "task_id" : "habitica-android/629",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts MutableList<String>\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "75",
  "ground_truth" : "        binding = null\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        binding = null\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "72",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt",
  "task_id" : "habitica-android/630",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts MutableList<String>\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r\n        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "77",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt",
  "task_id" : "habitica-android/631",
  "prompt" : "override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts List<String>\nvar shouldInitializeComponent\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt",
  "task_id" : "habitica-android/632",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts List<String>\nvar shouldInitializeComponent\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt",
  "task_id" : "habitica-android/633",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts List<String>\nvar shouldInitializeComponent\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        binding = null\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        binding = null\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt",
  "task_id" : "habitica-android/634",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isModal Boolean\nvar binding VB?\nvar tutorialRepository TutorialRepository\nvar tutorialStepIdentifier String?\nvar tutorialCanBeDeferred\nvar tutorialTexts List<String>\nvar shouldInitializeComponent\nval displayedClassName String?",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r\n        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "74",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt",
  "task_id" : "habitica-android/635",
  "prompt" : "override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "        super.onDestroyView()\r\n        binding = null\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n    }",
  "start_lineno" : "77",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/636",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        mainActivity?.showBackButton = showsBackButton\r\n        mainActivity?.supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        mainActivity?.showBackButton = showsBackButton\r\n        mainActivity?.supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n    }",
  "start_lineno" : "82",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/637",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "        mainActivity?.toolbar?.let { ToolbarColorHelper.colorizeToolbar(it, mainActivity) }\r\n        updateToolbarInteractivity()\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        mainActivity?.toolbar?.let { ToolbarColorHelper.colorizeToolbar(it, mainActivity) }\r\n        updateToolbarInteractivity()\r\n    }",
  "start_lineno" : "88",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/638",
  "prompt" : "import android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "            tabLayout?.tabMode = TabLayout.MODE_FIXED\r\n        } else {\r\n            tabLayout?.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun updateTabLayoutVisibility() {\r\n        if (this.usesTabLayout) {\r\n            tabLayout?.visibility = View.VISIBLE\r\n            tabLayout?.tabMode = TabLayout.MODE_FIXED\r\n        } else {\r\n            tabLayout?.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "100",
  "methodName" : "updateTabLayoutVisibility",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/639",
  "prompt" : "import com.google.android.material.tabs.TabLayout\nimport android.view.View\nprivate fun updateTabLayoutVisibility() {\r\n        if (this.usesTabLayout) {\r\n            tabLayout?.visibility = View.VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "109",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/640",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "125",
  "ground_truth" : "        val params = collapsingToolbar?.layoutParams as? AppBarLayout.LayoutParams\r\n        params?.scrollFlags = 0\r\n    }",
  "context" : "private fun disableToolbarScrolling() {\r\n        val params = collapsingToolbar?.layoutParams as? AppBarLayout.LayoutParams\r\n        params?.scrollFlags = 0\r\n    }",
  "start_lineno" : "122",
  "methodName" : "disableToolbarScrolling",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/641",
  "prompt" : "private fun disableToolbarScrolling() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "        val params = collapsingToolbar?.layoutParams as? AppBarLayout.LayoutParams\r\n        params?.scrollFlags = AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL or AppBarLayout.LayoutParams.SCROLL_FLAG_EXIT_UNTIL_COLLAPSED\r\n    }",
  "context" : "private fun enableToolbarScrolling() {\r\n        val params = collapsingToolbar?.layoutParams as? AppBarLayout.LayoutParams\r\n        params?.scrollFlags = AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL or AppBarLayout.LayoutParams.SCROLL_FLAG_EXIT_UNTIL_COLLAPSED\r\n    }",
  "start_lineno" : "127",
  "methodName" : "enableToolbarScrolling",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/642",
  "prompt" : "private fun enableToolbarScrolling() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar soundManager SoundManager\nvar showsBackButton Boolean\nval mainActivity\nval tabLayout\nval collapsingToolbar\nval toolbarAccessoryContainer\nval bottomNavigation\nvar usesTabLayout Boolean\nvar hidesToolbar Boolean\nvar usesBottomNavigation\nvar isTitleInteractive",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "            item?.icon?.setTintMode(PorterDuff.Mode.MULTIPLY)\r\n        }\r\n    }",
  "context" : "protected fun tintMenuIcon(item: MenuItem?) {\r\n        context?.getThemeColor(R.attr.headerTextColor)?.let {\r\n            item?.icon?.setTint(it)\r\n            item?.icon?.setTintMode(PorterDuff.Mode.MULTIPLY)\r\n        }\r\n    }",
  "start_lineno" : "132",
  "methodName" : "tintMenuIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt",
  "task_id" : "habitica-android/643",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\nprotected fun tintMenuIcon(item: MenuItem?) {\r\n        context?.getThemeColor(R.attr.headerTextColor)?.let {\r\n            item?.icon?.setTint(it)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "        customizationRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        customizationRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "156",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/644",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "        inflater.inflate(R.menu.menu_list_customizations, menu)\r\n\r\n        filterMenuItem = menu.findItem(R.id.action_filter)\r\n        updateFilterIcon()\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_list_customizations, menu)\r\n\r\n        filterMenuItem = menu.findItem(R.id.action_filter)\r\n        updateFilterIcon()\r\n    }",
  "start_lineno" : "161",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/645",
  "prompt" : "import android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "196",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : " @Suppress(\"ReturnCount\")\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                return true\r\n            }\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "186",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/646",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\n @Suppress(\"ReturnCount\")\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                return true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "251",
  "ground_truth" : "            true\r\n        } else {\r\n            filter.months.isNotEmpty() && !filter.months.contains(customization.customizationSet?.substringAfter('.'))\r\n        }\r\n    }",
  "context" : "private fun shouldSkip(\r\n        filter: CustomizationFilter,\r\n        ownedCustomizations: List<OwnedCustomization>,\r\n        customization: Customization\r\n    ): Boolean {\r\n        return if (filter.onlyPurchased && ownedCustomizations.find { it.key == customization.identifier } == null) {\r\n            true\r\n        } else {\r\n            filter.months.isNotEmpty() && !filter.months.contains(customization.customizationSet?.substringAfter('.'))\r\n        }\r\n    }",
  "start_lineno" : "241",
  "methodName" : "shouldSkip",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/647",
  "prompt" : "import com.habitrpg.android.habitica.models.user.OwnedCustomization\nimport com.habitrpg.android.habitica.models.inventory.Customization\nimport com.habitrpg.android.habitica.models.CustomizationFilter\nprivate fun shouldSkip(\r\n        filter: CustomizationFilter,\r\n        ownedCustomizations: List<OwnedCustomization>,\r\n        customization: Customization\r\n    ): Boolean {\r\n        return if (filter.onlyPurchased && ownedCustomizations.find { it.key == customization.identifier } == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "262",
  "ground_truth" : "        this.adapter.hairColor = user.preferences?.hair?.color\r\n        this.adapter.gemBalance = user.gemCount\r\n        this.adapter.avatar = user\r\n        adapter.notifyDataSetChanged()\r\n    }",
  "context" : "fun updateUser(user: User?) {\r\n        if (user == null) return\r\n        this.updateActiveCustomization(user)\r\n        ownedCustomizations.value = user.purchased?.customizations?.filter { it.type == this.type && it.purchased } ?: emptyList()\r\n        this.adapter.userSize = user.preferences?.size\r\n        this.adapter.hairColor = user.preferences?.hair?.color\r\n        this.adapter.gemBalance = user.gemCount\r\n        this.adapter.avatar = user\r\n        adapter.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "253",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/648",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Customization\nfun updateUser(user: User?) {\r\n        if (user == null) return\r\n        this.updateActiveCustomization(user)\r\n        ownedCustomizations.value = user.purchased?.customizations?.filter { it.type == this.type && it.purchased } ?: emptyList()\r\n        this.adapter.userSize = user.preferences?.size\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var filterMenuItem MenuItem?\nvar binding FragmentRefreshRecyclerviewBinding?\nvar customizationRepository CustomizationRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar type String?\nvar category String?\nvar activeCustomization String?\nvar adapter CustomizationRecyclerViewAdapter\nvar layoutManager FlexboxLayoutManager\nval currentFilter\nval ownedCustomizations",
  "app_type" : "life",
  "end_lineno" : "296",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "291",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt",
  "task_id" : "habitica-android/649",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar type String?\nvar category String?\nvar activeEquipment String?\nvar adapter CustomizationEquipmentRecyclerViewAdapter\nvar layoutManager GridLayoutManager",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            inventoryRepository.getEquipmentType(type, category ?: \"\").collect {\r\n                adapter.setEquipment(it)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun loadEquipment() {\r\n        val type = this.type ?: return\r\n        lifecycleScope.launchCatching {\r\n            inventoryRepository.getEquipmentType(type, category ?: \"\").collect {\r\n                adapter.setEquipment(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "loadEquipment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt",
  "task_id" : "habitica-android/650",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.lifecycleScope\nprivate fun loadEquipment() {\r\n        val type = this.type ?: return\r\n        lifecycleScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar type String?\nvar category String?\nvar activeEquipment String?\nvar adapter CustomizationEquipmentRecyclerViewAdapter\nvar layoutManager GridLayoutManager",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager.spanCount = spanCount\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        val itemWidth = context?.resources?.getDimension(R.dimen.customization_width) ?: 0F\r\n        var spanCount = (width / itemWidth).toInt()\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager.spanCount = spanCount\r\n    }",
  "start_lineno" : "114",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt",
  "task_id" : "habitica-android/651",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        val itemWidth = context?.resources?.getDimension(R.dimen.customization_width) ?: 0F\r\n        var spanCount = (width / itemWidth).toInt()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar type String?\nvar category String?\nvar activeEquipment String?\nvar adapter CustomizationEquipmentRecyclerViewAdapter\nvar layoutManager GridLayoutManager",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "        this.adapter.gemBalance = user?.gemCount ?: 0\r\n        adapter.notifyDataSetChanged()\r\n    }",
  "context" : "fun updateUser(user: User?) {\r\n        this.updateActiveCustomization(user)\r\n        this.adapter.gemBalance = user?.gemCount ?: 0\r\n        adapter.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "123",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt",
  "task_id" : "habitica-android/652",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nfun updateUser(user: User?) {\r\n        this.updateActiveCustomization(user)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar type String?\nvar category String?\nvar activeEquipment String?\nvar adapter CustomizationEquipmentRecyclerViewAdapter\nvar layoutManager GridLayoutManager",
  "app_type" : "life",
  "end_lineno" : "151",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "146",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt",
  "task_id" : "habitica-android/653",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar inventoryRepository InventoryRepository\nvar binding FragmentComposeScrollingBinding?\nvar showCustomization\nval battleGearWeapon\nval costumeWeapon",
  "app_type" : "life",
  "end_lineno" : "128",
  "ground_truth" : "                type,\r\n                category ?: \"\"\r\n            )\r\n        )\r\n    }",
  "context" : "private fun displayCustomizationFragment(type: String, category: String?) {\r\n        MainNavigationController.navigate(\r\n            AvatarOverviewFragmentDirections.openAvatarDetail(\r\n                type,\r\n                category ?: \"\"\r\n            )\r\n        )\r\n    }",
  "start_lineno" : "121",
  "methodName" : "displayCustomizationFragment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt",
  "task_id" : "habitica-android/654",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MainNavigationController\nprivate fun displayCustomizationFragment(type: String, category: String?) {\r\n        MainNavigationController.navigate(\r\n            AvatarOverviewFragmentDirections.openAvatarDetail(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar inventoryRepository InventoryRepository\nvar binding FragmentComposeScrollingBinding?\nvar showCustomization\nval battleGearWeapon\nval costumeWeapon",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_share_avatar, menu)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_share_avatar, menu)\r\n    }",
  "start_lineno" : "138",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt",
  "task_id" : "habitica-android/655",
  "prompt" : "import android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar inventoryRepository InventoryRepository\nvar binding FragmentComposeScrollingBinding?\nvar showCustomization\nval battleGearWeapon\nval costumeWeapon",
  "app_type" : "life",
  "end_lineno" : "168",
  "ground_truth" : "\r\n        lifecycleScope.launchCatching {\r\n            userRepository.updateUser(\"preferences.size\", newSize)\r\n        }\r\n    }",
  "context" : "override fun onItemSelected(parent: AdapterView<*>, view: View?, position: Int, id: Long) {\r\n        val newSize: String = if (position == 0) \"slim\" else \"broad\"\r\n\r\n        lifecycleScope.launchCatching {\r\n            userRepository.updateUser(\"preferences.size\", newSize)\r\n        }\r\n    }",
  "start_lineno" : "162",
  "methodName" : "onItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt",
  "task_id" : "habitica-android/656",
  "prompt" : "import android.widget.AdapterView\nimport android.view.View\noverride fun onItemSelected(parent: AdapterView<*>, view: View?, position: Int, id: Long) {\r\n        val newSize: String = if (position == 0) \"slim\" else \"broad\"\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "11",
  "ground_truth" : "        showCustomization = false\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        showCustomization = false\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "start_lineno" : "8",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\EquipmentOverviewFragment.kt",
  "task_id" : "habitica-android/657",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar binding FragmentRefreshRecyclerviewBinding?\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar type String?\nvar equippedGear String?\nvar isCostume Boolean?\nvar adapter EquipmentRecyclerViewAdapter",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "112",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\equipment\\EquipmentDetailFragment.kt",
  "task_id" : "habitica-android/658",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar binding FragmentRefreshRecyclerviewBinding?\nvar userViewModel MainUserViewModel\nvar reviewManager ReviewManager\nvar type String?\nvar equippedGear String?\nvar isCostume Boolean?\nvar adapter EquipmentRecyclerViewAdapter",
  "app_type" : "life",
  "end_lineno" : "122",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "117",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\equipment\\EquipmentDetailFragment.kt",
  "task_id" : "habitica-android/659",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "87",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/660",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "\r\n        binding?.recyclerView?.isNestedScrollingEnabled = true\r\n\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        when {\r\n            this.isHatching -> {\r\n                dialog?.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            }\r\n            this.isFeeding -> {\r\n                dialog?.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            }\r\n            else -> {\r\n            }\r\n        }\r\n\r\n        binding?.recyclerView?.isNestedScrollingEnabled = true\r\n\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/661",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.Window\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        when {\r\n            this.isHatching -> {\r\n                dialog?.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            }\r\n            this.isFeeding -> {\r\n                dialog?.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            }\r\n            else -> {\r\n            }\r\n        }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "261",
  "ground_truth" : "                )\r\n            )\r\n            onFeedResult?.invoke(result)\r\n        }\r\n    }",
  "context" : "private fun feedPet(food: Food) {\r\n        val pet = feedingPet ?: return\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            val result = feedPetUseCase.callInteractor(\r\n                FeedPetUseCase.RequestValues(\r\n                    pet,\r\n                    food,\r\n                    activity\r\n                )\r\n            )\r\n            onFeedResult?.invoke(result)\r\n        }\r\n    }",
  "start_lineno" : "248",
  "methodName" : "feedPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/662",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\nimport com.habitrpg.android.habitica.interactors.FeedPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun feedPet(food: Food) {\r\n        val pet = feedingPet ?: return\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            val result = feedPetUseCase.callInteractor(\r\n                FeedPetUseCase.RequestValues(\r\n                    pet,\r\n                    food,\r\n                    activity\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "272",
  "ground_truth" : "            dialog?.window?.attributes = params\r\n        }\r\n\r\n        super.onResume()\r\n    }",
  "context" : "override fun onResume() {\r\n        if ((this.isHatching || this.isFeeding) && dialog?.window != null) {\r\n            val params = dialog?.window?.attributes\r\n            params?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n            params?.verticalMargin = 60f\r\n            dialog?.window?.attributes = params\r\n        }\r\n\r\n        super.onResume()\r\n    }",
  "start_lineno" : "263",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/663",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onResume() {\r\n        if ((this.isHatching || this.isFeeding) && dialog?.window != null) {\r\n            val params = dialog?.window?.attributes\r\n            params?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n            params?.verticalMargin = 60f\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "277",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, this.itemType)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, this.itemType)\r\n    }",
  "start_lineno" : "274",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/664",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar itemTypeText String?\nvar isHatching Boolean\nvar isFeeding Boolean\nvar onFeedResult\nvar hatchingItem Item?\nvar feedingPet Pet?\nvar user User?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsDialogBinding?\nval ITEM_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "291",
  "ground_truth" : "                    activity\r\n                )\r\n            )\r\n        }\r\n    }",
  "context" : "private fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        dismiss()\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r\n                    activity\r\n                )\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "279",
  "methodName" : "hatchPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt",
  "task_id" : "habitica-android/665",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        dismiss()\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "87",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/666",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "        }\r\n        fragment.isHatching = true\r\n        fragment.isFeeding = false\r\n        parentFragmentManager.let { fragment.show(it, \"hatchingDialog\") }\r\n    }",
  "context" : "private fun showHatchingDialog(item: Item) {\r\n        val fragment = ItemDialogFragment()\r\n        if (item is Egg) {\r\n            fragment.itemType = \"hatchingPotions\"\r\n            fragment.hatchingItem = item\r\n        } else {\r\n            fragment.itemType = \"eggs\"\r\n            fragment.hatchingItem = item\r\n        }\r\n        fragment.isHatching = true\r\n        fragment.isFeeding = false\r\n        parentFragmentManager.let { fragment.show(it, \"hatchingDialog\") }\r\n    }",
  "start_lineno" : "211",
  "methodName" : "showHatchingDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/667",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Egg\nprivate fun showHatchingDialog(item: Item) {\r\n        val fragment = ItemDialogFragment()\r\n        if (item is Egg) {\r\n            fragment.itemType = \"hatchingPotions\"\r\n            fragment.hatchingItem = item\r\n        } else {\r\n            fragment.itemType = \"eggs\"\r\n            fragment.hatchingItem = item\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "229",
  "ground_truth" : "        outState.putString(ITEM_TYPE_KEY, this.itemType)\r\n        outState.putString(ITEM_TYPE_TEXT_KEY, this.itemTypeText)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, this.itemType)\r\n        outState.putString(ITEM_TYPE_TEXT_KEY, this.itemTypeText)\r\n    }",
  "start_lineno" : "225",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/668",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "237",
  "ground_truth" : "        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "231",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/669",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "251",
  "ground_truth" : "                    )\r\n                )\r\n            }\r\n        }\r\n    }",
  "context" : "private fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        (activity as? BaseActivity)?.let {\r\n            lifecycleScope.launchCatching {\r\n                hatchPetUseCase.callInteractor(\r\n                    HatchPetUseCase.RequestValues(\r\n                        potion,\r\n                        egg,\r\n                        it\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "239",
  "methodName" : "hatchPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/670",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.ui.activities.BaseActivity\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nimport android.app.Activity\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        (activity as? BaseActivity)?.let {\r\n            lifecycleScope.launchCatching {\r\n                hatchPetUseCase.callInteractor(\r\n                    HatchPetUseCase.RequestValues(\r\n                        potion,\r\n                        egg,\r\n                        it\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "332",
  "ground_truth" : "        val intent = Intent(activity, SkillMemberActivity::class.java)\r\n        memberSelectionResult.launch(intent)\r\n    }",
  "context" : "private fun onSpecialItemSelected(specialItem: SpecialItem) {\r\n        selectedSpecialItem = specialItem\r\n        val intent = Intent(activity, SkillMemberActivity::class.java)\r\n        memberSelectionResult.launch(intent)\r\n    }",
  "start_lineno" : "328",
  "methodName" : "onSpecialItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/671",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.SpecialItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nprivate fun onSpecialItemSelected(specialItem: SpecialItem) {\r\n        selectedSpecialItem = specialItem\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "349",
  "ground_truth" : "        lifecycleScope.launchCatching {\r\n            userRepository.useSkill(specialItem.key, specialItem.target, memberID)\r\n            displaySpecialItemResult(specialItem)\r\n        }\r\n    }",
  "context" : "private fun useSpecialItem(specialItem: SpecialItem?, memberID: String? = null) {\r\n        if (specialItem == null || memberID == null) {\r\n            return\r\n        }\r\n        lifecycleScope.launchCatching {\r\n            userRepository.useSkill(specialItem.key, specialItem.target, memberID)\r\n            displaySpecialItemResult(specialItem)\r\n        }\r\n    }",
  "start_lineno" : "341",
  "methodName" : "useSpecialItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/672",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.SpecialItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nprivate fun useSpecialItem(specialItem: SpecialItem?, memberID: String? = null) {\r\n        if (specialItem == null || memberID == null) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar hatchPetUseCase HatchPetUseCase\nvar userViewModel MainUserViewModel\nvar user User?\nvar adapter ItemRecyclerAdapter?\nvar itemType String?\nvar transformationItems MutableList<OwnedItem>\nvar itemTypeText String?\nvar selectedSpecialItem SpecialItem?\nvar layoutManager androidx?.recyclerview?.widget?.LinearLayoutManager?\nvar binding FragmentItemsBinding?\nval memberSelectionResult\nval ITEM_TYPE_KEY\nval ITEM_TYPE_TEXT_KEY",
  "app_type" : "life",
  "end_lineno" : "364",
  "ground_truth" : "            )\r\n        }\r\n\r\n        loadItems()\r\n    }",
  "context" : "private fun displaySpecialItemResult(specialItem: SpecialItem?) {\r\n        if (!isAdded) return\r\n\r\n        val activity = activity as? MainActivity\r\n        activity?.let {\r\n            HabiticaSnackbar.showSnackbar(\r\n                it.snackbarContainer,\r\n                context?.getString(R.string.used_skill_without_mana, specialItem?.text),\r\n                HabiticaSnackbar.SnackbarDisplayType.BLUE\r\n            )\r\n        }\r\n\r\n        loadItems()\r\n    }",
  "start_lineno" : "351",
  "methodName" : "displaySpecialItemResult",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt",
  "task_id" : "habitica-android/673",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.HabiticaSnackbar\nimport com.habitrpg.android.habitica.ui.activities.MainActivity\nimport com.habitrpg.android.habitica.models.inventory.SpecialItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displaySpecialItemResult(specialItem: SpecialItem?) {\r\n        if (!isAdded) return\r\n\r\n        val activity = activity as? MainActivity\r\n        activity?.let {\r\n            HabiticaSnackbar.showSnackbar(\r\n                it.snackbarContainer,\r\n                context?.getString(R.string.used_skill_without_mana, specialItem?.text),\r\n                HabiticaSnackbar.SnackbarDisplayType.BLUE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "24",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemsFragment.kt",
  "task_id" : "habitica-android/674",
  "prompt" : "import com.google.android.material.tabs.TabLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "                \"special\" -> 4\r\n                else -> 0\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.viewPager?.currentItem = 0\r\n        setViewPagerAdapter()\r\n\r\n        arguments?.let {\r\n            val args = ItemsFragmentArgs.fromBundle(it)\r\n            binding?.viewPager?.currentItem = when (args.itemType) {\r\n                \"hatchingPotions\" -> 1\r\n                \"food\" -> 2\r\n                \"quests\" -> 3\r\n                \"special\" -> 4\r\n                else -> 0\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "34",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemsFragment.kt",
  "task_id" : "habitica-android/675",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.viewPager?.currentItem = 0\r\n        setViewPagerAdapter()\r\n\r\n        arguments?.let {\r\n            val args = ItemsFragmentArgs.fromBundle(it)\r\n            binding?.viewPager?.currentItem = when (args.itemType) {\r\n                \"hatchingPotions\" -> 1\r\n                \"food\" -> 2\r\n                \"quests\" -> 3\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "            3 -> mainActivity?.getString(R.string.quests)\r\n            4 -> mainActivity?.getString(R.string.special)\r\n            else -> \"\"\r\n        } ?: \"\"\r\n    }",
  "context" : "private fun getPageTitle(position: Int): String {\r\n        return when (position) {\r\n            0 -> mainActivity?.getString(R.string.eggs)\r\n            1 -> mainActivity?.getString(R.string.hatching_potions)\r\n            2 -> mainActivity?.getString(R.string.food)\r\n            3 -> mainActivity?.getString(R.string.quests)\r\n            4 -> mainActivity?.getString(R.string.special)\r\n            else -> \"\"\r\n        } ?: \"\"\r\n    }",
  "start_lineno" : "92",
  "methodName" : "getPageTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemsFragment.kt",
  "task_id" : "habitica-android/676",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun getPageTitle(position: Int): String {\r\n        return when (position) {\r\n            0 -> mainActivity?.getString(R.string.eggs)\r\n            1 -> mainActivity?.getString(R.string.hatching_potions)\r\n            2 -> mainActivity?.getString(R.string.food)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        shopIdentifier = Shop.MARKET\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        shopIdentifier = Shop.MARKET\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\MarketFragment.kt",
  "task_id" : "habitica-android/677",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "        shopIdentifier = Shop.QUEST_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        shopIdentifier = Shop.QUEST_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "14",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\QuestShopFragment.kt",
  "task_id" : "habitica-android/678",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "            userRepository.getQuestAchievements().collect {\r\n                adapter?.completedQuests = it.map { it.questKey }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        lifecycleScope.launchCatching {\r\n            userRepository.getQuestAchievements().collect {\r\n                adapter?.completedQuests = it.map { it.questKey }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "23",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\QuestShopFragment.kt",
  "task_id" : "habitica-android/679",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.lifecycleScope\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        lifecycleScope.launchCatching {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        shopIdentifier = Shop.SEASONAL_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        shopIdentifier = Shop.SEASONAL_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\SeasonalShopFragment.kt",
  "task_id" : "habitica-android/680",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "82",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/681",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "        toolbarAccessoryContainer?.removeView(currencyView)\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        inventoryRepository.close()\r\n        socialRepository.close()\r\n        toolbarAccessoryContainer?.removeView(currencyView)\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "91",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/682",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onDestroyView() {\r\n        inventoryRepository.close()\r\n        socialRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "240",
  "ground_truth" : "                gems.value?.let { CurrencyText(currency = \"gems\", value = it) }\r\n                gold.value?.let { CurrencyText(currency = \"gold\", value = it) }\r\n            }\r\n        }\r\n    }",
  "context" : "open fun initializeCurrencyViews() {\r\n        currencyView.setContent {\r\n            Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                gems.value?.let { CurrencyText(currency = \"gems\", value = it) }\r\n                gold.value?.let { CurrencyText(currency = \"gold\", value = it) }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "233",
  "methodName" : "initializeCurrencyViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/683",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Arrangement\nimport android.view.View\nopen fun initializeCurrencyViews() {\r\n        currencyView.setContent {\r\n            Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "299",
  "ground_truth" : "            loadShopInventory()\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (shop == null) {\r\n            loadShopInventory()\r\n        }\r\n    }",
  "start_lineno" : "294",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/684",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (shop == null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "390",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(SHOP_IDENTIFIER_KEY, this.shopIdentifier)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(SHOP_IDENTIFIER_KEY, this.shopIdentifier)\r\n    }",
  "start_lineno" : "387",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/685",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "404",
  "ground_truth" : "            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n        layoutManager?.requestLayout()\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        context?.let { context ->\r\n            val itemWidth: Float = context.resources.getDimension(R.dimen.reward_width)\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n        layoutManager?.requestLayout()\r\n    }",
  "start_lineno" : "392",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/686",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        context?.let { context ->\r\n            val itemWidth: Float = context.resources.getDimension(R.dimen.reward_width)\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val currencyView ComposeView\nvar adapter ShopRecyclerAdapter?\nvar shopIdentifier String?\nvar shop Shop?\nval hourglasses\nval gems\nval gold\nvar inventoryRepository InventoryRepository\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar layoutManager GridLayoutManager?\nvar gearCategories MutableList<ShopCategory>?\nvar binding FragmentRefreshRecyclerviewBinding?\nval SHOP_IDENTIFIER_KEY",
  "app_type" : "life",
  "end_lineno" : "413",
  "ground_truth" : "            alert.setMessage(getString(R.string.class_changed_description, selectedClass))\r\n            alert.addButton(getString(R.string.complete_tutorial), true) { _, _ -> alert.dismiss() }\r\n            alert.show()\r\n        }\r\n    }",
  "context" : "private fun displayClassChanged(selectedClass: String) {\r\n        context?.let { context ->\r\n            val alert = HabiticaAlertDialog(context)\r\n            alert.setMessage(getString(R.string.class_changed_description, selectedClass))\r\n            alert.addButton(getString(R.string.complete_tutorial), true) { _, _ -> alert.dismiss() }\r\n            alert.show()\r\n        }\r\n    }",
  "start_lineno" : "406",
  "methodName" : "displayClassChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt",
  "task_id" : "habitica-android/687",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nprivate fun displayClassChanged(selectedClass: String) {\r\n        context?.let { context ->\r\n            val alert = HabiticaAlertDialog(context)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "        shopIdentifier = Shop.TIME_TRAVELERS_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        shopIdentifier = Shop.TIME_TRAVELERS_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "19",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\TimeTravelersShopFragment.kt",
  "task_id" : "habitica-android/688",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "            hourglasses.value?.let { CurrencyText(currency = \"hourglasses\", value = it) }\r\n        }\r\n    }",
  "context" : "override fun initializeCurrencyViews() {\r\n        currencyView.setContent {\r\n            hourglasses.value?.let { CurrencyText(currency = \"hourglasses\", value = it) }\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "initializeCurrencyViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\TimeTravelersShopFragment.kt",
  "task_id" : "habitica-android/689",
  "prompt" : "import android.view.View\noverride fun initializeCurrencyViews() {\r\n        currencyView.setContent {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar adapter MountDetailRecyclerAdapter?\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        this.usesTabLayout = false\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/690",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar adapter MountDetailRecyclerAdapter?\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/691",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar adapter MountDetailRecyclerAdapter?\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }",
  "start_lineno" : "114",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/692",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar adapter MountDetailRecyclerAdapter?\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "132",
  "ground_truth" : "            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n        layoutManager?.requestLayout()\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        context?.resources?.let {\r\n            resources\r\n            val itemWidth: Float = resources.getDimension(R.dimen.mount_width)\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n        layoutManager?.requestLayout()\r\n    }",
  "start_lineno" : "119",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/693",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        context?.resources?.let {\r\n            resources\r\n            val itemWidth: Float = resources.getDimension(R.dimen.mount_width)\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar adapter MountDetailRecyclerAdapter?\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "177",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "172",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/694",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        if (savedInstanceState != null) {\r\n            this.animalType = savedInstanceState.getString(ANIMAL_TYPE_KEY, \"\")\r\n        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r\n        if (savedInstanceState != null) {\r\n            this.animalType = savedInstanceState.getString(ANIMAL_TYPE_KEY, \"\")\r\n        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "71",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/695",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "83",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/696",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "        super.onResume()\r\n        mainActivity?.title = animalType\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        mainActivity?.title = animalType\r\n    }",
  "start_lineno" : "158",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/697",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "166",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }",
  "start_lineno" : "163",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/698",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "180",
  "ground_truth" : "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = R.dimen.pet_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }",
  "start_lineno" : "168",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/699",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = R.dimen.pet_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var inventoryRepository InventoryRepository\nvar feedPetUseCase FeedPetUseCase\nvar userViewModel MainUserViewModel\nval adapter PetDetailRecyclerAdapter\nvar animalType String?\nvar animalGroup String?\nvar animalColor String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar reviewManager ReviewManager\nvar binding FragmentRefreshRecyclerviewBinding?\nval ANIMAL_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "268",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt",
  "task_id" : "habitica-android/700",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?\nval viewModel StableViewModel",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "28",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableFragment.kt",
  "task_id" : "habitica-android/701",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?\nval viewModel StableViewModel",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "\r\n        setViewPagerAdapter()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding?.viewPager?.currentItem = 0\r\n\r\n        setViewPagerAdapter()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableFragment.kt",
  "task_id" : "habitica-android/702",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding?.viewPager?.currentItem = 0\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?\nval viewModel StableViewModel",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "            0 -> mainActivity?.getString(R.string.pets)\r\n            1 -> mainActivity?.getString(R.string.mounts)\r\n            else -> \"\"\r\n        } ?: \"\"\r\n    }",
  "context" : "private fun getPageTitle(position: Int): String {\r\n        return when (position) {\r\n            0 -> mainActivity?.getString(R.string.pets)\r\n            1 -> mainActivity?.getString(R.string.mounts)\r\n            else -> \"\"\r\n        } ?: \"\"\r\n    }",
  "start_lineno" : "71",
  "methodName" : "getPageTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableFragment.kt",
  "task_id" : "habitica-android/703",
  "prompt" : "private fun getPageTitle(position: Int): String {\r\n        return when (position) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel StableViewModel\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar adapter StableRecyclerAdapter?\nvar itemTypeText String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ITEM_TYPE_KEY\nval HEADER_VIEW_TYPE",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt",
  "task_id" : "habitica-android/704",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel StableViewModel\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar adapter StableRecyclerAdapter?\nvar itemTypeText String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ITEM_TYPE_KEY\nval HEADER_VIEW_TYPE",
  "app_type" : "life",
  "end_lineno" : "124",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, viewModel.itemType)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, viewModel.itemType)\r\n    }",
  "start_lineno" : "121",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt",
  "task_id" : "habitica-android/705",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel StableViewModel\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar adapter StableRecyclerAdapter?\nvar itemTypeText String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ITEM_TYPE_KEY\nval HEADER_VIEW_TYPE",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = if (viewModel.itemType == \"pets\") R.dimen.pet_width else R.dimen.mount_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }",
  "start_lineno" : "126",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt",
  "task_id" : "habitica-android/706",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = if (viewModel.itemType == \"pets\") R.dimen.pet_width else R.dimen.mount_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel StableViewModel\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar adapter StableRecyclerAdapter?\nvar itemTypeText String?\nvar layoutManager androidx?.recyclerview?.widget?.GridLayoutManager?\nvar binding FragmentRefreshRecyclerviewBinding?\nval ITEM_TYPE_KEY\nval HEADER_VIEW_TYPE",
  "app_type" : "life",
  "end_lineno" : "171",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "166",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt",
  "task_id" : "habitica-android/707",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "236",
  "ground_truth" : "                function()\r\n                delay(delayFunc())\r\n            }\r\n        }\r\n    }",
  "context" : "private fun createUpdatingJob(\r\n        key: String,\r\n        endingCondition: () -> Boolean,\r\n        delayFunc: () -> Duration,\r\n        function: () -> Unit\r\n    ) {\r\n        function()\r\n        if (updatingJobs[key]?.isActive == true) {\r\n            updatingJobs[key]?.cancel()\r\n        }\r\n        updatingJobs[key] = lifecycleScope.launch(Dispatchers.Main) {\r\n            while (endingCondition()) {\r\n                function()\r\n                delay(delayFunc())\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "220",
  "methodName" : "createUpdatingJob",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/708",
  "prompt" : "import kotlin.time.Duration\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun createUpdatingJob(\r\n        key: String,\r\n        endingCondition: () -> Boolean,\r\n        delayFunc: () -> Duration,\r\n        function: () -> Unit\r\n    ) {\r\n        function()\r\n        if (updatingJobs[key]?.isActive == true) {\r\n            updatingJobs[key]?.cancel()\r\n        }\r\n        updatingJobs[key] = lifecycleScope.launch(Dispatchers.Main) {\r\n            while (endingCondition()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "361",
  "ground_truth" : "        userRepository.close()\r\n        updatingJobs.forEach { it.value.cancel() }\r\n        updatingJobs.clear()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        socialRepository.close()\r\n        inventoryRepository.close()\r\n        userRepository.close()\r\n        updatingJobs.forEach { it.value.cancel() }\r\n        updatingJobs.clear()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "354",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/709",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onDestroy() {\r\n        socialRepository.close()\r\n        inventoryRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "589",
  "ground_truth" : "            // notification item was clicked\r\n            val intent = Intent(activity, NotificationsActivity::class.java)\r\n            notificationClickResult.launch(intent)\r\n        }\r\n    }",
  "context" : "private fun startNotificationsActivity() {\r\n        if (!isTabletUI) {\r\n            closeDrawer()\r\n        }\r\n\r\n        val activity = activity as? MainActivity\r\n        if (activity != null) {\r\n            // NotificationsActivity will return a result intent with a notificationId if a\r\n            // notification item was clicked\r\n            val intent = Intent(activity, NotificationsActivity::class.java)\r\n            notificationClickResult.launch(intent)\r\n        }\r\n    }",
  "start_lineno" : "577",
  "methodName" : "startNotificationsActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/710",
  "prompt" : "import com.habitrpg.android.habitica.ui.activities.NotificationsActivity\nimport com.habitrpg.android.habitica.ui.activities.MainActivity\nimport android.app.Activity\nprivate fun startNotificationsActivity() {\r\n        if (!isTabletUI) {\r\n            closeDrawer()\r\n        }\r\n\r\n        val activity = activity as? MainActivity\r\n        if (activity != null) {\r\n            // NotificationsActivity will return a result intent with a notificationId if a\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "641",
  "ground_truth" : "            drawerLayout?.openDrawer(containerView)\r\n        } else {\r\n            containerView?.isVisible = true\r\n        }\r\n    }",
  "context" : "fun openDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r\n            drawerLayout?.openDrawer(containerView)\r\n        } else {\r\n            containerView?.isVisible = true\r\n        }\r\n    }",
  "start_lineno" : "634",
  "methodName" : "openDrawer",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/711",
  "prompt" : "import androidx.drawerlayout.widget.DrawerLayout\nimport android.view.View\nfun openDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "650",
  "ground_truth" : "            drawerLayout?.closeDrawer(containerView)\r\n        } else {\r\n            containerView?.isVisible = false\r\n        }\r\n    }",
  "context" : "fun closeDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r\n            drawerLayout?.closeDrawer(containerView)\r\n        } else {\r\n            containerView?.isVisible = false\r\n        }\r\n    }",
  "start_lineno" : "643",
  "methodName" : "closeDrawer",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/712",
  "prompt" : "import androidx.drawerlayout.widget.DrawerLayout\nimport android.view.View\nfun closeDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "663",
  "ground_truth" : "            }\r\n        } else {\r\n            containerView?.isVisible = containerView?.isVisible != true\r\n        }\r\n    }",
  "context" : "fun toggleDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r\n            if (drawerLayout?.isDrawerOpen(containerView) == true) {\r\n                drawerLayout?.closeDrawer(containerView)\r\n            } else {\r\n                drawerLayout?.openDrawer(containerView)\r\n            }\r\n        } else {\r\n            containerView?.isVisible = containerView?.isVisible != true\r\n        }\r\n    }",
  "start_lineno" : "652",
  "methodName" : "toggleDrawer",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/713",
  "prompt" : "import androidx.drawerlayout.widget.DrawerLayout\nimport android.view.View\nfun toggleDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r\n            if (drawerLayout?.isDrawerOpen(containerView) == true) {\r\n                drawerLayout?.closeDrawer(containerView)\r\n            } else {\r\n                drawerLayout?.openDrawer(containerView)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "674",
  "ground_truth" : "            binding?.toolbarTitle?.text = name\r\n        } else {\r\n            binding?.toolbarTitle?.text = context?.getString(R.string.app_name)\r\n        }\r\n    }",
  "context" : "private fun setDisplayName(name: String?) {\r\n        if (!name.isNullOrEmpty()) {\r\n            binding?.toolbarTitle?.text = name\r\n        } else {\r\n            binding?.toolbarTitle?.text = context?.getString(R.string.app_name)\r\n        }\r\n    }",
  "start_lineno" : "668",
  "methodName" : "setDisplayName",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/714",
  "prompt" : "private fun setDisplayName(name: String?) {\r\n        if (!name.isNullOrEmpty()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "683",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition)\r\n    }",
  "start_lineno" : "680",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/715",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "692",
  "ground_truth" : "        } else {\r\n            binding?.notificationsBadge?.visibility = View.VISIBLE\r\n            binding?.notificationsBadge?.text = unreadNotifications.toString()\r\n        }\r\n    }",
  "context" : "private fun setNotificationsCount(unreadNotifications: Int) {\r\n        if (unreadNotifications == 0) {\r\n            binding?.notificationsBadge?.visibility = View.GONE\r\n        } else {\r\n            binding?.notificationsBadge?.visibility = View.VISIBLE\r\n            binding?.notificationsBadge?.text = unreadNotifications.toString()\r\n        }\r\n    }",
  "start_lineno" : "685",
  "methodName" : "setNotificationsCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/716",
  "prompt" : "import android.view.View\nprivate fun setNotificationsCount(unreadNotifications: Int) {\r\n        if (unreadNotifications == 0) {\r\n            binding?.notificationsBadge?.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "706",
  "ground_truth" : "            val bg = binding?.notificationsBadge?.background as? GradientDrawable\r\n            bg?.color = ColorStateList.valueOf(color)\r\n            binding?.notificationsBadge?.setTextColor(ContextCompat.getColor(it, R.color.white))\r\n        }\r\n    }",
  "context" : "private fun setNotificationsSeen(allSeen: Boolean) {\r\n        context?.let {\r\n            val color = if (allSeen) {\r\n                ContextCompat.getColor(it, R.color.gray_200)\r\n            } else {\r\n                it.getThemeColor(R.attr.colorAccent)\r\n            }\r\n\r\n            val bg = binding?.notificationsBadge?.background as? GradientDrawable\r\n            bg?.color = ColorStateList.valueOf(color)\r\n            binding?.notificationsBadge?.setTextColor(ContextCompat.getColor(it, R.color.white))\r\n        }\r\n    }",
  "start_lineno" : "694",
  "methodName" : "setNotificationsSeen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/717",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport androidx.core.content.ContextCompat\nprivate fun setNotificationsSeen(allSeen: Boolean) {\r\n        context?.let {\r\n            val color = if (allSeen) {\r\n                ContextCompat.getColor(it, R.color.gray_200)\r\n            } else {\r\n                it.getThemeColor(R.attr.colorAccent)\r\n            }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DrawerMainBinding?\nvar socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userRepository UserRepository\nvar configManager AppConfigManager\nvar contentRepository ContentRepository\nvar sharedPreferences SharedPreferences\nvar userViewModel MainUserViewModel\nvar activePromo HabiticaPromotion?\nvar drawerLayout DrawerLayout?\nvar fragmentContainerView View?\nvar mCurrentSelectedPosition\nvar mFromSavedInstanceState Boolean\nvar adapter NavigationDrawerAdapter\nval isDrawerOpen Boolean\nvar isTabletUI Boolean\nvar updatingJobs\nval notificationClickResult\nval SIDEBAR_TASKS\nval SIDEBAR_SKILLS\nval SIDEBAR_STATS\nval SIDEBAR_ACHIEVEMENTS\nval SIDEBAR_SOCIAL\nval SIDEBAR_PARTY\nval SIDEBAR_CHALLENGES\nval SIDEBAR_INVENTORY\nval SIDEBAR_SHOPS_MARKET\nval SIDEBAR_SHOPS_QUEST\nval SIDEBAR_SHOPS_SEASONAL\nval SIDEBAR_SHOPS_TIMETRAVEL\nval SIDEBAR_AVATAR\nval SIDEBAR_EQUIPMENT\nval SIDEBAR_ITEMS\nval SIDEBAR_STABLE\nval SIDEBAR_GEMS\nval SIDEBAR_SUBSCRIPTION\nval SIDEBAR_SUBSCRIPTION_PROMO\nval SIDEBAR_BIRTHDAY\nval SIDEBAR_PROMO\nval SIDEBAR_ABOUT_HEADER\nval SIDEBAR_NEWS\nval SIDEBAR_HELP\nval SIDEBAR_ABOUT\nval STATE_SELECTED_POSITION",
  "app_type" : "life",
  "end_lineno" : "735",
  "ground_truth" : "        } else {\r\n            binding?.settingsBadge?.visibility = View.VISIBLE\r\n            binding?.settingsBadge?.text = count.toString()\r\n        }\r\n    }",
  "context" : "private fun setSettingsCount(count: Int) {\r\n        if (count == 0) {\r\n            binding?.settingsBadge?.visibility = View.GONE\r\n        } else {\r\n            binding?.settingsBadge?.visibility = View.VISIBLE\r\n            binding?.settingsBadge?.text = count.toString()\r\n        }\r\n    }",
  "start_lineno" : "728",
  "methodName" : "setSettingsCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt",
  "task_id" : "habitica-android/718",
  "prompt" : "import android.view.View\nprivate fun setSettingsCount(count: Int) {\r\n        if (count == 0) {\r\n            binding?.settingsBadge?.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentNewsBinding?\nval webviewClient",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "29",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NewsFragment.kt",
  "task_id" : "habitica-android/719",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentNewsBinding?\nval webviewClient",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        binding?.newsWebview?.webViewClient = webviewClient\r\n        binding?.newsWebview?.webChromeClient = object : WebChromeClient() {\r\n        }\r\n        binding?.newsWebview?.loadUrl(\"$address/static/new-stuff\")\r\n    }",
  "context" : " @SuppressLint(\"SetJavaScriptEnabled\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val address = context?.getString(R.string.base_url)\r\n        val webSettings = binding?.newsWebview?.settings\r\n        webSettings?.javaScriptEnabled = true\r\n        webSettings?.domStorageEnabled = true\r\n        binding?.newsWebview?.webViewClient = webviewClient\r\n        binding?.newsWebview?.webChromeClient = object : WebChromeClient() {\r\n        }\r\n        binding?.newsWebview?.loadUrl(\"$address/static/new-stuff\")\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NewsFragment.kt",
  "task_id" : "habitica-android/720",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\nimport android.annotation.SuppressLint\n @SuppressLint(\"SetJavaScriptEnabled\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val address = context?.getString(R.string.base_url)\r\n        val webSettings = binding?.newsWebview?.settings\r\n        webSettings?.javaScriptEnabled = true\r\n        webSettings?.domStorageEnabled = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentNewsBinding?\nval webviewClient",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "            userRepository.updateUser(\"flags.newStuff\", false)\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(\"flags.newStuff\", false)\r\n        }\r\n    }",
  "start_lineno" : "65",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NewsFragment.kt",
  "task_id" : "habitica-android/721",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        findPreference<Preference>(\"confirm_username\")?.isVisible =\r\n            user?.flags?.verifiedUsername == false\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        findPreference<Preference>(\"confirm_username\")?.isVisible =\r\n            user?.flags?.verifiedUsername == false\r\n    }",
  "start_lineno" : "68",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/722",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "78",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/723",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }",
  "context" : "override fun onPause() {\r\n        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }",
  "start_lineno" : "83",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/724",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "153",
  "ground_truth" : "        }\r\n        preference?.summary = value\r\n    }",
  "context" : "private fun configurePreference(preference: Preference?, value: String?) {\r\n        (preference as? EditTextPreference)?.let {\r\n            it.text = value\r\n        }\r\n        preference?.summary = value\r\n    }",
  "start_lineno" : "148",
  "methodName" : "configurePreference",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/725",
  "prompt" : "import androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nprivate fun configurePreference(preference: Preference?, value: String?) {\r\n        (preference as? EditTextPreference)?.let {\r\n            it.text = value\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "260",
  "ground_truth" : "            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }",
  "context" : "private fun displayAuthenticationSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.added_social_auth, network),\r\n            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }",
  "start_lineno" : "255",
  "methodName" : "displayAuthenticationSuccess",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/726",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displayAuthenticationSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.added_social_auth, network),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "267",
  "ground_truth" : "            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }",
  "context" : "private fun displayDisconnectSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.removed_social_auth, network),\r\n            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }",
  "start_lineno" : "262",
  "methodName" : "displayDisconnectSuccess",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/727",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displayDisconnectSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.removed_social_auth, network),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "289",
  "ground_truth" : "                    userRepository.updateUser(path, it ?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun updateUser(path: String, value: String?, title: String) {\r\n        showSingleEntryDialog(value, title) {\r\n            if (value != it) {\r\n                lifecycleScope.launchCatching {\r\n                    userRepository.updateUser(path, it ?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "281",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/728",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.lifecycleScope\nprivate fun updateUser(path: String, value: String?, title: String) {\r\n        showSingleEntryDialog(value, title) {\r\n            if (value != it) {\r\n                lifecycleScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "432",
  "ground_truth" : "                    userRepository.retrieveUser(false, forced = true)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun showLoginNameDialog() {\r\n        showSingleEntryDialog(user?.username, getString(R.string.username), {\r\n            it?.contains(\" \") == false && it.length > 1 && it.length < 20 && !it.contains(regex)\r\n        }) {\r\n            lifecycleScope.launchCatching {\r\n                val user = userRepository.updateLoginName(it ?: \"\")\r\n                if (user == null || user.username != it) {\r\n                    userRepository.retrieveUser(false, forced = true)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "421",
  "methodName" : "showLoginNameDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/729",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun showLoginNameDialog() {\r\n        showSingleEntryDialog(user?.username, getString(R.string.username), {\r\n            it?.contains(\" \") == false && it.length > 1 && it.length < 20 && !it.contains(regex)\r\n        }) {\r\n            lifecycleScope.launchCatching {\r\n                val user = userRepository.updateLoginName(it ?: \"\")\r\n                if (user == null || user.username != it) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "519",
  "ground_truth" : "\r\n        if (habiticaAccountDialog != null) {\r\n            accountDialog = habiticaAccountDialog\r\n        }\r\n    }",
  "context" : "private fun showAccountResetConfirmation(user: User?) {\r\n        val habiticaAccountDialog = context?.let { HabiticaAccountDialog(it) }\r\n        habiticaAccountDialog?.accountAction = \"reset_account\"\r\n        habiticaAccountDialog?.accountUpdateConfirmed = this\r\n        habiticaAccountDialog?.user = user\r\n        habiticaAccountDialog?.show(parentFragmentManager, \"account\")\r\n\r\n        if (habiticaAccountDialog != null) {\r\n            accountDialog = habiticaAccountDialog\r\n        }\r\n    }",
  "start_lineno" : "509",
  "methodName" : "showAccountResetConfirmation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/730",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nprivate fun showAccountResetConfirmation(user: User?) {\r\n        val habiticaAccountDialog = context?.let { HabiticaAccountDialog(it) }\r\n        habiticaAccountDialog?.accountAction = \"reset_account\"\r\n        habiticaAccountDialog?.accountUpdateConfirmed = this\r\n        habiticaAccountDialog?.user = user\r\n        habiticaAccountDialog?.show(parentFragmentManager, \"account\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hostConfig HostConfig\nvar apiClient ApiClient\nvar viewModel AuthenticationViewModel\nvar accountDialog HabiticaAccountDialog\nvar user User?\nval pickAccountResult\nval recoverFromPlayServicesErrorResult\nval regex",
  "app_type" : "life",
  "end_lineno" : "544",
  "ground_truth" : "            userRepository.resetAccount(confirmationString)\r\n            dialog?.dismiss()\r\n            accountDialog.dismiss()\r\n        }\r\n    }",
  "context" : "private fun resetAccount(confirmationString: String) {\r\n        val dialog = activity?.let { HabiticaProgressDialog.show(it, R.string.resetting_account) }\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.resetAccount(confirmationString)\r\n            dialog?.dismiss()\r\n            accountDialog.dismiss()\r\n        }\r\n    }",
  "start_lineno" : "537",
  "methodName" : "resetAccount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt",
  "task_id" : "habitica-android/731",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.ui.views.dialogs.HabiticaProgressDialog\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun resetAccount(confirmationString: String) {\r\n        val dialog = activity?.let { HabiticaProgressDialog.show(it, R.string.resetting_account) }\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "        userViewModel.user.observe(viewLifecycleOwner) { setUser(it) }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        userViewModel.user.observe(viewLifecycleOwner) { setUser(it) }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "24",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\BasePreferencesFragment.kt",
  "task_id" : "habitica-android/732",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\BasePreferencesFragment.kt",
  "task_id" : "habitica-android/733",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar user User?",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        setPreferencesFromResource(R.xml.preferences_fragment, rootKey)\r\n        setupPreferences()\r\n    }",
  "context" : "override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.preferences_fragment, rootKey)\r\n        setupPreferences()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onCreatePreferences",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\BasePreferencesFragment.kt",
  "task_id" : "habitica-android/734",
  "prompt" : "import android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "16",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/735",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/736",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }",
  "context" : "private fun updatePreference(key: String, isChecked: Boolean?) {\r\n        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }",
  "start_lineno" : "48",
  "methodName" : "updatePreference",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/737",
  "prompt" : "private fun updatePreference(key: String, isChecked: Boolean?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding DialogHabiticaAccountBinding?\nval binding\nvar accountAction String?\nvar accountUpdateConfirmed AccountUpdateConfirmed?\nvar user User?\nval TAG",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "        super.onCreate(savedInstanceState)\r\n        setStyle(STYLE_NO_TITLE, R.style.HabiticaAlertDialogTheme)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setStyle(STYLE_NO_TITLE, R.style.HabiticaAlertDialogTheme)\r\n    }",
  "start_lineno" : "32",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt",
  "task_id" : "habitica-android/738",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding DialogHabiticaAccountBinding?\nval binding\nvar accountAction String?\nvar accountUpdateConfirmed AccountUpdateConfirmed?\nvar user User?\nval TAG",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        _binding = DialogHabiticaAccountBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = DialogHabiticaAccountBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "37",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt",
  "task_id" : "habitica-android/739",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding DialogHabiticaAccountBinding?\nval binding\nvar accountAction String?\nvar accountUpdateConfirmed AccountUpdateConfirmed?\nvar user User?\nval TAG",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "            \"delete_account\" -> setDeleteAccountViews()\r\n        }\r\n\r\n        binding.backImagebutton.setOnClickListener { dismiss() }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        activity?.let { _ ->\r\n            ViewCompat.getWindowInsetsController(view)?.isAppearanceLightStatusBars = true\r\n        }\r\n\r\n        when (accountAction) {\r\n            \"reset_account\" -> setResetAccountViews()\r\n            \"delete_account\" -> setDeleteAccountViews()\r\n        }\r\n\r\n        binding.backImagebutton.setOnClickListener { dismiss() }\r\n    }",
  "start_lineno" : "42",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt",
  "task_id" : "habitica-android/740",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.core.view.ViewCompat\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        activity?.let { _ ->\r\n            ViewCompat.getWindowInsetsController(view)?.isAppearanceLightStatusBars = true\r\n        }\r\n\r\n        when (accountAction) {\r\n            \"reset_account\" -> setResetAccountViews()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding DialogHabiticaAccountBinding?\nval binding\nvar accountAction String?\nvar accountUpdateConfirmed AccountUpdateConfirmed?\nvar user User?\nval TAG",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "            notificationDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\r\n            notificationDialog.behavior.isDraggable = false\r\n        }\r\n        return habiticaAccountDialog\r\n    }",
  "context" : "override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val habiticaAccountDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        habiticaAccountDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r\n            notificationDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\r\n            notificationDialog.behavior.isDraggable = false\r\n        }\r\n        return habiticaAccountDialog\r\n    }",
  "start_lineno" : "57",
  "methodName" : "onCreateDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt",
  "task_id" : "habitica-android/741",
  "prompt" : "import com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.os.Bundle\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val habiticaAccountDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        habiticaAccountDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "\r\n        lifecycleScope.launchCatching {\r\n            userRepository.retrieveTeamPlans()\r\n        }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        listView.itemAnimator = null\r\n\r\n        lifecycleScope.launchCatching {\r\n            userRepository.retrieveTeamPlans()\r\n        }\r\n    }",
  "start_lineno" : "85",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/742",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        listView.itemAnimator = null\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "126",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/743",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "134",
  "ground_truth" : "        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }",
  "context" : "override fun onPause() {\r\n        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }",
  "start_lineno" : "131",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/744",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "218",
  "ground_truth" : "                    displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n                )\r\n            }\r\n        }\r\n    }",
  "context" : "private fun reloadContent(withConfirmation: Boolean) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            contentRepository.retrieveContent(true)\r\n            if (withConfirmation) {\r\n                (activity as? SnackbarActivity)?.showSnackbar(\r\n                    content = context?.getString(R.string.reloaded_content),\r\n                    displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n                )\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "208",
  "methodName" : "reloadContent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/745",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun reloadContent(withConfirmation: Boolean) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            contentRepository.retrieveContent(true)\r\n            if (withConfirmation) {\r\n                (activity as? SnackbarActivity)?.showSnackbar(\r\n                    content = context?.getString(R.string.reloaded_content),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "231",
  "ground_truth" : "            }\r\n            dialog.addCancelButton()\r\n            dialog.show()\r\n        }\r\n    }",
  "context" : "private fun logout() {\r\n        context?.let { context ->\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.are_you_sure)\r\n            dialog.addButton(R.string.logout, true) { _, _ ->\r\n                HabiticaBaseApplication.logout(context)\r\n                activity?.finish()\r\n            }\r\n            dialog.addCancelButton()\r\n            dialog.show()\r\n        }\r\n    }",
  "start_lineno" : "220",
  "methodName" : "logout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/746",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.HabiticaBaseApplication\nprivate fun logout() {\r\n        context?.let { context ->\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.are_you_sure)\r\n            dialog.addButton(R.string.logout, true) { _, _ ->\r\n                HabiticaBaseApplication.logout(context)\r\n                activity?.finish()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var contentRepository ContentRepository\nvar soundManager SoundManager\nvar pushNotificationManager PushNotificationManager\nvar configManager AppConfigManager\nvar apiClient ApiClient\nvar timePreference TimePreference?\nvar pushNotificationsPreference PreferenceScreen?\nvar emailNotificationsPreference PreferenceScreen?\nvar classSelectionPreference Preference?\nvar serverUrlPreference ListPreference?\nvar taskListPreference ListPreference?\nval classSelectionResult\nval notificationPermissionLauncher",
  "app_type" : "life",
  "end_lineno" : "407",
  "ground_truth" : "            }\r\n        } else {\r\n            super.onDisplayPreferenceDialog(preference)\r\n        }\r\n    }",
  "context" : "override fun onDisplayPreferenceDialog(preference: Preference) {\r\n        if (preference is TimePreference) {\r\n            if (parentFragmentManager.findFragmentByTag(TimePreferenceDialogFragment.TAG) == null) {\r\n                TimePreferenceDialogFragment.newInstance(this, preference.getKey())\r\n                    .show(parentFragmentManager, TimePreferenceDialogFragment.TAG)\r\n            }\r\n        } else {\r\n            super.onDisplayPreferenceDialog(preference)\r\n        }\r\n    }",
  "start_lineno" : "398",
  "methodName" : "onDisplayPreferenceDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt",
  "task_id" : "habitica-android/747",
  "prompt" : "import com.habitrpg.android.habitica.prefs.TimePreference\nimport androidx.preference.Preference\noverride fun onDisplayPreferenceDialog(preference: Preference) {\r\n        if (preference is TimePreference) {\r\n            if (parentFragmentManager.findFragmentByTag(TimePreferenceDialogFragment.TAG) == null) {\r\n                TimePreferenceDialogFragment.newInstance(this, preference.getKey())\r\n                    .show(parentFragmentManager, TimePreferenceDialogFragment.TAG)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "16",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/748",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/749",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isInitialSet Boolean\nvar isSettingUser Boolean",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }",
  "context" : "private fun updatePreference(key: String, isChecked: Boolean?) {\r\n        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }",
  "start_lineno" : "48",
  "methodName" : "updatePreference",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt",
  "task_id" : "habitica-android/750",
  "prompt" : "private fun updatePreference(key: String, isChecked: Boolean?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var picker TimePicker\nval timePreference TimePreference\nval newTimeValue String\nval TAG",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        picker.setIs24HourView(android.text.format.DateFormat.is24HourFormat(context))\r\n        return picker\r\n    }",
  "context" : "override fun onCreateDialogView(context: Context): View {\r\n        picker = TimePicker(context)\r\n        picker.setIs24HourView(android.text.format.DateFormat.is24HourFormat(context))\r\n        return picker\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onCreateDialogView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\TimePreferenceDialogFragment.kt",
  "task_id" : "habitica-android/751",
  "prompt" : "import android.widget.TimePicker\nimport android.view.View\nimport android.content.Context\noverride fun onCreateDialogView(context: Context): View {\r\n        picker = TimePicker(context)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var picker TimePicker\nval timePreference TimePreference\nval newTimeValue String\nval TAG",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "            if (preference.callChangeListener(time)) {\r\n                preference.text = time\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onDialogClosed(positiveResult: Boolean) {\r\n        if (positiveResult) {\r\n            val preference = timePreference\r\n            val time = newTimeValue\r\n\r\n            preference.summary = time\r\n\r\n            if (preference.callChangeListener(time)) {\r\n                preference.text = time\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "61",
  "methodName" : "onDialogClosed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\TimePreferenceDialogFragment.kt",
  "task_id" : "habitica-android/752",
  "prompt" : "override fun onDialogClosed(positiveResult: Boolean) {\r\n        if (positiveResult) {\r\n            val preference = timePreference\r\n            val time = newTimeValue\r\n\r\n            preference.summary = time\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var picker TimePicker\nval timePreference TimePreference\nval newTimeValue String\nval TAG",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            arguments.putString(ARG_KEY, key)\r\n            fragment.arguments = arguments\r\n            fragment.setTargetFragment(preferenceFragment, 0)\r\n            return fragment\r\n        }",
  "context" : "fun newInstance(\r\n            preferenceFragment: PreferenceFragmentCompat,\r\n            key: String\r\n        ): TimePreferenceDialogFragment {\r\n            val fragment = TimePreferenceDialogFragment()\r\n            val arguments = Bundle(1)\r\n            arguments.putString(ARG_KEY, key)\r\n            fragment.arguments = arguments\r\n            fragment.setTargetFragment(preferenceFragment, 0)\r\n            return fragment\r\n        }",
  "start_lineno" : "76",
  "methodName" : "newInstance",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\TimePreferenceDialogFragment.kt",
  "task_id" : "habitica-android/753",
  "prompt" : "import com.habitrpg.android.habitica.prefs.TimePreference\nimport androidx.preference.PreferenceFragmentCompat\nimport android.os.Bundle\nfun newInstance(\r\n            preferenceFragment: PreferenceFragmentCompat,\r\n            key: String\r\n        ): TimePreferenceDialogFragment {\r\n            val fragment = TimePreferenceDialogFragment()\r\n            val arguments = Bundle(1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentPromoInfoBinding?\nvar configManager AppConfigManager",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "24",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt",
  "task_id" : "habitica-android/754",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentPromoInfoBinding?\nvar configManager AppConfigManager",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        val promo = configManager.activePromo()\r\n        promo?.configureInfoFragment(this)\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val promo = configManager.activePromo()\r\n        promo?.configureInfoFragment(this)\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt",
  "task_id" : "habitica-android/755",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentPromoInfoBinding?\nvar configManager AppConfigManager",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "        super.onResume()\r\n        mainActivity?.title = \"\"\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        mainActivity?.title = \"\"\r\n    }",
  "start_lineno" : "39",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt",
  "task_id" : "habitica-android/756",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userViewModel MainUserViewModel\nvar binding FragmentNewsBinding?",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "25",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoWebFragment.kt",
  "task_id" : "habitica-android/757",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var eventType String\nval TAG\nval EVENT_ARMOIRE_OPENED\nval EVENT_DEATH_SCREEN\nval EVENT_GEMS_FOR_GOLD\nval EVENT_HOURGLASS_SHOP_OPENED",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "            EVENT_GEMS_FOR_GOLD -> setGemsForGoldEventSubscriptionViews()\r\n            EVENT_HOURGLASS_SHOP_OPENED -> setHourglassShopEventSubscriptionViews()\r\n        }\r\n\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        when (eventType) {\r\n            EVENT_ARMOIRE_OPENED -> setArmoireEventSubscriptionViews()\r\n            EVENT_DEATH_SCREEN -> setDeathScreenEventSubscriptionViews()\r\n            EVENT_GEMS_FOR_GOLD -> setGemsForGoldEventSubscriptionViews()\r\n            EVENT_HOURGLASS_SHOP_OPENED -> setHourglassShopEventSubscriptionViews()\r\n        }\r\n\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/758",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        when (eventType) {\r\n            EVENT_ARMOIRE_OPENED -> setArmoireEventSubscriptionViews()\r\n            EVENT_DEATH_SCREEN -> setDeathScreenEventSubscriptionViews()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var eventType String\nval TAG\nval EVENT_ARMOIRE_OPENED\nval EVENT_DEATH_SCREEN\nval EVENT_GEMS_FOR_GOLD\nval EVENT_HOURGLASS_SHOP_OPENED",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "        binding.subscribeBenefits.text = getString(R.string.subscribe_second_armoire_open_text)\r\n        binding.subscriberBenefits.hideArmoireBenefit()\r\n    }",
  "context" : "private fun setArmoireEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_second_armoire_open_text)\r\n        binding.subscriberBenefits.hideArmoireBenefit()\r\n    }",
  "start_lineno" : "23",
  "methodName" : "setArmoireEventSubscriptionViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/759",
  "prompt" : "import android.view.View\nprivate fun setArmoireEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eventType String\nval TAG\nval EVENT_ARMOIRE_OPENED\nval EVENT_DEATH_SCREEN\nval EVENT_GEMS_FOR_GOLD\nval EVENT_HOURGLASS_SHOP_OPENED",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "        binding.subscribeBenefits.text = getString(R.string.subscribe_second_chance_incentive_text)\r\n        binding.subscriberBenefits.hideDeathBenefit()\r\n    }",
  "context" : "private fun setDeathScreenEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_second_chance_incentive_text)\r\n        binding.subscriberBenefits.hideDeathBenefit()\r\n    }",
  "start_lineno" : "29",
  "methodName" : "setDeathScreenEventSubscriptionViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/760",
  "prompt" : "import android.view.View\nprivate fun setDeathScreenEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eventType String\nval TAG\nval EVENT_ARMOIRE_OPENED\nval EVENT_DEATH_SCREEN\nval EVENT_GEMS_FOR_GOLD\nval EVENT_HOURGLASS_SHOP_OPENED",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        binding.subscriberBenefits.hideGemsForGoldBenefit()\r\n        binding.subscription3month.visibility = View.GONE\r\n    }",
  "context" : "private fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for_gold_incentive_text)\r\n        binding.subscriberBenefits.hideGemsForGoldBenefit()\r\n        binding.subscription3month.visibility = View.GONE\r\n    }",
  "start_lineno" : "35",
  "methodName" : "setGemsForGoldEventSubscriptionViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/761",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for_gold_incentive_text)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eventType String\nval TAG\nval EVENT_ARMOIRE_OPENED\nval EVENT_DEATH_SCREEN\nval EVENT_GEMS_FOR_GOLD\nval EVENT_HOURGLASS_SHOP_OPENED",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "        binding.subscribeBenefits.text = getString(R.string.subscribe_hourglass_incentive_text)\r\n        binding.subscriberBenefits.hideMysticHourglassBenefit()\r\n        binding.subscription1month.visibility = View.GONE\r\n        skus.firstOrNull { buttonForSku(it)?.isVisible == true }?.let { selectSubscription(it) }\r\n    }",
  "context" : "private fun setHourglassShopEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_hourglass_incentive_text)\r\n        binding.subscriberBenefits.hideMysticHourglassBenefit()\r\n        binding.subscription1month.visibility = View.GONE\r\n        skus.firstOrNull { buttonForSku(it)?.isVisible == true }?.let { selectSubscription(it) }\r\n    }",
  "start_lineno" : "41",
  "methodName" : "setHourglassShopEventSubscriptionViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/762",
  "prompt" : "import android.view.View\nprivate fun setHourglassShopEventSubscriptionViews() {\r\n        binding.subscriberBenefitBanner.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentGemPurchaseBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar isGemSaleHappening",
  "app_type" : "life",
  "end_lineno" : "124",
  "ground_truth" : "        lifecycleScope.launchCatching {\r\n            purchaseHandler.queryPurchases()\r\n        }\r\n        loadInventory()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r\n            purchaseHandler.queryPurchases()\r\n        }\r\n        loadInventory()\r\n    }",
  "start_lineno" : "118",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GemsPurchaseFragment.kt",
  "task_id" : "habitica-android/763",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentGemPurchaseBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar isGemSaleHappening",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "                    updateButtonLabel(sku)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun loadInventory() {\r\n        CoroutineScope(Dispatchers.IO).launch(ExceptionHandler.coroutine()) {\r\n            val skus = purchaseHandler.getAllGemSKUs()\r\n            withContext(Dispatchers.Main) {\r\n                for (sku in skus) {\r\n                    updateButtonLabel(sku)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "126",
  "methodName" : "loadInventory",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GemsPurchaseFragment.kt",
  "task_id" : "habitica-android/764",
  "prompt" : "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nprivate fun loadInventory() {\r\n        CoroutineScope(Dispatchers.IO).launch(ExceptionHandler.coroutine()) {\r\n            val skus = purchaseHandler.getAllGemSKUs()\r\n            withContext(Dispatchers.Main) {\r\n                for (sku in skus) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentGemPurchaseBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar isGemSaleHappening",
  "app_type" : "life",
  "end_lineno" : "154",
  "ground_truth" : "        val identifier = view?.sku ?: return\r\n        activity?.let { purchaseHandler.purchase(it, identifier, null, null, isGemSaleHappening) }\r\n    }",
  "context" : "private fun purchaseGems(view: GemPurchaseOptionsView?) {\r\n        val identifier = view?.sku ?: return\r\n        activity?.let { purchaseHandler.purchase(it, identifier, null, null, isGemSaleHappening) }\r\n    }",
  "start_lineno" : "151",
  "methodName" : "purchaseGems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GemsPurchaseFragment.kt",
  "task_id" : "habitica-android/765",
  "prompt" : "import com.habitrpg.android.habitica.ui.GemPurchaseOptionsView\nimport android.view.View\nprivate fun purchaseGems(view: GemPurchaseOptionsView?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar userRepository UserRepository\nvar binding FragmentGiftGemBalanceBinding?\nvar isGifting\nvar giftedMember Member?",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        binding?.avatarView?.setAvatar(it)\r\n        binding?.displayNameTextview?.username = it.profile?.name\r\n        binding?.displayNameTextview?.tier = it.contributor?.level ?: 0\r\n        binding?.usernameTextview?.text = it.formattedUsername\r\n    }",
  "context" : "private fun updateMemberViews() {\r\n        val it = giftedMember ?: return\r\n        binding?.avatarView?.setAvatar(it)\r\n        binding?.displayNameTextview?.username = it.profile?.name\r\n        binding?.displayNameTextview?.tier = it.contributor?.level ?: 0\r\n        binding?.usernameTextview?.text = it.formattedUsername\r\n    }",
  "start_lineno" : "56",
  "methodName" : "updateMemberViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftBalanceGemsFragment.kt",
  "task_id" : "habitica-android/766",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport android.view.View\nprivate fun updateMemberViews() {\r\n        val it = giftedMember ?: return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar userRepository UserRepository\nvar binding FragmentGiftGemBalanceBinding?\nvar isGifting\nvar giftedMember Member?",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        binding?.giftButton?.setOnClickListener { sendGift() }\r\n        updateMemberViews()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding?.giftButton?.setOnClickListener { sendGift() }\r\n        updateMemberViews()\r\n    }",
  "start_lineno" : "64",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftBalanceGemsFragment.kt",
  "task_id" : "habitica-android/767",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar binding FragmentGiftGemPurchaseBinding?\nvar giftedMember Member?\nvar purchaseHandler PurchaseHandler?",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "                    updateButtonLabel(sku, sku.oneTimePurchaseOfferDetails?.formattedPrice ?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "fun setupCheckout() {\r\n        CoroutineScope(Dispatchers.IO).launch(ExceptionHandler.coroutine()) {\r\n            val skus = purchaseHandler?.getAllGemSKUs()\r\n            withContext(Dispatchers.Main) {\r\n                for (sku in skus ?: emptyList()) {\r\n                    updateButtonLabel(sku, sku.oneTimePurchaseOfferDetails?.formattedPrice ?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "48",
  "methodName" : "setupCheckout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftPurchaseGemsFragment.kt",
  "task_id" : "habitica-android/768",
  "prompt" : "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nfun setupCheckout() {\r\n        CoroutineScope(Dispatchers.IO).launch(ExceptionHandler.coroutine()) {\r\n            val skus = purchaseHandler?.getAllGemSKUs()\r\n            withContext(Dispatchers.Main) {\r\n                for (sku in skus ?: emptyList()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar binding FragmentGiftGemPurchaseBinding?\nvar giftedMember Member?\nvar purchaseHandler PurchaseHandler?",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "            activity?.let { it1 -> purchaseHandler?.purchase(it1, sku, it, giftedMember?.username) }\r\n        }\r\n    }",
  "context" : "private fun purchaseGems(sku: ProductDetails) {\r\n        giftedMember?.id?.let {\r\n            activity?.let { it1 -> purchaseHandler?.purchase(it1, sku, it, giftedMember?.username) }\r\n        }\r\n    }",
  "start_lineno" : "80",
  "methodName" : "purchaseGems",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftPurchaseGemsFragment.kt",
  "task_id" : "habitica-android/769",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.android.billingclient.api.ProductDetails\nprivate fun purchaseGems(sku: ProductDetails) {\r\n        giftedMember?.id?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        _binding = FragmentBottomsheetSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentBottomsheetSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }",
  "start_lineno" : "59",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/770",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "            notificationDialog.behavior.state = BottomSheetBehavior.STATE_HALF_EXPANDED\r\n            notificationDialog.behavior.isDraggable = true\r\n        }\r\n        return bottomSheetDialog\r\n    }",
  "context" : "override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        bottomSheetDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r\n            notificationDialog.behavior.state = BottomSheetBehavior.STATE_HALF_EXPANDED\r\n            notificationDialog.behavior.isDraggable = true\r\n        }\r\n        return bottomSheetDialog\r\n    }",
  "start_lineno" : "82",
  "methodName" : "onCreateDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/771",
  "prompt" : "import com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.os.Bundle\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        bottomSheetDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r\n            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/772",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "            userRepository.retrieveUser(false, true)\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r\n        }\r\n    }",
  "start_lineno" : "101",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/773",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r\n            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "126",
  "methodName" : "updateButtonLabel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/774",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r\n        subscriptionOptionButton?.setIsSelected(true)\r\n        binding.subscribeButton.isEnabled = true\r\n    }",
  "context" : "internal fun selectSubscription(sku: ProductDetails) {\r\n        if (this.selectedSubscriptionSku != null) {\r\n            val oldButton = buttonForSku(this.selectedSubscriptionSku)\r\n            oldButton?.setIsSelected(false)\r\n        }\r\n        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r\n        subscriptionOptionButton?.setIsSelected(true)\r\n        binding.subscribeButton.isEnabled = true\r\n    }",
  "start_lineno" : "137",
  "methodName" : "selectSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/775",
  "prompt" : "import com.android.billingclient.api.ProductDetails\ninternal fun selectSubscription(sku: ProductDetails) {\r\n        if (this.selectedSubscriptionSku != null) {\r\n            val oldButton = buttonForSku(this.selectedSubscriptionSku)\r\n            oldButton?.setIsSelected(false)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "            PurchaseTypes.Subscription3Month -> binding.subscription3month\r\n            PurchaseTypes.Subscription12Month -> binding.subscription12month\r\n            else -> null\r\n        }\r\n    }",
  "context" : "private fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1Month -> binding.subscription1month\r\n            PurchaseTypes.Subscription3Month -> binding.subscription3month\r\n            PurchaseTypes.Subscription12Month -> binding.subscription12month\r\n            else -> null\r\n        }\r\n    }",
  "start_lineno" : "152",
  "methodName" : "buttonForSku",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/776",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.subscriptions.SubscriptionOptionView\nimport com.habitrpg.android.habitica.helpers.PurchaseTypes\nimport android.view.View\nprivate fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1Month -> binding.subscription1month\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "168",
  "ground_truth" : "                purchaseHandler.purchase(it, sku)\r\n                dismiss()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r\n            activity?.let {\r\n                purchaseHandler.purchase(it, sku)\r\n                dismiss()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "161",
  "methodName" : "purchaseSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/777",
  "prompt" : "private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r\n            activity?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "174",
  "ground_truth" : "        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }",
  "context" : "fun setUser(newUser: User) {\r\n        user = newUser\r\n        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }",
  "start_lineno" : "170",
  "methodName" : "setUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/778",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nfun setUser(newUser: User) {\r\n        user = newUser\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _binding FragmentBottomsheetSubscriptionBinding?\nval binding\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean\nval TAG",
  "app_type" : "life",
  "end_lineno" : "184",
  "ground_truth" : "        }\r\n        if (user != null) {\r\n            binding.loadingIndicator.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun updateSubscriptionInfo() {\r\n        if (hasLoadedSubscriptionOptions) {\r\n            binding.subscriptionOptions.visibility = View.VISIBLE\r\n            binding.loadingIndicator.visibility = View.GONE\r\n        }\r\n        if (user != null) {\r\n            binding.loadingIndicator.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "176",
  "methodName" : "updateSubscriptionInfo",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt",
  "task_id" : "habitica-android/779",
  "prompt" : "import android.view.View\nprivate fun updateSubscriptionInfo() {\r\n        if (hasLoadedSubscriptionOptions) {\r\n            binding.subscriptionOptions.visibility = View.VISIBLE\r\n            binding.loadingIndicator.visibility = View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r\n            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }",
  "start_lineno" : "128",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/780",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(withTasks = false, forced = true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "137",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/781",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(withTasks = false, forced = true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "168",
  "ground_truth" : "            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r\n            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "159",
  "methodName" : "updateButtonLabel",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/782",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "181",
  "ground_truth" : "        subscriptionOptionButton?.setIsSelected(true)\r\n        if (binding?.subscribeButton != null) {\r\n            binding?.subscribeButton?.isEnabled = true\r\n        }\r\n    }",
  "context" : "private fun selectSubscription(sku: ProductDetails) {\r\n        if (this.selectedSubscriptionSku != null) {\r\n            val oldButton = buttonForSku(this.selectedSubscriptionSku)\r\n            oldButton?.setIsSelected(false)\r\n        }\r\n        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r\n        subscriptionOptionButton?.setIsSelected(true)\r\n        if (binding?.subscribeButton != null) {\r\n            binding?.subscribeButton?.isEnabled = true\r\n        }\r\n    }",
  "start_lineno" : "170",
  "methodName" : "selectSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/783",
  "prompt" : "import com.android.billingclient.api.ProductDetails\nprivate fun selectSubscription(sku: ProductDetails) {\r\n        if (this.selectedSubscriptionSku != null) {\r\n            val oldButton = buttonForSku(this.selectedSubscriptionSku)\r\n            oldButton?.setIsSelected(false)\r\n        }\r\n        this.selectedSubscriptionSku = sku\r\n        val subscriptionOptionButton = buttonForSku(this.selectedSubscriptionSku)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "            PurchaseTypes.Subscription6Month -> binding?.subscription6month\r\n            PurchaseTypes.Subscription12Month -> binding?.subscription12month\r\n            else -> null\r\n        }\r\n    }",
  "context" : "private fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1Month -> binding?.subscription1month\r\n            PurchaseTypes.Subscription3Month -> binding?.subscription3month\r\n            PurchaseTypes.Subscription6Month -> binding?.subscription6month\r\n            PurchaseTypes.Subscription12Month -> binding?.subscription12month\r\n            else -> null\r\n        }\r\n    }",
  "start_lineno" : "187",
  "methodName" : "buttonForSku",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/784",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.subscriptions.SubscriptionOptionView\nimport com.habitrpg.android.habitica.helpers.PurchaseTypes\nimport android.view.View\nprivate fun buttonForSku(sku: String?): SubscriptionOptionView? {\r\n        return when (sku) {\r\n            PurchaseTypes.Subscription1Month -> binding?.subscription1month\r\n            PurchaseTypes.Subscription3Month -> binding?.subscription3month\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "203",
  "ground_truth" : "            activity?.let {\r\n                purchaseHandler.purchase(it, sku)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r\n            activity?.let {\r\n                purchaseHandler.purchase(it, sku)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "197",
  "methodName" : "purchaseSubscription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/785",
  "prompt" : "private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "209",
  "ground_truth" : "        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }",
  "context" : "fun setUser(newUser: User) {\r\n        user = newUser\r\n        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }",
  "start_lineno" : "205",
  "methodName" : "setUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/786",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nfun setUser(newUser: User) {\r\n        user = newUser\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSubscriptionBinding?\nvar userRepository UserRepository\nvar appConfigManager AppConfigManager\nvar inventoryRepository InventoryRepository\nvar purchaseHandler PurchaseHandler\nvar selectedSubscriptionSku ProductDetails?\nvar skus List<ProductDetails>\nvar user User?\nvar hasLoadedSubscriptionOptions Boolean",
  "app_type" : "life",
  "end_lineno" : "273",
  "ground_truth" : "                binding?.scrollView?.smoothScrollTo(0, binding?.subscriptionOptions?.top ?: 0)\r\n            },\r\n            500\r\n        )\r\n    }",
  "context" : "private fun showSubscriptionOptions() {\r\n        binding?.subscriptionOptions?.visibility = View.VISIBLE\r\n        binding?.subscriptionOptions?.postDelayed(\r\n            {\r\n                binding?.scrollView?.smoothScrollTo(0, binding?.subscriptionOptions?.top ?: 0)\r\n            },\r\n            500\r\n        )\r\n    }",
  "start_lineno" : "265",
  "methodName" : "showSubscriptionOptions",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt",
  "task_id" : "habitica-android/787",
  "prompt" : "import android.view.View\nprivate fun showSubscriptionOptions() {\r\n        binding?.subscriptionOptions?.visibility = View.VISIBLE\r\n        binding?.subscriptionOptions?.postDelayed(\r\n            {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentReportMessageBinding\nvar socialRepository SocialRepository\nvar reportType String?\nvar messageID String?\nvar messageText String?\nvar profileName String?\nvar displayName String?\nvar reportingUserId String?\nvar groupID String?\nvar isReporting Boolean\nvar source String?\nval TAG\nval REPORT_TYPE_MESSAGE\nval REPORT_TYPE_USER\nval REPORTING_USER_ID\nval REPORT_TYPE\nval PROFILE_NAME\nval DISPLAY_NAME\nval MESSAGE_ID\nval MESSAGE_TEXT\nval GROUP_ID\nval SOURCE_VIEW",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "        binding = FragmentReportMessageBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentReportMessageBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }",
  "start_lineno" : "45",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\ReportBottomSheetFragment.kt",
  "task_id" : "habitica-android/788",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentReportMessageBinding\nvar socialRepository SocialRepository\nvar reportType String?\nvar messageID String?\nvar messageText String?\nvar profileName String?\nvar displayName String?\nvar reportingUserId String?\nvar groupID String?\nvar isReporting Boolean\nvar source String?\nval TAG\nval REPORT_TYPE_MESSAGE\nval REPORT_TYPE_USER\nval REPORTING_USER_ID\nval REPORT_TYPE\nval PROFILE_NAME\nval DISPLAY_NAME\nval MESSAGE_ID\nval MESSAGE_TEXT\nval GROUP_ID\nval SOURCE_VIEW",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "            notificationDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\r\n            notificationDialog.behavior.isDraggable = false\r\n        }\r\n        return bottomSheetDialog\r\n    }",
  "context" : "override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        bottomSheetDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r\n            notificationDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\r\n            notificationDialog.behavior.isDraggable = false\r\n        }\r\n        return bottomSheetDialog\r\n    }",
  "start_lineno" : "54",
  "methodName" : "onCreateDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\ReportBottomSheetFragment.kt",
  "task_id" : "habitica-android/789",
  "prompt" : "import com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.os.Bundle\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n        bottomSheetDialog.setOnShowListener { dialog: DialogInterface ->\r\n            val notificationDialog = dialog as BottomSheetDialog\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var customizationRepository SetupCustomizationRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar binding FragmentSetupAvatarBinding?\nvar activity SetupActivity?\nvar width Int\nvar adapter CustomizationSetupAdapter?\nvar user User?\nvar subcategories List<String>\nvar activeButton AvatarCategoryView?\nvar activeCategory String?\nvar activeSubCategory String?\nvar random",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "        this.selectedBodyCategory()\r\n        if (context != null) {\r\n            binding?.speechBubble?.animateText(context?.getString(R.string.avatar_setup_description) ?: \"\")\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (this.user != null) {\r\n            this.updateAvatar()\r\n        }\r\n        this.selectedBodyCategory()\r\n        if (context != null) {\r\n            binding?.speechBubble?.animateText(context?.getString(R.string.avatar_setup_description) ?: \"\")\r\n        }\r\n    }",
  "start_lineno" : "108",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt",
  "task_id" : "habitica-android/790",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (this.user != null) {\r\n            this.updateAvatar()\r\n        }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var customizationRepository SetupCustomizationRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar binding FragmentSetupAvatarBinding?\nvar activity SetupActivity?\nvar width Int\nvar adapter CustomizationSetupAdapter?\nvar user User?\nvar subcategories List<String>\nvar activeButton AvatarCategoryView?\nvar activeCategory String?\nvar activeSubCategory String?\nvar random",
  "app_type" : "life",
  "end_lineno" : "124",
  "ground_truth" : "\r\n        this.adapter?.setCustomizationList(customizationRepository.getCustomizations(activeCategory, activeSubCategory, user))\r\n    }",
  "context" : "private fun loadCustomizations() {\r\n        val user = this.user ?: return\r\n        val activeCategory = this.activeCategory ?: return\r\n\r\n        this.adapter?.setCustomizationList(customizationRepository.getCustomizations(activeCategory, activeSubCategory, user))\r\n    }",
  "start_lineno" : "119",
  "methodName" : "loadCustomizations",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt",
  "task_id" : "habitica-android/791",
  "prompt" : "private fun loadCustomizations() {\r\n        val user = this.user ?: return\r\n        val activeCategory = this.activeCategory ?: return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var customizationRepository SetupCustomizationRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar binding FragmentSetupAvatarBinding?\nvar activity SetupActivity?\nvar width Int\nvar adapter CustomizationSetupAdapter?\nvar user User?\nvar subcategories List<String>\nvar activeButton AvatarCategoryView?\nvar activeCategory String?\nvar activeSubCategory String?\nvar random",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "            this.adapter?.user = user\r\n            this.adapter?.notifyDataSetChanged()\r\n            loadCustomizations()\r\n        }\r\n    }",
  "context" : "fun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView != null) {\r\n            updateAvatar()\r\n        }\r\n        if (this.adapter != null) {\r\n            this.adapter?.user = user\r\n            this.adapter?.notifyDataSetChanged()\r\n            loadCustomizations()\r\n        }\r\n    }",
  "start_lineno" : "126",
  "methodName" : "setUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt",
  "task_id" : "habitica-android/792",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport android.view.View\nfun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView != null) {\r\n            updateAvatar()\r\n        }\r\n        if (this.adapter != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var customizationRepository SetupCustomizationRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar binding FragmentSetupAvatarBinding?\nvar activity SetupActivity?\nvar width Int\nvar adapter CustomizationSetupAdapter?\nvar user User?\nvar subcategories List<String>\nvar activeButton AvatarCategoryView?\nvar activeCategory String?\nvar activeSubCategory String?\nvar random",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }",
  "context" : "private fun updateAvatar() {\r\n        user?.let {\r\n            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "updateAvatar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt",
  "task_id" : "habitica-android/793",
  "prompt" : "private fun updateAvatar() {\r\n        user?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var customizationRepository SetupCustomizationRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar binding FragmentSetupAvatarBinding?\nvar activity SetupActivity?\nvar width Int\nvar adapter CustomizationSetupAdapter?\nvar user User?\nvar subcategories List<String>\nvar activeButton AvatarCategoryView?\nvar activeCategory String?\nvar activeSubCategory String?\nvar random",
  "app_type" : "life",
  "end_lineno" : "212",
  "ground_truth" : "                return customizations[0].key\r\n            }\r\n        }\r\n        return customizations[random.nextInt(customizations.size)].key\r\n    }",
  "context" : " @Suppress(\"ReturnCount\")\r\n    private fun chooseRandomKey(customizations: List<SetupCustomization>, weighFirstOption: Boolean): String {\r\n        if (customizations.isEmpty()) {\r\n            return \"\"\r\n        }\r\n        if (weighFirstOption) {\r\n            if (random.nextInt(10) > 3) {\r\n                return customizations[0].key\r\n            }\r\n        }\r\n        return customizations[random.nextInt(customizations.size)].key\r\n    }",
  "start_lineno" : "201",
  "methodName" : "chooseRandomKey",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt",
  "task_id" : "habitica-android/794",
  "prompt" : "import java.util.Random\nimport com.habitrpg.android.habitica.models.SetupCustomization\nimport com.habitrpg.android.habitica.R\n @Suppress(\"ReturnCount\")\r\n    private fun chooseRandomKey(customizations: List<SetupCustomization>, weighFirstOption: Boolean): String {\r\n        if (customizations.isEmpty()) {\r\n            return \"\"\r\n        }\r\n        if (weighFirstOption) {\r\n            if (random.nextInt(10) > 3) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "            binding?.imageView?.setImageDrawable(image)\r\n        }\r\n    }",
  "context" : "fun setImage(image: Drawable?) {\r\n        this.image = image\r\n        if (image != null) {\r\n            binding?.imageView?.setImageDrawable(image)\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "setImage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/795",
  "prompt" : "import android.graphics.drawable.Drawable\nfun setImage(image: Drawable?) {\r\n        this.image = image\r\n        if (image != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        this.titleImage = image\r\n        binding?.titleImageView?.setImageDrawable(image)\r\n    }",
  "context" : "fun setTitleImage(image: Drawable?) {\r\n        this.titleImage = image\r\n        binding?.titleImageView?.setImageDrawable(image)\r\n    }",
  "start_lineno" : "63",
  "methodName" : "setTitleImage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/796",
  "prompt" : "import android.graphics.drawable.Drawable\nfun setTitleImage(image: Drawable?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "71",
  "ground_truth" : "        this.subtitle = text\r\n        binding?.subtitleTextView?.text = text\r\n    }",
  "context" : "fun setSubtitle(text: String?) {\r\n        this.subtitle = text\r\n        binding?.subtitleTextView?.text = text\r\n    }",
  "start_lineno" : "68",
  "methodName" : "setSubtitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/797",
  "prompt" : "fun setSubtitle(text: String?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "        this.title = text\r\n        binding?.titleTextView?.text = text\r\n    }",
  "context" : "fun setTitle(text: String?) {\r\n        this.title = text\r\n        binding?.titleTextView?.text = text\r\n    }",
  "start_lineno" : "73",
  "methodName" : "setTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/798",
  "prompt" : "fun setTitle(text: String?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "        this.description = text\r\n        binding?.descriptionTextView?.text = text\r\n    }",
  "context" : "fun setDescription(text: String?) {\r\n        this.description = text\r\n        binding?.descriptionTextView?.text = text\r\n    }",
  "start_lineno" : "78",
  "methodName" : "setDescription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/799",
  "prompt" : "fun setDescription(text: String?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentIntroBinding?\nvar image Drawable?\nvar titleImage Drawable?\nvar subtitle String?\nvar title String?\nvar description String?\nvar backgroundColor Int?",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        this.backgroundColor = color\r\n        binding?.containerView?.setBackgroundColor(color)\r\n    }",
  "context" : "fun setBackgroundColor(color: Int) {\r\n        this.backgroundColor = color\r\n        binding?.containerView?.setBackgroundColor(color)\r\n    }",
  "start_lineno" : "83",
  "methodName" : "setBackgroundColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt",
  "task_id" : "habitica-android/800",
  "prompt" : "fun setBackgroundColor(color: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var activity SetupActivity?\nvar width Int\nvar binding FragmentSetupTasksBinding?\nvar adapter TaskSetupAdapter\nvar taskGroups List<List<String>>\nvar tasks List<List<Any>>\nvar user User?\nval TYPE_EXERCISE\nval TYPE_HEALTH\nval TYPE_WORK\nval TYPE_SCHOOL\nval TYPE_TEAMS\nval TYPE_CHORES\nval TYPE_CREATIVITY\nval TYPE_OTHER",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            binding?.speechBubble?.animateText(context?.getString(R.string.task_setup_description) ?: \"\")\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (context != null) {\r\n            binding?.speechBubble?.animateText(context?.getString(R.string.task_setup_description) ?: \"\")\r\n        }\r\n    }",
  "start_lineno" : "58",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt",
  "task_id" : "habitica-android/801",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (context != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var activity SetupActivity?\nvar width Int\nvar binding FragmentSetupTasksBinding?\nvar adapter TaskSetupAdapter\nvar taskGroups List<List<String>>\nvar tasks List<List<Any>>\nvar user User?\nval TYPE_EXERCISE\nval TYPE_HEALTH\nval TYPE_WORK\nval TYPE_SCHOOL\nval TYPE_TEAMS\nval TYPE_CHORES\nval TYPE_CREATIVITY\nval TYPE_OTHER",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "            updateAvatar()\r\n        }\r\n    }",
  "context" : "fun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView != null) {\r\n            updateAvatar()\r\n        }\r\n    }",
  "start_lineno" : "65",
  "methodName" : "setUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt",
  "task_id" : "habitica-android/802",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport android.view.View\nfun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var activity SetupActivity?\nvar width Int\nvar binding FragmentSetupTasksBinding?\nvar adapter TaskSetupAdapter\nvar taskGroups List<List<String>>\nvar tasks List<List<Any>>\nvar user User?\nval TYPE_EXERCISE\nval TYPE_HEALTH\nval TYPE_WORK\nval TYPE_SCHOOL\nval TYPE_TEAMS\nval TYPE_CHORES\nval TYPE_CREATIVITY\nval TYPE_OTHER",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }",
  "context" : "private fun updateAvatar() {\r\n        user?.let {\r\n            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }",
  "start_lineno" : "72",
  "methodName" : "updateAvatar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt",
  "task_id" : "habitica-android/803",
  "prompt" : "private fun updateAvatar() {\r\n        user?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var adapter SkillsRecyclerViewAdapter?\nvar selectedSkill Skill?\nvar binding FragmentRecyclerviewBinding?\nvar userViewModel MainUserViewModel\nval taskSelectionResult\nval memberSelectionResult",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "\r\n        this.tutorialStepIdentifier = \"skills\"\r\n        this.tutorialTexts = listOf(getString(R.string.tutorial_skills))\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        adapter = SkillsRecyclerViewAdapter()\r\n        adapter?.onUseSkill = { onSkillSelected(it) }\r\n\r\n        this.tutorialStepIdentifier = \"skills\"\r\n        this.tutorialTexts = listOf(getString(R.string.tutorial_skills))\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "49",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\skills\\SkillsFragment.kt",
  "task_id" : "habitica-android/804",
  "prompt" : "import com.habitrpg.android.habitica.ui.adapter.SkillsRecyclerViewAdapter\nimport com.habitrpg.android.habitica.models.Skill\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        adapter = SkillsRecyclerViewAdapter()\r\n        adapter?.onUseSkill = { onSkillSelected(it) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var adapter SkillsRecyclerViewAdapter?\nvar selectedSkill Skill?\nvar binding FragmentRecyclerviewBinding?\nvar userViewModel MainUserViewModel\nval taskSelectionResult\nval memberSelectionResult",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "        }\r\n        binding?.recyclerView?.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(mainActivity)\r\n        binding?.recyclerView?.adapter = adapter\r\n        binding?.recyclerView?.itemAnimator = SafeDefaultItemAnimator()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        userViewModel.user.observe(viewLifecycleOwner) { user ->\r\n            user?.let { checkUserLoadSkills(it) }\r\n        }\r\n        binding?.recyclerView?.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(mainActivity)\r\n        binding?.recyclerView?.adapter = adapter\r\n        binding?.recyclerView?.itemAnimator = SafeDefaultItemAnimator()\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\skills\\SkillsFragment.kt",
  "task_id" : "habitica-android/805",
  "prompt" : "import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Skill\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        userViewModel.user.observe(viewLifecycleOwner) { user ->\r\n            user?.let { checkUserLoadSkills(it) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var adapter SkillsRecyclerViewAdapter?\nvar selectedSkill Skill?\nvar binding FragmentRecyclerviewBinding?\nvar userViewModel MainUserViewModel\nval taskSelectionResult\nval memberSelectionResult",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "            if (skillResponse != null) {\r\n                displaySkillResult(skill, skillResponse)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun useSkill(skill: Skill?, taskId: String? = null) {\r\n        if (skill == null) {\r\n            return\r\n        }\r\n        lifecycleScope.launchCatching {\r\n            val skillResponse = if (taskId != null) {\r\n                userRepository.useSkill(skill.key, skill.target, taskId)\r\n            } else {\r\n                userRepository.useSkill(skill.key, skill.target)\r\n            }\r\n            if (skillResponse != null) {\r\n                displaySkillResult(skill, skillResponse)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "161",
  "methodName" : "useSkill",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\skills\\SkillsFragment.kt",
  "task_id" : "habitica-android/806",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.Skill\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun useSkill(skill: Skill?, taskId: String? = null) {\r\n        if (skill == null) {\r\n            return\r\n        }\r\n        lifecycleScope.launchCatching {\r\n            val skillResponse = if (taskId != null) {\r\n                userRepository.useSkill(skill.key, skill.target, taskId)\r\n            } else {\r\n                userRepository.useSkill(skill.key, skill.target)\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/807",
  "prompt" : "import com.habitrpg.android.habitica.extensions.inflate\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "173",
  "ground_truth" : "        val editMenuItem = menu.findItem(R.id.action_edit)\r\n        editMenuItem?.isVisible = isCreator\r\n        val endChallengeMenuItem = menu.findItem(R.id.action_end_challenge)\r\n        endChallengeMenuItem?.isVisible = isCreator\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_challenge_details, menu)\r\n        val editMenuItem = menu.findItem(R.id.action_edit)\r\n        editMenuItem?.isVisible = isCreator\r\n        val endChallengeMenuItem = menu.findItem(R.id.action_end_challenge)\r\n        endChallengeMenuItem?.isVisible = isCreator\r\n    }",
  "start_lineno" : "166",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/808",
  "prompt" : "import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_challenge_details, menu)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "232",
  "ground_truth" : "                challengeRepository.retrieveChallenge(id)\r\n                challengeRepository.retrieveChallengeTasks(id)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        challengeID?.let { id ->\r\n            lifecycleScope.launchCatching({\r\n                if (it is HttpException && it.code() == 404) {\r\n                    MainNavigationController.navigateBack()\r\n                }\r\n                ExceptionHandler.reportError(it)\r\n            }) {\r\n                challengeRepository.retrieveChallenge(id)\r\n                challengeRepository.retrieveChallengeTasks(id)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "220",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/809",
  "prompt" : "import retrofit2.HttpException\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.common.habitica.helpers.MainNavigationController\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        challengeID?.let { id ->\r\n            lifecycleScope.launchCatching({\r\n                if (it is HttpException && it.code() == 404) {\r\n                    MainNavigationController.navigateBack()\r\n                }\r\n                ExceptionHandler.reportError(it)\r\n            }) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "        binding?.creatorLabel?.username = challenge.leaderName\r\n\r\n        binding?.gemAmount?.text = challenge.prize.toString()\r\n        binding?.participantCount?.text = challenge.memberCount.toString()\r\n    }",
  "context" : "private fun set(challenge: Challenge) {\r\n        this.challenge = challenge\r\n        binding?.challengeName?.text = EmojiParser.parseEmojis(challenge.name)\r\n        binding?.challengeDescription?.setMarkdown(challenge.description)\r\n        binding?.creatorLabel?.username = challenge.leaderName\r\n\r\n        binding?.gemAmount?.text = challenge.prize.toString()\r\n        binding?.participantCount?.text = challenge.memberCount.toString()\r\n    }",
  "start_lineno" : "234",
  "methodName" : "set",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/810",
  "prompt" : "import com.habitrpg.common.habitica.helpers.setMarkdown\nimport com.habitrpg.common.habitica.helpers.EmojiParser\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate fun set(challenge: Challenge) {\r\n        this.challenge = challenge\r\n        binding?.challengeName?.text = EmojiParser.parseEmojis(challenge.name)\r\n        binding?.challengeDescription?.setMarkdown(challenge.description)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "251",
  "ground_truth" : "        binding?.creatorLabel?.tier = creator.contributor?.level ?: 0\r\n        binding?.creatorLabel?.username = creator.displayName\r\n        isCreator = creator.id == userViewModel.userID\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n    }",
  "context" : "private fun set(creator: Member?) {\r\n        if (creator == null) return\r\n        binding?.creatorAvatarview?.setAvatar(creator)\r\n        binding?.creatorLabel?.tier = creator.contributor?.level ?: 0\r\n        binding?.creatorLabel?.username = creator.displayName\r\n        isCreator = creator.id == userViewModel.userID\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n    }",
  "start_lineno" : "244",
  "methodName" : "set",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/811",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nprivate fun set(creator: Member?) {\r\n        if (creator == null) return\r\n        binding?.creatorAvatarview?.setAvatar(creator)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "258",
  "ground_truth" : "        binding?.leaveButton?.visibility = if (joined) View.VISIBLE else View.GONE\r\n        binding?.leaveButtonWrapper?.visibility = if (joined) View.VISIBLE else View.GONE\r\n    }",
  "context" : "private fun setJoined(joined: Boolean) {\r\n        binding?.joinButton?.visibility = if (!joined) View.VISIBLE else View.GONE\r\n        binding?.joinButtonWrapper?.visibility = if (!joined) View.VISIBLE else View.GONE\r\n        binding?.leaveButton?.visibility = if (joined) View.VISIBLE else View.GONE\r\n        binding?.leaveButtonWrapper?.visibility = if (joined) View.VISIBLE else View.GONE\r\n    }",
  "start_lineno" : "253",
  "methodName" : "setJoined",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/812",
  "prompt" : "import android.view.View\nprivate fun setJoined(joined: Boolean) {\r\n        binding?.joinButton?.visibility = if (!joined) View.VISIBLE else View.GONE\r\n        binding?.joinButtonWrapper?.visibility = if (!joined) View.VISIBLE else View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentChallengeDetailBinding?\nvar challengeID String?\nvar challenge Challenge?\nvar isCreator",
  "app_type" : "life",
  "end_lineno" : "326",
  "ground_truth" : "            Challenge.TASK_ORDER_HABITS -> context?.getString(if (count == 1) R.string.habit else R.string.habits)\r\n            Challenge.TASK_ORDER_REWARDS -> context?.getString(if (count == 1) R.string.reward else R.string.rewards)\r\n            else -> context?.getString(if (count == 1) R.string.todo else R.string.todos)\r\n        } ?: \"\"\r\n    }",
  "context" : "private fun getLabelByTypeAndCount(type: String, count: Int): String {\r\n        return when (type) {\r\n            Challenge.TASK_ORDER_DAILYS -> context?.getString(if (count == 1) R.string.daily else R.string.dailies)\r\n            Challenge.TASK_ORDER_HABITS -> context?.getString(if (count == 1) R.string.habit else R.string.habits)\r\n            Challenge.TASK_ORDER_REWARDS -> context?.getString(if (count == 1) R.string.reward else R.string.rewards)\r\n            else -> context?.getString(if (count == 1) R.string.todo else R.string.todos)\r\n        } ?: \"\"\r\n    }",
  "start_lineno" : "319",
  "methodName" : "getLabelByTypeAndCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt",
  "task_id" : "habitica-android/813",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.R\nprivate fun getLabelByTypeAndCount(type: String, count: Int): String {\r\n        return when (type) {\r\n            Challenge.TASK_ORDER_DAILYS -> context?.getString(if (count == 1) R.string.daily else R.string.dailies)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar filterGroups List<Group>\nvar currentFilter ChallengeFilterOptions?\nvar selectedGroupsCallback\nvar adapter ChallengesFilterRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        if (currentFilter != null) {\r\n            binding.challengeFilterOwned.isChecked = currentFilter.showOwned\r\n            binding.challengeFilterNotOwned.isChecked = currentFilter.notOwned\r\n        }\r\n    }",
  "context" : "fun bind(\r\n        filterGroups: List<Group>,\r\n        currentFilter: ChallengeFilterOptions?,\r\n        selectedGroupsCallback: ((ChallengeFilterOptions) -> Unit)?\r\n    ) {\r\n        this.filterGroups = filterGroups\r\n        this.currentFilter = currentFilter\r\n        this.selectedGroupsCallback = selectedGroupsCallback\r\n        fillChallengeGroups()\r\n\r\n        if (currentFilter != null) {\r\n            binding.challengeFilterOwned.isChecked = currentFilter.showOwned\r\n            binding.challengeFilterNotOwned.isChecked = currentFilter.notOwned\r\n        }\r\n    }",
  "start_lineno" : "34",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeFilterDialogHolder.kt",
  "task_id" : "habitica-android/814",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nfun bind(\r\n        filterGroups: List<Group>,\r\n        currentFilter: ChallengeFilterOptions?,\r\n        selectedGroupsCallback: ((ChallengeFilterOptions) -> Unit)?\r\n    ) {\r\n        this.filterGroups = filterGroups\r\n        this.currentFilter = currentFilter\r\n        this.selectedGroupsCallback = selectedGroupsCallback\r\n        fillChallengeGroups()\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar filterGroups List<Group>\nvar currentFilter ChallengeFilterOptions?\nvar selectedGroupsCallback\nvar adapter ChallengesFilterRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "            adapter?.checkedEntries?.addAll(currentFilter.showByGroups)\r\n        }\r\n\r\n        binding.challengeFilterRecyclerView.adapter = adapter\r\n    }",
  "context" : "private fun fillChallengeGroups() {\r\n        binding.challengeFilterRecyclerView.layoutManager = LinearLayoutManager(context)\r\n        adapter = ChallengesFilterRecyclerViewAdapter(filterGroups)\r\n        currentFilter?.let { currentFilter ->\r\n            adapter?.checkedEntries?.addAll(currentFilter.showByGroups)\r\n        }\r\n\r\n        binding.challengeFilterRecyclerView.adapter = adapter\r\n    }",
  "start_lineno" : "50",
  "methodName" : "fillChallengeGroups",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeFilterDialogHolder.kt",
  "task_id" : "habitica-android/815",
  "prompt" : "import com.habitrpg.android.habitica.ui.adapter.social.challenges.ChallengesFilterRecyclerViewAdapter\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport android.view.View\nprivate fun fillChallengeGroups() {\r\n        binding.challengeFilterRecyclerView.layoutManager = LinearLayoutManager(context)\r\n        adapter = ChallengesFilterRecyclerViewAdapter(filterGroups)\r\n        currentFilter?.let { currentFilter ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar filterGroups List<Group>\nvar currentFilter ChallengeFilterOptions?\nvar selectedGroupsCallback\nvar adapter ChallengesFilterRecyclerViewAdapter?",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        this.adapter?.checkedEntries?.clear()\r\n        adapter?.checkedEntries?.addAll(filterGroups)\r\n    }",
  "context" : "private fun allClicked() {\r\n        this.adapter?.checkedEntries?.clear()\r\n        adapter?.checkedEntries?.addAll(filterGroups)\r\n    }",
  "start_lineno" : "60",
  "methodName" : "allClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeFilterDialogHolder.kt",
  "task_id" : "habitica-android/816",
  "prompt" : "private fun allClicked() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar challengeAdapter ChallengesListViewAdapter?\nvar viewUserChallengesOnly Boolean\nvar nextPageToLoad\nvar loadedAllData\nvar challenges List<Challenge>?\nvar filterGroups MutableList<Group>?\nvar filterOptions ChallengeFilterOptions?",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "70",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt",
  "task_id" : "habitica-android/817",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar challengeAdapter ChallengesListViewAdapter?\nvar viewUserChallengesOnly Boolean\nvar nextPageToLoad\nvar loadedAllData\nvar challenges List<Challenge>?\nvar filterGroups MutableList<Group>?\nvar filterOptions ChallengeFilterOptions?",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "            ChallengesOverviewFragmentDirections.openChallengeDetail(\r\n                challengeID\r\n            )\r\n        )\r\n    }",
  "context" : "private fun openDetailFragment(challengeID: String) {\r\n        MainNavigationController.navigate(\r\n            ChallengesOverviewFragmentDirections.openChallengeDetail(\r\n                challengeID\r\n            )\r\n        )\r\n    }",
  "start_lineno" : "124",
  "methodName" : "openDetailFragment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt",
  "task_id" : "habitica-android/818",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MainNavigationController\nprivate fun openDetailFragment(challengeID: String) {\r\n        MainNavigationController.navigate(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar challengeAdapter ChallengesListViewAdapter?\nvar viewUserChallengesOnly Boolean\nvar nextPageToLoad\nvar loadedAllData\nvar challenges List<Challenge>?\nvar filterGroups MutableList<Group>?\nvar filterOptions ChallengeFilterOptions?",
  "app_type" : "life",
  "end_lineno" : "136",
  "ground_truth" : "        loadedAllData = false\r\n        retrieveChallengesPage(true)\r\n    }",
  "context" : "override fun onRefresh() {\r\n        nextPageToLoad = 0\r\n        loadedAllData = false\r\n        retrieveChallengesPage(true)\r\n    }",
  "start_lineno" : "132",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt",
  "task_id" : "habitica-android/819",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        nextPageToLoad = 0\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar challengeAdapter ChallengesListViewAdapter?\nvar viewUserChallengesOnly Boolean\nvar nextPageToLoad\nvar loadedAllData\nvar challenges List<Challenge>?\nvar filterGroups MutableList<Group>?\nvar filterOptions ChallengeFilterOptions?",
  "app_type" : "life",
  "end_lineno" : "185",
  "ground_truth" : "            ) {\r\n                changeFilter(it)\r\n            }\r\n        }\r\n    }",
  "context" : "internal fun showFilterDialog() {\r\n        activity?.let {\r\n            ChallengeFilterDialogHolder.showDialog(\r\n                it,\r\n                filterGroups ?: emptyList(),\r\n                filterOptions\r\n            ) {\r\n                changeFilter(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "175",
  "methodName" : "showFilterDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt",
  "task_id" : "habitica-android/820",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.Challenge\ninternal fun showFilterDialog() {\r\n        activity?.let {\r\n            ChallengeFilterDialogHolder.showDialog(\r\n                it,\r\n                filterGroups ?: emptyList(),\r\n                filterOptions\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentRefreshRecyclerviewBinding?\nvar challengeAdapter ChallengesListViewAdapter?\nvar viewUserChallengesOnly Boolean\nvar nextPageToLoad\nvar loadedAllData\nvar challenges List<Challenge>?\nvar filterGroups MutableList<Group>?\nvar filterOptions ChallengeFilterOptions?",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "        filterOptions = challengeFilterOptions\r\n        challengeAdapter?.filter(challengeFilterOptions)\r\n    }",
  "context" : "private fun changeFilter(challengeFilterOptions: ChallengeFilterOptions) {\r\n        filterOptions = challengeFilterOptions\r\n        challengeAdapter?.filter(challengeFilterOptions)\r\n    }",
  "start_lineno" : "187",
  "methodName" : "changeFilter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt",
  "task_id" : "habitica-android/821",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Challenge\nprivate fun changeFilter(challengeFilterOptions: ChallengeFilterOptions) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar binding FragmentViewpagerBinding?\nvar statePagerAdapter FragmentStateAdapter?\nvar userChallengesFragment ChallengeListFragment?\nvar availableChallengesFragment ChallengeListFragment?",
  "app_type" : "life",
  "end_lineno" : "49",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "41",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt",
  "task_id" : "habitica-android/822",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar binding FragmentViewpagerBinding?\nvar statePagerAdapter FragmentStateAdapter?\nvar userChallengesFragment ChallengeListFragment?\nvar availableChallengesFragment ChallengeListFragment?",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        userChallengesFragment?.setViewUserChallengesOnly(true)\r\n\r\n        availableChallengesFragment?.setViewUserChallengesOnly(false)\r\n        setViewPagerAdapter()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        userChallengesFragment?.setViewUserChallengesOnly(true)\r\n\r\n        availableChallengesFragment?.setViewUserChallengesOnly(false)\r\n        setViewPagerAdapter()\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt",
  "task_id" : "habitica-android/823",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar binding FragmentViewpagerBinding?\nvar statePagerAdapter FragmentStateAdapter?\nvar userChallengesFragment ChallengeListFragment?\nvar availableChallengesFragment ChallengeListFragment?",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        super.onResume()\r\n        getActiveFragment()?.retrieveChallengesPage()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        getActiveFragment()?.retrieveChallengesPage()\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt",
  "task_id" : "habitica-android/824",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar binding FragmentViewpagerBinding?\nvar statePagerAdapter FragmentStateAdapter?\nvar userChallengesFragment ChallengeListFragment?\nvar availableChallengesFragment ChallengeListFragment?",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        challengeRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "65",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt",
  "task_id" : "habitica-android/825",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var challengeRepository ChallengeRepository\nvar binding FragmentViewpagerBinding?\nvar statePagerAdapter FragmentStateAdapter?\nvar userChallengesFragment ChallengeListFragment?\nvar availableChallengesFragment ChallengeListFragment?",
  "app_type" : "life",
  "end_lineno" : "111",
  "ground_truth" : "            userChallengesFragment\r\n        } else {\r\n            availableChallengesFragment\r\n        }\r\n    }",
  "context" : "private fun getActiveFragment(): ChallengeListFragment? {\r\n        return if (binding?.viewPager?.currentItem == 0) {\r\n            userChallengesFragment\r\n        } else {\r\n            availableChallengesFragment\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "getActiveFragment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt",
  "task_id" : "habitica-android/826",
  "prompt" : "import androidx.fragment.app.Fragment\nprivate fun getActiveFragment(): ChallengeListFragment? {\r\n        return if (binding?.viewPager?.currentItem == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "139",
  "ground_truth" : "        super.onResume()\r\n        setNavigatedToFragment()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        setNavigatedToFragment()\r\n    }",
  "start_lineno" : "136",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/827",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "147",
  "ground_truth" : "        if (previousMessage.contains(\"@$username\")) {\r\n            return\r\n        }\r\n        binding?.chatBarView?.message = \"@$username $previousMessage\"\r\n    }",
  "context" : "private fun setReplyTo(username: String?) {\r\n        val previousMessage = binding?.chatBarView?.message ?: \"\"\r\n        if (previousMessage.contains(\"@$username\")) {\r\n            return\r\n        }\r\n        binding?.chatBarView?.message = \"@$username $previousMessage\"\r\n    }",
  "start_lineno" : "141",
  "methodName" : "setReplyTo",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/828",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun setReplyTo(username: String?) {\r\n        val previousMessage = binding?.chatBarView?.message ?: \"\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "156",
  "ground_truth" : "                binding?.recyclerView?.scrollToPosition(0)\r\n            }\r\n            isFirstRefresh = false\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        viewModel.retrieveGroupChat {\r\n            if (isScrolledToBottom || isFirstRefresh) {\r\n                binding?.recyclerView?.scrollToPosition(0)\r\n            }\r\n            isFirstRefresh = false\r\n        }\r\n    }",
  "start_lineno" : "149",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/829",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun refresh() {\r\n        viewModel.retrieveGroupChat {\r\n            if (isScrolledToBottom || isFirstRefresh) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "        navigatedOnceToFragment = true\r\n        markMessagesAsSeen()\r\n    }",
  "context" : "fun setNavigatedToFragment() {\r\n        navigatedOnceToFragment = true\r\n        markMessagesAsSeen()\r\n    }",
  "start_lineno" : "158",
  "methodName" : "setNavigatedToFragment",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/830",
  "prompt" : "fun setNavigatedToFragment() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "            viewModel.markMessagesSeen()\r\n        }\r\n    }",
  "context" : "private fun markMessagesAsSeen() {\r\n        if (navigatedOnceToFragment) {\r\n            viewModel.markMessagesSeen()\r\n        }\r\n    }",
  "start_lineno" : "163",
  "methodName" : "markMessagesAsSeen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/831",
  "prompt" : "private fun markMessagesAsSeen() {\r\n        if (navigatedOnceToFragment) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "208",
  "ground_truth" : "                viewModel.deleteMessage(chatMessage)\r\n            }\r\n            dialog.show()\r\n        }\r\n    }",
  "context" : "private fun showDeleteConfirmationDialog(chatMessage: ChatMessage) {\r\n        val context = context\r\n        if (context != null) {\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.confirm_delete_tag_title)\r\n            dialog.setMessage(R.string.confirm_delete_tag_message)\r\n            dialog.addButton(R.string.yes, true, true) { _, _ ->\r\n                viewModel.deleteMessage(chatMessage)\r\n            }\r\n            dialog.show()\r\n        }\r\n    }",
  "start_lineno" : "197",
  "methodName" : "showDeleteConfirmationDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/832",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.R\nprivate fun showDeleteConfirmationDialog(chatMessage: ChatMessage) {\r\n        val context = context\r\n        if (context != null) {\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.confirm_delete_tag_title)\r\n            dialog.setMessage(R.string.confirm_delete_tag_message)\r\n            dialog.addButton(R.string.yes, true, true) { _, _ ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "217",
  "ground_truth" : "\r\n        viewModel.gotNewMessages = true\r\n\r\n        markMessagesAsSeen()\r\n    }",
  "context" : "private fun setChatMessages(chatMessages: List<ChatMessage>) {\r\n        chatAdapter?.data = chatMessages\r\n        binding?.chatBarView?.chatMessages = chatMessages\r\n\r\n        viewModel.gotNewMessages = true\r\n\r\n        markMessagesAsSeen()\r\n    }",
  "start_lineno" : "210",
  "methodName" : "setChatMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/833",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\nimport android.view.View\nprivate fun setChatMessages(chatMessages: List<ChatMessage>) {\r\n        chatAdapter?.data = chatMessages\r\n        binding?.chatBarView?.chatMessages = chatMessages\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentChatBinding?\nval viewModel GroupViewModel\nvar configManager AppConfigManager\nvar socialRepository SocialRepository\nvar chatAdapter ChatRecyclerViewAdapter?\nvar navigatedOnceToFragment\nvar isScrolledToBottom\nvar isFirstRefresh\nvar autocompleteContext String",
  "app_type" : "life",
  "end_lineno" : "224",
  "ground_truth" : "            { binding?.recyclerView?.scrollToPosition(0) }\r\n        ) { binding?.chatBarView?.message = chatText }\r\n    }",
  "context" : "private fun sendChatMessage(chatText: String) {\r\n        viewModel.postGroupChat(\r\n            chatText,\r\n            { binding?.recyclerView?.scrollToPosition(0) }\r\n        ) { binding?.chatBarView?.message = chatText }\r\n    }",
  "start_lineno" : "219",
  "methodName" : "sendChatMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt",
  "task_id" : "habitica-android/834",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\nprivate fun sendChatMessage(chatText: String) {\r\n        viewModel.postGroupChat(\r\n            chatText,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar binding FragmentGuildDetailBinding?\nvar challengeRepository ChallengeRepository\nvar userRepository UserRepository\nval viewModel GroupViewModel\nval sendInvitesResult",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "        binding?.leaderAvatarView?.setAvatar(leader)\r\n        binding?.leaderProfileName?.username = leader.displayName\r\n        binding?.leaderProfileName?.tier = leader.contributor?.level ?: 0\r\n        binding?.leaderUsername?.text = leader.formattedUsername\r\n    }",
  "context" : "private fun setLeader(leader: Member?) {\r\n        if (leader == null) {\r\n            return\r\n        }\r\n        binding?.leaderAvatarView?.setAvatar(leader)\r\n        binding?.leaderProfileName?.username = leader.displayName\r\n        binding?.leaderProfileName?.tier = leader.contributor?.level ?: 0\r\n        binding?.leaderUsername?.text = leader.formattedUsername\r\n    }",
  "start_lineno" : "89",
  "methodName" : "setLeader",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt",
  "task_id" : "habitica-android/835",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nprivate fun setLeader(leader: Member?) {\r\n        if (leader == null) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar binding FragmentGuildDetailBinding?\nvar challengeRepository ChallengeRepository\nvar userRepository UserRepository\nval viewModel GroupViewModel\nval sendInvitesResult",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "        binding?.joinButton?.visibility = if (isMember == true) View.GONE else View.VISIBLE\r\n        binding?.leaveButton?.visibility = if (isMember == true) View.VISIBLE else View.GONE\r\n    }",
  "context" : "private fun updateMembership(isMember: Boolean?) {\r\n        binding?.joinButton?.visibility = if (isMember == true) View.GONE else View.VISIBLE\r\n        binding?.leaveButton?.visibility = if (isMember == true) View.VISIBLE else View.GONE\r\n    }",
  "start_lineno" : "99",
  "methodName" : "updateMembership",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt",
  "task_id" : "habitica-android/836",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nprivate fun updateMembership(isMember: Boolean?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar binding FragmentGuildDetailBinding?\nvar challengeRepository ChallengeRepository\nvar userRepository UserRepository\nval viewModel GroupViewModel\nval sendInvitesResult",
  "app_type" : "life",
  "end_lineno" : "133",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        viewModel.retrieveGroup {\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "129",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt",
  "task_id" : "habitica-android/837",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nprivate fun refresh() {\r\n        viewModel.retrieveGroup {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar binding FragmentGuildDetailBinding?\nvar challengeRepository ChallengeRepository\nvar userRepository UserRepository\nval viewModel GroupViewModel\nval sendInvitesResult",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "        binding?.guildMembersText?.text = guild?.memberCount.toString()\r\n        binding?.guildBankText?.text = guild?.gemCount.toString()\r\n        binding?.guildSummary?.setMarkdown(guild?.summary)\r\n        binding?.guildDescription?.setMarkdown(guild?.description)\r\n    }",
  "context" : "private fun updateGuild(guild: Group?) {\r\n        binding?.titleView?.text = guild?.name\r\n        binding?.guildMembersIcon?.setImageBitmap(HabiticaIconsHelper.imageOfGuildCrestMedium((guild?.memberCount ?: 0).toFloat()))\r\n        binding?.guildMembersText?.text = guild?.memberCount.toString()\r\n        binding?.guildBankText?.text = guild?.gemCount.toString()\r\n        binding?.guildSummary?.setMarkdown(guild?.summary)\r\n        binding?.guildDescription?.setMarkdown(guild?.description)\r\n    }",
  "start_lineno" : "188",
  "methodName" : "updateGuild",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt",
  "task_id" : "habitica-android/838",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.HabiticaIconsHelper\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\nimport android.view.View\nprivate fun updateGuild(guild: Group?) {\r\n        binding?.titleView?.text = guild?.name\r\n        binding?.guildMembersIcon?.setImageBitmap(HabiticaIconsHelper.imageOfGuildCrestMedium((guild?.memberCount ?: 0).toFloat()))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar binding FragmentGuildDetailBinding?\nvar challengeRepository ChallengeRepository\nvar userRepository UserRepository\nval viewModel GroupViewModel\nval sendInvitesResult",
  "app_type" : "life",
  "end_lineno" : "204",
  "ground_truth" : "\r\n            val fragment = GuildDetailFragment()\r\n            fragment.arguments = args\r\n            return fragment\r\n        }",
  "context" : "fun newInstance(): GuildDetailFragment {\r\n            val args = Bundle()\r\n\r\n            val fragment = GuildDetailFragment()\r\n            fragment.arguments = args\r\n            return fragment\r\n        }",
  "start_lineno" : "198",
  "methodName" : "newInstance",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt",
  "task_id" : "habitica-android/839",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.os.Bundle\nfun newInstance(): GuildDetailFragment {\r\n            val args = Bundle()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel GroupViewModel\nvar guildInformationFragment GuildDetailFragment?\nvar chatFragment ChatFragment?\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildFragment.kt",
  "task_id" : "habitica-android/840",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel GroupViewModel\nvar guildInformationFragment GuildDetailFragment?\nvar chatFragment ChatFragment?\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "        arguments?.let {\r\n            val args = GuildFragmentArgs.fromBundle(it)\r\n            binding?.viewPager?.setCurrentItem(args.tabToOpen, false)\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n\r\n        arguments?.let {\r\n            val args = GuildFragmentArgs.fromBundle(it)\r\n            binding?.viewPager?.setCurrentItem(args.tabToOpen, false)\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildFragment.kt",
  "task_id" : "habitica-android/841",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel GroupViewModel\nvar guildInformationFragment GuildDetailFragment?\nvar chatFragment ChatFragment?\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "            if (childFragment is GuildDetailFragment) {\r\n                guildInformationFragment = childFragment\r\n            }\r\n        }\r\n    }",
  "context" : "private fun setFragments() {\r\n        val fragments = childFragmentManager.fragments\r\n        for (childFragment in fragments) {\r\n            if (childFragment is ChatFragment) {\r\n                chatFragment = childFragment\r\n            }\r\n            if (childFragment is GuildDetailFragment) {\r\n                guildInformationFragment = childFragment\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "84",
  "methodName" : "setFragments",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildFragment.kt",
  "task_id" : "habitica-android/842",
  "prompt" : "import com.habitrpg.android.habitica.ui.fragments.social.ChatFragment\nimport androidx.fragment.app.Fragment\nprivate fun setFragments() {\r\n        val fragments = childFragmentManager.fragments\r\n        for (childFragment in fragments) {\r\n            if (childFragment is ChatFragment) {\r\n                chatFragment = childFragment\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel GroupViewModel\nvar guildInformationFragment GuildDetailFragment?\nvar chatFragment ChatFragment?\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "225",
  "ground_truth" : "            chatFragment?.autocompleteContext = \"publicGuild\"\r\n        } else {\r\n            chatFragment?.autocompleteContext = \"privateGuild\"\r\n        }\r\n    }",
  "context" : "private fun setGroup(group: Group?) {\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n\r\n        if (viewModel.isPublicGuild) {\r\n            chatFragment?.autocompleteContext = \"publicGuild\"\r\n        } else {\r\n            chatFragment?.autocompleteContext = \"privateGuild\"\r\n        }\r\n    }",
  "start_lineno" : "217",
  "methodName" : "setGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildFragment.kt",
  "task_id" : "habitica-android/843",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.Menu\nimport android.app.Activity\nprivate fun setGroup(group: Group?) {\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n\r\n        if (viewModel.isPublicGuild) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "63",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/844",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "        }\r\n        super.onResume()\r\n    }",
  "context" : "override fun onResume() {\r\n        if (viewModel.recipientID?.isNotBlank() != true && viewModel.recipientUsername?.isNotBlank() != true) {\r\n            parentFragmentManager.popBackStack()\r\n        }\r\n        super.onResume()\r\n    }",
  "start_lineno" : "125",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/845",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        if (viewModel.recipientID?.isNotBlank() != true && viewModel.recipientUsername?.isNotBlank() != true) {\r\n            parentFragmentManager.popBackStack()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "\r\n        super.onAttach(context)\r\n    }",
  "context" : "override fun onAttach(context: Context) {\r\n        view?.invalidate()\r\n        view?.forceLayout()\r\n\r\n        super.onAttach(context)\r\n    }",
  "start_lineno" : "132",
  "methodName" : "onAttach",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/846",
  "prompt" : "import android.content.Context\noverride fun onAttach(context: Context) {\r\n        view?.invalidate()\r\n        view?.forceLayout()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "142",
  "ground_truth" : "        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "139",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/847",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "147",
  "ground_truth" : "        this.mainActivity?.menuInflater?.inflate(R.menu.inbox_chat, menu)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        this.mainActivity?.menuInflater?.inflate(R.menu.inbox_chat, menu)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }",
  "start_lineno" : "144",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/848",
  "prompt" : "import android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "157",
  "ground_truth" : "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.open_profile -> {\r\n                openProfile()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "149",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/849",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.open_profile -> {\r\n                openProfile()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentInboxMessageListBinding?\nvar socialRepository SocialRepository\nvar configManager AppConfigManager\nvar chatAdapter InboxAdapter?\nval viewModel InboxViewModel",
  "app_type" : "life",
  "end_lineno" : "169",
  "ground_truth" : "        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            socialRepository.retrieveInboxMessages(viewModel.recipientID ?: \"\", 0)\r\n            viewModel.invalidateDataSource()\r\n        }\r\n    }",
  "context" : "private fun refreshConversation() {\r\n        if (viewModel.memberID?.isNotBlank() != true) { return }\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            socialRepository.retrieveInboxMessages(viewModel.recipientID ?: \"\", 0)\r\n            viewModel.invalidateDataSource()\r\n        }\r\n    }",
  "start_lineno" : "163",
  "methodName" : "refreshConversation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt",
  "task_id" : "habitica-android/850",
  "prompt" : "private fun refreshConversation() {\r\n        if (viewModel.memberID?.isNotBlank() != true) { return }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        lifecycleScope.launchCatching {\r\n            socialRepository.markPrivateMessagesRead(null)\r\n        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        lifecycleScope.launchCatching {\r\n            socialRepository.markPrivateMessagesRead(null)\r\n        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "53",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/851",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "        }\r\n\r\n        loadMessages()\r\n        retrieveMessages()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.inboxRefreshLayout?.setOnRefreshListener(this)\r\n\r\n        userViewModel.user.observe(viewLifecycleOwner) {\r\n            binding?.optOutView?.visibility = if (it?.inbox?.optOut == true) View.VISIBLE else View.GONE\r\n        }\r\n\r\n        loadMessages()\r\n        retrieveMessages()\r\n    }",
  "start_lineno" : "65",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/852",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.inboxRefreshLayout?.setOnRefreshListener(this)\r\n\r\n        userViewModel.user.observe(viewLifecycleOwner) {\r\n            binding?.optOutView?.visibility = if (it?.inbox?.optOut == true) View.VISIBLE else View.GONE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "            socialRepository.getInboxConversations().collect {\r\n                setInboxMessages(it)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun loadMessages() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            socialRepository.getInboxConversations().collect {\r\n                setInboxMessages(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "78",
  "methodName" : "loadMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/853",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.lifecycleScope\nprivate fun loadMessages() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "86",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/854",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "        tintMenuIcon(item)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        this.mainActivity?.menuInflater?.inflate(R.menu.inbox, menu)\r\n        val item = menu.findItem(R.id.send_message)\r\n        tintMenuIcon(item)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }",
  "start_lineno" : "91",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/855",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        this.mainActivity?.menuInflater?.inflate(R.menu.inbox, menu)\r\n        val item = menu.findItem(R.id.send_message)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.send_message -> {\r\n                openNewMessageDialog()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "98",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/856",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.send_message -> {\r\n                openNewMessageDialog()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "            binding?.inboxRefreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "private fun retrieveMessages() {\r\n        lifecycleScope.launchCatching {\r\n            socialRepository.retrieveInboxConversations()\r\n            binding?.inboxRefreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "150",
  "methodName" : "retrieveMessages",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/857",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.InboxConversation\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun retrieveMessages() {\r\n        lifecycleScope.launchCatching {\r\n            socialRepository.retrieveInboxConversations()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "160",
  "ground_truth" : "        binding?.inboxRefreshLayout?.isRefreshing = true\r\n        retrieveMessages()\r\n    }",
  "context" : "override fun onRefresh() {\r\n        binding?.inboxRefreshLayout?.isRefreshing = true\r\n        retrieveMessages()\r\n    }",
  "start_lineno" : "157",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/858",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentInboxBinding?",
  "app_type" : "life",
  "end_lineno" : "203",
  "ground_truth" : "        val replyToUserName = displaynameView?.username ?: \"\"\r\n        openInboxMessages(v.tag.toString(), replyToUserName)\r\n    }",
  "context" : "override fun onClick(v: View) {\r\n        val displaynameView = v.findViewById(R.id.display_name_textview) as? UsernameLabel\r\n        val replyToUserName = displaynameView?.username ?: \"\"\r\n        openInboxMessages(v.tag.toString(), replyToUserName)\r\n    }",
  "start_lineno" : "199",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt",
  "task_id" : "habitica-android/859",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.UsernameLabel\nimport com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onClick(v: View) {\r\n        val displaynameView = v.findViewById(R.id.display_name_textview) as? UsernameLabel\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentNoPartyBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\NoPartyFragmentFragment.kt",
  "task_id" : "habitica-android/860",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentNoPartyBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "178",
  "ground_truth" : "                    socialRepository.retrievePartyMembers(group?.id ?: \"\", true)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            val user = userRepository.retrieveUser(false, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n            if (user?.hasParty == true) {\r\n                lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n                    val group = socialRepository.retrieveGroup(\"party\")\r\n                    socialRepository.retrievePartyMembers(group?.id ?: \"\", true)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "167",
  "methodName" : "refresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\NoPartyFragmentFragment.kt",
  "task_id" : "habitica-android/861",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            val user = userRepository.retrieveUser(false, true)\r\n            binding?.refreshLayout?.isRefreshing = false\r\n            if (user?.hasParty == true) {\r\n                lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n                    val group = socialRepository.retrieveGroup(\"party\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar configManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar binding FragmentNoPartyBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        socialRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "180",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\NoPartyFragmentFragment.kt",
  "task_id" : "habitica-android/862",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "86",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/863",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "private fun refreshParty() {\r\n        viewModel.retrieveGroup {\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "157",
  "methodName" : "refreshParty",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/864",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nprivate fun refreshParty() {\r\n        viewModel.retrieveGroup {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "458",
  "ground_truth" : "        fragment.itemType = \"quests\"\r\n        fragment.itemTypeText = getString(R.string.quest)\r\n        fragment.isModal = true\r\n        fragment.show(parentFragmentManager, \"questDialog\")\r\n    }",
  "context" : "private fun inviteNewQuest() {\r\n        val fragment = ItemDialogFragment()\r\n        fragment.itemType = \"quests\"\r\n        fragment.itemTypeText = getString(R.string.quest)\r\n        fragment.isModal = true\r\n        fragment.show(parentFragmentManager, \"questDialog\")\r\n    }",
  "start_lineno" : "452",
  "methodName" : "inviteNewQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/865",
  "prompt" : "import com.habitrpg.android.habitica.ui.fragments.inventory.items.ItemDialogFragment\nimport androidx.fragment.app.Fragment\nprivate fun inviteNewQuest() {\r\n        val fragment = ItemDialogFragment()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "530",
  "ground_truth" : "        HapticFeedbackManager.tap(requireView())\r\n        viewModel.acceptQuest()\r\n    }",
  "context" : "private fun onQuestAccept() {\r\n        HapticFeedbackManager.tap(requireView())\r\n        viewModel.acceptQuest()\r\n    }",
  "start_lineno" : "527",
  "methodName" : "onQuestAccept",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/866",
  "prompt" : "private fun onQuestAccept() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "535",
  "ground_truth" : "        HapticFeedbackManager.tap(requireView())\r\n        viewModel.rejectQuest()\r\n    }",
  "context" : "private fun onQuestReject() {\r\n        HapticFeedbackManager.tap(requireView())\r\n        viewModel.rejectQuest()\r\n    }",
  "start_lineno" : "532",
  "methodName" : "onQuestReject",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/867",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun onQuestReject() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar challengeRepository ChallengeRepository\nvar socialRepository SocialRepository\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository",
  "app_type" : "life",
  "end_lineno" : "545",
  "ground_truth" : "        dialog.setContentView(R.layout.quest_mechanics_dialog)\r\n        dialog.show()\r\n    }",
  "context" : "private fun showQuestMechanicsDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(requireContext())\r\n        dialog.setContentView(R.layout.quest_mechanics_dialog)\r\n        dialog.show()\r\n    }",
  "start_lineno" : "541",
  "methodName" : "showQuestMechanicsDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt",
  "task_id" : "habitica-android/868",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaBottomSheetDialog\nprivate fun showQuestMechanicsDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(requireContext())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var detailFragment PartyDetailFragment?\nvar viewPagerAdapter FragmentStateAdapter?\nval viewModel PartyViewModel\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt",
  "task_id" : "habitica-android/869",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var detailFragment PartyDetailFragment?\nvar viewPagerAdapter FragmentStateAdapter?\nval viewModel PartyViewModel\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "            this.tutorialStepIdentifier = \"party\"\r\n            this.tutorialTexts = listOf(getString(R.string.tutorial_party_created))\r\n        }\r\n        super.onResume()\r\n    }",
  "context" : "override fun onResume() {\r\n        if (viewModel.isLeader) {\r\n            this.tutorialStepIdentifier = \"party\"\r\n            this.tutorialTexts = listOf(getString(R.string.tutorial_party_created))\r\n        }\r\n        super.onResume()\r\n    }",
  "start_lineno" : "82",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt",
  "task_id" : "habitica-android/870",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        if (viewModel.isLeader) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var detailFragment PartyDetailFragment?\nvar viewPagerAdapter FragmentStateAdapter?\nval viewModel PartyViewModel\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "            tabLayout?.visibility = View.VISIBLE\r\n        }\r\n\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n    }",
  "context" : "private fun updateGroupUI(group: Group?) {\r\n        viewPagerAdapter?.notifyDataSetChanged()\r\n\r\n        if (group == null) {\r\n            tabLayout?.visibility = View.GONE\r\n            return\r\n        } else {\r\n            tabLayout?.visibility = View.VISIBLE\r\n        }\r\n\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n    }",
  "start_lineno" : "90",
  "methodName" : "updateGroupUI",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt",
  "task_id" : "habitica-android/871",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.View\nprivate fun updateGroupUI(group: Group?) {\r\n        viewPagerAdapter?.notifyDataSetChanged()\r\n\r\n        if (group == null) {\r\n            tabLayout?.visibility = View.GONE\r\n            return\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var detailFragment PartyDetailFragment?\nvar viewPagerAdapter FragmentStateAdapter?\nval viewModel PartyViewModel\nvar binding FragmentViewpagerBinding?\nval groupFormResult",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            menu.findItem(R.id.menu_guild_leave).isVisible = group?.memberCount != 1\r\n        } else {\r\n            inflater.inflate(R.menu.menu_party, menu)\r\n        }\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        val group = viewModel.getGroupData().value\r\n        if (viewModel.isLeader) {\r\n            inflater.inflate(R.menu.menu_party_admin, menu)\r\n            menu.findItem(R.id.menu_guild_leave).isVisible = group?.memberCount != 1\r\n        } else {\r\n            inflater.inflate(R.menu.menu_party, menu)\r\n        }\r\n    }",
  "start_lineno" : "103",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt",
  "task_id" : "habitica-android/872",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        val group = viewModel.getGroupData().value\r\n        if (viewModel.isLeader) {\r\n            inflater.inflate(R.menu.menu_party_admin, menu)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val invites\nval viewModel PartyInviteViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        UUID.fromString(name)\r\n    } catch (_: IllegalArgumentException) {\r\n        null\r\n    }\r\n}",
  "context" : "fun uUIDFromStringOrNull(name: String): UUID? {\r\n    return try {\r\n        UUID.fromString(name)\r\n    } catch (_: IllegalArgumentException) {\r\n        null\r\n    }\r\n}",
  "start_lineno" : "73",
  "methodName" : "uUIDFromStringOrNull",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInviteFragment.kt",
  "task_id" : "habitica-android/873",
  "prompt" : "import java.util.UUID\nfun uUIDFromStringOrNull(name: String): UUID? {\r\n    return try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val invites\nval viewModel PartyInviteViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "140",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return view\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r\n                PartyInviteView(viewModel) {\r\n                    MainNavigationController.navigateBack()\r\n                }\r\n            }\r\n        }\r\n        return view\r\n    }",
  "start_lineno" : "126",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInviteFragment.kt",
  "task_id" : "habitica-android/874",
  "prompt" : "import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport com.habitrpg.common.habitica.helpers.MainNavigationController\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r\n                PartyInviteView(viewModel) {\r\n                    MainNavigationController.navigateBack()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?\nval viewModel PartyViewModel",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "                binding?.viewPager?.adapter?.notifyDataSetChanged()\r\n                usesTabLayout = viewModel.isLeader\r\n            }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        showsBackButton = true\r\n\r\n        viewModel.loadPartyID()\r\n\r\n        viewModel.getGroupData()\r\n            .distinctUntilChanged()\r\n            .observe(viewLifecycleOwner) {\r\n                binding?.viewPager?.adapter?.notifyDataSetChanged()\r\n                usesTabLayout = viewModel.isLeader\r\n            }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "32",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInvitePagerFragment.kt",
  "task_id" : "habitica-android/875",
  "prompt" : "import androidx.lifecycle.distinctUntilChanged\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r\n        this.hidesToolbar = true\r\n        showsBackButton = true\r\n\r\n        viewModel.loadPartyID()\r\n\r\n        viewModel.getGroupData()\r\n            .distinctUntilChanged()\r\n            .observe(viewLifecycleOwner) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentViewpagerBinding?\nval viewModel PartyViewModel",
  "app_type" : "life",
  "end_lineno" : "57",
  "ground_truth" : "        setViewPagerAdapter()\r\n        binding?.viewPager?.currentItem = 0\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setViewPagerAdapter()\r\n        binding?.viewPager?.currentItem = 0\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onViewCreated",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInvitePagerFragment.kt",
  "task_id" : "habitica-android/876",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isRefreshing\nval seekingUsers Flow<PagingData<Member>>\nval inviteStates\nval viewModel PartySeekingViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "110",
  "ground_truth" : "            mapOf(\r\n                \"uuids\" to listOf(member.id)\r\n            )\r\n        )?.firstOrNull()\r\n    }",
  "context" : "suspend fun inviteUser(member: Member): InviteResponse? {\r\n        return socialRepository.inviteToGroup(\r\n            \"party\",\r\n            mapOf(\r\n                \"uuids\" to listOf(member.id)\r\n            )\r\n        )?.firstOrNull()\r\n    }",
  "start_lineno" : "103",
  "methodName" : "inviteUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt",
  "task_id" : "habitica-android/877",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.models.invitations.InviteResponse\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\nsuspend fun inviteUser(member: Member): InviteResponse? {\r\n        return socialRepository.inviteToGroup(\r\n            \"party\",\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isRefreshing\nval seekingUsers Flow<PagingData<Member>>\nval inviteStates\nval viewModel PartySeekingViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "                PartySeekingView(viewModel)\r\n            }\r\n        }\r\n        return view\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r\n                PartySeekingView(viewModel)\r\n            }\r\n        }\r\n        return view\r\n    }",
  "start_lineno" : "129",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt",
  "task_id" : "habitica-android/878",
  "prompt" : "import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isRefreshing\nval seekingUsers Flow<PagingData<Member>>\nval inviteStates\nval viewModel PartySeekingViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "146",
  "ground_truth" : "        super.onStart()\r\n        Analytics.sendEvent(\"View Find Members\", EventCategory.NAVIGATION, HitType.EVENT)\r\n    }",
  "context" : "override fun onStart() {\r\n        super.onStart()\r\n        Analytics.sendEvent(\"View Find Members\", EventCategory.NAVIGATION, HitType.EVENT)\r\n    }",
  "start_lineno" : "143",
  "methodName" : "onStart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt",
  "task_id" : "habitica-android/879",
  "prompt" : "override fun onStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isRefreshing\nval seekingUsers Flow<PagingData<Member>>\nval inviteStates\nval viewModel PartySeekingViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "340",
  "ground_truth" : "                ?: state.closestPageToPosition(anchorPosition)?.nextKey?.minus(1)\r\n        }\r\n    }",
  "context" : "override fun getRefreshKey(state: PagingState<Int, Member>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            state.closestPageToPosition(anchorPosition)?.prevKey?.plus(1)\r\n                ?: state.closestPageToPosition(anchorPosition)?.nextKey?.minus(1)\r\n        }\r\n    }",
  "start_lineno" : "335",
  "methodName" : "getRefreshKey",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt",
  "task_id" : "habitica-android/880",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Member>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            state.closestPageToPosition(anchorPosition)?.prevKey?.plus(1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isRefreshing\nval seekingUsers Flow<PagingData<Member>>\nval inviteStates\nval viewModel PartySeekingViewModel\nvar binding FragmentComposeBinding?",
  "app_type" : "life",
  "end_lineno" : "355",
  "ground_truth" : "            )\r\n        } catch (e: Exception) {\r\n            LoadResult.Error(e)\r\n        }\r\n    }",
  "context" : "override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Member> {\r\n        return try {\r\n            val page = params.key ?: 0\r\n            val response = repository.retrievePartySeekingUsers(page)\r\n\r\n            LoadResult.Page(\r\n                data = response ?: emptyList(),\r\n                prevKey = if (page == 0) null else page.minus(1),\r\n                nextKey = if ((response?.size ?: 0) < 30) null else page.plus(1)\r\n            )\r\n        } catch (e: Exception) {\r\n            LoadResult.Error(e)\r\n        }\r\n    }",
  "start_lineno" : "342",
  "methodName" : "load",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt",
  "task_id" : "habitica-android/881",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\noverride suspend fun load(params: LoadParams<Int>): LoadResult<Int, Member> {\r\n        return try {\r\n            val page = params.key ?: 0\r\n            val response = repository.retrievePartySeekingUsers(page)\r\n\r\n            LoadResult.Page(\r\n                data = response ?: emptyList(),\r\n                prevKey = if (page == 0) null else page.minus(1),\r\n                nextKey = if ((response?.size ?: 0) < 30) null else page.plus(1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentQuestDetailBinding?\nvar party Group?\nvar quest Quest?\nvar beginQuestMessage String?\nval isQuestActive Boolean",
  "app_type" : "life",
  "end_lineno" : "75",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "68",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\QuestDetailFragment.kt",
  "task_id" : "habitica-android/882",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var socialRepository SocialRepository\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar binding FragmentQuestDetailBinding?\nvar party Group?\nvar quest Quest?\nvar beginQuestMessage String?\nval isQuestActive Boolean",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        socialRepository.close()\r\n        userRepository.close()\r\n        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "229",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\QuestDetailFragment.kt",
  "task_id" : "habitica-android/883",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onDestroyView() {\r\n        socialRepository.close()\r\n        userRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        tutorialStepIdentifier = \"stats\"\r\n        tutorialTexts = listOf(getString(R.string.tutorial_stats))\r\n        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "70",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/884",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        tutorialStepIdentifier = \"stats\"\r\n        tutorialTexts = listOf(getString(R.string.tutorial_stats))\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "81",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/885",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "163",
  "ground_truth" : "            dialog.show()\r\n        }\r\n    }",
  "context" : "private fun showBulkAllocateDialog() {\r\n        context?.let { context ->\r\n            val dialog = BulkAllocateStatsDialog(context, userRepository)\r\n            dialog.show()\r\n        }\r\n    }",
  "start_lineno" : "158",
  "methodName" : "showBulkAllocateDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/886",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.stats.BulkAllocateStatsDialog\nimport com.habitrpg.android.habitica.models.user.Stats\nimport com.habitrpg.android.habitica.R\nprivate fun showBulkAllocateDialog() {\r\n        context?.let { context ->\r\n            val dialog = BulkAllocateStatsDialog(context, userRepository)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "        }\r\n        binding?.distributeEvenlyButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_FLAT\r\n        binding?.distributeClassButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_CLASSBASED\r\n        binding?.distributeTaskButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_TASKBASED\r\n    }",
  "context" : "private fun changeAutoAllocationMode(allocationMode: String) {\r\n        lifecycleScope.launchCatching {\r\n            userRepository.updateUser(\r\n                \"preferences.allocationMode\",\r\n                allocationMode\r\n            )\r\n        }\r\n        binding?.distributeEvenlyButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_FLAT\r\n        binding?.distributeClassButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_CLASSBASED\r\n        binding?.distributeTaskButton?.isChecked = allocationMode == Stats.AUTO_ALLOCATE_TASKBASED\r\n    }",
  "start_lineno" : "165",
  "methodName" : "changeAutoAllocationMode",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/887",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun changeAutoAllocationMode(allocationMode: String) {\r\n        lifecycleScope.launchCatching {\r\n            userRepository.updateUser(\r\n                \"preferences.allocationMode\",\r\n                allocationMode\r\n            )\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "182",
  "ground_truth" : "        alert?.addOkButton()\r\n        alert?.show()\r\n    }",
  "context" : "private fun showHelpAlert(resourceId: Int) {\r\n        val alert = context?.let { HabiticaAlertDialog(it) }\r\n        alert?.setMessage(resourceId)\r\n        alert?.addOkButton()\r\n        alert?.show()\r\n    }",
  "start_lineno" : "177",
  "methodName" : "showHelpAlert",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/888",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nprivate fun showHelpAlert(resourceId: Int) {\r\n        val alert = context?.let { HabiticaAlertDialog(it) }\r\n        alert?.setMessage(resourceId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding FragmentStatsBinding?\nvar canAllocatePoints Boolean\nvar inventoryRepository InventoryRepository\nvar userViewModel MainUserViewModel\nvar totalStrength\nvar totalIntelligence\nvar totalConstitution\nvar totalPerception",
  "app_type" : "life",
  "end_lineno" : "188",
  "ground_truth" : "            userRepository.allocatePoint(stat)\r\n        }\r\n    }",
  "context" : "private fun allocatePoint(stat: Attribute) {\r\n        lifecycleScope.launchCatching {\r\n            userRepository.allocatePoint(stat)\r\n        }\r\n    }",
  "start_lineno" : "184",
  "methodName" : "allocatePoint",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt",
  "task_id" : "habitica-android/889",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.Attribute\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.lifecycleScope\nprivate fun allocatePoint(stat: Attribute) {\r\n        lifecycleScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var deviceInfo DeviceName?.DeviceInfo?\nvar binding FragmentSupportBugFixBinding?\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nval versionName String\nval versionCode Int",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\BugFixFragment.kt",
  "task_id" : "habitica-android/890",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var faqRepository FAQRepository\nvar binding FragmentFaqDetailBinding?",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "28",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQDetailFragment.kt",
  "task_id" : "habitica-android/891",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var deviceInfo DeviceName?.DeviceInfo?\nvar binding FragmentFaqOverviewBinding?\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar faqRepository FAQRepository\nvar configManager AppConfigManager\nval versionName String\nval versionCode Int",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "85",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQOverviewFragment.kt",
  "task_id" : "habitica-android/892",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var deviceInfo DeviceName?.DeviceInfo?\nvar binding FragmentFaqOverviewBinding?\nvar appConfigManager AppConfigManager\nvar userViewModel MainUserViewModel\nvar faqRepository FAQRepository\nvar configManager AppConfigManager\nval versionName String\nval versionCode Int",
  "app_type" : "life",
  "end_lineno" : "159",
  "ground_truth" : "        faqRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        faqRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "156",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQOverviewFragment.kt",
  "task_id" : "habitica-android/893",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSupportMainBinding?\nvar faqRepository FAQRepository\nvar appConfigManager AppConfigManager",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "36",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\SupportMainFragment.kt",
  "task_id" : "habitica-android/894",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding FragmentSupportMainBinding?\nvar faqRepository FAQRepository\nvar appConfigManager AppConfigManager",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "        faqRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        faqRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\SupportMainFragment.kt",
  "task_id" : "habitica-android/895",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var showCustomRewards Boolean\nvar selectedCard ShopItem?\nval cardSelectedResult",
  "app_type" : "life",
  "end_lineno" : "44",
  "ground_truth" : "        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        lifecycleScope.launchCatching {\r\n            inventoryRepository.retrieveInAppRewards()\r\n        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt",
  "task_id" : "habitica-android/896",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        lifecycleScope.launchCatching {\r\n            inventoryRepository.retrieveInAppRewards()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var showCustomRewards Boolean\nvar selectedCard ShopItem?\nval cardSelectedResult",
  "app_type" : "life",
  "end_lineno" : "102",
  "ground_truth" : "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "99",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt",
  "task_id" : "habitica-android/897",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var showCustomRewards Boolean\nvar selectedCard ShopItem?\nval cardSelectedResult",
  "app_type" : "life",
  "end_lineno" : "115",
  "ground_truth" : "            userRepository.retrieveUser(withTasks = true, forced = true)\r\n            inventoryRepository.retrieveInAppRewards()\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(withTasks = true, forced = true)\r\n            inventoryRepository.retrieveInAppRewards()\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "108",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt",
  "task_id" : "habitica-android/898",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var showCustomRewards Boolean\nvar selectedCard ShopItem?\nval cardSelectedResult",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        (layoutManager as? GridLayoutManager)?.spanCount = spanCount\r\n    }",
  "context" : "private fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val itemWidth: Float = context?.resources?.getDimension(R.dimen.reward_width) ?: 0f\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n\r\n        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        (layoutManager as? GridLayoutManager)?.spanCount = spanCount\r\n    }",
  "start_lineno" : "117",
  "methodName" : "setGridSpanCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt",
  "task_id" : "habitica-android/899",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val itemWidth: Float = context?.resources?.getDimension(R.dimen.reward_width) ?: 0f\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "183",
  "ground_truth" : "            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }",
  "context" : "private fun scoreChecklistItem(task: Task, item: ChecklistItem) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }",
  "start_lineno" : "179",
  "methodName" : "scoreChecklistItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/900",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.lifecycle.lifecycleScope\nprivate fun scoreChecklistItem(task: Task, item: ChecklistItem) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "            TaskType.REWARD -> SoundManager.SoundReward\r\n            else -> null\r\n        }\r\n        soundName?.let { soundManager.loadAndPlayAudio(it) }\r\n    }",
  "context" : "private fun playSound(direction: TaskDirection) {\r\n        HapticFeedbackManager.tap(requireView())\r\n        val soundName = when (taskType) {\r\n            TaskType.HABIT -> if (direction == TaskDirection.UP) SoundManager.SoundPlusHabit else SoundManager.SoundMinusHabit\r\n            TaskType.DAILY -> SoundManager.SoundDaily\r\n            TaskType.TODO -> SoundManager.SoundTodo\r\n            TaskType.REWARD -> SoundManager.SoundReward\r\n            else -> null\r\n        }\r\n        soundName?.let { soundManager.loadAndPlayAudio(it) }\r\n    }",
  "start_lineno" : "203",
  "methodName" : "playSound",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/901",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.shared.habitica.models.responses.TaskDirection\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.helpers.SoundManager\nimport com.habitrpg.android.habitica.helpers.HapticFeedbackManager\nimport android.view.View\nprivate fun playSound(direction: TaskDirection) {\r\n        HapticFeedbackManager.tap(requireView())\r\n        val soundName = when (taskType) {\r\n            TaskType.HABIT -> if (direction == TaskDirection.UP) SoundManager.SoundPlusHabit else SoundManager.SoundMinusHabit\r\n            TaskType.DAILY -> SoundManager.SoundDaily\r\n            TaskType.TODO -> SoundManager.SoundTodo\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "218",
  "ground_truth" : "        val itemTouchHelper = itemTouchCallback?.let { ItemTouchHelper(it) }\r\n        itemTouchHelper?.attachToRecyclerView(binding?.recyclerView)\r\n    }",
  "context" : "private fun allowReordering() {\r\n        val itemTouchHelper = itemTouchCallback?.let { ItemTouchHelper(it) }\r\n        itemTouchHelper?.attachToRecyclerView(binding?.recyclerView)\r\n    }",
  "start_lineno" : "215",
  "methodName" : "allowReordering",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/902",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun allowReordering() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "227",
  "ground_truth" : "        super.onDestroyView()\r\n        itemTouchCallback = null\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        itemTouchCallback = null\r\n    }",
  "start_lineno" : "224",
  "methodName" : "onDestroyView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/903",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "232",
  "ground_truth" : "        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "context" : "override fun onDestroy() {\r\n        userRepository.close()\r\n        super.onDestroy()\r\n    }",
  "start_lineno" : "229",
  "methodName" : "onDestroy",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/904",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "504",
  "ground_truth" : "            handleTaskResult(result, value)\r\n        }\r\n    }",
  "context" : "private fun scoreTask(task: Task, direction: TaskDirection) {\r\n        viewModel.scoreTask(task, direction) { result, value ->\r\n            handleTaskResult(result, value)\r\n        }\r\n    }",
  "start_lineno" : "500",
  "methodName" : "scoreTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/905",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.TaskDirection\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun scoreTask(task: Task, direction: TaskDirection) {\r\n        viewModel.scoreTask(task, direction) { result, value ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "509",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        outState.putString(CLASS_TYPE_KEY, this.taskType.value)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(CLASS_TYPE_KEY, this.taskType.value)\r\n    }",
  "start_lineno" : "506",
  "methodName" : "onSaveInstanceState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/906",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "519",
  "ground_truth" : "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "context" : "override fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        viewModel.refreshData {\r\n            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }",
  "start_lineno" : "514",
  "methodName" : "onRefresh",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/907",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        viewModel.refreshData {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "525",
  "ground_truth" : "        context?.let { recyclerAdapter?.taskDisplayMode = configManager.taskDisplayMode(it) }\r\n        setInnerAdapter()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        context?.let { recyclerAdapter?.taskDisplayMode = configManager.taskDisplayMode(it) }\r\n        setInnerAdapter()\r\n    }",
  "start_lineno" : "521",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/908",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var taskFlowJob Job?\nval viewModel TasksViewModel\nvar canScoreTasks Boolean\nvar binding FragmentRefreshRecyclerviewBinding?\nvar recyclerAdapter TaskRecyclerViewAdapter?\nvar itemAnimator\nvar userRepository UserRepository\nvar inventoryRepository InventoryRepository\nvar taskRepository TaskRepository\nvar soundManager SoundManager\nvar configManager AppConfigManager\nvar sharedPreferences SharedPreferences\nvar notificationsManager NotificationsManager\nvar layoutManager RecyclerView?.LayoutManager?\nvar taskType TaskType\nvar itemTouchCallback ItemTouchHelper?.Callback?\nval className TaskType\nval displayedClassName String?\nval CLASS_TYPE_KEY",
  "app_type" : "life",
  "end_lineno" : "538",
  "ground_truth" : "            lifecycleScope.launchCatching {\r\n                taskRepository.retrieveCompletedTodos()\r\n            }\r\n        }\r\n    }",
  "context" : "fun setActiveFilter(activeFilter: String) {\r\n        viewModel.setActiveFilter(taskType, activeFilter)\r\n        recyclerAdapter?.filter()\r\n\r\n        setEmptyLabels()\r\n\r\n        if (activeFilter == Task.FILTER_COMPLETED) {\r\n            lifecycleScope.launchCatching {\r\n                taskRepository.retrieveCompletedTodos()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "527",
  "methodName" : "setActiveFilter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt",
  "task_id" : "habitica-android/909",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.R\nfun setActiveFilter(activeFilter: String) {\r\n        viewModel.setActiveFilter(taskType, activeFilter)\r\n        recyclerAdapter?.filter()\r\n\r\n        setEmptyLabels()\r\n\r\n        if (activeFilter == Task.FILTER_COMPLETED) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "        this.usesBottomNavigation = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r\n        this.usesBottomNavigation = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }",
  "start_lineno" : "72",
  "methodName" : "onCreateView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/910",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "        }\r\n        super.onPause()\r\n    }",
  "context" : "override fun onPause() {\r\n        if (bottomNavigation?.listener == this) {\r\n            bottomNavigation?.listener = null\r\n        }\r\n        super.onPause()\r\n    }",
  "start_lineno" : "136",
  "methodName" : "onPause",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/911",
  "prompt" : "override fun onPause() {\r\n        if (bottomNavigation?.listener == this) {\r\n            bottomNavigation?.listener = null\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "180",
  "ground_truth" : "        viewModel.searchQuery = newText\r\n        return true\r\n    }",
  "context" : "override fun onQueryTextChange(newText: String?): Boolean {\r\n        viewModel.searchQuery = newText\r\n        return true\r\n    }",
  "start_lineno" : "177",
  "methodName" : "onQueryTextChange",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/912",
  "prompt" : "override fun onQueryTextChange(newText: String?): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "195",
  "ground_truth" : "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                true\r\n            }\r\n            R.id.action_reload -> {\r\n                refreshItem = item\r\n                viewModel.refreshData { }\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }",
  "start_lineno" : "182",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/913",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                true\r\n            }\r\n            R.id.action_reload -> {\r\n                refreshItem = item\r\n                viewModel.refreshData { }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "385",
  "ground_truth" : "        if (binding?.viewPager != null && index != -1) {\r\n            binding?.viewPager?.currentItem = index\r\n            updateBottomBarBadges()\r\n        }\r\n    }",
  "context" : "private fun switchToTaskTab(taskType: TaskType?) {\r\n        val index = indexForTaskType(taskType)\r\n        if (binding?.viewPager != null && index != -1) {\r\n            binding?.viewPager?.currentItem = index\r\n            updateBottomBarBadges()\r\n        }\r\n    }",
  "start_lineno" : "379",
  "methodName" : "switchToTaskTab",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/914",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nprivate fun switchToTaskTab(taskType: TaskType?) {\r\n        val index = indexForTaskType(taskType)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "397",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return -1\r\n    }",
  "context" : "private fun indexForTaskType(taskType: TaskType?): Int {\r\n        if (taskType != null) {\r\n            for (index in 0 until (viewFragmentsDictionary?.size ?: 0)) {\r\n                val fragment = viewFragmentsDictionary?.get(index)\r\n                if (fragment != null && taskType == fragment.className) {\r\n                    return index\r\n                }\r\n            }\r\n        }\r\n        return -1\r\n    }",
  "start_lineno" : "387",
  "methodName" : "indexForTaskType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/915",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport androidx.fragment.app.Fragment\nprivate fun indexForTaskType(taskType: TaskType?): Int {\r\n        if (taskType != null) {\r\n            for (index in 0 until (viewFragmentsDictionary?.size ?: 0)) {\r\n                val fragment = viewFragmentsDictionary?.get(index)\r\n                if (fragment != null && taskType == fragment.className) {\r\n                    return index\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "418",
  "ground_truth" : "            else -> 0\r\n        }\r\n        binding?.viewPager?.setCurrentItem(newItem, smooth)\r\n        updateBottomBarBadges()\r\n    }",
  "context" : "override fun onTabSelected(taskType: TaskType, smooth: Boolean) {\r\n        val newItem = when (taskType) {\r\n            TaskType.HABIT -> 0\r\n            TaskType.DAILY -> 1\r\n            TaskType.TODO -> 2\r\n            TaskType.REWARD -> 3\r\n            else -> 0\r\n        }\r\n        binding?.viewPager?.setCurrentItem(newItem, smooth)\r\n        updateBottomBarBadges()\r\n    }",
  "start_lineno" : "408",
  "methodName" : "onTabSelected",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/916",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.R\noverride fun onTabSelected(taskType: TaskType, smooth: Boolean) {\r\n        val newItem = when (taskType) {\r\n            TaskType.HABIT -> 0\r\n            TaskType.DAILY -> 1\r\n            TaskType.TODO -> 2\r\n            TaskType.REWARD -> 3\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var tagRepository TagRepository\nval viewModel TasksViewModel\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\nvar viewFragmentsDictionary MutableMap<Int, TaskRecyclerViewFragment>?\nvar filterMenuItem MenuItem?\nval activeFragment TaskRecyclerViewFragment?\nval taskCreateResult\nval displayedClassName String?\nvar lastTaskFormOpen Date?",
  "app_type" : "life",
  "end_lineno" : "434",
  "ground_truth" : "        viewModel.userViewModel.currentTeamPlan.tryEmit(teamPlan)\r\n        lifecycleScope.launchCatching {\r\n            bottomNavigation?.canAddTasks = viewModel.canAddTasks()\r\n        }\r\n    }",
  "context" : "private fun updateBoardDisplay() {\r\n        if (viewModel.ownerTitle.isNotBlank()) {\r\n            mainActivity?.title = viewModel.ownerTitle\r\n            MainNavigationController.updateLabel(R.id.tasksFragment, viewModel.ownerTitle.toString())\r\n        }\r\n        val teamPlan = viewModel.teamPlans[viewModel.ownerID.value]\r\n        viewModel.userViewModel.currentTeamPlan.tryEmit(teamPlan)\r\n        lifecycleScope.launchCatching {\r\n            bottomNavigation?.canAddTasks = viewModel.canAddTasks()\r\n        }\r\n    }",
  "start_lineno" : "424",
  "methodName" : "updateBoardDisplay",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt",
  "task_id" : "habitica-android/917",
  "prompt" : "import com.habitrpg.common.habitica.helpers.MainNavigationController\nimport com.habitrpg.android.habitica.R\nimport androidx.fragment.app.Fragment\nimport android.app.Activity\nprivate fun updateBoardDisplay() {\r\n        if (viewModel.ownerTitle.isNotBlank()) {\r\n            mainActivity?.title = viewModel.ownerTitle\r\n            MainNavigationController.updateLabel(R.id.tasksFragment, viewModel.ownerTitle.toString())\r\n        }\r\n        val teamPlan = viewModel.teamPlans[viewModel.ownerID.value]\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "22",
  "ground_truth" : "            cursor\r\n        } else {\r\n            i - 1\r\n        }\r\n    }",
  "context" : "override fun findTokenStart(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n\r\n        while (i > 0 && text[i - 1] != ' ' && !tokens.contains(text[i-1])) {\r\n            i--\r\n        }\r\n\r\n        return if (i < 1 || !tokens.contains(text[i-1])) {\r\n            cursor\r\n        } else {\r\n            i - 1\r\n        }\r\n    }",
  "start_lineno" : "10",
  "methodName" : "findTokenStart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\AutocompleteTokenizer.kt",
  "task_id" : "habitica-android/918",
  "prompt" : "override fun findTokenStart(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n\r\n        while (i > 0 && text[i - 1] != ' ' && !tokens.contains(text[i-1])) {\r\n            i--\r\n        }\r\n\r\n        return if (i < 1 || !tokens.contains(text[i-1])) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return len\r\n    }",
  "context" : "override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n        val len = text.length\r\n\r\n        while (i < len) {\r\n            if (text[i] == ' ') {\r\n                return i\r\n            } else {\r\n                i++\r\n            }\r\n        }\r\n\r\n        return len\r\n    }",
  "start_lineno" : "24",
  "methodName" : "findTokenEnd",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\AutocompleteTokenizer.kt",
  "task_id" : "habitica-android/919",
  "prompt" : "override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n        val len = text.length\r\n\r\n        while (i < len) {\r\n            if (text[i] == ' ') {\r\n                return i\r\n            } else {\r\n                i++\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "                inputMethodManager?.hideSoftInputFromWindow(act.currentFocus?.windowToken, 0)\r\n            }\r\n        }",
  "context" : "fun dismissKeyboard(act: Activity?) {\r\n            if (act != null && act.currentFocus != null) {\r\n                val inputMethodManager = act.getSystemService(Activity.INPUT_METHOD_SERVICE) as? InputMethodManager\r\n                inputMethodManager?.hideSoftInputFromWindow(act.currentFocus?.windowToken, 0)\r\n            }\r\n        }",
  "start_lineno" : "24",
  "methodName" : "dismissKeyboard",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\KeyboardUtil.kt",
  "task_id" : "habitica-android/920",
  "prompt" : "import android.view.inputmethod.InputMethodManager\nimport android.app.Activity\nfun dismissKeyboard(act: Activity?) {\r\n            if (act != null && act.currentFocus != null) {\r\n                val inputMethodManager = act.getSystemService(Activity.INPUT_METHOD_SERVICE) as? InputMethodManager\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val margin Int",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "            outRect.setEmpty()\r\n        } else {\r\n            outRect.set(margin, margin, margin, margin)\r\n        }\r\n    }",
  "context" : "override fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val viewType: Int? = parent.adapter?.getItemViewType(position)\r\n        if (noMarginViewTypes.contains(viewType)) {\r\n            outRect.setEmpty()\r\n        } else {\r\n            outRect.set(margin, margin, margin, margin)\r\n        }\r\n    }",
  "start_lineno" : "12",
  "methodName" : "getItemOffsets",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\MarginDecoration.kt",
  "task_id" : "habitica-android/921",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val viewType: Int? = parent.adapter?.getItemViewType(position)\r\n        if (noMarginViewTypes.contains(viewType)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onRefresh\nvar state RecyclerViewState\nvar emptyItem EmptyItem?\nvar actualAdapter Adapter<*>?\nval emptyAdapter\nval observer",
  "app_type" : "life",
  "end_lineno" : "34",
  "ground_truth" : "            super.setAdapter(newAdapter)\r\n        }\r\n    }",
  "context" : "private fun updateAdapter(newAdapter: Adapter<*>?) {\r\n        if (adapter != newAdapter) {\r\n            super.setAdapter(newAdapter)\r\n        }\r\n    }",
  "start_lineno" : "30",
  "methodName" : "updateAdapter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\RecyclerViewEmptySupport.kt",
  "task_id" : "habitica-android/922",
  "prompt" : "private fun updateAdapter(newAdapter: Adapter<*>?) {\r\n        if (adapter != newAdapter) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onRefresh\nvar state RecyclerViewState\nvar emptyItem EmptyItem?\nvar actualAdapter Adapter<*>?\nval emptyAdapter\nval observer",
  "app_type" : "life",
  "end_lineno" : "70",
  "ground_truth" : "            }\r\n        } else {\r\n            RecyclerViewState.LOADING\r\n        }\r\n    }",
  "context" : "internal fun updateState(isInitial: Boolean = false) {\r\n        state = if (actualAdapter != null && !isInitial) {\r\n            val emptyViewVisible = actualAdapter?.itemCount == 0\r\n            if (emptyViewVisible) {\r\n                RecyclerViewState.EMPTY\r\n            } else {\r\n                RecyclerViewState.DISPLAYING_DATA\r\n            }\r\n        } else {\r\n            RecyclerViewState.LOADING\r\n        }\r\n    }",
  "start_lineno" : "59",
  "methodName" : "updateState",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\RecyclerViewEmptySupport.kt",
  "task_id" : "habitica-android/923",
  "prompt" : "import com.habitrpg.common.habitica.helpers.RecyclerViewState\nimport androidx.recyclerview.widget.RecyclerView\ninternal fun updateState(isInitial: Boolean = false) {\r\n        state = if (actualAdapter != null && !isInitial) {\r\n            val emptyViewVisible = actualAdapter?.itemCount == 0\r\n            if (emptyViewVisible) {\r\n                RecyclerViewState.EMPTY\r\n            } else {\r\n                RecyclerViewState.DISPLAYING_DATA\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var onRefresh\nvar state RecyclerViewState\nvar emptyItem EmptyItem?\nvar actualAdapter Adapter<*>?\nval emptyAdapter\nval observer",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        super.setAdapter(adapter)\r\n        adapter?.registerAdapterDataObserver(observer)\r\n        actualAdapter = adapter\r\n        updateState(true)\r\n    }",
  "context" : "override fun setAdapter(adapter: Adapter<*>?) {\r\n        val oldAdapter = actualAdapter\r\n        oldAdapter?.unregisterAdapterDataObserver(observer)\r\n        super.setAdapter(adapter)\r\n        adapter?.registerAdapterDataObserver(observer)\r\n        actualAdapter = adapter\r\n        updateState(true)\r\n    }",
  "start_lineno" : "72",
  "methodName" : "setAdapter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\RecyclerViewEmptySupport.kt",
  "task_id" : "habitica-android/924",
  "prompt" : "override fun setAdapter(adapter: Adapter<*>?) {\r\n        val oldAdapter = actualAdapter\r\n        oldAdapter?.unregisterAdapterDataObserver(observer)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "                    \", toX=\" + toX +\r\n                    \", toY=\" + toY +\r\n                    '}'.toString()\r\n                )\r\n        }",
  "context" : "override fun toString(): String {\r\n            return (\r\n                \"ChangeInfo{\" +\r\n                    \"oldHolder=\" + oldHolder +\r\n                    \", newHolder=\" + newHolder +\r\n                    \", fromX=\" + fromX +\r\n                    \", fromY=\" + fromY +\r\n                    \", toX=\" + toX +\r\n                    \", toY=\" + toY +\r\n                    '}'.toString()\r\n                )\r\n        }",
  "start_lineno" : "66",
  "methodName" : "toString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/925",
  "prompt" : "override fun toString(): String {\r\n            return (\r\n                \"ChangeInfo{\" +\r\n                    \"oldHolder=\" + oldHolder +\r\n                    \", newHolder=\" + newHolder +\r\n                    \", fromX=\" + fromX +\r\n                    \", fromY=\" + fromY +\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "179",
  "ground_truth" : "        pendingRemovals.add(holder)\r\n        return true\r\n    }",
  "context" : "override fun animateRemove(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n        pendingRemovals.add(holder)\r\n        return true\r\n    }",
  "start_lineno" : "175",
  "methodName" : "animateRemove",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/926",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\noverride fun animateRemove(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "207",
  "ground_truth" : "        pendingAdditions.add(holder)\r\n        return true\r\n    }",
  "context" : "override fun animateAdd(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n        holder.itemView.alpha = 0f\r\n        pendingAdditions.add(holder)\r\n        return true\r\n    }",
  "start_lineno" : "202",
  "methodName" : "animateAdd",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/927",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\noverride fun animateAdd(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n        holder.itemView.alpha = 0f\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "403",
  "ground_truth" : "                    infoList.remove(changeInfo)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun endChangeAnimation(infoList: MutableList<ChangeInfo>, item: RecyclerView.ViewHolder) {\r\n        for (i in infoList.indices.reversed()) {\r\n            val changeInfo = infoList[i]\r\n            if (endChangeAnimationIfNecessary(changeInfo, item)) {\r\n                if (changeInfo.oldHolder == null && changeInfo.newHolder == null) {\r\n                    infoList.remove(changeInfo)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "394",
  "methodName" : "endChangeAnimation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/928",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\nprivate fun endChangeAnimation(infoList: MutableList<ChangeInfo>, item: RecyclerView.ViewHolder) {\r\n        for (i in infoList.indices.reversed()) {\r\n            val changeInfo = infoList[i]\r\n            if (endChangeAnimationIfNecessary(changeInfo, item)) {\r\n                if (changeInfo.oldHolder == null && changeInfo.newHolder == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "412",
  "ground_truth" : "        }\r\n        if (changeInfo.newHolder != null) {\r\n            endChangeAnimationIfNecessary(changeInfo, changeInfo.newHolder)\r\n        }\r\n    }",
  "context" : "private fun endChangeAnimationIfNecessary(changeInfo: ChangeInfo) {\r\n        if (changeInfo.oldHolder != null) {\r\n            endChangeAnimationIfNecessary(changeInfo, changeInfo.oldHolder)\r\n        }\r\n        if (changeInfo.newHolder != null) {\r\n            endChangeAnimationIfNecessary(changeInfo, changeInfo.newHolder)\r\n        }\r\n    }",
  "start_lineno" : "405",
  "methodName" : "endChangeAnimationIfNecessary",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/929",
  "prompt" : "private fun endChangeAnimationIfNecessary(changeInfo: ChangeInfo) {\r\n        if (changeInfo.oldHolder != null) {\r\n            endChangeAnimationIfNecessary(changeInfo, changeInfo.oldHolder)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "432",
  "ground_truth" : "        item?.itemView?.translationX = 0f\r\n        item?.itemView?.translationY = 0f\r\n        dispatchChangeFinished(item, oldItem)\r\n        return true\r\n    }",
  "context" : "private fun endChangeAnimationIfNecessary(\r\n        changeInfo: ChangeInfo,\r\n        item: RecyclerView.ViewHolder?\r\n    ): Boolean {\r\n        var oldItem = false\r\n        when {\r\n            changeInfo.newHolder === item -> changeInfo.newHolder = null\r\n            changeInfo.oldHolder === item -> {\r\n                changeInfo.oldHolder = null\r\n                oldItem = true\r\n            }\r\n            else -> return false\r\n        }\r\n        item?.itemView?.alpha = 1f\r\n        item?.itemView?.translationX = 0f\r\n        item?.itemView?.translationY = 0f\r\n        dispatchChangeFinished(item, oldItem)\r\n        return true\r\n    }",
  "start_lineno" : "414",
  "methodName" : "endChangeAnimationIfNecessary",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/930",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\nprivate fun endChangeAnimationIfNecessary(\r\n        changeInfo: ChangeInfo,\r\n        item: RecyclerView.ViewHolder?\r\n    ): Boolean {\r\n        var oldItem = false\r\n        when {\r\n            changeInfo.newHolder === item -> changeInfo.newHolder = null\r\n            changeInfo.oldHolder === item -> {\r\n                changeInfo.oldHolder = null\r\n                oldItem = true\r\n            }\r\n            else -> return false\r\n        }\r\n        item?.itemView?.alpha = 1f\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "509",
  "ground_truth" : "            sDefaultInterpolator = ValueAnimator().interpolator\r\n        }\r\n        holder.itemView.animate().interpolator = sDefaultInterpolator\r\n        endAnimation(holder)\r\n    }",
  "context" : "private fun resetAnimation(holder: RecyclerView.ViewHolder) {\r\n        if (sDefaultInterpolator == null) {\r\n            sDefaultInterpolator = ValueAnimator().interpolator\r\n        }\r\n        holder.itemView.animate().interpolator = sDefaultInterpolator\r\n        endAnimation(holder)\r\n    }",
  "start_lineno" : "503",
  "methodName" : "resetAnimation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/931",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\nprivate fun resetAnimation(holder: RecyclerView.ViewHolder) {\r\n        if (sDefaultInterpolator == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "536",
  "ground_truth" : "            dispatchAnimationsFinished()\r\n        }\r\n    }",
  "context" : "private fun dispatchFinishedWhenDone() {\r\n        if (!isRunning) {\r\n            dispatchAnimationsFinished()\r\n        }\r\n    }",
  "start_lineno" : "532",
  "methodName" : "dispatchFinishedWhenDone",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/932",
  "prompt" : "private fun dispatchFinishedWhenDone() {\r\n        if (!isRunning) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pendingRemovals\nval pendingAdditions\nval pendingMoves\nval pendingChanges\nval additionsList\nval movesList\nval changesList\nval addAnimations\nval moveAnimations\nval removeAnimations\nval changeAnimations\nvar skipAnimations Boolean\nvar fromX Int\nvar fromY Int\nvar toX Int\nvar toY Int\nval DEBUG\nvar sDefaultInterpolator TimeInterpolator?",
  "app_type" : "life",
  "end_lineno" : "626",
  "ground_truth" : "            viewHolders[i].itemView.animate().cancel()\r\n        }\r\n    }",
  "context" : "private fun cancelAll(viewHolders: List<RecyclerView.ViewHolder>) {\r\n        for (i in viewHolders.indices.reversed()) {\r\n            viewHolders[i].itemView.animate().cancel()\r\n        }\r\n    }",
  "start_lineno" : "622",
  "methodName" : "cancelAll",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt",
  "task_id" : "habitica-android/933",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\nprivate fun cancelAll(viewHolders: List<RecyclerView.ViewHolder>) {\r\n        for (i in viewHolders.indices.reversed()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "92",
  "ground_truth" : "                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun colorizeChild(\r\n        innerView: View,\r\n        toolbarIconsColor: Int,\r\n        colorFilter: PorterDuffColorFilter\r\n    ) {\r\n        if (innerView is ActionMenuItemView) {\r\n            innerView.setTextColor(toolbarIconsColor)\r\n            for (k in innerView.compoundDrawables.indices) {\r\n                innerView.post {\r\n                    if (innerView.compoundDrawables[k] != null) {\r\n                        innerView.compoundDrawables[k].colorFilter = colorFilter\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "77",
  "methodName" : "colorizeChild",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\ToolbarColorHelper.kt",
  "task_id" : "habitica-android/934",
  "prompt" : "import androidx.appcompat.view.menu.ActionMenuItemView\nimport android.view.View\nimport android.graphics.PorterDuffColorFilter\nimport android.graphics.PorterDuff\nprivate fun colorizeChild(\r\n        innerView: View,\r\n        toolbarIconsColor: Int,\r\n        colorFilter: PorterDuffColorFilter\r\n    ) {\r\n        if (innerView is ActionMenuItemView) {\r\n            innerView.setTextColor(toolbarIconsColor)\r\n            for (k in innerView.compoundDrawables.indices) {\r\n                innerView.post {\r\n                    if (innerView.compoundDrawables[k] != null) {\r\n                        innerView.compoundDrawables[k].colorFilter = colorFilter\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding\nvar runnable",
  "app_type" : "life",
  "end_lineno" : "33",
  "ground_truth" : "            anim.interpolator = LinearInterpolator()\r\n            anim.duration = 200 + (20 * index).toLong()\r\n            view.startAnimation(anim)\r\n        }\r\n    }",
  "context" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n        binding.menuItems.children.forEachIndexed { index, view ->\r\n            val anim = TranslateAnimation(0f, 0f, 10f.dpToPx(context) + (5f.dpToPx(context) * index), 0f)\r\n            anim.startOffset = 300 + (20 * index).toLong()\r\n            anim.fillBefore = true\r\n            anim.fillAfter = true\r\n            anim.interpolator = LinearInterpolator()\r\n            anim.duration = 200 + (20 * index).toLong()\r\n            view.startAnimation(anim)\r\n        }\r\n    }",
  "start_lineno" : "22",
  "methodName" : "onAttachedToWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt",
  "task_id" : "habitica-android/935",
  "prompt" : "import com.habitrpg.common.habitica.extensions.dpToPx\nimport androidx.core.view.children\nimport android.view.animation.TranslateAnimation\noverride fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n        binding.menuItems.children.forEachIndexed { index, view ->\r\n            val anim = TranslateAnimation(0f, 0f, 10f.dpToPx(context) + (5f.dpToPx(context) * index), 0f)\r\n            anim.startOffset = 300 + (20 * index).toLong()\r\n            anim.fillBefore = true\r\n            anim.fillAfter = true\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding\nvar runnable",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        binding.titleView.visibility = View.VISIBLE\r\n        binding.titleView.background = null\r\n    }",
  "context" : "override fun setTitle(title: CharSequence?) {\r\n        binding.titleView.text = title\r\n        binding.titleView.visibility = View.VISIBLE\r\n        binding.titleView.background = null\r\n    }",
  "start_lineno" : "39",
  "methodName" : "setTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt",
  "task_id" : "habitica-android/936",
  "prompt" : "import android.view.View\noverride fun setTitle(title: CharSequence?) {\r\n        binding.titleView.text = title\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding\nvar runnable",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        binding.iconView.loadImage(url)\r\n        binding.iconView.visibility = View.VISIBLE\r\n    }",
  "context" : "fun setImage(url: String) {\r\n        binding.iconView.loadImage(url)\r\n        binding.iconView.visibility = View.VISIBLE\r\n    }",
  "start_lineno" : "45",
  "methodName" : "setImage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt",
  "task_id" : "habitica-android/937",
  "prompt" : "fun setImage(url: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding\nvar runnable",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        this.binding.menuItems.addView(item)\r\n        binding.root.requestLayout()\r\n    }",
  "context" : "fun addMenuItem(menuItem: BottomSheetMenuItem) {\r\n        val item = menuItem.inflate(this.context, layoutInflater, this.binding.menuItems)\r\n        item.setOnClickListener(this)\r\n        this.binding.menuItems.addView(item)\r\n        binding.root.requestLayout()\r\n    }",
  "start_lineno" : "50",
  "methodName" : "addMenuItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt",
  "task_id" : "habitica-android/938",
  "prompt" : "fun addMenuItem(menuItem: BottomSheetMenuItem) {\r\n        val item = menuItem.inflate(this.context, layoutInflater, this.binding.menuItems)\r\n        item.setOnClickListener(this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding\nvar runnable",
  "app_type" : "life",
  "end_lineno" : "65",
  "ground_truth" : "                runnable?.let { it(index) }\r\n                this.dismiss()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onClick(v: View) {\r\n        if (this.runnable != null) {\r\n            val index = this.binding.menuItems.indexOfChild(v)\r\n            if (index != -1) {\r\n                runnable?.let { it(index) }\r\n                this.dismiss()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "57",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt",
  "task_id" : "habitica-android/939",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n        if (this.runnable != null) {\r\n            val index = this.binding.menuItems.indexOfChild(v)\r\n            if (index != -1) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var radius\nvar isCirclular\nval clipPath\nval bounds",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "        canvas.getClipBounds(bounds)\r\n        clipPath.addRoundRect(bounds.toRectF(), radius, radius, Path.Direction.CW)\r\n        canvas.clipPath(clipPath)\r\n        super.onDraw(canvas)\r\n    }",
  "context" : "override fun onDraw(canvas: Canvas) {\r\n        clipPath.reset()\r\n        val radius = if (isCirclular) (height / 2).toFloat() else radius\r\n        canvas.getClipBounds(bounds)\r\n        clipPath.addRoundRect(bounds.toRectF(), radius, radius, Path.Direction.CW)\r\n        canvas.clipPath(clipPath)\r\n        super.onDraw(canvas)\r\n    }",
  "start_lineno" : "22",
  "methodName" : "onDraw",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\RoundedFrameLayout.kt",
  "task_id" : "habitica-android/940",
  "prompt" : "import android.graphics.Path\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        clipPath.reset()\r\n        val radius = if (isCirclular) (height / 2).toFloat() else radius\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var binding\nvar showNextListener ShowNextListener?",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "            binding.textView.stopTextAnimation()\r\n        } else {\r\n            showNextListener?.showNextStep()\r\n        }\r\n    }",
  "context" : "override fun onClick(v: View) {\r\n        if (binding.textView.isAnimating) {\r\n            binding.textView.stopTextAnimation()\r\n        } else {\r\n            showNextListener?.showNextStep()\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\SpeechBubbleView.kt",
  "task_id" : "habitica-android/941",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n        if (binding.textView.isAnimating) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "        colorResource(if (hasIcon) R.color.gray_200 else R.color.gray_5)\r\n    } else {\r\n        colorResource(if (hasIcon) R.color.content_background else R.color.content_background_offset)\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun HabiticaColors.pixelArtBackground(hasIcon: Boolean): Color {\r\n    return if (isSystemInDarkTheme()) {\r\n        colorResource(if (hasIcon) R.color.gray_200 else R.color.gray_5)\r\n    } else {\r\n        colorResource(if (hasIcon) R.color.content_background else R.color.content_background_offset)\r\n    }\r\n}",
  "start_lineno" : "40",
  "methodName" : "pixelArtBackground",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\theme\\HabiticaTheme.kt",
  "task_id" : "habitica-android/942",
  "prompt" : "import com.habitrpg.common.habitica.theme.HabiticaColors\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.isSystemInDarkTheme\n\r\n@Composable\r\nfun HabiticaColors.pixelArtBackground(hasIcon: Boolean): Color {\r\n    return if (isSystemInDarkTheme()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tutorialTexts List<String>\nvar currentTextIndex Int\nval isDisplayingLastStep Boolean",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        binding.speechBubbleView.animateText(text)\r\n        binding.speechBubbleView.setConfirmationButtonVisibility(View.VISIBLE)\r\n    }",
  "context" : "fun setTutorialText(text: String) {\r\n        binding.speechBubbleView.animateText(text)\r\n        binding.speechBubbleView.setConfirmationButtonVisibility(View.VISIBLE)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "setTutorialText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt",
  "task_id" : "habitica-android/943",
  "prompt" : "fun setTutorialText(text: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tutorialTexts List<String>\nvar currentTextIndex Int\nval isDisplayingLastStep Boolean",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        }\r\n        tutorialTexts = texts\r\n        currentTextIndex = -1\r\n        displayNextTutorialText()\r\n    }",
  "context" : "fun setTutorialTexts(texts: List<String>) {\r\n        if (texts.size == 1) {\r\n            setTutorialText(texts.first())\r\n            return\r\n        }\r\n        tutorialTexts = texts\r\n        currentTextIndex = -1\r\n        displayNextTutorialText()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "setTutorialTexts",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt",
  "task_id" : "habitica-android/944",
  "prompt" : "fun setTutorialTexts(texts: List<String>) {\r\n        if (texts.size == 1) {\r\n            setTutorialText(texts.first())\r\n            return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tutorialTexts List<String>\nvar currentTextIndex Int\nval isDisplayingLastStep Boolean",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "            (parent as? ViewGroup)?.removeView(this)\r\n        }\r\n    }",
  "context" : "private fun completeButtonClicked() {\r\n        onReaction.onTutorialCompleted(step)\r\n        post {\r\n            (parent as? ViewGroup)?.removeView(this)\r\n        }\r\n    }",
  "start_lineno" : "76",
  "methodName" : "completeButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt",
  "task_id" : "habitica-android/945",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun completeButtonClicked() {\r\n        onReaction.onTutorialCompleted(step)\r\n        post {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tutorialTexts List<String>\nvar currentTextIndex Int\nval isDisplayingLastStep Boolean",
  "app_type" : "life",
  "end_lineno" : "93",
  "ground_truth" : "            MainNavigationController.navigate(R.id.FAQOverviewFragment)\r\n        } else {\r\n            onReaction.onTutorialDeferred(step)\r\n        }\r\n    }",
  "context" : "private fun dismissButtonClicked() {\r\n        post {\r\n            (parent as? ViewGroup)?.removeView(this)\r\n        }\r\n        if (step.linkFAQ) {\r\n            onReaction.onTutorialCompleted(step)\r\n            MainNavigationController.navigate(R.id.FAQOverviewFragment)\r\n        } else {\r\n            onReaction.onTutorialDeferred(step)\r\n        }\r\n    }",
  "start_lineno" : "83",
  "methodName" : "dismissButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt",
  "task_id" : "habitica-android/946",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\nprivate fun dismissButtonClicked() {\r\n        post {\r\n            (parent as? ViewGroup)?.removeView(this)\r\n        }\r\n        if (step.linkFAQ) {\r\n            onReaction.onTutorialCompleted(step)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar onOpenProfile\nval context Context\nval res Resources\nvar chatMessage ChatMessage?\nvar user User?\nvar onShouldExpand\nvar onLikeMessage\nvar onReply\nvar onCopyMessage\nvar onFlagMessage\nvar onDeleteMessage",
  "app_type" : "life",
  "end_lineno" : "52",
  "ground_truth" : "        binding.avatarView.setAvatar(member)\r\n        binding.displayNameTextview.username = member.displayName\r\n        binding.displayNameTextview.tier = member.contributor?.level ?: 0\r\n        binding.sublineTextview.text = member.formattedUsername\r\n    }",
  "context" : "fun bind(member: Member?) {\r\n        if (member == null) return\r\n        binding.avatarView.setAvatar(member)\r\n        binding.displayNameTextview.username = member.displayName\r\n        binding.displayNameTextview.tier = member.contributor?.level ?: 0\r\n        binding.sublineTextview.text = member.formattedUsername\r\n    }",
  "start_lineno" : "46",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\ChatRecyclerViewHolder.kt",
  "task_id" : "habitica-android/947",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nfun bind(member: Member?) {\r\n        if (member == null) return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar currentUserID String?\nvar leaderID String?\nvar onClickEvent\nvar sendMessageEvent\nvar removeMemberEvent\nvar transferOwnershipEvent",
  "app_type" : "life",
  "end_lineno" : "38",
  "ground_truth" : "        inflater.inflate(R.menu.party_member_menu, popup.menu)\r\n        popup.menu.findItem(R.id.transfer_ownership).isVisible = currentUserID == leaderID\r\n        popup.menu.findItem(R.id.remove).isVisible = currentUserID == leaderID\r\n        popup.show()\r\n    }",
  "context" : "private fun showOptionsPopup() {\r\n        val popup = PopupMenu(itemView.context, binding.moreButton)\r\n        popup.setOnMenuItemClickListener(this)\r\n        val inflater = popup.menuInflater\r\n        inflater.inflate(R.menu.party_member_menu, popup.menu)\r\n        popup.menu.findItem(R.id.transfer_ownership).isVisible = currentUserID == leaderID\r\n        popup.menu.findItem(R.id.remove).isVisible = currentUserID == leaderID\r\n        popup.show()\r\n    }",
  "start_lineno" : "30",
  "methodName" : "showOptionsPopup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\GroupMemberViewHolder.kt",
  "task_id" : "habitica-android/948",
  "prompt" : "import androidx.appcompat.widget.PopupMenu\nimport android.view.View\nimport android.view.MenuItem\nprivate fun showOptionsPopup() {\r\n        val popup = PopupMenu(itemView.context, binding.moreButton)\r\n        popup.setOnMenuItemClickListener(this)\r\n        val inflater = popup.menuInflater\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar currentUserID String?\nvar leaderID String?\nvar onClickEvent\nvar sendMessageEvent\nvar removeMemberEvent\nvar transferOwnershipEvent",
  "app_type" : "life",
  "end_lineno" : "47",
  "ground_truth" : "            R.id.transfer_ownership -> { transferOwnershipEvent?.invoke() }\r\n            R.id.remove -> { removeMemberEvent?.invoke() }\r\n        }\r\n        return true\r\n    }",
  "context" : "override fun onMenuItemClick(item: MenuItem?): Boolean {\r\n        when (item?.itemId) {\r\n            R.id.send_message -> { sendMessageEvent?.invoke() }\r\n            R.id.transfer_ownership -> { transferOwnershipEvent?.invoke() }\r\n            R.id.remove -> { removeMemberEvent?.invoke() }\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onMenuItemClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\GroupMemberViewHolder.kt",
  "task_id" : "habitica-android/949",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onMenuItemClick(item: MenuItem?): Boolean {\r\n        when (item?.itemId) {\r\n            R.id.send_message -> { sendMessageEvent?.invoke() }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val label TextView\nval selectionSpinner Spinner?\nval switchClassButton LinearLayout?\nval switchClassLabel TextView?\nval switchClassDescription TextView?\nval switchClassCurrency CurrencyView?\nval notesView TextView?\nval countPill TextView?\nvar context Context\nvar spinnerSelectionChanged\nvar spinnerAdapter ArrayAdapter<CharSequence>?\nvar selectedItem Int",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            this.label.text = context.getString(stringID)\r\n        } catch (e: Exception) {\r\n            this.label.text = title\r\n        }\r\n    }",
  "context" : "fun bind(title: String) {\r\n        try {\r\n            val stringID = context.resources.getIdentifier(\"section$title\", \"string\", context.packageName)\r\n            this.label.text = context.getString(stringID)\r\n        } catch (e: Exception) {\r\n            this.label.text = title\r\n        }\r\n    }",
  "start_lineno" : "52",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\SectionViewHolder.kt",
  "task_id" : "habitica-android/950",
  "prompt" : "fun bind(title: String) {\r\n        try {\r\n            val stringID = context.resources.getIdentifier(\"section$title\", \"string\", context.packageName)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar shopIdentifier String?\nvar item ShopItem?\nvar limitedNumberLeft Int?\nvar onNeedsRefresh\nvar onShowPurchaseDialog\nvar context Context\nvar purchaseCardAction\nvar isPinned\nvar isCompleted",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            onShowPurchaseDialog?.invoke(item, isPinned)\r\n        }\r\n    }",
  "context" : "override fun onClick(view: View) {\r\n        val item = item\r\n        if (item != null && item.isValid) {\r\n            onShowPurchaseDialog?.invoke(item, isPinned)\r\n        }\r\n    }",
  "start_lineno" : "113",
  "methodName" : "onClick",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\ShopItemViewHolder.kt",
  "task_id" : "habitica-android/951",
  "prompt" : "import android.view.View\noverride fun onClick(view: View) {\r\n        val item = item\r\n        if (item != null && item.isValid) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val scope\nvar task Task?\nvar movingFromPosition Int?\nvar errorButtonClicked\nvar userID String?\nvar isLocked\nvar context Context\nval mainTaskWrapper ViewGroup\nval assignedTextView TextView\nval completedCountTextView TextView\nval titleTextView EllipsisTextView\nval notesTextView EllipsisTextView?\nval calendarIconView ImageView?\nval iconViewTeam ImageView?\nval specialTaskTextView TextView?\nval iconViewChallenge ImageView?\nval iconViewReminder ImageView?\nval taskIconWrapper LinearLayout?\nval approvalRequiredTextView TextView\nval expandNotesButton Button?\nval syncingView ProgressBar?\nval errorIconView ImageButton?\nval taskGray Int\nval streakIconView ImageView\nval streakTextView TextView\nval reminderTextView TextView\nvar openTaskDisabled Boolean\nvar taskActionsDisabled Boolean\nvar notesExpanded\nval taskIconWrapperIsVisible Boolean",
  "app_type" : "life",
  "end_lineno" : "137",
  "ground_truth" : "        } else {\r\n            notesTextView?.maxLines = 8\r\n            expandNotesButton?.text = context.getString(R.string.expand_notes)\r\n        }\r\n    }",
  "context" : "private fun expandTask() {\r\n        notesExpanded = !notesExpanded\r\n        if (notesExpanded) {\r\n            notesTextView?.maxLines = 100\r\n            expandNotesButton?.text = context.getString(R.string.collapse_notes)\r\n        } else {\r\n            notesTextView?.maxLines = 8\r\n            expandNotesButton?.text = context.getString(R.string.expand_notes)\r\n        }\r\n    }",
  "start_lineno" : "128",
  "methodName" : "expandTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\BaseTaskViewHolder.kt",
  "task_id" : "habitica-android/952",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.R\nimport android.widget.TextView\nimport android.widget.Button\nimport android.view.View\nprivate fun expandTask() {\r\n        notesExpanded = !notesExpanded\r\n        if (notesExpanded) {\r\n            notesTextView?.maxLines = 100\r\n            expandNotesButton?.text = context.getString(R.string.collapse_notes)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val scope\nvar task Task?\nvar movingFromPosition Int?\nvar errorButtonClicked\nvar userID String?\nvar isLocked\nvar context Context\nval mainTaskWrapper ViewGroup\nval assignedTextView TextView\nval completedCountTextView TextView\nval titleTextView EllipsisTextView\nval notesTextView EllipsisTextView?\nval calendarIconView ImageView?\nval iconViewTeam ImageView?\nval specialTaskTextView TextView?\nval iconViewChallenge ImageView?\nval iconViewReminder ImageView?\nval taskIconWrapper LinearLayout?\nval approvalRequiredTextView TextView\nval expandNotesButton Button?\nval syncingView ProgressBar?\nval errorIconView ImageButton?\nval taskGray Int\nval streakIconView ImageView\nval streakTextView TextView\nval reminderTextView TextView\nvar openTaskDisabled Boolean\nvar taskActionsDisabled Boolean\nvar notesExpanded\nval taskIconWrapperIsVisible Boolean",
  "app_type" : "life",
  "end_lineno" : "254",
  "ground_truth" : "        specialTaskTextView?.visibility = View.INVISIBLE\r\n        calendarIconView?.visibility = View.GONE\r\n    }",
  "context" : "protected open fun configureSpecialTaskTextView(task: Task) {\r\n        specialTaskTextView?.visibility = View.INVISIBLE\r\n        calendarIconView?.visibility = View.GONE\r\n    }",
  "start_lineno" : "251",
  "methodName" : "configureSpecialTaskTextView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\BaseTaskViewHolder.kt",
  "task_id" : "habitica-android/953",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport android.widget.TextView\nimport android.view.View\nprotected open fun configureSpecialTaskTextView(task: Task) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val scope\nvar task Task?\nvar movingFromPosition Int?\nvar errorButtonClicked\nvar userID String?\nvar isLocked\nvar context Context\nval mainTaskWrapper ViewGroup\nval assignedTextView TextView\nval completedCountTextView TextView\nval titleTextView EllipsisTextView\nval notesTextView EllipsisTextView?\nval calendarIconView ImageView?\nval iconViewTeam ImageView?\nval specialTaskTextView TextView?\nval iconViewChallenge ImageView?\nval iconViewReminder ImageView?\nval taskIconWrapper LinearLayout?\nval approvalRequiredTextView TextView\nval expandNotesButton Button?\nval syncingView ProgressBar?\nval errorIconView ImageButton?\nval taskGray Int\nval streakIconView ImageView\nval streakTextView TextView\nval reminderTextView TextView\nvar openTaskDisabled Boolean\nvar taskActionsDisabled Boolean\nvar notesExpanded\nval taskIconWrapperIsVisible Boolean",
  "app_type" : "life",
  "end_lineno" : "302",
  "ground_truth" : "        this.openTaskDisabled = openTaskDisabled\r\n        this.taskActionsDisabled = taskActionsDisabled\r\n    }",
  "context" : "open fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        this.openTaskDisabled = openTaskDisabled\r\n        this.taskActionsDisabled = taskActionsDisabled\r\n    }",
  "start_lineno" : "299",
  "methodName" : "setDisabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\BaseTaskViewHolder.kt",
  "task_id" : "habitica-android/954",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nopen fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val checkboxHolder ViewGroup\nval checkmarkView ImageView\nval lockView ImageView\nval checkboxBackground View\nval checklistView LinearLayout\nval checklistIndicatorWrapper ViewGroup\nval checklistCompletedTextView TextView\nval checklistAllTextView TextView\nval checklistDivider View\nvar expandedChecklistRow Int?",
  "app_type" : "life",
  "end_lineno" : "204",
  "ground_truth" : "            val layoutManager = recyclerView?.layoutManager as? LinearLayoutManager\r\n            layoutManager?.scrollToPositionWithOffset(this.bindingAdapterPosition, 15)\r\n        }\r\n        updateChecklistDisplay()\r\n    }",
  "context" : "private fun onChecklistIndicatorClicked() {\r\n        expandedChecklistRow = if (this.shouldDisplayExpandedChecklist()) null else bindingAdapterPosition\r\n        if (this.shouldDisplayExpandedChecklist()) {\r\n            val recyclerView = this.checklistView.parent.parent as? RecyclerView\r\n            val layoutManager = recyclerView?.layoutManager as? LinearLayoutManager\r\n            layoutManager?.scrollToPositionWithOffset(this.bindingAdapterPosition, 15)\r\n        }\r\n        updateChecklistDisplay()\r\n    }",
  "start_lineno" : "196",
  "methodName" : "onChecklistIndicatorClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt",
  "task_id" : "habitica-android/955",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nprivate fun onChecklistIndicatorClicked() {\r\n        expandedChecklistRow = if (this.shouldDisplayExpandedChecklist()) null else bindingAdapterPosition\r\n        if (this.shouldDisplayExpandedChecklist()) {\r\n            val recyclerView = this.checklistView.parent.parent as? RecyclerView\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val checkboxHolder ViewGroup\nval checkmarkView ImageView\nval lockView ImageView\nval checkboxBackground View\nval checklistView LinearLayout\nval checklistIndicatorWrapper ViewGroup\nval checklistCompletedTextView TextView\nval checklistAllTextView TextView\nval checklistDivider View\nvar expandedChecklistRow Int?",
  "app_type" : "life",
  "end_lineno" : "211",
  "ground_truth" : "            onCheckedChanged(!(task?.completed(userID) ?: false))\r\n        }\r\n    }",
  "context" : "override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (task?.isValid == true && !isLocked) {\r\n            onCheckedChanged(!(task?.completed(userID) ?: false))\r\n        }\r\n    }",
  "start_lineno" : "206",
  "methodName" : "onLeftActionTouched",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt",
  "task_id" : "habitica-android/956",
  "prompt" : "override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (task?.isValid == true && !isLocked) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val checkboxHolder ViewGroup\nval checkmarkView ImageView\nval lockView ImageView\nval checkboxBackground View\nval checklistView LinearLayout\nval checklistIndicatorWrapper ViewGroup\nval checklistCompletedTextView TextView\nval checklistAllTextView TextView\nval checklistDivider View\nvar expandedChecklistRow Int?",
  "app_type" : "life",
  "end_lineno" : "216",
  "ground_truth" : "        super.onRightActionTouched()\r\n        onChecklistIndicatorClicked()\r\n    }",
  "context" : "override fun onRightActionTouched() {\r\n        super.onRightActionTouched()\r\n        onChecklistIndicatorClicked()\r\n    }",
  "start_lineno" : "213",
  "methodName" : "onRightActionTouched",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt",
  "task_id" : "habitica-android/957",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRightActionTouched() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val checkboxHolder ViewGroup\nval checkmarkView ImageView\nval lockView ImageView\nval checkboxBackground View\nval checklistView LinearLayout\nval checklistIndicatorWrapper ViewGroup\nval checklistCompletedTextView TextView\nval checklistAllTextView TextView\nval checklistDivider View\nvar expandedChecklistRow Int?",
  "app_type" : "life",
  "end_lineno" : "229",
  "ground_truth" : "        }\r\n        if (isChecked != task?.completed(userID)) {\r\n            task?.let { scoreTaskFunc(it, if (task?.completed(userID) == false) TaskDirection.UP else TaskDirection.DOWN) }\r\n        }\r\n    }",
  "context" : "private fun onCheckedChanged(isChecked: Boolean) {\r\n        if (task?.isValid != true) {\r\n            return\r\n        }\r\n        if (isChecked != task?.completed(userID)) {\r\n            task?.let { scoreTaskFunc(it, if (task?.completed(userID) == false) TaskDirection.UP else TaskDirection.DOWN) }\r\n        }\r\n    }",
  "start_lineno" : "222",
  "methodName" : "onCheckedChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt",
  "task_id" : "habitica-android/958",
  "prompt" : "private fun onCheckedChanged(isChecked: Boolean) {\r\n        if (task?.isValid != true) {\r\n            return\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val checkboxHolder ViewGroup\nval checkmarkView ImageView\nval lockView ImageView\nval checkboxBackground View\nval checklistView LinearLayout\nval checklistIndicatorWrapper ViewGroup\nval checklistCompletedTextView TextView\nval checklistAllTextView TextView\nval checklistDivider View\nvar expandedChecklistRow Int?",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n        this.checkboxHolder.isEnabled = !taskActionsDisabled\r\n    }",
  "context" : "override fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n        this.checkboxHolder.isEnabled = !taskActionsDisabled\r\n    }",
  "start_lineno" : "231",
  "methodName" : "setDisabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt",
  "task_id" : "habitica-android/959",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskIconWrapperIsVisible Boolean\nval formatter DateFormat",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        } else {\r\n            this.streakTextView.visibility = View.GONE\r\n            this.streakIconView.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "override fun configureSpecialTaskTextView(task: Task) {\r\n        super.configureSpecialTaskTextView(task)\r\n        if ((task.streak ?: 0) > 0 && !task.isGroupTask) {\r\n            this.streakTextView.text = task.streak.toString()\r\n            this.streakTextView.visibility = View.VISIBLE\r\n            this.streakIconView.visibility = View.VISIBLE\r\n        } else {\r\n            this.streakTextView.visibility = View.GONE\r\n            this.streakIconView.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "76",
  "methodName" : "configureSpecialTaskTextView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\DailyViewHolder.kt",
  "task_id" : "habitica-android/960",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport android.view.View\noverride fun configureSpecialTaskTextView(task: Task) {\r\n        super.configureSpecialTaskTextView(task)\r\n        if ((task.streak ?: 0) > 0 && !task.isGroupTask) {\r\n            this.streakTextView.text = task.streak.toString()\r\n            this.streakTextView.visibility = View.VISIBLE\r\n            this.streakIconView.visibility = View.VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val btnPlusWrapper FrameLayout\nval btnPlusIconView ImageView\nval btnPlusCircleView View\nval btnPlus Button\nval btnMinusWrapper FrameLayout\nval btnMinusIconView ImageView\nval btnMinusCircleView View\nval btnMinus Button",
  "app_type" : "life",
  "end_lineno" : "143",
  "ground_truth" : "            onPlusButtonClicked()\r\n        }\r\n    }",
  "context" : "override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (!isLocked) {\r\n            onPlusButtonClicked()\r\n        }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "onLeftActionTouched",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt",
  "task_id" : "habitica-android/961",
  "prompt" : "override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (!isLocked) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val btnPlusWrapper FrameLayout\nval btnPlusIconView ImageView\nval btnPlusCircleView View\nval btnPlus Button\nval btnMinusWrapper FrameLayout\nval btnMinusIconView ImageView\nval btnMinusCircleView View\nval btnMinus Button",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "            onMinusButtonClicked()\r\n        }\r\n    }",
  "context" : "override fun onRightActionTouched() {\r\n        super.onRightActionTouched()\r\n        if (!isLocked) {\r\n            onMinusButtonClicked()\r\n        }\r\n    }",
  "start_lineno" : "145",
  "methodName" : "onRightActionTouched",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt",
  "task_id" : "habitica-android/962",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onRightActionTouched() {\r\n        super.onRightActionTouched()\r\n        if (!isLocked) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val btnPlusWrapper FrameLayout\nval btnPlusIconView ImageView\nval btnPlusCircleView View\nval btnPlus Button\nval btnMinusWrapper FrameLayout\nval btnMinusIconView ImageView\nval btnMinusCircleView View\nval btnMinus Button",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "        if (task?.up != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.UP) }\r\n    }",
  "context" : "private fun onPlusButtonClicked() {\r\n        if (task?.up != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.UP) }\r\n    }",
  "start_lineno" : "152",
  "methodName" : "onPlusButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt",
  "task_id" : "habitica-android/963",
  "prompt" : "import android.widget.Button\nprivate fun onPlusButtonClicked() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val btnPlusWrapper FrameLayout\nval btnPlusIconView ImageView\nval btnPlusCircleView View\nval btnPlus Button\nval btnMinusWrapper FrameLayout\nval btnMinusIconView ImageView\nval btnMinusCircleView View\nval btnMinus Button",
  "app_type" : "life",
  "end_lineno" : "160",
  "ground_truth" : "        if (task?.down != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.DOWN) }\r\n    }",
  "context" : "private fun onMinusButtonClicked() {\r\n        if (task?.down != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.DOWN) }\r\n    }",
  "start_lineno" : "157",
  "methodName" : "onMinusButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt",
  "task_id" : "habitica-android/964",
  "prompt" : "import android.widget.Button\nprivate fun onMinusButtonClicked() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val btnPlusWrapper FrameLayout\nval btnPlusIconView ImageView\nval btnPlusCircleView View\nval btnPlus Button\nval btnMinusWrapper FrameLayout\nval btnMinusIconView ImageView\nval btnMinusCircleView View\nval btnMinus Button",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "        this.btnPlus.isEnabled = !taskActionsDisabled\r\n        this.btnMinus.isEnabled = !taskActionsDisabled\r\n    }",
  "context" : "override fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n\r\n        this.btnPlus.isEnabled = !taskActionsDisabled\r\n        this.btnMinus.isEnabled = !taskActionsDisabled\r\n    }",
  "start_lineno" : "162",
  "methodName" : "setDisabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt",
  "task_id" : "habitica-android/965",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n        binding.buyButton.isEnabled = !taskActionsDisabled\r\n    }",
  "context" : "override fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n        binding.buyButton.isEnabled = !taskActionsDisabled\r\n    }",
  "start_lineno" : "42",
  "methodName" : "setDisabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\RewardViewHolder.kt",
  "task_id" : "habitica-android/966",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        setChecklistIndicatorBackgroundActive(data.isChecklistDisplayActive)\r\n        reminderTextView.visibility = View.GONE\r\n        this.streakTextView.visibility = View.GONE\r\n        super.bind(data, position, displayMode, ownerID)\r\n    }",
  "context" : "override fun bind(\r\n        data: Task,\r\n        position: Int,\r\n        displayMode: String,\r\n        ownerID: String?\r\n    ) {\r\n        this.task = data\r\n        setChecklistIndicatorBackgroundActive(data.isChecklistDisplayActive)\r\n        reminderTextView.visibility = View.GONE\r\n        this.streakTextView.visibility = View.GONE\r\n        super.bind(data, position, displayMode, ownerID)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "bind",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\TodoViewHolder.kt",
  "task_id" : "habitica-android/967",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun bind(\r\n        data: Task,\r\n        position: Int,\r\n        displayMode: String,\r\n        ownerID: String?\r\n    ) {\r\n        this.task = data\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var googleEmail String?\nval REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR\nval PLAY_SERVICES_RESOLUTION_REQUEST",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "            return false\r\n        }\r\n\r\n        return true\r\n    }",
  "context" : "private fun checkPlayServices(activity: Activity): Boolean {\r\n        val googleAPI = GoogleApiAvailability.getInstance()\r\n        val result = googleAPI.isGooglePlayServicesAvailable(activity)\r\n        if (result != ConnectionResult.SUCCESS) {\r\n            if (googleAPI.isUserResolvableError(result)) {\r\n                googleAPI.getErrorDialog(\r\n                    activity,\r\n                    result,\r\n                    PLAY_SERVICES_RESOLUTION_REQUEST\r\n                )?.show()\r\n            }\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }",
  "start_lineno" : "126",
  "methodName" : "checkPlayServices",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\AuthenticationViewModel.kt",
  "task_id" : "habitica-android/968",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.google.android.gms.common.GoogleApiAvailability\nimport com.google.android.gms.common.ConnectionResult\nimport android.app.Activity\nprivate fun checkPlayServices(activity: Activity): Boolean {\r\n        val googleAPI = GoogleApiAvailability.getInstance()\r\n        val result = googleAPI.isGooglePlayServicesAvailable(activity)\r\n        if (result != ConnectionResult.SUCCESS) {\r\n            if (googleAPI.isUserResolvableError(result)) {\r\n                googleAPI.getErrorDialog(\r\n                    activity,\r\n                    result,\r\n                    PLAY_SERVICES_RESOLUTION_REQUEST\r\n                )?.show()\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var googleEmail String?\nval REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR\nval PLAY_SERVICES_RESOLUTION_REQUEST",
  "app_type" : "life",
  "end_lineno" : "149",
  "ground_truth" : "            saveTokens(userAuthResponse.apiToken, userAuthResponse.id)\r\n        } catch (e: Exception) {\r\n            Analytics.logException(e)\r\n        }\r\n    }",
  "context" : "fun handleAuthResponse(userAuthResponse: UserAuthResponse) {\r\n        try {\r\n            saveTokens(userAuthResponse.apiToken, userAuthResponse.id)\r\n        } catch (e: Exception) {\r\n            Analytics.logException(e)\r\n        }\r\n    }",
  "start_lineno" : "143",
  "methodName" : "handleAuthResponse",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\AuthenticationViewModel.kt",
  "task_id" : "habitica-android/969",
  "prompt" : "import com.habitrpg.common.habitica.models.auth.UserAuthResponse\nimport com.habitrpg.android.habitica.R\nfun handleAuthResponse(userAuthResponse: UserAuthResponse) {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val user LiveData<User?>",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        userRepository.close()\r\n        super.onCleared()\r\n    }",
  "context" : "override fun onCleared() {\r\n        userRepository.close()\r\n        super.onCleared()\r\n    }",
  "start_lineno" : "16",
  "methodName" : "onCleared",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\BaseViewModel.kt",
  "task_id" : "habitica-android/970",
  "prompt" : "override fun onCleared() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val user LiveData<User?>",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "            userRepository.updateUser(path, value)\r\n        }\r\n    }",
  "context" : "fun updateUser(path: String, value: Any) {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(path, value)\r\n        }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\BaseViewModel.kt",
  "task_id" : "habitica-android/971",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.viewModelScope\nfun updateUser(path: String, value: Any) {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "87",
  "ground_truth" : "        socialRepository.close()\r\n        super.onCleared()\r\n    }",
  "context" : "override fun onCleared() {\r\n        socialRepository.close()\r\n        super.onCleared()\r\n    }",
  "start_lineno" : "84",
  "methodName" : "onCleared",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/972",
  "prompt" : "override fun onCleared() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "            socialRepository.inviteToGroup(group.value?.id ?: \"\", inviteData)\r\n        }\r\n    }",
  "context" : "fun inviteToGroup(inviteData: HashMap<String, Any>) {\r\n        viewModelScope.launchCatching {\r\n            socialRepository.inviteToGroup(group.value?.id ?: \"\", inviteData)\r\n        }\r\n    }",
  "start_lineno" : "146",
  "methodName" : "inviteToGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/973",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun inviteToGroup(inviteData: HashMap<String, Any>) {\r\n        viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "199",
  "ground_truth" : "            function?.invoke()\r\n        }\r\n    }",
  "context" : "fun joinGroup(id: String? = null, function: (() -> Unit)? = null) {\r\n        viewModelScope.launchCatching {\r\n            socialRepository.joinGroup(id ?: groupID)\r\n            function?.invoke()\r\n        }\r\n    }",
  "start_lineno" : "194",
  "methodName" : "joinGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/974",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun joinGroup(id: String? = null, function: (() -> Unit)? = null) {\r\n        viewModelScope.launchCatching {\r\n            socialRepository.joinGroup(id ?: groupID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "207",
  "ground_truth" : "            viewModelScope.launchCatching {\r\n                socialRepository.rejectGroupInvite(id ?: it)\r\n            }\r\n        }\r\n    }",
  "context" : "fun rejectGroupInvite(id: String? = null) {\r\n        groupID?.let {\r\n            viewModelScope.launchCatching {\r\n                socialRepository.rejectGroupInvite(id ?: it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "201",
  "methodName" : "rejectGroupInvite",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/975",
  "prompt" : "import com.habitrpg.android.habitica.models.social.Group\nfun rejectGroupInvite(id: String? = null) {\r\n        groupID?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "217",
  "ground_truth" : "                    socialRepository.markMessagesSeen(it)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "fun markMessagesSeen() {\r\n        groupID?.let {\r\n            if (it.isNotEmpty() && gotNewMessages) {\r\n                viewModelScope.launchCatching {\r\n                    socialRepository.markMessagesSeen(it)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "209",
  "methodName" : "markMessagesSeen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/976",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun markMessagesSeen() {\r\n        groupID?.let {\r\n            if (it.isNotEmpty() && gotNewMessages) {\r\n                viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "284",
  "ground_truth" : "            val messages = socialRepository.retrieveGroupChat(groupID)\r\n            _chatMessages.postValue(messages)\r\n            onComplete()\r\n        }\r\n    }",
  "context" : "fun retrieveGroupChat(onComplete: () -> Unit) {\r\n        var groupID = groupID\r\n        if (groupViewType == GroupViewType.PARTY) {\r\n            groupID = \"party\"\r\n        }\r\n        if (groupID.isNullOrEmpty()) {\r\n            onComplete()\r\n            return\r\n        }\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            val messages = socialRepository.retrieveGroupChat(groupID)\r\n            _chatMessages.postValue(messages)\r\n            onComplete()\r\n        }\r\n    }",
  "start_lineno" : "270",
  "methodName" : "retrieveGroupChat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/977",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun retrieveGroupChat(onComplete: () -> Unit) {\r\n        var groupID = groupID\r\n        if (groupViewType == GroupViewType.PARTY) {\r\n            groupID = \"party\"\r\n        }\r\n        if (groupID.isNullOrEmpty()) {\r\n            onComplete()\r\n            return\r\n        }\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "296",
  "ground_truth" : "                bundle?.getString(\"leader\"),\r\n                bundle?.getBoolean(\"leaderOnlyChallenges\")\r\n            )\r\n        }\r\n    }",
  "context" : "fun updateGroup(bundle: Bundle?) {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            socialRepository.updateGroup(\r\n                group.value,\r\n                bundle?.getString(\"name\"),\r\n                bundle?.getString(\"description\"),\r\n                bundle?.getString(\"leader\"),\r\n                bundle?.getBoolean(\"leaderOnlyChallenges\")\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "286",
  "methodName" : "updateGroup",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/978",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nimport android.os.Bundle\nfun updateGroup(bundle: Bundle?) {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            socialRepository.updateGroup(\r\n                group.value,\r\n                bundle?.getString(\"name\"),\r\n                bundle?.getString(\"description\"),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val groupIDState\nval groupIDFlow Flow<String?>\nvar groupViewType GroupViewType?\nval groupFlow\nval group\nval leaderFlow\nval leader\nval isMemberFlow\nval isMemberData\nval _chatMessages MutableLiveData<List<ChatMessage>>\nval chatmessages LiveData<List<ChatMessage>>\nvar gotNewMessages Boolean\nval groupID String?\nval isMember Boolean\nval leaderID String?\nval isLeader Boolean\nval isPublicGuild Boolean\nval pendingInvites\nval pendingInviteStates",
  "app_type" : "life",
  "end_lineno" : "308",
  "ground_truth" : "            pendingInviteStates[invitedMember.id] = LoadingButtonState.SUCCESS\r\n            delay(1.toDuration(DurationUnit.SECONDS))\r\n            pendingInvites.remove(invitedMember)\r\n        }\r\n    }",
  "context" : "fun rescindInvite(invitedMember: Member) {\r\n        pendingInviteStates[invitedMember.id] = LoadingButtonState.LOADING\r\n        viewModelScope.launchCatching({\r\n            pendingInviteStates[invitedMember.id] = LoadingButtonState.FAILED\r\n        }) {\r\n            socialRepository.removeMemberFromGroup(groupID ?: \"\", invitedMember.id)\r\n            pendingInviteStates[invitedMember.id] = LoadingButtonState.SUCCESS\r\n            delay(1.toDuration(DurationUnit.SECONDS))\r\n            pendingInvites.remove(invitedMember)\r\n        }\r\n    }",
  "start_lineno" : "298",
  "methodName" : "rescindInvite",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt",
  "task_id" : "habitica-android/979",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.ui.views.LoadingButtonState\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\nimport androidx.lifecycle.viewModelScope\nfun rescindInvite(invitedMember: Member) {\r\n        pendingInviteStates[invitedMember.id] = LoadingButtonState.LOADING\r\n        viewModelScope.launchCatching({\r\n            pendingInviteStates[invitedMember.id] = LoadingButtonState.FAILED\r\n        }) {\r\n            socialRepository.removeMemberFromGroup(groupID ?: \"\", invitedMember.id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val recipientID String?\nval recipientUsername String?\nvar memberIDFlow\nval memberIDState StateFlow<String?>\nval config\nval dataSourceFactory\nval messages LiveData<PagedList<ChatMessage>>\nval member\nval memberID String?\nvar lastFetchWasEnd\nval sourceLiveData\nvar latestSource MessagesDataSource",
  "app_type" : "life",
  "end_lineno" : "61",
  "ground_truth" : "        if (memberID == memberIDState.value) return\r\n        memberIDFlow.value = memberID\r\n    }",
  "context" : "fun setMemberID(memberID: String) {\r\n        if (memberID == memberIDState.value) return\r\n        memberIDFlow.value = memberID\r\n    }",
  "start_lineno" : "58",
  "methodName" : "setMemberID",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt",
  "task_id" : "habitica-android/980",
  "prompt" : "import com.habitrpg.android.habitica.models.members.Member\nfun setMemberID(memberID: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val recipientID String?\nval recipientUsername String?\nvar memberIDFlow\nval memberIDState StateFlow<String?>\nval config\nval dataSourceFactory\nval messages LiveData<PagedList<ChatMessage>>\nval member\nval memberID String?\nvar lastFetchWasEnd\nval sourceLiveData\nvar latestSource MessagesDataSource",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "        recipientID = newID\r\n        latestSource.recipientID = newID\r\n    }",
  "context" : "fun updateRecipientID(newID: String?) {\r\n        recipientID = newID\r\n        latestSource.recipientID = newID\r\n    }",
  "start_lineno" : "147",
  "methodName" : "updateRecipientID",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt",
  "task_id" : "habitica-android/981",
  "prompt" : "fun updateRecipientID(newID: String?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val recipientID String?\nval recipientUsername String?\nvar memberIDFlow\nval memberIDState StateFlow<String?>\nval config\nval dataSourceFactory\nval messages LiveData<PagedList<ChatMessage>>\nval member\nval memberID String?\nvar lastFetchWasEnd\nval sourceLiveData\nvar latestSource MessagesDataSource",
  "app_type" : "life",
  "end_lineno" : "156",
  "ground_truth" : "        sourceLiveData.postValue(latestSource)\r\n        return latestSource\r\n    }",
  "context" : "override fun create(): DataSource<Int, ChatMessage> {\r\n        latestSource = MessagesDataSource(socialRepository, recipientID, footer)\r\n        sourceLiveData.postValue(latestSource)\r\n        return latestSource\r\n    }",
  "start_lineno" : "152",
  "methodName" : "create",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt",
  "task_id" : "habitica-android/982",
  "prompt" : "import com.habitrpg.android.habitica.models.social.ChatMessage\nimport androidx.paging.DataSource\noverride fun create(): DataSource<Int, ChatMessage> {\r\n        latestSource = MessagesDataSource(socialRepository, recipientID, footer)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val usesAutoEquip Boolean\nval usesCostume Boolean",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "            inventoryRepository.getEquipment(key).collect {\r\n                onSuccess(it)\r\n            }\r\n        }\r\n    }",
  "context" : "fun getGear(key: String, onSuccess: (Equipment) -> Unit) {\r\n        viewModelScope.launchCatching {\r\n            inventoryRepository.getEquipment(key).collect {\r\n                onSuccess(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "24",
  "methodName" : "getGear",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\inventory\\equipment\\EquipmentOverviewViewModel.kt",
  "task_id" : "habitica-android/983",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Equipment\nimport androidx.lifecycle.viewModelScope\nfun getGear(key: String, onSuccess: (Equipment) -> Unit) {\r\n        viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "        contentRepository.close()\r\n        super.onCleared()\r\n    }",
  "context" : "override fun onCleared() {\r\n        taskRepository.close()\r\n        inventoryRepository.close()\r\n        contentRepository.close()\r\n        super.onCleared()\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onCleared",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/984",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun onCleared() {\r\n        taskRepository.close()\r\n        inventoryRepository.close()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "82",
  "ground_truth" : "            }\r\n        } catch (e: Exception) {\r\n            Analytics.logException(e)\r\n        }\r\n    }",
  "context" : "fun onCreate() {\r\n        try {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n                taskAlarmManager.scheduleAllSavedAlarms(\r\n                    sharedPreferences.getBoolean(\r\n                        \"preventDailyReminder\",\r\n                        false\r\n                    )\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            Analytics.logException(e)\r\n        }\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/985",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.viewModelScope\nfun onCreate() {\r\n        try {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n                taskAlarmManager.scheduleAllSavedAlarms(\r\n                    sharedPreferences.getBoolean(\r\n                        \"preventDailyReminder\",\r\n                        false\r\n                    )\r\n                )\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "90",
  "ground_truth" : "        sharedPreferences.edit {\r\n            putLong(\"lastAppLaunch\", Date().time)\r\n            putBoolean(\"preventDailyReminder\", false)\r\n        }\r\n    }",
  "context" : "fun onResume() {\r\n        // Track when the app was last opened, so that we can use this to send out special reminders after a week of inactivity\r\n        sharedPreferences.edit {\r\n            putLong(\"lastAppLaunch\", Date().time)\r\n            putBoolean(\"preventDailyReminder\", false)\r\n        }\r\n    }",
  "start_lineno" : "84",
  "methodName" : "onResume",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/986",
  "prompt" : "import com.habitrpg.android.habitica.R\nfun onResume() {\r\n        // Track when the app was last opened, so that we can use this to send out special reminders after a week of inactivity\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "133",
  "ground_truth" : "            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }",
  "context" : "fun updateAllowPushNotifications(allowPushNotifications: Boolean) {\r\n        sharedPreferences.getBoolean(\"usePushNotifications\", true)\r\n        sharedPreferences.edit {\r\n            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }",
  "start_lineno" : "128",
  "methodName" : "updateAllowPushNotifications",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/987",
  "prompt" : "import androidx.core.content.edit\nfun updateAllowPushNotifications(allowPushNotifications: Boolean) {\r\n        sharedPreferences.getBoolean(\"usePushNotifications\", true)\r\n        sharedPreferences.edit {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "        updateUser(\"flags.tutorial.\" + step.tutorialGroup + \".\" + step.identifier, true)\r\n        logTutorialStatus(step, true)\r\n    }",
  "context" : "override fun onTutorialCompleted(step: TutorialStep) {\r\n        updateUser(\"flags.tutorial.\" + step.tutorialGroup + \".\" + step.identifier, true)\r\n        logTutorialStatus(step, true)\r\n    }",
  "start_lineno" : "135",
  "methodName" : "onTutorialCompleted",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/988",
  "prompt" : "import com.habitrpg.android.habitica.models.TutorialStep\noverride fun onTutorialCompleted(step: TutorialStep) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "155",
  "ground_truth" : "            EventCategory.BEHAVIOUR,\r\n            HitType.EVENT,\r\n            additionalData\r\n        )\r\n    }",
  "context" : "fun logTutorialStatus(step: TutorialStep, complete: Boolean) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"eventLabel\"] = step.identifier + \"-android\"\r\n        additionalData[\"eventValue\"] = step.identifier ?: \"\"\r\n        additionalData[\"complete\"] = complete\r\n        Analytics.sendEvent(\r\n            \"tutorial\",\r\n            EventCategory.BEHAVIOUR,\r\n            HitType.EVENT,\r\n            additionalData\r\n        )\r\n    }",
  "start_lineno" : "144",
  "methodName" : "logTutorialStatus",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/989",
  "prompt" : "import com.habitrpg.android.habitica.models.TutorialStep\nimport com.habitrpg.android.habitica.helpers.Analytics\nfun logTutorialStatus(step: TutorialStep, complete: Boolean) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"eventLabel\"] = step.identifier + \"-android\"\r\n        additionalData[\"eventValue\"] = step.identifier ?: \"\"\r\n        additionalData[\"complete\"] = complete\r\n        Analytics.sendEvent(\r\n            \"tutorial\",\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isAuthenticated Boolean\nval launchScreen String?\nvar preferenceLanguage String?\nvar requestNotificationPermission\nval canShowTeamPlanHeader",
  "app_type" : "life",
  "end_lineno" : "165",
  "ground_truth" : "                return@launchCatching\r\n            }\r\n            onResult(maintenanceResponse)\r\n        }\r\n    }",
  "context" : "fun ifNeedsMaintenance(onResult: ((MaintenanceResponse) -> Unit)) {\r\n        viewModelScope.launchCatching {\r\n            val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n            if (maintenanceResponse?.activeMaintenance == null) {\r\n                return@launchCatching\r\n            }\r\n            onResult(maintenanceResponse)\r\n        }\r\n    }",
  "start_lineno" : "157",
  "methodName" : "ifNeedsMaintenance",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt",
  "task_id" : "habitica-android/990",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.shared.habitica.models.responses.MaintenanceResponse\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.viewModelScope\nfun ifNeedsMaintenance(onResult: ((MaintenanceResponse) -> Unit)) {\r\n        viewModelScope.launchCatching {\r\n            val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n            if (maintenanceResponse?.activeMaintenance == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val formattedUsername CharSequence?\nval userID String\nval username CharSequence\nval displayName CharSequence\nval partyID String?\nval isUserFainted Boolean\nval isUserInParty Boolean\nval mirrorGroupTasks List<String>\nval user LiveData<User?>\nvar currentTeamPlan\nvar currentTeamPlanGroup\nvar currentTeamPlanMembers LiveData<List<Member>>",
  "app_type" : "life",
  "end_lineno" : "77",
  "ground_truth" : "            userRepository.updateUser(path, value)\r\n        }\r\n    }",
  "context" : "fun updateUser(path: String, value: Any) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(path, value)\r\n        }\r\n    }",
  "start_lineno" : "73",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainUserViewModel.kt",
  "task_id" : "habitica-android/991",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nfun updateUser(path: String, value: Any) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val formattedUsername CharSequence?\nval userID String\nval username CharSequence\nval displayName CharSequence\nval partyID String?\nval isUserFainted Boolean\nval isUserInParty Boolean\nval mirrorGroupTasks List<String>\nval user LiveData<User?>\nvar currentTeamPlan\nvar currentTeamPlanGroup\nvar currentTeamPlanMembers LiveData<List<Member>>",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "            userRepository.updateUser(data)\r\n        }\r\n    }",
  "context" : "fun updateUser(data: Map<String, Any>) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(data)\r\n        }\r\n    }",
  "start_lineno" : "79",
  "methodName" : "updateUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainUserViewModel.kt",
  "task_id" : "habitica-android/992",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nfun updateUser(data: Map<String, Any>) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "            it.count { notification ->\r\n                (notification.type != Notification.Type.UNALLOCATED_STATS_POINTS.type) || hasStats\r\n            }\r\n        }.distinctUntilChanged()\r\n    }",
  "context" : "fun getNotificationCount(): Flow<Int> {\r\n        return getNotifications().map {\r\n            it.count { notification ->\r\n                (notification.type != Notification.Type.UNALLOCATED_STATS_POINTS.type) || hasStats\r\n            }\r\n        }.distinctUntilChanged()\r\n    }",
  "start_lineno" : "93",
  "methodName" : "getNotificationCount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/993",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.common.habitica.models.Notification\nfun getNotificationCount(): Flow<Int> {\r\n        return getNotifications().map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "        return getNotifications().map { it.all { notification -> notification.seen == true } }\r\n            .distinctUntilChanged()\r\n    }",
  "context" : "fun allNotificationsSeen(): Flow<Boolean> {\r\n        return getNotifications().map { it.all { notification -> notification.seen == true } }\r\n            .distinctUntilChanged()\r\n    }",
  "start_lineno" : "101",
  "methodName" : "allNotificationsSeen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/994",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.common.habitica.models.Notification\nfun allNotificationsSeen(): Flow<Boolean> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "                val data = notification.data as? NewChatMessageData\r\n                isPartyMessage(data)\r\n            } != null\r\n        }.distinctUntilChanged()\r\n    }",
  "context" : "fun getHasPartyNotification(): Flow<Boolean> {\r\n        return getNotifications().map {\r\n            it.find { notification ->\r\n                val data = notification.data as? NewChatMessageData\r\n                isPartyMessage(data)\r\n            } != null\r\n        }.distinctUntilChanged()\r\n    }",
  "start_lineno" : "106",
  "methodName" : "getHasPartyNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/995",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.common.habitica.models.Notification\nfun getHasPartyNotification(): Flow<Boolean> {\r\n        return getNotifications().map {\r\n            it.find { notification ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "178",
  "ground_truth" : "            return false\r\n        }\r\n\r\n        return party?.id == data.group?.id\r\n    }",
  "context" : "fun isPartyMessage(data: NewChatMessageData?): Boolean {\r\n        if (party?.isValid != true || data?.group?.id == null) {\r\n            return false\r\n        }\r\n\r\n        return party?.id == data.group?.id\r\n    }",
  "start_lineno" : "172",
  "methodName" : "isPartyMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/996",
  "prompt" : "import com.habitrpg.common.habitica.models.notifications.NewChatMessageData\nfun isPartyMessage(data: NewChatMessageData?): Boolean {\r\n        if (party?.isValid != true || data?.group?.id == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "204",
  "ground_truth" : "\r\n        viewModelScope.launchCatching {\r\n            userRepository.readNotification(notification.id)\r\n        }\r\n    }",
  "context" : "fun dismissNotification(notification: Notification) {\r\n        if (isCustomNotification(notification)) {\r\n            if (isCustomNewStuffNotification(notification)) {\r\n                updateUser(\"flags.newStuff\", false)\r\n                customNotifications.value =\r\n                    customNotifications.value.filterNot { it.id == notification.id }\r\n            }\r\n            return\r\n        }\r\n\r\n        viewModelScope.launchCatching {\r\n            userRepository.readNotification(notification.id)\r\n        }\r\n    }",
  "start_lineno" : "191",
  "methodName" : "dismissNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/997",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.models.user.User\nfun dismissNotification(notification: Notification) {\r\n        if (isCustomNotification(notification)) {\r\n            if (isCustomNewStuffNotification(notification)) {\r\n                updateUser(\"flags.newStuff\", false)\r\n                customNotifications.value =\r\n                    customNotifications.value.filterNot { it.id == notification.id }\r\n            }\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "244",
  "ground_truth" : "\r\n        viewModelScope.launchCatching {\r\n            userRepository.seeNotifications(notificationIds)\r\n        }\r\n    }",
  "context" : "fun markNotificationsAsSeen(notifications: List<Notification>) {\r\n        val unseenIds =\r\n            notifications.filter { !isCustomNotification(it) }.filter { it.seen == false }\r\n                .map { it.id }\r\n\r\n        if (unseenIds.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        val notificationIds = HashMap<String, List<String>>()\r\n        notificationIds[\"notificationIds\"] = unseenIds\r\n\r\n        viewModelScope.launchCatching {\r\n            userRepository.seeNotifications(notificationIds)\r\n        }\r\n    }",
  "start_lineno" : "229",
  "methodName" : "markNotificationsAsSeen",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/998",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport com.habitrpg.common.habitica.models.Notification\nfun markNotificationsAsSeen(notifications: List<Notification>) {\r\n        val unseenIds =\r\n            notifications.filter { !isCustomNotification(it) }.filter { it.seen == false }\r\n                .map { it.id }\r\n\r\n        if (unseenIds.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        val notificationIds = HashMap<String, List<String>>()\r\n        notificationIds[\"notificationIds\"] = unseenIds\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "249",
  "ground_truth" : "        return notificationsManager.getNotification(id)\r\n            ?: customNotifications.value.find { it.id == id }\r\n    }",
  "context" : "private fun findNotification(id: String): Notification? {\r\n        return notificationsManager.getNotification(id)\r\n            ?: customNotifications.value.find { it.id == id }\r\n    }",
  "start_lineno" : "246",
  "methodName" : "findNotification",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/999",
  "prompt" : "import com.habitrpg.common.habitica.models.Notification\nprivate fun findNotification(id: String): Notification? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "406",
  "ground_truth" : "                socialRepository.joinGroup(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun acceptGroupInvitation(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n                socialRepository.joinGroup(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "399",
  "methodName" : "acceptGroupInvitation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/1000",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.viewModelScope\nprivate fun acceptGroupInvitation(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "415",
  "ground_truth" : "                socialRepository.rejectGroupInvite(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "context" : "fun rejectGroupInvite(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launchCatching {\r\n                socialRepository.rejectGroupInvite(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "408",
  "methodName" : "rejectGroupInvite",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/1001",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun rejectGroupInvite(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "424",
  "ground_truth" : "                socialRepository.acceptQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun acceptQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r\n                socialRepository.acceptQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "417",
  "methodName" : "acceptQuestInvitation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/1002",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nprivate fun acceptQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "433",
  "ground_truth" : "                socialRepository.rejectQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun rejectQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r\n                socialRepository.rejectQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "426",
  "methodName" : "rejectQuestInvitation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/1003",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nprivate fun rejectQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val supportedNotificationTypes\nval actionableNotificationTypes\nvar party UserParty?\nvar hasStats\nval customNotifications",
  "app_type" : "life",
  "end_lineno" : "439",
  "ground_truth" : "            refreshNotifications()\r\n        }\r\n    }",
  "context" : "private fun refreshUser() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            refreshNotifications()\r\n        }\r\n    }",
  "start_lineno" : "435",
  "methodName" : "refreshUser",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt",
  "task_id" : "habitica-android/1004",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.viewModelScope\nprivate fun refreshUser() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isQuestActive Boolean\nval isUserOnQuest Boolean\nval membersFlow\nval members",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "                socialRepository.retrieveGroup(groupID)\r\n                userRepository.retrieveUser()\r\n            }\r\n        }\r\n    }",
  "context" : "fun acceptQuest() {\r\n        groupID?.let { groupID ->\r\n            viewModelScope.launchCatching {\r\n                socialRepository.acceptQuest(null, groupID)\r\n                socialRepository.retrieveGroup(groupID)\r\n                userRepository.retrieveUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "50",
  "methodName" : "acceptQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\PartyViewModel.kt",
  "task_id" : "habitica-android/1005",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun acceptQuest() {\r\n        groupID?.let { groupID ->\r\n            viewModelScope.launchCatching {\r\n                socialRepository.acceptQuest(null, groupID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isQuestActive Boolean\nval isUserOnQuest Boolean\nval membersFlow\nval members",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "                socialRepository.retrieveGroup(groupID)\r\n                userRepository.retrieveUser()\r\n            }\r\n        }\r\n    }",
  "context" : "fun rejectQuest() {\r\n        groupID?.let { groupID ->\r\n            viewModelScope.launchCatching {\r\n                socialRepository.rejectQuest(null, groupID)\r\n                socialRepository.retrieveGroup(groupID)\r\n                userRepository.retrieveUser()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "60",
  "methodName" : "rejectQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\PartyViewModel.kt",
  "task_id" : "habitica-android/1006",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun rejectQuest() {\r\n        groupID?.let { groupID ->\r\n            viewModelScope.launchCatching {\r\n                socialRepository.rejectQuest(null, groupID)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isQuestActive Boolean\nval isUserOnQuest Boolean\nval membersFlow\nval members",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        val user = user.value\r\n        return !(user?.party == null || user.party?.quest == null) && !isQuestActive && user.party?.quest?.RSVPNeeded == true\r\n    }",
  "context" : "fun showParticipantButtons(): Boolean {\r\n        val user = user.value\r\n        return !(user?.party == null || user.party?.quest == null) && !isQuestActive && user.party?.quest?.RSVPNeeded == true\r\n    }",
  "start_lineno" : "70",
  "methodName" : "showParticipantButtons",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\PartyViewModel.kt",
  "task_id" : "habitica-android/1007",
  "prompt" : "fun showParticipantButtons(): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val isQuestActive Boolean\nval isUserOnQuest Boolean\nval membersFlow\nval members",
  "app_type" : "life",
  "end_lineno" : "85",
  "ground_truth" : "                .collect {\r\n                    setGroupID(it)\r\n                }\r\n        }\r\n    }",
  "context" : "fun loadPartyID() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.getUser()\r\n                .map { it?.party?.id }\r\n                .distinctUntilChanged()\r\n                .filterNotNull()\r\n                .collect {\r\n                    setGroupID(it)\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "loadPartyID",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\PartyViewModel.kt",
  "task_id" : "habitica-android/1008",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.viewModelScope\nfun loadPartyID() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.getUser()\r\n                .map { it?.party?.id }\r\n                .distinctUntilChanged()\r\n                .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "105",
  "ground_truth" : "            ownerID.value = owners[nextIndex].first\r\n        } else {\r\n            ownerID.value = owners[0].first\r\n        }\r\n    }",
  "context" : "fun cycleOwnerIDs() {\r\n        if (owners.size <= 1) return\r\n        val nextIndex = owners.indexOfFirst { it.first == ownerID.value } + 1\r\n        if (nextIndex < owners.size) {\r\n            ownerID.value = owners[nextIndex].first\r\n        } else {\r\n            ownerID.value = owners[0].first\r\n        }\r\n    }",
  "start_lineno" : "97",
  "methodName" : "cycleOwnerIDs",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1009",
  "prompt" : "fun cycleOwnerIDs() {\r\n        if (owners.size <= 1) return\r\n        val nextIndex = owners.indexOfFirst { it.first == ownerID.value } + 1\r\n        if (nextIndex < owners.size) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "        filterSets.forEach {\r\n            val old = it.value.value\r\n            it.value.value = Triple(old?.first, old?.second, tags)\r\n        }\r\n    }",
  "context" : "fun addActiveTag(tagID: String) {\r\n        if (!tags.contains(tagID)) {\r\n            tags.add(tagID)\r\n        }\r\n        filterSets.forEach {\r\n            val old = it.value.value\r\n            it.value.value = Triple(old?.first, old?.second, tags)\r\n        }\r\n    }",
  "start_lineno" : "164",
  "methodName" : "addActiveTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1010",
  "prompt" : "fun addActiveTag(tagID: String) {\r\n        if (!tags.contains(tagID)) {\r\n            tags.add(tagID)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "182",
  "ground_truth" : "        filterSets.forEach {\r\n            val old = it.value.value\r\n            it.value.value = Triple(old?.first, old?.second, tags)\r\n        }\r\n    }",
  "context" : "fun removeActiveTag(tagID: String) {\r\n        if (tags.contains(tagID)) {\r\n            tags.remove(tagID)\r\n        }\r\n        filterSets.forEach {\r\n            val old = it.value.value\r\n            it.value.value = Triple(old?.first, old?.second, tags)\r\n        }\r\n    }",
  "start_lineno" : "174",
  "methodName" : "removeActiveTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1011",
  "prompt" : "fun removeActiveTag(tagID: String) {\r\n        if (tags.contains(tagID)) {\r\n            tags.remove(tagID)\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "201",
  "ground_truth" : "            Task.FILTER_ACTIVE != activeFilters[type]\r\n        } else {\r\n            Task.FILTER_ALL != activeFilters[type]\r\n        }\r\n    }",
  "context" : "private fun isTaskFilterActive(type: TaskType?): Boolean {\r\n        if (activeFilters[type] == null) {\r\n            return false\r\n        }\r\n        return if (TaskType.TODO == type) {\r\n            Task.FILTER_ACTIVE != activeFilters[type]\r\n        } else {\r\n            Task.FILTER_ALL != activeFilters[type]\r\n        }\r\n    }",
  "start_lineno" : "192",
  "methodName" : "isTaskFilterActive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1012",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun isTaskFilterActive(type: TaskType?): Boolean {\r\n        if (activeFilters[type] == null) {\r\n            return false\r\n        }\r\n        return if (TaskType.TODO == type) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "219",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return filtered\r\n    }",
  "context" : "fun filter(tasks: List<Task>): List<Task> {\r\n        if (tasks.isEmpty()) {\r\n            return tasks\r\n        }\r\n        val filtered = ArrayList<Task>()\r\n        var activeFilter: String? = null\r\n        if (activeFilters.size > 0) {\r\n            activeFilter = activeFilters[tasks[0].type]\r\n        }\r\n        for (task in tasks) {\r\n            if (isFiltered(task, activeFilter)) {\r\n                filtered.add(task)\r\n            }\r\n        }\r\n\r\n        return filtered\r\n    }",
  "start_lineno" : "203",
  "methodName" : "filter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1013",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nfun filter(tasks: List<Task>): List<Task> {\r\n        if (tasks.isEmpty()) {\r\n            return tasks\r\n        }\r\n        val filtered = ArrayList<Task>()\r\n        var activeFilter: String? = null\r\n        if (activeFilters.size > 0) {\r\n            activeFilter = activeFilters[tasks[0].type]\r\n        }\r\n        for (task in tasks) {\r\n            if (isFiltered(task, activeFilter)) {\r\n                filtered.add(task)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "271",
  "ground_truth" : "            activeFilters[type]\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "context" : "fun getActiveFilter(type: TaskType?): String? {\r\n        return if (activeFilters.containsKey(type)) {\r\n            activeFilters[type]\r\n        } else {\r\n            null\r\n        }\r\n    }",
  "start_lineno" : "265",
  "methodName" : "getActiveFilter",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1014",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\nfun getActiveFilter(type: TaskType?): String? {\r\n        return if (activeFilters.containsKey(type)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "327",
  "ground_truth" : "        }\r\n        return task.isAssignedToUser(userViewModel.userID) || task.group?.assignedUsers?.isEmpty() != false\r\n    }",
  "context" : "override fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r\n        }\r\n        return task.isAssignedToUser(userViewModel.userID) || task.group?.assignedUsers?.isEmpty() != false\r\n    }",
  "start_lineno" : "322",
  "methodName" : "canScoreTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1015",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "336",
  "ground_truth" : "        }\r\n        val groupID = task.group?.groupID ?: return true\r\n        val group = userRepository.getTeamPlan(groupID).firstOrNull()\r\n        return group?.hasTaskEditPrivileges(userViewModel.userID) ?: false\r\n    }",
  "context" : "override suspend fun canEditTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r\n        }\r\n        val groupID = task.group?.groupID ?: return true\r\n        val group = userRepository.getTeamPlan(groupID).firstOrNull()\r\n        return group?.hasTaskEditPrivileges(userViewModel.userID) ?: false\r\n    }",
  "start_lineno" : "329",
  "methodName" : "canEditTask",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1016",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun canEditTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var owners List<Pair<String, CharSequence>>\nvar canSwitchOwners\nval ownerID MutableLiveData<String?>\nvar teamPlans\nvar initialPreferenceFilterSet Boolean\nval isPersonalBoard Boolean\nval ownerTitle CharSequence\nval filterSets HashMap<TaskType, MutableLiveData<Triple<String?, String?, List<String>>>>\nvar searchQuery String?\nval activeFilters\nvar tags MutableList<String>",
  "app_type" : "life",
  "end_lineno" : "345",
  "ground_truth" : "        }\r\n        val groupID = ownerID.value ?: return true\r\n        val group = userRepository.getTeamPlan(groupID).firstOrNull()\r\n        return group?.hasTaskEditPrivileges(userViewModel.userID) ?: false\r\n    }",
  "context" : "override suspend fun canAddTasks(): Boolean {\r\n        if (isPersonalBoard) {\r\n            return true\r\n        }\r\n        val groupID = ownerID.value ?: return true\r\n        val group = userRepository.getTeamPlan(groupID).firstOrNull()\r\n        return group?.hasTaskEditPrivileges(userViewModel.userID) ?: false\r\n    }",
  "start_lineno" : "338",
  "methodName" : "canAddTasks",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt",
  "task_id" : "habitica-android/1017",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun canAddTasks(): Boolean {\r\n        if (isPersonalBoard) {\r\n            return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val values Sequence<Pair<User, TeamPlan?>>",
  "app_type" : "life",
  "end_lineno" : "103",
  "ground_truth" : "        Stats.WARRIOR -> resources.getString(R.string.warrior)\r\n        Stats.MAGE -> resources.getString(R.string.mage)\r\n        else -> resources.getString(R.string.warrior)\r\n    }\r\n}",
  "context" : "fun getTranslatedClassName(resources : Resources, className : String?) : String {\r\n    return when (className) {\r\n        Stats.HEALER -> resources.getString(R.string.healer)\r\n        Stats.ROGUE -> resources.getString(R.string.rogue)\r\n        Stats.WARRIOR -> resources.getString(R.string.warrior)\r\n        Stats.MAGE -> resources.getString(R.string.mage)\r\n        else -> resources.getString(R.string.warrior)\r\n    }\r\n}",
  "start_lineno" : "95",
  "methodName" : "getTranslatedClassName",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\AppHeaderView.kt",
  "task_id" : "habitica-android/1018",
  "prompt" : "import com.habitrpg.android.habitica.models.user.Stats\nimport com.habitrpg.android.habitica.R\nimport android.content.res.Resources\nfun getTranslatedClassName(resources : Resources, className : String?) : String {\r\n    return when (className) {\r\n        Stats.HEALER -> resources.getString(R.string.healer)\r\n        Stats.ROGUE -> resources.getString(R.string.rogue)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val values Sequence<Pair<User, TeamPlan?>>",
  "app_type" : "life",
  "end_lineno" : "410",
  "ground_truth" : "            onMemberRowClicked = { },\r\n            onClassSelectionClicked = { }\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\n@Preview\r\nprivate fun Preview(@PreviewParameter(UserProvider::class) data: Pair<User, TeamPlan>) {\r\n    HabiticaTheme {\r\n        AppHeaderView(\r\n            data.first,\r\n            teamPlan = data.second,\r\n            modifier = Modifier\r\n                .background(HabiticaTheme.colors.contentBackground)\r\n                .padding(8.dp),\r\n            onMemberRowClicked = { },\r\n            onClassSelectionClicked = { }\r\n        )\r\n    }\r\n}",
  "start_lineno" : "395",
  "methodName" : "Preview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\AppHeaderView.kt",
  "task_id" : "habitica-android/1019",
  "prompt" : "import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport com.habitrpg.android.habitica.ui.theme.colors\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.TeamPlan\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.background\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview(@PreviewParameter(UserProvider::class) data: Pair<User, TeamPlan>) {\r\n    HabiticaTheme {\r\n        AppHeaderView(\r\n            data.first,\r\n            teamPlan = data.second,\r\n            modifier = Modifier\r\n                .background(HabiticaTheme.colors.contentBackground)\r\n                .padding(8.dp),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "42",
  "ground_truth" : "    val viewGroup = this.findViewById(android.R.id.content) as ViewGroup\r\n    addContentToView(viewGroup, content)\r\n}",
  "context" : "fun Activity.showAsBottomSheet(content: @Composable (() -> Unit) -> Unit) {\r\n    val viewGroup = this.findViewById(android.R.id.content) as ViewGroup\r\n    addContentToView(viewGroup, content)\r\n}",
  "start_lineno" : "39",
  "methodName" : "showAsBottomSheet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BottomSheetUtils.kt",
  "task_id" : "habitica-android/1020",
  "prompt" : "import androidx.compose.runtime.Composable\nimport android.app.Activity\nfun Activity.showAsBottomSheet(content: @Composable (() -> Unit) -> Unit) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "48",
  "ground_truth" : "    val viewGroup = requireActivity().findViewById(android.R.id.content) as ViewGroup\r\n    addContentToView(viewGroup, content)\r\n}",
  "context" : "fun Fragment.showAsBottomSheet(content: @Composable (() -> Unit) -> Unit) {\r\n    val viewGroup = requireActivity().findViewById(android.R.id.content) as ViewGroup\r\n    addContentToView(viewGroup, content)\r\n}",
  "start_lineno" : "45",
  "methodName" : "showAsBottomSheet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BottomSheetUtils.kt",
  "task_id" : "habitica-android/1021",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.compose.runtime.Composable\nfun Fragment.showAsBottomSheet(content: @Composable (() -> Unit) -> Unit) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n    )\r\n}",
  "context" : "private fun addContentToView(\r\n    viewGroup: ViewGroup,\r\n    content: @Composable (() -> Unit) -> Unit\r\n) {\r\n    viewGroup.addView(\r\n        ComposeView(viewGroup.context).apply {\r\n            setContent {\r\n                HabiticaTheme {\r\n                    BottomSheetWrapper(viewGroup, this, content)\r\n                }\r\n            }\r\n        }\r\n    )\r\n}",
  "start_lineno" : "51",
  "methodName" : "addContentToView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BottomSheetUtils.kt",
  "task_id" : "habitica-android/1022",
  "prompt" : "import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.Composable\nimport android.view.ViewGroup\nprivate fun addContentToView(\r\n    viewGroup: ViewGroup,\r\n    content: @Composable (() -> Unit) -> Unit\r\n) {\r\n    viewGroup.addView(\r\n        ComposeView(viewGroup.context).apply {\r\n            setContent {\r\n                HabiticaTheme {\r\n                    BottomSheetWrapper(viewGroup, this, content)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "13",
  "ground_truth" : "        Image(HabiticaIconsHelper.imageOfBuffIcon().asImageBitmap(), null, modifier = modifier)\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun BuffIcon(buffed: Boolean?, modifier: Modifier = Modifier) {\r\n    if (buffed == true) {\r\n        Image(HabiticaIconsHelper.imageOfBuffIcon().asImageBitmap(), null, modifier = modifier)\r\n    }\r\n}",
  "start_lineno" : "7",
  "methodName" : "BuffIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BuffIcon.kt",
  "task_id" : "habitica-android/1023",
  "prompt" : "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun BuffIcon(buffed: Boolean?, modifier: Modifier = Modifier) {\r\n    if (buffed == true) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "56",
  "ground_truth" : "        setCaretImage()\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r\n            .forEach { it.visibility = View.VISIBLE }\r\n    }",
  "context" : "private fun showViews() {\r\n        updatePreferences()\r\n        setCaretImage()\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r\n            .forEach { it.visibility = View.VISIBLE }\r\n    }",
  "start_lineno" : "50",
  "methodName" : "showViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1024",
  "prompt" : "import android.view.View\nprivate fun showViews() {\r\n        updatePreferences()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "67",
  "ground_truth" : "            .filter { it != binding.sectionTitleView }\r\n            .forEach {\r\n                it.visibility = View.GONE\r\n            }\r\n    }",
  "context" : "private fun hideViews() {\r\n        updatePreferences()\r\n        setCaretImage()\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r\n            .filter { it != binding.sectionTitleView }\r\n            .forEach {\r\n                it.visibility = View.GONE\r\n            }\r\n    }",
  "start_lineno" : "58",
  "methodName" : "hideViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1025",
  "prompt" : "import android.view.View\nprivate fun hideViews() {\r\n        updatePreferences()\r\n        setCaretImage()\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        }\r\n        preferences?.edit { putBoolean(identifier, isCollapsed) }\r\n    }",
  "context" : "private fun updatePreferences() {\r\n        if (identifier == null) {\r\n            return\r\n        }\r\n        preferences?.edit { putBoolean(identifier, isCollapsed) }\r\n    }",
  "start_lineno" : "69",
  "methodName" : "updatePreferences",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1026",
  "prompt" : "private fun updatePreferences() {\r\n        if (identifier == null) {\r\n            return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "89",
  "ground_truth" : "                val lp = it.layoutParams as? LayoutParams\r\n                lp?.setMargins(padding, 0, padding, bottomPadding)\r\n                it.layoutParams = lp\r\n            }\r\n    }",
  "context" : "private fun setChildMargins() {\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r\n            .filter { it != binding.sectionTitleView }\r\n            .forEach {\r\n                val lp = it.layoutParams as? LayoutParams\r\n                lp?.setMargins(padding, 0, padding, bottomPadding)\r\n                it.layoutParams = lp\r\n            }\r\n    }",
  "start_lineno" : "80",
  "methodName" : "setChildMargins",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1027",
  "prompt" : "import android.view.View\nprivate fun setChildMargins() {\r\n        (0 until childCount)\r\n            .map { getChildAt(it) }\r\n            .filter { it != binding.sectionTitleView }\r\n            .forEach {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "        setChildMargins()\r\n        super.onLayout(changed, l, t, r, b)\r\n    }",
  "context" : "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r\n        setChildMargins()\r\n        super.onLayout(changed, l, t, r, b)\r\n    }",
  "start_lineno" : "91",
  "methodName" : "onLayout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1028",
  "prompt" : "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val infoIconView ImageView\nval binding\nvar preferences SharedPreferences?\nval padding\nval bottomPadding\nvar title CharSequence\nvar isCollapsed\nvar caretColor Int\nvar identifier String?",
  "app_type" : "life",
  "end_lineno" : "150",
  "ground_truth" : "        preferences = context.getSharedPreferences(\"collapsible_sections\", 0)\r\n        if (identifier != null && preferences?.getBoolean(identifier, false) == true) {\r\n            isCollapsed = true\r\n        }\r\n    }",
  "context" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n        setCaretImage()\r\n        setChildMargins()\r\n        preferences = context.getSharedPreferences(\"collapsible_sections\", 0)\r\n        if (identifier != null && preferences?.getBoolean(identifier, false) == true) {\r\n            isCollapsed = true\r\n        }\r\n    }",
  "start_lineno" : "142",
  "methodName" : "onAttachedToWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt",
  "task_id" : "habitica-android/1029",
  "prompt" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n        setCaretImage()\r\n        setChildMargins()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var hideWhenEmpty Boolean\nvar lightBackground Boolean\nvar currency String?\nvar currencyContentDescription String?\nvar drawable BitmapDrawable?\nvar icon Bitmap?\nvar minForAbbrevation\nvar decimals\nvar animationDuration\nvar animationDelay\nvar value\nvar isLocked",
  "app_type" : "life",
  "end_lineno" : "69",
  "ground_truth" : "            \"gems\" -> this.currencyContentDescription = context.getString(R.string.gems)\r\n            \"hourglasses\" -> this.currencyContentDescription = context.getString(R.string.mystic_hourglasses)\r\n            else -> this.currencyContentDescription = \"\"\r\n        }\r\n    }",
  "context" : "private fun setCurrencyContentDescriptionFromCurrency(currency: String?) {\r\n        when (currency) {\r\n            \"gold\" -> this.currencyContentDescription = context.getString(R.string.gold_plural)\r\n            \"gems\" -> this.currencyContentDescription = context.getString(R.string.gems)\r\n            \"hourglasses\" -> this.currencyContentDescription = context.getString(R.string.mystic_hourglasses)\r\n            else -> this.currencyContentDescription = \"\"\r\n        }\r\n    }",
  "start_lineno" : "62",
  "methodName" : "setCurrencyContentDescriptionFromCurrency",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyView.kt",
  "task_id" : "habitica-android/1030",
  "prompt" : "import com.habitrpg.common.habitica.R\nprivate fun setCurrencyContentDescriptionFromCurrency(currency: String?) {\r\n        when (currency) {\r\n            \"gold\" -> this.currencyContentDescription = context.getString(R.string.gold_plural)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hideWhenEmpty Boolean\nvar lightBackground Boolean\nvar currency String?\nvar currencyContentDescription String?\nvar drawable BitmapDrawable?\nvar icon Bitmap?\nvar minForAbbrevation\nvar decimals\nvar animationDuration\nvar animationDelay\nvar value\nvar isLocked",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        updateVisibility()\r\n        updateLayoutParams {\r\n            width = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        }\r\n    }",
  "context" : "private fun endUpdate() {\r\n        contentDescription = \"$text $currencyContentDescription\"\r\n        updateVisibility()\r\n        updateLayoutParams {\r\n            width = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        }\r\n    }",
  "start_lineno" : "129",
  "methodName" : "endUpdate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyView.kt",
  "task_id" : "habitica-android/1031",
  "prompt" : "private fun endUpdate() {\r\n        contentDescription = \"$text $currencyContentDescription\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hideWhenEmpty Boolean\nvar lightBackground Boolean\nvar currency String?\nvar currencyContentDescription String?\nvar drawable BitmapDrawable?\nvar icon Bitmap?\nvar minForAbbrevation\nvar decimals\nvar animationDuration\nvar animationDelay\nvar value\nvar isLocked",
  "app_type" : "life",
  "end_lineno" : "178",
  "ground_truth" : "            if (\"0\" == text) View.GONE else View.VISIBLE\r\n        } else {\r\n            View.VISIBLE\r\n        }\r\n    }",
  "context" : "private fun updateVisibility() {\r\n        visibility = if (hideWhenEmpty) {\r\n            if (\"0\" == text) View.GONE else View.VISIBLE\r\n        } else {\r\n            View.VISIBLE\r\n        }\r\n    }",
  "start_lineno" : "172",
  "methodName" : "updateVisibility",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyView.kt",
  "task_id" : "habitica-android/1032",
  "prompt" : "private fun updateVisibility() {\r\n        visibility = if (hideWhenEmpty) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lightBackground Boolean\nval hourglassTextView CurrencyView\nval goldTextView CurrencyView\nval gemTextView CurrencyView\nvar gold Double\nvar gems Double\nvar hourglasses Double\nvar hourglassVisibility\nvar goldVisibility Int\nvar gemVisibility",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "        setupView(goldTextView, margin)\r\n        setupView(gemTextView, margin)\r\n    }",
  "context" : "private fun setupViews() {\r\n        val margin = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 12f, context.resources.displayMetrics).toInt()\r\n        setupView(hourglassTextView, margin)\r\n        setupView(goldTextView, margin)\r\n        setupView(gemTextView, margin)\r\n    }",
  "start_lineno" : "61",
  "methodName" : "setupViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyViews.kt",
  "task_id" : "habitica-android/1033",
  "prompt" : "import android.util.TypedValue\nprivate fun setupViews() {\r\n        val margin = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 12f, context.resources.displayMetrics).toInt()\r\n        setupView(hourglassTextView, margin)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var lightBackground Boolean\nval hourglassTextView CurrencyView\nval goldTextView CurrencyView\nval gemTextView CurrencyView\nvar gold Double\nvar gems Double\nvar hourglasses Double\nvar hourglassVisibility\nvar goldVisibility Int\nvar gemVisibility",
  "app_type" : "life",
  "end_lineno" : "74",
  "ground_truth" : "        view.textSize = 12f\r\n        val params = view.layoutParams as? LayoutParams\r\n        params?.marginStart = margin\r\n        view.layoutParams = params\r\n    }",
  "context" : "private fun setupView(view: CurrencyView, margin: Int) {\r\n        this.addView(view)\r\n        view.textSize = 12f\r\n        val params = view.layoutParams as? LayoutParams\r\n        params?.marginStart = margin\r\n        view.layoutParams = params\r\n    }",
  "start_lineno" : "68",
  "methodName" : "setupView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyViews.kt",
  "task_id" : "habitica-android/1034",
  "prompt" : "private fun setupView(view: CurrencyView, margin: Int) {\r\n        this.addView(view)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var eggView PixelArtView?\nvar hatchingPotionView PixelArtView?",
  "app_type" : "life",
  "end_lineno" : "31",
  "ground_truth" : "        eggView?.loadImage(\"Pet_Egg_$egg\")\r\n        hatchingPotionView?.loadImage(\"Pet_HatchingPotion_$hatchingPotion\")\r\n    }",
  "context" : "fun configure(egg: String, hatchingPotion: String) {\r\n        eggView?.loadImage(\"Pet_Egg_$egg\")\r\n        hatchingPotionView?.loadImage(\"Pet_HatchingPotion_$hatchingPotion\")\r\n    }",
  "start_lineno" : "28",
  "methodName" : "configure",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\FirstDropDialog.kt",
  "task_id" : "habitica-android/1035",
  "prompt" : "fun configure(egg: String, hatchingPotion: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "99",
  "ground_truth" : "        } else {\r\n            binding.titleTextView.visibility = View.GONE\r\n        }\r\n        binding.titleTextView.text = title\r\n    }",
  "context" : "override fun setTitle(title: CharSequence?) {\r\n        if ((title?.length ?: 0) > 0) {\r\n            binding.titleTextView.visibility = View.VISIBLE\r\n        } else {\r\n            binding.titleTextView.visibility = View.GONE\r\n        }\r\n        binding.titleTextView.text = title\r\n    }",
  "start_lineno" : "92",
  "methodName" : "setTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1036",
  "prompt" : "import android.view.View\noverride fun setTitle(title: CharSequence?) {\r\n        if ((title?.length ?: 0) > 0) {\r\n            binding.titleTextView.visibility = View.VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "113",
  "ground_truth" : "            binding.messageTextView.visibility = View.GONE\r\n        }\r\n        binding.messageTextView.text = message\r\n        binding.messageTextView.movementMethod = ScrollingMovementMethod()\r\n    }",
  "context" : "override fun setMessage(message: CharSequence?) {\r\n        if ((message?.length ?: 0) > 0) {\r\n            binding.messageTextView.visibility = View.VISIBLE\r\n        } else {\r\n            binding.messageTextView.visibility = View.GONE\r\n        }\r\n        binding.messageTextView.text = message\r\n        binding.messageTextView.movementMethod = ScrollingMovementMethod()\r\n    }",
  "start_lineno" : "105",
  "methodName" : "setMessage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1037",
  "prompt" : "import android.view.View\noverride fun setMessage(message: CharSequence?) {\r\n        if ((message?.length ?: 0) > 0) {\r\n            binding.messageTextView.visibility = View.VISIBLE\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "126",
  "ground_truth" : "        } else {\r\n            binding.noticeTextView.visibility = View.GONE\r\n        }\r\n        binding.noticeTextView.text = notice\r\n    }",
  "context" : "fun setNotice(notice: CharSequence?) {\r\n        if ((notice?.length ?: 0) > 0) {\r\n            binding.noticeTextView.visibility = View.VISIBLE\r\n        } else {\r\n            binding.noticeTextView.visibility = View.GONE\r\n        }\r\n        binding.noticeTextView.text = notice\r\n    }",
  "start_lineno" : "119",
  "methodName" : "setNotice",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1038",
  "prompt" : "import android.view.View\nfun setNotice(notice: CharSequence?) {\r\n        if ((notice?.length ?: 0) > 0) {\r\n            binding.noticeTextView.visibility = View.VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        binding.dialogContainer.addView(customHeader, 0)\r\n        binding.dialogContainer.setPadding(0, 0, 0, binding.dialogContainer.paddingBottom)\r\n    }",
  "context" : "fun setCustomHeaderView(customHeader: View) {\r\n        binding.dialogContainer.addView(customHeader, 0)\r\n        binding.dialogContainer.setPadding(0, 0, 0, binding.dialogContainer.paddingBottom)\r\n    }",
  "start_lineno" : "132",
  "methodName" : "setCustomHeaderView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1039",
  "prompt" : "import android.view.View\nfun setCustomHeaderView(customHeader: View) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "140",
  "ground_truth" : "        val inflater = context.layoutInflater\r\n        setAdditionalContentView(inflater.inflate(layoutResID, binding.root, false))\r\n    }",
  "context" : "fun setAdditionalContentView(layoutResID: Int) {\r\n        val inflater = context.layoutInflater\r\n        setAdditionalContentView(inflater.inflate(layoutResID, binding.root, false))\r\n    }",
  "start_lineno" : "137",
  "methodName" : "setAdditionalContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1040",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nfun setAdditionalContentView(layoutResID: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "151",
  "ground_truth" : "        layoutParams?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n        layoutParams?.height = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        view?.layoutParams = layoutParams\r\n        binding.contentView.forceLayout()\r\n    }",
  "context" : "fun setAdditionalContentView(view: View?) {\r\n        binding.root.removeView(additionalContentView)\r\n        additionalContentView = view\r\n        binding.contentView.addView(view)\r\n        val layoutParams = view?.layoutParams\r\n        layoutParams?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n        layoutParams?.height = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        view?.layoutParams = layoutParams\r\n        binding.contentView.forceLayout()\r\n    }",
  "start_lineno" : "142",
  "methodName" : "setAdditionalContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1041",
  "prompt" : "import android.view.View\nfun setAdditionalContentView(view: View?) {\r\n        binding.root.removeView(additionalContentView)\r\n        additionalContentView = view\r\n        binding.contentView.addView(view)\r\n        val layoutParams = view?.layoutParams\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "156",
  "ground_truth" : "        binding.contentView.setPadding(padding, 0, padding, binding.contentView.paddingBottom)\r\n        binding.messageTextView.setPadding(padding, binding.messageTextView.paddingTop, padding, binding.messageTextView.paddingBottom)\r\n    }",
  "context" : "fun setAdditionalContentSidePadding(padding: Int) {\r\n        binding.contentView.setPadding(padding, 0, padding, binding.contentView.paddingBottom)\r\n        binding.messageTextView.setPadding(padding, binding.messageTextView.paddingTop, padding, binding.messageTextView.paddingBottom)\r\n    }",
  "start_lineno" : "153",
  "methodName" : "setAdditionalContentSidePadding",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1042",
  "prompt" : "fun setAdditionalContentSidePadding(padding: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "254",
  "ground_truth" : "        buttonView.layoutParams = layoutParams\r\n        buttonView.elevation = 10f\r\n\r\n        window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\r\n    }",
  "context" : "private fun configureButtonLayoutParams(buttonView: View) {\r\n        val layoutParams = if (isScrollingLayout) {\r\n            val params = LinearLayout.LayoutParams(0, 48.dpToPx(context))\r\n            params.weight = 1f\r\n            params\r\n        } else {\r\n            LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, 48.dpToPx(context))\r\n        }\r\n        buttonView.layoutParams = layoutParams\r\n        buttonView.elevation = 10f\r\n\r\n        window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\r\n    }",
  "start_lineno" : "242",
  "methodName" : "configureButtonLayoutParams",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1043",
  "prompt" : "import com.habitrpg.common.habitica.extensions.dpToPx\nimport com.habitrpg.android.habitica.R\nimport android.widget.LinearLayout\nimport android.widget.Button\nimport android.view.ViewGroup\nimport android.view.View\nprivate fun configureButtonLayoutParams(buttonView: View) {\r\n        val layoutParams = if (isScrollingLayout) {\r\n            val params = LinearLayout.LayoutParams(0, 48.dpToPx(context))\r\n            params.weight = 1f\r\n            params\r\n        } else {\r\n            LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, 48.dpToPx(context))\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "263",
  "ground_truth" : "        showNextInQueue(this)\r\n        super.dismiss()\r\n    }",
  "context" : "override fun dismiss() {\r\n        showNextInQueue(this)\r\n        super.dismiss()\r\n    }",
  "start_lineno" : "260",
  "methodName" : "dismiss",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1044",
  "prompt" : "override fun dismiss() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "271",
  "ground_truth" : "        while (thisContext as? ContextThemeWrapper != null && thisContext as? Activity == null) {\r\n            thisContext = thisContext.baseContext\r\n        }\r\n        return thisContext as? Activity\r\n    }",
  "context" : "open fun getActivity(): Activity? {\r\n        var thisContext = context\r\n        while (thisContext as? ContextThemeWrapper != null && thisContext as? Activity == null) {\r\n            thisContext = thisContext.baseContext\r\n        }\r\n        return thisContext as? Activity\r\n    }",
  "start_lineno" : "265",
  "methodName" : "getActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1045",
  "prompt" : "import android.content.Context\nimport android.app.Activity\nopen fun getActivity(): Activity? {\r\n        var thisContext = context\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "335",
  "ground_truth" : "            }\r\n            dialogQueue.add(dialog)\r\n        }",
  "context" : "private fun addToQueue(dialog: HabiticaAlertDialog) {\r\n            if (checkIfQueueAvailable()) {\r\n                dialog.show()\r\n            }\r\n            dialogQueue.add(dialog)\r\n        }",
  "start_lineno" : "330",
  "methodName" : "addToQueue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1046",
  "prompt" : "import androidx.appcompat.app.AlertDialog\nprivate fun addToQueue(dialog: HabiticaAlertDialog) {\r\n            if (checkIfQueueAvailable()) {\r\n                dialog.show()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var buttonAxis Int\nvar isCelebratory Boolean\nval binding\nval scrollView\nval contentView\nvar additionalContentView View?\nvar isScrollingLayout Boolean\nvar forceScrollableLayout\nvar dialogWidth\nval longLivingScope CoroutineScope\nvar dialogQueue",
  "app_type" : "life",
  "end_lineno" : "346",
  "ground_truth" : "                // The Dialog was probably dismissed in a weird way. Clear it out so that the queue doesn't get stuck\r\n                dialogQueue.removeAt(0)\r\n                true\r\n            }\r\n        }",
  "context" : "private fun checkIfQueueAvailable(): Boolean {\r\n            val currentDialog = dialogQueue.firstOrNull() ?: return true\r\n            return if (currentDialog.isShowing && currentDialog.getActivity()?.isFinishing != true) {\r\n                false\r\n            } else {\r\n                // The Dialog was probably dismissed in a weird way. Clear it out so that the queue doesn't get stuck\r\n                dialogQueue.removeAt(0)\r\n                true\r\n            }\r\n        }",
  "start_lineno" : "337",
  "methodName" : "checkIfQueueAvailable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt",
  "task_id" : "habitica-android/1047",
  "prompt" : "import android.app.Activity\nprivate fun checkIfQueueAvailable(): Boolean {\r\n            val currentDialog = dialogQueue.firstOrNull() ?: return true\r\n            return if (currentDialog.isShowing && currentDialog.getActivity()?.isFinishing != true) {\r\n                false\r\n            } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val wrapperBinding\nvar grabberVisibility Int",
  "app_type" : "life",
  "end_lineno" : "25",
  "ground_truth" : "        wrapperBinding.container.addView(view)\r\n        super.setContentView(wrapperBinding.root)\r\n    }",
  "context" : "override fun setContentView(view: View) {\r\n        wrapperBinding.container.addView(view)\r\n        super.setContentView(wrapperBinding.root)\r\n    }",
  "start_lineno" : "22",
  "methodName" : "setContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaBottomSheetDialog.kt",
  "task_id" : "habitica-android/1048",
  "prompt" : "import android.view.View\noverride fun setContentView(view: View) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val wrapperBinding\nvar grabberVisibility Int",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "        layoutInflater.inflate(layoutResID, wrapperBinding.container)\r\n        super.setContentView(wrapperBinding.root)\r\n    }",
  "context" : "override fun setContentView(layoutResID: Int) {\r\n        layoutInflater.inflate(layoutResID, wrapperBinding.container)\r\n        super.setContentView(wrapperBinding.root)\r\n    }",
  "start_lineno" : "27",
  "methodName" : "setContentView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaBottomSheetDialog.kt",
  "task_id" : "habitica-android/1049",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun setContentView(layoutResID: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val userViewModel MainUserViewModel\nval hatchPetUseCase HatchPetUseCase\nvar binding DialogPetSuggestHatchBinding\nvar hasAllItems",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "            Analytics.sendNavigationEvent(\"pet suggestion modal\")\r\n        }\r\n    }",
  "context" : "override fun show() {\r\n        super.show()\r\n        if (!hasAllItems) {\r\n            Analytics.sendNavigationEvent(\"pet suggestion modal\")\r\n        }\r\n    }",
  "start_lineno" : "61",
  "methodName" : "show",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt",
  "task_id" : "habitica-android/1050",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Item\noverride fun show() {\r\n        super.show()\r\n        if (!hasAllItems) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val userViewModel MainUserViewModel\nval hatchPetUseCase HatchPetUseCase\nvar binding DialogPetSuggestHatchBinding\nvar hasAllItems",
  "app_type" : "life",
  "end_lineno" : "222",
  "ground_truth" : "                    context\r\n                )\r\n            )\r\n        }\r\n    }",
  "context" : "private fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        longLivingScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r\n                    context\r\n                )\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "212",
  "methodName" : "hatchPet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt",
  "task_id" : "habitica-android/1051",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        longLivingScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val userViewModel MainUserViewModel\nval hatchPetUseCase HatchPetUseCase\nvar binding DialogPetSuggestHatchBinding\nvar hasAllItems",
  "app_type" : "life",
  "end_lineno" : "229",
  "ground_truth" : "        }\r\n        return 0\r\n    }",
  "context" : "private fun getItemPrice(pet: Animal, item: Item?, hasUnlocked: Boolean): Int {\r\n        if (pet.type == \"drop\" || (pet.type == \"quest\" && hasUnlocked)) {\r\n            return item?.value ?: 0\r\n        }\r\n        return 0\r\n    }",
  "start_lineno" : "224",
  "methodName" : "getItemPrice",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt",
  "task_id" : "habitica-android/1052",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Animal\nprivate fun getItemPrice(pet: Animal, item: Item?, hasUnlocked: Boolean): Int {\r\n        if (pet.type == \"drop\" || (pet.type == \"quest\" && hasUnlocked)) {\r\n            return item?.value ?: 0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar quest QuestContent?\nvar isShowingDialog",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "            userRepository.syncUserStats()\r\n        }\r\n        isShowingDialog = false\r\n        super.dismiss()\r\n    }",
  "context" : "override fun dismiss() {\r\n        MainScope().launch {\r\n            userRepository.syncUserStats()\r\n        }\r\n        isShowingDialog = false\r\n        super.dismiss()\r\n    }",
  "start_lineno" : "24",
  "methodName" : "dismiss",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\QuestCompletedDialog.kt",
  "task_id" : "habitica-android/1053",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\noverride fun dismiss() {\r\n        MainScope().launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar quest QuestContent?\nvar isShowingDialog",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "            dialog.setTitle(R.string.quest_completed)\r\n            dialog.addButton(R.string.onwards, isPrimary = true, isDestructive = false)\r\n            dialog.enqueue()\r\n            isShowingDialog = true\r\n        }",
  "context" : "fun showWithQuest(context: Context, quest: QuestContent, userRepository: UserRepository) {\r\n            if (isShowingDialog) return\r\n\r\n            val dialog = QuestCompletedDialog(context)\r\n            dialog.userRepository = userRepository\r\n            dialog.quest = quest\r\n            dialog.setTitle(R.string.quest_completed)\r\n            dialog.addButton(R.string.onwards, isPrimary = true, isDestructive = false)\r\n            dialog.enqueue()\r\n            isShowingDialog = true\r\n        }",
  "start_lineno" : "35",
  "methodName" : "showWithQuest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\QuestCompletedDialog.kt",
  "task_id" : "habitica-android/1054",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.QuestContent\nimport com.habitrpg.android.habitica.data.UserRepository\nimport com.habitrpg.android.habitica.R\nimport android.content.Context\nfun showWithQuest(context: Context, quest: QuestContent, userRepository: UserRepository) {\r\n            if (isShowingDialog) return\r\n\r\n            val dialog = QuestCompletedDialog(context)\r\n            dialog.userRepository = userRepository\r\n            dialog.quest = quest\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding DialogCompletedQuestContentBinding",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "\r\n        binding = DialogCompletedQuestContentBinding.inflate(context.layoutInflater, this)\r\n    }",
  "context" : "private fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n\r\n        binding = DialogCompletedQuestContentBinding.inflate(context.layoutInflater, this)\r\n    }",
  "start_lineno" : "34",
  "methodName" : "setupView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\QuestCompletedDialogContent.kt",
  "task_id" : "habitica-android/1055",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.view.Gravity\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "            this.targetTopOffset = 0\r\n            this.settleAnimation = null\r\n\r\n            this.detecting = true\r\n        }",
  "context" : "fun startDetectingOnPossibleDrag(view: View, position: Int) {\r\n            this.view = view\r\n            this.startVisibility = view.visibility\r\n            this.viewDrawable = getDragDrawable(view)\r\n            this.position = position\r\n            this.startTop = view.top\r\n            this.height = view.height\r\n            this.totalDragOffset = 0\r\n            this.targetTopOffset = 0\r\n            this.settleAnimation = null\r\n\r\n            this.detecting = true\r\n        }",
  "start_lineno" : "123",
  "methodName" : "startDetectingOnPossibleDrag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1056",
  "prompt" : "import android.view.View\nimport android.graphics.drawable.Drawable\nfun startDetectingOnPossibleDrag(view: View, position: Int) {\r\n            this.view = view\r\n            this.startVisibility = view.visibility\r\n            this.viewDrawable = getDragDrawable(view)\r\n            this.position = position\r\n            this.startTop = view.top\r\n            this.height = view.height\r\n            this.totalDragOffset = 0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "140",
  "ground_truth" : "            view?.visibility = View.INVISIBLE\r\n            this.dragging = true\r\n        }",
  "context" : "fun onDragStart() {\r\n            view?.visibility = View.INVISIBLE\r\n            this.dragging = true\r\n        }",
  "start_lineno" : "137",
  "methodName" : "onDragStart",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1057",
  "prompt" : "fun onDragStart() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "145",
  "ground_truth" : "            totalDragOffset = offset\r\n            updateTargetTop()\r\n        }",
  "context" : "fun setTotalOffset(offset: Int) {\r\n            totalDragOffset = offset\r\n            updateTargetTop()\r\n        }",
  "start_lineno" : "142",
  "methodName" : "setTotalOffset",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1058",
  "prompt" : "fun setTotalOffset(offset: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "172",
  "ground_truth" : "            totalDragOffset = 0\r\n            targetTopOffset = 0\r\n            if (null != settleAnimation) settleAnimation?.end()\r\n            settleAnimation = null\r\n        }",
  "context" : "fun stopDetecting() {\r\n            this.detecting = false\r\n            if (null != view) view?.visibility = startVisibility\r\n            view = null\r\n            startVisibility = -1\r\n            viewDrawable = null\r\n            position = -1\r\n            startTop = -1\r\n            height = -1\r\n            totalDragOffset = 0\r\n            targetTopOffset = 0\r\n            if (null != settleAnimation) settleAnimation?.end()\r\n            settleAnimation = null\r\n        }",
  "start_lineno" : "159",
  "methodName" : "stopDetecting",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1059",
  "prompt" : "import android.graphics.drawable.Drawable\nfun stopDetecting() {\r\n            this.detecting = false\r\n            if (null != view) view?.visibility = startVisibility\r\n            view = null\r\n            startVisibility = -1\r\n            viewDrawable = null\r\n            position = -1\r\n            startTop = -1\r\n            height = -1\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "201",
  "ground_truth" : "        if (HORIZONTAL == orientation) {\r\n            throw IllegalArgumentException(\"DragLinearLayout must be VERTICAL.\")\r\n        }\r\n        super.setOrientation(orientation)\r\n    }",
  "context" : "override fun setOrientation(orientation: Int) {\r\n        // enforce VERTICAL orientation; remove if HORIZONTAL support is ever added\r\n        if (HORIZONTAL == orientation) {\r\n            throw IllegalArgumentException(\"DragLinearLayout must be VERTICAL.\")\r\n        }\r\n        super.setOrientation(orientation)\r\n    }",
  "start_lineno" : "195",
  "methodName" : "setOrientation",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1060",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun setOrientation(orientation: Int) {\r\n        // enforce VERTICAL orientation; remove if HORIZONTAL support is ever added\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "            draggableChildren.put(indexOfChild(child), DraggableChild())\r\n        } else {\r\n            Log.e(LOG_TAG, \"$child is not a child, cannot make draggable.\")\r\n        }\r\n    }",
  "context" : "fun setViewDraggable(child: View, dragHandle: View) {\r\n        if (this === child.parent) {\r\n            dragHandle.setOnTouchListener(DragHandleOnTouchListener(child))\r\n            draggableChildren.put(indexOfChild(child), DraggableChild())\r\n        } else {\r\n            Log.e(LOG_TAG, \"$child is not a child, cannot make draggable.\")\r\n        }\r\n    }",
  "start_lineno" : "206",
  "methodName" : "setViewDraggable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1061",
  "prompt" : "import android.view.View\nfun setViewDraggable(child: View, dragHandle: View) {\r\n        if (this === child.parent) {\r\n            dragHandle.setOnTouchListener(DragHandleOnTouchListener(child))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "223",
  "ground_truth" : "            draggableChildren.put(indexOfChild(child), DraggableChild())\r\n        }\r\n    }",
  "context" : "fun removeViewDraggable(child: View) {\r\n        if (this === child.parent) {\r\n            draggableChildren.remove(indexOfChild(child))\r\n            draggableChildren.put(indexOfChild(child), DraggableChild())\r\n        }\r\n    }",
  "start_lineno" : "218",
  "methodName" : "removeViewDraggable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1062",
  "prompt" : "import android.view.View\nfun removeViewDraggable(child: View) {\r\n        if (this === child.parent) {\r\n            draggableChildren.remove(indexOfChild(child))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "228",
  "ground_truth" : "        super.removeAllViews()\r\n        draggableChildren.clear()\r\n    }",
  "context" : "override fun removeAllViews() {\r\n        super.removeAllViews()\r\n        draggableChildren.clear()\r\n    }",
  "start_lineno" : "225",
  "methodName" : "removeAllViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1063",
  "prompt" : "import android.view.View\noverride fun removeAllViews() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "260",
  "ground_truth" : "        draggableChildren.get(position).endExistingAnimation()\r\n\r\n        draggedItem.startDetectingOnPossibleDrag(child, position)\r\n        containerScrollView?.requestDisallowInterceptTouchEvent(true)\r\n    }",
  "context" : "private fun startDetectingDrag(child: View) {\r\n        if (draggedItem.detecting) {\r\n            return // existing drag in process, only one at a time is allowed\r\n        }\r\n\r\n        val position = indexOfChild(child)\r\n\r\n        // complete any existing animations, both for the newly selected child and the previous dragged one\r\n        draggableChildren.get(position).endExistingAnimation()\r\n\r\n        draggedItem.startDetectingOnPossibleDrag(child, position)\r\n        containerScrollView?.requestDisallowInterceptTouchEvent(true)\r\n    }",
  "start_lineno" : "248",
  "methodName" : "startDetectingDrag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1064",
  "prompt" : "import android.view.View\nprivate fun startDetectingDrag(child: View) {\r\n        if (draggedItem.detecting) {\r\n            return // existing drag in process, only one at a time is allowed\r\n        }\r\n\r\n        val position = indexOfChild(child)\r\n\r\n        // complete any existing animations, both for the newly selected child and the previous dragged one\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "272",
  "ground_truth" : "        }\r\n\r\n        draggedItem.onDragStart()\r\n        requestDisallowInterceptTouchEvent(true)\r\n    }",
  "context" : "private fun startDrag() {\r\n        // remove layout transition, it conflicts with drag animation\r\n        // we will restore it after drag animation end, see onDragStop()\r\n        layoutTransition = layoutTransition\r\n        if (layoutTransition != null) {\r\n            layoutTransition = null\r\n        }\r\n\r\n        draggedItem.onDragStart()\r\n        requestDisallowInterceptTouchEvent(true)\r\n    }",
  "start_lineno" : "262",
  "methodName" : "startDrag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1065",
  "prompt" : "private fun startDrag() {\r\n        // remove layout transition, it conflicts with drag animation\r\n        // we will restore it after drag animation end, see onDragStop()\r\n        layoutTransition = layoutTransition\r\n        if (layoutTransition != null) {\r\n            layoutTransition = null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "417",
  "ground_truth" : "        val startIndex = draggableChildren.indexOfKey(position)\r\n        return if (startIndex < 1 || startIndex > draggableChildren.size()) -1 else draggableChildren.keyAt(startIndex - 1)\r\n    }",
  "context" : "private fun previousDraggablePosition(position: Int): Int {\r\n        val startIndex = draggableChildren.indexOfKey(position)\r\n        return if (startIndex < 1 || startIndex > draggableChildren.size()) -1 else draggableChildren.keyAt(startIndex - 1)\r\n    }",
  "start_lineno" : "414",
  "methodName" : "previousDraggablePosition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1066",
  "prompt" : "private fun previousDraggablePosition(position: Int): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "422",
  "ground_truth" : "        val startIndex = draggableChildren.indexOfKey(position)\r\n        return if (startIndex < -1 || startIndex > draggableChildren.size() - 2) -1 else draggableChildren.keyAt(startIndex + 1)\r\n    }",
  "context" : "private fun nextDraggablePosition(position: Int): Int {\r\n        val startIndex = draggableChildren.indexOfKey(position)\r\n        return if (startIndex < -1 || startIndex > draggableChildren.size() - 2) -1 else draggableChildren.keyAt(startIndex + 1)\r\n    }",
  "start_lineno" : "419",
  "methodName" : "nextDraggablePosition",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1067",
  "prompt" : "private fun nextDraggablePosition(position: Int): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "601",
  "ground_truth" : "        downY = -1\r\n        activePointerId = INVALID_POINTER_ID\r\n    }",
  "context" : "private fun onTouchEnd() {\r\n        downY = -1\r\n        activePointerId = INVALID_POINTER_ID\r\n    }",
  "start_lineno" : "598",
  "methodName" : "onTouchEnd",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1068",
  "prompt" : "private fun onTouchEnd() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "611",
  "ground_truth" : "            if (MotionEvent.ACTION_DOWN == event.actionMasked) {\r\n                startDetectingDrag(view)\r\n            }\r\n            return false\r\n        }",
  "context" : "override fun onTouch(v: View, event: MotionEvent): Boolean {\r\n            view.performClick()\r\n            if (MotionEvent.ACTION_DOWN == event.actionMasked) {\r\n                startDetectingDrag(view)\r\n            }\r\n            return false\r\n        }",
  "start_lineno" : "605",
  "methodName" : "onTouch",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1069",
  "prompt" : "import android.view.View\nimport android.view.MotionEvent\noverride fun onTouch(v: View, event: MotionEvent): Boolean {\r\n            view.performClick()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "625",
  "ground_truth" : "\r\n        drawable.bounds = Rect(left, top, left + view.width, top + view.height)\r\n\r\n        return drawable\r\n    }",
  "context" : "private fun getDragDrawable(view: View): BitmapDrawable {\r\n        val top = view.top\r\n        val left = view.left\r\n\r\n        val bitmap = getBitmapFromView(view)\r\n\r\n        val drawable = BitmapDrawable(resources, bitmap)\r\n\r\n        drawable.bounds = Rect(left, top, left + view.width, top + view.height)\r\n\r\n        return drawable\r\n    }",
  "start_lineno" : "614",
  "methodName" : "getDragDrawable",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1070",
  "prompt" : "import android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.Bitmap\nprivate fun getDragDrawable(view: View): BitmapDrawable {\r\n        val top = view.top\r\n        val left = view.left\r\n\r\n        val bitmap = getBitmapFromView(view)\r\n\r\n        val drawable = BitmapDrawable(resources, bitmap)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "645",
  "ground_truth" : "            value = max(0f, min((value - edge1) / (edge2 - edge1), 1f))\r\n            return value * value * value * (value * (value * 6 - 15) + 10)\r\n        }",
  "context" : "private fun smootherStep(edge1: Float, edge2: Float, `val`: Float): Float {\r\n            var value = `val`\r\n            value = max(0f, min((value - edge1) / (edge2 - edge1), 1f))\r\n            return value * value * value * (value * (value * 6 - 15) + 10)\r\n        }",
  "start_lineno" : "641",
  "methodName" : "smootherStep",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1071",
  "prompt" : "private fun smootherStep(edge1: Float, edge2: Float, `val`: Float): Float {\r\n            var value = `val`\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val nominalDistanceScaled Float\nvar swapListener OnViewSwapListener?\nval draggableChildren SparseArray<DraggableChild>\nval draggedItem DragItem\nval slop Int\nvar downY\nvar activePointerId\nval dragTopShadowDrawable Drawable?\nval dragBottomShadowDrawable Drawable?\nval dragShadowHeight Int\nvar containerScrollView ScrollView?\nvar scrollSensitiveHeight Int\nvar dragUpdater Runnable?\nvar swapAnimation ValueAnimator?\nvar view View?\nvar startVisibility Int\nvar viewDrawable BitmapDrawable?\nvar position Int\nvar startTop Int\nvar height Int\nvar totalDragOffset Int\nvar targetTopOffset Int\nvar settleAnimation ValueAnimator?\nvar detecting Boolean\nvar dragging Boolean\nval LOG_TAG\nval NOMINAL_SWITCH_DURATION Long\nval MIN_SWITCH_DURATION\nval MAX_SWITCH_DURATION\nval NOMINAL_DISTANCE\nval INVALID_POINTER_ID\nval DEFAULT_SCROLL_SENSITIVE_AREA_HEIGHT_DP\nval MAX_DRAG_SCROLL_SPEED",
  "app_type" : "life",
  "end_lineno" : "655",
  "ground_truth" : "            view.draw(canvas)\r\n            return bitmap\r\n        }",
  "context" : "private fun getBitmapFromView(view: View): Bitmap {\r\n            val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)\r\n            val canvas = Canvas(bitmap)\r\n            view.draw(canvas)\r\n            return bitmap\r\n        }",
  "start_lineno" : "650",
  "methodName" : "getBitmapFromView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt",
  "task_id" : "habitica-android/1072",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun getBitmapFromView(view: View): Bitmap {\r\n            val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)\r\n            val canvas = Canvas(bitmap)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val ellipsesListeners\nvar ellipses Boolean",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        }\r\n        ellipsesListeners.add(listener)\r\n    }",
  "context" : "fun addEllipsesListener(listener: EllipsisListener?) {\r\n        if (listener == null) {\r\n            throw NullPointerException()\r\n        }\r\n        ellipsesListeners.add(listener)\r\n    }",
  "start_lineno" : "36",
  "methodName" : "addEllipsesListener",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\EllipsisTextView.kt",
  "task_id" : "habitica-android/1073",
  "prompt" : "fun addEllipsesListener(listener: EllipsisListener?) {\r\n        if (listener == null) {\r\n            throw NullPointerException()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val ellipsesListeners\nvar ellipses Boolean",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "\r\n        for (listener in ellipsesListeners) {\r\n            listener.ellipsisStateChanged(ellipses)\r\n        }\r\n    }",
  "context" : "override fun layout(l: Int, t: Int, r: Int, b: Int) {\r\n        super.layout(l, t, r, b)\r\n\r\n        ellipses = false\r\n        val layout = layout\r\n        if (layout != null) {\r\n            val lines = layout.lineCount\r\n            if (lines >= maxLines) {\r\n                ellipses = true\r\n            }\r\n        }\r\n\r\n        for (listener in ellipsesListeners) {\r\n            listener.ellipsisStateChanged(ellipses)\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "layout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\EllipsisTextView.kt",
  "task_id" : "habitica-android/1074",
  "prompt" : "override fun layout(l: Int, t: Int, r: Int, b: Int) {\r\n        super.layout(l, t, r, b)\r\n\r\n        ellipses = false\r\n        val layout = layout\r\n        if (layout != null) {\r\n            val lines = layout.lineCount\r\n            if (lines >= maxLines) {\r\n                ellipses = true\r\n            }\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var extraText String?\nvar extraTextColor Int?",
  "app_type" : "life",
  "end_lineno" : "28",
  "ground_truth" : "        textView?.text = extraText\r\n        extraTextColor?.let {\r\n            textView?.setTextColor(it)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: PreferenceViewHolder) {\r\n        super.onBindViewHolder(holder)\r\n        val textView = holder.itemView.findViewById<TextView>(R.id.extra_label)\r\n        textView?.text = extraText\r\n        extraTextColor?.let {\r\n            textView?.setTextColor(it)\r\n        }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onBindViewHolder",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\ExtraLabelPreference.kt",
  "task_id" : "habitica-android/1075",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.preference.PreferenceViewHolder\nimport androidx.preference.Preference\nimport android.widget.TextView\noverride fun onBindViewHolder(holder: PreferenceViewHolder) {\r\n        super.onBindViewHolder(holder)\r\n        val textView = holder.itemView.findViewById<TextView>(R.id.extra_label)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        measurePolicy = measurePolicy,\r\n        content = content,\r\n        modifier = modifier\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun FlowLayout(\r\n    modifier: Modifier = Modifier,\r\n    spacing: Int = 0,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val measurePolicy = flowLayoutMeasurePolicy(spacing)\r\n    Layout(\r\n        measurePolicy = measurePolicy,\r\n        content = content,\r\n        modifier = modifier\r\n    )\r\n}",
  "start_lineno" : "38",
  "methodName" : "FlowLayout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\FlowLayout.kt",
  "task_id" : "habitica-android/1076",
  "prompt" : "import androidx.compose.ui.layout.MeasurePolicy\nimport androidx.compose.ui.layout.Layout\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun FlowLayout(\r\n    modifier: Modifier = Modifier,\r\n    spacing: Int = 0,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val measurePolicy = flowLayoutMeasurePolicy(spacing)\r\n    Layout(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10794",
  "ground_truth" : "    RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);\r\n    return hsv;\r\n}",
  "context" : "private static float[] ColorToHSV(int originalColor) {\r\n    float[] hsv = new float[3];\r\n    RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);\r\n    return hsv;\r\n}",
  "start_lineno" : "10790",
  "methodName" : "ColorToHSV",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1077",
  "prompt" : "import android.graphics.Color\nprivate static float[] ColorToHSV(int originalColor) {\r\n    float[] hsv = new float[3];\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10830",
  "ground_truth" : "        this.blurMaskFilter = null;\r\n        this.radius = (float) 1.0;\r\n    }\r\n    return this;\r\n}",
  "context" : "PaintCodeShadow get(int color) {\r\n    this.color = color;\r\n    this.dx = (float) 0.0;\r\n    this.dy = (float) 1.0;\r\n    if (this.radius != (float) 1.0) {\r\n        this.blurMaskFilter = null;\r\n        this.radius = (float) 1.0;\r\n    }\r\n    return this;\r\n}",
  "start_lineno" : "10819",
  "methodName" : "get",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1078",
  "prompt" : "import android.graphics.Paint\nPaintCodeShadow get(int color) {\r\n    this.color = color;\r\n    this.dx = (float) 0.0;\r\n    this.dy = (float) 1.0;\r\n    if (this.radius != (float) 1.0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10840",
  "ground_truth" : "        return;\r\n    if (this.blurMaskFilter == null)\r\n        this.blurMaskFilter = new BlurMaskFilter(this.radius, BlurMaskFilter.Blur.NORMAL);\r\n    paint.setMaskFilter(this.blurMaskFilter);\r\n}",
  "context" : "void setBlurOfPaint(Paint paint) {\r\n    if (this.radius <= 0)\r\n        return;\r\n    if (this.blurMaskFilter == null)\r\n        this.blurMaskFilter = new BlurMaskFilter(this.radius, BlurMaskFilter.Blur.NORMAL);\r\n    paint.setMaskFilter(this.blurMaskFilter);\r\n}",
  "start_lineno" : "10832",
  "methodName" : "setBlurOfPaint",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1079",
  "prompt" : "import android.graphics.Paint\nvoid setBlurOfPaint(Paint paint) {\r\n    if (this.radius <= 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10856",
  "ground_truth" : "        this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());\r\n        this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);\r\n    }\r\n    return this;\r\n}",
  "context" : "PaintCodeBitmap get(Bitmap bitmap) {\r\n    if (this.bitmap != bitmap) {\r\n        this.bitmap = bitmap;\r\n        this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());\r\n        this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);\r\n    }\r\n    return this;\r\n}",
  "start_lineno" : "10849",
  "methodName" : "get",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1080",
  "prompt" : "import android.graphics.Paint\nimport android.graphics.Bitmap\nPaintCodeBitmap get(Bitmap bitmap) {\r\n    if (this.bitmap != bitmap) {\r\n        this.bitmap = bitmap;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10880",
  "ground_truth" : "        this.phase = (float) 0.0;\r\n        this.effect = new DashPathEffect(new float[] { dash, (float) 20.0 }, (float) 0.0);\r\n    }\r\n    return this.effect;\r\n}",
  "context" : "DashPathEffect get(float dash) {\r\n    if (this.dash != dash || this.gap != (float) 20.0 || this.phase != (float) 0.0) {\r\n        this.dash = dash;\r\n        this.gap = (float) 20.0;\r\n        this.phase = (float) 0.0;\r\n        this.effect = new DashPathEffect(new float[] { dash, (float) 20.0 }, (float) 0.0);\r\n    }\r\n    return this.effect;\r\n}",
  "start_lineno" : "10872",
  "methodName" : "get",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1081",
  "prompt" : "import android.graphics.Path\nimport android.graphics.DashPathEffect\nDashPathEffect get(float dash) {\r\n    if (this.dash != dash || this.gap != (float) 20.0 || this.phase != (float) 0.0) {\r\n        this.dash = dash;\r\n        this.gap = (float) 20.0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "static PaintCodeBitmap rageStrikeNPC = new PaintCodeBitmap();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF bezier33Rect = new RectF();\nprivate static final Path bezier33Path = new Path();\nprivate static final RectF bezier34Rect = new RectF();\nprivate static final Path bezier34Path = new Path();\nprivate static final RectF bezier35Rect = new RectF();\nprivate static final Path bezier35Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF bezier36Rect = new RectF();\nprivate static final Path bezier36Path = new Path();\nprivate static final RectF bezier37Rect = new RectF();\nprivate static final Path bezier37Path = new Path();\nprivate static final RectF bezier38Rect = new RectF();\nprivate static final Path bezier38Path = new Path();\nprivate static final RectF bezier39Rect = new RectF();\nprivate static final Path bezier39Path = new Path();\nprivate static final RectF group5 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier40Rect = new RectF();\nprivate static final Path bezier40Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 9f, 9f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 27f, 27f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final RectF rectangle18Rect = new RectF();\nprivate static final Path rectangle18Path = new Path();\nprivate static final RectF rectangle19Rect = new RectF();\nprivate static final Path rectangle19Path = new Path();\nprivate static final RectF rectangle20Rect = new RectF();\nprivate static final Path rectangle20Path = new Path();\nprivate static final RectF rectangle21Rect = new RectF();\nprivate static final Path rectangle21Path = new Path();\nprivate static final RectF rectangle22Rect = new RectF();\nprivate static final Path rectangle22Path = new Path();\nprivate static final RectF rectangle23Rect = new RectF();\nprivate static final Path rectangle23Path = new Path();\nprivate static final RectF rectangle24Rect = new RectF();\nprivate static final Path rectangle24Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 21f, 21f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final RectF rectangle16Rect = new RectF();\nprivate static final Path rectangle16Path = new Path();\nprivate static final RectF rectangle17Rect = new RectF();\nprivate static final Path rectangle17Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final Paint shadowPaint = new Paint();\nprivate static final PaintCodeShadow shadow = new PaintCodeShadow();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 28f, 28f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF oval2Rect = new RectF();\nprivate static final Path oval2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF bezier19Rect = new RectF();\nprivate static final Path bezier19Path = new Path();\nprivate static final RectF bezier20Rect = new RectF();\nprivate static final Path bezier20Path = new Path();\nprivate static final RectF bezier21Rect = new RectF();\nprivate static final Path bezier21Path = new Path();\nprivate static final RectF bezier22Rect = new RectF();\nprivate static final Path bezier22Path = new Path();\nprivate static final RectF bezier23Rect = new RectF();\nprivate static final Path bezier23Path = new Path();\nprivate static final RectF bezier24Rect = new RectF();\nprivate static final Path bezier24Path = new Path();\nprivate static final RectF bezier25Rect = new RectF();\nprivate static final Path bezier25Path = new Path();\nprivate static final RectF bezier26Rect = new RectF();\nprivate static final Path bezier26Path = new Path();\nprivate static final RectF bezier27Rect = new RectF();\nprivate static final Path bezier27Path = new Path();\nprivate static final RectF bezier28Rect = new RectF();\nprivate static final Path bezier28Path = new Path();\nprivate static final RectF bezier29Rect = new RectF();\nprivate static final Path bezier29Path = new Path();\nprivate static final RectF bezier30Rect = new RectF();\nprivate static final Path bezier30Path = new Path();\nprivate static final RectF bezier31Rect = new RectF();\nprivate static final Path bezier31Path = new Path();\nprivate static final RectF bezier32Rect = new RectF();\nprivate static final Path bezier32Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final RectF bezier17Rect = new RectF();\nprivate static final Path bezier17Path = new Path();\nprivate static final RectF bezier18Rect = new RectF();\nprivate static final Path bezier18Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 32f, 32f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 12f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final PaintCodeDashPathEffect bezierPathDashEffect = new PaintCodeDashPathEffect();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 42f, 53f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF clipRect = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF clip2Rect = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 77f, 24f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF starRect = new RectF();\nprivate static final Path starPath = new Path();\nprivate static final RectF star2Rect = new RectF();\nprivate static final Path star2Path = new Path();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final RectF star4Rect = new RectF();\nprivate static final Path star4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 24f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF tier1Rect = new RectF();\nprivate static final Path tier1Path = new Path();\nprivate static final RectF tier2Rect = new RectF();\nprivate static final Path tier2Path = new Path();\nprivate static final RectF tier3Rect = new RectF();\nprivate static final Path tier3Path = new Path();\nprivate static final RectF tier4Rect = new RectF();\nprivate static final Path tier4Path = new Path();\nprivate static final RectF tier5Rect = new RectF();\nprivate static final Path tier5Path = new Path();\nprivate static final RectF tier6Rect = new RectF();\nprivate static final Path tier6Path = new Path();\nprivate static final RectF tier7Rect = new RectF();\nprivate static final Path tier7Path = new Path();\nprivate static final RectF tierModRect = new RectF();\nprivate static final Path tierModPath = new Path();\nprivate static final RectF tierStaffRect = new RectF();\nprivate static final Path tierStaffPath = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF group4 = new RectF();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nprivate static final RectF rectangle12Rect = new RectF();\nprivate static final Path rectangle12Path = new Path();\nprivate static final RectF rectangle13Rect = new RectF();\nprivate static final Path rectangle13Path = new Path();\nprivate static final RectF rectangle14Rect = new RectF();\nprivate static final Path rectangle14Path = new Path();\nprivate static final RectF rectangle15Rect = new RectF();\nprivate static final Path rectangle15Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF group3 = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier16Rect = new RectF();\nprivate static final Path bezier16Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final Path labelPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 63f, 82f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 18f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier5Rect = new RectF();\nprivate static final Path bezier5Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF bezier9Rect = new RectF();\nprivate static final Path bezier9Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF bezier12Rect = new RectF();\nprivate static final Path bezier12Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 36f, 36f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF symbol2Rect = new RectF();\nprivate static final RectF symbol2TargetRect = new RectF();\nprivate static final RectF symbol3Rect = new RectF();\nprivate static final RectF symbol3TargetRect = new RectF();\nprivate static final RectF symbol4Rect = new RectF();\nprivate static final RectF symbol4TargetRect = new RectF();\nprivate static final RectF symbol5Rect = new RectF();\nprivate static final RectF symbol5TargetRect = new RectF();\nprivate static final RectF symbol6Rect = new RectF();\nprivate static final RectF symbol6TargetRect = new RectF();\nprivate static final RectF symbol7Rect = new RectF();\nprivate static final RectF symbol7TargetRect = new RectF();\nprivate static final RectF symbol8Rect = new RectF();\nprivate static final RectF symbol8TargetRect = new RectF();\nprivate static final RectF symbol9Rect = new RectF();\nprivate static final RectF symbol9TargetRect = new RectF();\nprivate static final RectF symbol10Rect = new RectF();\nprivate static final RectF symbol10TargetRect = new RectF();\nprivate static final RectF symbolRect = new RectF();\nprivate static final RectF symbolTargetRect = new RectF();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF star3Rect = new RectF();\nprivate static final Path star3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group2 = new RectF();\nprivate static final Path clip2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 40f, 38f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clip5Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier4Rect = new RectF();\nprivate static final Path bezier4Path = new Path();\nprivate static final RectF bezier7Rect = new RectF();\nprivate static final Path bezier7Path = new Path();\nprivate static final RectF bezier8Rect = new RectF();\nprivate static final Path bezier8Path = new Path();\nprivate static final RectF group8 = new RectF();\nprivate static final Path clip14Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final RectF bezier6Rect = new RectF();\nprivate static final Path bezier6Path = new Path();\nprivate static final RectF bezier14Rect = new RectF();\nprivate static final Path bezier14Path = new Path();\nprivate static final RectF bezier15Rect = new RectF();\nprivate static final Path bezier15Path = new Path();\nprivate static final RectF bezier13Rect = new RectF();\nprivate static final Path bezier13Path = new Path();\nprivate static final RectF bezier10Rect = new RectF();\nprivate static final Path bezier10Path = new Path();\nprivate static final RectF bezier11Rect = new RectF();\nprivate static final Path bezier11Path = new Path();\nprivate static final RectF labelRect = new RectF();\nprivate static final TextPaint labelTextPaint = new TextPaint();\nprivate static final PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();\nprivate static Paint paint = new Paint();\nprivate static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);\nprivate static RectF resizedFrame = new RectF();\nprivate static RectF group = new RectF();\nprivate static Path clip5Path = new Path();\nprivate static RectF rectangleRect = new RectF();\nprivate static Path rectanglePath = new Path();\nprivate static RectF rectangle2Rect = new RectF();\nprivate static Path rectangle2Path = new Path();\nprivate static RectF rectangle4Rect = new RectF();\nprivate static Path rectangle4Path = new Path();\nprivate static RectF bezier2Rect = new RectF();\nprivate static Path bezier2Path = new Path();\nprivate static RectF bezier4Rect = new RectF();\nprivate static Path bezier4Path = new Path();\nprivate static RectF bezier6Rect = new RectF();\nprivate static Path bezier6Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 15f, 15f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 20f, 20f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF bezier3Rect = new RectF();\nprivate static final Path bezier3Path = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 18f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 17f, 17f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 16f, 16f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final Paint paint = new Paint();\nprivate static final RectF originalFrame = new RectF(0f, 0f, 30f, 22f);\nprivate static final RectF resizedFrame = new RectF();\nprivate static final RectF bezierRect = new RectF();\nprivate static final Path bezierPath = new Path();\nprivate static final RectF group = new RectF();\nprivate static final Path clipPath = new Path();\nprivate static final RectF bezier2Rect = new RectF();\nprivate static final Path bezier2Path = new Path();\nprivate static final RectF rectangleRect = new RectF();\nprivate static final Path rectanglePath = new Path();\nprivate static final RectF rectangle2Rect = new RectF();\nprivate static final Path rectangle2Path = new Path();\nprivate static final RectF rectangle3Rect = new RectF();\nprivate static final Path rectangle3Path = new Path();\nprivate static final RectF rectangle4Rect = new RectF();\nprivate static final Path rectangle4Path = new Path();\nprivate static final RectF rectangle5Rect = new RectF();\nprivate static final Path rectangle5Path = new Path();\nprivate static final RectF rectangle6Rect = new RectF();\nprivate static final Path rectangle6Path = new Path();\nprivate static final RectF rectangle7Rect = new RectF();\nprivate static final Path rectangle7Path = new Path();\nprivate static final RectF rectangle8Rect = new RectF();\nprivate static final Path rectangle8Path = new Path();\nprivate static final RectF rectangle9Rect = new RectF();\nprivate static final Path rectangle9Path = new Path();\nprivate static final RectF rectangle10Rect = new RectF();\nprivate static final Path rectangle10Path = new Path();\nprivate static final RectF rectangle11Rect = new RectF();\nprivate static final Path rectangle11Path = new Path();\nint color;\nfloat dx, dy;\nprivate float radius;\nprivate BlurMaskFilter blurMaskFilter;\nprivate BitmapShader shader;\nprivate Bitmap bitmap;\nprivate RectF bounds;\nprivate DashPathEffect effect;\nprivate float dash, gap, phase;\nprivate StaticLayout layout;\nprivate int width;\nprivate Layout.Alignment alignment;\nprivate CharSequence source;\nprivate TextPaint paint;",
  "app_type" : "life",
  "end_lineno" : "10900",
  "ground_truth" : "        this.paint = paint;\r\n        this.layout = new StaticLayout(source, paint, width, Layout.Alignment.ALIGN_CENTER, 1, 0, false);\r\n    }\r\n    return this.layout;\r\n}",
  "context" : "StaticLayout get(int width, CharSequence source, TextPaint paint) {\r\n    if (this.layout == null || this.width != width || this.alignment != Layout.Alignment.ALIGN_CENTER || !this.source.equals(source) || !this.paint.equals(paint)) {\r\n        this.width = width;\r\n        this.alignment = Layout.Alignment.ALIGN_CENTER;\r\n        this.source = source;\r\n        this.paint = paint;\r\n        this.layout = new StaticLayout(source, paint, width, Layout.Alignment.ALIGN_CENTER, 1, 0, false);\r\n    }\r\n    return this.layout;\r\n}",
  "start_lineno" : "10891",
  "methodName" : "get",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java",
  "task_id" : "habitica-android/1082",
  "prompt" : "import android.text.TextPaint\nimport android.text.StaticLayout\nimport android.text.Layout\nimport android.graphics.Paint\nStaticLayout get(int width, CharSequence source, TextPaint paint) {\r\n    if (this.layout == null || this.width != width || this.alignment != Layout.Alignment.ALIGN_CENTER || !this.source.equals(source) || !this.paint.equals(paint)) {\r\n        this.width = width;\r\n        this.alignment = Layout.Alignment.ALIGN_CENTER;\r\n        this.source = source;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfExperience);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawExperience(canvas);\r\n    return imageOfExperience;\r\n}",
  "context" : "public static Bitmap imageOfExperience() {\r\n    if (imageOfExperience != null)\r\n        return imageOfExperience;\r\n    int size = scaleSize(18);\r\n    imageOfExperience = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfExperience);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawExperience(canvas);\r\n    return imageOfExperience;\r\n}",
  "start_lineno" : "28",
  "methodName" : "imageOfExperience",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1083",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfExperience() {\r\n    if (imageOfExperience != null)\r\n        return imageOfExperience;\r\n    int size = scaleSize(18);\r\n    imageOfExperience = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfMagic);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawMagic(canvas);\r\n    return imageOfMagic;\r\n}",
  "context" : "public static Bitmap imageOfMagic() {\r\n    if (imageOfMagic != null)\r\n        return imageOfMagic;\r\n    int size = scaleSize(18);\r\n    imageOfMagic = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfMagic);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawMagic(canvas);\r\n    return imageOfMagic;\r\n}",
  "start_lineno" : "42",
  "methodName" : "imageOfMagic",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1084",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfMagic() {\r\n    if (imageOfMagic != null)\r\n        return imageOfMagic;\r\n    int size = scaleSize(18);\r\n    imageOfMagic = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "66",
  "ground_truth" : "    imageOfMagicLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfMagicLarge);\r\n    HabiticaIcons.drawMagic(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfMagicLarge;\r\n}",
  "context" : "public static Bitmap imageOfMagicLarge() {\r\n    if (imageOfMagicLarge != null)\r\n        return imageOfMagicLarge;\r\n    int size = scaleSize(36);\r\n    imageOfMagicLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfMagicLarge);\r\n    HabiticaIcons.drawMagic(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfMagicLarge;\r\n}",
  "start_lineno" : "56",
  "methodName" : "imageOfMagicLarge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1085",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfMagicLarge() {\r\n    if (imageOfMagicLarge != null)\r\n        return imageOfMagicLarge;\r\n    int size = scaleSize(36);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "80",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGold);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGold(canvas);\r\n    return imageOfGold;\r\n}",
  "context" : "public static Bitmap imageOfGold() {\r\n    if (imageOfGold != null)\r\n        return imageOfGold;\r\n    int size = scaleSize(18);\r\n    imageOfGold = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGold);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGold(canvas);\r\n    return imageOfGold;\r\n}",
  "start_lineno" : "69",
  "methodName" : "imageOfGold",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1086",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGold() {\r\n    if (imageOfGold != null)\r\n        return imageOfGold;\r\n    int size = scaleSize(18);\r\n    imageOfGold = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "94",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGem(canvas);\r\n    return imageOfGem;\r\n}",
  "context" : "public static Bitmap imageOfGem() {\r\n    if (imageOfGem != null)\r\n        return imageOfGem;\r\n    int size = scaleSize(18);\r\n    imageOfGem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGem(canvas);\r\n    return imageOfGem;\r\n}",
  "start_lineno" : "83",
  "methodName" : "imageOfGem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1087",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGem() {\r\n    if (imageOfGem != null)\r\n        return imageOfGem;\r\n    int size = scaleSize(18);\r\n    imageOfGem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "108",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHourglass);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHourglass(canvas);\r\n    return imageOfHourglass;\r\n}",
  "context" : "public static Bitmap imageOfHourglass() {\r\n    if (imageOfHourglass != null)\r\n        return imageOfHourglass;\r\n    int size = scaleSize(18);\r\n    imageOfHourglass = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHourglass);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHourglass(canvas);\r\n    return imageOfHourglass;\r\n}",
  "start_lineno" : "97",
  "methodName" : "imageOfHourglass",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1088",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHourglass() {\r\n    if (imageOfHourglass != null)\r\n        return imageOfHourglass;\r\n    int size = scaleSize(18);\r\n    imageOfHourglass = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "121",
  "ground_truth" : "    imageOfHourglassLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHourglassLarge);\r\n    HabiticaIcons.drawHourglass(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfHourglassLarge;\r\n}",
  "context" : "public static Bitmap imageOfHourglassLarge() {\r\n    if (imageOfHourglassLarge != null)\r\n        return imageOfHourglassLarge;\r\n    int size = scaleSize(40);\r\n    imageOfHourglassLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHourglassLarge);\r\n    HabiticaIcons.drawHourglass(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfHourglassLarge;\r\n}",
  "start_lineno" : "111",
  "methodName" : "imageOfHourglassLarge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1089",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHourglassLarge() {\r\n    if (imageOfHourglassLarge != null)\r\n        return imageOfHourglassLarge;\r\n    int size = scaleSize(40);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "134",
  "ground_truth" : "    imageOfExperienceReward = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfExperienceReward);\r\n    HabiticaIcons.drawExperience(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfExperienceReward;\r\n}",
  "context" : "public static Bitmap imageOfExperienceReward() {\r\n    if (imageOfExperienceReward != null)\r\n        return imageOfExperienceReward;\r\n    int size = scaleSize(40);\r\n    imageOfExperienceReward = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfExperienceReward);\r\n    HabiticaIcons.drawExperience(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfExperienceReward;\r\n}",
  "start_lineno" : "124",
  "methodName" : "imageOfExperienceReward",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1090",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfExperienceReward() {\r\n    if (imageOfExperienceReward != null)\r\n        return imageOfExperienceReward;\r\n    int size = scaleSize(40);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "147",
  "ground_truth" : "    imageOfGoldReward = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGoldReward);\r\n    HabiticaIcons.drawGold(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfGoldReward;\r\n}",
  "context" : "public static Bitmap imageOfGoldReward() {\r\n    if (imageOfGoldReward != null)\r\n        return imageOfGoldReward;\r\n    int size = scaleSize(40);\r\n    imageOfGoldReward = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGoldReward);\r\n    HabiticaIcons.drawGold(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit);\r\n    return imageOfGoldReward;\r\n}",
  "start_lineno" : "137",
  "methodName" : "imageOfGoldReward",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1091",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGoldReward() {\r\n    if (imageOfGoldReward != null)\r\n        return imageOfGoldReward;\r\n    int size = scaleSize(40);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "161",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHeartDarkBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHeart(canvas, true);\r\n    return imageOfHeartDarkBg;\r\n}",
  "context" : "public static Bitmap imageOfHeartDarkBg() {\r\n    if (imageOfHeartDarkBg != null)\r\n        return imageOfHeartDarkBg;\r\n    int size = scaleSize(18);\r\n    imageOfHeartDarkBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHeartDarkBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHeart(canvas, true);\r\n    return imageOfHeartDarkBg;\r\n}",
  "start_lineno" : "150",
  "methodName" : "imageOfHeartDarkBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1092",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHeartDarkBg() {\r\n    if (imageOfHeartDarkBg != null)\r\n        return imageOfHeartDarkBg;\r\n    int size = scaleSize(18);\r\n    imageOfHeartDarkBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "175",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHeartLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHeart(canvas, false);\r\n    return imageOfHeartLightBg;\r\n}",
  "context" : "public static Bitmap imageOfHeartLightBg() {\r\n    if (imageOfHeartLightBg != null)\r\n        return imageOfHeartLightBg;\r\n    int size = scaleSize(18);\r\n    imageOfHeartLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHeartLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHeart(canvas, false);\r\n    return imageOfHeartLightBg;\r\n}",
  "start_lineno" : "164",
  "methodName" : "imageOfHeartLightBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1093",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHeartLightBg() {\r\n    if (imageOfHeartLightBg != null)\r\n        return imageOfHeartLightBg;\r\n    int size = scaleSize(18);\r\n    imageOfHeartLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "188",
  "ground_truth" : "    imageOfHeartLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHeartLarge);\r\n    HabiticaIcons.drawHeart(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit, false);\r\n    return imageOfHeartLarge;\r\n}",
  "context" : "public static Bitmap imageOfHeartLarge() {\r\n    if (imageOfHeartLarge != null)\r\n        return imageOfHeartLarge;\r\n    int size = scaleSize(36);\r\n    imageOfHeartLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHeartLarge);\r\n    HabiticaIcons.drawHeart(canvas, new RectF(0f, 0f, size, size), HabiticaIcons.ResizingBehavior.AspectFit, false);\r\n    return imageOfHeartLarge;\r\n}",
  "start_lineno" : "178",
  "methodName" : "imageOfHeartLarge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1094",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHeartLarge() {\r\n    if (imageOfHeartLarge != null)\r\n        return imageOfHeartLarge;\r\n    int size = scaleSize(36);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "202",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfStarSmall);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarSmall(canvas);\r\n    return imageOfStarSmall;\r\n}",
  "context" : "public static Bitmap imageOfStarSmall() {\r\n    if (imageOfStarSmall != null)\r\n        return imageOfStarSmall;\r\n    int size = scaleSize(9);\r\n    imageOfStarSmall = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfStarSmall);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarSmall(canvas);\r\n    return imageOfStarSmall;\r\n}",
  "start_lineno" : "191",
  "methodName" : "imageOfStarSmall",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1095",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfStarSmall() {\r\n    if (imageOfStarSmall != null)\r\n        return imageOfStarSmall;\r\n    int size = scaleSize(9);\r\n    imageOfStarSmall = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "216",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfStarLarge);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarLarge(canvas);\r\n    return imageOfStarLarge;\r\n}",
  "context" : "public static Bitmap imageOfStarLarge() {\r\n    if (imageOfStarLarge != null)\r\n        return imageOfStarLarge;\r\n    int size = scaleSize(27);\r\n    imageOfStarLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfStarLarge);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarLarge(canvas);\r\n    return imageOfStarLarge;\r\n}",
  "start_lineno" : "205",
  "methodName" : "imageOfStarLarge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1096",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfStarLarge() {\r\n    if (imageOfStarLarge != null)\r\n        return imageOfStarLarge;\r\n    int size = scaleSize(27);\r\n    imageOfStarLarge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "230",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfStarMedium);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarMedium(canvas);\r\n    return imageOfStarMedium;\r\n}",
  "context" : "public static Bitmap imageOfStarMedium() {\r\n    if (imageOfStarMedium != null)\r\n        return imageOfStarMedium;\r\n    int size = scaleSize(21);\r\n    imageOfStarMedium = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfStarMedium);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStarMedium(canvas);\r\n    return imageOfStarMedium;\r\n}",
  "start_lineno" : "219",
  "methodName" : "imageOfStarMedium",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1097",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfStarMedium() {\r\n    if (imageOfStarMedium != null)\r\n        return imageOfStarMedium;\r\n    int size = scaleSize(21);\r\n    imageOfStarMedium = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "244",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfPinnedItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawPinnedItem(canvas);\r\n    return imageOfPinnedItem;\r\n}",
  "context" : "public static Bitmap imageOfPinnedItem() {\r\n    if (imageOfPinnedItem != null)\r\n        return imageOfPinnedItem;\r\n    int size = scaleSize(14);\r\n    imageOfPinnedItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfPinnedItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawPinnedItem(canvas);\r\n    return imageOfPinnedItem;\r\n}",
  "start_lineno" : "233",
  "methodName" : "imageOfPinnedItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1098",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfPinnedItem() {\r\n    if (imageOfPinnedItem != null)\r\n        return imageOfPinnedItem;\r\n    int size = scaleSize(14);\r\n    imageOfPinnedItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "258",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfPinItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAddRemovePin(canvas, true);\r\n    return imageOfPinItem;\r\n}",
  "context" : "public static Bitmap imageOfPinItem() {\r\n    if (imageOfPinItem != null)\r\n        return imageOfPinItem;\r\n    int size = scaleSize(24);\r\n    imageOfPinItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfPinItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAddRemovePin(canvas, true);\r\n    return imageOfPinItem;\r\n}",
  "start_lineno" : "247",
  "methodName" : "imageOfPinItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1099",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfPinItem() {\r\n    if (imageOfPinItem != null)\r\n        return imageOfPinItem;\r\n    int size = scaleSize(24);\r\n    imageOfPinItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "272",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfUnpinItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAddRemovePin(canvas, false);\r\n    return imageOfUnpinItem;\r\n}",
  "context" : "public static Bitmap imageOfUnpinItem() {\r\n    if (imageOfUnpinItem != null)\r\n        return imageOfUnpinItem;\r\n    int size = scaleSize(24);\r\n    imageOfUnpinItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfUnpinItem);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAddRemovePin(canvas, false);\r\n    return imageOfUnpinItem;\r\n}",
  "start_lineno" : "261",
  "methodName" : "imageOfUnpinItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1100",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfUnpinItem() {\r\n    if (imageOfUnpinItem != null)\r\n        return imageOfUnpinItem;\r\n    int size = scaleSize(24);\r\n    imageOfUnpinItem = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "362",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGem_36);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGem(canvas);\r\n    return imageOfGem_36;\r\n}",
  "context" : "public static Bitmap imageOfGem_36() {\r\n    if (imageOfGem_36 != null)\r\n        return imageOfGem_36;\r\n    int size = scaleSize(36);\r\n    imageOfGem_36 = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGem_36);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGem(canvas);\r\n    return imageOfGem_36;\r\n}",
  "start_lineno" : "351",
  "methodName" : "imageOfGem_36",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1101",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGem_36() {\r\n    if (imageOfGem_36 != null)\r\n        return imageOfGem_36;\r\n    int size = scaleSize(36);\r\n    imageOfGem_36 = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "376",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfWarriorLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawWarriorLightBg(canvas);\r\n    return imageOfWarriorLightBg;\r\n}",
  "context" : "public static Bitmap imageOfWarriorLightBg() {\r\n    if (imageOfWarriorLightBg != null)\r\n        return imageOfWarriorLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfWarriorLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfWarriorLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawWarriorLightBg(canvas);\r\n    return imageOfWarriorLightBg;\r\n}",
  "start_lineno" : "365",
  "methodName" : "imageOfWarriorLightBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1102",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfWarriorLightBg() {\r\n    if (imageOfWarriorLightBg != null)\r\n        return imageOfWarriorLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfWarriorLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "390",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfRogueLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRogueLightBg(canvas);\r\n    return imageOfRogueLightBg;\r\n}",
  "context" : "public static Bitmap imageOfRogueLightBg() {\r\n    if (imageOfRogueLightBg != null)\r\n        return imageOfRogueLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfRogueLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfRogueLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRogueLightBg(canvas);\r\n    return imageOfRogueLightBg;\r\n}",
  "start_lineno" : "379",
  "methodName" : "imageOfRogueLightBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1103",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfRogueLightBg() {\r\n    if (imageOfRogueLightBg != null)\r\n        return imageOfRogueLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfRogueLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "404",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHealerLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHealerLightBg(canvas);\r\n    return imageOfHealerLightBg;\r\n}",
  "context" : "public static Bitmap imageOfHealerLightBg() {\r\n    if (imageOfHealerLightBg != null)\r\n        return imageOfHealerLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfHealerLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHealerLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHealerLightBg(canvas);\r\n    return imageOfHealerLightBg;\r\n}",
  "start_lineno" : "393",
  "methodName" : "imageOfHealerLightBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1104",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHealerLightBg() {\r\n    if (imageOfHealerLightBg != null)\r\n        return imageOfHealerLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfHealerLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "418",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfMageLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawMageLightBg(canvas);\r\n    return imageOfMageLightBg;\r\n}",
  "context" : "public static Bitmap imageOfMageLightBg() {\r\n    if (imageOfMageLightBg != null)\r\n        return imageOfMageLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfMageLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfMageLightBg);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawMageLightBg(canvas);\r\n    return imageOfMageLightBg;\r\n}",
  "start_lineno" : "407",
  "methodName" : "imageOfMageLightBg",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1105",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfMageLightBg() {\r\n    if (imageOfMageLightBg != null)\r\n        return imageOfMageLightBg;\r\n    int size = scaleSize(32);\r\n    imageOfMageLightBg = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "431",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHourglassShop);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHourglassShop(canvas);\r\n    return imageOfHourglassShop;\r\n}",
  "context" : "public static Bitmap imageOfHourglassShop() {\r\n    if (imageOfHourglassShop != null)\r\n        return imageOfHourglassShop;\r\n    imageOfHourglassShop = Bitmap.createBitmap(scaleSize(42), scaleSize(53), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHourglassShop);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawHourglassShop(canvas);\r\n    return imageOfHourglassShop;\r\n}",
  "start_lineno" : "421",
  "methodName" : "imageOfHourglassShop",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1106",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfHourglassShop() {\r\n    if (imageOfHourglassShop != null)\r\n        return imageOfHourglassShop;\r\n    imageOfHourglassShop = Bitmap.createBitmap(scaleSize(42), scaleSize(53), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "444",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfAttributeSparklesLeft);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeSparklesLeft(canvas);\r\n    return imageOfAttributeSparklesLeft;\r\n}",
  "context" : "public static Bitmap imageOfAttributeSparklesLeft() {\r\n    if (imageOfAttributeSparklesLeft != null)\r\n        return imageOfAttributeSparklesLeft;\r\n    imageOfAttributeSparklesLeft = Bitmap.createBitmap(scaleSize(77), scaleSize(24), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfAttributeSparklesLeft);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeSparklesLeft(canvas);\r\n    return imageOfAttributeSparklesLeft;\r\n}",
  "start_lineno" : "434",
  "methodName" : "imageOfAttributeSparklesLeft",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1107",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfAttributeSparklesLeft() {\r\n    if (imageOfAttributeSparklesLeft != null)\r\n        return imageOfAttributeSparklesLeft;\r\n    imageOfAttributeSparklesLeft = Bitmap.createBitmap(scaleSize(77), scaleSize(24), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "457",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfAttributeSparklesRight);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeSparklesRight(canvas);\r\n    return imageOfAttributeSparklesRight;\r\n}",
  "context" : "public static Bitmap imageOfAttributeSparklesRight() {\r\n    if (imageOfAttributeSparklesRight != null)\r\n        return imageOfAttributeSparklesRight;\r\n    imageOfAttributeSparklesRight = Bitmap.createBitmap(scaleSize(77), scaleSize(24), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfAttributeSparklesRight);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeSparklesRight(canvas);\r\n    return imageOfAttributeSparklesRight;\r\n}",
  "start_lineno" : "447",
  "methodName" : "imageOfAttributeSparklesRight",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1108",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfAttributeSparklesRight() {\r\n    if (imageOfAttributeSparklesRight != null)\r\n        return imageOfAttributeSparklesRight;\r\n    imageOfAttributeSparklesRight = Bitmap.createBitmap(scaleSize(77), scaleSize(24), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "470",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfAttributeAllocateButton);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeAllocateButton(canvas);\r\n    return imageOfAttributeAllocateButton;\r\n}",
  "context" : "public static Bitmap imageOfAttributeAllocateButton() {\r\n    if (imageOfAttributeAllocateButton != null)\r\n        return imageOfAttributeAllocateButton;\r\n    imageOfAttributeAllocateButton = Bitmap.createBitmap(scaleSize(24), scaleSize(15), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfAttributeAllocateButton);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAttributeAllocateButton(canvas);\r\n    return imageOfAttributeAllocateButton;\r\n}",
  "start_lineno" : "460",
  "methodName" : "imageOfAttributeAllocateButton",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1109",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfAttributeAllocateButton() {\r\n    if (imageOfAttributeAllocateButton != null)\r\n        return imageOfAttributeAllocateButton;\r\n    imageOfAttributeAllocateButton = Bitmap.createBitmap(scaleSize(24), scaleSize(15), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "484",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfInfoIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawInfoIcon(canvas, iconColor);\r\n    return imageOfInfoIcon;\r\n}",
  "context" : "public static Bitmap imageOfInfoIcon(@ColorInt int iconColor) {\r\n    if (imageOfInfoIcon != null)\r\n        return imageOfInfoIcon;\r\n    int size = scaleSize(20);\r\n    imageOfInfoIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfInfoIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawInfoIcon(canvas, iconColor);\r\n    return imageOfInfoIcon;\r\n}",
  "start_lineno" : "473",
  "methodName" : "imageOfInfoIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1110",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.graphics.Color\nimport android.graphics.Bitmap\npublic static Bitmap imageOfInfoIcon(@ColorInt int iconColor) {\r\n    if (imageOfInfoIcon != null)\r\n        return imageOfInfoIcon;\r\n    int size = scaleSize(20);\r\n    imageOfInfoIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "494",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfContributorBadge);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawContributorBadge(canvas, contributorTier, isNPC);\r\n    return imageOfContributorBadge;\r\n}",
  "context" : "public static Bitmap imageOfContributorBadge(float contributorTier, boolean isNPC) {\r\n    int size = scaleSize(16);\r\n    Bitmap imageOfContributorBadge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfContributorBadge);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawContributorBadge(canvas, contributorTier, isNPC);\r\n    return imageOfContributorBadge;\r\n}",
  "start_lineno" : "486",
  "methodName" : "imageOfContributorBadge",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1111",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfContributorBadge(float contributorTier, boolean isNPC) {\r\n    int size = scaleSize(16);\r\n    Bitmap imageOfContributorBadge = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "508",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfDamage);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawDamage(canvas);\r\n    return imageOfDamage;\r\n}",
  "context" : "public static Bitmap imageOfDamage() {\r\n    if (imageOfDamage != null)\r\n        return imageOfDamage;\r\n    int size = scaleSize(18);\r\n    imageOfDamage = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfDamage);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawDamage(canvas);\r\n    return imageOfDamage;\r\n}",
  "start_lineno" : "497",
  "methodName" : "imageOfDamage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1112",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfDamage() {\r\n    if (imageOfDamage != null)\r\n        return imageOfDamage;\r\n    int size = scaleSize(18);\r\n    imageOfDamage = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "518",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfCaret);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawCaret(canvas, caretColor, pointsUp);\r\n    return imageOfCaret;\r\n}",
  "context" : "public static Bitmap imageOfCaret(int caretColor, boolean pointsUp) {\r\n    int size = scaleSize(16);\r\n    Bitmap imageOfCaret = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfCaret);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawCaret(canvas, caretColor, pointsUp);\r\n    return imageOfCaret;\r\n}",
  "start_lineno" : "510",
  "methodName" : "imageOfCaret",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1113",
  "prompt" : "import android.graphics.Color\nimport android.graphics.Bitmap\npublic static Bitmap imageOfCaret(int caretColor, boolean pointsUp) {\r\n    int size = scaleSize(16);\r\n    Bitmap imageOfCaret = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "531",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfRageStrikeInactive);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRageStrikeInactive(canvas);\r\n    return imageOfRageStrikeInactive;\r\n}",
  "context" : "public static Bitmap imageOfRageStrikeInactive() {\r\n    if (imageOfRageStrikeInactive != null)\r\n        return imageOfRageStrikeInactive;\r\n    imageOfRageStrikeInactive = Bitmap.createBitmap(scaleSize(63), scaleSize(82), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfRageStrikeInactive);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRageStrikeInactive(canvas);\r\n    return imageOfRageStrikeInactive;\r\n}",
  "start_lineno" : "521",
  "methodName" : "imageOfRageStrikeInactive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1114",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfRageStrikeInactive() {\r\n    if (imageOfRageStrikeInactive != null)\r\n        return imageOfRageStrikeInactive;\r\n    imageOfRageStrikeInactive = Bitmap.createBitmap(scaleSize(63), scaleSize(82), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "540",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfRageStrikeActive);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRageStrikeActive(canvas, context, rageStrikeNPC);\r\n    return imageOfRageStrikeActive;\r\n}",
  "context" : "public static Bitmap imageOfRageStrikeActive(Context context, Bitmap rageStrikeNPC) {\r\n    Bitmap imageOfRageStrikeActive = Bitmap.createBitmap(scaleSize(63), scaleSize(82), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfRageStrikeActive);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRageStrikeActive(canvas, context, rageStrikeNPC);\r\n    return imageOfRageStrikeActive;\r\n}",
  "start_lineno" : "533",
  "methodName" : "imageOfRageStrikeActive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1115",
  "prompt" : "import android.graphics.Bitmap\nimport android.content.Context\npublic static Bitmap imageOfRageStrikeActive(Context context, Bitmap rageStrikeNPC) {\r\n    Bitmap imageOfRageStrikeActive = Bitmap.createBitmap(scaleSize(63), scaleSize(82), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "554",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfRage);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRage(canvas);\r\n    return imageOfRage;\r\n}",
  "context" : "public static Bitmap imageOfRage() {\r\n    if (imageOfRage != null)\r\n        return imageOfRage;\r\n    int size = scaleSize(18);\r\n    imageOfRage = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfRage);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawRage(canvas);\r\n    return imageOfRage;\r\n}",
  "start_lineno" : "543",
  "methodName" : "imageOfRage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1116",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfRage() {\r\n    if (imageOfRage != null)\r\n        return imageOfRage;\r\n    int size = scaleSize(18);\r\n    imageOfRage = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "566",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfLocked);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawLocked(canvas, new RectF(0f, 0f, width, height), HabiticaIcons.ResizingBehavior.AspectFit, lockColor);\r\n    return imageOfLocked;\r\n}",
  "context" : "public static Bitmap imageOfLocked(@ColorInt int lockColor, int width, int height) {\r\n    Bitmap imageOfLocked = Bitmap.createBitmap(scaleSize(width), scaleSize(height), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfLocked);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawLocked(canvas, new RectF(0f, 0f, width, height), HabiticaIcons.ResizingBehavior.AspectFit, lockColor);\r\n    return imageOfLocked;\r\n}",
  "start_lineno" : "560",
  "methodName" : "imageOfLocked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1117",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.graphics.Color\nimport android.graphics.Bitmap\npublic static Bitmap imageOfLocked(@ColorInt int lockColor, int width, int height) {\r\n    Bitmap imageOfLocked = Bitmap.createBitmap(scaleSize(width), scaleSize(height), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "580",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfParticipantsIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawParticipantsIcon(canvas);\r\n    return imageOfParticipantsIcon;\r\n}",
  "context" : "public static Bitmap imageOfParticipantsIcon() {\r\n    if (imageOfParticipantsIcon != null)\r\n        return imageOfParticipantsIcon;\r\n    int size = scaleSize(20);\r\n    imageOfParticipantsIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfParticipantsIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawParticipantsIcon(canvas);\r\n    return imageOfParticipantsIcon;\r\n}",
  "start_lineno" : "569",
  "methodName" : "imageOfParticipantsIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1118",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfParticipantsIcon() {\r\n    if (imageOfParticipantsIcon != null)\r\n        return imageOfParticipantsIcon;\r\n    int size = scaleSize(20);\r\n    imageOfParticipantsIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "594",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfChatReplyIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatReplyIcon(canvas);\r\n    return imageOfChatReplyIcon;\r\n}",
  "context" : "public static Bitmap imageOfChatReplyIcon() {\r\n    if (imageOfChatReplyIcon != null)\r\n        return imageOfChatReplyIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatReplyIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfChatReplyIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatReplyIcon(canvas);\r\n    return imageOfChatReplyIcon;\r\n}",
  "start_lineno" : "583",
  "methodName" : "imageOfChatReplyIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1119",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfChatReplyIcon() {\r\n    if (imageOfChatReplyIcon != null)\r\n        return imageOfChatReplyIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatReplyIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "608",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfChatCopyIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatCopyIcon(canvas);\r\n    return imageOfChatCopyIcon;\r\n}",
  "context" : "public static Bitmap imageOfChatCopyIcon() {\r\n    if (imageOfChatCopyIcon != null)\r\n        return imageOfChatCopyIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatCopyIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfChatCopyIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatCopyIcon(canvas);\r\n    return imageOfChatCopyIcon;\r\n}",
  "start_lineno" : "597",
  "methodName" : "imageOfChatCopyIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1120",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfChatCopyIcon() {\r\n    if (imageOfChatCopyIcon != null)\r\n        return imageOfChatCopyIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatCopyIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "622",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfChatReportIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatReportIcon(canvas);\r\n    return imageOfChatReportIcon;\r\n}",
  "context" : "public static Bitmap imageOfChatReportIcon() {\r\n    if (imageOfChatReportIcon != null)\r\n        return imageOfChatReportIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatReportIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfChatReportIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatReportIcon(canvas);\r\n    return imageOfChatReportIcon;\r\n}",
  "start_lineno" : "611",
  "methodName" : "imageOfChatReportIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1121",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfChatReportIcon() {\r\n    if (imageOfChatReportIcon != null)\r\n        return imageOfChatReportIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatReportIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "636",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfChatDeleteIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatDeleteIcon(canvas);\r\n    return imageOfChatDeleteIcon;\r\n}",
  "context" : "public static Bitmap imageOfChatDeleteIcon() {\r\n    if (imageOfChatDeleteIcon != null)\r\n        return imageOfChatDeleteIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatDeleteIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfChatDeleteIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawChatDeleteIcon(canvas);\r\n    return imageOfChatDeleteIcon;\r\n}",
  "start_lineno" : "625",
  "methodName" : "imageOfChatDeleteIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1122",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfChatDeleteIcon() {\r\n    if (imageOfChatDeleteIcon != null)\r\n        return imageOfChatDeleteIcon;\r\n    int size = scaleSize(17);\r\n    imageOfChatDeleteIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "650",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfTwoHandedIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawTwoHandedIcon(canvas);\r\n    return imageOfTwoHandedIcon;\r\n}",
  "context" : "public static Bitmap imageOfTwoHandedIcon() {\r\n    if (imageOfTwoHandedIcon != null)\r\n        return imageOfTwoHandedIcon;\r\n    int size = scaleSize(15);\r\n    imageOfTwoHandedIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfTwoHandedIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawTwoHandedIcon(canvas);\r\n    return imageOfTwoHandedIcon;\r\n}",
  "start_lineno" : "639",
  "methodName" : "imageOfTwoHandedIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1123",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfTwoHandedIcon() {\r\n    if (imageOfTwoHandedIcon != null)\r\n        return imageOfTwoHandedIcon;\r\n    int size = scaleSize(15);\r\n    imageOfTwoHandedIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "659",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfCheckmark);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawCheckmark(canvas, checkmarkColor, percentage);\r\n    return imageOfCheckmark;\r\n}",
  "context" : "public static Bitmap imageOfCheckmark(int checkmarkColor, float percentage) {\r\n    Bitmap imageOfCheckmark = Bitmap.createBitmap(scaleSize(16), scaleSize(12), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfCheckmark);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawCheckmark(canvas, checkmarkColor, percentage);\r\n    return imageOfCheckmark;\r\n}",
  "start_lineno" : "652",
  "methodName" : "imageOfCheckmark",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1124",
  "prompt" : "import android.graphics.Color\nimport android.graphics.Bitmap\npublic static Bitmap imageOfCheckmark(int checkmarkColor, float percentage) {\r\n    Bitmap imageOfCheckmark = Bitmap.createBitmap(scaleSize(16), scaleSize(12), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "673",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfAlertIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAlertIcon(canvas);\r\n    return imageOfAlertIcon;\r\n}",
  "context" : "public static Bitmap imageOfAlertIcon() {\r\n    if (imageOfAlertIcon != null)\r\n        return imageOfAlertIcon;\r\n    int size = scaleSize(16);\r\n    imageOfAlertIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfAlertIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawAlertIcon(canvas);\r\n    return imageOfAlertIcon;\r\n}",
  "start_lineno" : "662",
  "methodName" : "imageOfAlertIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1125",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfAlertIcon() {\r\n    if (imageOfAlertIcon != null)\r\n        return imageOfAlertIcon;\r\n    int size = scaleSize(16);\r\n    imageOfAlertIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "687",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfBuffIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawBuffIcon(canvas);\r\n    return imageOfBuffIcon;\r\n}",
  "context" : "public static Bitmap imageOfBuffIcon() {\r\n    if (imageOfBuffIcon != null)\r\n        return imageOfBuffIcon;\r\n    int size = scaleSize(15);\r\n    imageOfBuffIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfBuffIcon);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawBuffIcon(canvas);\r\n    return imageOfBuffIcon;\r\n}",
  "start_lineno" : "676",
  "methodName" : "imageOfBuffIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1126",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfBuffIcon() {\r\n    if (imageOfBuffIcon != null)\r\n        return imageOfBuffIcon;\r\n    int size = scaleSize(15);\r\n    imageOfBuffIcon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "697",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfTaskDifficultyStars);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawTaskDifficultyStars(canvas, taskTintColor, difficulty, isActive);\r\n    return imageOfTaskDifficultyStars;\r\n}",
  "context" : "public static Bitmap imageOfTaskDifficultyStars(int taskTintColor, float difficulty, boolean isActive) {\r\n    int size = scaleSize(36);\r\n    Bitmap imageOfTaskDifficultyStars = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfTaskDifficultyStars);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawTaskDifficultyStars(canvas, taskTintColor, difficulty, isActive);\r\n    return imageOfTaskDifficultyStars;\r\n}",
  "start_lineno" : "689",
  "methodName" : "imageOfTaskDifficultyStars",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1127",
  "prompt" : "import android.graphics.Color\nimport android.graphics.Bitmap\npublic static Bitmap imageOfTaskDifficultyStars(int taskTintColor, float difficulty, boolean isActive) {\r\n    int size = scaleSize(36);\r\n    Bitmap imageOfTaskDifficultyStars = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "708",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfHabitControlMinus);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStats(canvas);\r\n    return imageOfHabitControlMinus;\r\n}",
  "context" : "public static Bitmap imageOfStats() {\r\n    int width = scaleSize(30);\r\n    int height = scaleSize(30);\r\n    Bitmap imageOfHabitControlMinus = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfHabitControlMinus);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawStats(canvas);\r\n    return imageOfHabitControlMinus;\r\n}",
  "start_lineno" : "699",
  "methodName" : "imageOfStats",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1128",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfStats() {\r\n    int width = scaleSize(30);\r\n    int height = scaleSize(30);\r\n    Bitmap imageOfHabitControlMinus = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "717",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGuildCrest);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrest(canvas, isOwner, isPublic, memberCount, memberCountLabel);\r\n    return imageOfGuildCrest;\r\n}",
  "context" : "public static Bitmap imageOfGuildCrest(boolean isOwner, boolean isPublic, float memberCount, String memberCountLabel) {\r\n    Bitmap imageOfGuildCrest = Bitmap.createBitmap(scaleSize(40), scaleSize(38), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGuildCrest);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrest(canvas, isOwner, isPublic, memberCount, memberCountLabel);\r\n    return imageOfGuildCrest;\r\n}",
  "start_lineno" : "710",
  "methodName" : "imageOfGuildCrest",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1129",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGuildCrest(boolean isOwner, boolean isPublic, float memberCount, String memberCountLabel) {\r\n    Bitmap imageOfGuildCrest = Bitmap.createBitmap(scaleSize(40), scaleSize(38), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "726",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGuildCrestMedium);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrestMedium(canvas, memberCount);\r\n    return imageOfGuildCrestMedium;\r\n}",
  "context" : "public static Bitmap imageOfGuildCrestMedium(float memberCount) {\r\n    Bitmap imageOfGuildCrestMedium = Bitmap.createBitmap(scaleSize(30), scaleSize(34), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGuildCrestMedium);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrestMedium(canvas, memberCount);\r\n    return imageOfGuildCrestMedium;\r\n}",
  "start_lineno" : "719",
  "methodName" : "imageOfGuildCrestMedium",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1130",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGuildCrestMedium(float memberCount) {\r\n    Bitmap imageOfGuildCrestMedium = Bitmap.createBitmap(scaleSize(30), scaleSize(34), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static float displayDensity = 1.0f;\nprivate static Bitmap imageOfExperience = null;\nprivate static Bitmap imageOfMagic = null;\nprivate static Bitmap imageOfMagicLarge = null;\nprivate static Bitmap imageOfGold = null;\nprivate static Bitmap imageOfGem = null;\nprivate static Bitmap imageOfHourglass = null;\nprivate static Bitmap imageOfHourglassLarge = null;\nprivate static Bitmap imageOfExperienceReward = null;\nprivate static Bitmap imageOfGoldReward = null;\nprivate static Bitmap imageOfHeartDarkBg = null;\nprivate static Bitmap imageOfHeartLightBg = null;\nprivate static Bitmap imageOfHeartLarge = null;\nprivate static Bitmap imageOfStarSmall = null;\nprivate static Bitmap imageOfStarLarge = null;\nprivate static Bitmap imageOfStarMedium = null;\nprivate static Bitmap imageOfPinnedItem = null;\nprivate static Bitmap imageOfPinItem = null;\nprivate static Bitmap imageOfUnpinItem = null;\nprivate static Bitmap imageOfItemIndicatorLimited = null;\nprivate static Bitmap imageOfGem_36 = null;\nprivate static Bitmap imageOfWarriorLightBg = null;\nprivate static Bitmap imageOfRogueLightBg = null;\nprivate static Bitmap imageOfHealerLightBg = null;\nprivate static Bitmap imageOfMageLightBg = null;\nprivate static Bitmap imageOfHourglassShop = null;\nprivate static Bitmap imageOfAttributeSparklesLeft = null;\nprivate static Bitmap imageOfAttributeSparklesRight = null;\nprivate static Bitmap imageOfAttributeAllocateButton = null;\nprivate static Bitmap imageOfInfoIcon = null;\nprivate static Bitmap imageOfDamage = null;\nprivate static Bitmap imageOfRageStrikeInactive = null;\nprivate static Bitmap imageOfRage = null;\nprivate static Bitmap imageOfParticipantsIcon = null;\nprivate static Bitmap imageOfChatReplyIcon = null;\nprivate static Bitmap imageOfChatCopyIcon = null;\nprivate static Bitmap imageOfChatReportIcon = null;\nprivate static Bitmap imageOfChatDeleteIcon = null;\nprivate static Bitmap imageOfTwoHandedIcon = null;\nprivate static Bitmap imageOfAlertIcon = null;\nprivate static Bitmap imageOfBuffIcon = null;",
  "app_type" : "life",
  "end_lineno" : "735",
  "ground_truth" : "    Canvas canvas = new Canvas(imageOfGuildCrestSmall);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrestSmall(canvas, memberCount);\r\n    return imageOfGuildCrestSmall;\r\n}",
  "context" : "public static Bitmap imageOfGuildCrestSmall(float memberCount) {\r\n    Bitmap imageOfGuildCrestSmall = Bitmap.createBitmap(scaleSize(16), scaleSize(16), Bitmap.Config.ARGB_8888);\r\n    Canvas canvas = new Canvas(imageOfGuildCrestSmall);\r\n    canvas.scale(displayDensity, displayDensity);\r\n    HabiticaIcons.drawGuildCrestSmall(canvas, memberCount);\r\n    return imageOfGuildCrestSmall;\r\n}",
  "start_lineno" : "728",
  "methodName" : "imageOfGuildCrestSmall",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIconsHelper.java",
  "task_id" : "habitica-android/1131",
  "prompt" : "import android.graphics.Bitmap\npublic static Bitmap imageOfGuildCrestSmall(float memberCount) {\r\n    Bitmap imageOfGuildCrestSmall = Bitmap.createBitmap(scaleSize(16), scaleSize(16), Bitmap.Config.ARGB_8888);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "        binding.snackbarTitle.visibility = if (title != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "context" : "fun setTitle(title: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarTitle.text = title\r\n        binding.snackbarTitle.visibility = if (title != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "start_lineno" : "31",
  "methodName" : "setTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1132",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nfun setTitle(title: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarTitle.text = title\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        binding.snackbarText.visibility = if (text != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "context" : "fun setText(text: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarText.text = text\r\n        binding.snackbarText.visibility = if (text != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "start_lineno" : "37",
  "methodName" : "setText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1133",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nfun setText(text: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarText.text = text\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        binding.snackbarTitle.setTextColor(color)\r\n        return this\r\n    }",
  "context" : "fun setTitleColor(color: Int): HabiticaSnackbar {\r\n        binding.snackbarTitle.setTextColor(color)\r\n        return this\r\n    }",
  "start_lineno" : "43",
  "methodName" : "setTitleColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1134",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nfun setTitleColor(color: Int): HabiticaSnackbar {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "51",
  "ground_truth" : "        binding.snackbarText.setTextColor(color)\r\n        return this\r\n    }",
  "context" : "fun setTextColor(color: Int): HabiticaSnackbar {\r\n        binding.snackbarText.setTextColor(color)\r\n        return this\r\n    }",
  "start_lineno" : "48",
  "methodName" : "setTextColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1135",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nfun setTextColor(color: Int): HabiticaSnackbar {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "62",
  "ground_truth" : "        binding.rightIconView.setImageDrawable(icon)\r\n        binding.rightTextView.setTextColor(textColor)\r\n        binding.rightTextView.text = text\r\n        return this\r\n    }",
  "context" : "fun setRightDiff(icon: Drawable?, textColor: Int, text: String?): HabiticaSnackbar {\r\n        if (icon == null) {\r\n            return this\r\n        }\r\n        binding.rightView.visibility = View.VISIBLE\r\n        binding.rightIconView.setImageDrawable(icon)\r\n        binding.rightTextView.setTextColor(textColor)\r\n        binding.rightTextView.text = text\r\n        return this\r\n    }",
  "start_lineno" : "53",
  "methodName" : "setRightDiff",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1136",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun setRightDiff(icon: Drawable?, textColor: Int, text: String?): HabiticaSnackbar {\r\n        if (icon == null) {\r\n            return this\r\n        }\r\n        binding.rightView.visibility = View.VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "        binding.leftImageView.visibility = if (image != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "context" : "fun setLeftIcon(image: Drawable?): HabiticaSnackbar {\r\n        binding.leftImageView.setImageDrawable(image)\r\n        binding.leftImageView.visibility = if (image != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }",
  "start_lineno" : "64",
  "methodName" : "setLeftIcon",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1137",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun setLeftIcon(image: Drawable?): HabiticaSnackbar {\r\n        binding.leftImageView.setImageDrawable(image)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "73",
  "ground_truth" : "        view.setBackgroundColor(color)\r\n        return this\r\n    }",
  "context" : "fun setBackgroundColor(@ColorInt color: Int): HabiticaSnackbar {\r\n        view.setBackgroundColor(color)\r\n        return this\r\n    }",
  "start_lineno" : "70",
  "methodName" : "setBackgroundColor",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1138",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport androidx.annotation.ColorInt\nfun setBackgroundColor(@ColorInt color: Int): HabiticaSnackbar {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        view.setBackgroundColor(ContextCompat.getColor(context, R.color.transparent))\r\n        return this\r\n    }",
  "context" : "fun setBackgroundResource(resourceId: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setBackgroundResource(resourceId)\r\n        view.setBackgroundColor(ContextCompat.getColor(context, R.color.transparent))\r\n        return this\r\n    }",
  "start_lineno" : "75",
  "methodName" : "setBackgroundResource",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1139",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.View\nfun setBackgroundResource(resourceId: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setBackgroundResource(resourceId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "        }\r\n        return this\r\n    }",
  "context" : "private fun setSpecialView(specialView: View?): HabiticaSnackbar {\r\n        if (specialView != null) {\r\n            binding.contentContainer.addView(specialView)\r\n        }\r\n        return this\r\n    }",
  "start_lineno" : "81",
  "methodName" : "setSpecialView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1140",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nprivate fun setSpecialView(specialView: View?): HabiticaSnackbar {\r\n        if (specialView != null) {\r\n            binding.contentContainer.addView(specialView)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "            ViewCompat.animate(content).scaleX(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).alpha(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n        }",
  "context" : " @Suppress(\"SameParameterValue\")\r\n        override fun animateContentIn(delay: Int, duration: Int) {\r\n            content.scaleY = 0f\r\n            content.scaleX = 0f\r\n            ViewCompat.animate(content).scaleY(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).scaleX(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).alpha(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n        }",
  "start_lineno" : "91",
  "methodName" : "animateContentIn",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1141",
  "prompt" : "import androidx.core.view.ViewCompat\nimport android.view.View\n @Suppress(\"SameParameterValue\")\r\n        override fun animateContentIn(delay: Int, duration: Int) {\r\n            content.scaleY = 0f\r\n            content.scaleX = 0f\r\n            ViewCompat.animate(content).scaleY(1f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "112",
  "ground_truth" : "            ViewCompat.animate(content).scaleX(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).alpha(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n        }",
  "context" : "override fun animateContentOut(delay: Int, duration: Int) {\r\n            content.scaleY = 1f\r\n            content.scaleX = 1f\r\n            ViewCompat.animate(content).scaleY(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).scaleX(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n            ViewCompat.animate(content).alpha(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r\n        }",
  "start_lineno" : "103",
  "methodName" : "animateContentOut",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1142",
  "prompt" : "import androidx.core.view.ViewCompat\nimport android.view.View\noverride fun animateContentOut(delay: Int, duration: Int) {\r\n            content.scaleY = 1f\r\n            content.scaleX = 1f\r\n            ViewCompat.animate(content).scaleY(0f).setDuration(duration.toLong()).startDelay =\r\n                delay.toLong()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "130",
  "ground_truth" : "            val viewCallback = ContentViewCallback(content)\r\n            val customSnackbar = HabiticaSnackbar(parent, content, viewCallback)\r\n            customSnackbar.duration = duration\r\n            return customSnackbar\r\n        }",
  "context" : "private fun make(parent: ViewGroup, duration: Int): HabiticaSnackbar {\r\n            val inflater = LayoutInflater.from(parent.context)\r\n            val content = inflater.inflate(R.layout.snackbar_view, parent, false)\r\n            val viewCallback = ContentViewCallback(content)\r\n            val customSnackbar = HabiticaSnackbar(parent, content, viewCallback)\r\n            customSnackbar.duration = duration\r\n            return customSnackbar\r\n        }",
  "start_lineno" : "123",
  "methodName" : "make",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1143",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nprivate fun make(parent: ViewGroup, duration: Int): HabiticaSnackbar {\r\n            val inflater = LayoutInflater.from(parent.context)\r\n            val content = inflater.inflate(R.layout.snackbar_view, parent, false)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "154",
  "ground_truth" : "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "context" : "fun showSnackbar(\r\n            container: ViewGroup,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                null,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r\n                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "start_lineno" : "132",
  "methodName" : "showSnackbar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1144",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                null,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "180",
  "ground_truth" : "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "context" : "fun showSnackbar(\r\n            container: ViewGroup,\r\n            leftImage: Drawable,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                leftImage,\r\n                title,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r\n                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "start_lineno" : "156",
  "methodName" : "showSnackbar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1145",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            leftImage: Drawable,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                leftImage,\r\n                title,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "208",
  "ground_truth" : "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "context" : "fun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            rightIcon: Drawable,\r\n            rightTextColor: Int?,\r\n            rightText: String,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                null,\r\n                rightIcon,\r\n                rightTextColor,\r\n                rightText,\r\n                displayType,\r\n                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "start_lineno" : "182",
  "methodName" : "showSnackbar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1146",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            rightIcon: Drawable,\r\n            rightTextColor: Int?,\r\n            rightText: String,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                null,\r\n                rightIcon,\r\n                rightTextColor,\r\n                rightText,\r\n                displayType,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "234",
  "ground_truth" : "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "context" : "fun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            specialView: View?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                specialView,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r\n                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }",
  "start_lineno" : "210",
  "methodName" : "showSnackbar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1147",
  "prompt" : "import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            specialView: View?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                specialView,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS",
  "app_type" : "life",
  "end_lineno" : "407",
  "ground_truth" : "            rightText,\r\n            displayType,\r\n            isCelebratory\r\n        )\r\n    }",
  "context" : "fun showSnackbar(\r\n        leftImage: Drawable? = null,\r\n        title: CharSequence? = null,\r\n        content: CharSequence? = null,\r\n        specialView: View? = null,\r\n        rightIcon: Drawable? = null,\r\n        rightTextColor: Int? = null,\r\n        rightText: String? = null,\r\n        displayType: HabiticaSnackbar.SnackbarDisplayType = HabiticaSnackbar.SnackbarDisplayType.NORMAL,\r\n        isCelebratory: Boolean = false\r\n    ) {\r\n        HabiticaSnackbar.showSnackbar(\r\n            snackbarContainer(),\r\n            leftImage,\r\n            title,\r\n            content,\r\n            specialView,\r\n            rightIcon,\r\n            rightTextColor,\r\n            rightText,\r\n            displayType,\r\n            isCelebratory\r\n        )\r\n    }",
  "start_lineno" : "384",
  "methodName" : "showSnackbar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt",
  "task_id" : "habitica-android/1148",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n        leftImage: Drawable? = null,\r\n        title: CharSequence? = null,\r\n        content: CharSequence? = null,\r\n        specialView: View? = null,\r\n        rightIcon: Drawable? = null,\r\n        rightTextColor: Int? = null,\r\n        rightText: String? = null,\r\n        displayType: HabiticaSnackbar.SnackbarDisplayType = HabiticaSnackbar.SnackbarDisplayType.NORMAL,\r\n        isCelebratory: Boolean = false\r\n    ) {\r\n        HabiticaSnackbar.showSnackbar(\r\n            snackbarContainer(),\r\n            leftImage,\r\n            title,\r\n            content,\r\n            specialView,\r\n            rightIcon,\r\n            rightTextColor,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var imageView ImageView\nvar textView TextView",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        setAdditionalContentView(view)\r\n\r\n        imageView = view.findViewById(R.id.imageView)\r\n        textView = view.findViewById(R.id.textView)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val inflater = LayoutInflater.from(context)\r\n        val view = inflater.inflate(getLayoutID(), null)\r\n        setAdditionalContentView(view)\r\n\r\n        imageView = view.findViewById(R.id.imageView)\r\n        textView = view.findViewById(R.id.textView)\r\n    }",
  "start_lineno" : "24",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientCurrencyDialog.kt",
  "task_id" : "habitica-android/1149",
  "prompt" : "import android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val inflater = LayoutInflater.from(context)\r\n        val view = inflater.inflate(getLayoutID(), null)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar insufficientGemsUseCase InsufficientGemsUseCase",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        textView.setText(R.string.insufficientGems)\r\n        addButton(R.string.see_other_options, true) { _, _ -> MainNavigationController.navigate(R.id.gemPurchaseActivity, bundleOf(Pair(\"openSubscription\", false))) }\r\n        addCloseButton()\r\n        contentView.setPadding(0, 0, 0, 0)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        textView.setText(R.string.insufficientGems)\r\n        addButton(R.string.see_other_options, true) { _, _ -> MainNavigationController.navigate(R.id.gemPurchaseActivity, bundleOf(Pair(\"openSubscription\", false))) }\r\n        addCloseButton()\r\n        contentView.setPadding(0, 0, 0, 0)\r\n    }",
  "start_lineno" : "58",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientGemsDialog.kt",
  "task_id" : "habitica-android/1150",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var configManager AppConfigManager\nvar purchaseHandler PurchaseHandler\nvar insufficientGemsUseCase InsufficientGemsUseCase",
  "app_type" : "life",
  "end_lineno" : "107",
  "ground_truth" : "        purchaseHandler.stopListening()\r\n        super.onDetachedFromWindow()\r\n    }",
  "context" : "override fun onDetachedFromWindow() {\r\n        purchaseHandler.stopListening()\r\n        super.onDetachedFromWindow()\r\n    }",
  "start_lineno" : "104",
  "methodName" : "onDetachedFromWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientGemsDialog.kt",
  "task_id" : "habitica-android/1151",
  "prompt" : "override fun onDetachedFromWindow() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "16",
  "ground_truth" : "        textView.text = context.getString(R.string.insufficientGold)\r\n        setTitle(R.string.insufficientGoldTitle)\r\n\r\n        addButton(R.string.take_me_back, true)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageResource(R.drawable.gold_multiple)\r\n        textView.text = context.getString(R.string.insufficientGold)\r\n        setTitle(R.string.insufficientGoldTitle)\r\n\r\n        addButton(R.string.take_me_back, true)\r\n    }",
  "start_lineno" : "9",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientGoldDialog.kt",
  "task_id" : "habitica-android/1152",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageResource(R.drawable.gold_multiple)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "19",
  "ground_truth" : "        textView.setText(R.string.insufficientHourglasses)\r\n\r\n        addButton(R.string.get_hourglasses, true) { _, _ -> MainNavigationController.navigate(R.id.gemPurchaseActivity, bundleOf(Pair(\"openSubscription\", true))) }\r\n        addCloseButton()\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageBitmap(HabiticaIconsHelper.imageOfHourglassShop())\r\n        textView.setText(R.string.insufficientHourglasses)\r\n\r\n        addButton(R.string.get_hourglasses, true) { _, _ -> MainNavigationController.navigate(R.id.gemPurchaseActivity, bundleOf(Pair(\"openSubscription\", true))) }\r\n        addCloseButton()\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientHourglassesDialog.kt",
  "task_id" : "habitica-android/1153",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.HabiticaIconsHelper\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageBitmap(HabiticaIconsHelper.imageOfHourglassShop())\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "13",
  "ground_truth" : "        textView.text = context.getString(R.string.insufficientSubscriberGems)\r\n        addButton(R.string.take_me_back, true)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageResource(R.drawable.subscriber_gem_cap)\r\n        textView.text = context.getString(R.string.insufficientSubscriberGems)\r\n        addButton(R.string.take_me_back, true)\r\n    }",
  "start_lineno" : "8",
  "methodName" : "onCreate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientSubscriberGemsDialog.kt",
  "task_id" : "habitica-android/1154",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        imageView.setImageResource(R.drawable.subscriber_gem_cap)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isScrollable",
  "app_type" : "life",
  "end_lineno" : "18",
  "ground_truth" : "            if (isScrollable) super.onTouchEvent(ev) else false\r\n        } else {\r\n            super.onTouchEvent(ev)\r\n        }\r\n    }",
  "context" : "override fun onTouchEvent(ev: MotionEvent): Boolean {\r\n        return if (ev.action == MotionEvent.ACTION_DOWN) {\r\n            if (isScrollable) super.onTouchEvent(ev) else false\r\n        } else {\r\n            super.onTouchEvent(ev)\r\n        }\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onTouchEvent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LockableScrollView.kt",
  "task_id" : "habitica-android/1155",
  "prompt" : "import android.view.MotionEvent\noverride fun onTouchEvent(ev: MotionEvent): Boolean {\r\n        return if (ev.action == MotionEvent.ACTION_DOWN) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var isScrollable",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "            false\r\n        } else {\r\n            super.onInterceptTouchEvent(ev)\r\n        }\r\n    }",
  "context" : "override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        return if (!isScrollable) {\r\n            false\r\n        } else {\r\n            super.onInterceptTouchEvent(ev)\r\n        }\r\n    }",
  "start_lineno" : "20",
  "methodName" : "onInterceptTouchEvent",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LockableScrollView.kt",
  "task_id" : "habitica-android/1156",
  "prompt" : "import android.view.MotionEvent\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        return if (!isScrollable) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "        rightCloudView = findViewById(R.id.right_cloud_view)\r\n        starViews = ArrayList()\r\n        generateStars()\r\n        animateClouds()\r\n    }",
  "context" : "override fun onFinishInflate() {\r\n        super.onFinishInflate()\r\n        leftCloudView = findViewById(R.id.left_cloud_view)\r\n        rightCloudView = findViewById(R.id.right_cloud_view)\r\n        starViews = ArrayList()\r\n        generateStars()\r\n        animateClouds()\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onFinishInflate",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1157",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onFinishInflate() {\r\n        super.onFinishInflate()\r\n        leftCloudView = findViewById(R.id.left_cloud_view)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "79",
  "ground_truth" : "        params.width = viewWidth\r\n        params.height = viewHeight\r\n        this.layoutParams = params\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\r\n    }",
  "context" : "override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\r\n        this.viewWidth = MeasureSpec.getSize(widthMeasureSpec)\r\n        this.setMeasuredDimension(viewWidth, viewHeight)\r\n        params.width = viewWidth\r\n        params.height = viewHeight\r\n        this.layoutParams = params\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\r\n    }",
  "start_lineno" : "72",
  "methodName" : "onMeasure",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1158",
  "prompt" : "override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\r\n        this.viewWidth = MeasureSpec.getSize(widthMeasureSpec)\r\n        this.setMeasuredDimension(viewWidth, viewHeight)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "84",
  "ground_truth" : "        super.onLayout(changed, l, t, r, b)\r\n        updateStarLayoutParams()\r\n    }",
  "context" : "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r\n        super.onLayout(changed, l, t, r, b)\r\n        updateStarLayoutParams()\r\n    }",
  "start_lineno" : "81",
  "methodName" : "onLayout",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1159",
  "prompt" : "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "        repeat((0 until largeCount).count()) { generateStar(2) }\r\n        repeat((0 until mediumCount).count()) { generateStar(1) }\r\n        repeat((0 until smallCount).count()) { generateStar(0) }\r\n        requestLayout()\r\n    }",
  "context" : "private fun generateStars(largeCount: Int, mediumCount: Int, smallCount: Int) {\r\n        removeStarViews()\r\n        repeat((0 until largeCount).count()) { generateStar(2) }\r\n        repeat((0 until mediumCount).count()) { generateStar(1) }\r\n        repeat((0 until smallCount).count()) { generateStar(0) }\r\n        requestLayout()\r\n    }",
  "start_lineno" : "90",
  "methodName" : "generateStars",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1160",
  "prompt" : "import android.view.View\nprivate fun generateStars(largeCount: Int, mediumCount: Int, smallCount: Int) {\r\n        removeStarViews()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "103",
  "ground_truth" : "            starViews?.clear()\r\n        }\r\n    }",
  "context" : "private fun removeStarViews() {\r\n        if ((starViews?.size ?: 0) > 0) {\r\n            starViews?.forEach { this.removeView(it) }\r\n            starViews?.clear()\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "removeStarViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1161",
  "prompt" : "import android.view.View\nprivate fun removeStarViews() {\r\n        if ((starViews?.size ?: 0) > 0) {\r\n            starViews?.forEach { this.removeView(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "117",
  "ground_truth" : "            this.addView(starView, 0, starParams)\r\n        } else {\r\n            this.addView(starView, 0)\r\n        }\r\n    }",
  "context" : "private fun generateStar(size: Int) {\r\n        val starView = StarView(context)\r\n        starView.setStarSize(size)\r\n        if (random.nextInt(10) > 2) {\r\n            starView.setBlinkDurations(listOf(blinkDuration, blinkDuration, blinkDuration))\r\n        }\r\n        starViews?.add(starView)\r\n        if (viewWidth > 0 && viewHeight > 0) {\r\n            this.addView(starView, 0, starParams)\r\n        } else {\r\n            this.addView(starView, 0)\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "generateStar",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1162",
  "prompt" : "import android.view.View\nprivate fun generateStar(size: Int) {\r\n        val starView = StarView(context)\r\n        starView.setStarSize(size)\r\n        if (random.nextInt(10) > 2) {\r\n            starView.setBlinkDurations(listOf(blinkDuration, blinkDuration, blinkDuration))\r\n        }\r\n        starViews?.add(starView)\r\n        if (viewWidth > 0 && viewHeight > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val random Random\nvar leftCloudView ImageView\nvar rightCloudView ImageView\nvar starViews MutableList<StarView>?\nvar viewWidth Int\nval viewHeight Int\nvar didLayoutStars\nvar params\nval blinkDuration Int\nval starParams LayoutParams\nval SIZE_FACTOR\nval STAR_SIZE",
  "app_type" : "life",
  "end_lineno" : "127",
  "ground_truth" : "        for (view in starViews ?: emptyList()) {\r\n            view.layoutParams = starParams\r\n        }\r\n        didLayoutStars = true\r\n    }",
  "context" : "private fun updateStarLayoutParams() {\r\n        if (viewWidth <= 0 || viewHeight <= 0 || didLayoutStars || starViews?.size == 0) {\r\n            return\r\n        }\r\n        for (view in starViews ?: emptyList()) {\r\n            view.layoutParams = starParams\r\n        }\r\n        didLayoutStars = true\r\n    }",
  "start_lineno" : "119",
  "methodName" : "updateStarLayoutParams",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt",
  "task_id" : "habitica-android/1163",
  "prompt" : "import android.view.View\nprivate fun updateStarLayoutParams() {\r\n        if (viewWidth <= 0 || viewHeight <= 0 || didLayoutStars || starViews?.size == 0) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var blinkDurations List<Int>?\nvar blinkIndex",
  "app_type" : "life",
  "end_lineno" : "36",
  "ground_truth" : "            2 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarLarge())\r\n            }\r\n        }\r\n    }",
  "context" : "fun setStarSize(size: Int) {\r\n        when (size) {\r\n            0 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarSmall())\r\n            }\r\n            1 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarMedium())\r\n            }\r\n            2 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarLarge())\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "24",
  "methodName" : "setStarSize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\StarView.kt",
  "task_id" : "habitica-android/1164",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.HabiticaIconsHelper\nfun setStarSize(size: Int) {\r\n        when (size) {\r\n            0 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarSmall())\r\n            }\r\n            1 -> {\r\n                this.setImageBitmap(HabiticaIconsHelper.imageOfStarMedium())\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var blinkDurations List<Int>?\nvar blinkIndex",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "        this.blinkDurations = blinkDurations\r\n        runBlink()\r\n    }",
  "context" : "fun setBlinkDurations(blinkDurations: List<Int>) {\r\n        this.blinkDurations = blinkDurations\r\n        runBlink()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "setBlinkDurations",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\StarView.kt",
  "task_id" : "habitica-android/1165",
  "prompt" : "fun setBlinkDurations(blinkDurations: List<Int>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar onAddListener\nval measuredTitleWidth Int\nvar icon Drawable?\nvar title String?",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        layoutParams?.width = width\r\n        binding.titleView.layoutParams = layoutParams\r\n    }",
  "context" : "fun setTitleWidth(width: Int) {\r\n        val layoutParams = binding.titleView.layoutParams as? LayoutParams\r\n        layoutParams?.width = width\r\n        binding.titleView.layoutParams = layoutParams\r\n    }",
  "start_lineno" : "41",
  "methodName" : "setTitleWidth",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\navigation\\BottomNavigationSubmenuItem.kt",
  "task_id" : "habitica-android/1166",
  "prompt" : "fun setTitleWidth(width: Int) {\r\n        val layoutParams = binding.titleView.layoutParams as? LayoutParams\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar isShowingSubmenu Boolean\nvar selectedPosition Int\nvar listener HabiticaBottomNavigationViewListener?\nvar activeTaskType TaskType\nvar canAddTasks\nval barHeight Int",
  "app_type" : "life",
  "end_lineno" : "243",
  "ground_truth" : "            R.id.todos_tab -> binding.todosTab\r\n            R.id.rewards_tab -> binding.rewardsTab\r\n            else -> null\r\n        }\r\n    }",
  "context" : "fun tabWithId(id: Int): BottomNavigationItem? {\r\n        return when (id) {\r\n            R.id.habits_tab -> binding.habitsTab\r\n            R.id.dailies_tab -> binding.dailiesTab\r\n            R.id.todos_tab -> binding.todosTab\r\n            R.id.rewards_tab -> binding.rewardsTab\r\n            else -> null\r\n        }\r\n    }",
  "start_lineno" : "235",
  "methodName" : "tabWithId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\navigation\\HabiticaBottomNavigationView.kt",
  "task_id" : "habitica-android/1167",
  "prompt" : "import com.habitrpg.android.habitica.R\nfun tabWithId(id: Int): BottomNavigationItem? {\r\n        return when (id) {\r\n            R.id.habits_tab -> binding.habitsTab\r\n            R.id.dailies_tab -> binding.dailiesTab\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar isShowingSubmenu Boolean\nvar selectedPosition Int\nvar listener HabiticaBottomNavigationViewListener?\nvar activeTaskType TaskType\nvar canAddTasks\nval barHeight Int",
  "app_type" : "life",
  "end_lineno" : "250",
  "ground_truth" : "        binding.todosTab.isActive = activeTaskType == TaskType.TODO\r\n        binding.rewardsTab.isActive = activeTaskType == TaskType.REWARD\r\n    }",
  "context" : "private fun updateItemSelection() {\r\n        binding.habitsTab.isActive = activeTaskType == TaskType.HABIT\r\n        binding.dailiesTab.isActive = activeTaskType == TaskType.DAILY\r\n        binding.todosTab.isActive = activeTaskType == TaskType.TODO\r\n        binding.rewardsTab.isActive = activeTaskType == TaskType.REWARD\r\n    }",
  "start_lineno" : "245",
  "methodName" : "updateItemSelection",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\navigation\\HabiticaBottomNavigationView.kt",
  "task_id" : "habitica-android/1168",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nprivate fun updateItemSelection() {\r\n        binding.habitsTab.isActive = activeTaskType == TaskType.HABIT\r\n        binding.dailiesTab.isActive = activeTaskType == TaskType.DAILY\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "                view.bitmap = null\r\n            }\r\n        }\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PixelArtView(\r\n    imageName: String?,\r\n    modifier: Modifier = Modifier,\r\n    imageFormat: String? = null\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r\n        update = { view ->\r\n            if (imageName != null) {\r\n                view.loadImage(imageName, imageFormat)\r\n            } else {\r\n                view.bitmap = null\r\n            }\r\n        }\r\n    )\r\n}",
  "start_lineno" : "10",
  "methodName" : "PixelArtView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\PixelArtView.kt",
  "task_id" : "habitica-android/1169",
  "prompt" : "import com.habitrpg.common.habitica.views.PixelArtView\nimport com.habitrpg.common.habitica.extensions.loadImage\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PixelArtView(\r\n    imageName: String?,\r\n    modifier: Modifier = Modifier,\r\n    imageFormat: String? = null\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r\n        update = { view ->\r\n            if (imageName != null) {\r\n                view.loadImage(imageName, imageFormat)\r\n            } else {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "46",
  "ground_truth" : "        update = { view ->\r\n            view.bitmap = bitmap.asAndroidBitmap()\r\n        }\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PixelArtView(\r\n    bitmap: ImageBitmap,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r\n        update = { view ->\r\n            view.bitmap = bitmap.asAndroidBitmap()\r\n        }\r\n    )\r\n}",
  "start_lineno" : "31",
  "methodName" : "PixelArtView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\PixelArtView.kt",
  "task_id" : "habitica-android/1170",
  "prompt" : "import com.habitrpg.common.habitica.views.PixelArtView\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PixelArtView(\r\n    bitmap: ImageBitmap,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "88",
  "ground_truth" : "        LazyColumn {\r\n        }\r\n        HabiticaPullRefreshIndicator(isInitial = false, isRefreshing = true, state = state)\r\n    }\r\n}",
  "context" : "\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@Preview\r\n@Composable\r\nprivate fun Preview() {\r\n    val state = rememberPullRefreshState(refreshing = true, onRefresh = { })\r\n    Box(Modifier.pullRefresh(state)) {\r\n        LazyColumn {\r\n        }\r\n        HabiticaPullRefreshIndicator(isInitial = false, isRefreshing = true, state = state)\r\n    }\r\n}",
  "start_lineno" : "77",
  "methodName" : "Preview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\progress\\HabiticaPullRefreshIndicator.kt",
  "task_id" : "habitica-android/1171",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.pullrefresh.rememberPullRefreshState\nimport androidx.compose.material.pullrefresh.pullRefresh\nimport androidx.compose.material.pullrefresh.PullRefreshState\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@Preview\r\n@Composable\r\nprivate fun Preview() {\r\n    val state = rememberPullRefreshState(refreshing = true, onRefresh = { })\r\n    Box(Modifier.pullRefresh(state)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "138",
  "ground_truth" : "        endDate.getShortRemainingString()\r\n    ).uppercase()\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun buildString(\r\n    value: Int,\r\n    endDate: Date,\r\n    formatString: Int\r\n): String {\r\n    return stringResource(\r\n        formatString,\r\n        endDate.getShortRemainingString()\r\n    ).uppercase()\r\n}",
  "start_lineno" : "127",
  "methodName" : "buildString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\BirthdayMenuView.kt",
  "task_id" : "habitica-android/1172",
  "prompt" : "import java.util.Date\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun buildString(\r\n    value: Int,\r\n    endDate: Date,\r\n    formatString: Int\r\n): String {\r\n    return stringResource(\r\n        formatString,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var canClose Boolean\nvar binding PromoMenuBinding",
  "app_type" : "life",
  "end_lineno" : "54",
  "ground_truth" : "        binding.leftImageView.setImageDrawable(leftDrawable)\r\n        binding.rightImageView.setImageDrawable(rightDrawable)\r\n    }",
  "context" : "fun setDecoration(leftDrawable: Drawable?, rightDrawable: Drawable?) {\r\n        binding.leftImageView.setImageDrawable(leftDrawable)\r\n        binding.rightImageView.setImageDrawable(rightDrawable)\r\n    }",
  "start_lineno" : "51",
  "methodName" : "setDecoration",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\PromoMenuView.kt",
  "task_id" : "habitica-android/1173",
  "prompt" : "import android.graphics.drawable.Drawable\nfun setDecoration(leftDrawable: Drawable?, rightDrawable: Drawable?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var canClose Boolean\nvar binding PromoMenuBinding",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun setImage(view: ImageView, drawable: Drawable?) {\r\n        if (drawable != null) {\r\n            view.setImageDrawable(drawable)\r\n            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "setImage",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\PromoMenuView.kt",
  "task_id" : "habitica-android/1174",
  "prompt" : "import android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nprivate fun setImage(view: ImageView, drawable: Drawable?) {\r\n        if (drawable != null) {\r\n            view.setImageDrawable(drawable)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var canClose Boolean\nvar binding PromoMenuBinding",
  "app_type" : "life",
  "end_lineno" : "72",
  "ground_truth" : "            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun setText(view: TextView, text: String?) {\r\n        if (text != null) {\r\n            view.text = text\r\n            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "65",
  "methodName" : "setText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\PromoMenuView.kt",
  "task_id" : "habitica-android/1175",
  "prompt" : "import android.widget.TextView\nimport android.view.View\nprivate fun setText(view: TextView, text: String?) {\r\n        if (text != null) {\r\n            view.text = text\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val icon Drawable?\nval textView TextView",
  "app_type" : "life",
  "end_lineno" : "50",
  "ground_truth" : "        if (icon != null) {\r\n            icon.setTintWith(color, PorterDuff.Mode.MULTIPLY)\r\n            textView.setCompoundDrawablesWithIntrinsicBounds(null, icon, null, null)\r\n        }\r\n    }",
  "context" : "fun setActive(active: Boolean) {\r\n        val color: Int = if (active) {\r\n            ContextCompat.getColor(context, R.color.white)\r\n        } else {\r\n            ContextCompat.getColor(context, R.color.white_50_alpha)\r\n        }\r\n        textView.setTextColor(color)\r\n        if (icon != null) {\r\n            icon.setTintWith(color, PorterDuff.Mode.MULTIPLY)\r\n            textView.setCompoundDrawablesWithIntrinsicBounds(null, icon, null, null)\r\n        }\r\n    }",
  "start_lineno" : "39",
  "methodName" : "setActive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\setup\\AvatarCategoryView.kt",
  "task_id" : "habitica-android/1176",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.core.content.ContextCompat\nimport android.view.View\nimport android.content.Context\nfun setActive(active: Boolean) {\r\n        val color: Int = if (active) {\r\n            ContextCompat.getColor(context, R.color.white)\r\n        } else {\r\n            ContextCompat.getColor(context, R.color.white_50_alpha)\r\n        }\r\n        textView.setTextColor(color)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val customHeader View\nval currencyView CurrencyViews\nval limitedTextView TextView\nval buyButton View\nval priceLabel CurrencyView\nval buyLabel TextView\nvar amountErrorLabel TextView?\nval pinButton LinearLayout\nval pinIcon ImageView\nval pinTextView TextView\nvar purchaseQuantity\nvar purchaseCardAction\nvar onShopNeedsRefresh\nvar shopItem ShopItem\nvar limitedTextViewJob Job?\nvar shopIdentifier String?\nvar user User?\nvar isPinned Boolean",
  "app_type" : "life",
  "end_lineno" : "166",
  "ground_truth" : "            is SnackbarActivity -> context\r\n            is ViewComponentManager.FragmentContextWrapper -> findSnackBarActivity(context.baseContext)\r\n            else -> (context.applicationContext as? HabiticaBaseApplication)?.currentActivity?.get() as? SnackbarActivity\r\n        }\r\n    }",
  "context" : "private fun findSnackBarActivity(context: Context): SnackbarActivity? {\r\n        return when (context) {\r\n            is SnackbarActivity -> context\r\n            is ViewComponentManager.FragmentContextWrapper -> findSnackBarActivity(context.baseContext)\r\n            else -> (context.applicationContext as? HabiticaBaseApplication)?.currentActivity?.get() as? SnackbarActivity\r\n        }\r\n    }",
  "start_lineno" : "160",
  "methodName" : "findSnackBarActivity",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt",
  "task_id" : "habitica-android/1177",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport android.content.Context\nimport android.app.Activity\nprivate fun findSnackBarActivity(context: Context): SnackbarActivity? {\r\n        return when (context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val customHeader View\nval currencyView CurrencyViews\nval limitedTextView TextView\nval buyButton View\nval priceLabel CurrencyView\nval buyLabel TextView\nvar amountErrorLabel TextView?\nval pinButton LinearLayout\nval pinIcon ImageView\nval pinTextView TextView\nvar purchaseQuantity\nvar purchaseCardAction\nvar onShopNeedsRefresh\nvar shopItem ShopItem\nvar limitedTextViewJob Job?\nvar shopIdentifier String?\nvar user User?\nvar isPinned Boolean",
  "app_type" : "life",
  "end_lineno" : "200",
  "ground_truth" : "            return\r\n        }\r\n\r\n        setLimitedTextView()\r\n    }",
  "context" : "private fun checkGearClass() {\r\n        if (shopItem.purchaseType == \"gems\") {\r\n            return\r\n        }\r\n\r\n        setLimitedTextView()\r\n    }",
  "start_lineno" : "194",
  "methodName" : "checkGearClass",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt",
  "task_id" : "habitica-android/1178",
  "prompt" : "private fun checkGearClass() {\r\n        if (shopItem.purchaseType == \"gems\") {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val customHeader View\nval currencyView CurrencyViews\nval limitedTextView TextView\nval buyButton View\nval priceLabel CurrencyView\nval buyLabel TextView\nvar amountErrorLabel TextView?\nval pinButton LinearLayout\nval pinIcon ImageView\nval pinTextView TextView\nvar purchaseQuantity\nvar purchaseCardAction\nvar onShopNeedsRefresh\nvar shopItem ShopItem\nvar limitedTextViewJob Job?\nvar shopIdentifier String?\nvar user User?\nvar isPinned Boolean",
  "app_type" : "life",
  "end_lineno" : "341",
  "ground_truth" : "        limitedTextViewJob?.cancel()\r\n        super.dismiss()\r\n    }",
  "context" : "override fun dismiss() {\r\n        userRepository.close()\r\n        inventoryRepository.close()\r\n        limitedTextViewJob?.cancel()\r\n        super.dismiss()\r\n    }",
  "start_lineno" : "336",
  "methodName" : "dismiss",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt",
  "task_id" : "habitica-android/1179",
  "prompt" : "import com.habitrpg.android.habitica.R\noverride fun dismiss() {\r\n        userRepository.close()\r\n        inventoryRepository.close()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val customHeader View\nval currencyView CurrencyViews\nval limitedTextView TextView\nval buyButton View\nval priceLabel CurrencyView\nval buyLabel TextView\nvar amountErrorLabel TextView?\nval pinButton LinearLayout\nval pinIcon ImageView\nval pinTextView TextView\nvar purchaseQuantity\nvar purchaseCardAction\nvar onShopNeedsRefresh\nvar shopItem ShopItem\nvar limitedTextViewJob Job?\nvar shopIdentifier String?\nvar user User?\nvar isPinned Boolean",
  "app_type" : "life",
  "end_lineno" : "478",
  "ground_truth" : "            displayNoRemainingConfirmationDialog()\r\n        } else {\r\n            displaySomeRemainingConfirmationDialog(quantity)\r\n        }\r\n    }",
  "context" : "private fun displayPurchaseConfirmationDialog(quantity: Int) {\r\n        if (quantity == 0) {\r\n            displayNoRemainingConfirmationDialog()\r\n        } else {\r\n            displaySomeRemainingConfirmationDialog(quantity)\r\n        }\r\n    }",
  "start_lineno" : "472",
  "methodName" : "displayPurchaseConfirmationDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt",
  "task_id" : "habitica-android/1180",
  "prompt" : "private fun displayPurchaseConfirmationDialog(quantity: Int) {\r\n        if (quantity == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val customHeader View\nval currencyView CurrencyViews\nval limitedTextView TextView\nval buyButton View\nval priceLabel CurrencyView\nval buyLabel TextView\nvar amountErrorLabel TextView?\nval pinButton LinearLayout\nval pinIcon ImageView\nval pinTextView TextView\nvar purchaseQuantity\nvar purchaseCardAction\nvar onShopNeedsRefresh\nvar shopItem ShopItem\nvar limitedTextViewJob Job?\nvar shopIdentifier String?\nvar user User?\nvar isPinned Boolean",
  "app_type" : "life",
  "end_lineno" : "506",
  "ground_truth" : "            buyItem(purchaseQuantity)\r\n        }\r\n        alert.addCancelButton()\r\n        alert.show()\r\n    }",
  "context" : "private fun displayNoRemainingConfirmationDialog() {\r\n        val alert = HabiticaAlertDialog(context)\r\n        alert.setTitle(R.string.excess_items)\r\n        alert.setMessage(context.getString(R.string.excessItemsNoneLeft, item.text, purchaseQuantity, item.text))\r\n        alert.addButton(context.getString(R.string.purchaseX, purchaseQuantity),\r\n            isPrimary = true,\r\n            isDestructive = false\r\n        ) { _, _ ->\r\n            buyItem(purchaseQuantity)\r\n        }\r\n        alert.addCancelButton()\r\n        alert.show()\r\n    }",
  "start_lineno" : "494",
  "methodName" : "displayNoRemainingConfirmationDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt",
  "task_id" : "habitica-android/1181",
  "prompt" : "import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun displayNoRemainingConfirmationDialog() {\r\n        val alert = HabiticaAlertDialog(context)\r\n        alert.setTitle(R.string.excess_items)\r\n        alert.setMessage(context.getString(R.string.excessItemsNoneLeft, item.text, purchaseQuantity, item.text))\r\n        alert.addButton(context.getString(R.string.purchaseX, purchaseQuantity),\r\n            isPrimary = true,\r\n            isDestructive = false\r\n        ) { _, _ ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "        binding.titleTextView.text = item.text\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "context" : "override fun setItem(item: ShopItem) {\r\n        binding.titleTextView.text = item.text\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "start_lineno" : "20",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogBackgroundContent.kt",
  "task_id" : "habitica-android/1182",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "30",
  "ground_truth" : "\r\n        binding.avatarView.setAvatar(avatar, layerMap)\r\n    }",
  "context" : "fun setAvatarWithBackgroundPreview(avatar: Avatar, item: ShopItem) {\r\n        val layerMap = EnumMap<AvatarView.LayerType, String>(AvatarView.LayerType::class.java)\r\n        layerMap[AvatarView.LayerType.BACKGROUND] = item.imageName?.removePrefix(\"icon_\")\r\n\r\n        binding.avatarView.setAvatar(avatar, layerMap)\r\n    }",
  "start_lineno" : "25",
  "methodName" : "setAvatarWithBackgroundPreview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogBackgroundContent.kt",
  "task_id" : "habitica-android/1183",
  "prompt" : "import java.util.EnumMap\nimport com.habitrpg.shared.habitica.models.Avatar\nimport com.habitrpg.common.habitica.views.AvatarView\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nfun setAvatarWithBackgroundPreview(avatar: Avatar, item: ShopItem) {\r\n        val layerMap = EnumMap<AvatarView.LayerType, String>(AvatarView.LayerType::class.java)\r\n        layerMap[AvatarView.LayerType.BACKGROUND] = item.imageName?.removePrefix(\"icon_\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        } else {\r\n            imageView.loadImage(item.imageName)\r\n        }\r\n        titleTextView.text = item.text\r\n    }",
  "context" : "open fun setItem(item: ShopItem) {\r\n        if (item.path?.contains(\"timeTravelBackgrounds\") == true) {\r\n            imageView.loadImage(item.imageName?.replace(\"icon_\", \"\"))\r\n            val params = imageView.layoutParams\r\n            params.height = 147.dpToPx(context)\r\n            params.width = 140.dpToPx(context)\r\n            imageView.layoutParams = params\r\n        } else {\r\n            imageView.loadImage(item.imageName)\r\n        }\r\n        titleTextView.text = item.text\r\n    }",
  "start_lineno" : "29",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogContent.kt",
  "task_id" : "habitica-android/1184",
  "prompt" : "import com.habitrpg.common.habitica.extensions.loadImage\nimport com.habitrpg.common.habitica.extensions.dpToPx\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nopen fun setItem(item: ShopItem) {\r\n        if (item.path?.contains(\"timeTravelBackgrounds\") == true) {\r\n            imageView.loadImage(item.imageName?.replace(\"icon_\", \"\"))\r\n            val params = imageView.layoutParams\r\n            params.height = 147.dpToPx(context)\r\n            params.width = 140.dpToPx(context)\r\n            imageView.layoutParams = params\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        imageView.loadImage(\"inventory_quest_scroll_\" + questContent.key)\r\n        titleTextView.setText(questContent.text.fromHtml(), TextView.BufferType.SPANNABLE)\r\n    }",
  "context" : "open fun setQuestContentItem(questContent: QuestContent) {\r\n        imageView.loadImage(\"inventory_quest_scroll_\" + questContent.key)\r\n        titleTextView.setText(questContent.text.fromHtml(), TextView.BufferType.SPANNABLE)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "setQuestContentItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogContent.kt",
  "task_id" : "habitica-android/1185",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.QuestContent\nopen fun setQuestContentItem(questContent: QuestContent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "            titleTextView.text = buildCustomizationTitle(item)\r\n        }\r\n    }",
  "context" : "override fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        if (item.text?.isNotBlank() != true) {\r\n            titleTextView.text = buildCustomizationTitle(item)\r\n        }\r\n    }",
  "start_lineno" : "18",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogCustomizationContent.kt",
  "task_id" : "habitica-android/1186",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        if (item.text?.isNotBlank() != true) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "23",
  "ground_truth" : "        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "context" : "override fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "start_lineno" : "20",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogGearContent.kt",
  "task_id" : "habitica-android/1187",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        if (value == 0) {\r\n            labelView?.setTextColor(ContextCompat.getColor(context, R.color.text_dimmed))\r\n            valueTextView?.setTextColor(ContextCompat.getColor(context, R.color.text_dimmed))\r\n        }\r\n    }",
  "context" : "private fun configureFieldsForValue(labelView: TextView?, valueTextView: TextView?, value: Int) {\r\n        valueTextView?.text = \"+$value\"\r\n        if (value == 0) {\r\n            labelView?.setTextColor(ContextCompat.getColor(context, R.color.text_dimmed))\r\n            valueTextView?.setTextColor(ContextCompat.getColor(context, R.color.text_dimmed))\r\n        }\r\n    }",
  "start_lineno" : "39",
  "methodName" : "configureFieldsForValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogGearContent.kt",
  "task_id" : "habitica-android/1188",
  "prompt" : "import android.widget.TextView\nprivate fun configureFieldsForValue(labelView: TextView?, valueTextView: TextView?, value: Int) {\r\n        valueTextView?.text = \"+$value\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "context" : "override fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }",
  "start_lineno" : "23",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogGemsContent.kt",
  "task_id" : "habitica-android/1189",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval imageView PixelArtView\nval titleTextView TextView",
  "app_type" : "life",
  "end_lineno" : "21",
  "ground_truth" : "        binding.notesTextView.text = item.notes\r\n        binding.stepperView.iconDrawable = null\r\n    }",
  "context" : "override fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n        binding.stepperView.iconDrawable = null\r\n    }",
  "start_lineno" : "17",
  "methodName" : "setItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogItemContent.kt",
  "task_id" : "habitica-android/1190",
  "prompt" : "import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hasAcceptedGuidelines Boolean\nvar onCommunityGuidelinesAccepted\nval binding\nvar chatMessages List<ChatMessage>\nvar maxChatLength\nvar sendAction\nvar autocompleteContext String\nvar groupID String?\nvar message String\nvar autocompleteAdapter AutocompleteAdapter?",
  "app_type" : "life",
  "end_lineno" : "120",
  "ground_truth" : "            ContextCompat.getColor(context, R.color.disabled_background)\r\n        }\r\n        binding.sendButton.setColorFilter(tintColor)\r\n        binding.sendButton.isEnabled = enabled\r\n    }",
  "context" : "private fun setSendButtonEnabled(enabled: Boolean) {\r\n        val tintColor: Int = if (enabled) {\r\n            context.getThemeColor(R.attr.colorAccent)\r\n        } else {\r\n            ContextCompat.getColor(context, R.color.disabled_background)\r\n        }\r\n        binding.sendButton.setColorFilter(tintColor)\r\n        binding.sendButton.isEnabled = enabled\r\n    }",
  "start_lineno" : "112",
  "methodName" : "setSendButtonEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\social\\ChatBarView.kt",
  "task_id" : "habitica-android/1191",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nprivate fun setSendButtonEnabled(enabled: Boolean) {\r\n        val tintColor: Int = if (enabled) {\r\n            context.getThemeColor(R.attr.colorAccent)\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var hasAcceptedGuidelines Boolean\nvar onCommunityGuidelinesAccepted\nval binding\nvar chatMessages List<ChatMessage>\nvar maxChatLength\nvar sendAction\nvar autocompleteContext String\nvar groupID String?\nvar message String\nvar autocompleteAdapter AutocompleteAdapter?",
  "app_type" : "life",
  "end_lineno" : "128",
  "ground_truth" : "        if (chatText.isNotEmpty()) {\r\n            binding.chatEditText.text = null\r\n            sendAction?.invoke(chatText)\r\n        }\r\n    }",
  "context" : "private fun sendButtonPressed() {\r\n        val chatText = message\r\n        if (chatText.isNotEmpty()) {\r\n            binding.chatEditText.text = null\r\n            sendAction?.invoke(chatText)\r\n        }\r\n    }",
  "start_lineno" : "122",
  "methodName" : "sendButtonPressed",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\social\\ChatBarView.kt",
  "task_id" : "habitica-android/1192",
  "prompt" : "private fun sendButtonPressed() {\r\n        val chatText = message\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding",
  "app_type" : "life",
  "end_lineno" : "35",
  "ground_truth" : "        binding.bossHealthView.valueSuffix = \"HP\"\r\n        binding.bossRageView.valueSuffix = context.getString(R.string.rage)\r\n        binding.bossHealthView\r\n        setScaledPadding(context, 16, 16, 16, 16)\r\n    }",
  "context" : "private fun setupView(context: Context) {\r\n        orientation = VERTICAL\r\n        binding.bossHealthView.valueSuffix = \"HP\"\r\n        binding.bossRageView.valueSuffix = context.getString(R.string.rage)\r\n        binding.bossHealthView\r\n        setScaledPadding(context, 16, 16, 16, 16)\r\n    }",
  "start_lineno" : "29",
  "methodName" : "setupView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\social\\OldQuestProgressView.kt",
  "task_id" : "habitica-android/1193",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport android.content.Context\nprivate fun setupView(context: Context) {\r\n        orientation = VERTICAL\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var spacing Float\nvar paint Paint\nvar thickness\nvar length\nvar maxSpacing\nvar animationDuration\nvar color Int",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "        anim.repeatCount = Animation.INFINITE\r\n        anim.repeatMode = ValueAnimator.REVERSE\r\n        anim.duration = animationDuration\r\n        anim.start()\r\n    }",
  "context" : "fun startAnimating() {\r\n        val anim = ObjectAnimator.ofFloat(thickness.toFloat(), maxSpacing.toFloat())\r\n        anim.addUpdateListener {\r\n            spacing = it.animatedValue as Float\r\n        }\r\n        anim.interpolator = AccelerateDecelerateInterpolator()\r\n        anim.repeatCount = Animation.INFINITE\r\n        anim.repeatMode = ValueAnimator.REVERSE\r\n        anim.duration = animationDuration\r\n        anim.start()\r\n    }",
  "start_lineno" : "54",
  "methodName" : "startAnimating",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\SparkView.kt",
  "task_id" : "habitica-android/1194",
  "prompt" : "import android.view.animation.AccelerateDecelerateInterpolator\nimport android.animation.ObjectAnimator\nfun startAnimating() {\r\n        val anim = ObjectAnimator.ofFloat(thickness.toFloat(), maxSpacing.toFloat())\r\n        anim.addUpdateListener {\r\n            spacing = it.animatedValue as Float\r\n        }\r\n        anim.interpolator = AccelerateDecelerateInterpolator()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var spacing Float\nvar paint Paint\nvar thickness\nvar length\nvar maxSpacing\nvar animationDuration\nvar color Int",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "        drawHorizontal(thisCanvas, width - length.toFloat() - offset, centerVertical)\r\n\r\n        drawVertical(thisCanvas, centerHorizontal, offset)\r\n        drawVertical(thisCanvas, centerVertical, height - length.toFloat() - offset)\r\n    }",
  "context" : "override fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        val thisCanvas = canvas ?: return\r\n        val centerHorizontal = width / 2f\r\n        val centerVertical = height / 2f\r\n        val offset = (maxSpacing - spacing) / 2\r\n        drawHorizontal(thisCanvas, offset, centerVertical)\r\n        drawHorizontal(thisCanvas, width - length.toFloat() - offset, centerVertical)\r\n\r\n        drawVertical(thisCanvas, centerHorizontal, offset)\r\n        drawVertical(thisCanvas, centerVertical, height - length.toFloat() - offset)\r\n    }",
  "start_lineno" : "86",
  "methodName" : "onDraw",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\SparkView.kt",
  "task_id" : "habitica-android/1195",
  "prompt" : "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        val thisCanvas = canvas ?: return\r\n        val centerHorizontal = width / 2f\r\n        val centerVertical = height / 2f\r\n        val offset = (maxSpacing - spacing) / 2\r\n        drawHorizontal(thisCanvas, offset, centerVertical)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "190",
  "ground_truth" : "        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(animal.color)\r\n}",
  "context" : "fun isAnimalFlying(animal: Animal): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(animal.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r\n        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(animal.color)\r\n}",
  "start_lineno" : "177",
  "methodName" : "isAnimalFlying",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountBottomSheet.kt",
  "task_id" : "habitica-android/1196",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Animal\nfun isAnimalFlying(animal: Animal): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(animal.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val hasLoadedImages Boolean\nval bodyView PixelArtView\nval headView PixelArtView",
  "app_type" : "life",
  "end_lineno" : "28",
  "ground_truth" : "        bodyView.loadImage(\"Mount_Body_$key\")\r\n        headView.loadImage(\"Mount_Head_$key\")\r\n    }",
  "context" : "fun setMount(key: String) {\r\n        bodyView.loadImage(\"Mount_Body_$key\")\r\n        headView.loadImage(\"Mount_Head_$key\")\r\n    }",
  "start_lineno" : "25",
  "methodName" : "setMount",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountView.kt",
  "task_id" : "habitica-android/1197",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Mount\nfun setMount(key: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val hasLoadedImages Boolean\nval bodyView PixelArtView\nval headView PixelArtView",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "        update = { view ->\r\n            view.setMount(mountKey)\r\n        }\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun MountView(mountKey: String, modifier: Modifier = Modifier) {\r\n    AndroidView(\r\n        modifier = modifier,\r\n        factory = { context ->\r\n            MountView(context)\r\n        },\r\n        update = { view ->\r\n            view.setMount(mountKey)\r\n        }\r\n    )\r\n}",
  "start_lineno" : "43",
  "methodName" : "MountView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountView.kt",
  "task_id" : "habitica-android/1198",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Mount\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun MountView(mountKey: String, modifier: Modifier = Modifier) {\r\n    AndroidView(\r\n        modifier = modifier,\r\n        factory = { context ->\r\n            MountView(context)\r\n        },\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "365",
  "ground_truth" : "        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(pet.color)\r\n}",
  "context" : "fun isAnimalFlying(pet: Pet): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(pet.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r\n        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(pet.color)\r\n}",
  "start_lineno" : "352",
  "methodName" : "isAnimalFlying",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\PetBottomSheet.kt",
  "task_id" : "habitica-android/1199",
  "prompt" : "import com.habitrpg.android.habitica.models.inventory.Pet\nfun isAnimalFlying(pet: Pet): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(pet.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval allocatedPoints Int\nvar pointsToAllocate",
  "app_type" : "life",
  "end_lineno" : "64",
  "ground_truth" : "                binding.perceptionSliderView.currentValue\r\n            )\r\n            dismiss()\r\n        }\r\n    }",
  "context" : "private fun saveChanges() {\r\n        getButton(BUTTON_POSITIVE).isEnabled = false\r\n        lifecycleScope.launchCatching {\r\n            userRepository.bulkAllocatePoints(\r\n                binding.strengthSliderView.currentValue,\r\n                binding.intelligenceSliderView.currentValue,\r\n                binding.constitutionSliderView.currentValue,\r\n                binding.perceptionSliderView.currentValue\r\n            )\r\n            dismiss()\r\n        }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "saveChanges",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stats\\BulkAllocateStatsDialog.kt",
  "task_id" : "habitica-android/1200",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveChanges() {\r\n        getButton(BUTTON_POSITIVE).isEnabled = false\r\n        lifecycleScope.launchCatching {\r\n            userRepository.bulkAllocatePoints(\r\n                binding.strengthSliderView.currentValue,\r\n                binding.intelligenceSliderView.currentValue,\r\n                binding.constitutionSliderView.currentValue,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval allocatedPoints Int\nvar pointsToAllocate",
  "app_type" : "life",
  "end_lineno" : "129",
  "ground_truth" : "            firstSlider\r\n        } else {\r\n            secondSlider\r\n        }\r\n    }",
  "context" : "private fun getSliderWithHigherValue(\r\n        firstSlider: StatsSliderView?,\r\n        secondSlider: StatsSliderView?\r\n    ): StatsSliderView? {\r\n        return if ((firstSlider?.currentValue ?: 0) > (secondSlider?.currentValue ?: 0)) {\r\n            firstSlider\r\n        } else {\r\n            secondSlider\r\n        }\r\n    }",
  "start_lineno" : "120",
  "methodName" : "getSliderWithHigherValue",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stats\\BulkAllocateStatsDialog.kt",
  "task_id" : "habitica-android/1201",
  "prompt" : "private fun getSliderWithHigherValue(\r\n        firstSlider: StatsSliderView?,\r\n        secondSlider: StatsSliderView?\r\n    ): StatsSliderView? {\r\n        return if ((firstSlider?.currentValue ?: 0) > (secondSlider?.currentValue ?: 0)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nval allocatedPoints Int\nvar pointsToAllocate",
  "app_type" : "life",
  "end_lineno" : "141",
  "ground_truth" : "            binding.titleView.setBackgroundColor(ContextCompat.getColor(context, R.color.disabled_background))\r\n        }\r\n\r\n        getButton(BUTTON_POSITIVE).isEnabled = allocatedPoints > 0\r\n    }",
  "context" : " @SuppressLint(\"SetTextI18n\")\r\n    private fun updateTitle() {\r\n        binding.allocatedTitle.text = \"$allocatedPoints/$pointsToAllocate\"\r\n        if (allocatedPoints > 0) {\r\n            binding.titleView.setBackgroundColor(context.getThemeColor(R.attr.colorAccent))\r\n        } else {\r\n            binding.titleView.setBackgroundColor(ContextCompat.getColor(context, R.color.disabled_background))\r\n        }\r\n\r\n        getButton(BUTTON_POSITIVE).isEnabled = allocatedPoints > 0\r\n    }",
  "start_lineno" : "131",
  "methodName" : "updateTitle",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stats\\BulkAllocateStatsDialog.kt",
  "task_id" : "habitica-android/1202",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.annotation.SuppressLint\n @SuppressLint(\"SetTextI18n\")\r\n    private fun updateTitle() {\r\n        binding.allocatedTitle.text = \"$allocatedPoints/$pointsToAllocate\"\r\n        if (allocatedPoints > 0) {\r\n            binding.titleView.setBackgroundColor(context.getThemeColor(R.attr.colorAccent))\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding SubscriptionDetailsBinding\nvar plan SubscriptionPlan?\nvar onShowSubscriptionOptions\nvar currentUserID String?",
  "app_type" : "life",
  "end_lineno" : "43",
  "ground_truth" : "        binding.changeSubscriptionButton.setOnClickListener { changeSubscriptionButtonTapped() }\r\n        binding.heartIcon.setImageDrawable(BitmapDrawable(context.resources, HabiticaIconsHelper.imageOfHeartLightBg()))\r\n    }",
  "context" : "private fun setupView() {\r\n        binding = SubscriptionDetailsBinding.inflate(context.layoutInflater, this, true)\r\n        binding.changeSubscriptionButton.setOnClickListener { changeSubscriptionButtonTapped() }\r\n        binding.heartIcon.setImageDrawable(BitmapDrawable(context.resources, HabiticaIconsHelper.imageOfHeartLightBg()))\r\n    }",
  "start_lineno" : "39",
  "methodName" : "setupView",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\subscriptions\\SubscriptionDetailsView.kt",
  "task_id" : "habitica-android/1203",
  "prompt" : "import com.habitrpg.common.habitica.extensions.layoutInflater\nimport com.habitrpg.android.habitica.databinding.SubscriptionDetailsBinding\nimport android.view.View\nprivate fun setupView() {\r\n        binding = SubscriptionDetailsBinding.inflate(context.layoutInflater, this, true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding SubscriptionDetailsBinding\nvar plan SubscriptionPlan?\nvar onShowSubscriptionOptions\nvar currentUserID String?",
  "app_type" : "life",
  "end_lineno" : "207",
  "ground_truth" : "            context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url)))\r\n        } else if (plan?.dateTerminated != null) {\r\n            onShowSubscriptionOptions?.invoke()\r\n        }\r\n    }",
  "context" : "private fun changeSubscriptionButtonTapped() {\r\n        if (plan?.paymentMethod != null && plan?.dateTerminated == null) {\r\n            val url = if (plan?.paymentMethod == \"Google\") {\r\n                \"https://play.google.com/store/account/subscriptions\"\r\n            } else {\r\n                context.getString(R.string.base_url) + \"/\"\r\n            }\r\n            context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url)))\r\n        } else if (plan?.dateTerminated != null) {\r\n            onShowSubscriptionOptions?.invoke()\r\n        }\r\n    }",
  "start_lineno" : "196",
  "methodName" : "changeSubscriptionButtonTapped",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\subscriptions\\SubscriptionDetailsView.kt",
  "task_id" : "habitica-android/1204",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun changeSubscriptionButtonTapped() {\r\n        if (plan?.paymentMethod != null && plan?.dateTerminated == null) {\r\n            val url = if (plan?.paymentMethod == \"Google\") {\r\n                \"https://play.google.com/store/account/subscriptions\"\r\n            } else {\r\n                context.getString(R.string.base_url) + \"/\"\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar sku String?",
  "app_type" : "life",
  "end_lineno" : "60",
  "ground_truth" : "            binding.flagFlap.visibility = View.VISIBLE\r\n            binding.flagTextview.visibility = View.VISIBLE\r\n            binding.flagTextview.text = text\r\n        }\r\n    }",
  "context" : "fun setFlagText(text: CharSequence?) {\r\n        if ((text?.length ?: 0) == 0) {\r\n            binding.flagFlap.visibility = View.GONE\r\n            binding.flagTextview.visibility = View.GONE\r\n        } else {\r\n            binding.flagFlap.visibility = View.VISIBLE\r\n            binding.flagTextview.visibility = View.VISIBLE\r\n            binding.flagTextview.text = text\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "setFlagText",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\subscriptions\\SubscriptionOptionView.kt",
  "task_id" : "habitica-android/1205",
  "prompt" : "import android.view.View\nfun setFlagText(text: CharSequence?) {\r\n        if ((text?.length ?: 0) == 0) {\r\n            binding.flagFlap.visibility = View.GONE\r\n            binding.flagTextview.visibility = View.GONE\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "167",
  "ground_truth" : "    Column {\r\n        IsAssignedIndicator(isAssigned = isAssigned.value)\r\n        IsAssignedIndicator(isAssigned = !isAssigned.value)\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\n@Preview\r\nprivate fun IsAssignedIndicatorPreview() {\r\n    val isAssigned = remember { mutableStateOf(false) }\r\n    Column {\r\n        IsAssignedIndicator(isAssigned = isAssigned.value)\r\n        IsAssignedIndicator(isAssigned = !isAssigned.value)\r\n    }\r\n}",
  "start_lineno" : "158",
  "methodName" : "IsAssignedIndicatorPreview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\AssignSheet.kt",
  "task_id" : "habitica-android/1206",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@Preview\r\nprivate fun IsAssignedIndicatorPreview() {\r\n    val isAssigned = remember { mutableStateOf(false) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var checklistItems List<ChecklistItem>",
  "app_type" : "life",
  "end_lineno" : "96",
  "ground_truth" : "                return true\r\n            }\r\n        }\r\n        return false\r\n    }",
  "context" : "private fun shouldBecomeNewAddButton(view: ChecklistItemFormView): Boolean {\r\n        if (childCount > 2 && view.item.text?.isEmpty() != false && children.indexOf(view) == childCount - 2) {\r\n            val lastView = (getChildAt(childCount - 1) as? ChecklistItemFormView)\r\n            if (lastView != null && lastView.item.text?.isEmpty() != false) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }",
  "start_lineno" : "88",
  "methodName" : "shouldBecomeNewAddButton",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\ChecklistContainer.kt",
  "task_id" : "habitica-android/1207",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.core.view.children\nimport android.view.View\nprivate fun shouldBecomeNewAddButton(view: ChecklistItemFormView): Boolean {\r\n        if (childCount > 2 && view.item.text?.isEmpty() != false && children.indexOf(view) == childCount - 2) {\r\n            val lastView = (getChildAt(childCount - 1) as? ChecklistItemFormView)\r\n            if (lastView != null && lastView.item.text?.isEmpty() != false) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val formattedTime CharSequence?\nval binding\nval formatter DateFormat\nvar taskType\nvar item RemindersItem\nvar firstDayOfWeek Int?\nvar tintColor Int\nvar valueChangedListener\nvar animDuration\nvar isAddButton Boolean",
  "app_type" : "life",
  "end_lineno" : "144",
  "ground_truth" : "            item.time = zonedDateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)\r\n            binding.textView.text = formattedTime\r\n            it(Date.from(item.getLocalZonedDateTimeInstant()))\r\n        }\r\n    }",
  "context" : "override fun onTimeSet(view: TimePicker?, hourOfDay: Int, minute: Int) {\r\n        valueChangedListener?.let {\r\n            val zonedDateTime = (item.getZonedDateTime() ?: ZonedDateTime.now())\r\n                .withHour(hourOfDay)\r\n                .withMinute(minute)\r\n            item.time = zonedDateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)\r\n            binding.textView.text = formattedTime\r\n            it(Date.from(item.getLocalZonedDateTimeInstant()))\r\n        }\r\n    }",
  "start_lineno" : "135",
  "methodName" : "onTimeSet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\ReminderItemFormView.kt",
  "task_id" : "habitica-android/1208",
  "prompt" : "import java.util.Date\nimport java.time.ZonedDateTime\nimport android.widget.TimePicker\noverride fun onTimeSet(view: TimePicker?, hourOfDay: Int, minute: Int) {\r\n        valueChangedListener?.let {\r\n            val zonedDateTime = (item.getZonedDateTime() ?: ZonedDateTime.now())\r\n                .withHour(hourOfDay)\r\n                .withMinute(minute)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val values",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "    val selected = remember { mutableStateOf(difficulty) }\r\n    TaskDifficultySelector(selected.value, { selected.value = it }, Modifier.width(300.dp))\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun TaskDifficultySelectorPreview(@PreviewParameter(DifficultyProvider::class) difficulty: TaskDifficulty) {\r\n    val selected = remember { mutableStateOf(difficulty) }\r\n    TaskDifficultySelector(selected.value, { selected.value = it }, Modifier.width(300.dp))\r\n}",
  "start_lineno" : "129",
  "methodName" : "TaskDifficultySelectorPreview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskDifficultyButtons.kt",
  "task_id" : "habitica-android/1209",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskDifficulty\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun TaskDifficultySelectorPreview(@PreviewParameter(DifficultyProvider::class) difficulty: TaskDifficulty) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "135",
  "ground_truth" : "        ),\r\n        { selected.value = it },\r\n        Modifier.width(300.dp)\r\n    )\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nprivate fun TaskFormSelectorPreview() {\r\n    val selected = remember { mutableStateOf(\"second\") }\r\n    TaskFormSelector(\r\n        selected.value,\r\n        listOf(\r\n            LabeledValue(\"First\", \"first\"),\r\n            LabeledValue(\"Second\", \"second\"),\r\n            LabeledValue(\"Third\", \"third\"),\r\n            LabeledValue(\"Fourth\", \"fourth\"),\r\n            LabeledValue(\"Fifth\", \"Fifth\"),\r\n            LabeledValue(\"Sixth\", \"sixth\")\r\n        ),\r\n        { selected.value = it },\r\n        Modifier.width(300.dp)\r\n    )\r\n}",
  "start_lineno" : "117",
  "methodName" : "TaskFormSelectorPreview",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskFormSelector.kt",
  "task_id" : "habitica-android/1210",
  "prompt" : "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun TaskFormSelectorPreview() {\r\n    val selected = remember { mutableStateOf(\"second\") }\r\n    TaskFormSelector(\r\n        selected.value,\r\n        listOf(\r\n            LabeledValue(\"First\", \"first\"),\r\n            LabeledValue(\"Second\", \"second\"),\r\n            LabeledValue(\"Third\", \"third\"),\r\n            LabeledValue(\"Fourth\", \"fourth\"),\r\n            LabeledValue(\"Fifth\", \"Fifth\"),\r\n            LabeledValue(\"Sixth\", \"sixth\")\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "210",
  "ground_truth" : "        }\r\n        binding.startDateWrapper.isEnabled = isEnabled\r\n        binding.monthlyRepeatDays.isEnabled = isEnabled\r\n        binding.monthlyRepeatWeeks.isEnabled = isEnabled\r\n    }",
  "context" : "override fun setEnabled(isEnabled: Boolean) {\r\n        super.setEnabled(isEnabled)\r\n        for (button in binding.weeklyRepeatWrapper.children) {\r\n            button.isEnabled = isEnabled\r\n        }\r\n        binding.startDateWrapper.isEnabled = isEnabled\r\n        binding.monthlyRepeatDays.isEnabled = isEnabled\r\n        binding.monthlyRepeatWeeks.isEnabled = isEnabled\r\n    }",
  "start_lineno" : "202",
  "methodName" : "setEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1211",
  "prompt" : "import com.habitrpg.android.habitica.R\nimport androidx.core.view.children\noverride fun setEnabled(isEnabled: Boolean) {\r\n        super.setEnabled(isEnabled)\r\n        for (button in binding.weeklyRepeatWrapper.children) {\r\n            button.isEnabled = isEnabled\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "217",
  "ground_truth" : "        binding.summaryTextview.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r\n        binding.weeklyRepeatWrapper.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r\n    }",
  "context" : "private fun configureViewsForType() {\r\n        binding.startDateTitle.text = context.getString(if (taskType == TaskType.DAILY) R.string.start_date else R.string.due_date)\r\n        binding.repeatsEveryWrapper.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r\n        binding.summaryTextview.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r\n        binding.weeklyRepeatWrapper.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r\n    }",
  "start_lineno" : "212",
  "methodName" : "configureViewsForType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1212",
  "prompt" : "import java.util.Date\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun configureViewsForType() {\r\n        binding.startDateTitle.text = context.getString(if (taskType == TaskType.DAILY) R.string.start_date else R.string.due_date)\r\n        binding.repeatsEveryWrapper.visibility = if (taskType == TaskType.DAILY) View.VISIBLE else View.GONE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "226",
  "ground_truth" : "            dueDate = startDateCalendar.time\r\n        } else {\r\n            startDate = startDateCalendar.time\r\n        }\r\n    }",
  "context" : "override fun onDateSet(view: DatePicker?, year: Int, month: Int, dayOfMonth: Int) {\r\n        startDateCalendar.set(year, month, dayOfMonth)\r\n        if (taskType == TaskType.TODO) {\r\n            dueDate = startDateCalendar.time\r\n        } else {\r\n            startDate = startDateCalendar.time\r\n        }\r\n    }",
  "start_lineno" : "219",
  "methodName" : "onDateSet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1213",
  "prompt" : "import java.util.Date\nimport java.util.Calendar\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport android.widget.DatePicker\noverride fun onDateSet(view: DatePicker?, year: Int, month: Int, dayOfMonth: Int) {\r\n        startDateCalendar.set(year, month, dayOfMonth)\r\n        if (taskType == TaskType.TODO) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "276",
  "ground_truth" : "            7 -> weeklyRepeat.s\r\n            1 -> weeklyRepeat.su\r\n            else -> false\r\n        }\r\n    }",
  "context" : "private fun isWeekdayActive(weekday: Int): Boolean {\r\n        return when (weekday) {\r\n            2 -> weeklyRepeat.m\r\n            3 -> weeklyRepeat.t\r\n            4 -> weeklyRepeat.w\r\n            5 -> weeklyRepeat.th\r\n            6 -> weeklyRepeat.f\r\n            7 -> weeklyRepeat.s\r\n            1 -> weeklyRepeat.su\r\n            else -> false\r\n        }\r\n    }",
  "start_lineno" : "265",
  "methodName" : "isWeekdayActive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1214",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun isWeekdayActive(weekday: Int): Boolean {\r\n        return when (weekday) {\r\n            2 -> weeklyRepeat.m\r\n            3 -> weeklyRepeat.t\r\n            4 -> weeklyRepeat.w\r\n            5 -> weeklyRepeat.th\r\n            6 -> weeklyRepeat.f\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "322",
  "ground_truth" : "            styleButtonAsActive(binding.monthlyRepeatWeeks)\r\n        } else {\r\n            styleButtonAsInactive(binding.monthlyRepeatWeeks)\r\n        }\r\n    }",
  "context" : "private fun configureMonthlyRepeatViews() {\r\n        if (daysOfMonth?.isEmpty() == false) {\r\n            styleButtonAsActive(binding.monthlyRepeatDays)\r\n        } else {\r\n            styleButtonAsInactive(binding.monthlyRepeatDays)\r\n        }\r\n        if (weeksOfMonth?.isEmpty() == false) {\r\n            styleButtonAsActive(binding.monthlyRepeatWeeks)\r\n        } else {\r\n            styleButtonAsInactive(binding.monthlyRepeatWeeks)\r\n        }\r\n    }",
  "start_lineno" : "311",
  "methodName" : "configureMonthlyRepeatViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1215",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Days\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun configureMonthlyRepeatViews() {\r\n        if (daysOfMonth?.isEmpty() == false) {\r\n            styleButtonAsActive(binding.monthlyRepeatDays)\r\n        } else {\r\n            styleButtonAsInactive(binding.monthlyRepeatDays)\r\n        }\r\n        if (weeksOfMonth?.isEmpty() == false) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "328",
  "ground_truth" : "        button.backgroundTintList = ColorStateList.valueOf(context.getThemeColor(R.attr.tintedUiMain))\r\n        button.contentDescription = toContentDescription(button.text, true)\r\n    }",
  "context" : "private fun styleButtonAsActive(button: TextView) {\r\n        button.setTextColor(context.getThemeColor(R.attr.tintedUiDetails))\r\n        button.backgroundTintList = ColorStateList.valueOf(context.getThemeColor(R.attr.tintedUiMain))\r\n        button.contentDescription = toContentDescription(button.text, true)\r\n    }",
  "start_lineno" : "324",
  "methodName" : "styleButtonAsActive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1216",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.widget.TextView\nimport android.view.View\nprivate fun styleButtonAsActive(button: TextView) {\r\n        button.setTextColor(context.getThemeColor(R.attr.tintedUiDetails))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "334",
  "ground_truth" : "        button.backgroundTintList = ColorStateList.valueOf(context.getThemeColor(R.attr.colorTintedBackgroundOffset))\r\n        button.contentDescription = toContentDescription(button.text, false)\r\n    }",
  "context" : "private fun styleButtonAsInactive(button: TextView) {\r\n        button.setTextColor(context.getThemeColor(R.attr.textColorTintedSecondary))\r\n        button.backgroundTintList = ColorStateList.valueOf(context.getThemeColor(R.attr.colorTintedBackgroundOffset))\r\n        button.contentDescription = toContentDescription(button.text, false)\r\n    }",
  "start_lineno" : "330",
  "methodName" : "styleButtonAsInactive",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1217",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.widget.TextView\nimport android.view.View\nprivate fun styleButtonAsInactive(button: TextView) {\r\n        button.setTextColor(context.getThemeColor(R.attr.textColorTintedSecondary))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val binding\nvar tintColor Int\nval dateFormatter\nval frequencyAdapter\nvar taskType\nvar startDate\nvar startDateCalendar\nvar dueDate Date?\nvar frequency\nvar everyX\nvar weeklyRepeat Days\nvar daysOfMonth List<Int>?\nvar weeksOfMonth List<Int>?\nvar firstDayOfWeek Int\nval weekdays Array<String>\nvar weekdayOrder List<Int>",
  "app_type" : "life",
  "end_lineno" : "343",
  "ground_truth" : "        } else {\r\n            context.getString(R.string.not_selected)\r\n        }\r\n        return \"$buttonText, $statusString\"\r\n    }",
  "context" : "private fun toContentDescription(buttonText: CharSequence, isActive: Boolean): String {\r\n        val statusString = if (isActive) {\r\n            context.getString(R.string.selected)\r\n        } else {\r\n            context.getString(R.string.not_selected)\r\n        }\r\n        return \"$buttonText, $statusString\"\r\n    }",
  "start_lineno" : "336",
  "methodName" : "toContentDescription",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt",
  "task_id" : "habitica-android/1218",
  "prompt" : "import com.habitrpg.android.habitica.R\nprivate fun toContentDescription(buttonText: CharSequence, isActive: Boolean): String {\r\n        val statusString = if (isActive) {\r\n            context.getString(R.string.selected)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "118",
  "ground_truth" : "            }\r\n        }\r\n        super.show()\r\n        this.window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM)\r\n    }",
  "context" : "override fun show() {\r\n        if (showTags) {\r\n            lifecycleScope.launchCatching {\r\n                viewModel.tagRepository.getTags().collect {\r\n                    setTags(it)\r\n                }\r\n            }\r\n        }\r\n        super.show()\r\n        this.window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM)\r\n    }",
  "start_lineno" : "108",
  "methodName" : "show",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1219",
  "prompt" : "import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.Tag\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun show() {\r\n        if (showTags) {\r\n            lifecycleScope.launchCatching {\r\n                viewModel.tagRepository.getTags().collect {\r\n                    setTags(it)\r\n                }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "123",
  "ground_truth" : "        this.tags = repository.getUnmanagedCopy(tags).toMutableList()\r\n        createTagViews()\r\n    }",
  "context" : "private fun setTags(tags: List<Tag>) {\r\n        this.tags = repository.getUnmanagedCopy(tags).toMutableList()\r\n        createTagViews()\r\n    }",
  "start_lineno" : "120",
  "methodName" : "setTags",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1220",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun setTags(tags: List<Tag>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "198",
  "ground_truth" : "        tag.id = UUID.randomUUID().toString()\r\n        tags.add(tag)\r\n        createdTags[tag.id] = tag\r\n        startEditing()\r\n    }",
  "context" : "private fun createTag() {\r\n        val tag = Tag()\r\n        tag.id = UUID.randomUUID().toString()\r\n        tags.add(tag)\r\n        createdTags[tag.id] = tag\r\n        startEditing()\r\n    }",
  "start_lineno" : "192",
  "methodName" : "createTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1221",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun createTag() {\r\n        val tag = Tag()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "206",
  "ground_truth" : "        binding.tagsList.removeAllViews()\r\n        createTagEditViews()\r\n        binding.tagEditButton.setText(R.string.done)\r\n        this.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE)\r\n    }",
  "context" : "private fun startEditing() {\r\n        isEditingTags = true\r\n        binding.tagsList.removeAllViews()\r\n        createTagEditViews()\r\n        binding.tagEditButton.setText(R.string.done)\r\n        this.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE)\r\n    }",
  "start_lineno" : "200",
  "methodName" : "startEditing",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1222",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun startEditing() {\r\n        isEditingTags = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "242",
  "ground_truth" : "            val tag = tags[index]\r\n            createTagEditView(inflater, index, tag)\r\n        }\r\n        createAddTagButton()\r\n    }",
  "context" : "private fun createTagEditViews() {\r\n        val inflater = LayoutInflater.from(context)\r\n        for (index in tags.indices) {\r\n            val tag = tags[index]\r\n            createTagEditView(inflater, index, tag)\r\n        }\r\n        createAddTagButton()\r\n    }",
  "start_lineno" : "235",
  "methodName" : "createTagEditViews",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1223",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nimport android.view.LayoutInflater\nprivate fun createTagEditViews() {\r\n        val inflater = LayoutInflater.from(context)\r\n        for (index in tags.indices) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "325",
  "ground_truth" : "                return index\r\n            }\r\n        }\r\n        return -1\r\n    }",
  "context" : "private fun indexForId(tagId: String): Int {\r\n        for (index in tags.indices) {\r\n            if (tagId == tags[index].id) {\r\n                return index\r\n            }\r\n        }\r\n        return -1\r\n    }",
  "start_lineno" : "318",
  "methodName" : "indexForId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1224",
  "prompt" : "private fun indexForId(tagId: String): Int {\r\n        for (index in tags.indices) {\r\n            if (tagId == tags[index].id) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "424",
  "ground_truth" : "            startEditing()\r\n        } else {\r\n            stopEditing()\r\n        }\r\n    }",
  "context" : "private fun editButtonClicked() {\r\n        isEditingTags = !isEditingTags\r\n        if (isEditingTags) {\r\n            startEditing()\r\n        } else {\r\n            stopEditing()\r\n        }\r\n    }",
  "start_lineno" : "417",
  "methodName" : "editButtonClicked",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1225",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun editButtonClicked() {\r\n        isEditingTags = !isEditingTags\r\n        if (isEditingTags) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var viewModel TasksViewModel\nval binding\nvar taskType TaskType\nvar tags\nval editedTags\nval createdTags\nval deletedTags\nval addIcon Drawable?\nvar isEditingTags Boolean",
  "app_type" : "life",
  "end_lineno" : "435",
  "ground_truth" : "            } else {\r\n                ContextCompat.getColor(context, R.color.text_dimmed)\r\n            }\r\n        )\r\n    }",
  "context" : "private fun filtersChanged() {\r\n        binding.clearButton.isEnabled = viewModel.isFiltering(taskType)\r\n        binding.clearButton.setTextColor(\r\n            if (binding.clearButton.isEnabled) {\r\n                context.getThemeColor(R.attr.colorAccent)\r\n            } else {\r\n                ContextCompat.getColor(context, R.color.text_dimmed)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "426",
  "methodName" : "filtersChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt",
  "task_id" : "habitica-android/1226",
  "prompt" : "import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.graphics.Color\nprivate fun filtersChanged() {\r\n        binding.clearButton.isEnabled = viewModel.isFiltering(taskType)\r\n        binding.clearButton.setTextColor(\r\n            if (binding.clearButton.isEnabled) {\r\n                context.getThemeColor(R.attr.colorAccent)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var job Job?\nvar stringBuilder SpannableStringBuilder?\nvar visibleSpan Any?\nvar hiddenSpan Any?\nvar index Int\nvar delay Long\nval isAnimating Boolean",
  "app_type" : "life",
  "end_lineno" : "40",
  "ground_truth" : "        job?.cancel()\r\n        super.onDetachedFromWindow()\r\n    }",
  "context" : "override fun onDetachedFromWindow() {\r\n        job?.cancel()\r\n        super.onDetachedFromWindow()\r\n    }",
  "start_lineno" : "37",
  "methodName" : "onDetachedFromWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\Typewriter.kt",
  "task_id" : "habitica-android/1227",
  "prompt" : "override fun onDetachedFromWindow() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var job Job?\nvar stringBuilder SpannableStringBuilder?\nvar visibleSpan Any?\nvar hiddenSpan Any?\nvar index Int\nvar delay Long\nval isAnimating Boolean",
  "app_type" : "life",
  "end_lineno" : "45",
  "ground_truth" : "        visibleSpan = ForegroundColorSpan(ContextCompat.getColor(context, R.color.text_primary))\r\n        hiddenSpan = ForegroundColorSpan(ContextCompat.getColor(context, R.color.transparent))\r\n    }",
  "context" : "private fun setupTextColors(context: Context) {\r\n        visibleSpan = ForegroundColorSpan(ContextCompat.getColor(context, R.color.text_primary))\r\n        hiddenSpan = ForegroundColorSpan(ContextCompat.getColor(context, R.color.transparent))\r\n    }",
  "start_lineno" : "42",
  "methodName" : "setupTextColors",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\Typewriter.kt",
  "task_id" : "habitica-android/1228",
  "prompt" : "import android.content.Context\nprivate fun setupTextColors(context: Context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var binding ValidatingEditTextBinding\nvar text String?\nvar errorText String?\nvar hint CharSequence?\nvar validator\nval isValid Boolean",
  "app_type" : "life",
  "end_lineno" : "68",
  "ground_truth" : "            binding.errorText.visibility = View.GONE\r\n        } else {\r\n            binding.errorText.visibility = View.VISIBLE\r\n        }\r\n    }",
  "context" : "fun showErrorIfNecessary(currentText: String? = null) {\r\n        if (validator?.invoke(currentText ?: text) == true || errorText?.isNotBlank() != true) {\r\n            binding.errorText.visibility = View.GONE\r\n        } else {\r\n            binding.errorText.visibility = View.VISIBLE\r\n        }\r\n    }",
  "start_lineno" : "62",
  "methodName" : "showErrorIfNecessary",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\ValidatingEditText.kt",
  "task_id" : "habitica-android/1229",
  "prompt" : "fun showErrorIfNecessary(currentText: String? = null) {\r\n        if (validator?.invoke(currentText ?: text) == true || errorText?.isNotBlank() != true) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var yesterdailiesList LinearLayout\nvar displayedDialog WeakReference<YesterdailyDialog>?\nvar lastCronRun Date?",
  "app_type" : "life",
  "end_lineno" : "78",
  "ground_truth" : "        super.onAttachedToWindow()\r\n        displayedDialog = WeakReference(this)\r\n    }",
  "context" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n        displayedDialog = WeakReference(this)\r\n    }",
  "start_lineno" : "75",
  "methodName" : "onAttachedToWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt",
  "task_id" : "habitica-android/1230",
  "prompt" : "override fun onAttachedToWindow() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var yesterdailiesList LinearLayout\nvar displayedDialog WeakReference<YesterdailyDialog>?\nvar lastCronRun Date?",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "        super.onDetachedFromWindow()\r\n        displayedDialog = null\r\n    }",
  "context" : "override fun onDetachedFromWindow() {\r\n        super.onDetachedFromWindow()\r\n        displayedDialog = null\r\n    }",
  "start_lineno" : "80",
  "methodName" : "onDetachedFromWindow",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt",
  "task_id" : "habitica-android/1231",
  "prompt" : "override fun onDetachedFromWindow() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var yesterdailiesList LinearLayout\nvar displayedDialog WeakReference<YesterdailyDialog>?\nvar lastCronRun Date?",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            userRepository.runCron(completedTasks)\r\n        }\r\n        displayedDialog = null\r\n    }",
  "context" : "private fun runCron() {\r\n        val completedTasks = ArrayList<Task>()\r\n        for (task in tasks) {\r\n            if (task.completed) {\r\n                completedTasks.add(task)\r\n            }\r\n        }\r\n        lastCronRun = Date()\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r\n            userRepository.runCron(completedTasks)\r\n        }\r\n        displayedDialog = null\r\n    }",
  "start_lineno" : "85",
  "methodName" : "runCron",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt",
  "task_id" : "habitica-android/1232",
  "prompt" : "import java.util.Date\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.R\nprivate fun runCron() {\r\n        val completedTasks = ArrayList<Task>()\r\n        for (task in tasks) {\r\n            if (task.completed) {\r\n                completedTasks.add(task)\r\n            }\r\n        }\r\n        lastCronRun = Date()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var yesterdailiesList LinearLayout\nvar displayedDialog WeakReference<YesterdailyDialog>?\nvar lastCronRun Date?",
  "app_type" : "life",
  "end_lineno" : "192",
  "ground_truth" : "            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }",
  "context" : "private fun scoreChecklistItem(\r\n        task: Task,\r\n        item: ChecklistItem\r\n    ) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }",
  "start_lineno" : "185",
  "methodName" : "scoreChecklistItem",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt",
  "task_id" : "habitica-android/1233",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.lifecycle.lifecycleScope\nprivate fun scoreChecklistItem(\r\n        task: Task,\r\n        item: ChecklistItem\r\n    ) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var yesterdailiesList LinearLayout\nvar displayedDialog WeakReference<YesterdailyDialog>?\nvar lastCronRun Date?",
  "app_type" : "life",
  "end_lineno" : "296",
  "ground_truth" : "            if (!activity.isFinishing) {\r\n                dialog.enqueue()\r\n            }\r\n            return dialog\r\n        }",
  "context" : "private fun showDialog(\r\n            activity: Activity,\r\n            userRepository: UserRepository,\r\n            taskRepository: TaskRepository,\r\n            tasks: List<Task>\r\n        ): YesterdailyDialog {\r\n            val dialog = YesterdailyDialog(activity, userRepository, taskRepository, tasks)\r\n            dialog.setCancelable(false)\r\n            dialog.setCanceledOnTouchOutside(false)\r\n            if (!activity.isFinishing) {\r\n                dialog.enqueue()\r\n            }\r\n            return dialog\r\n        }",
  "start_lineno" : "283",
  "methodName" : "showDialog",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt",
  "task_id" : "habitica-android/1234",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.data.UserRepository\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun showDialog(\r\n            activity: Activity,\r\n            userRepository: UserRepository,\r\n            taskRepository: TaskRepository,\r\n            tasks: List<Task>\r\n        ): YesterdailyDialog {\r\n            val dialog = YesterdailyDialog(activity, userRepository, taskRepository, tasks)\r\n            dialog.setCancelable(false)\r\n            dialog.setCanceledOnTouchOutside(false)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "18",
  "ground_truth" : "            out.nullValue()\r\n        } else {\r\n            out.value(value)\r\n        }\r\n    }",
  "context" : " @Throws(IOException::class)\r\n    override fun write(out: JsonWriter, value: Boolean?) {\r\n        if (value == null) {\r\n            out.nullValue()\r\n        } else {\r\n            out.value(value)\r\n        }\r\n    }",
  "start_lineno" : "11",
  "methodName" : "write",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\BooleanAsIntAdapter.kt",
  "task_id" : "habitica-android/1235",
  "prompt" : "import java.io.IOException\nimport com.google.gson.stream.JsonWriter\n @Throws(IOException::class)\r\n    override fun write(out: JsonWriter, value: Boolean?) {\r\n        if (value == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "            JsonToken.NUMBER -> `in`.nextInt() != 0\r\n            JsonToken.STRING -> java.lang.Boolean.parseBoolean(`in`.nextString())\r\n            else -> throw IllegalStateException(\"Expected BOOLEAN or NUMBER but was $peek\")\r\n        }\r\n    }",
  "context" : " @Throws(IOException::class)\r\n    override fun read(`in`: JsonReader): Boolean? {\r\n        return when (val peek = `in`.peek()) {\r\n            JsonToken.BOOLEAN -> `in`.nextBoolean()\r\n            JsonToken.NULL -> {\r\n                `in`.nextNull()\r\n                null\r\n            }\r\n            JsonToken.NUMBER -> `in`.nextInt() != 0\r\n            JsonToken.STRING -> java.lang.Boolean.parseBoolean(`in`.nextString())\r\n            else -> throw IllegalStateException(\"Expected BOOLEAN or NUMBER but was $peek\")\r\n        }\r\n    }",
  "start_lineno" : "20",
  "methodName" : "read",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\BooleanAsIntAdapter.kt",
  "task_id" : "habitica-android/1236",
  "prompt" : "import java.io.IOException\nimport com.google.gson.stream.JsonToken\nimport com.google.gson.stream.JsonReader\n @Throws(IOException::class)\r\n    override fun read(`in`: JsonReader): Boolean? {\r\n        return when (val peek = `in`.peek()) {\r\n            JsonToken.BOOLEAN -> `in`.nextBoolean()\r\n            JsonToken.NULL -> {\r\n                `in`.nextNull()\r\n                null\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "109",
  "ground_truth" : "            return TextUtils.join(\",\", taskArray)\r\n        }\r\n\r\n        return \"\"\r\n    }",
  "context" : "private fun getTaskArrayAsString(\r\n        context: JsonDeserializationContext,\r\n        tasksOrderObj: JsonObject,\r\n        taskType: String\r\n    ): String {\r\n        if (tasksOrderObj.has(taskType)) {\r\n            val jsonElement = tasksOrderObj.get(taskType)\r\n\r\n            val taskArray = context.deserialize<Array<String>>(jsonElement, Array<String>::class.java)\r\n\r\n            return TextUtils.join(\",\", taskArray)\r\n        }\r\n\r\n        return \"\"\r\n    }",
  "start_lineno" : "95",
  "methodName" : "getTaskArrayAsString",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\ChallengeDeserializer.kt",
  "task_id" : "habitica-android/1237",
  "prompt" : "import java.lang.reflect.Type\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonDeserializationContext\nprivate fun getTaskArrayAsString(\r\n        context: JsonDeserializationContext,\r\n        tasksOrderObj: JsonObject,\r\n        taskType: String\r\n    ): String {\r\n        if (tasksOrderObj.has(taskType)) {\r\n            val jsonElement = tasksOrderObj.get(taskType)\r\n\r\n            val taskArray = context.deserialize<Array<String>>(jsonElement, Array<String>::class.java)\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val formatter\nval calendar",
  "app_type" : "life",
  "end_lineno" : "220",
  "ground_truth" : "        calendar.set(Calendar.MONTH, month)\r\n        return formatter.format(calendar.time).uppercase()\r\n    }",
  "context" : "private fun getMonthName(month: Int): String {\r\n        calendar.set(Calendar.MONTH, month)\r\n        return formatter.format(calendar.time).uppercase()\r\n    }",
  "start_lineno" : "217",
  "methodName" : "getMonthName",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\CustomizationDeserializer.kt",
  "task_id" : "habitica-android/1238",
  "prompt" : "private fun getMonthName(month: Int): String {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var dateFormats",
  "app_type" : "life",
  "end_lineno" : "39",
  "ground_truth" : "        dateFormat.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n        dateFormats.add(dateFormat)\r\n    }",
  "context" : "private fun addFormat(s: String) {\r\n        val dateFormat = SimpleDateFormat(s, Locale.US)\r\n        dateFormat.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n        dateFormats.add(dateFormat)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "addFormat",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\DateDeserializer.kt",
  "task_id" : "habitica-android/1239",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.text.DateFormat\nprivate fun addFormat(s: String) {\r\n        val dateFormat = SimpleDateFormat(s, Locale.US)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var dateFormats",
  "app_type" : "life",
  "end_lineno" : "83",
  "ground_truth" : "            JsonPrimitive(\"\")\r\n        } else {\r\n            JsonPrimitive(this.dateFormats[0].format(src))\r\n        }\r\n    }",
  "context" : "override fun serialize(src: Date?, typeOfSrc: Type, context: JsonSerializationContext): JsonElement {\r\n        return if (src == null) {\r\n            JsonPrimitive(\"\")\r\n        } else {\r\n            JsonPrimitive(this.dateFormats[0].format(src))\r\n        }\r\n    }",
  "start_lineno" : "77",
  "methodName" : "serialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\DateDeserializer.kt",
  "task_id" : "habitica-android/1240",
  "prompt" : "import java.util.Date\nimport java.lang.reflect.Type\nimport com.google.gson.JsonSerializationContext\nimport com.google.gson.JsonElement\noverride fun serialize(src: Date?, typeOfSrc: Type, context: JsonSerializationContext): JsonElement {\r\n        return if (src == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "16",
  "ground_truth" : "        response.value = json.asInt\r\n        return response\r\n    }",
  "context" : " @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): FeedResponse {\r\n        val response = FeedResponse()\r\n        response.value = json.asInt\r\n        return response\r\n    }",
  "start_lineno" : "11",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\FeedResponseDeserializer.kt",
  "task_id" : "habitica-android/1241",
  "prompt" : "import java.lang.reflect.Type\nimport com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): FeedResponse {\r\n        val response = FeedResponse()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "            result.authentication = context.deserialize<Authentication>(obj.get(\"auth\"), Authentication::class.java)\r\n        }\r\n\r\n        return result\r\n    }",
  "context" : " @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): FindUsernameResult {\r\n        val obj = json.asJsonObject\r\n\r\n        val result = FindUsernameResult()\r\n\r\n        if (obj.has(\"contributor\")) {\r\n            result.contributor = context.deserialize<ContributorInfo>(obj.get(\"contributor\"), ContributorInfo::class.java)\r\n        }\r\n        if (obj.has(\"auth\")) {\r\n            result.authentication = context.deserialize<Authentication>(obj.get(\"auth\"), Authentication::class.java)\r\n        }\r\n\r\n        return result\r\n    }",
  "start_lineno" : "13",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\FindUsernameResultDeserializer.kt",
  "task_id" : "habitica-android/1242",
  "prompt" : "import java.lang.reflect.Type\nimport com.habitrpg.android.habitica.models.user.ContributorInfo\nimport com.habitrpg.android.habitica.models.social.FindUsernameResult\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): FindUsernameResult {\r\n        val obj = json.asJsonObject\r\n\r\n        val result = FindUsernameResult()\r\n\r\n        if (obj.has(\"contributor\")) {\r\n            result.contributor = context.deserialize<ContributorInfo>(obj.get(\"contributor\"), ContributorInfo::class.java)\r\n        }\r\n        if (obj.has(\"auth\")) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "29",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return ownedItems\r\n    }",
  "context" : "override fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedItem> {\r\n        val ownedItems = RealmList<OwnedItem>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                if (entry.value.isJsonPrimitive) {\r\n                    val item = OwnedItem()\r\n                    item.key = entry.key\r\n                    item.numberOwned = entry.value.asInt\r\n                    ownedItems.add(item)\r\n                }\r\n            }\r\n        }\r\n        return ownedItems\r\n    }",
  "start_lineno" : "11",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\OwnedItemListDeserializer.kt",
  "task_id" : "habitica-android/1243",
  "prompt" : "import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\noverride fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedItem> {\r\n        val ownedItems = RealmList<OwnedItem>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                if (entry.value.isJsonPrimitive) {\r\n                    val item = OwnedItem()\r\n                    item.key = entry.key\r\n                    item.numberOwned = entry.value.asInt\r\n                    ownedItems.add(item)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "27",
  "ground_truth" : "                ownedItems.add(item)\r\n            }\r\n        }\r\n        return ownedItems\r\n    }",
  "context" : "override fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedPet> {\r\n        val ownedItems = RealmList<OwnedPet>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                val item = OwnedPet()\r\n                item.key = entry.key\r\n                item.trained = entry.value.asInt\r\n                ownedItems.add(item)\r\n            }\r\n        }\r\n        return ownedItems\r\n    }",
  "start_lineno" : "11",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\OwnedPetListDeserializer.kt",
  "task_id" : "habitica-android/1244",
  "prompt" : "import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\noverride fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedPet> {\r\n        val ownedItems = RealmList<OwnedPet>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                val item = OwnedPet()\r\n                item.key = entry.key\r\n                item.trained = entry.value.asInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "58",
  "ground_truth" : "        customization.setCategory(category);\r\n    }\r\n    customization.setPurchased(wasPurchased);\r\n    return customization;\r\n}",
  "context" : "private OwnedCustomization parseCustomization(String type, String category, String key, boolean wasPurchased) {\r\n    OwnedCustomization customization = new OwnedCustomization();\r\n    customization.setKey(key);\r\n    customization.setType(type);\r\n    if (category != null) {\r\n        customization.setCategory(category);\r\n    }\r\n    customization.setPurchased(wasPurchased);\r\n    return customization;\r\n}",
  "start_lineno" : "48",
  "methodName" : "parseCustomization",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\PurchasedDeserializer.java",
  "task_id" : "habitica-android/1245",
  "prompt" : "import java.lang.reflect.Type\nimport com.habitrpg.android.habitica.models.user.OwnedCustomization\nprivate OwnedCustomization parseCustomization(String type, String category, String key, boolean wasPurchased) {\r\n    OwnedCustomization customization = new OwnedCustomization();\r\n    customization.setKey(key);\r\n    customization.setType(type);\r\n    if (category != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "26",
  "ground_truth" : "            items.add(questCollect)\r\n        }\r\n\r\n        return items\r\n    }",
  "context" : " @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): RealmList<QuestCollect> {\r\n        val items = RealmList<QuestCollect>()\r\n\r\n        for ((key, value) in json.asJsonObject.entrySet()) {\r\n            val questCollect = QuestCollect()\r\n            questCollect.key = key\r\n            val jsonObject = value.asJsonObject\r\n            questCollect.count = jsonObject.get(\"count\").asInt\r\n            questCollect.text = jsonObject.get(\"text\").asString\r\n            items.add(questCollect)\r\n        }\r\n\r\n        return items\r\n    }",
  "start_lineno" : "12",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\QuestCollectDeserializer.kt",
  "task_id" : "habitica-android/1246",
  "prompt" : "import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.inventory.QuestCollect\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): RealmList<QuestCollect> {\r\n        val items = RealmList<QuestCollect>()\r\n\r\n        for ((key, value) in json.asJsonObject.entrySet()) {\r\n            val questCollect = QuestCollect()\r\n            questCollect.key = key\r\n            val jsonObject = value.asJsonObject\r\n            questCollect.count = jsonObject.get(\"count\").asInt\r\n            questCollect.text = jsonObject.get(\"text\").asString\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "86",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return false\r\n    }",
  "context" : "private fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }",
  "start_lineno" : "78",
  "methodName" : "alreadyContainsTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskListDeserializer.kt",
  "task_id" : "habitica-android/1247",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "41",
  "ground_truth" : "            intList.add(jsonArray.get(i).asInt)\r\n        }\r\n\r\n        return intList\r\n    }",
  "context" : "private fun getIntListFromJsonArray(jsonArray: JsonArray): List<Int> {\r\n        val intList = ArrayList<Int>()\r\n\r\n        for (i in 0 until jsonArray.size()) {\r\n            intList.add(jsonArray.get(i).asInt)\r\n        }\r\n\r\n        return intList\r\n    }",
  "start_lineno" : "33",
  "methodName" : "getIntListFromJsonArray",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt",
  "task_id" : "habitica-android/1248",
  "prompt" : "import com.google.gson.JsonArray\nprivate fun getIntListFromJsonArray(jsonArray: JsonArray): List<Int> {\r\n        val intList = ArrayList<Int>()\r\n\r\n        for (i in 0 until jsonArray.size()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "53",
  "ground_truth" : "        val daysOfMonth = e.getAsJsonArray(\"daysOfMonth\")\r\n        if (daysOfMonth != null && daysOfMonth.size() > 0) {\r\n            task.setDaysOfMonth(getIntListFromJsonArray(daysOfMonth))\r\n        }\r\n    }",
  "context" : "private fun getMonthlyDays(e: JsonObject, task: Task) {\r\n        val weeksOfMonth = e.getAsJsonArray(\"weeksOfMonth\")\r\n        if (weeksOfMonth != null && weeksOfMonth.size() > 0) {\r\n            task.setWeeksOfMonth(getIntListFromJsonArray(weeksOfMonth))\r\n        }\r\n\r\n        val daysOfMonth = e.getAsJsonArray(\"daysOfMonth\")\r\n        if (daysOfMonth != null && daysOfMonth.size() > 0) {\r\n            task.setDaysOfMonth(getIntListFromJsonArray(daysOfMonth))\r\n        }\r\n    }",
  "start_lineno" : "43",
  "methodName" : "getMonthlyDays",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt",
  "task_id" : "habitica-android/1249",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.Days\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonArray\nprivate fun getMonthlyDays(e: JsonObject, task: Task) {\r\n        val weeksOfMonth = e.getAsJsonArray(\"weeksOfMonth\")\r\n        if (weeksOfMonth != null && weeksOfMonth.size() > 0) {\r\n            task.setWeeksOfMonth(getIntListFromJsonArray(weeksOfMonth))\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "213",
  "ground_truth" : "            jsonObject.addProperty(\"completed\", item.completed)\r\n            jsonArray.add(jsonObject)\r\n        }\r\n        return jsonArray\r\n    }",
  "context" : "private fun serializeChecklist(checklist: List<ChecklistItem>?): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        checklist?.forEach { item ->\r\n            val jsonObject = JsonObject()\r\n            jsonObject.addProperty(\"text\", item.text)\r\n            jsonObject.addProperty(\"id\", item.id)\r\n            jsonObject.addProperty(\"completed\", item.completed)\r\n            jsonArray.add(jsonObject)\r\n        }\r\n        return jsonArray\r\n    }",
  "start_lineno" : "203",
  "methodName" : "serializeChecklist",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt",
  "task_id" : "habitica-android/1250",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonArray\nprivate fun serializeChecklist(checklist: List<ChecklistItem>?): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        checklist?.forEach { item ->\r\n            val jsonObject = JsonObject()\r\n            jsonObject.addProperty(\"text\", item.text)\r\n            jsonObject.addProperty(\"id\", item.id)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "227",
  "ground_truth" : "            jsonObject.addProperty(\"time\", item.time)\r\n            jsonArray.add(jsonObject)\r\n        }\r\n        return jsonArray\r\n    }",
  "context" : "private fun serializeReminders(reminders: List<RemindersItem>?): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        reminders?.forEach { item ->\r\n            val jsonObject = JsonObject()\r\n            jsonObject.addProperty(\"id\", item.id)\r\n            if (item.startDate != null) {\r\n                jsonObject.addProperty(\"startDate\", item.startDate)\r\n            }\r\n            jsonObject.addProperty(\"time\", item.time)\r\n            jsonArray.add(jsonObject)\r\n        }\r\n        return jsonArray\r\n    }",
  "start_lineno" : "215",
  "methodName" : "serializeReminders",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt",
  "task_id" : "habitica-android/1251",
  "prompt" : "import java.util.Date\nimport com.habitrpg.android.habitica.models.tasks.RemindersItem\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonArray\nprivate fun serializeReminders(reminders: List<RemindersItem>?): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        reminders?.forEach { item ->\r\n            val jsonObject = JsonObject()\r\n            jsonObject.addProperty(\"id\", item.id)\r\n            if (item.startDate != null) {\r\n                jsonObject.addProperty(\"startDate\", item.startDate)\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "235",
  "ground_truth" : "    }\r\n    return null\r\n}",
  "context" : "private fun JsonObject.safeGet(key: String): JsonElement? {\r\n    if (has(\"streak\") && !get(key).isJsonNull) {\r\n        return get(key)\r\n    }\r\n    return null\r\n}",
  "start_lineno" : "230",
  "methodName" : "safeGet",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt",
  "task_id" : "habitica-android/1252",
  "prompt" : "import com.google.gson.JsonObject\nimport com.google.gson.JsonElement\nprivate fun JsonObject.safeGet(key: String): JsonElement? {\r\n    if (has(\"streak\") && !get(key).isJsonNull) {\r\n        return get(key)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return false\r\n    }",
  "context" : "private fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }",
  "start_lineno" : "51",
  "methodName" : "alreadyContainsTag",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskTagDeserializer.kt",
  "task_id" : "habitica-android/1253",
  "prompt" : "import com.habitrpg.android.habitica.models.Tag\nprivate fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "24",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return steps\r\n    }",
  "context" : " @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): List<TutorialStep> {\r\n        val steps = RealmList<TutorialStep>()\r\n        for (group in listOf(\"common\", \"android\")) {\r\n            if (json.asJsonObject.has(group)) {\r\n                for (entry in json.asJsonObject.get(group).asJsonObject.entrySet()) {\r\n                    steps.add(parseStep(group, entry))\r\n                }\r\n            }\r\n        }\r\n\r\n        return steps\r\n    }",
  "start_lineno" : "12",
  "methodName" : "deserialize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TutorialStepListDeserializer.kt",
  "task_id" : "habitica-android/1254",
  "prompt" : "import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.TutorialStep\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): List<TutorialStep> {\r\n        val steps = RealmList<TutorialStep>()\r\n        for (group in listOf(\"common\", \"android\")) {\r\n            if (json.asJsonObject.has(group)) {\r\n                for (entry in json.asJsonObject.get(group).asJsonObject.entrySet()) {\r\n                    steps.add(parseStep(group, entry))\r\n                }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "32",
  "ground_truth" : "        article.tutorialGroup = group\r\n        article.identifier = entry.key\r\n        article.wasCompleted = entry.value.asBoolean\r\n        return article\r\n    }",
  "context" : "private fun parseStep(group: String, entry: MutableMap.MutableEntry<String, JsonElement>): TutorialStep {\r\n        val article = TutorialStep()\r\n        article.tutorialGroup = group\r\n        article.identifier = entry.key\r\n        article.wasCompleted = entry.value.asBoolean\r\n        return article\r\n    }",
  "start_lineno" : "26",
  "methodName" : "parseStep",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TutorialStepListDeserializer.kt",
  "task_id" : "habitica-android/1255",
  "prompt" : "import com.habitrpg.android.habitica.models.TutorialStep\nimport com.google.gson.JsonElement\nprivate fun parseStep(group: String, entry: MutableMap.MutableEntry<String, JsonElement>): TutorialStep {\r\n        val article = TutorialStep()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "life",
  "end_lineno" : "76",
  "ground_truth" : "        val preferences = context?.let { PreferenceManager.getDefaultSharedPreferences(it) }\r\n        return TaskType.from(preferences?.getString(\"add_task_widget_$widgetId\", TaskType.HABIT.value)) ?: TaskType.HABIT\r\n    }",
  "context" : "private fun getSelectedTaskType(widgetId: Int): TaskType {\r\n        val preferences = context?.let { PreferenceManager.getDefaultSharedPreferences(it) }\r\n        return TaskType.from(preferences?.getString(\"add_task_widget_$widgetId\", TaskType.HABIT.value)) ?: TaskType.HABIT\r\n    }",
  "start_lineno" : "73",
  "methodName" : "getSelectedTaskType",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\AddTaskWidgetProvider.kt",
  "task_id" : "habitica-android/1256",
  "prompt" : "import com.habitrpg.shared.habitica.models.tasks.TaskType\nprivate fun getSelectedTaskType(widgetId: Int): TaskType {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var avatarView AvatarView\nvar user User?\nvar appWidgetManager AppWidgetManager?\nvar showManaBar\nvar showAvatar",
  "app_type" : "life",
  "end_lineno" : "55",
  "ground_truth" : "                user = it\r\n                updateData()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onEnabled(context: Context) {\r\n        super.onEnabled(context)\r\n        avatarView = AvatarView(\r\n            context.applicationContext,\r\n            showBackground = true,\r\n            showMount = true,\r\n            showPet = true\r\n        )\r\n\r\n        MainScope().launchCatching {\r\n            userRepository.getUser().collect {\r\n                user = it\r\n                updateData()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\AvatarStatsWidgetProvider.kt",
  "task_id" : "habitica-android/1257",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.views.AvatarView\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.content.Context\noverride fun onEnabled(context: Context) {\r\n        super.onEnabled(context)\r\n        avatarView = AvatarView(\r\n            context.applicationContext,\r\n            showBackground = true,\r\n            showMount = true,\r\n            showPet = true\r\n        )\r\n\r\n        MainScope().launchCatching {\r\n            userRepository.getUser().collect {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "var userRepository UserRepository\nvar context Context?",
  "app_type" : "life",
  "end_lineno" : "37",
  "ground_truth" : "        while (70 * n - 30 < size) {\r\n            ++n\r\n        }\r\n        return n - 1\r\n    }",
  "context" : "private fun getCellsForSize(size: Int): Int {\r\n        var n = 2\r\n        while (70 * n - 30 < size) {\r\n            ++n\r\n        }\r\n        return n - 1\r\n    }",
  "start_lineno" : "31",
  "methodName" : "getCellsForSize",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt",
  "task_id" : "habitica-android/1258",
  "prompt" : "private fun getCellsForSize(size: Int): Int {\r\n        var n = 2\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar context Context?",
  "app_type" : "life",
  "end_lineno" : "59",
  "ground_truth" : "            appWidgetManager,\r\n            appWidgetId,\r\n            newOptions\r\n        )\r\n    }",
  "context" : "override fun onAppWidgetOptionsChanged(\r\n        context: Context,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int,\r\n        newOptions: Bundle\r\n    ) {\r\n        this.context = context\r\n        val options = appWidgetManager.getAppWidgetOptions(appWidgetId)\r\n\r\n        appWidgetManager.partiallyUpdateAppWidget(\r\n            appWidgetId,\r\n            sizeRemoteViews(context, options, appWidgetId)\r\n        )\r\n\r\n        super.onAppWidgetOptionsChanged(\r\n            context,\r\n            appWidgetManager,\r\n            appWidgetId,\r\n            newOptions\r\n        )\r\n    }",
  "start_lineno" : "39",
  "methodName" : "onAppWidgetOptionsChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt",
  "task_id" : "habitica-android/1259",
  "prompt" : "import android.widget.RemoteViews\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\noverride fun onAppWidgetOptionsChanged(\r\n        context: Context,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int,\r\n        newOptions: Bundle\r\n    ) {\r\n        this.context = context\r\n        val options = appWidgetManager.getAppWidgetOptions(appWidgetId)\r\n\r\n        appWidgetManager.partiallyUpdateAppWidget(\r\n            appWidgetId,\r\n            sizeRemoteViews(context, options, appWidgetId)\r\n        )\r\n\r\n        super.onAppWidgetOptionsChanged(\r\n            context,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar context Context?",
  "app_type" : "life",
  "end_lineno" : "81",
  "ground_truth" : "            val pair = NotifyUserUseCase.getNotificationAndAddStatsToUserAsText(data.experienceDelta, data.healthDelta, data.goldDelta, data.manaDelta)\r\n            val toast = Toast.makeText(context, pair.first, Toast.LENGTH_LONG)\r\n            toast.show()\r\n        }\r\n    }",
  "context" : "protected fun showToastForTaskDirection(context: Context, data: TaskScoringResult?) {\r\n        if (data != null) {\r\n            val pair = NotifyUserUseCase.getNotificationAndAddStatsToUserAsText(data.experienceDelta, data.healthDelta, data.goldDelta, data.manaDelta)\r\n            val toast = Toast.makeText(context, pair.first, Toast.LENGTH_LONG)\r\n            toast.show()\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "showToastForTaskDirection",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt",
  "task_id" : "habitica-android/1260",
  "prompt" : "import com.habitrpg.shared.habitica.models.responses.TaskScoringResult\nimport android.widget.Toast\nimport android.content.Context\nprotected fun showToastForTaskDirection(context: Context, data: TaskScoringResult?) {\r\n        if (data != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar context Context?",
  "app_type" : "life",
  "end_lineno" : "97",
  "ground_truth" : "        additionalData[\"identifier\"] = this.javaClass.simpleName\r\n        Analytics.sendEvent(\"widgets\", EventCategory.BEHAVIOUR, HitType.CREATE_WIDGET, additionalData)\r\n    }",
  "context" : "override fun onEnabled(context: Context) {\r\n        super.onEnabled(context)\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"identifier\"] = this.javaClass.simpleName\r\n        Analytics.sendEvent(\"widgets\", EventCategory.BEHAVIOUR, HitType.CREATE_WIDGET, additionalData)\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onEnabled",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt",
  "task_id" : "habitica-android/1261",
  "prompt" : "import android.content.Context\noverride fun onEnabled(context: Context) {\r\n        super.onEnabled(context)\r\n        val additionalData = HashMap<String, Any>()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var userRepository UserRepository\nvar context Context?",
  "app_type" : "life",
  "end_lineno" : "104",
  "ground_truth" : "        Analytics.sendEvent(\"widgets\", EventCategory.BEHAVIOUR, HitType.REMOVE_WIDGET, additionalData)\r\n        super.onDeleted(context, appWidgetIds)\r\n    }",
  "context" : "override fun onDeleted(context: Context, appWidgetIds: IntArray) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"identifier\"] = this.javaClass.simpleName\r\n        Analytics.sendEvent(\"widgets\", EventCategory.BEHAVIOUR, HitType.REMOVE_WIDGET, additionalData)\r\n        super.onDeleted(context, appWidgetIds)\r\n    }",
  "start_lineno" : "99",
  "methodName" : "onDeleted",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt",
  "task_id" : "habitica-android/1262",
  "prompt" : "import android.content.Context\noverride fun onDeleted(context: Context, appWidgetIds: IntArray) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"identifier\"] = this.javaClass.simpleName\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var sharedPreferences SharedPreferences\nvar context Context\nvar taskRepository TaskRepository\nvar appWidgetManager AppWidgetManager?\nvar taskMapping\nvar allWidgetIds IntArray?",
  "app_type" : "life",
  "end_lineno" : "106",
  "ground_truth" : "            if (taskId != \"\") {\r\n                this.taskMapping[taskId] = widgetId\r\n            }\r\n        }\r\n    }",
  "context" : "private fun makeTaskMapping() {\r\n        this.taskMapping = HashMap()\r\n        for (widgetId in allWidgetIds!!) {\r\n            val taskId = getTaskId(widgetId)\r\n            if (taskId != \"\") {\r\n                this.taskMapping[taskId] = widgetId\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "makeTaskMapping",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\HabitButtonWidgetService.kt",
  "task_id" : "habitica-android/1263",
  "prompt" : "import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun makeTaskMapping() {\r\n        this.taskMapping = HashMap()\r\n        for (widgetId in allWidgetIds!!) {\r\n            val taskId = getTaskId(widgetId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val job\nval widgetId Int\nvar taskList List<Task>\nvar reloadData Boolean",
  "app_type" : "life",
  "end_lineno" : "63",
  "ground_truth" : "        }\r\n        this.reloadData = true\r\n    }",
  "context" : "override fun onDataSetChanged() {\r\n        if (this.reloadData) {\r\n            this.loadData()\r\n        }\r\n        this.reloadData = true\r\n    }",
  "start_lineno" : "58",
  "methodName" : "onDataSetChanged",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\TaskListFactory.kt",
  "task_id" : "habitica-android/1264",
  "prompt" : "override fun onDataSetChanged() {\r\n        if (this.reloadData) {\r\n            this.loadData()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val job\nval widgetId Int\nvar taskList List<Task>\nvar reloadData Boolean",
  "app_type" : "life",
  "end_lineno" : "101",
  "ground_truth" : "            val task = taskList[position]\r\n            return task.id.hashCode().toLong()\r\n        }\r\n        return position.toLong()\r\n    }",
  "context" : "override fun getItemId(position: Int): Long {\r\n        if (taskList.size > position) {\r\n            val task = taskList[position]\r\n            return task.id.hashCode().toLong()\r\n        }\r\n        return position.toLong()\r\n    }",
  "start_lineno" : "95",
  "methodName" : "getItemId",
  "fpath" : "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\TaskListFactory.kt",
  "task_id" : "habitica-android/1265",
  "prompt" : "override fun getItemId(position: Int): Long {\r\n        if (taskList.size > position) {\r",
  "type" : "java",
  "actions" : ""
} ]