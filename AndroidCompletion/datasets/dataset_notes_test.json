[ {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "372",
  "ground_truth" : "        return CaldroidGridAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }",
  "context" : "open fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r\n        return CaldroidGridAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }",
  "start_lineno" : "369",
  "methodName" : "getNewDatesGridAdapter",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/0",
  "prompt" : "import java.util.Date\nopen fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "382",
  "ground_truth" : "                activity, android.R.layout.simple_list_item_1,\r\n                daysOfWeek, themeResource)\r\n    }",
  "context" : "open fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r\n                activity, android.R.layout.simple_list_item_1,\r\n                daysOfWeek, themeResource)\r\n    }",
  "start_lineno" : "378",
  "methodName" : "getNewWeekdayAdapter",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/1",
  "prompt" : "import com.caldroid.R\nopen fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "436",
  "ground_truth" : "            val drawable = backgroundForDateMap[date]\r\n            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mBackgroundForDateTimeMap[dateTime] = drawable!!\r\n        }\r\n    }",
  "context" : "fun setBackgroundDrawableForDates(\r\n            backgroundForDateMap: Map<Date, Drawable>?) {\r\n        if (backgroundForDateMap == null || backgroundForDateMap.size == 0) {\r\n            return\r\n        }\r\n\r\n        mBackgroundForDateTimeMap.clear()\r\n\r\n        for (date in backgroundForDateMap.keys) {\r\n            val drawable = backgroundForDateMap[date]\r\n            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mBackgroundForDateTimeMap[dateTime] = drawable!!\r\n        }\r\n    }",
  "start_lineno" : "423",
  "methodName" : "setBackgroundDrawableForDates",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/2",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nimport android.graphics.drawable.Drawable\nfun setBackgroundDrawableForDates(\r\n            backgroundForDateMap: Map<Date, Drawable>?) {\r\n        if (backgroundForDateMap == null || backgroundForDateMap.size == 0) {\r\n            return\r\n        }\r\n\r\n        mBackgroundForDateTimeMap.clear()\r\n\r\n        for (date in backgroundForDateMap.keys) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "446",
  "ground_truth" : "\r\n        for (date in dates) {\r\n            clearBackgroundDrawableForDate(date)\r\n        }\r\n    }",
  "context" : "fun clearBackgroundDrawableForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) {\r\n            return\r\n        }\r\n\r\n        for (date in dates) {\r\n            clearBackgroundDrawableForDate(date)\r\n        }\r\n    }",
  "start_lineno" : "438",
  "methodName" : "clearBackgroundDrawableForDates",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/3",
  "prompt" : "import java.util.Date\nimport android.graphics.drawable.Drawable\nfun clearBackgroundDrawableForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "459",
  "ground_truth" : "\r\n        for (dateTime in dateTimes) {\r\n            mBackgroundForDateTimeMap.remove(dateTime)\r\n        }\r\n    }",
  "context" : "fun clearBackgroundDrawableForDateTimes(dateTimes: List<DateTime>?) {\r\n        if (dateTimes == null || dateTimes.size == 0) return\r\n\r\n        for (dateTime in dateTimes) {\r\n            mBackgroundForDateTimeMap.remove(dateTime)\r\n        }\r\n    }",
  "start_lineno" : "453",
  "methodName" : "clearBackgroundDrawableForDateTimes",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/4",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nimport android.graphics.drawable.Drawable\nfun clearBackgroundDrawableForDateTimes(dateTimes: List<DateTime>?) {\r\n        if (dateTimes == null || dateTimes.size == 0) return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "464",
  "ground_truth" : "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mBackgroundForDateTimeMap[dateTime] = drawable\r\n    }",
  "context" : "fun setBackgroundDrawableForDate(drawable: Drawable, date: Date) {\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mBackgroundForDateTimeMap[dateTime] = drawable\r\n    }",
  "start_lineno" : "461",
  "methodName" : "setBackgroundDrawableForDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/5",
  "prompt" : "import java.util.Date\nimport android.graphics.drawable.Drawable\nfun setBackgroundDrawableForDate(drawable: Drawable, date: Date) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "469",
  "ground_truth" : "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mBackgroundForDateTimeMap.remove(dateTime)\r\n    }",
  "context" : "fun clearBackgroundDrawableForDate(date: Date) {\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mBackgroundForDateTimeMap.remove(dateTime)\r\n    }",
  "start_lineno" : "466",
  "methodName" : "clearBackgroundDrawableForDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/6",
  "prompt" : "import java.util.Date\nimport android.graphics.drawable.Drawable\nfun clearBackgroundDrawableForDate(date: Date) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "497",
  "ground_truth" : "            val resource = textColorForDateMap[date]\r\n            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mTextColorForDateTimeMap[dateTime] = resource!!\r\n        }\r\n    }",
  "context" : "fun setTextColorForDates(textColorForDateMap: Map<Date, Int>?) {\r\n        if (textColorForDateMap == null || textColorForDateMap.size == 0) {\r\n            return\r\n        }\r\n\r\n        mTextColorForDateTimeMap.clear()\r\n\r\n        for (date in textColorForDateMap.keys) {\r\n            val resource = textColorForDateMap[date]\r\n            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mTextColorForDateTimeMap[dateTime] = resource!!\r\n        }\r\n    }",
  "start_lineno" : "485",
  "methodName" : "setTextColorForDates",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/7",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nimport android.graphics.Color\nfun setTextColorForDates(textColorForDateMap: Map<Date, Int>?) {\r\n        if (textColorForDateMap == null || textColorForDateMap.size == 0) {\r\n            return\r\n        }\r\n\r\n        mTextColorForDateTimeMap.clear()\r\n\r\n        for (date in textColorForDateMap.keys) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "505",
  "ground_truth" : "\r\n        for (date in dates) {\r\n            clearTextColorForDate(date)\r\n        }\r\n    }",
  "context" : "fun clearTextColorForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) return\r\n\r\n        for (date in dates) {\r\n            clearTextColorForDate(date)\r\n        }\r\n    }",
  "start_lineno" : "499",
  "methodName" : "clearTextColorForDates",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/8",
  "prompt" : "import java.util.Date\nimport android.graphics.Color\nfun clearTextColorForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "515",
  "ground_truth" : "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mTextColorForDateTimeMap[dateTime] = textColorRes\r\n    }",
  "context" : "fun setTextColorForDate(textColorRes: Int, date: Date) {\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mTextColorForDateTimeMap[dateTime] = textColorRes\r\n    }",
  "start_lineno" : "512",
  "methodName" : "setTextColorForDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/9",
  "prompt" : "import java.util.Date\nimport com.caldroid.R\nimport android.graphics.Color\nfun setTextColorForDate(textColorRes: Int, date: Date) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "520",
  "ground_truth" : "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mTextColorForDateTimeMap.remove(dateTime)\r\n    }",
  "context" : "fun clearTextColorForDate(date: Date) {\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mTextColorForDateTimeMap.remove(dateTime)\r\n    }",
  "start_lineno" : "517",
  "methodName" : "clearTextColorForDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/10",
  "prompt" : "import java.util.Date\nimport android.graphics.Color\nfun clearTextColorForDate(date: Date) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "547",
  "ground_truth" : "            arguments = caldroidSavedState\r\n        }\r\n    }",
  "context" : "fun restoreStatesFromKey(savedInstanceState: Bundle?, key: String) {\r\n        if (savedInstanceState != null && savedInstanceState.containsKey(key)) {\r\n            val caldroidSavedState = savedInstanceState.getBundle(key)\r\n            arguments = caldroidSavedState\r\n        }\r\n    }",
  "start_lineno" : "542",
  "methodName" : "restoreStatesFromKey",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/11",
  "prompt" : "import android.os.Bundle\nfun restoreStatesFromKey(savedInstanceState: Bundle?, key: String) {\r\n        if (savedInstanceState != null && savedInstanceState.containsKey(key)) {\r\n            val caldroidSavedState = savedInstanceState.getBundle(key)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "566",
  "ground_truth" : "        if (existingDialog != null) {\r\n            existingDialog.dismiss()\r\n            show(manager, dialogTag)\r\n        }\r\n    }",
  "context" : "fun restoreDialogStatesFromKey(manager: FragmentManager,\r\n                                   savedInstanceState: Bundle, key: String, dialogTag: String) {\r\n        restoreStatesFromKey(savedInstanceState, key)\r\n\r\n        val existingDialog = manager\r\n                .findFragmentByTag(dialogTag) as CaldroidFragment?\r\n        if (existingDialog != null) {\r\n            existingDialog.dismiss()\r\n            show(manager, dialogTag)\r\n        }\r\n    }",
  "start_lineno" : "556",
  "methodName" : "restoreDialogStatesFromKey",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/12",
  "prompt" : "import androidx.fragment.app.FragmentManager\nimport android.os.Bundle\nfun restoreDialogStatesFromKey(manager: FragmentManager,\r\n                                   savedInstanceState: Bundle, key: String, dialogTag: String) {\r\n        restoreStatesFromKey(savedInstanceState, key)\r\n\r\n        val existingDialog = manager\r\n                .findFragmentByTag(dialogTag) as CaldroidFragment?\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "642",
  "ground_truth" : "            caldroidListener!!.onChangeMonth(month, year)\r\n        }\r\n\r\n        refreshView()\r\n    }",
  "context" : "fun setCalendarDateTime(dateTime: DateTime) {\r\n        month = dateTime.month!!\r\n        year = dateTime.year!!\r\n\r\n        // Notify listener\r\n        if (caldroidListener != null) {\r\n            caldroidListener!!.onChangeMonth(month, year)\r\n        }\r\n\r\n        refreshView()\r\n    }",
  "start_lineno" : "632",
  "methodName" : "setCalendarDateTime",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/13",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nfun setCalendarDateTime(dateTime: DateTime) {\r\n        month = dateTime.month!!\r\n        year = dateTime.year!!\r\n\r\n        // Notify listener\r\n        if (caldroidListener != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "683",
  "ground_truth" : "            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mDisableDates!!.add(dateTime)\r\n        }\r\n\r\n    }",
  "context" : "fun setDisableDates(disableDateList: ArrayList<Date>?) {\r\n        if (disableDateList == null || disableDateList.size == 0) {\r\n            return\r\n        }\r\n\r\n        mDisableDates!!.clear()\r\n\r\n        for (date in disableDateList) {\r\n            val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n            mDisableDates!!.add(dateTime)\r\n        }\r\n\r\n    }",
  "start_lineno" : "671",
  "methodName" : "setDisableDates",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/14",
  "prompt" : "import java.util.Date\nimport java.util.ArrayList\nfun setDisableDates(disableDateList: ArrayList<Date>?) {\r\n        if (disableDateList == null || disableDateList.size == 0) {\r\n            return\r\n        }\r\n\r\n        mDisableDates!!.clear()\r\n\r\n        for (date in disableDateList) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "708",
  "ground_truth" : "            val dateTime = CalendarHelper.getDateTimeFromString(\r\n                    dateString, dateFormat)\r\n            mDisableDates!!.add(dateTime)\r\n        }\r\n    }",
  "context" : " @JvmOverloads\r\n    fun setDisableDatesFromString(disableDateStrings: ArrayList<String>?,\r\n                                  dateFormat: String? = null) {\r\n        if (disableDateStrings == null) {\r\n            return\r\n        }\r\n\r\n        mDisableDates!!.clear()\r\n\r\n        for (dateString in disableDateStrings) {\r\n            val dateTime = CalendarHelper.getDateTimeFromString(\r\n                    dateString, dateFormat)\r\n            mDisableDates!!.add(dateTime)\r\n        }\r\n    }",
  "start_lineno" : "694",
  "methodName" : "setDisableDatesFromString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/15",
  "prompt" : "import java.util.Date\nimport java.util.ArrayList\n @JvmOverloads\r\n    fun setDisableDatesFromString(disableDateStrings: ArrayList<String>?,\r\n                                  dateFormat: String? = null) {\r\n        if (disableDateStrings == null) {\r\n            return\r\n        }\r\n\r\n        mDisableDates!!.clear()\r\n\r\n        for (dateString in disableDateStrings) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "764",
  "ground_truth" : "                dateFormat)\r\n        val toDate = CalendarHelper\r\n                .getDateFromString(toDateString, dateFormat)\r\n        setSelectedDates(fromDate, toDate)\r\n    }",
  "context" : " @Throws(ParseException::class)\r\n    fun setSelectedDateStrings(fromDateString: String,\r\n                               toDateString: String, dateFormat: String) {\r\n\r\n        val fromDate = CalendarHelper.getDateFromString(fromDateString,\r\n                dateFormat)\r\n        val toDate = CalendarHelper\r\n                .getDateFromString(toDateString, dateFormat)\r\n        setSelectedDates(fromDate, toDate)\r\n    }",
  "start_lineno" : "755",
  "methodName" : "setSelectedDateStrings",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/16",
  "prompt" : "import java.util.Date\nimport java.text.ParseException\n @Throws(ParseException::class)\r\n    fun setSelectedDateStrings(fromDateString: String,\r\n                               toDateString: String, dateFormat: String) {\r\n\r\n        val fromDate = CalendarHelper.getDateFromString(fromDateString,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "776",
  "ground_truth" : "            return\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        selectedDates!!.add(dateTime)\r\n    }",
  "context" : "fun setSelectedDate(date: Date?) {\r\n        if (date == null) {\r\n            return\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        selectedDates!!.add(dateTime)\r\n    }",
  "start_lineno" : "770",
  "methodName" : "setSelectedDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/17",
  "prompt" : "import java.util.Date\nfun setSelectedDate(date: Date?) {\r\n        if (date == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "788",
  "ground_truth" : "            return\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        selectedDates!!.remove(dateTime)\r\n    }",
  "context" : "fun clearSelectedDate(date: Date?) {\r\n        if (date == null) {\r\n            return\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        selectedDates!!.remove(dateTime)\r\n    }",
  "start_lineno" : "782",
  "methodName" : "clearSelectedDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/18",
  "prompt" : "import java.util.Date\nfun clearSelectedDate(date: Date?) {\r\n        if (date == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "800",
  "ground_truth" : "            return false\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        return selectedDates!!.contains(dateTime)\r\n    }",
  "context" : "fun isSelectedDate(date: Date?): Boolean {\r\n        if (date == null) {\r\n            return false\r\n        }\r\n        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        return selectedDates!!.contains(dateTime)\r\n    }",
  "start_lineno" : "794",
  "methodName" : "isSelectedDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/19",
  "prompt" : "import java.util.Date\nfun isSelectedDate(date: Date?): Boolean {\r\n        if (date == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "813",
  "ground_truth" : "            minDateTime = null\r\n        } else {\r\n            minDateTime = CalendarHelper.convertDateToDateTime(minDate)\r\n        }\r\n    }",
  "context" : "fun setMinDate(minDate: Date?) {\r\n        if (minDate == null) {\r\n            minDateTime = null\r\n        } else {\r\n            minDateTime = CalendarHelper.convertDateToDateTime(minDate)\r\n        }\r\n    }",
  "start_lineno" : "807",
  "methodName" : "setMinDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/20",
  "prompt" : "import java.util.Date\nfun setMinDate(minDate: Date?) {\r\n        if (minDate == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "829",
  "ground_truth" : "        } else {\r\n            minDateTime = CalendarHelper.getDateTimeFromString(minDateString,\r\n                    dateFormat)\r\n        }\r\n    }",
  "context" : "fun setMinDateFromString(minDateString: String?, dateFormat: String) {\r\n        if (minDateString == null) {\r\n            setMinDate(null)\r\n        } else {\r\n            minDateTime = CalendarHelper.getDateTimeFromString(minDateString,\r\n                    dateFormat)\r\n        }\r\n    }",
  "start_lineno" : "822",
  "methodName" : "setMinDateFromString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/21",
  "prompt" : "import java.util.Date\nfun setMinDateFromString(minDateString: String?, dateFormat: String) {\r\n        if (minDateString == null) {\r\n            setMinDate(null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "842",
  "ground_truth" : "            maxDateTime = null\r\n        } else {\r\n            maxDateTime = CalendarHelper.convertDateToDateTime(maxDate)\r\n        }\r\n    }",
  "context" : "fun setMaxDate(maxDate: Date?) {\r\n        if (maxDate == null) {\r\n            maxDateTime = null\r\n        } else {\r\n            maxDateTime = CalendarHelper.convertDateToDateTime(maxDate)\r\n        }\r\n    }",
  "start_lineno" : "836",
  "methodName" : "setMaxDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/22",
  "prompt" : "import java.util.Date\nfun setMaxDate(maxDate: Date?) {\r\n        if (maxDate == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "858",
  "ground_truth" : "        } else {\r\n            maxDateTime = CalendarHelper.getDateTimeFromString(maxDateString,\r\n                    dateFormat)\r\n        }\r\n    }",
  "context" : "fun setMaxDateFromString(maxDateString: String?, dateFormat: String) {\r\n        if (maxDateString == null) {\r\n            setMaxDate(null)\r\n        } else {\r\n            maxDateTime = CalendarHelper.getDateTimeFromString(maxDateString,\r\n                    dateFormat)\r\n        }\r\n    }",
  "start_lineno" : "851",
  "methodName" : "setMaxDateFromString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/23",
  "prompt" : "import java.util.Date\nfun setMaxDateFromString(maxDateString: String?, dateFormat: String) {\r\n        if (maxDateString == null) {\r\n            setMaxDate(null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "988",
  "ground_truth" : "        datePagerAdapters[currentVirtualPosition].run {\r\n            updateToday()\r\n            notifyDataSetChanged()\r\n        }\r\n    }",
  "context" : "fun refreshViewOnlyCurrentPage() {\r\n        // If month and year is not yet initialized, refreshView doesn't do\r\n        // anything\r\n        if (month == -1 || year == -1) {\r\n            return\r\n        }\r\n\r\n        refreshMonthTitleTextView()\r\n\r\n        datePagerAdapters[currentVirtualPosition].run {\r\n            updateToday()\r\n            notifyDataSetChanged()\r\n        }\r\n    }",
  "start_lineno" : "975",
  "methodName" : "refreshViewOnlyCurrentPage",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/24",
  "prompt" : "import android.widget.TextView\nimport android.view.View\nfun refreshViewOnlyCurrentPage() {\r\n        // If month and year is not yet initialized, refreshView doesn't do\r\n        // anything\r\n        if (month == -1 || year == -1) {\r\n            return\r\n        }\r\n\r\n        refreshMonthTitleTextView()\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1107",
  "ground_truth" : "        }\r\n        super.onDestroyView()\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        if (dialog != null && retainInstance) {\r\n            dialog!!.setDismissMessage(null)\r\n        }\r\n        super.onDestroyView()\r\n    }",
  "start_lineno" : "1102",
  "methodName" : "onDestroyView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/25",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r\n        if (dialog != null && retainInstance) {\r\n            dialog!!.setDismissMessage(null)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1176",
  "ground_truth" : "        // Client should perform customization for buttons and textviews here\r\n        if (caldroidListener != null) {\r\n            caldroidListener!!.onCaldroidViewCreated()\r\n        }\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // Inform client that all views are created and not null\r\n        // Client should perform customization for buttons and textviews here\r\n        if (caldroidListener != null) {\r\n            caldroidListener!!.onCaldroidViewCreated()\r\n        }\r\n    }",
  "start_lineno" : "1168",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/26",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // Inform client that all views are created and not null\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1309",
  "ground_truth" : "            this.currentDateTime = dateTime\r\n            setCalendarDateTime(currentDateTime!!)\r\n        }",
  "context" : "fun setCurrentDateTime(dateTime: DateTime) {\r\n            this.currentDateTime = dateTime\r\n            setCalendarDateTime(currentDateTime!!)\r\n        }",
  "start_lineno" : "1306",
  "methodName" : "setCurrentDateTime",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/27",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nfun setCurrentDateTime(dateTime: DateTime) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1408",
  "ground_truth" : "\r\n            // Refresh dateInMonthsList\r\n            dateInMonthsList.clear()\r\n            dateInMonthsList.addAll(currentAdapter.getDatetimeList())\r\n        }",
  "context" : "override fun onPageSelected(position: Int) {\r\n            refreshAdapters(position)\r\n\r\n            // Update current date time of the selected page\r\n            setCalendarDateTime(currentDateTime!!)\r\n\r\n            // Update all the dates inside current month\r\n            val currentAdapter = caldroidGridAdapters!![position % CaldroidFragment.NUMBER_OF_PAGES]\r\n\r\n            // Refresh dateInMonthsList\r\n            dateInMonthsList.clear()\r\n            dateInMonthsList.addAll(currentAdapter.getDatetimeList())\r\n        }",
  "start_lineno" : "1396",
  "methodName" : "onPageSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/28",
  "prompt" : "import hirondelle.date4j.DateTime\nimport java.util.Date\nimport com.caldroid.R\nimport android.text.format.Time\noverride fun onPageSelected(position: Int) {\r\n            refreshAdapters(position)\r\n\r\n            // Update current date time of the selected page\r\n            setCalendarDateTime(currentDateTime!!)\r\n\r\n            // Update all the dates inside current month\r\n            val currentAdapter = caldroidGridAdapters!![position % CaldroidFragment.NUMBER_OF_PAGES]\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1499",
  "ground_truth" : "\r\n            f.arguments = args\r\n\r\n            return f\r\n        }",
  "context" : "fun newInstance(dialogTitle: String, month: Int,\r\n                        year: Int): CaldroidFragment {\r\n            val f = CaldroidFragment()\r\n\r\n            // Supply num input as an argument.\r\n            val args = Bundle()\r\n            args.putString(DIALOG_TITLE, dialogTitle)\r\n            args.putInt(MONTH, month)\r\n            args.putInt(YEAR, year)\r\n\r\n            f.arguments = args\r\n\r\n            return f\r\n        }",
  "start_lineno" : "1486",
  "methodName" : "newInstance",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/29",
  "prompt" : "import com.caldroid.R\nimport android.os.Bundle\nfun newInstance(dialogTitle: String, month: Int,\r\n                        year: Int): CaldroidFragment {\r\n            val f = CaldroidFragment()\r\n\r\n            // Supply num input as an argument.\r\n            val args = Bundle()\r\n            args.putString(DIALOG_TITLE, dialogTitle)\r\n            args.putInt(MONTH, month)\r\n            args.putInt(YEAR, year)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val firstMonthTime\nval monthYearStringBuilder\nval monthYearFormatter\nvar leftArrowButton Button?\nvar rightArrowButton Button?\nvar monthTitleTextView TextView?\nvar weekdayGridView GridView?\nvar dateViewPager InfiniteViewPager?\nvar pageChangeListener DatePageChangeListener?\nvar fragments ArrayList<DateGridFragment>?\nvar themeResource\nvar dialogTitle String?\nvar month\nvar year\nvar mDisableDates ArrayList<DateTime>?\nvar selectedDates ArrayList<DateTime>?\nvar minDateTime DateTime?\nvar maxDateTime DateTime?\nvar dateInMonthsList ArrayList<DateTime>\nvar mCaldroidData MutableMap<String, Any?>\nvar extraData Map<String, Any>\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nvar startDayOfWeek\nvar sixWeeksInCalendar\nvar datePagerAdapters\nvar mEnableSwipe\nvar mShowNavigationArrows\nvar enableClickOnDisabledDates\nvar squareTextViewCell Boolean\nvar dateItemClickListener OnItemClickListener?\nvar dateItemLongClickListener OnItemLongClickListener?\nvar caldroidListener CaldroidListener?\nval savedStates Bundle\nval currentVirtualPosition Int\nvar isShowNavigationArrows Boolean\nvar isEnableSwipe Boolean\nvar isSixWeeksInCalendar Boolean\nval gridViewRes Int\nval daysOfWeek ArrayList<String>\nvar currentPage\nvar currentDateTime DateTime?\nvar caldroidGridAdapters ArrayList<CaldroidGridAdapter>?\nvar SUNDAY\nvar MONDAY\nvar TUESDAY\nvar WEDNESDAY\nvar THURSDAY\nvar FRIDAY\nvar SATURDAY\nval MONTH_YEAR_FLAG\nval NUMBER_OF_PAGES\nvar disabledBackgroundDrawable\nvar disabledTextColor\nval DIALOG_TITLE\nval MONTH\nval YEAR\nval SHOW_NAVIGATION_ARROWS\nval DISABLE_DATES\nval SELECTED_DATES\nval MIN_DATE\nval MAX_DATE\nval ENABLE_SWIPE\nval START_DAY_OF_WEEK\nval SIX_WEEKS_IN_CALENDAR\nval ENABLE_CLICK_ON_DISABLED_DATES\nval SQUARE_TEXT_VIEW_CELL\nval THEME_RESOURCE\nval _MIN_DATE_TIME\nval _MAX_DATE_TIME\nval _BACKGROUND_FOR_DATETIME_MAP\nval _TEXT_COLOR_FOR_DATETIME_MAP",
  "app_type" : "notes",
  "end_lineno" : "1504",
  "ground_truth" : "            val wrapped = ContextThemeWrapper(context, themeResource)\r\n            return origInflater.cloneInContext(wrapped)\r\n        }",
  "context" : "fun getThemeInflater(context: Context?, origInflater: LayoutInflater, themeResource: Int): LayoutInflater {\r\n            val wrapped = ContextThemeWrapper(context, themeResource)\r\n            return origInflater.cloneInContext(wrapped)\r\n        }",
  "start_lineno" : "1501",
  "methodName" : "getThemeInflater",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt",
  "task_id" : "aaf-easydiary/30",
  "prompt" : "import com.caldroid.R\nimport android.view.LayoutInflater\nimport android.content.Context\nfun getThemeInflater(context: Context?, origInflater: LayoutInflater, themeResource: Int): LayoutInflater {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "16",
  "ground_truth" : "        activityResultLauncher.launch(intent)\r\n        builder.activity.overridePendingTransition(R.anim.activity_anim_bottom_to_top, R.anim.activity_anim_not_change)\r\n    }",
  "context" : "private fun start(activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        val intent = Intent(builder.activity, PickPhotoActivity::class.java)\r\n        activityResultLauncher.launch(intent)\r\n        builder.activity.overridePendingTransition(R.anim.activity_anim_bottom_to_top, R.anim.activity_anim_not_change)\r\n    }",
  "start_lineno" : "12",
  "methodName" : "start",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/31",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nimport android.app.Activity\nprivate fun start(activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        val intent = Intent(builder.activity, PickPhotoActivity::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "            pickModel.pickPhotoSize = photoSize\r\n            return this\r\n        }",
  "context" : "fun setPickPhotoSize(photoSize: Int): Builder {\r\n            pickModel.pickPhotoSize = photoSize\r\n            return this\r\n        }",
  "start_lineno" : "22",
  "methodName" : "setPickPhotoSize",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/32",
  "prompt" : "fun setPickPhotoSize(photoSize: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "            pickModel.hasPhotoSize = hasSize\r\n            return this\r\n        }",
  "context" : "fun setHasPhotoSize(hasSize: Int): Builder {\r\n            pickModel.hasPhotoSize = hasSize\r\n            return this\r\n        }",
  "start_lineno" : "27",
  "methodName" : "setHasPhotoSize",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/33",
  "prompt" : "fun setHasPhotoSize(hasSize: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            pickModel.allPhotoSize = allSize\r\n            return this\r\n        }",
  "context" : "fun setAllPhotoSize(allSize: Int): Builder {\r\n            pickModel.allPhotoSize = allSize\r\n            return this\r\n        }",
  "start_lineno" : "32",
  "methodName" : "setAllPhotoSize",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/34",
  "prompt" : "fun setAllPhotoSize(allSize: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "            pickModel.spanCount = spanCount\r\n            return this\r\n        }",
  "context" : "fun setSpanCount(spanCount: Int): Builder {\r\n            pickModel.spanCount = spanCount\r\n            return this\r\n        }",
  "start_lineno" : "37",
  "methodName" : "setSpanCount",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/35",
  "prompt" : "fun setSpanCount(spanCount: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "            pickModel.isShowCamera = showCamera\r\n            return this\r\n        }",
  "context" : "fun setShowCamera(showCamera: Boolean): Builder {\r\n            pickModel.isShowCamera = showCamera\r\n            return this\r\n        }",
  "start_lineno" : "42",
  "methodName" : "setShowCamera",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/36",
  "prompt" : "fun setShowCamera(showCamera: Boolean): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "            pickModel.isClickSelectable = clickSelectable\r\n            return this\r\n        }",
  "context" : "fun setClickSelectable(clickSelectable: Boolean): Builder {\r\n            pickModel.isClickSelectable = clickSelectable\r\n            return this\r\n        }",
  "start_lineno" : "48",
  "methodName" : "setClickSelectable",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/37",
  "prompt" : "fun setClickSelectable(clickSelectable: Boolean): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "56",
  "ground_truth" : "            pickModel.toolbarColor = toolbarColor\r\n            return this\r\n        }",
  "context" : "fun setToolbarColor(toolbarColor: Int): Builder {\r\n            pickModel.toolbarColor = toolbarColor\r\n            return this\r\n        }",
  "start_lineno" : "53",
  "methodName" : "setToolbarColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/38",
  "prompt" : "fun setToolbarColor(toolbarColor: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "61",
  "ground_truth" : "            pickModel.statusBarColor = statusBarColor\r\n            return this\r\n        }",
  "context" : "fun setStatusBarColor(statusBarColor: Int): Builder {\r\n            pickModel.statusBarColor = statusBarColor\r\n            return this\r\n        }",
  "start_lineno" : "58",
  "methodName" : "setStatusBarColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/39",
  "prompt" : "fun setStatusBarColor(statusBarColor: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "            pickModel.toolbarTextColor = toolbarTextColor\r\n            return this\r\n        }",
  "context" : "fun setToolbarTextColor(toolbarTextColor: Int): Builder {\r\n            pickModel.toolbarTextColor = toolbarTextColor\r\n            return this\r\n        }",
  "start_lineno" : "63",
  "methodName" : "setToolbarTextColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/40",
  "prompt" : "fun setToolbarTextColor(toolbarTextColor: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "            pickModel.selectIconColor = selectIconColor\r\n            return this\r\n        }",
  "context" : "fun setSelectIconColor(selectIconColor: Int): Builder {\r\n            pickModel.selectIconColor = selectIconColor\r\n            return this\r\n        }",
  "start_lineno" : "68",
  "methodName" : "setSelectIconColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/41",
  "prompt" : "fun setSelectIconColor(selectIconColor: Int): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "            pickModel.lightStatusBar = lightStatusBar\r\n            return this\r\n        }",
  "context" : "fun setLightStatusBar(lightStatusBar: Boolean): Builder {\r\n            pickModel.lightStatusBar = lightStatusBar\r\n            return this\r\n        }",
  "start_lineno" : "73",
  "methodName" : "setLightStatusBar",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/42",
  "prompt" : "fun setLightStatusBar(lightStatusBar: Boolean): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "            pickModel.isShowGif = showGif\r\n            return this\r\n        }",
  "context" : "fun setShowGif(showGif: Boolean): Builder {\r\n            pickModel.isShowGif = showGif\r\n            return this\r\n        }",
  "start_lineno" : "78",
  "methodName" : "setShowGif",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/43",
  "prompt" : "fun setShowGif(showGif: Boolean): Builder {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pickModel",
  "app_type" : "notes",
  "end_lineno" : "91",
  "ground_truth" : "            GlobalData.model = pickModel\r\n            return PickPhotoViewEx(this)\r\n        }",
  "context" : "private fun create(): PickPhotoViewEx {\r\n            GlobalData.model = pickModel\r\n            return PickPhotoViewEx(this)\r\n        }",
  "start_lineno" : "88",
  "methodName" : "create",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt",
  "task_id" : "aaf-easydiary/44",
  "prompt" : "private fun create(): PickPhotoViewEx {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val handler",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "                isSdkVersionSupported() -> startListeningFingerprint(activity)\r\n            }\r\n        }",
  "context" : "fun startListening(activity: AppCompatActivity) {\r\n            when {\r\n                isSdkVersionSupported() && isBiometricPromptEnabled() -> startListeningBiometric(activity)\r\n                isSdkVersionSupported() -> startListeningFingerprint(activity)\r\n            }\r\n        }",
  "start_lineno" : "46",
  "methodName" : "startListening",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt",
  "task_id" : "aaf-easydiary/45",
  "prompt" : "import androidx.biometric.BiometricPrompt\nimport androidx.appcompat.app.AppCompatActivity\nimport android.app.Activity\nfun startListening(activity: AppCompatActivity) {\r\n            when {\r\n                isSdkVersionSupported() && isBiometricPromptEnabled() -> startListeningBiometric(activity)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val handler",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "                showBiometricPrompt(activity)\r\n            }\r\n        }",
  "context" : "fun startListeningBiometric(activity: AppCompatActivity) {\r\n            if (isBiometricManagerEnabled() && canAuthenticateWithBiometrics(activity)) {\r\n                showBiometricPrompt(activity)\r\n            }\r\n        }",
  "start_lineno" : "53",
  "methodName" : "startListeningBiometric",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt",
  "task_id" : "aaf-easydiary/46",
  "prompt" : "import androidx.appcompat.app.AppCompatActivity\nimport android.hardware.biometrics.BiometricManager\nimport android.app.Activity\nfun startListeningBiometric(activity: AppCompatActivity) {\r\n            if (isBiometricManagerEnabled() && canAuthenticateWithBiometrics(activity)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val handler",
  "app_type" : "notes",
  "end_lineno" : "98",
  "ground_truth" : "            val fingerprintManager = FingerprintManagerCompat.from(context)\r\n            return fingerprintManager.isHardwareDetected\r\n        }",
  "context" : " @RequiresApi(Build.VERSION_CODES.M)\r\n        @Suppress(\"DEPRECATION\")\r\n        fun isHardwareSupported(context: Context): Boolean {\r\n            val fingerprintManager = FingerprintManagerCompat.from(context)\r\n            return fingerprintManager.isHardwareDetected\r\n        }",
  "start_lineno" : "93",
  "methodName" : "isHardwareSupported",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt",
  "task_id" : "aaf-easydiary/47",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.content.Context\n @RequiresApi(Build.VERSION_CODES.M)\r\n        @Suppress(\"DEPRECATION\")\r\n        fun isHardwareSupported(context: Context): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val handler",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "            val fingerprintManager = FingerprintManagerCompat.from(context)\r\n            return fingerprintManager.hasEnrolledFingerprints()\r\n        }",
  "context" : " @RequiresApi(Build.VERSION_CODES.M)\r\n        @Suppress(\"DEPRECATION\")\r\n        fun isFingerprintAvailable(context: Context): Boolean {\r\n            val fingerprintManager = FingerprintManagerCompat.from(context)\r\n            return fingerprintManager.hasEnrolledFingerprints()\r\n        }",
  "start_lineno" : "114",
  "methodName" : "isFingerprintAvailable",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt",
  "task_id" : "aaf-easydiary/48",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.content.Context\n @RequiresApi(Build.VERSION_CODES.M)\r\n        @Suppress(\"DEPRECATION\")\r\n        fun isFingerprintAvailable(context: Context): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val handler",
  "app_type" : "notes",
  "end_lineno" : "145",
  "ground_truth" : "                biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS\r\n            } else false\r\n        }",
  "context" : " @RequiresApi(Build.VERSION_CODES.Q)\r\n        @Suppress(\"DEPRECATION\")\r\n        private fun canAuthenticateWithBiometrics(context: Context): Boolean {\r\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\r\n            return if (biometricManager != null) {\r\n                biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS\r\n            } else false\r\n        }",
  "start_lineno" : "138",
  "methodName" : "canAuthenticateWithBiometrics",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt",
  "task_id" : "aaf-easydiary/49",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.hardware.biometrics.BiometricManager\nimport android.content.Context\n @RequiresApi(Build.VERSION_CODES.Q)\r\n        @Suppress(\"DEPRECATION\")\r\n        private fun canAuthenticateWithBiometrics(context: Context): Boolean {\r\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\r\n            return if (biometricManager != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "79",
  "ground_truth" : "            inSampleSize = Math.min(ratioH, ratioW).toInt()\r\n        }\r\n        inSampleSize = Math.max(1, inSampleSize)\r\n        return inSampleSize\r\n    }",
  "context" : "fun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\r\n        val h = options.outHeight\r\n        val w = options.outWidth\r\n        var inSampleSize = 0\r\n        if (h > reqHeight || w > reqWidth) {\r\n            val ratioW = w.toFloat() / reqWidth\r\n            val ratioH = h.toFloat() / reqHeight\r\n            inSampleSize = Math.min(ratioH, ratioW).toInt()\r\n        }\r\n        inSampleSize = Math.max(1, inSampleSize)\r\n        return inSampleSize\r\n    }",
  "start_lineno" : "68",
  "methodName" : "calculateInSampleSize",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BitmapUtils.kt",
  "task_id" : "aaf-easydiary/50",
  "prompt" : "import java.io\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nfun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\r\n        val h = options.outHeight\r\n        val w = options.outWidth\r\n        var inSampleSize = 0\r\n        if (h > reqHeight || w > reqWidth) {\r\n            val ratioW = w.toFloat() / reqWidth\r\n            val ratioH = h.toFloat() / reqHeight\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "122",
  "ground_truth" : "        }\r\n        false -> {\r\n            BitmapFactory.decodeResource(activity.resources, android.R.drawable.ic_menu_gallery)\r\n        }\r\n    }",
  "context" : "fun decodeFile(activity: Activity, imagePath: String?, options: BitmapFactory.Options? = null): Bitmap = when (imagePath != null && File(imagePath).exists()) {\r\n        true -> {\r\n            options?.let { BitmapFactory.decodeFile(imagePath, options) } ?: BitmapFactory.decodeFile(imagePath)\r\n        }\r\n        false -> {\r\n            BitmapFactory.decodeResource(activity.resources, android.R.drawable.ic_menu_gallery)\r\n        }\r\n    }",
  "start_lineno" : "115",
  "methodName" : "decodeFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BitmapUtils.kt",
  "task_id" : "aaf-easydiary/51",
  "prompt" : "import java.io\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nimport android.app.Activity\nfun decodeFile(activity: Activity, imagePath: String?, options: BitmapFactory.Options? = null): Bitmap = when (imagePath != null && File(imagePath).exists()) {\r\n        true -> {\r\n            options?.let { BitmapFactory.decodeFile(imagePath, options) } ?: BitmapFactory.decodeFile(imagePath)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "241",
  "ground_truth" : "        val bitmap = Bitmap.createBitmap(scrollView.width, scrollView.getChildAt(0).height, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(bitmap)\r\n        scrollView.draw(canvas)\r\n        return bitmap\r\n    }",
  "context" : "fun diaryViewGroupToBitmap(view: ViewGroup): Bitmap {\r\n        val scrollView = view.getChildAt(0) as ViewGroup\r\n        val bitmap = Bitmap.createBitmap(scrollView.width, scrollView.getChildAt(0).height, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(bitmap)\r\n        scrollView.draw(canvas)\r\n        return bitmap\r\n    }",
  "start_lineno" : "235",
  "methodName" : "diaryViewGroupToBitmap",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BitmapUtils.kt",
  "task_id" : "aaf-easydiary/52",
  "prompt" : "import android.view.ViewGroup\nimport android.graphics.Bitmap\nfun diaryViewGroupToBitmap(view: ViewGroup): Bitmap {\r\n        val scrollView = view.getChildAt(0) as ViewGroup\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "            val red = Color.red(color)\r\n            val green = Color.green(color)\r\n            val blue = Color.blue(color)\r\n            return Color.argb(alpha, red, green, blue)\r\n        }",
  "context" : " @ColorInt\r\n        fun adjustAlpha(@ColorInt color: Int, factor: Float): Int {\r\n            val alpha = Math.round(Color.alpha(color) * factor)\r\n            val red = Color.red(color)\r\n            val green = Color.green(color)\r\n            val blue = Color.blue(color)\r\n            return Color.argb(alpha, red, green, blue)\r\n        }",
  "start_lineno" : "8",
  "methodName" : "adjustAlpha",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\ColorUtils.kt",
  "task_id" : "aaf-easydiary/53",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.graphics.Color\n @ColorInt\r\n        fun adjustAlpha(@ColorInt color: Int, factor: Float): Int {\r\n            val alpha = Math.round(Color.alpha(color) * factor)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DATE_PATTERN_DASH\nval DATE_TIME_PATTERN_WITHOUT_DASH",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "        val simpleDateFormat = SimpleDateFormat.getDateInstance(dateFormat, locale)\r\n        return simpleDateFormat.format(date)\r\n    }",
  "context" : "fun getDateStringFromTimeMillis(timeMillis: Long, dateFormat: Int = SimpleDateFormat.FULL, locale: Locale = Locale.getDefault()): String {\r\n        val date = Date(timeMillis)\r\n        val simpleDateFormat = SimpleDateFormat.getDateInstance(dateFormat, locale)\r\n        return simpleDateFormat.format(date)\r\n    }",
  "start_lineno" : "14",
  "methodName" : "getDateStringFromTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt",
  "task_id" : "aaf-easydiary/54",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nfun getDateStringFromTimeMillis(timeMillis: Long, dateFormat: Int = SimpleDateFormat.FULL, locale: Locale = Locale.getDefault()): String {\r\n        val date = Date(timeMillis)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DATE_PATTERN_DASH\nval DATE_TIME_PATTERN_WITHOUT_DASH",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "        val simpleDateFormat = SimpleDateFormat.getTimeInstance(timeFormat, locale)\r\n        return simpleDateFormat.format(date)\r\n    }",
  "context" : "fun getTimeStringFromTimeMillis(timeMillis: Long, timeFormat: Int = SimpleDateFormat.SHORT, locale: Locale = Locale.getDefault()): String {\r\n        val date = Date(timeMillis)\r\n        val simpleDateFormat = SimpleDateFormat.getTimeInstance(timeFormat, locale)\r\n        return simpleDateFormat.format(date)\r\n    }",
  "start_lineno" : "20",
  "methodName" : "getTimeStringFromTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt",
  "task_id" : "aaf-easydiary/55",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nfun getTimeStringFromTimeMillis(timeMillis: Long, timeFormat: Int = SimpleDateFormat.SHORT, locale: Locale = Locale.getDefault()): String {\r\n        val date = Date(timeMillis)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DATE_PATTERN_DASH\nval DATE_TIME_PATTERN_WITHOUT_DASH",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "                locale\r\n            )\r\n        }\r\n        return simpleDateFormat.format(date)\r\n    }",
  "context" : "fun getDateTimeStringFromTimeMillis(\r\n        timeMillis: Long,\r\n        dateFormat: Int = SimpleDateFormat.FULL,\r\n        timeFormat: Int = SimpleDateFormat.SHORT,\r\n        dateTimeFormat: DateTimeFormat? = null,\r\n        locale: Locale = Locale.getDefault()\r\n    ): String {\r\n        val date = Date(timeMillis)\r\n        val simpleDateFormat = when (dateTimeFormat == null) {\r\n            true -> SimpleDateFormat.getDateTimeInstance(dateFormat, timeFormat, locale)\r\n            false -> SimpleDateFormat.getDateTimeInstance(\r\n                dateTimeFormat.getDateKey(),\r\n                dateTimeFormat.getTimeKey(),\r\n                locale\r\n            )\r\n        }\r\n        return simpleDateFormat.format(date)\r\n    }",
  "start_lineno" : "26",
  "methodName" : "getDateTimeStringFromTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt",
  "task_id" : "aaf-easydiary/56",
  "prompt" : "import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport me.blog.korn123.easydiary.enums.DateTimeFormat\nfun getDateTimeStringFromTimeMillis(\r\n        timeMillis: Long,\r\n        dateFormat: Int = SimpleDateFormat.FULL,\r\n        timeFormat: Int = SimpleDateFormat.SHORT,\r\n        dateTimeFormat: DateTimeFormat? = null,\r\n        locale: Locale = Locale.getDefault()\r\n    ): String {\r\n        val date = Date(timeMillis)\r\n        val simpleDateFormat = when (dateTimeFormat == null) {\r\n            true -> SimpleDateFormat.getDateTimeInstance(dateFormat, timeFormat, locale)\r\n            false -> SimpleDateFormat.getDateTimeInstance(\r\n                dateTimeFormat.getDateKey(),\r\n                dateTimeFormat.getTimeKey(),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DATE_PATTERN_DASH\nval DATE_TIME_PATTERN_WITHOUT_DASH",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }",
  "context" : "fun getCurrentDateTime(pattern: String): String {\r\n        val date = Date()\r\n        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }",
  "start_lineno" : "129",
  "methodName" : "getCurrentDateTime",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt",
  "task_id" : "aaf-easydiary/57",
  "prompt" : "import java.util.Date\nfun getCurrentDateTime(pattern: String): String {\r\n        val date = Date()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DATE_PATTERN_DASH\nval DATE_TIME_PATTERN_WITHOUT_DASH",
  "app_type" : "notes",
  "end_lineno" : "139",
  "ground_truth" : "        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }",
  "context" : "fun timeMillisToDateTime(timeMillis: Long, pattern: String): String {\r\n        val date = Date(timeMillis)\r\n        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }",
  "start_lineno" : "135",
  "methodName" : "timeMillisToDateTime",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt",
  "task_id" : "aaf-easydiary/58",
  "prompt" : "import java.util.Date\nfun timeMillisToDateTime(timeMillis: Long, pattern: String): String {\r\n        val date = Date(timeMillis)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "//        return if (!diary.title.isNullOrEmpty()) diary.title!! else StringUtils.abbreviate(diary.contents, 10)\r\n        return if (diary.title.isNullOrEmpty()) diary.contents!! else diary.title!!\r\n    }",
  "context" : "fun summaryDiaryLabel(diary: Diary): String {\r\n//        return if (!diary.title.isNullOrEmpty()) diary.title!! else StringUtils.abbreviate(diary.contents, 10)\r\n        return if (diary.title.isNullOrEmpty()) diary.contents!! else diary.title!!\r\n    }",
  "start_lineno" : "102",
  "methodName" : "summaryDiaryLabel",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/59",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nfun summaryDiaryLabel(diary: Diary): String {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "117",
  "ground_truth" : "                index = contents.indexOf(searchWord, index.plus(1), true)\r\n            }\r\n        }\r\n        return indexes\r\n    }",
  "context" : "fun searchWordIndexes(contents: String, searchWord: String): List<Int> {\r\n        val indexes = arrayListOf<Int>()\r\n        if (searchWord.isNotEmpty()) {\r\n            var index = contents.indexOf(searchWord, 0, true)\r\n            while (index >= 0) {\r\n                indexes.add(index)\r\n                index = contents.indexOf(searchWord, index.plus(1), true)\r\n            }\r\n        }\r\n        return indexes\r\n    }",
  "start_lineno" : "107",
  "methodName" : "searchWordIndexes",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/60",
  "prompt" : "fun searchWordIndexes(contents: String, searchWord: String): List<Int> {\r\n        val indexes = arrayListOf<Int>()\r\n        if (searchWord.isNotEmpty()) {\r\n            var index = contents.indexOf(searchWord, 0, true)\r\n            while (index >= 0) {\r\n                indexes.add(index)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "141",
  "ground_truth" : "            val intRange = \"\\\\d+\\\\.?\\\\d+\".toRegex().find(it)?.range ?: IntRange(0, 0)\r\n            number = string.substring(intRange).toFloat()\r\n        }\r\n        return number\r\n    }",
  "context" : "fun findNumber(string: String?): Float {\r\n        var number = 0f\r\n        string?.let {\r\n            val intRange = \"\\\\d+\\\\.?\\\\d+\".toRegex().find(it)?.range ?: IntRange(0, 0)\r\n            number = string.substring(intRange).toFloat()\r\n        }\r\n        return number\r\n    }",
  "start_lineno" : "134",
  "methodName" : "findNumber",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/61",
  "prompt" : "fun findNumber(string: String?): Float {\r\n        var number = 0f\r\n        string?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "158",
  "ground_truth" : "        cal.set(Calendar.MINUTE, if (isFullHour) 59 else minute)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else second)\r\n        cal.set(Calendar.MILLISECOND, 0)\r\n        return cal.timeInMillis\r\n    }",
  "context" : "fun datePickerToTimeMillis(dayOfMonth: Int, month: Int, year: Int, isFullHour: Boolean = false, hour: Int = 0, minute: Int = 0, second: Int = 0): Long {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.YEAR, year)\r\n        cal.set(Calendar.MONTH, month)\r\n        cal.set(Calendar.DAY_OF_MONTH, dayOfMonth)\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else hour)\r\n        cal.set(Calendar.MINUTE, if (isFullHour) 59 else minute)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else second)\r\n        cal.set(Calendar.MILLISECOND, 0)\r\n        return cal.timeInMillis\r\n    }",
  "start_lineno" : "148",
  "methodName" : "datePickerToTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/62",
  "prompt" : "import me.blog.korn123.easydiary.R\nfun datePickerToTimeMillis(dayOfMonth: Int, month: Int, year: Int, isFullHour: Boolean = false, hour: Int = 0, minute: Int = 0, second: Int = 0): Long {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.YEAR, year)\r\n        cal.set(Calendar.MONTH, month)\r\n        cal.set(Calendar.DAY_OF_MONTH, dayOfMonth)\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else hour)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "170",
  "ground_truth" : "        if (amount != 0) {\r\n            calendar.add(field, amount)\r\n        }\r\n        return calendar.timeInMillis\r\n    }",
  "context" : "fun convDateToTimeMillis(field: Int, amount: Int, isZeroHour: Boolean = true, isZeroMinute: Boolean = true, isZeroSecond: Boolean = true, isZeroMilliSecond: Boolean = true): Long {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r\n        if (isZeroHour) calendar.set(Calendar.HOUR_OF_DAY, 0)\r\n        if (isZeroMinute) calendar.set(Calendar.MINUTE, 0)\r\n        if (isZeroSecond) calendar.set(Calendar.SECOND, 0)\r\n        if (isZeroMilliSecond) calendar.set(Calendar.MILLISECOND, 0)\r\n        if (amount != 0) {\r\n            calendar.add(field, amount)\r\n        }\r\n        return calendar.timeInMillis\r\n    }",
  "start_lineno" : "160",
  "methodName" : "convDateToTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/63",
  "prompt" : "import me.blog.korn123.easydiary.R\nfun convDateToTimeMillis(field: Int, amount: Int, isZeroHour: Boolean = true, isZeroMinute: Boolean = true, isZeroSecond: Boolean = true, isZeroMilliSecond: Boolean = true): Long {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r\n        if (isZeroHour) calendar.set(Calendar.HOUR_OF_DAY, 0)\r\n        if (isZeroMinute) calendar.set(Calendar.MINUTE, 0)\r\n        if (isZeroSecond) calendar.set(Calendar.SECOND, 0)\r\n        if (isZeroMilliSecond) calendar.set(Calendar.MILLISECOND, 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "179",
  "ground_truth" : "        cal.set(Calendar.MINUTE, if (isFullHour) 59 else 0)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else 0)\r\n        if (addYears != 0) cal.add(Calendar.YEAR, addYears)\r\n        return cal.timeInMillis\r\n    }",
  "context" : "fun convDateToTimeMillis(isFullHour: Boolean = false, addYears: Int = 0): Long {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else 0)\r\n        cal.set(Calendar.MINUTE, if (isFullHour) 59 else 0)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else 0)\r\n        if (addYears != 0) cal.add(Calendar.YEAR, addYears)\r\n        return cal.timeInMillis\r\n    }",
  "start_lineno" : "172",
  "methodName" : "convDateToTimeMillis",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/64",
  "prompt" : "import me.blog.korn123.easydiary.R\nfun convDateToTimeMillis(isFullHour: Boolean = false, addYears: Int = 0): Long {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "192",
  "ground_truth" : "        cal.set(Calendar.MINUTE, if (isFullHour) 59 else 0)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else 0)\r\n        if (amount != 0) cal.add(field, amount)\r\n        return cal\r\n    }",
  "context" : "fun getCalendarInstance(isFullHour: Boolean = false, field: Int, amount: Int): Calendar {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else 0)\r\n        cal.set(Calendar.MINUTE, if (isFullHour) 59 else 0)\r\n        cal.set(Calendar.SECOND, if (isFullHour) 59 else 0)\r\n        if (amount != 0) cal.add(field, amount)\r\n        return cal\r\n    }",
  "start_lineno" : "185",
  "methodName" : "getCalendarInstance",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/65",
  "prompt" : "import me.blog.korn123.easydiary.R\nfun getCalendarInstance(isFullHour: Boolean = false, field: Int, amount: Int): Calendar {\r\n        val cal = Calendar.getInstance(Locale.getDefault())\r\n        cal.set(Calendar.HOUR_OF_DAY, if (isFullHour) 23 else 0)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "205",
  "ground_truth" : "            setColor(ColorUtils.setAlphaComponent(color, alpha))\r\n            setCornerRadius(cornerRadius)\r\n        }\r\n        return gradientDrawable\r\n    }",
  "context" : "fun createBackgroundGradientDrawable(color: Int, alpha: Int, cornerRadius: Float): Drawable {\r\n        val gradientDrawable = GradientDrawable().apply {\r\n            setColor(ColorUtils.setAlphaComponent(color, alpha))\r\n            setCornerRadius(cornerRadius)\r\n        }\r\n        return gradientDrawable\r\n    }",
  "start_lineno" : "199",
  "methodName" : "createBackgroundGradientDrawable",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/66",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.graphics.drawable.GradientDrawable\nimport android.graphics.drawable.Drawable\nfun createBackgroundGradientDrawable(color: Int, alpha: Int, cornerRadius: Float): Drawable {\r\n        val gradientDrawable = GradientDrawable().apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "253",
  "ground_truth" : "        val compressedFile = Compressor(context).setQuality(70).compressToFile(srcFile)\r\n        compressedFile.copyTo(destFile, true)\r\n    }",
  "context" : "fun downSamplingImage(context: Context, srcFile: File, destFile: File) {\r\n        val compressedFile = Compressor(context).setQuality(70).compressToFile(srcFile)\r\n        compressedFile.copyTo(destFile, true)\r\n    }",
  "start_lineno" : "250",
  "methodName" : "downSamplingImage",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/67",
  "prompt" : "import java.io.File\nimport android.content.Context\nfun downSamplingImage(context: Context, srcFile: File, destFile: File) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "262",
  "ground_truth" : "        .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n        .priority(Priority.HIGH)\r\n        .transform(MultiTransformation(CenterCrop(), RoundedCorners(radius)))",
  "context" : "fun createThumbnailGlideOptions(radius: Int, isEncrypt: Boolean = false): RequestOptions = RequestOptions()\r\n        /*.error(R.drawable.error_7)*/\r\n        .placeholder(if (isEncrypt) R.drawable.ic_padlock else R.drawable.ic_error_7)\r\n        .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n        .priority(Priority.HIGH)\r\n        .transform(MultiTransformation(CenterCrop(), RoundedCorners(radius)))",
  "start_lineno" : "257",
  "methodName" : "createThumbnailGlideOptions",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/68",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport com.bumptech.glide.request.RequestOptions\nimport com.bumptech.glide.Glide\nfun createThumbnailGlideOptions(radius: Int, isEncrypt: Boolean = false): RequestOptions = RequestOptions()\r\n        /*.error(R.drawable.error_7)*/\r\n        .placeholder(if (isEncrypt) R.drawable.ic_padlock else R.drawable.ic_error_7)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "272",
  "ground_truth" : "        val workingDirectory = File(path)\r\n        if (!workingDirectory.exists()) workingDirectory.mkdirs()\r\n    }",
  "context" : "private fun makeDirectory(path: String) {\r\n        val workingDirectory = File(path)\r\n        if (!workingDirectory.exists()) workingDirectory.mkdirs()\r\n    }",
  "start_lineno" : "269",
  "methodName" : "makeDirectory",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/69",
  "prompt" : "private fun makeDirectory(path: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "291",
  "ground_truth" : "            makeDirectory(getExternalStorageDirectory().absolutePath + BACKUP_EXCEL_DIRECTORY)\r\n        }\r\n    }",
  "context" : "fun initLegacyWorkingDirectory(context: Context) {\r\n        if (context.checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r\n            makeDirectory(getExternalStorageDirectory().absolutePath + BACKUP_EXCEL_DIRECTORY)\r\n        }\r\n    }",
  "start_lineno" : "287",
  "methodName" : "initLegacyWorkingDirectory",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/70",
  "prompt" : "import me.blog.korn123.easydiary.extensions.checkPermission\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun initLegacyWorkingDirectory(context: Context) {\r\n        if (context.checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "296",
  "ground_truth" : "//        return Environment.getExternalStorageDirectory().absolutePath\r\n        return context.applicationInfo.dataDir\r\n    }",
  "context" : "fun getApplicationDataDirectory(context: Context): String {\r\n//        return Environment.getExternalStorageDirectory().absolutePath\r\n        return context.applicationInfo.dataDir\r\n    }",
  "start_lineno" : "293",
  "methodName" : "getApplicationDataDirectory",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/71",
  "prompt" : "import android.content.Context\nfun getApplicationDataDirectory(context: Context): String {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "303",
  "ground_truth" : "        }\r\n        activityResultLauncher.launch(intent)\r\n    }",
  "context" : "fun readFileWithSAF(mimeType: String, activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n            type = mimeType\r\n        }\r\n        activityResultLauncher.launch(intent)\r\n    }",
  "start_lineno" : "298",
  "methodName" : "readFileWithSAF",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/72",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun readFileWithSAF(mimeType: String, activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n            type = mimeType\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "317",
  "ground_truth" : "            putExtra(Intent.EXTRA_TITLE, fileName)\r\n        }.run {\r\n            activityResultLauncher.launch(this)\r\n        }\r\n    }",
  "context" : "fun writeFileWithSAF(fileName: String, mimeType: String, activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\r\n            // Filter to only show results that can be \"opened\", such as\r\n            // a file (as opposed to a list of contacts or timezones).\r\n            addCategory(Intent.CATEGORY_OPENABLE)\r\n\r\n            type = mimeType\r\n            // Create a file with the requested MIME type.\r\n            putExtra(Intent.EXTRA_TITLE, fileName)\r\n        }.run {\r\n            activityResultLauncher.launch(this)\r\n        }\r\n    }",
  "start_lineno" : "305",
  "methodName" : "writeFileWithSAF",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/73",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun writeFileWithSAF(fileName: String, mimeType: String, activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\r\n            // Filter to only show results that can be \"opened\", such as\r\n            // a file (as opposed to a list of contacts or timezones).\r\n            addCategory(Intent.CATEGORY_OPENABLE)\r\n\r\n            type = mimeType\r\n            // Create a file with the requested MIME type.\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "328",
  "ground_truth" : "            boldStringForce(textView)\r\n        }\r\n    }",
  "context" : "fun boldString(context: Context, textView: TextView?) {\r\n        if (context.config.boldStyleEnable) {\r\n            boldStringForce(textView)\r\n        }\r\n    }",
  "start_lineno" : "324",
  "methodName" : "boldString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/74",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport android.view.View\nimport android.content.Context\nfun boldString(context: Context, textView: TextView?) {\r\n        if (context.config.boldStyleEnable) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "336",
  "ground_truth" : "            val spannableString = SpannableString(tv.text)\r\n            spannableString.setSpan(StyleSpan(Typeface.BOLD), 0, tv.text.length, 0)\r\n            tv.text = spannableString\r\n        }\r\n    }",
  "context" : "fun boldStringForce(textView: TextView?) {\r\n        textView?.let { tv ->\r\n            val spannableString = SpannableString(tv.text)\r\n            spannableString.setSpan(StyleSpan(Typeface.BOLD), 0, tv.text.length, 0)\r\n            tv.text = spannableString\r\n        }\r\n    }",
  "start_lineno" : "330",
  "methodName" : "boldStringForce",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/75",
  "prompt" : "import android.view.View\nfun boldStringForce(textView: TextView?) {\r\n        textView?.let { tv ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "343",
  "ground_truth" : "        spannableString.setSpan(StyleSpan(Typeface.ITALIC), 0, textView.text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n        textView.text = spannableString\r\n    }",
  "context" : "fun warningString(textView: TextView) {\r\n        val spannableString = SpannableString(textView.text)\r\n        spannableString.setSpan(UnderlineSpan(), 0, textView.text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n        spannableString.setSpan(StyleSpan(Typeface.ITALIC), 0, textView.text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n        textView.text = spannableString\r\n    }",
  "start_lineno" : "338",
  "methodName" : "warningString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/76",
  "prompt" : "import android.view.View\nimport android.text.style.UnderlineSpan\nimport android.text.Spanned\nimport android.text.SpannableString\nfun warningString(textView: TextView) {\r\n        val spannableString = SpannableString(textView.text)\r\n        spannableString.setSpan(UnderlineSpan(), 0, textView.text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "401",
  "ground_truth" : "        spannableString.getSpans(0, spannableString.length, BackgroundColorSpan::class.java)?.forEach { spannableString.removeSpan(it) }\r\n        spannableString.getSpans(0, spannableString.length, ForegroundColorSpan::class.java)?.forEach { spannableString.removeSpan(it) }\r\n    }",
  "context" : "fun removeSpans(spannableString: SpannableString) {\r\n        spannableString.getSpans(0, spannableString.length, BackgroundColorSpan::class.java)?.forEach { spannableString.removeSpan(it) }\r\n        spannableString.getSpans(0, spannableString.length, ForegroundColorSpan::class.java)?.forEach { spannableString.removeSpan(it) }\r\n    }",
  "start_lineno" : "398",
  "methodName" : "removeSpans",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/77",
  "prompt" : "import android.text.SpannableString\nfun removeSpans(spannableString: SpannableString) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "483",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return pageIndex\r\n    }",
  "context" : "fun sequenceToPageIndex(diaryList: List<Diary>, sequence: Int): Int {\r\n        var pageIndex = 0\r\n        if (sequence > -1) {\r\n            for (i in diaryList.indices) {\r\n                if (diaryList[i].sequence == sequence) {\r\n                    pageIndex = i\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return pageIndex\r\n    }",
  "start_lineno" : "472",
  "methodName" : "sequenceToPageIndex",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/78",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nfun sequenceToPageIndex(diaryList: List<Diary>, sequence: Int): Int {\r\n        var pageIndex = 0\r\n        if (sequence > -1) {\r\n            for (i in diaryList.indices) {\r\n                if (diaryList[i].sequence == sequence) {\r\n                    pageIndex = i\r\n                    break\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "495",
  "ground_truth" : "            name = returnCursor.getString(nameIndex);\r\n            returnCursor.close()\r\n        }\r\n        return name ?: UUID.randomUUID().toString()\r\n    }",
  "context" : "fun queryName(resolver: ContentResolver, uri: Uri): String {\r\n        val returnCursor: Cursor? = resolver.query(uri, null, null, null, null)\r\n        var name: String? = null\r\n        returnCursor?.let {\r\n            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)\r\n            it.moveToFirst()\r\n            name = returnCursor.getString(nameIndex);\r\n            returnCursor.close()\r\n        }\r\n        return name ?: UUID.randomUUID().toString()\r\n    }",
  "start_lineno" : "485",
  "methodName" : "queryName",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/79",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.provider.OpenableColumns\nimport android.net.Uri\nimport android.database.Cursor\nimport android.content.ContentResolver\nfun queryName(resolver: ContentResolver, uri: Uri): String {\r\n        val returnCursor: Cursor? = resolver.query(uri, null, null, null, null)\r\n        var name: String? = null\r\n        returnCursor?.let {\r\n            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)\r\n            it.moveToFirst()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "500",
  "ground_truth" : "        val type = object : TypeToken<HashMap<String, Any>>(){}.type\r\n        return GsonBuilder().create().fromJson(jsonString, type)\r\n    }",
  "context" : "fun jsonStringToHashMap(jsonString: String): HashMap<String, Any> {\r\n        val type = object : TypeToken<HashMap<String, Any>>(){}.type\r\n        return GsonBuilder().create().fromJson(jsonString, type)\r\n    }",
  "start_lineno" : "497",
  "methodName" : "jsonStringToHashMap",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/80",
  "prompt" : "fun jsonStringToHashMap(jsonString: String): HashMap<String, Any> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "508",
  "ground_truth" : "        val type = object : TypeToken<HashMap<String, Any>>(){}.type\r\n        val map: HashMap<String, Any> = GsonBuilder().create().fromJson(reader, type)\r\n        reader.close()\r\n        return map\r\n    }",
  "context" : "fun jsonFileToHashMap(filename: String): HashMap<String, Any> {\r\n        val reader = JsonReader(FileReader(filename))\r\n        val type = object : TypeToken<HashMap<String, Any>>(){}.type\r\n        val map: HashMap<String, Any> = GsonBuilder().create().fromJson(reader, type)\r\n        reader.close()\r\n        return map\r\n    }",
  "start_lineno" : "502",
  "methodName" : "jsonFileToHashMap",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/81",
  "prompt" : "import java.io.FileReader\nimport java.io.File\nimport me.blog.korn123.easydiary.R\nimport com.google.gson.stream.JsonReader\nfun jsonFileToHashMap(filename: String): HashMap<String, Any> {\r\n        val reader = JsonReader(FileReader(filename))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "513",
  "ground_truth" : "        val gson = GsonBuilder().setPrettyPrinting().create()\r\n        return gson.toJson(map)\r\n    }",
  "context" : "fun hashMapToJsonString(map: HashMap<String, Any>): String {\r\n        val gson = GsonBuilder().setPrettyPrinting().create()\r\n        return gson.toJson(map)\r\n    }",
  "start_lineno" : "510",
  "methodName" : "hashMapToJsonString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/82",
  "prompt" : "fun hashMapToJsonString(map: HashMap<String, Any>): String {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val HIGHLIGHT_COLOR Int\nval easyDiaryMimeType String\nval easyDiaryMimeTypeAll Array<String?>",
  "app_type" : "notes",
  "end_lineno" : "520",
  "ground_truth" : "        }\r\n        return Html.fromHtml(target, Html.FROM_HTML_MODE_LEGACY);\r\n    }",
  "context" : "fun fromHtml(target: String): Spanned {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n            return Html.fromHtml(target)\r\n        }\r\n        return Html.fromHtml(target, Html.FROM_HTML_MODE_LEGACY);\r\n    }",
  "start_lineno" : "515",
  "methodName" : "fromHtml",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt",
  "task_id" : "aaf-easydiary/83",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.text.Spanned\nimport android.text.Html\nimport android.os.Build\nfun fromHtml(target: String): Spanned {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n            return Html.fromHtml(target)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return result\r\n    }",
  "context" : "private fun isValidTypeface(fontArray: Array<String>?, fontName: String?): Boolean {\r\n        var result = false\r\n        if (fontArray != null) {\r\n            for (name in fontArray) {\r\n                if (StringUtils.equalsIgnoreCase(name, fontName)) {\r\n                    result = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }",
  "start_lineno" : "47",
  "methodName" : "isValidTypeface",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/84",
  "prompt" : "import org.apache.commons.lang3.StringUtils\nimport android.graphics.Typeface\nprivate fun isValidTypeface(fontArray: Array<String>?, fontName: String?): Boolean {\r\n        var result = false\r\n        if (fontArray != null) {\r\n            for (name in fontArray) {\r\n                if (StringUtils.equalsIgnoreCase(name, fontName)) {\r\n                    result = true\r\n                    break\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "72",
  "ground_truth" : "            if (!preferencesContains(SETTING_FONT_SIZE)) {\r\n                config.settingFontSize = spToPixelFloatValue(UN_SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n            }\r\n        }\r\n    }",
  "context" : "private fun initDefaultFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // Initial font typeface setting\r\n            if (!preferencesContains(SETTING_FONT_NAME)) {\r\n                config.settingFontName = CUSTOM_FONTS_UNSUPPORTED_LANGUAGE_DEFAULT\r\n            }\r\n\r\n            // Initial font size setting\r\n            if (!preferencesContains(SETTING_FONT_SIZE)) {\r\n                config.settingFontSize = spToPixelFloatValue(UN_SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "60",
  "methodName" : "initDefaultFontSetting",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/85",
  "prompt" : "import me.blog.korn123.easydiary.extensions.preferencesContains\nimport me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nimport android.app.Activity\nprivate fun initDefaultFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // Initial font typeface setting\r\n            if (!preferencesContains(SETTING_FONT_NAME)) {\r\n                config.settingFontName = CUSTOM_FONTS_UNSUPPORTED_LANGUAGE_DEFAULT\r\n            }\r\n\r\n            // Initial font size setting\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "            if (!preferencesContains(SETTING_FONT_SIZE)) {\r\n                config.settingFontSize = dpToPixelFloatValue(SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n            }\r\n        }\r\n    }",
  "context" : "private fun initNanumPenFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // Initial font size setting\r\n            if (!preferencesContains(SETTING_FONT_SIZE)) {\r\n                config.settingFontSize = dpToPixelFloatValue(SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "initNanumPenFontSetting",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/86",
  "prompt" : "import android.app.Activity\nprivate fun initNanumPenFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // Initial font size setting\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "88",
  "ground_truth" : "        }\r\n        return sTypeface\r\n    }",
  "context" : "fun getCommonTypeface(context: Context): Typeface? {\r\n        if (sTypeface == null) {\r\n            setCommonTypeface(context)\r\n        }\r\n        return sTypeface\r\n    }",
  "start_lineno" : "83",
  "methodName" : "getCommonTypeface",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/87",
  "prompt" : "import android.graphics.Typeface\nimport android.content.Context\nfun getCommonTypeface(context: Context): Typeface? {\r\n        if (sTypeface == null) {\r\n            setCommonTypeface(context)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "97",
  "ground_truth" : "        val commonFontName = context.config.settingFontName\r\n        sTypeface = getTypeface(context, commonFontName)\r\n    }",
  "context" : "fun setCommonTypeface(context: Context) {\r\n        val commonFontName = context.config.settingFontName\r\n        sTypeface = getTypeface(context, commonFontName)\r\n    }",
  "start_lineno" : "94",
  "methodName" : "setCommonTypeface",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/88",
  "prompt" : "import android.graphics.Typeface\nimport android.content.Context\nfun setCommonTypeface(context: Context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "104",
  "ground_truth" : "            setTypeface(context, it, typeface, customLineSpacing)\r\n        }\r\n    }",
  "context" : "fun setFontsTypeface(context: Context, customFontName: String?, rootView: ViewGroup?, customLineSpacing: Boolean = true) {\r\n        val typeface = if (StringUtils.isNotEmpty(customFontName)) getTypeface(context, customFontName) else getCommonTypeface(context)\r\n        rootView?.let {\r\n            setTypeface(context, it, typeface, customLineSpacing)\r\n        }\r\n    }",
  "start_lineno" : "99",
  "methodName" : "setFontsTypeface",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/89",
  "prompt" : "import org.apache.commons.lang3.StringUtils\nimport android.view.ViewGroup\nimport android.graphics.Typeface\nimport android.content.Context\nfun setFontsTypeface(context: Context, customFontName: String?, rootView: ViewGroup?, customLineSpacing: Boolean = true) {\r\n        val typeface = if (StringUtils.isNotEmpty(customFontName)) getTypeface(context, customFontName) else getCommonTypeface(context)\r\n        rootView?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "                break\r\n            }\r\n        }\r\n        return displayName ?: FilenameUtils.getBaseName(fontFileName)\r\n    }",
  "context" : "fun fontFileNameToDisplayName(context: Context, fontFileName: String): String {\r\n        var displayName: String? = null\r\n        val fontNames = context.resources.getStringArray(R.array.pref_list_fonts_values)\r\n        val displayNames = context.resources.getStringArray(R.array.pref_list_fonts_title)\r\n        for (i in fontNames.indices) {\r\n            if (StringUtils.equals(fontFileName, fontNames[i])) {\r\n                displayName = displayNames[i]\r\n                break\r\n            }\r\n        }\r\n        return displayName ?: FilenameUtils.getBaseName(fontFileName)\r\n    }",
  "start_lineno" : "122",
  "methodName" : "fontFileNameToDisplayName",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/90",
  "prompt" : "import java.io.File\nimport org.apache.commons.lang3.StringUtils\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun fontFileNameToDisplayName(context: Context, fontFileName: String): String {\r\n        var displayName: String? = null\r\n        val fontNames = context.resources.getStringArray(R.array.pref_list_fonts_values)\r\n        val displayNames = context.resources.getStringArray(R.array.pref_list_fonts_title)\r\n        for (i in fontNames.indices) {\r\n            if (StringUtils.equals(fontFileName, fontNames[i])) {\r\n                displayName = displayNames[i]\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sTypeface Typeface?",
  "app_type" : "notes",
  "end_lineno" : "149",
  "ground_truth" : "            } else {\r\n                initDefaultFontSetting(this)\r\n            }\r\n        }\r\n    }",
  "context" : "fun checkFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // determine device language\r\n            if (!Locale.getDefault().language.matches(CUSTOM_FONTS_SUPPORT_LANGUAGE.toRegex())) {\r\n//                initNanumPenFontSetting(this)\r\n                initDefaultFontSetting(this)\r\n            } else {\r\n                initDefaultFontSetting(this)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "139",
  "methodName" : "checkFontSetting",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt",
  "task_id" : "aaf-easydiary/91",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.app.Activity\nfun checkFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // determine device language\r\n            if (!Locale.getDefault().language.matches(CUSTOM_FONTS_SUPPORT_LANGUAGE.toRegex())) {\r\n//                initNanumPenFontSetting(this)\r\n                initDefaultFontSetting(this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "13",
  "ground_truth" : "            basicTextEncryptor.setPasswordCharArray(keyString.toCharArray())\r\n            return basicTextEncryptor.encrypt(plainText)\r\n        }",
  "context" : "fun encrypt(plainText: String, keyString: String): String {\r\n            if (plainText.isEmpty()) return \"\"\r\n            val basicTextEncryptor = BasicTextEncryptor()\r\n            basicTextEncryptor.setPasswordCharArray(keyString.toCharArray())\r\n            return basicTextEncryptor.encrypt(plainText)\r\n        }",
  "start_lineno" : "8",
  "methodName" : "encrypt",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\JasyptUtils.kt",
  "task_id" : "aaf-easydiary/92",
  "prompt" : "import org.jasypt.util.text.BasicTextEncryptor\nfun encrypt(plainText: String, keyString: String): String {\r\n            if (plainText.isEmpty()) return \"\"\r\n            val basicTextEncryptor = BasicTextEncryptor()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "            basicTextEncryptor.setPasswordCharArray(keyString.toCharArray())\r\n            return basicTextEncryptor.decrypt(cipherText)\r\n        }",
  "context" : "fun decrypt(cipherText: String, keyString: String): String {\r\n            if (cipherText.isEmpty()) return \"\"\r\n            val basicTextEncryptor = BasicTextEncryptor()\r\n            basicTextEncryptor.setPasswordCharArray(keyString.toCharArray())\r\n            return basicTextEncryptor.decrypt(cipherText)\r\n        }",
  "start_lineno" : "15",
  "methodName" : "decrypt",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\JasyptUtils.kt",
  "task_id" : "aaf-easydiary/93",
  "prompt" : "import org.jasypt.util.text.BasicTextEncryptor\nfun decrypt(cipherText: String, keyString: String): String {\r\n            if (cipherText.isEmpty()) return \"\"\r\n            val basicTextEncryptor = BasicTextEncryptor()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "                    .digest(input.toByteArray())\r\n                    .fold(\"\", { str, it -> str + \"%02x\".format(it) })\r\n        }",
  "context" : "private fun hashString(input: String, algorithm: String): String {\r\n            return MessageDigest\r\n                    .getInstance(algorithm)\r\n                    .digest(input.toByteArray())\r\n                    .fold(\"\", { str, it -> str + \"%02x\".format(it) })\r\n        }",
  "start_lineno" : "30",
  "methodName" : "hashString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\JasyptUtils.kt",
  "task_id" : "aaf-easydiary/94",
  "prompt" : "import java.security.MessageDigest\nprivate fun hashString(input: String, algorithm: String): String {\r\n            return MessageDigest\r\n                    .getInstance(algorithm)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val SYNC_RELEASE_STRING\nval SYNC_NEW_STRING\nval SYNC_RELEASE_NOTE",
  "app_type" : "notes",
  "end_lineno" : "176",
  "ground_truth" : "//    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_NEW_STRING)\r\n    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_RELEASE_NOTE)\r\n}",
  "context" : "fun main() {\r\n    val prepareRelease = PrepareRelease()\r\n//    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_RELEASE_STRING)\r\n//    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_NEW_STRING)\r\n    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_RELEASE_NOTE)\r\n}",
  "start_lineno" : "171",
  "methodName" : "main",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\PrepareRelease.kt",
  "task_id" : "aaf-easydiary/95",
  "prompt" : "fun main() {\r\n    val prepareRelease = PrepareRelease()\r\n//    prepareRelease.syncReleaseInformation(PrepareRelease.SYNC_RELEASE_STRING)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mNotificationCount\nval mViewModel BaseDevViewModel\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestLocationSourceLauncher\nval mFlexboxLayoutParams\nvar mBinding ActivityBaseDevBinding\nvar mCoroutineJob1 Job?\nval NOTIFICATION_ID\nval NOTIFICATION_INFO\nval TAG_LOCATION_MANAGER",
  "app_type" : "notes",
  "end_lineno" : "127",
  "ground_truth" : "        mLocationManager.run {\r\n            removeUpdates(mGPSLocationListener)\r\n            removeUpdates(mNetworkLocationListener)\r\n        }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mLocationManager.run {\r\n            removeUpdates(mGPSLocationListener)\r\n            removeUpdates(mNetworkLocationListener)\r\n        }\r\n    }",
  "start_lineno" : "121",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDevActivity.kt",
  "task_id" : "aaf-easydiary/96",
  "prompt" : "override fun onDestroy() {\r\n        super.onDestroy()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mNotificationCount\nval mViewModel BaseDevViewModel\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestLocationSourceLauncher\nval mFlexboxLayoutParams\nvar mBinding ActivityBaseDevBinding\nvar mCoroutineJob1 Job?\nval NOTIFICATION_ID\nval NOTIFICATION_INFO\nval TAG_LOCATION_MANAGER",
  "app_type" : "notes",
  "end_lineno" : "609",
  "ground_truth" : "            EasyDiaryDbHelper.deleteActionLogAll()\r\n            updateActionLog()\r\n        }\r\n        updateActionLog()\r\n    }",
  "context" : "private fun setupActionLog() {\r\n        mBinding.clearLog.setOnClickListener {\r\n            EasyDiaryDbHelper.deleteActionLogAll()\r\n            updateActionLog()\r\n        }\r\n        updateActionLog()\r\n    }",
  "start_lineno" : "603",
  "methodName" : "setupActionLog",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDevActivity.kt",
  "task_id" : "aaf-easydiary/97",
  "prompt" : "import me.blog.korn123.easydiary.models.ActionLog\nprivate fun setupActionLog() {\r\n        mBinding.clearLog.setOnClickListener {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mNotificationCount\nval mViewModel BaseDevViewModel\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestLocationSourceLauncher\nval mFlexboxLayoutParams\nvar mBinding ActivityBaseDevBinding\nvar mCoroutineJob1 Job?\nval NOTIFICATION_ID\nval NOTIFICATION_INFO\nval TAG_LOCATION_MANAGER",
  "app_type" : "notes",
  "end_lineno" : "618",
  "ground_truth" : "        actionLogs.map {\r\n            sb.append(\"${it.className}-${it.signature}-${it.key}: ${it.value}\\n\")\r\n        }\r\n        mBinding.actionLog.text = sb.toString()\r\n    }",
  "context" : "private fun updateActionLog() {\r\n        val actionLogs: List<ActionLog> = EasyDiaryDbHelper.findActionLogAll()\r\n        val sb = StringBuilder()\r\n        actionLogs.map {\r\n            sb.append(\"${it.className}-${it.signature}-${it.key}: ${it.value}\\n\")\r\n        }\r\n        mBinding.actionLog.text = sb.toString()\r\n    }",
  "start_lineno" : "611",
  "methodName" : "updateActionLog",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDevActivity.kt",
  "task_id" : "aaf-easydiary/98",
  "prompt" : "import me.blog.korn123.easydiary.models.ActionLog\nprivate fun updateActionLog() {\r\n        val actionLogs: List<ActionLog> = EasyDiaryDbHelper.findActionLogAll()\r\n        val sb = StringBuilder()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "242",
  "ground_truth" : "        menu.findItem(R.id.secondsPicker).isVisible = mEnableSecondsPicker\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_base_diary_editing, menu)\r\n        menu.findItem(R.id.timePicker).isVisible = mEnableTimePicker\r\n        menu.findItem(R.id.secondsPicker).isVisible = mEnableSecondsPicker\r\n        return true\r\n    }",
  "start_lineno" : "237",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/99",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_base_diary_editing, menu)\r\n        menu.findItem(R.id.timePicker).isVisible = mEnableTimePicker\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "285",
  "ground_truth" : "                    super.onBackPressed()\r\n                }\r\n            }, {_, _ -> }, DialogMode.INFO\r\n        )\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        showAlertDialog(\r\n            getString(R.string.back_pressed_confirm), { _, _ ->\r\n                if (isAccessFromOutside()) {\r\n                    startMainActivityWithClearTask()\r\n                } else {\r\n                    super.onBackPressed()\r\n                }\r\n            }, {_, _ -> }, DialogMode.INFO\r\n        )\r\n    }",
  "start_lineno" : "275",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/100",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.appcompat.app.AlertDialog\nimport android.app.Activity\noverride fun onBackPressed() {\r\n        showAlertDialog(\r\n            getString(R.string.back_pressed_confirm), { _, _ ->\r\n                if (isAccessFromOutside()) {\r\n                    startMainActivityWithClearTask()\r\n                } else {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "315",
  "ground_truth" : "        super.onResume()\r\n        toggleTimePickerTool()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        toggleTimePickerTool()\r\n    }",
  "start_lineno" : "312",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/101",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "325",
  "ground_truth" : "                removeUpdates(mGPSLocationListener)\r\n                removeUpdates(mNetworkLocationListener)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (config.enableLocationInfo) {\r\n            mLocationManager.run {\r\n                removeUpdates(mGPSLocationListener)\r\n                removeUpdates(mNetworkLocationListener)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "317",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/102",
  "prompt" : "import android.location.LocationManager\nimport android.location.Location\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        if (config.enableLocationInfo) {\r\n            mLocationManager.run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "338",
  "ground_truth" : "            mRequestSpeechInput.launch(mRecognizerIntent)\r\n        } catch (e: ActivityNotFoundException) {\r\n            showAlertDialog(getString(R.string.recognizer_intent_not_found_message), DialogInterface.OnClickListener { dialog, which -> })\r\n        }\r\n    }",
  "context" : "private fun showSpeechDialog() {\r\n        try {\r\n            mRequestSpeechInput.launch(mRecognizerIntent)\r\n        } catch (e: ActivityNotFoundException) {\r\n            showAlertDialog(getString(R.string.recognizer_intent_not_found_message), DialogInterface.OnClickListener { dialog, which -> })\r\n        }\r\n    }",
  "start_lineno" : "332",
  "methodName" : "showSpeechDialog",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/103",
  "prompt" : "private fun showSpeechDialog() {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "480",
  "ground_truth" : "        for (index in mRemoveIndexes) {\r\n            mPhotoUris.removeAt(index)\r\n        }\r\n        mRemoveIndexes.clear()\r\n    }",
  "context" : "protected fun applyRemoveIndex() {\r\n        Collections.sort(mRemoveIndexes, Collections.reverseOrder())\r\n        for (index in mRemoveIndexes) {\r\n            mPhotoUris.removeAt(index)\r\n        }\r\n        mRemoveIndexes.clear()\r\n    }",
  "start_lineno" : "474",
  "methodName" : "applyRemoveIndex",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/104",
  "prompt" : "import me.blog.korn123.easydiary.R\nprotected fun applyRemoveIndex() {\r\n        Collections.sort(mRemoveIndexes, Collections.reverseOrder())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "526",
  "ground_truth" : "            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())\r\n        }\r\n    }",
  "context" : "protected fun setupRecognizer() {\r\n        mRecognizerIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {\r\n            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\r\n            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())\r\n        }\r\n    }",
  "start_lineno" : "521",
  "methodName" : "setupRecognizer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/105",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.speech.RecognizerIntent\nimport android.content.Intent\nprotected fun setupRecognizer() {\r\n        mRecognizerIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {\r\n            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "534",
  "ground_truth" : "        if (currentView != null) {\r\n            val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(currentView.windowToken, 0)\r\n        }\r\n    }",
  "context" : "protected fun hideSoftInputFromWindow() {\r\n        val currentView = this.currentFocus\r\n        if (currentView != null) {\r\n            val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(currentView.windowToken, 0)\r\n        }\r\n    }",
  "start_lineno" : "528",
  "methodName" : "hideSoftInputFromWindow",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/106",
  "prompt" : "protected fun hideSoftInputFromWindow() {\r\n        val currentView = this.currentFocus\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "616",
  "ground_truth" : "            mBinding.partialEditContents.partialBottomToolbar.bottomTitle.text = if (isLandScape()) \"x${photoContainer.childCount.minus(1)}\" else getString(R.string.attached_photo_count, photoContainer.childCount.minus(1))\r\n        }\r\n    }",
  "context" : "protected fun initBottomToolbar() {\r\n        mBinding.partialEditContents.partialEditPhotoContainer.run {\r\n            mBinding.partialEditContents.partialBottomToolbar.bottomTitle.text = if (isLandScape()) \"x${photoContainer.childCount.minus(1)}\" else getString(R.string.attached_photo_count, photoContainer.childCount.minus(1))\r\n        }\r\n    }",
  "start_lineno" : "612",
  "methodName" : "initBottomToolbar",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/107",
  "prompt" : "protected fun initBottomToolbar() {\r\n        mBinding.partialEditContents.partialEditPhotoContainer.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "625",
  "ground_truth" : "            true -> mBinding.partialEditContents.symbolText.visibility = View.VISIBLE\r\n            false -> mBinding.partialEditContents.symbolText.visibility = View.GONE\r\n        }\r\n        FlavorUtils.initWeatherView(this, mBinding.partialEditContents.symbol, mSelectedItemPosition, false)\r\n    }",
  "context" : "protected fun selectFeelingSymbol(index: Int) {\r\n        mSelectedItemPosition = index\r\n        when (mSelectedItemPosition == 0) {\r\n            true -> mBinding.partialEditContents.symbolText.visibility = View.VISIBLE\r\n            false -> mBinding.partialEditContents.symbolText.visibility = View.GONE\r\n        }\r\n        FlavorUtils.initWeatherView(this, mBinding.partialEditContents.symbol, mSelectedItemPosition, false)\r\n    }",
  "start_lineno" : "618",
  "methodName" : "selectFeelingSymbol",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/108",
  "prompt" : "protected fun selectFeelingSymbol(index: Int) {\r\n        mSelectedItemPosition = index\r\n        when (mSelectedItemPosition == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "764",
  "ground_truth" : "        false,\r\n        0,\r\n        0,\r\n        SYMBOL_EASTER_EGG\r\n    ).filter { diary -> diary.originSequence == DIARY_ORIGIN_SEQUENCE_INIT }.size > allowStoredCnt",
  "context" : "protected fun isExistEasterEggDiary(allowStoredCnt: Int) = mSelectedItemPosition == SYMBOL_EASTER_EGG && EasyDiaryDbHelper.findDiary(\r\n        null,\r\n        false,\r\n        0,\r\n        0,\r\n        SYMBOL_EASTER_EGG\r\n    ).filter { diary -> diary.originSequence == DIARY_ORIGIN_SEQUENCE_INIT }.size > allowStoredCnt",
  "start_lineno" : "758",
  "methodName" : "isExistEasterEggDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/109",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nprotected fun isExistEasterEggDiary(allowStoredCnt: Int) = mSelectedItemPosition == SYMBOL_EASTER_EGG && EasyDiaryDbHelper.findDiary(\r\n        null,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mRecognizerIntent Intent\nvar mDatePickerDialog DatePickerDialog\nvar mTimePickerDialog TimePickerDialog\nvar mSecondsPickerDialog AlertDialog\nval mCalendar\nval mRemoveIndexes\nval mLocationManager\nval mNetworkLocationListener\nval mGPSLocationListener\nval mRequestSpeechInput\nval mRequestImagePicker\nval mRequestCaptureCamera\nval mRequestPickPhotoData\nvar mBinding ActivityBaseDiaryEditingBinding\nval mPhotoUris RealmList<PhotoUri>\nvar mCurrentTimeMillis Long\nvar mYear\nvar mLocation me?.blog?.korn123?.easydiary?.models?.Location?\nvar mIsDiarySaved\nvar mSymbolSequence\nvar mMonth\nvar mDayOfMonth\nvar mHourOfDay\nvar mMinute\nvar mSecond\nvar mSelectedItemPosition\nvar mCurrentCursor\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mTimeSetListener TimePickerDialog.OnTimeSetListener\nval mClickListener\nval mTouchListener\nvar mEnableTimePicker\nvar mEnableSecondsPicker\nval FOCUS_TITLE\nval FOCUS_CONTENTS\nval DIARY_SEQUENCE_TEMPORARY\nval DIARY_SEQUENCE_INIT\nval DIARY_ORIGIN_SEQUENCE_INIT",
  "app_type" : "notes",
  "end_lineno" : "773",
  "ground_truth" : "            null,\r\n            null,\r\n            DialogMode.INFO,\r\n        )\r\n    }",
  "context" : "protected fun duplicatedEasterEggWarning() {\r\n        showAlertDialog(\r\n            \"A diary set to the easter egg symbol already exists.\",\r\n            null,\r\n            null,\r\n            DialogMode.INFO,\r\n        )\r\n    }",
  "start_lineno" : "766",
  "methodName" : "duplicatedEasterEggWarning",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/110",
  "prompt" : "import androidx.appcompat.app.AlertDialog\nprotected fun duplicatedEasterEggWarning() {\r\n        showAlertDialog(\r\n            \"A diary set to the easter egg symbol already exists.\",\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityBaseSettingsBinding\nvar mDotIndicatorPager2Adapter DotIndicatorPager2Adapter\nvar mCurrentPosition",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        menuInflater.inflate(R.menu.fragment_settings_schedule, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.fragment_settings_schedule, menu)\r\n        return true\r\n    }",
  "start_lineno" : "48",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSettingsActivity.kt",
  "task_id" : "aaf-easydiary/111",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityBaseSettingsBinding\nvar mDotIndicatorPager2Adapter DotIndicatorPager2Adapter\nvar mCurrentPosition",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "                )\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.openManual -> {\r\n                val customTabsIntent =\r\n                    CustomTabsIntent.Builder().setUrlBarHidingEnabled(false).build()\r\n                customTabsIntent.launchUrl(\r\n                    this@BaseSettingsActivity,\r\n                    Uri.parse(manualUrl())\r\n                )\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "53",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSettingsActivity.kt",
  "task_id" : "aaf-easydiary/112",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.browser.customtabs.CustomTabsIntent\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.net.Uri\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.openManual -> {\r\n                val customTabsIntent =\r\n                    CustomTabsIntent.Builder().setUrlBarHidingEnabled(false).build()\r\n                customTabsIntent.launchUrl(\r\n                    this@BaseSettingsActivity,\r\n                    Uri.parse(manualUrl())\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "//            setTheme(R.style.AppTheme_AAF)\r\n        }\r\n\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        if (useDynamicTheme) {\r\n            setTheme(getThemeId())\r\n//            setTheme(R.style.AppTheme_AAF)\r\n        }\r\n\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/113",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        if (useDynamicTheme) {\r\n            setTheme(getThemeId())\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "            setTheme(getThemeId())\r\n            updateBackgroundColor(config.screenBackgroundColor)\r\n        }\r\n        updateActionbarColor()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (useDynamicTheme) {\r\n            setTheme(getThemeId())\r\n            updateBackgroundColor(config.screenBackgroundColor)\r\n        }\r\n        updateActionbarColor()\r\n    }",
  "start_lineno" : "44",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/114",
  "prompt" : "override fun onResume() {\r\n        super.onResume()\r\n        if (useDynamicTheme) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "                this@BaseSimpleActivity.onBackPressed()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                this@BaseSimpleActivity.onBackPressed()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "53",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/115",
  "prompt" : "import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "68",
  "ground_truth" : "        isAskingPermissions = false\r\n        if (requestCode == GENERIC_PERM_HANDLER && grantResults.isNotEmpty()) {\r\n            actionOnPermission?.invoke(grantResults[0] == 0)\r\n        }\r\n    }",
  "context" : "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        isAskingPermissions = false\r\n        if (requestCode == GENERIC_PERM_HANDLER && grantResults.isNotEmpty()) {\r\n            actionOnPermission?.invoke(grantResults[0] == 0)\r\n        }\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/116",
  "prompt" : "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "        mainView?.run {\r\n//            setBackgroundColor(ColorUtils.setAlphaComponent(color, 255))\r\n            setBackgroundColor(color)\r\n        }\r\n    }",
  "context" : "open fun updateBackgroundColor(color: Int = config.screenBackgroundColor) {\r\n        val mainView: ViewGroup? = getMainViewGroup()\r\n        mainView?.run {\r\n//            setBackgroundColor(ColorUtils.setAlphaComponent(color, 255))\r\n            setBackgroundColor(color)\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "updateBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/117",
  "prompt" : "import android.view.ViewGroup\nopen fun updateBackgroundColor(color: Int = config.screenBackgroundColor) {\r\n        val mainView: ViewGroup? = getMainViewGroup()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "94",
  "ground_truth" : "\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            setTaskDescription(ActivityManager.TaskDescription(null, null, color))\r\n        }\r\n    }",
  "context" : "fun updateActionbarColor(color: Int = config.primaryColor) {\r\n        supportActionBar?.setBackgroundDrawable(ColorDrawable(color))\r\n//        supportActionBar?.title = Html.fromHtml(\"<font color='${color.getContrastColor().toHex()}'>${supportActionBar?.title}</font>\")\r\n        updateStatusBarColor(color)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            setTaskDescription(ActivityManager.TaskDescription(null, null, color))\r\n        }\r\n    }",
  "start_lineno" : "86",
  "methodName" : "updateActionbarColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/118",
  "prompt" : "import android.graphics.drawable.ColorDrawable\nfun updateActionbarColor(color: Int = config.primaryColor) {\r\n        supportActionBar?.setBackgroundDrawable(ColorDrawable(color))\r\n//        supportActionBar?.title = Html.fromHtml(\"<font color='${color.getContrastColor().toHex()}'>${supportActionBar?.title}</font>\")\r\n        updateStatusBarColor(color)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var actionOnPermission\nvar isAskingPermissions\nvar useDynamicTheme\nval GENERIC_PERM_HANDLER",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "            isAskingPermissions = true\r\n            actionOnPermission = callback\r\n            ActivityCompat.requestPermissions(this, arrayOf(getPermissionString(permissionId)), GENERIC_PERM_HANDLER)\r\n        }\r\n    }",
  "context" : "fun handlePermission(permissionId: Int, callback: (granted: Boolean) -> Unit) {\r\n        actionOnPermission = null\r\n        if (hasPermission(permissionId)) {\r\n            callback(true)\r\n        } else {\r\n            isAskingPermissions = true\r\n            actionOnPermission = callback\r\n            ActivityCompat.requestPermissions(this, arrayOf(getPermissionString(permissionId)), GENERIC_PERM_HANDLER)\r\n        }\r\n    }",
  "start_lineno" : "96",
  "methodName" : "handlePermission",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt",
  "task_id" : "aaf-easydiary/119",
  "prompt" : "fun handlePermission(permissionId: Int, callback: (granted: Boolean) -> Unit) {\r\n        actionOnPermission = null\r\n        if (hasPermission(permissionId)) {\r\n            callback(true)\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityCalendarBinding\nvar mCalendarFragment CaldroidFragmentEx\nvar mDatePickerDialog DatePickerDialog\nval mCalendar\nvar mDiaryList MutableList<Diary>\nvar mArrayAdapterDiary ArrayAdapter<Diary>?",
  "app_type" : "notes",
  "end_lineno" : "151",
  "ground_truth" : "        refreshList()\r\n        mCalendarFragment.refreshView()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        refreshList()\r\n        mCalendarFragment.refreshView()\r\n    }",
  "start_lineno" : "147",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt",
  "task_id" : "aaf-easydiary/120",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityCalendarBinding\nvar mCalendarFragment CaldroidFragmentEx\nvar mDatePickerDialog DatePickerDialog\nval mCalendar\nvar mDiaryList MutableList<Diary>\nvar mArrayAdapterDiary ArrayAdapter<Diary>?",
  "app_type" : "notes",
  "end_lineno" : "160",
  "ground_truth" : "        super.onSaveInstanceState(outState)\r\n        mCalendarFragment.saveStatesToKey(outState, \"CALDROID_SAVED_STATE\")\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        // TODO Auto-generated method stub\r\n        super.onSaveInstanceState(outState)\r\n        mCalendarFragment.saveStatesToKey(outState, \"CALDROID_SAVED_STATE\")\r\n    }",
  "start_lineno" : "156",
  "methodName" : "onSaveInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt",
  "task_id" : "aaf-easydiary/121",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        // TODO Auto-generated method stub\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityCalendarBinding\nvar mCalendarFragment CaldroidFragmentEx\nvar mDatePickerDialog DatePickerDialog\nval mCalendar\nvar mDiaryList MutableList<Diary>\nvar mArrayAdapterDiary ArrayAdapter<Diary>?",
  "app_type" : "notes",
  "end_lineno" : "165",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_calendar, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_calendar, menu)\r\n        return true\r\n    }",
  "start_lineno" : "162",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt",
  "task_id" : "aaf-easydiary/122",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityCalendarBinding\nvar mCalendarFragment CaldroidFragmentEx\nvar mDatePickerDialog DatePickerDialog\nval mCalendar\nvar mDiaryList MutableList<Diary>\nvar mArrayAdapterDiary ArrayAdapter<Diary>?",
  "app_type" : "notes",
  "end_lineno" : "174",
  "ground_truth" : "            R.id.next -> mCalendarFragment.nextMonth()\r\n            R.id.datePicker -> mDatePickerDialog.show()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.previous -> mCalendarFragment.prevMonth()\r\n            R.id.next -> mCalendarFragment.nextMonth()\r\n            R.id.datePicker -> mDatePickerDialog.show()\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "167",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt",
  "task_id" : "aaf-easydiary/123",
  "prompt" : "import me.blog.korn123.easydiary.fragments.CalendarFragment\nimport me.blog.korn123.easydiary.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.previous -> mCalendarFragment.prevMonth()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityCalendarBinding\nvar mCalendarFragment CaldroidFragmentEx\nvar mDatePickerDialog DatePickerDialog\nval mCalendar\nvar mDiaryList MutableList<Diary>\nvar mArrayAdapterDiary ArrayAdapter<Diary>?",
  "app_type" : "notes",
  "end_lineno" : "203",
  "ground_truth" : "        mCalendarFragment.refreshViewOnlyCurrentPage()\r\n        refreshList()\r\n    }",
  "context" : "private fun selectDateAndRefreshView() {\r\n        mCalendarFragment.clearSelectedDates()\r\n        mCalendarFragment.setSelectedDate(mCalendar.time)\r\n        mCalendarFragment.refreshViewOnlyCurrentPage()\r\n        refreshList()\r\n    }",
  "start_lineno" : "198",
  "methodName" : "selectDateAndRefreshView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt",
  "task_id" : "aaf-easydiary/124",
  "prompt" : "import me.blog.korn123.easydiary.fragments.CalendarFragment\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nprivate fun selectDateAndRefreshView() {\r\n        mCalendarFragment.clearSelectedDates()\r\n        mCalendarFragment.setSelectedDate(mCalendar.time)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "        super.onPause()\r\n        pauseLock()\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        pauseLock()\r\n    }",
  "start_lineno" : "87",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/125",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "        }\r\n\r\n        FontUtils.setFontsTypeface(applicationContext, null, findViewById(android.R.id.content))\r\n        resumeLock()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateBackgroundColor(curScreenBackgroundColor)\r\n        updateActionbarColor(curPrimaryColor)\r\n        setTheme(getThemeId(curPrimaryColor))\r\n\r\n        curPrimaryLineColorPicker?.getSpecificColor()?.apply {\r\n            updateActionbarColor(this)\r\n            setTheme(getThemeId(this))\r\n        }\r\n\r\n        FontUtils.setFontsTypeface(applicationContext, null, findViewById(android.R.id.content))\r\n        resumeLock()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/126",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.graphics.Color\noverride fun onResume() {\r\n        super.onResume()\r\n        updateBackgroundColor(curScreenBackgroundColor)\r\n        updateActionbarColor(curPrimaryColor)\r\n        setTheme(getThemeId(curPrimaryColor))\r\n\r\n        curPrimaryLineColorPicker?.getSpecificColor()?.apply {\r\n            updateActionbarColor(this)\r\n            setTheme(getThemeId(this))\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "111",
  "ground_truth" : "        menu.findItem(R.id.save).isVisible = hasUnsavedChanges\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_customization, menu)\r\n        menu.findItem(R.id.save).isVisible = hasUnsavedChanges\r\n        return true\r\n    }",
  "start_lineno" : "107",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/127",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_customization, menu)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "121",
  "ground_truth" : "//            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n        return true\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.save -> saveChanges()\r\n            android.R.id.home -> super.onBackPressed()\r\n//            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n        return true\r\n    }",
  "start_lineno" : "113",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/128",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.save -> saveChanges()\r\n            android.R.id.home -> super.onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "127",
  "ground_truth" : "\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        if (!hasUnsavedChanges) super.onBackPressed()\r\n\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }",
  "start_lineno" : "123",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/129",
  "prompt" : "override fun onBackPressed() {\r\n        if (!hasUnsavedChanges) super.onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "137",
  "ground_truth" : "            updateDrawableColorInnerCardView(imageAutoSetupEasyDiaryTheme, color)\r\n            updateDrawableColorInnerCardView(imageAutoSetupDarkTheme, color)\r\n            updateDrawableColorInnerCardView(imageAutoSetupGreenTheme, color)\r\n        }\r\n    }",
  "context" : "private fun updateCustomThemeIcon(color: Int) {\r\n        mActivityCustomizationBinding.run {\r\n            updateDrawableColorInnerCardView(imageAutoSetupEasyDiaryTheme, color)\r\n            updateDrawableColorInnerCardView(imageAutoSetupDarkTheme, color)\r\n            updateDrawableColorInnerCardView(imageAutoSetupGreenTheme, color)\r\n        }\r\n    }",
  "start_lineno" : "131",
  "methodName" : "updateCustomThemeIcon",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/130",
  "prompt" : "import me.blog.korn123.easydiary.databinding.ActivityCustomizationBinding\nprivate fun updateCustomThemeIcon(color: Int) {\r\n        mActivityCustomizationBinding.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "149",
  "ground_truth" : "            isThemeChanged = true\r\n        }\r\n        finish()\r\n        launcher?.let { toggleLauncher(it) }\r\n    }",
  "context" : "private fun saveChanges() {\r\n        config.apply {\r\n            textColor = curTextColor\r\n            backgroundColor = curBackgroundColor\r\n            screenBackgroundColor = curScreenBackgroundColor\r\n            primaryColor = curPrimaryColor\r\n            isThemeChanged = true\r\n        }\r\n        finish()\r\n        launcher?.let { toggleLauncher(it) }\r\n    }",
  "start_lineno" : "139",
  "methodName" : "saveChanges",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/131",
  "prompt" : "import android.graphics.Color\nprivate fun saveChanges() {\r\n        config.apply {\r\n            textColor = curTextColor\r\n            backgroundColor = curBackgroundColor\r\n            screenBackgroundColor = curScreenBackgroundColor\r\n            primaryColor = curPrimaryColor\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "156",
  "ground_truth" : "        curScreenBackgroundColor = config.screenBackgroundColor\r\n        curPrimaryColor = config.primaryColor\r\n    }",
  "context" : "private fun initColorVariables() {\r\n        curTextColor = config.textColor\r\n        curBackgroundColor = config.backgroundColor\r\n        curScreenBackgroundColor = config.screenBackgroundColor\r\n        curPrimaryColor = config.primaryColor\r\n    }",
  "start_lineno" : "151",
  "methodName" : "initColorVariables",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/132",
  "prompt" : "import android.graphics.Color\nprivate fun initColorVariables() {\r\n        curTextColor = config.textColor\r\n        curBackgroundColor = config.backgroundColor\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "165",
  "ground_truth" : "            customizationPrimaryColor.setBackgroundWithStroke(curPrimaryColor, curBackgroundColor)\r\n            customizationBackgroundColor.setBackgroundWithStroke(curBackgroundColor, curBackgroundColor)\r\n            customizationScreenBackgroundColor.setBackgroundWithStroke(curScreenBackgroundColor, curBackgroundColor)\r\n        }\r\n    }",
  "context" : "private fun setupColorsPickers() {\r\n        mActivityCustomizationBinding.run {\r\n            customizationTextColor.setBackgroundWithStroke(curTextColor, curBackgroundColor)\r\n            customizationPrimaryColor.setBackgroundWithStroke(curPrimaryColor, curBackgroundColor)\r\n            customizationBackgroundColor.setBackgroundWithStroke(curBackgroundColor, curBackgroundColor)\r\n            customizationScreenBackgroundColor.setBackgroundWithStroke(curScreenBackgroundColor, curBackgroundColor)\r\n        }\r\n    }",
  "start_lineno" : "158",
  "methodName" : "setupColorsPickers",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/133",
  "prompt" : "import me.blog.korn123.easydiary.extensions\nimport me.blog.korn123.easydiary.databinding.ActivityCustomizationBinding\nimport com.simplemobiletools.commons.extensions.setBackgroundWithStroke\nimport android.graphics.Color\nprivate fun setupColorsPickers() {\r\n        mActivityCustomizationBinding.run {\r\n            customizationTextColor.setBackgroundWithStroke(curTextColor, curBackgroundColor)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "173",
  "ground_truth" : "        setupColorsPickers()\r\n        invalidateOptionsMenu()\r\n    }",
  "context" : "private fun colorChanged() {\r\n        hasUnsavedChanges = true\r\n        setupColorsPickers()\r\n        invalidateOptionsMenu()\r\n    }",
  "start_lineno" : "169",
  "methodName" : "colorChanged",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/134",
  "prompt" : "private fun colorChanged() {\r\n        hasUnsavedChanges = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "179",
  "ground_truth" : "        updateTextColors(mActivityCustomizationBinding.mainHolder, curTextColor)\r\n        updateCustomThemeIcon(curTextColor)\r\n    }",
  "context" : "private fun setCurrentTextColor(color: Int) {\r\n        curTextColor = color\r\n        updateTextColors(mActivityCustomizationBinding.mainHolder, curTextColor)\r\n        updateCustomThemeIcon(curTextColor)\r\n    }",
  "start_lineno" : "175",
  "methodName" : "setCurrentTextColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/135",
  "prompt" : "import android.graphics.Color\nprivate fun setCurrentTextColor(color: Int) {\r\n        curTextColor = color\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "184",
  "ground_truth" : "        curBackgroundColor = color\r\n        updateAppViews(mActivityCustomizationBinding.mainHolder, curBackgroundColor)\r\n    }",
  "context" : "private fun setCurrentBackgroundColor(color: Int) {\r\n        curBackgroundColor = color\r\n        updateAppViews(mActivityCustomizationBinding.mainHolder, curBackgroundColor)\r\n    }",
  "start_lineno" : "181",
  "methodName" : "setCurrentBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/136",
  "prompt" : "import android.graphics.Color\nprivate fun setCurrentBackgroundColor(color: Int) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "189",
  "ground_truth" : "        curScreenBackgroundColor = color\r\n        updateBackgroundColor(color)\r\n    }",
  "context" : "private fun setCurrentScreenBackgroundColor(color: Int) {\r\n        curScreenBackgroundColor = color\r\n        updateBackgroundColor(color)\r\n    }",
  "start_lineno" : "186",
  "methodName" : "setCurrentScreenBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/137",
  "prompt" : "import android.graphics.Color\nprivate fun setCurrentScreenBackgroundColor(color: Int) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "195",
  "ground_truth" : "        setCurrentScreenBackgroundColor(color.darkenColor(AUTO_SETUP_SCREEN_BACKGROUND_DARKEN_COLOR))\r\n        updateActionbarColor(color)\r\n    }",
  "context" : "private fun setCurrentPrimaryColor(color: Int) {\r\n        curPrimaryColor = color\r\n        setCurrentScreenBackgroundColor(color.darkenColor(AUTO_SETUP_SCREEN_BACKGROUND_DARKEN_COLOR))\r\n        updateActionbarColor(color)\r\n    }",
  "start_lineno" : "191",
  "methodName" : "setCurrentPrimaryColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/138",
  "prompt" : "import android.graphics.Color\nprivate fun setCurrentPrimaryColor(color: Int) {\r\n        curPrimaryColor = color\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "204",
  "ground_truth" : "                setCurrentTextColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun pickTextColor() {\r\n        ColorPickerDialog(this, curTextColor) {\r\n            if (hasColorChanged(curTextColor, it)) {\r\n                setCurrentTextColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "197",
  "methodName" : "pickTextColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/139",
  "prompt" : "import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickTextColor() {\r\n        ColorPickerDialog(this, curTextColor) {\r\n            if (hasColorChanged(curTextColor, it)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "213",
  "ground_truth" : "                setCurrentBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun pickBackgroundColor() {\r\n        ColorPickerDialog(this, curBackgroundColor) {\r\n            if (hasColorChanged(curBackgroundColor, it)) {\r\n                setCurrentBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "206",
  "methodName" : "pickBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/140",
  "prompt" : "import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickBackgroundColor() {\r\n        ColorPickerDialog(this, curBackgroundColor) {\r\n            if (hasColorChanged(curBackgroundColor, it)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mActivityCustomizationBinding ActivityCustomizationBinding\nvar curTextColor\nvar curBackgroundColor\nvar curScreenBackgroundColor\nvar curPrimaryColor\nvar hasUnsavedChanges\nvar isLineColorPickerVisible\nvar curPrimaryLineColorPicker LineColorPickerDialog?\nvar launcher Launcher?",
  "app_type" : "notes",
  "end_lineno" : "222",
  "ground_truth" : "                setCurrentScreenBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun pickScreenBackgroundColor() {\r\n        ColorPickerDialog(this, curScreenBackgroundColor) {\r\n            if (hasColorChanged(curScreenBackgroundColor, it)) {\r\n                setCurrentScreenBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "215",
  "methodName" : "pickScreenBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt",
  "task_id" : "aaf-easydiary/141",
  "prompt" : "import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickScreenBackgroundColor() {\r\n        ColorPickerDialog(this, curScreenBackgroundColor) {\r\n            if (hasColorChanged(curScreenBackgroundColor, it)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDashboardBinding\nvar mDailySymbolFragment DailySymbolFragment",
  "app_type" : "notes",
  "end_lineno" : "286",
  "ground_truth" : "        mBinding.layoutProgressContainer.visibility = View.VISIBLE\r\n        mBinding.progress.visibility = View.VISIBLE\r\n    }",
  "context" : "fun showProgressContainer() {\r\n        mBinding.layoutProgressContainer.visibility = View.VISIBLE\r\n        mBinding.progress.visibility = View.VISIBLE\r\n    }",
  "start_lineno" : "283",
  "methodName" : "showProgressContainer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DashboardActivity.kt",
  "task_id" : "aaf-easydiary/142",
  "prompt" : "fun showProgressContainer() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDashboardBinding\nvar mDailySymbolFragment DailySymbolFragment",
  "app_type" : "notes",
  "end_lineno" : "293",
  "ground_truth" : "            mBinding.progress.visibility = View.GONE\r\n        }, 300)\r\n    }",
  "context" : "fun hideProgressContainer() {\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            mBinding.layoutProgressContainer.visibility = View.GONE\r\n            mBinding.progress.visibility = View.GONE\r\n        }, 300)\r\n    }",
  "start_lineno" : "288",
  "methodName" : "hideProgressContainer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DashboardActivity.kt",
  "task_id" : "aaf-easydiary/143",
  "prompt" : "import android.view.View\nimport android.os.Looper\nimport android.os.Handler\nfun hideProgressContainer() {\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            mBinding.layoutProgressContainer.visibility = View.GONE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSequence Int",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "override fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r\n            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "57",
  "methodName" : "setVisiblePhotoProgress",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/144",
  "prompt" : "import android.view.View\noverride fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSequence Int",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "            EasyDiaryDbHelper.deleteTemporaryDiaryBy(mSequence)\r\n        } else {\r\n            saveTemporaryDiary(mSequence)\r\n        }\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        if (mIsDiarySaved) {\r\n            EasyDiaryDbHelper.deleteTemporaryDiaryBy(mSequence)\r\n        } else {\r\n            saveTemporaryDiary(mSequence)\r\n        }\r\n    }",
  "start_lineno" : "64",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/145",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\noverride fun onPause() {\r\n        super.onPause()\r\n        if (mIsDiarySaved) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSequence Int",
  "app_type" : "notes",
  "end_lineno" : "83",
  "ground_truth" : "        mSequence = intent.getIntExtra(DIARY_SEQUENCE, 0)\r\n        val diaryDto = EasyDiaryDbHelper.findDiaryBy(mSequence)!!\r\n        mSymbolSequence = diaryDto.weather\r\n        initData(diaryDto)\r\n    }",
  "context" : "private fun initData() {\r\n        val intent = intent\r\n        mSequence = intent.getIntExtra(DIARY_SEQUENCE, 0)\r\n        val diaryDto = EasyDiaryDbHelper.findDiaryBy(mSequence)!!\r\n        mSymbolSequence = diaryDto.weather\r\n        initData(diaryDto)\r\n    }",
  "start_lineno" : "77",
  "methodName" : "initData",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryEditingActivity.kt",
  "task_id" : "aaf-easydiary/146",
  "prompt" : "private fun initData() {\r\n        val intent = intent\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "198",
  "ground_truth" : "        outState.putSerializable(DIARY_MODE, mDiaryMode)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putSerializable(DIARY_MODE, mDiaryMode)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "start_lineno" : "195",
  "methodName" : "onSaveInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/147",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "416",
  "ground_truth" : "                DashboardDialogFragment().apply { show(supportFragmentManager, \"DashboardDialog\") }\r\n            }\r\n            false -> {}\r\n        }\r\n    }",
  "context" : "private fun checkIntent() {\r\n        when (intent.getBooleanExtra(EXECUTION_MODE_WELCOME_DASHBOARD, false)) {\r\n            true -> {\r\n                intent.removeExtra(EXECUTION_MODE_WELCOME_DASHBOARD)\r\n//                TransitionHelper.startActivityWithTransition(this@DiaryMainActivity, Intent(this@DiaryMainActivity, DashboardActivity::class.java))\r\n                DashboardDialogFragment().apply { show(supportFragmentManager, \"DashboardDialog\") }\r\n            }\r\n            false -> {}\r\n        }\r\n    }",
  "start_lineno" : "407",
  "methodName" : "checkIntent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/148",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.helper.TransitionHelper\nimport me.blog.korn123.easydiary.helper.EXECUTION_MODE_WELCOME_DASHBOARD\nimport me.blog.korn123.easydiary.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun checkIntent() {\r\n        when (intent.getBooleanExtra(EXECUTION_MODE_WELCOME_DASHBOARD, false)) {\r\n            true -> {\r\n                intent.removeExtra(EXECUTION_MODE_WELCOME_DASHBOARD)\r\n//                TransitionHelper.startActivityWithTransition(this@DiaryMainActivity, Intent(this@DiaryMainActivity, DashboardActivity::class.java))\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "425",
  "ground_truth" : "            false -> {\r\n                mDiaryMode = savedInstanceState.getSerializable(DIARY_MODE) as DiaryMode\r\n            }\r\n        }\r\n    }",
  "context" : "private fun checkBundle(savedInstanceState: Bundle?) {\r\n        when (savedInstanceState == null) {\r\n            true -> checkWhatsNewDialog()\r\n            false -> {\r\n                mDiaryMode = savedInstanceState.getSerializable(DIARY_MODE) as DiaryMode\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "418",
  "methodName" : "checkBundle",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/149",
  "prompt" : "import android.os.Bundle\nprivate fun checkBundle(savedInstanceState: Bundle?) {\r\n        when (savedInstanceState == null) {\r\n            true -> checkWhatsNewDialog()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "433",
  "ground_truth" : "            config.appExecutionCount = config.appExecutionCount.plus(1)\r\n            if (config.appExecutionCount > 30 && EasyDiaryDbHelper.countDiaryAll() > 300) startReviewFlow()\r\n            if (config.enableDebugOptionToastReviewFlowInfo) makeToast(\"appExecutionCount: ${config.appExecutionCount}\")\r\n        }\r\n    }",
  "context" : "private fun setupReviewFlow() {\r\n        if (config.enableReviewFlow) {\r\n            config.appExecutionCount = config.appExecutionCount.plus(1)\r\n            if (config.appExecutionCount > 30 && EasyDiaryDbHelper.countDiaryAll() > 300) startReviewFlow()\r\n            if (config.enableDebugOptionToastReviewFlowInfo) makeToast(\"appExecutionCount: ${config.appExecutionCount}\")\r\n        }\r\n    }",
  "start_lineno" : "427",
  "methodName" : "setupReviewFlow",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/150",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nprivate fun setupReviewFlow() {\r\n        if (config.enableReviewFlow) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "556",
  "ground_truth" : "            if (!checkPermission(arrayOf(Manifest.permission.POST_NOTIFICATIONS))) {\r\n                confirmPermission(arrayOf(Manifest.permission.POST_NOTIFICATIONS), REQUEST_CODE_NOTIFICATION)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun confirmPrePermissions() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n            if (!checkPermission(arrayOf(Manifest.permission.POST_NOTIFICATIONS))) {\r\n                confirmPermission(arrayOf(Manifest.permission.POST_NOTIFICATIONS), REQUEST_CODE_NOTIFICATION)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "550",
  "methodName" : "confirmPrePermissions",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/151",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.os.Build\nprivate fun confirmPrePermissions() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "580",
  "ground_truth" : "        val postCardViewer = Intent(this@DiaryMainActivity, PostcardViewerActivity::class.java)\r\n        TransitionHelper.startActivityWithTransition(this@DiaryMainActivity, postCardViewer)\r\n    }",
  "context" : "private fun openPostcardViewer() {\r\n        val postCardViewer = Intent(this@DiaryMainActivity, PostcardViewerActivity::class.java)\r\n        TransitionHelper.startActivityWithTransition(this@DiaryMainActivity, postCardViewer)\r\n    }",
  "start_lineno" : "577",
  "methodName" : "openPostcardViewer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/152",
  "prompt" : "import android.view.View\nprivate fun openPostcardViewer() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "713",
  "ground_truth" : "            mBinding.query.text.toString()\r\n        refreshList(queryString)\r\n    }",
  "context" : "private fun refreshList() {\r\n        var queryString = \"\"\r\n        if (StringUtils.isNotEmpty(mBinding.query.text)) queryString =\r\n            mBinding.query.text.toString()\r\n        refreshList(queryString)\r\n    }",
  "start_lineno" : "708",
  "methodName" : "refreshList",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/153",
  "prompt" : "import org.apache.commons.lang3.StringUtils\nprivate fun refreshList() {\r\n        var queryString = \"\"\r\n        if (StringUtils.isNotEmpty(mBinding.query.text)) queryString =\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "783",
  "ground_truth" : "            config.isInitDummyData = true\r\n        }\r\n    }",
  "context" : "private fun initDummyData() {\r\n        if (!config.isInitDummyData) {\r\n            initSampleData()\r\n            config.isInitDummyData = true\r\n        }\r\n    }",
  "start_lineno" : "778",
  "methodName" : "initDummyData",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/154",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nprivate fun initDummyData() {\r\n        if (!config.isInitDummyData) {\r\n            initSampleData()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPopupMenuBinding PopupMenuMainBinding\nvar mGridLayoutManager GridLayoutManager\nvar mDiaryMainItemAdapter DiaryMainItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nvar mShowcaseView ShowcaseView?\nvar mPopupWindow PopupWindow?\nvar mLastHistoryCheckMillis\nval mRequestSpeechInputLauncher\nval mRequestSAFForHtmlBookLauncher\nvar mDiaryMode",
  "app_type" : "notes",
  "end_lineno" : "819",
  "ground_truth" : "        val sd = ShakeDetector(this)\r\n        sd.start(sensorManager, SensorManager.SENSOR_DELAY_GAME)\r\n    }",
  "context" : "private fun setupMotionSensor() {\r\n        val sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager\r\n        val sd = ShakeDetector(this)\r\n        sd.start(sensorManager, SensorManager.SENSOR_DELAY_GAME)\r\n    }",
  "start_lineno" : "815",
  "methodName" : "setupMotionSensor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt",
  "task_id" : "aaf-easydiary/155",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.hardware.SensorManager\nprivate fun setupMotionSensor() {\r\n        val sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "            if (this is PlaceholderFragment) {\r\n                if (this.isAdded) this.initContents()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        initModule()\r\n        mSectionsPagerAdapter.notifyDataSetChanged()\r\n        mSectionsPagerAdapter.instantiateItem(mBinding.diaryViewPager, mBinding.diaryViewPager.currentItem).run {\r\n            if (this is PlaceholderFragment) {\r\n                if (this.isAdded) this.initContents()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "96",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/156",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r\n        initModule()\r\n        mSectionsPagerAdapter.notifyDataSetChanged()\r\n        mSectionsPagerAdapter.instantiateItem(mBinding.diaryViewPager, mBinding.diaryViewPager.currentItem).run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "110",
  "ground_truth" : "        super.onPause()\r\n        destroyModule()\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        destroyModule()\r\n    }",
  "start_lineno" : "107",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/157",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "118",
  "ground_truth" : "        if (fragment is PlaceholderFragment) {\r\n            outState.putInt(DIARY_SEQUENCE, fragment.getSequence())\r\n        }\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        val fragment = mSectionsPagerAdapter.instantiateItem(mBinding.diaryViewPager, mBinding.diaryViewPager.currentItem)\r\n        if (fragment is PlaceholderFragment) {\r\n            outState.putInt(DIARY_SEQUENCE, fragment.getSequence())\r\n        }\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "start_lineno" : "112",
  "methodName" : "onSaveInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/158",
  "prompt" : "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        val fragment = mSectionsPagerAdapter.instantiateItem(mBinding.diaryViewPager, mBinding.diaryViewPager.currentItem)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "226",
  "ground_truth" : "            true -> menu.findItem(R.id.highlightText).isVisible = true\r\n            false -> menu.findItem(R.id.highlightText).isVisible = false\r\n        }\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_diary_reading, menu)\r\n        when (config.enableDebugMode) {\r\n            true -> menu.findItem(R.id.highlightText).isVisible = true\r\n            false -> menu.findItem(R.id.highlightText).isVisible = false\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "219",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/159",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_diary_reading, menu)\r\n        when (config.enableDebugMode) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "238",
  "ground_truth" : "            }\r\n\r\n        }\r\n        TransitionHelper.startActivityWithTransition(this@DiaryReadingActivity, updateDiaryIntent)\r\n    }",
  "context" : "private fun startEditing(fragment: PlaceholderFragment, inputPass: String? = null) {\r\n        val updateDiaryIntent = Intent(this@DiaryReadingActivity, DiaryEditingActivity::class.java).apply {\r\n            putExtra(DIARY_SEQUENCE, fragment.getSequence())\r\n            putExtra(DIARY_CONTENTS_SCROLL_Y, fragment.getContentsPositionY())\r\n            inputPass?.let {\r\n                putExtra(DIARY_ENCRYPT_PASSWORD, it)\r\n            }\r\n\r\n        }\r\n        TransitionHelper.startActivityWithTransition(this@DiaryReadingActivity, updateDiaryIntent)\r\n    }",
  "start_lineno" : "228",
  "methodName" : "startEditing",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/160",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport android.content.Intent\nprivate fun startEditing(fragment: PlaceholderFragment, inputPass: String? = null) {\r\n        val updateDiaryIntent = Intent(this@DiaryReadingActivity, DiaryEditingActivity::class.java).apply {\r\n            putExtra(DIARY_SEQUENCE, fragment.getSequence())\r\n            putExtra(DIARY_CONTENTS_SCROLL_Y, fragment.getContentsPositionY())\r\n            inputPass?.let {\r\n                putExtra(DIARY_ENCRYPT_PASSWORD, it)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "474",
  "ground_truth" : "                    setSpeechRate(1f)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun initModule() {\r\n        mTextToSpeech = TextToSpeech(this@DiaryReadingActivity) { status ->\r\n            if (status == TextToSpeech.SUCCESS) {\r\n                mTextToSpeech?.run {\r\n                    language = Locale.getDefault()\r\n                    setPitch(1.3f)\r\n                    setSpeechRate(1f)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "464",
  "methodName" : "initModule",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/161",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport android.speech.tts.TextToSpeech\nprivate fun initModule() {\r\n        mTextToSpeech = TextToSpeech(this@DiaryReadingActivity) { status ->\r\n            if (status == TextToSpeech.SUCCESS) {\r\n                mTextToSpeech?.run {\r\n                    language = Locale.getDefault()\r\n                    setPitch(1.3f)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "482",
  "ground_truth" : "            stop()\r\n            shutdown()\r\n            mTextToSpeech = null\r\n        }\r\n    }",
  "context" : "private fun destroyModule() {\r\n        mTextToSpeech?.run {\r\n            stop()\r\n            shutdown()\r\n            mTextToSpeech = null\r\n        }\r\n    }",
  "start_lineno" : "476",
  "methodName" : "destroyModule",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/162",
  "prompt" : "import android.speech.tts.TextToSpeech\nprivate fun destroyModule() {\r\n        mTextToSpeech?.run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "490",
  "ground_truth" : "            ttsGreater21(text)\r\n        } else {\r\n            ttsUnder20(text)\r\n        }\r\n    }",
  "context" : "private fun textToSpeech(text: String) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            ttsGreater21(text)\r\n        } else {\r\n            ttsUnder20(text)\r\n        }\r\n    }",
  "start_lineno" : "484",
  "methodName" : "textToSpeech",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/163",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.os.Build\nprivate fun textToSpeech(text: String) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "504",
  "ground_truth" : "\r\n            override fun onDone(utteranceId: String) {}\r\n        })\r\n        mTextToSpeech?.speak(text, TextToSpeech.QUEUE_FLUSH, map)\r\n    }",
  "context" : " @Suppress(\"DEPRECATION\")\r\n    private fun ttsUnder20(text: String) {\r\n        val map = HashMap<String, String>()\r\n        map[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = \"MessageId\"\r\n        mTextToSpeech?.setOnUtteranceProgressListener(object : UtteranceProgressListener() {\r\n            override fun onStart(utteranceId: String) {}\r\n\r\n            override fun onError(utteranceId: String) {}\r\n\r\n            override fun onDone(utteranceId: String) {}\r\n        })\r\n        mTextToSpeech?.speak(text, TextToSpeech.QUEUE_FLUSH, map)\r\n    }",
  "start_lineno" : "492",
  "methodName" : "ttsUnder20",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/164",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.speech.tts.UtteranceProgressListener\nimport android.speech.tts.TextToSpeech\n @Suppress(\"DEPRECATION\")\r\n    private fun ttsUnder20(text: String) {\r\n        val map = HashMap<String, String>()\r\n        map[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = \"MessageId\"\r\n        mTextToSpeech?.setOnUtteranceProgressListener(object : UtteranceProgressListener() {\r\n            override fun onStart(utteranceId: String) {}\r\n\r\n            override fun onError(utteranceId: String) {}\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "510",
  "ground_truth" : "        val utteranceId = this.hashCode().toString() + \"\"\r\n        mTextToSpeech?.speak(text, TextToSpeech.QUEUE_FLUSH, null, utteranceId)\r\n    }",
  "context" : " @TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\n    private fun ttsGreater21(text: String) {\r\n        val utteranceId = this.hashCode().toString() + \"\"\r\n        mTextToSpeech?.speak(text, TextToSpeech.QUEUE_FLUSH, null, utteranceId)\r\n    }",
  "start_lineno" : "506",
  "methodName" : "ttsGreater21",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/165",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.os.Build\nimport android.annotation.TargetApi\n @TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\n    private fun ttsGreater21(text: String) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "584",
  "ground_truth" : "            mRootView = mBinding.mainHolder\r\n            return mRootView\r\n//            mRootView = inflater.inflate(R.layout.fragment_diary_read, container, false) as ViewGroup\r\n//            return mRootView\r\n        }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n            mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_diary_read, container, false)\r\n            mBinding.lifecycleOwner = this\r\n            mBinding.viewModel = mViewModel\r\n            mRootView = mBinding.mainHolder\r\n            return mRootView\r\n//            mRootView = inflater.inflate(R.layout.fragment_diary_read, container, false) as ViewGroup\r\n//            return mRootView\r\n        }",
  "start_lineno" : "576",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/166",
  "prompt" : "import me.blog.korn123.easydiary.databinding\nimport me.blog.korn123.easydiary.R\nimport androidx.databinding.DataBindingUtil\nimport android.view\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n            mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_diary_read, container, false)\r\n            mBinding.lifecycleOwner = this\r\n            mBinding.viewModel = mViewModel\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "638",
  "ground_truth" : "            if (index > 0) {\r\n                val layout = mBinding.diaryContents.layout\r\n                mBinding.scrollDiaryContents.scrollTo(0, layout.getLineTop(layout.getLineForOffset(index)))\r\n            }\r\n        }",
  "context" : "fun moveScroll(query: String, startIndex: Int = 0) {\r\n            val index = mBinding.diaryContents.text.toString().indexOf(query, startIndex, true)\r\n            if (index > 0) {\r\n                val layout = mBinding.diaryContents.layout\r\n                mBinding.scrollDiaryContents.scrollTo(0, layout.getLineTop(layout.getLineForOffset(index)))\r\n            }\r\n        }",
  "start_lineno" : "632",
  "methodName" : "moveScroll",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/167",
  "prompt" : "fun moveScroll(query: String, startIndex: Int = 0) {\r\n            val index = mBinding.diaryContents.text.toString().indexOf(query, startIndex, true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "649",
  "ground_truth" : "            }\r\n            mBinding.diaryContents.run {\r\n                this.text = SpannableString(this.text).apply { EasyDiaryUtils.removeSpans(this) }\r\n            }\r\n        }",
  "context" : "fun clearHighLight() {\r\n            mBinding.diaryTitle.run {\r\n                this.text = SpannableString(this.text).apply { EasyDiaryUtils.removeSpans(this) }\r\n            }\r\n            mBinding.diaryContents.run {\r\n                this.text = SpannableString(this.text).apply { EasyDiaryUtils.removeSpans(this) }\r\n            }\r\n        }",
  "start_lineno" : "642",
  "methodName" : "clearHighLight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/168",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport android.text.SpannableString\nfun clearHighLight() {\r\n            mBinding.diaryTitle.run {\r\n                this.text = SpannableString(this.text).apply { EasyDiaryUtils.removeSpans(this) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "729",
  "ground_truth" : "                mPrimaryColor = it.config.primaryColor\r\n            }\r\n        }",
  "context" : "private fun initBottomContainer() {\r\n            context?.let {\r\n                mPrimaryColor = it.config.primaryColor\r\n            }\r\n        }",
  "start_lineno" : "725",
  "methodName" : "initBottomContainer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/169",
  "prompt" : "private fun initBottomContainer() {\r\n            context?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "735",
  "ground_truth" : "                FontUtils.setFontsTypeface(it, \"\", mRootView)\r\n            }\r\n        }",
  "context" : "private fun setFontsTypeface() {\r\n            activity?.let { it ->\r\n                FontUtils.setFontsTypeface(it, \"\", mRootView)\r\n            }\r\n        }",
  "start_lineno" : "731",
  "methodName" : "setFontsTypeface",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/170",
  "prompt" : "private fun setFontsTypeface() {\r\n            activity?.let { it ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "764",
  "ground_truth" : "//                    diaryContents.text = JasyptUtils.decrypt(diaryDto.contents!!, inputPass)\r\n                    requireActivity().applyMarkDownPolicy(diaryContents, JasyptUtils.decrypt(diaryDto.contents!!, inputPass))\r\n                }\r\n            }\r\n        }",
  "context" : "fun decryptDataOnce(inputPass: String) {\r\n            EasyDiaryDbHelper.findDiaryBy(getSequence())?.let { diaryDto ->\r\n                mBinding.run {\r\n                    diaryTitle.text = JasyptUtils.decrypt(diaryDto.title!!, inputPass)\r\n//                    diaryContents.text = JasyptUtils.decrypt(diaryDto.contents!!, inputPass)\r\n                    requireActivity().applyMarkDownPolicy(diaryContents, JasyptUtils.decrypt(diaryDto.contents!!, inputPass))\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "756",
  "methodName" : "decryptDataOnce",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/171",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nfun decryptDataOnce(inputPass: String) {\r\n            EasyDiaryDbHelper.findDiaryBy(getSequence())?.let { diaryDto ->\r\n                mBinding.run {\r\n                    diaryTitle.text = JasyptUtils.decrypt(diaryDto.title!!, inputPass)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "802",
  "ground_truth" : "                args.putInt(DIARY_SEQUENCE, sequence)\r\n                args.putString(SELECTED_SEARCH_QUERY, query)\r\n                fragment.arguments = args\r\n                return fragment\r\n            }",
  "context" : "fun newInstance(sequence: Int, query: String?): PlaceholderFragment {\r\n                val fragment = PlaceholderFragment()\r\n                val args = Bundle()\r\n                args.putInt(DIARY_SEQUENCE, sequence)\r\n                args.putString(SELECTED_SEARCH_QUERY, query)\r\n                fragment.arguments = args\r\n                return fragment\r\n            }",
  "start_lineno" : "795",
  "methodName" : "newInstance",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/172",
  "prompt" : "import android.os.Bundle\nfun newInstance(sequence: Int, query: String?): PlaceholderFragment {\r\n                val fragment = PlaceholderFragment()\r\n                val args = Bundle()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "811",
  "ground_truth" : "                photoViewPager.putExtra(DIARY_ATTACH_PHOTO_INDEX, index)\r\n                TransitionHelper.startActivityWithTransition(activity, photoViewPager, TransitionHelper.BOTTOM_TO_TOP)\r\n            }",
  "context" : "override fun onClick(v: View) {\r\n                val photoViewPager = Intent(context, PhotoViewPagerActivity::class.java)\r\n                photoViewPager.putExtra(DIARY_SEQUENCE, diarySequence)\r\n                photoViewPager.putExtra(DIARY_ATTACH_PHOTO_INDEX, index)\r\n                TransitionHelper.startActivityWithTransition(activity, photoViewPager, TransitionHelper.BOTTOM_TO_TOP)\r\n            }",
  "start_lineno" : "806",
  "methodName" : "onClick",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/173",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.content.Intent\noverride fun onClick(v: View) {\r\n                val photoViewPager = Intent(context, PhotoViewPagerActivity::class.java)\r\n                photoViewPager.putExtra(DIARY_SEQUENCE, diarySequence)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSectionsPagerAdapter SectionsPagerAdapter\nvar mBinding ActivityDiaryReadingBinding\nvar mPopupEncryptionBinding PopupEncryptionBinding\nvar mDialogHighlightKeywordBinding DialogHighlightKeywordBinding\nvar mTextToSpeech TextToSpeech?\nvar mShowcaseView ShowcaseView?\nvar mShowcaseIndex\nvar mDialogSearch AlertDialog?\nvar mSearchIndexes\nvar mCurrentIndexesSequence\nval ENCRYPTION\nval DECRYPTION\nval EDITING\nvar mRootView ViewGroup\nvar mBinding FragmentDiaryReadBinding\nval mViewModel DiaryReadViewModel\nvar mPrimaryColor\nvar mStoredContents String?",
  "app_type" : "notes",
  "end_lineno" : "829",
  "ground_truth" : "            // Return a PlaceholderFragment (defined as a static inner class below).\r\n            return PlaceholderFragment.newInstance(diaryList[position].sequence, query)\r\n        }",
  "context" : "override fun getItem(position: Int): androidx.fragment.app.Fragment {\r\n            // getItem is called to instantiate the fragment for the given page.\r\n            // Return a PlaceholderFragment (defined as a static inner class below).\r\n            return PlaceholderFragment.newInstance(diaryList[position].sequence, query)\r\n        }",
  "start_lineno" : "825",
  "methodName" : "getItem",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt",
  "task_id" : "aaf-easydiary/174",
  "prompt" : "override fun getItem(position: Int): androidx.fragment.app.Fragment {\r\n            // getItem is called to instantiate the fragment for the given page.\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mShowcaseView ShowcaseView\nvar mShowcaseIndex\nval INITIALIZE_TIME_MILLIS",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "override fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r\n            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "60",
  "methodName" : "setVisiblePhotoProgress",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryWritingActivity.kt",
  "task_id" : "aaf-easydiary/175",
  "prompt" : "import android.view.View\noverride fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mShowcaseView ShowcaseView\nvar mShowcaseIndex\nval INITIALIZE_TIME_MILLIS",
  "app_type" : "notes",
  "end_lineno" : "74",
  "ground_truth" : "            EasyDiaryDbHelper.deleteTemporaryDiaryBy(DIARY_SEQUENCE_TEMPORARY)\r\n        } else {\r\n            saveTemporaryDiary(DIARY_SEQUENCE_TEMPORARY)\r\n        }\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        if (mIsDiarySaved) {\r\n            EasyDiaryDbHelper.deleteTemporaryDiaryBy(DIARY_SEQUENCE_TEMPORARY)\r\n        } else {\r\n            saveTemporaryDiary(DIARY_SEQUENCE_TEMPORARY)\r\n        }\r\n    }",
  "start_lineno" : "67",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryWritingActivity.kt",
  "task_id" : "aaf-easydiary/176",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\noverride fun onPause() {\r\n        super.onPause()\r\n        if (mIsDiarySaved) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mShowcaseView ShowcaseView\nvar mShowcaseIndex\nval INITIALIZE_TIME_MILLIS",
  "app_type" : "notes",
  "end_lineno" : "148",
  "ground_truth" : "        val hasShot = getSharedPreferences(\"showcase_internal\", Context.MODE_PRIVATE).getBoolean(\"hasShot$SHOWCASE_SINGLE_SHOT_CREATE_DIARY_NUMBER\", false)\r\n        if (!hasShot) window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)\r\n    }",
  "context" : "private fun setupKeypad() {\r\n        val hasShot = getSharedPreferences(\"showcase_internal\", Context.MODE_PRIVATE).getBoolean(\"hasShot$SHOWCASE_SINGLE_SHOT_CREATE_DIARY_NUMBER\", false)\r\n        if (!hasShot) window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)\r\n    }",
  "start_lineno" : "145",
  "methodName" : "setupKeypad",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryWritingActivity.kt",
  "task_id" : "aaf-easydiary/177",
  "prompt" : "private fun setupKeypad() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mCustomLineSpacing\nval mRootView ViewGroup?",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "        useDynamicTheme = !isNightMode()\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        useDynamicTheme = !isNightMode()\r\n        super.onCreate(savedInstanceState)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onCreate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt",
  "task_id" : "aaf-easydiary/178",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mCustomLineSpacing\nval mRootView ViewGroup?",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        pauseLock()\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        pauseLock()\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt",
  "task_id" : "aaf-easydiary/179",
  "prompt" : "override fun onBackPressed() {\r\n        super.onBackPressed()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mCustomLineSpacing\nval mRootView ViewGroup?",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "        super.onPause()\r\n        pauseLock()\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        pauseLock()\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt",
  "task_id" : "aaf-easydiary/180",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityFingerprintLockBinding\nvar mKeyStore KeyStore\nvar mKeyGenerator KeyGenerator\nvar mFingerprintManager FingerprintManagerCompat\nvar mCryptoObject FingerprintManagerCompat.CryptoObject\nvar mCancellationSignal CancellationSignal?\nvar mActivityMode String?\nvar mSettingComplete\nval handler\nval TAG\nval KEY_NAME\nval DUMMY_ENCRYPT_DATA\nval LAUNCHING_MODE\nval ACTIVITY_SETTING\nval ACTIVITY_UNLOCK",
  "app_type" : "notes",
  "end_lineno" : "158",
  "ground_truth" : "        super.onPause()\r\n        mCancellationSignal?.cancel()\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        mCancellationSignal?.cancel()\r\n    }",
  "start_lineno" : "155",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\FingerprintLockActivity.kt",
  "task_id" : "aaf-easydiary/181",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityFingerprintLockBinding\nvar mKeyStore KeyStore\nvar mKeyGenerator KeyGenerator\nvar mFingerprintManager FingerprintManagerCompat\nvar mCryptoObject FingerprintManagerCompat.CryptoObject\nvar mCancellationSignal CancellationSignal?\nvar mActivityMode String?\nvar mSettingComplete\nval handler\nval TAG\nval KEY_NAME\nval DUMMY_ENCRYPT_DATA\nval LAUNCHING_MODE\nval ACTIVITY_SETTING\nval ACTIVITY_UNLOCK",
  "app_type" : "notes",
  "end_lineno" : "163",
  "ground_truth" : "        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }",
  "start_lineno" : "160",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\FingerprintLockActivity.kt",
  "task_id" : "aaf-easydiary/182",
  "prompt" : "override fun onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityFingerprintLockBinding\nvar mKeyStore KeyStore\nvar mKeyGenerator KeyGenerator\nvar mFingerprintManager FingerprintManagerCompat\nvar mCryptoObject FingerprintManagerCompat.CryptoObject\nvar mCancellationSignal CancellationSignal?\nvar mActivityMode String?\nvar mSettingComplete\nval handler\nval TAG\nval KEY_NAME\nval DUMMY_ENCRYPT_DATA\nval LAUNCHING_MODE\nval ACTIVITY_SETTING\nval ACTIVITY_UNLOCK",
  "app_type" : "notes",
  "end_lineno" : "229",
  "ground_truth" : "        // The line below prevents the false positive inspection from Android Studio\r\n        return mFingerprintManager.isHardwareDetected() && mFingerprintManager.hasEnrolledFingerprints()\r\n    }",
  "context" : " @RequiresApi(Build.VERSION_CODES.M)\r\n    fun isFingerprintAuthAvailable(): Boolean {\r\n        // The line below prevents the false positive inspection from Android Studio\r\n        return mFingerprintManager.isHardwareDetected() && mFingerprintManager.hasEnrolledFingerprints()\r\n    }",
  "start_lineno" : "225",
  "methodName" : "isFingerprintAuthAvailable",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\FingerprintLockActivity.kt",
  "task_id" : "aaf-easydiary/183",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.M)\r\n    fun isFingerprintAuthAvailable(): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityGalleryBinding\nvar mGalleryAdapter GalleryAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>",
  "app_type" : "notes",
  "end_lineno" : "165",
  "ground_truth" : "        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }",
  "start_lineno" : "162",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryActivity.kt",
  "task_id" : "aaf-easydiary/184",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityGalleryBinding\nvar mGalleryAdapter GalleryAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>",
  "app_type" : "notes",
  "end_lineno" : "170",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }",
  "start_lineno" : "167",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryActivity.kt",
  "task_id" : "aaf-easydiary/185",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityGalleryBinding\nvar mGalleryAdapter GalleryAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>",
  "app_type" : "notes",
  "end_lineno" : "180",
  "ground_truth" : "                mGalleryAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.layout -> openGridSettingDialog(mBinding.root, GridSpanMode.GALLERY) {\r\n                mGridLayoutManager.spanCount = it\r\n                mGalleryAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "172",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryActivity.kt",
  "task_id" : "aaf-easydiary/186",
  "prompt" : "import me.blog.korn123.easydiary.extensions.openGridSettingDialog\nimport me.blog.korn123.easydiary.enums.GridSpanMode\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.app.Dialog\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.layout -> openGridSettingDialog(mBinding.root, GridSpanMode.GALLERY) {\r\n                mGridLayoutManager.spanCount = it\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPhotoViewPagerBinding\nvar mAttachedPhotoCount Int\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_gallery_view_pager, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_gallery_view_pager, menu)\r\n        return true\r\n    }",
  "start_lineno" : "77",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryViewPagerActivity.kt",
  "task_id" : "aaf-easydiary/187",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityIntroBinding\nvar mHandler Handler",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "            initTextSize(this)\r\n            setBackgroundColor(config.primaryColor)\r\n            updateStatusBarColor(config.primaryColor)\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        mBinding.root.run {\r\n            FontUtils.setFontsTypeface(this@IntroActivity, null, this)\r\n            initTextSize(this)\r\n            setBackgroundColor(config.primaryColor)\r\n            updateStatusBarColor(config.primaryColor)\r\n        }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\IntroActivity.kt",
  "task_id" : "aaf-easydiary/188",
  "prompt" : "import me.blog.korn123.commons.utils.FontUtils\noverride fun onResume() {\r\n        super.onResume()\r\n        mBinding.root.run {\r\n            FontUtils.setFontsTypeface(this@IntroActivity, null, this)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityMarkdownViewerBinding\nvar savedFilePath String\nvar markdownUrl String\nval mPrism4j\nvar mForceAppendCodeBlock\nval OPEN_URL_INFO\nval OPEN_URL_DESCRIPTION\nval FORCE_APPEND_CODE_BLOCK",
  "app_type" : "notes",
  "end_lineno" : "82",
  "ground_truth" : "            false -> {\r\n                Thread(Runnable { openMarkdownFileAfterDownload(markdownUrl, savedFilePath) }).start()\r\n            }\r\n        }\r\n    }",
  "context" : "private fun openMarkdownFile() {\r\n        when (File(savedFilePath).exists()) {\r\n            true -> {\r\n                runOnUiThread { mBinding.progressBar.visibility = View.GONE }\r\n                initMarkdown()\r\n            }\r\n            false -> {\r\n                Thread(Runnable { openMarkdownFileAfterDownload(markdownUrl, savedFilePath) }).start()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "72",
  "methodName" : "openMarkdownFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt",
  "task_id" : "aaf-easydiary/189",
  "prompt" : "import java.io.File\nimport android.view.View\nprivate fun openMarkdownFile() {\r\n        when (File(savedFilePath).exists()) {\r\n            true -> {\r\n                runOnUiThread { mBinding.progressBar.visibility = View.GONE }\r\n                initMarkdown()\r\n            }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityMarkdownViewerBinding\nvar savedFilePath String\nvar markdownUrl String\nval mPrism4j\nvar mForceAppendCodeBlock\nval OPEN_URL_INFO\nval OPEN_URL_DESCRIPTION\nval FORCE_APPEND_CODE_BLOCK",
  "app_type" : "notes",
  "end_lineno" : "134",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_markdown_viewer, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_markdown_viewer, menu)\r\n        return true\r\n    }",
  "start_lineno" : "131",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt",
  "task_id" : "aaf-easydiary/190",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityMarkdownViewerBinding\nvar savedFilePath String\nvar markdownUrl String\nval mPrism4j\nvar mForceAppendCodeBlock\nval OPEN_URL_INFO\nval OPEN_URL_DESCRIPTION\nval FORCE_APPEND_CODE_BLOCK",
  "app_type" : "notes",
  "end_lineno" : "164",
  "ground_truth" : "            } else {\r\n                makeSnackBar(\"Permission denied\")\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        pauseLock()\r\n        when (requestCode) {\r\n            REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN -> if (checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r\n                openMarkdownFile()\r\n            } else {\r\n                makeSnackBar(\"Permission denied\")\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "154",
  "methodName" : "onRequestPermissionsResult",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt",
  "task_id" : "aaf-easydiary/191",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.helper.REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN\nimport me.blog.korn123.easydiary.helper.EXTERNAL_STORAGE_PERMISSIONS\nimport me.blog.korn123.easydiary.R\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        pauseLock()\r\n        when (requestCode) {\r\n            REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN -> if (checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r\n                openMarkdownFile()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityMarkdownViewerBinding\nvar savedFilePath String\nvar markdownUrl String\nval mPrism4j\nvar mForceAppendCodeBlock\nval OPEN_URL_INFO\nval OPEN_URL_DESCRIPTION\nval FORCE_APPEND_CODE_BLOCK",
  "app_type" : "notes",
  "end_lineno" : "179",
  "ground_truth" : "        } catch (e: FileNotFoundException) {\r\n            sb.append(e.message)\r\n        }\r\n        return sb.toString()\r\n    }",
  "context" : "private fun readSavedFile(): String {\r\n        val sb = StringBuilder()\r\n        try {\r\n            val lines = IOUtils.readLines(FileInputStream(File(savedFilePath)), \"UTF-8\")\r\n            lines.map {\r\n                sb.append(it)\r\n                sb.append(System.getProperty(\"line.separator\"))\r\n            }\r\n            Log.i(\"aaf-t\", sb.toString())\r\n        } catch (e: FileNotFoundException) {\r\n            sb.append(e.message)\r\n        }\r\n        return sb.toString()\r\n    }",
  "start_lineno" : "166",
  "methodName" : "readSavedFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt",
  "task_id" : "aaf-easydiary/192",
  "prompt" : "import java.io.FileInputStream\nimport java.io.File\nimport org.apache.commons.io.IOUtils\nimport android.util.Log\nprivate fun readSavedFile(): String {\r\n        val sb = StringBuilder()\r\n        try {\r\n            val lines = IOUtils.readLines(FileInputStream(File(savedFilePath)), \"UTF-8\")\r\n            lines.map {\r\n                sb.append(it)\r\n                sb.append(System.getProperty(\"line.separator\"))\r\n            }\r\n            Log.i(\"aaf-t\", sb.toString())\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPhotoViewPagerBinding\nvar mPhotoCount Int",
  "app_type" : "notes",
  "end_lineno" : "104",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_photo_view_pager, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_photo_view_pager, menu)\r\n        return true\r\n    }",
  "start_lineno" : "101",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PhotoViewPagerActivity.kt",
  "task_id" : "aaf-easydiary/193",
  "prompt" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPinLockBinding\nvar mPassword\nvar mPasswordView\nvar mCursorIndex\nvar activityMode String?\nval keyPadClickListener View.OnClickListener\nval LAUNCHING_MODE\nval ACTIVITY_SETTING\nval ACTIVITY_UNLOCK",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "        FontUtils.setFontsTypeface(applicationContext, null, mBinding.container)\r\n        mBinding.infoMessage.text = if (activityMode == ACTIVITY_SETTING) getString(R.string.pin_setting_guide_message) else getString(R.string.pin_unlock_guide_message)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        FontUtils.setFontsTypeface(applicationContext, null, mBinding.container)\r\n        mBinding.infoMessage.text = if (activityMode == ACTIVITY_SETTING) getString(R.string.pin_setting_guide_message) else getString(R.string.pin_unlock_guide_message)\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PinLockActivity.kt",
  "task_id" : "aaf-easydiary/194",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPinLockBinding\nvar mPassword\nvar mPasswordView\nvar mCursorIndex\nvar activityMode String?\nval keyPadClickListener View.OnClickListener\nval LAUNCHING_MODE\nval ACTIVITY_SETTING\nval ACTIVITY_UNLOCK",
  "app_type" : "notes",
  "end_lineno" : "69",
  "ground_truth" : "        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }",
  "start_lineno" : "66",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PinLockActivity.kt",
  "task_id" : "aaf-easydiary/195",
  "prompt" : "override fun onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "154",
  "ground_truth" : "        outState.putInt(POSTCARD_TEXT_COLOR, mTextColor)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "context" : "override fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putInt(POSTCARD_BG_COLOR, mBgColor)\r\n        outState.putInt(POSTCARD_TEXT_COLOR, mTextColor)\r\n        super.onSaveInstanceState(outState)\r\n    }",
  "start_lineno" : "150",
  "methodName" : "onSaveInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/196",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.os.Bundle\nimport android.graphics.Color\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putInt(POSTCARD_BG_COLOR, mBgColor)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "159",
  "ground_truth" : "        super.onResume()\r\n        updateTextSize(mBinding.postContainer, this@PostcardActivity, mAddFontSize)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateTextSize(mBinding.postContainer, this@PostcardActivity, mAddFontSize)\r\n    }",
  "start_lineno" : "156",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/197",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "182",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_postcard, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_postcard, menu)\r\n        return true\r\n    }",
  "start_lineno" : "179",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/198",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "234",
  "ground_truth" : "        mBinding.run {\r\n            postContainer.setBackgroundColor(mBgColor)\r\n//            photoGridContainer.setBackgroundColor(mBgColor)\r\n        }\r\n    }",
  "context" : "private fun setBackgroundColor(selectedColor: Int) {\r\n        mBgColor = selectedColor\r\n        mBinding.run {\r\n            postContainer.setBackgroundColor(mBgColor)\r\n//            photoGridContainer.setBackgroundColor(mBgColor)\r\n        }\r\n    }",
  "start_lineno" : "228",
  "methodName" : "setBackgroundColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/199",
  "prompt" : "import android.graphics.Color\nprivate fun setBackgroundColor(selectedColor: Int) {\r\n        mBgColor = selectedColor\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "243",
  "ground_truth" : "            diaryTitle.setTextColor(mTextColor)\r\n            date.setTextColor(mTextColor)\r\n            contents.setTextColor(mTextColor)\r\n        }\r\n    }",
  "context" : "private fun setTextColor(selectedColor: Int) {\r\n        mTextColor = selectedColor\r\n        mBinding.run {\r\n            diaryTitle.setTextColor(mTextColor)\r\n            date.setTextColor(mTextColor)\r\n            contents.setTextColor(mTextColor)\r\n        }\r\n    }",
  "start_lineno" : "236",
  "methodName" : "setTextColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/200",
  "prompt" : "import android.graphics.Color\nprivate fun setTextColor(selectedColor: Int) {\r\n        mTextColor = selectedColor\r\n        mBinding.run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "336",
  "ground_truth" : "        shareIntent.action = Intent.ACTION_SEND\r\n        shareIntent.putExtra(Intent.EXTRA_STREAM, getUriForFile(file))\r\n        shareIntent.type = \"image/jpeg\"\r\n        startActivity(Intent.createChooser(shareIntent, getString(R.string.diary_card_share_info)))\r\n    }",
  "context" : "private fun shareDiary() {\r\n        val file = File(mSavedDiaryCardPath)\r\n        val shareIntent = Intent()\r\n        shareIntent.action = Intent.ACTION_SEND\r\n        shareIntent.putExtra(Intent.EXTRA_STREAM, getUriForFile(file))\r\n        shareIntent.type = \"image/jpeg\"\r\n        startActivity(Intent.createChooser(shareIntent, getString(R.string.diary_card_share_info)))\r\n    }",
  "start_lineno" : "329",
  "methodName" : "shareDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/201",
  "prompt" : "import java.io.File\nimport android.content.Intent\nprivate fun shareDiary() {\r\n        val file = File(mSavedDiaryCardPath)\r\n        val shareIntent = Intent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "343",
  "ground_truth" : "        mBinding.scrollPostcard.draw(scrollViewCanvas)\r\n        return scrollViewBitmap\r\n    }",
  "context" : "private fun createBitmap(): Bitmap {\r\n        val scrollViewBitmap = Bitmap.createBitmap(mBinding.scrollPostcard.width, mBinding.scrollPostcard.getChildAt(0).height, Bitmap.Config.ARGB_8888)\r\n        val scrollViewCanvas = Canvas(scrollViewBitmap)\r\n        mBinding.scrollPostcard.draw(scrollViewCanvas)\r\n        return scrollViewBitmap\r\n    }",
  "start_lineno" : "338",
  "methodName" : "createBitmap",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/202",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.View\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun createBitmap(): Bitmap {\r\n        val scrollViewBitmap = Bitmap.createBitmap(mBinding.scrollPostcard.width, mBinding.scrollPostcard.getChildAt(0).height, Bitmap.Config.ARGB_8888)\r\n        val scrollViewCanvas = Canvas(scrollViewBitmap)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardBinding\nvar mShowcaseView ShowcaseView\nvar mSavedDiaryCardPath String\nvar mPhotoAdapter PhotoAdapter\nvar mSequence Int\nvar mBgColor\nvar mTextColor\nvar showcaseIndex\nvar mAddFontSize",
  "app_type" : "notes",
  "end_lineno" : "388",
  "ground_truth" : "            val point =  activity.getDefaultDisplay()\r\n            return point.y - activity.actionBarHeight() - activity.statusBarHeight() - activity.dpToPixel(30F, Calculation.CEIL)\r\n        }",
  "context" : "fun calcPhotoGridHeight(activity: Activity): Int {\r\n            val point =  activity.getDefaultDisplay()\r\n            return point.y - activity.actionBarHeight() - activity.statusBarHeight() - activity.dpToPixel(30F, Calculation.CEIL)\r\n        }",
  "start_lineno" : "385",
  "methodName" : "calcPhotoGridHeight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt",
  "task_id" : "aaf-easydiary/203",
  "prompt" : "import android.app.Activity\nfun calcPhotoGridHeight(activity: Activity): Int {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardViewerBinding\nvar mPostcardAdapter PostcardAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mListPostcard ArrayList<PostcardAdapter.PostCard>",
  "app_type" : "notes",
  "end_lineno" : "107",
  "ground_truth" : "        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }",
  "start_lineno" : "104",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewerActivity.kt",
  "task_id" : "aaf-easydiary/204",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardViewerBinding\nvar mPostcardAdapter PostcardAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mListPostcard ArrayList<PostcardAdapter.PostCard>",
  "app_type" : "notes",
  "end_lineno" : "112",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }",
  "start_lineno" : "109",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewerActivity.kt",
  "task_id" : "aaf-easydiary/205",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPostcardViewerBinding\nvar mPostcardAdapter PostcardAdapter\nvar mGridLayoutManager GridLayoutManager\nvar mListPostcard ArrayList<PostcardAdapter.PostCard>",
  "app_type" : "notes",
  "end_lineno" : "122",
  "ground_truth" : "                mPostcardAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.layout -> openGridSettingDialog(mBinding.root, GridSpanMode.POSTCARD) {\r\n                mGridLayoutManager.spanCount = it.toInt()\r\n                mPostcardAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "114",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewerActivity.kt",
  "task_id" : "aaf-easydiary/206",
  "prompt" : "import me.blog.korn123.easydiary.extensions.openGridSettingDialog\nimport me.blog.korn123.easydiary.enums.GridSpanMode\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.layout -> openGridSettingDialog(mBinding.root, GridSpanMode.POSTCARD) {\r\n                mGridLayoutManager.spanCount = it.toInt()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPhotoViewPagerBinding\nvar mPostcardCount Int\nvar mListPostcard List<File>",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_postcard_view_pager, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_postcard_view_pager, menu)\r\n        return true\r\n    }",
  "start_lineno" : "72",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewPagerActivity.kt",
  "task_id" : "aaf-easydiary/207",
  "prompt" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityPhotoViewPagerBinding\nvar mPostcardCount Int\nvar mListPostcard List<File>",
  "app_type" : "notes",
  "end_lineno" : "82",
  "ground_truth" : "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.share -> shareFile(mListPostcard[mBinding.viewPager.currentItem], MIME_TYPE_JPEG)\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "77",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewPagerActivity.kt",
  "task_id" : "aaf-easydiary/208",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.helper.MIME_TYPE_JPEG\nimport me.blog.korn123.easydiary.extensions.shareFile\nimport me.blog.korn123.easydiary.R\nimport android.view\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.share -> shareFile(mListPostcard[mBinding.viewPager.currentItem], MIME_TYPE_JPEG)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityStatisticsBinding\nval CHART_MODE\nval MODE_SINGLE_LINE_CHART_WEIGHT\nval MODE_SINGLE_LINE_CHART_STOCK\nval MODE_SINGLE_BAR_CHART_SYMBOL\nval MODE_SINGLE_HORIZONTAL_BAR_CHART_SYMBOL\nval MODE_SINGLE_BAR_CHART_WRITING",
  "app_type" : "notes",
  "end_lineno" : "63",
  "ground_truth" : "                applyFontToMenuItem(item)\r\n            }\r\n        }\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        if (!isSingleChart()) {\r\n            menuInflater.inflate(R.menu.activity_statistics, menu)\r\n            val targetItems = mutableListOf<MenuItem>()\r\n            targetItems.add(menu.findItem(R.id.barChart))\r\n            targetItems.add(menu.findItem(R.id.barChart2))\r\n            targetItems.add(menu.findItem(R.id.barChart3))\r\n            targetItems.map { item ->\r\n                applyFontToMenuItem(item)\r\n            }\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\StatisticsActivity.kt",
  "task_id" : "aaf-easydiary/209",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        if (!isSingleChart()) {\r\n            menuInflater.inflate(R.menu.activity_statistics, menu)\r\n            val targetItems = mutableListOf<MenuItem>()\r\n            targetItems.add(menu.findItem(R.id.barChart))\r\n            targetItems.add(menu.findItem(R.id.barChart2))\r\n            targetItems.add(menu.findItem(R.id.barChart3))\r\n            targetItems.map { item ->\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivitySymbolFilterPickerBinding\nvar mSymbolFilterAdapter SymbolFilterAdapter\nvar mSymbolFilterList ArrayList<SymbolFilterAdapter.SymbolFilter>",
  "app_type" : "notes",
  "end_lineno" : "110",
  "ground_truth" : "                this.onBackPressed()\r\n            }\r\n        }\r\n        return true\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                this.onBackPressed()\r\n            }\r\n        }\r\n        return true\r\n    }",
  "start_lineno" : "103",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\SymbolFilterPickerActivity.kt",
  "task_id" : "aaf-easydiary/210",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivitySymbolFilterPickerBinding\nvar mSymbolFilterAdapter SymbolFilterAdapter\nvar mSymbolFilterList ArrayList<SymbolFilterAdapter.SymbolFilter>",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "        setResult(Activity.RESULT_OK)\r\n        super.onBackPressed()\r\n    }",
  "context" : "override fun onBackPressed() {\r\n        setResult(Activity.RESULT_OK)\r\n        super.onBackPressed()\r\n    }",
  "start_lineno" : "112",
  "methodName" : "onBackPressed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\SymbolFilterPickerActivity.kt",
  "task_id" : "aaf-easydiary/211",
  "prompt" : "override fun onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivitySymbolFilterPickerBinding\nvar mSymbolFilterAdapter SymbolFilterAdapter\nvar mSymbolFilterList ArrayList<SymbolFilterAdapter.SymbolFilter>",
  "app_type" : "notes",
  "end_lineno" : "129",
  "ground_truth" : "            mSymbolFilterList.add(SymbolFilterAdapter.SymbolFilter(sequence.toInt()))\r\n        }\r\n        mSymbolFilterAdapter.notifyDataSetChanged()\r\n        if (scrollToBottom) mBinding.recyclerView.smoothScrollToPosition(mSymbolFilterList.size.minus(1))\r\n    }",
  "context" : "private fun updateSymbolFilter(scrollToBottom: Boolean = false) {\r\n        mSymbolFilterList.clear()\r\n        config.selectedSymbols.split(\",\").map { sequence ->\r\n            mSymbolFilterList.add(SymbolFilterAdapter.SymbolFilter(sequence.toInt()))\r\n        }\r\n        mSymbolFilterAdapter.notifyDataSetChanged()\r\n        if (scrollToBottom) mBinding.recyclerView.smoothScrollToPosition(mSymbolFilterList.size.minus(1))\r\n    }",
  "start_lineno" : "122",
  "methodName" : "updateSymbolFilter",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\SymbolFilterPickerActivity.kt",
  "task_id" : "aaf-easydiary/212",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nprivate fun updateSymbolFilter(scrollToBottom: Boolean = false) {\r\n        mSymbolFilterList.clear()\r\n        config.selectedSymbols.split(\",\").map { sequence ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityTimelineBinding\nvar mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nvar mTimelineItemAdapter TimelineItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mFirstTouch\nval mCalendar\nvar mSymbolSequence\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener",
  "app_type" : "notes",
  "end_lineno" : "164",
  "ground_truth" : "            config.previousActivity = -1\r\n        } else {\r\n            refreshList()\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        if (config.previousActivity == PREVIOUS_ACTIVITY_CREATE ) {\r\n            refreshList()\r\n            moveListViewScrollToBottom()\r\n            config.previousActivity = -1\r\n        } else {\r\n            refreshList()\r\n        }\r\n    }",
  "start_lineno" : "155",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\TimelineActivity.kt",
  "task_id" : "aaf-easydiary/213",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nimport android.view.View\noverride fun onResume() {\r\n        super.onResume()\r\n        if (config.previousActivity == PREVIOUS_ACTIVITY_CREATE ) {\r\n            refreshList()\r\n            moveListViewScrollToBottom()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityTimelineBinding\nvar mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nvar mTimelineItemAdapter TimelineItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mFirstTouch\nval mCalendar\nvar mSymbolSequence\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener",
  "app_type" : "notes",
  "end_lineno" : "169",
  "ground_truth" : "        menuInflater.inflate(R.menu.activity_timeline, menu)\r\n        return true\r\n    }",
  "context" : "override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_timeline, menu)\r\n        return true\r\n    }",
  "start_lineno" : "166",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\TimelineActivity.kt",
  "task_id" : "aaf-easydiary/214",
  "prompt" : "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityTimelineBinding\nvar mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nvar mTimelineItemAdapter TimelineItemAdapter?\nvar mDiaryList ArrayList<Diary>\nvar mFirstTouch\nval mCalendar\nvar mSymbolSequence\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener",
  "app_type" : "notes",
  "end_lineno" : "245",
  "ground_truth" : "        mSymbolSequence = if (index == 0) SYMBOL_SELECT_ALL else index\r\n        FlavorUtils.initWeatherView(this, mBinding.partialTimelineFilter.symbol, mSymbolSequence, false)\r\n    }",
  "context" : "private fun selectFeelingSymbol(index: Int = SYMBOL_SELECT_ALL) {\r\n        mSymbolSequence = if (index == 0) SYMBOL_SELECT_ALL else index\r\n        FlavorUtils.initWeatherView(this, mBinding.partialTimelineFilter.symbol, mSymbolSequence, false)\r\n    }",
  "start_lineno" : "242",
  "methodName" : "selectFeelingSymbol",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\TimelineActivity.kt",
  "task_id" : "aaf-easydiary/215",
  "prompt" : "private fun selectFeelingSymbol(index: Int = SYMBOL_SELECT_ALL) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDiaryMainBinding\nval viewModel DiaryMainViewModel\nvar mScrollable S?",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "\r\n        setSupportActionBar(mBinding.toolBar)\r\n        mScrollable = createScrollable()\r\n        mScrollable?.setScrollViewCallbacks(this)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_diary_main)\r\n        mBinding.lifecycleOwner = this\r\n        mBinding.viewModel = viewModel\r\n\r\n        setSupportActionBar(mBinding.toolBar)\r\n        mScrollable = createScrollable()\r\n        mScrollable?.setScrollViewCallbacks(this)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "onCreate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\ToolbarControlBaseActivity.kt",
  "task_id" : "aaf-easydiary/216",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.databinding.DataBindingUtil\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_diary_main)\r\n        mBinding.lifecycleOwner = this\r\n        mBinding.viewModel = viewModel\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDiaryMainBinding\nval viewModel DiaryMainViewModel\nvar mScrollable S?",
  "app_type" : "notes",
  "end_lineno" : "97",
  "ground_truth" : "                visibility = View.VISIBLE\r\n                animate().alpha(1F).setDuration(300).setListener(null)\r\n            }\r\n        }\r\n    }",
  "context" : "private fun showToolbar() {\r\n        moveToolbar(0F)\r\n        if (config.enableCardViewPolicy) mBinding.searchCard.useCompatPadding = true\r\n        mBinding.run {\r\n            insertDiaryButton.run {\r\n                visibility = View.VISIBLE\r\n                animate().alpha(1F).setDuration(300).setListener(null)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "88",
  "methodName" : "showToolbar",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\ToolbarControlBaseActivity.kt",
  "task_id" : "aaf-easydiary/217",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport android.view.View\nprivate fun showToolbar() {\r\n        moveToolbar(0F)\r\n        if (config.enableCardViewPolicy) mBinding.searchCard.useCompatPadding = true\r\n        mBinding.run {\r\n            insertDiaryButton.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDiaryMainBinding\nval viewModel DiaryMainViewModel\nvar mScrollable S?",
  "app_type" : "notes",
  "end_lineno" : "153",
  "ground_truth" : "        }\r\n        Log.i(\"keypadIsShown\", \"$heightDiff, ${dpToPixel(200F)}\")\r\n\r\n        return isShow\r\n    }",
  "context" : "private fun keypadIsShown(): Boolean {\r\n        var isShow = false\r\n        val rootView = findViewById<View>(android.R.id.content)\r\n        val heightDiff = rootView.rootView.height - rootView.height\r\n        if (heightDiff > dpToPixel(200F)) {\r\n            isShow = true\r\n        }\r\n        Log.i(\"keypadIsShown\", \"$heightDiff, ${dpToPixel(200F)}\")\r\n\r\n        return isShow\r\n    }",
  "start_lineno" : "143",
  "methodName" : "keypadIsShown",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\ToolbarControlBaseActivity.kt",
  "task_id" : "aaf-easydiary/218",
  "prompt" : "import me.blog.korn123.easydiary.extensions.dpToPixel\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nprivate fun keypadIsShown(): Boolean {\r\n        var isShow = false\r\n        val rootView = findViewById<View>(android.R.id.content)\r\n        val heightDiff = rootView.rootView.height - rootView.height\r\n        if (heightDiff > dpToPixel(200F)) {\r\n            isShow = true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }",
  "context" : "fun onItemHolderClick(itemHolder: AlarmViewHolder) {\r\n        onItemClickListener?.run {\r\n            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }",
  "start_lineno" : "32",
  "methodName" : "onItemHolderClick",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\AlarmAdapter.kt",
  "task_id" : "aaf-easydiary/219",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport android.view.View\nfun onItemHolderClick(itemHolder: AlarmViewHolder) {\r\n        onItemClickListener?.run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        } else {\r\n            activity.cancelAlarmClock(alarm)\r\n        }\r\n        EasyDiaryDbHelper.commitTransaction()\r\n    }",
  "context" : "fun onItemCheckedChange(position: Int, isChecked: Boolean) {\r\n        val alarm = alarmList[position]\r\n        EasyDiaryDbHelper.beginTransaction()\r\n        alarm.isEnabled = isChecked\r\n        if (isChecked) {\r\n            activity.scheduleNextAlarm(alarm, true)\r\n//            alarm.label = itemView.alarmDescription.text.toString()\r\n        } else {\r\n            activity.cancelAlarmClock(alarm)\r\n        }\r\n        EasyDiaryDbHelper.commitTransaction()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onItemCheckedChange",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\AlarmAdapter.kt",
  "task_id" : "aaf-easydiary/220",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.helper.EasyDiaryDbHelper\nimport android.view.View\nfun onItemCheckedChange(position: Int, isChecked: Boolean) {\r\n        val alarm = alarmList[position]\r\n        EasyDiaryDbHelper.beginTransaction()\r\n        alarm.isEnabled = isChecked\r\n        if (isChecked) {\r\n            activity.scheduleNextAlarm(alarm, true)\r\n//            alarm.label = itemView.alarmDescription.text.toString()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }",
  "context" : "fun onItemHolderClick(itemHolder: CheatSheetViewHolder) {\r\n        onItemClickListener?.run {\r\n            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "onItemHolderClick",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\CheatSheetAdapter.kt",
  "task_id" : "aaf-easydiary/221",
  "prompt" : "import android.view.View\nfun onItemHolderClick(itemHolder: CheatSheetViewHolder) {\r\n        onItemClickListener?.run {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "            ItemCheatSheetBinding.textTitle.text = cheatSheet.title\r\n            ItemCheatSheetBinding.textDescription.text = cheatSheet.description\r\n        }",
  "context" : "fun bindTo(cheatSheet: CheatSheet) {\r\n            ItemCheatSheetBinding.textTitle.text = cheatSheet.title\r\n            ItemCheatSheetBinding.textDescription.text = cheatSheet.description\r\n        }",
  "start_lineno" : "51",
  "methodName" : "bindTo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\CheatSheetAdapter.kt",
  "task_id" : "aaf-easydiary/222",
  "prompt" : "fun bindTo(cheatSheet: CheatSheet) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            false -> DDayAddViewHolder(ItemDdayAddBinding.inflate(activity.layoutInflater))\r\n        }\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType == 0) {\r\n            true -> DDayViewHolder(ItemDdayBinding.inflate(activity.layoutInflater))\r\n            false -> DDayAddViewHolder(ItemDdayAddBinding.inflate(activity.layoutInflater))\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onCreateViewHolder",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt",
  "task_id" : "aaf-easydiary/223",
  "prompt" : "import me.blog.korn123.easydiary.models.DDay\nimport me.blog.korn123.easydiary.databinding.ItemDdayBinding\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType == 0) {\r\n            true -> DDayViewHolder(ItemDdayBinding.inflate(activity.layoutInflater))\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "            false -> 0\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> 1\r\n            false -> 0\r\n        }\r\n    }",
  "start_lineno" : "40",
  "methodName" : "getItemViewType",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt",
  "task_id" : "aaf-easydiary/224",
  "prompt" : "import android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> 1\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "            false -> (holder as DDayViewHolder).bindTo(dDayItems[position])\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> (holder as DDayAddViewHolder).bindTo(dDayItems[position])\r\n            false -> (holder as DDayViewHolder).bindTo(dDayItems[position])\r\n        }\r\n    }",
  "start_lineno" : "47",
  "methodName" : "onBindViewHolder",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt",
  "task_id" : "aaf-easydiary/225",
  "prompt" : "import me.blog.korn123.easydiary.models.DDay\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> (holder as DDayAddViewHolder).bindTo(dDayItems[position])\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "        val lp = holder.itemView.layoutParams\r\n        if (lp is FlexboxLayoutManager.LayoutParams) {\r\n            if (holder is DDayViewHolder) lp.flexGrow = 1F\r\n        }\r\n    }",
  "context" : "override fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\r\n        super.onViewAttachedToWindow(holder)\r\n        val lp = holder.itemView.layoutParams\r\n        if (lp is FlexboxLayoutManager.LayoutParams) {\r\n            if (holder is DDayViewHolder) lp.flexGrow = 1F\r\n        }\r\n    }",
  "start_lineno" : "54",
  "methodName" : "onViewAttachedToWindow",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt",
  "task_id" : "aaf-easydiary/226",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\r\n        super.onViewAttachedToWindow(holder)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "231",
  "ground_truth" : "                openDDayDialog(dDay)\r\n            }\r\n        }",
  "context" : "fun bindTo(dDay: DDay) {\r\n            itemDDayAddBinding.root.setOnClickListener {\r\n                openDDayDialog(dDay)\r\n            }\r\n        }",
  "start_lineno" : "227",
  "methodName" : "bindTo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt",
  "task_id" : "aaf-easydiary/227",
  "prompt" : "import me.blog.korn123.easydiary.models.DDay\nfun bindTo(dDay: DDay) {\r\n            itemDDayAddBinding.root.setOnClickListener {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var currentQuery String?",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "            activity,\r\n            ItemDiaryMainBinding.inflate(activity.layoutInflater, parent, false),\r\n            this\r\n        )\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r\n            activity,\r\n            ItemDiaryMainBinding.inflate(activity.layoutInflater, parent, false),\r\n            this\r\n        )\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onCreateViewHolder",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DiaryMainItemAdapter.kt",
  "task_id" : "aaf-easydiary/228",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var currentQuery String?",
  "app_type" : "notes",
  "end_lineno" : "91",
  "ground_truth" : "        diaryItems.map {\r\n            if (it.isSelected) selectedItems.add(it)\r\n        }\r\n        return selectedItems\r\n    }",
  "context" : "fun getSelectedItems(): List<Diary> {\r\n        val selectedItems = arrayListOf<Diary>()\r\n        diaryItems.map {\r\n            if (it.isSelected) selectedItems.add(it)\r\n        }\r\n        return selectedItems\r\n    }",
  "start_lineno" : "85",
  "methodName" : "getSelectedItems",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DiaryMainItemAdapter.kt",
  "task_id" : "aaf-easydiary/229",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nfun getSelectedItems(): List<Diary> {\r\n        val selectedItems = arrayListOf<Diary>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var currentQuery String?",
  "app_type" : "notes",
  "end_lineno" : "99",
  "ground_truth" : "        diaryItems.forEach { diary ->\r\n            diary.isSelected = !diary.isSelected\r\n        }\r\n        EasyDiaryDbHelper.commitTransaction()\r\n    }",
  "context" : "fun toggleCheckBoxALl() {\r\n        EasyDiaryDbHelper.beginTransaction()\r\n        diaryItems.forEach { diary ->\r\n            diary.isSelected = !diary.isSelected\r\n        }\r\n        EasyDiaryDbHelper.commitTransaction()\r\n    }",
  "start_lineno" : "93",
  "methodName" : "toggleCheckBoxALl",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DiaryMainItemAdapter.kt",
  "task_id" : "aaf-easydiary/230",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.helper.EasyDiaryDbHelper\nfun toggleCheckBoxALl() {\r\n        EasyDiaryDbHelper.beginTransaction()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val GUIDE_MESSAGE",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "            DateUtils.getDateTimeStringForceFormatting(it.currentTimeMillis, activity)\r\n        } ?: run { GUIDE_MESSAGE }\r\n    }",
  "context" : " @SuppressLint(\"DefaultLocale\")\r\n    override fun getSectionName(position: Int): String {\r\n        val attachedPhoto = listPostcard[position]\r\n        return attachedPhoto.diary?.let {\r\n            DateUtils.getDateTimeStringForceFormatting(it.currentTimeMillis, activity)\r\n        } ?: run { GUIDE_MESSAGE }\r\n    }",
  "start_lineno" : "45",
  "methodName" : "getSectionName",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\GalleryAdapter.kt",
  "task_id" : "aaf-easydiary/231",
  "prompt" : "import android.annotation.SuppressLint\n @SuppressLint(\"DefaultLocale\")\r\n    override fun getSectionName(position: Int): String {\r\n        val attachedPhoto = listPostcard[position]\r\n        return attachedPhoto.diary?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val glideOptionMap\nval imageView ImageView",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "                .inflate(R.layout.item_photo, parent, false)\r\n        return PhotoViewHolder(view, activity, itemCount, this)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.item_photo, parent, false)\r\n        return PhotoViewHolder(view, activity, itemCount, this)\r\n    }",
  "start_lineno" : "34",
  "methodName" : "onCreateViewHolder",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\PhotoAdapter.kt",
  "task_id" : "aaf-easydiary/232",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val glideOptionMap\nval imageView ImageView",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "            if (resourceId > 0) {\r\n                result = activity.resources.getDimensionPixelSize(resourceId)\r\n            }\r\n            return result\r\n        }",
  "context" : "fun getStatusBarHeight(): Int {\r\n            var result = 0\r\n            val resourceId = activity.resources.getIdentifier(\"status_bar_height\", \"dimen\", \"android\")\r\n            if (resourceId > 0) {\r\n                result = activity.resources.getDimensionPixelSize(resourceId)\r\n            }\r\n            return result\r\n        }",
  "start_lineno" : "123",
  "methodName" : "getStatusBarHeight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\PhotoAdapter.kt",
  "task_id" : "aaf-easydiary/233",
  "prompt" : "fun getStatusBarHeight(): Int {\r\n            var result = 0\r\n            val resourceId = activity.resources.getIdentifier(\"status_bar_height\", \"dimen\", \"android\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val glideOptionMap\nval imageView ImageView",
  "app_type" : "notes",
  "end_lineno" : "138",
  "ground_truth" : "                3 -> CropTransformation.CropType.BOTTOM\r\n                else -> null\r\n            }",
  "context" : "fun getCropType(viewMode: Int): CropTransformation.CropType? = when (viewMode) {\r\n                1 -> CropTransformation.CropType.TOP\r\n                2 -> CropTransformation.CropType.CENTER\r\n                3 -> CropTransformation.CropType.BOTTOM\r\n                else -> null\r\n            }",
  "start_lineno" : "133",
  "methodName" : "getCropType",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\PhotoAdapter.kt",
  "task_id" : "aaf-easydiary/234",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport jp.wasabeef.glide.transformations.CropTransformation\nfun getCropType(viewMode: Int): CropTransformation.CropType? = when (viewMode) {\r\n                1 -> CropTransformation.CropType.TOP\r\n                2 -> CropTransformation.CropType.CENTER\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "                title.text = simpleCheckbox.title\r\n                description.text = simpleCheckbox.description\r\n                checkbox.isChecked = simpleCheckbox.isChecked\r\n            }\r\n        }",
  "context" : "fun bindTo(simpleCheckbox: SimpleCheckbox) {\r\n            itemSimpleCheckboxBinding.run {\r\n                title.text = simpleCheckbox.title\r\n                description.text = simpleCheckbox.description\r\n                checkbox.isChecked = simpleCheckbox.isChecked\r\n            }\r\n        }",
  "start_lineno" : "52",
  "methodName" : "bindTo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\SimpleCheckboxAdapter.kt",
  "task_id" : "aaf-easydiary/235",
  "prompt" : "fun bindTo(simpleCheckbox: SimpleCheckbox) {\r\n            itemSimpleCheckboxBinding.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "23",
  "ground_truth" : "                .inflate(R.layout.item_symbol_filter, parent, false)\r\n        return SymbolFilterViewHolder(view, activity, this)\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SymbolFilterViewHolder {\r\n        val view = LayoutInflater.from(activity)\r\n                .inflate(R.layout.item_symbol_filter, parent, false)\r\n        return SymbolFilterViewHolder(view, activity, this)\r\n    }",
  "start_lineno" : "19",
  "methodName" : "onCreateViewHolder",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\SymbolFilterAdapter.kt",
  "task_id" : "aaf-easydiary/236",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SymbolFilterViewHolder {\r\n        val view = LayoutInflater.from(activity)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "                FlavorUtils.initWeatherView(activity, findViewById(R.id.symbol), symbolFilter.sequence)\r\n            }\r\n        }",
  "context" : "fun bindTo(symbolFilter: SymbolFilterAdapter.SymbolFilter) {\r\n            itemView.run {\r\n                FlavorUtils.initWeatherView(activity, findViewById(R.id.symbol), symbolFilter.sequence)\r\n            }\r\n        }",
  "start_lineno" : "49",
  "methodName" : "bindTo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\SymbolFilterAdapter.kt",
  "task_id" : "aaf-easydiary/237",
  "prompt" : "import android.view.View\nfun bindTo(symbolFilter: SymbolFilterAdapter.SymbolFilter) {\r\n            itemView.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mTfLight Typeface?",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "        super.onCreate(savedInstanceState)\r\n        mTfLight = Typeface.createFromAsset(assets, \"fonts/OpenSans-Light.ttf\")\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mTfLight = Typeface.createFromAsset(assets, \"fonts/OpenSans-Light.ttf\")\r\n    }",
  "start_lineno" : "15",
  "methodName" : "onCreate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\chart\\ChartBase.kt",
  "task_id" : "aaf-easydiary/238",
  "prompt" : "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val tvContent TextView\nval imageDiarySymbol ImageView",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "                imageDiarySymbol.setImageDrawable(it)\r\n            }\r\n            super.refreshContent(entry, highlight)\r\n        }\r\n    }",
  "context" : "override fun refreshContent(e: Entry?, highlight: Highlight?) {\r\n        e?.let { entry ->\r\n            tvContent.run {\r\n                text = String.format(\"%s: %d\", context.getString(R.string.write_count), entry.y.toInt())\r\n                typeface = FontUtils.getCommonTypeface(context)\r\n            }\r\n            entry.icon?.let {\r\n                imageDiarySymbol.visibility = VISIBLE\r\n                imageDiarySymbol.setImageDrawable(it)\r\n            }\r\n            super.refreshContent(entry, highlight)\r\n        }\r\n    }",
  "start_lineno" : "28",
  "methodName" : "refreshContent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\chart\\XYMarkerView.kt",
  "task_id" : "aaf-easydiary/239",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport me.blog.korn123.commons.utils.FontUtils\nimport com.github.mikephil.charting.highlight.Highlight\nimport com.github.mikephil.charting.data.Entry\noverride fun refreshContent(e: Entry?, highlight: Highlight?) {\r\n        e?.let { entry ->\r\n            tvContent.run {\r\n                text = String.format(\"%s: %d\", context.getString(R.string.write_count), entry.y.toInt())\r\n                typeface = FontUtils.getCommonTypeface(context)\r\n            }\r\n            entry.icon?.let {\r\n                imageDiarySymbol.visibility = VISIBLE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDashboardBinding\nvar mDailySymbolFragment DailySymbolFragment",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onStart() {\r\n        super.onStart()\r\n        requireActivity().run activity@ {\r\n            getDisplayMetrics().also {\r\n                dialog?.window?.run {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        statusBarColor = this@activity.getStatusBarColor(config.primaryColor)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "47",
  "methodName" : "onStart",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\DashboardDialogFragment.kt",
  "task_id" : "aaf-easydiary/240",
  "prompt" : "import me.blog.korn123.easydiary.extensions.getStatusBarColor\nimport me.blog.korn123.easydiary.extensions.getDisplayMetrics\nimport me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nimport android.os.Build\nimport android.graphics.Color\noverride fun onStart() {\r\n        super.onStart()\r\n        requireActivity().run activity@ {\r\n            getDisplayMetrics().also {\r\n                dialog?.window?.run {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        statusBarColor = this@activity.getStatusBarColor(config.primaryColor)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding ActivityDashboardBinding\nvar mDailySymbolFragment DailySymbolFragment",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "        mBinding = ActivityDashboardBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        mBinding = ActivityDashboardBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "64",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\DashboardDialogFragment.kt",
  "task_id" : "aaf-easydiary/241",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mDialogLineColorPickerBinding DialogLineColorPickerBinding\nval PRIMARY_COLORS_COUNT\nval DEFAULT_PRIMARY_COLOR_INDEX\nval DEFAULT_SECONDARY_COLOR_INDEX\nval DEFAULT_COLOR_VALUE\nvar dialog AlertDialog?\nvar mDarkenColorOptionChangeCallback",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "                    .forEach { return Pair(i, it) }\r\n        }\r\n\r\n        return getDefaultColorPair()\r\n    }",
  "context" : "private fun getColorIndexes(color: Int): Pair<Int, Int> {\r\n        if (color == DEFAULT_COLOR_VALUE) {\r\n            return getDefaultColorPair()\r\n        }\r\n\r\n        for (i in 0 until PRIMARY_COLORS_COUNT) {\r\n            val colors = getColorsForIndex(i)\r\n            val size = colors.size\r\n            (0 until size).filter { color == colors[it] }\r\n                    .forEach { return Pair(i, it) }\r\n        }\r\n\r\n        return getDefaultColorPair()\r\n    }",
  "start_lineno" : "92",
  "methodName" : "getColorIndexes",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\LineColorPickerDialog.kt",
  "task_id" : "aaf-easydiary/242",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.graphics.Color\nprivate fun getColorIndexes(color: Int): Pair<Int, Int> {\r\n        if (color == DEFAULT_COLOR_VALUE) {\r\n            return getDefaultColorPair()\r\n        }\r\n\r\n        for (i in 0 until PRIMARY_COLORS_COUNT) {\r\n            val colors = getColorsForIndex(i)\r\n            val size = colors.size\r\n            (0 until size).filter { color == colors[it] }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mDialogLineColorPickerBinding DialogLineColorPickerBinding\nval PRIMARY_COLORS_COUNT\nval DEFAULT_PRIMARY_COLOR_INDEX\nval DEFAULT_SECONDARY_COLOR_INDEX\nval DEFAULT_COLOR_VALUE\nvar dialog AlertDialog?\nvar mDarkenColorOptionChangeCallback",
  "app_type" : "notes",
  "end_lineno" : "116",
  "ground_truth" : "        val color = mDialogLineColorPickerBinding.secondaryLineColorPicker.getCurrentColor()\r\n        callback(true, color)\r\n    }",
  "context" : "private fun dialogConfirmed() {\r\n        val color = mDialogLineColorPickerBinding.secondaryLineColorPicker.getCurrentColor()\r\n        callback(true, color)\r\n    }",
  "start_lineno" : "113",
  "methodName" : "dialogConfirmed",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\LineColorPickerDialog.kt",
  "task_id" : "aaf-easydiary/243",
  "prompt" : "private fun dialogConfirmed() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mDialogLineColorPickerBinding DialogLineColorPickerBinding\nval PRIMARY_COLORS_COUNT\nval DEFAULT_PRIMARY_COLOR_INDEX\nval DEFAULT_SECONDARY_COLOR_INDEX\nval DEFAULT_COLOR_VALUE\nvar dialog AlertDialog?\nvar mDarkenColorOptionChangeCallback",
  "app_type" : "notes",
  "end_lineno" : "152",
  "ground_truth" : "            setOnCheckedChangeListener { _, isChecked ->\r\n                callback.invoke(isChecked, mDialogLineColorPickerBinding.secondaryLineColorPicker.getCurrentColor())\r\n            }\r\n        }\r\n    }",
  "context" : "fun setDarkenColorOptionChangeListener(currentOption: Boolean, callback: (enableStatusBarDarkenColor: Boolean, color: Int) -> Unit): Unit {\r\n        mDarkenColorOptionChangeCallback = callback\r\n        mDialogLineColorPickerBinding.switchStatusBarDarkenColor.run {\r\n            isChecked = currentOption\r\n            setOnCheckedChangeListener { _, isChecked ->\r\n                callback.invoke(isChecked, mDialogLineColorPickerBinding.secondaryLineColorPicker.getCurrentColor())\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "144",
  "methodName" : "setDarkenColorOptionChangeListener",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\LineColorPickerDialog.kt",
  "task_id" : "aaf-easydiary/244",
  "prompt" : "import me.blog.korn123.easydiary.databinding.DialogLineColorPickerBinding\nimport android.graphics.Color\nfun setDarkenColorOptionChangeListener(currentOption: Boolean, callback: (enableStatusBarDarkenColor: Boolean, color: Int) -> Unit): Unit {\r\n        mDarkenColorOptionChangeCallback = callback\r\n        mDialogLineColorPickerBinding.switchStatusBarDarkenColor.run {\r\n            isChecked = currentOption\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            sb.append(\"\\n\")\r\n        }\r\n\r\n        return sb.toString()\r\n    }",
  "context" : "private fun getNewReleases(): String {\r\n        val sb = StringBuilder()\r\n\r\n        releases.forEach {\r\n            val parts = activity.getString(it.textId).split(\"\\n\").map(String::trim)\r\n            parts.forEachIndexed { index, description -> \r\n                when (index) {\r\n                    0 -> sb.append(\"* $description\\n\") \r\n                    else -> sb.append(\"- $description\\n\")\r\n                }\r\n            }\r\n            sb.append(\"\\n\")\r\n        }\r\n\r\n        return sb.toString()\r\n    }",
  "start_lineno" : "23",
  "methodName" : "getNewReleases",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\WhatsNewDialog.kt",
  "task_id" : "aaf-easydiary/245",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport com.simplemobiletools.commons.models.Release\nprivate fun getNewReleases(): String {\r\n        val sb = StringBuilder()\r\n\r\n        releases.forEach {\r\n            val parts = activity.getString(it.textId).split(\"\\n\").map(String::trim)\r\n            parts.forEachIndexed { index, description -> \r\n                when (index) {\r\n                    0 -> sb.append(\"* $description\\n\") \r\n                    else -> sb.append(\"- $description\\n\")\r\n                }\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "113",
  "ground_truth" : "        .make(findViewById(android.R.id.content), message, duration)\r\n        .setAction(\"Action\", null).show()\r\n}",
  "context" : "fun Activity.makeSnackBar(message: String, duration: Int = Snackbar.LENGTH_SHORT) {\r\n    Snackbar\r\n        .make(findViewById(android.R.id.content), message, duration)\r\n        .setAction(\"Action\", null).show()\r\n}",
  "start_lineno" : "109",
  "methodName" : "makeSnackBar",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/246",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.app.Activity\nfun Activity.makeSnackBar(message: String, duration: Int = Snackbar.LENGTH_SHORT) {\r\n    Snackbar\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "    if (theme.resolveAttribute(android.R.attr.actionBarSize, typedValue, true)){\r\n        actionBarHeight = TypedValue.complexToDimensionPixelSize(typedValue.data, resources.displayMetrics)\r\n    }\r\n    return actionBarHeight\r\n}",
  "context" : "fun Activity.actionBarHeight(): Int {\r\n    val typedValue = TypedValue()\r\n    var actionBarHeight = 0\r\n    if (theme.resolveAttribute(android.R.attr.actionBarSize, typedValue, true)){\r\n        actionBarHeight = TypedValue.complexToDimensionPixelSize(typedValue.data, resources.displayMetrics)\r\n    }\r\n    return actionBarHeight\r\n}",
  "start_lineno" : "123",
  "methodName" : "actionBarHeight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/247",
  "prompt" : "import java.util\nimport android.util.TypedValue\nimport android.app.Activity\nfun Activity.actionBarHeight(): Int {\r\n    val typedValue = TypedValue()\r\n    var actionBarHeight = 0\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "139",
  "ground_truth" : "    if (resourceId > 0) {\r\n        statusBarHeight = resources.getDimensionPixelSize(resourceId)\r\n    }\r\n    return statusBarHeight\r\n}",
  "context" : "fun Activity.statusBarHeight(): Int {\r\n    var statusBarHeight = 0\r\n    val resourceId = resources.getIdentifier(\"status_bar_height\", \"dimen\", \"android\")\r\n    if (resourceId > 0) {\r\n        statusBarHeight = resources.getDimensionPixelSize(resourceId)\r\n    }\r\n    return statusBarHeight\r\n}",
  "start_lineno" : "132",
  "methodName" : "statusBarHeight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/248",
  "prompt" : "import android.app.Activity\nfun Activity.statusBarHeight(): Int {\r\n    var statusBarHeight = 0\r\n    val resourceId = resources.getIdentifier(\"status_bar_height\", \"dimen\", \"android\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "148",
  "ground_truth" : "    if (resourceId > 0) {\r\n        navigationBarHeight = resources.getDimensionPixelSize(resourceId)\r\n    }\r\n    return navigationBarHeight\r\n}",
  "context" : "fun Activity.navigationBarHeight(): Int {\r\n    var navigationBarHeight = 0\r\n    val resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\")\r\n    if (resourceId > 0) {\r\n        navigationBarHeight = resources.getDimensionPixelSize(resourceId)\r\n    }\r\n    return navigationBarHeight\r\n}",
  "start_lineno" : "141",
  "methodName" : "navigationBarHeight",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/249",
  "prompt" : "import android.app.Activity\nfun Activity.navigationBarHeight(): Int {\r\n    var navigationBarHeight = 0\r\n    val resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "155",
  "ground_truth" : "    display.getSize(size)\r\n    return size\r\n}",
  "context" : "fun Activity.getDefaultDisplay(): Point {\r\n    val display = windowManager.defaultDisplay\r\n    val size = Point()\r\n    display.getSize(size)\r\n    return size\r\n}",
  "start_lineno" : "150",
  "methodName" : "getDefaultDisplay",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/250",
  "prompt" : "import android.graphics.Point\nimport android.app.Activity\nfun Activity.getDefaultDisplay(): Point {\r\n    val display = windowManager.defaultDisplay\r\n    val size = Point()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "160",
  "ground_truth" : "    val scaleFactor = if (isLandScape()) 0.5F else 1F\r\n    return getDefaultDisplay().x.times(ratio).times(scaleFactor).toInt()\r\n}",
  "context" : "fun Activity.getDashboardCardWidth(ratio: Float): Int {\r\n    val scaleFactor = if (isLandScape()) 0.5F else 1F\r\n    return getDefaultDisplay().x.times(ratio).times(scaleFactor).toInt()\r\n}",
  "start_lineno" : "157",
  "methodName" : "getDashboardCardWidth",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/251",
  "prompt" : "import android.app.Activity\nfun Activity.getDashboardCardWidth(ratio: Float): Int {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "174",
  "ground_truth" : "        display.getMetrics(outMetrics)\r\n//        display.getRealMetrics(outMetrics)\r\n    }\r\n    return outMetrics\r\n}",
  "context" : "fun Activity.getDisplayMetrics(): DisplayMetrics {\r\n    val outMetrics = DisplayMetrics()\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        val display = display\r\n        display?.getMetrics(outMetrics)\r\n//        display?.getRealMetrics(outMetrics)\r\n    } else {\r\n        val display = windowManager.defaultDisplay\r\n        display.getMetrics(outMetrics)\r\n//        display.getRealMetrics(outMetrics)\r\n    }\r\n    return outMetrics\r\n}",
  "start_lineno" : "162",
  "methodName" : "getDisplayMetrics",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/252",
  "prompt" : "import java.util\nimport me.blog.korn123.easydiary.R\nimport android.util.DisplayMetrics\nimport android.os.Build\nimport android.app.Activity\nfun Activity.getDisplayMetrics(): DisplayMetrics {\r\n    val outMetrics = DisplayMetrics()\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        val display = display\r\n        display?.getMetrics(outMetrics)\r\n//        display?.getRealMetrics(outMetrics)\r\n    } else {\r\n        val display = windowManager.defaultDisplay\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "223",
  "ground_truth" : "        window.addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n    } else {\r\n        window.clearFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n    }\r\n}",
  "context" : "fun Activity.applyPolicyForRecentApps() {\r\n    if (config.aafPinLockEnable || config.fingerprintLockEnable) {\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n    } else {\r\n        window.clearFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n    }\r\n}",
  "start_lineno" : "217",
  "methodName" : "applyPolicyForRecentApps",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/253",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.app.Activity\nfun Activity.applyPolicyForRecentApps() {\r\n    if (config.aafPinLockEnable || config.fingerprintLockEnable) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "267",
  "ground_truth" : "    startActivity(intent)\r\n    overridePendingTransition(R.anim.fade_in, R.anim.fade_out)\r\n}",
  "context" : "fun Activity.startActivityWithTransition(intent: Intent) {\r\n    startActivity(intent)\r\n    overridePendingTransition(R.anim.fade_in, R.anim.fade_out)\r\n}",
  "start_lineno" : "264",
  "methodName" : "startActivityWithTransition",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/254",
  "prompt" : "import android.content.Intent\nimport android.app.Activity\nfun Activity.startActivityWithTransition(intent: Intent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "285",
  "ground_truth" : "    readDiaryIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n    TransitionHelper.startActivityWithTransition(this, readDiaryIntent)\r\n}",
  "context" : "fun Activity.refreshApp() {\r\n    val readDiaryIntent = Intent(this, DiaryMainActivity::class.java)\r\n    readDiaryIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n    TransitionHelper.startActivityWithTransition(this, readDiaryIntent)\r\n}",
  "start_lineno" : "281",
  "methodName" : "refreshApp",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/255",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.activities.DiaryMainActivity\nimport android.content.Intent\nimport android.app.Activity\nfun Activity.refreshApp() {\r\n    val readDiaryIntent = Intent(this, DiaryMainActivity::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "293",
  "ground_truth" : "        addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(this)\r\n    }\r\n    this.overridePendingTransition(0, 0)\r\n}",
  "context" : "fun Activity.startMainActivityWithClearTask() {\r\n    Intent(this, DiaryMainActivity::class.java).apply {\r\n        addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(this)\r\n    }\r\n    this.overridePendingTransition(0, 0)\r\n}",
  "start_lineno" : "287",
  "methodName" : "startMainActivityWithClearTask",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/256",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.activities.DiaryMainActivity\nimport android.content.Intent\nimport android.app.Activity\nfun Activity.startMainActivityWithClearTask() {\r\n    Intent(this, DiaryMainActivity::class.java).apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "309",
  "ground_truth" : "        symbolSequence\r\n    ) else EasyDiaryDbHelper.findDiary(null, false, 0, 0, symbolSequence, realmInstance)\r\n    val diary = if (items.isNotEmpty()) items[0] else null\r\n    return diary?.photoUris ?: listOf()\r\n}",
  "context" : "fun getCustomSymbolPaths(symbolSequence: Int, realmInstance: Realm? = null): List<PhotoUri> {\r\n    // EasyDiaryUtils.getApplicationDataDirectory(this)\r\n    val items = if (realmInstance == null) EasyDiaryDbHelper.findDiary(\r\n        null,\r\n        false,\r\n        0,\r\n        0,\r\n        symbolSequence\r\n    ) else EasyDiaryDbHelper.findDiary(null, false, 0, 0, symbolSequence, realmInstance)\r\n    val diary = if (items.isNotEmpty()) items[0] else null\r\n    return diary?.photoUris ?: listOf()\r\n}",
  "start_lineno" : "298",
  "methodName" : "getCustomSymbolPaths",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/257",
  "prompt" : "import java.util\nimport me.blog.korn123.easydiary.models.PhotoUri\nimport me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport me.blog.korn123.commons.utils.EasyDiaryUtils\nimport io.realm.Realm\nimport android.net.Uri\nfun getCustomSymbolPaths(symbolSequence: Int, realmInstance: Realm? = null): List<PhotoUri> {\r\n    // EasyDiaryUtils.getApplicationDataDirectory(this)\r\n    val items = if (realmInstance == null) EasyDiaryDbHelper.findDiary(\r\n        null,\r\n        false,\r\n        0,\r\n        0,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "413",
  "ground_truth" : "        } else {\r\n            itemList.add(arrayOf(getUncheckedSymbolItem(), *resources.getStringArray(resourceId)))\r\n        }\r\n        categoryList.add(categoryName)\r\n    }\r",
  "context" : "\nfun Activity.addCategory(itemList: ArrayList<Array<String>>, categoryList: ArrayList<String>, resourceName: String, categoryName: String) {\r\n    val resourceId = resources.getIdentifier(resourceName, \"array\", packageName)\r\n    if (resourceId != 0) {\r\n        if (resourceName == \"weather_item_array\") {\r\n            itemList.add(resources.getStringArray(resourceId))\r\n        } else {\r\n            itemList.add(arrayOf(getUncheckedSymbolItem(), *resources.getStringArray(resourceId)))\r\n        }\r\n        categoryList.add(categoryName)\r\n    }\r\n",
  "start_lineno" : "403",
  "methodName" : "addCategory",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/258",
  "prompt" : "import android.app.Activity\n\nfun Activity.addCategory(itemList: ArrayList<Array<String>>, categoryList: ArrayList<String>, resourceName: String, categoryName: String) {\r\n    val resourceId = resources.getIdentifier(resourceName, \"array\", packageName)\r\n    if (resourceId != 0) {\r\n        if (resourceName == \"weather_item_array\") {\r\n            itemList.add(resources.getStringArray(resourceId))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "418",
  "ground_truth" : "fun Activity.getUncheckedSymbolItem(): String {\r\n    val resourceId = resources.getIdentifier(\"weather_item_array\", \"array\", packageName)\r\n    return if (resourceId != 0) resources.getStringArray(resourceId)[0] else \"-1|N/A\"\r",
  "context" : "\nfun Activity.getUncheckedSymbolItem(): String {\r\n    val resourceId = resources.getIdentifier(\"weather_item_array\", \"array\", packageName)\r\n    return if (resourceId != 0) resources.getStringArray(resourceId)[0] else \"-1|N/A\"\r\n",
  "start_lineno" : "415",
  "methodName" : "getUncheckedSymbolItem",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/259",
  "prompt" : "",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "458",
  "ground_truth" : "        IOUtils.write(createHtmlString(diaryList), os, \"UTF-8\")\r\n        os?.close()\r\n    }\r",
  "context" : "\nfun Activity.exportHtmlBook(uri: Uri?, diaryList: List<Diary>) {\r\n    uri?.let {\r\n        val os = contentResolver.openOutputStream(it)\r\n        IOUtils.write(createHtmlString(diaryList), os, \"UTF-8\")\r\n        os?.close()\r\n    }\r\n",
  "start_lineno" : "452",
  "methodName" : "exportHtmlBook",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/260",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\n\nfun Activity.exportHtmlBook(uri: Uri?, diaryList: List<Diary>) {\r\n    uri?.let {\r\n        val os = contentResolver.openOutputStream(it)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "534",
  "ground_truth" : "        image64 = Base64.encodeBase64String(bos.toByteArray())\r\n    } catch (e: Exception) {\r\n        bos.close()\r\n    }\r\n    return image64\r",
  "context" : "\nfun Activity.photoToBase64(photoPath: String): String {\r\n    var image64 = \"\"\r\n    val bos = ByteArrayOutputStream()\r\n    try {\r\n        val bitmap = BitmapUtils.cropCenter(BitmapFactory.decodeFile(photoPath))\r\n//        val fis = FileInputStream(photoPath)\r\n//        IOUtils.copy(fis, bos)\r\n\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 60, bos)\r\n        image64 = Base64.encodeBase64String(bos.toByteArray())\r\n    } catch (e: Exception) {\r\n        bos.close()\r\n    }\r\n    return image64\r\n",
  "start_lineno" : "520",
  "methodName" : "photoToBase64",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/261",
  "prompt" : "import java.util\nimport java.io.File\nimport java.io.ByteArrayOutputStream\nimport org.apache.commons.io.IOUtils\nimport org.apache.commons.codec.binary.Base64\nimport me.blog.korn123.commons.utils.BitmapUtils\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nimport android.app.Activity\n\nfun Activity.photoToBase64(photoPath: String): String {\r\n    var image64 = \"\"\r\n    val bos = ByteArrayOutputStream()\r\n    try {\r\n        val bitmap = BitmapUtils.cropCenter(BitmapFactory.decodeFile(photoPath))\r\n//        val fis = FileInputStream(photoPath)\r\n//        IOUtils.copy(fis, bos)\r\n\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 60, bos)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "547",
  "ground_truth" : "        bitmap.compress(Bitmap.CompressFormat.PNG, 100, bos)\r\n        image64 = Base64.encodeBase64String(bos.toByteArray())\r\n        bos.close()\r\n    }\r\n    return image64\r",
  "context" : "\nfun Activity.resourceToBase64(resourceId: Int): String {\r\n    var image64 = \"\"\r\n    val bitmap = scaledDrawable(resourceId, 100, 100)?.toBitmap()\r\n//        val bitmap = BitmapFactory.decodeResource(resources, resourceId)\r\n    if (bitmap != null) {\r\n        val bos = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, bos)\r\n        image64 = Base64.encodeBase64String(bos.toByteArray())\r\n        bos.close()\r\n    }\r\n    return image64\r\n",
  "start_lineno" : "536",
  "methodName" : "resourceToBase64",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/262",
  "prompt" : "import java.io.ByteArrayOutputStream\nimport org.apache.commons.codec.binary.Base64\nimport me.blog.korn123.easydiary.R\nimport androidx.core.graphics.drawable.toBitmap\nimport android.graphics.drawable.Drawable\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nimport android.app.Activity\n\nfun Activity.resourceToBase64(resourceId: Int): String {\r\n    var image64 = \"\"\r\n    val bitmap = scaledDrawable(resourceId, 100, 100)?.toBitmap()\r\n//        val bitmap = BitmapFactory.decodeResource(resources, resourceId)\r\n    if (bitmap != null) {\r\n        val bos = ByteArrayOutputStream()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "652",
  "ground_truth" : "    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n        window.statusBarColor = getStatusBarColor(color)\r\n    }\r",
  "context" : "\nfun Activity.updateStatusBarColor(color: Int) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n        window.statusBarColor = getStatusBarColor(color)\r\n    }\r\n",
  "start_lineno" : "648",
  "methodName" : "updateStatusBarColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/263",
  "prompt" : "import android.app.Activity\n\nfun Activity.updateStatusBarColor(color: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "883",
  "ground_truth" : "    this.startActivity(intent)\r\n    finish()\r\n    Runtime.getRuntime().exit(0)\r",
  "context" : "\nfun Activity.triggerRestart(cls: Class<*>) {\r\n    val intent = Intent(this, cls)\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n    this.startActivity(intent)\r\n    finish()\r\n    Runtime.getRuntime().exit(0)\r\n",
  "start_lineno" : "877",
  "methodName" : "triggerRestart",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/264",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.content.Intent\nimport android.app.Activity\n\nfun Activity.triggerRestart(cls: Class<*>) {\r\n    val intent = Intent(this, cls)\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "891",
  "ground_truth" : "        Configuration.ORIENTATION_PORTRAIT -> requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n        Configuration.ORIENTATION_LANDSCAPE -> requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE\r\n    }\r",
  "context" : "\n\r\n@SuppressLint(\"SourceLockedOrientationActivity\")\r\nfun Activity.holdCurrentOrientation() {\r\n    when (resources.configuration.orientation) {\r\n        Configuration.ORIENTATION_PORTRAIT -> requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n        Configuration.ORIENTATION_LANDSCAPE -> requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE\r\n    }\r\n",
  "start_lineno" : "884",
  "methodName" : "holdCurrentOrientation",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt",
  "task_id" : "aaf-easydiary/265",
  "prompt" : "import android.app.Activity\nimport android.annotation.SuppressLint\n\n\r\n@SuppressLint(\"SourceLockedOrientationActivity\")\r\nfun Activity.holdCurrentOrientation() {\r\n    when (resources.configuration.orientation) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "129",
  "ground_truth" : "    EasyDiaryDbHelper.beginTransaction()\r\n    alarm.retryCount = alarm.retryCount.plus(1)\r\n    EasyDiaryDbHelper.commitTransaction()\r\n    openSnoozeNotification(alarm)\r\n}",
  "context" : "fun Context.reExecuteGmsBackup(alarm: Alarm, errorMessage: String, className: String) {\r\n    EasyDiaryDbHelper.insertActionLog(ActionLog(className, \"reExecuteGmsBackup\", \"ERROR\", errorMessage), this)\r\n    EasyDiaryDbHelper.beginTransaction()\r\n    alarm.retryCount = alarm.retryCount.plus(1)\r\n    EasyDiaryDbHelper.commitTransaction()\r\n    openSnoozeNotification(alarm)\r\n}",
  "start_lineno" : "123",
  "methodName" : "reExecuteGmsBackup",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/266",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.models.ActionLog\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun Context.reExecuteGmsBackup(alarm: Alarm, errorMessage: String, className: String) {\r\n    EasyDiaryDbHelper.insertActionLog(ActionLog(className, \"reExecuteGmsBackup\", \"ERROR\", errorMessage), this)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "199",
  "ground_truth" : "    intent.putExtra(SettingsScheduleFragment.ALARM_ID, alarm.id)\r\n    return PendingIntent.getBroadcast(this, alarm.id, intent, pendingIntentFlag())\r\n}",
  "context" : "fun Context.getAlarmIntent(alarm: Alarm): PendingIntent {\r\n    val intent = Intent(this, AlarmReceiver::class.java)\r\n    intent.putExtra(SettingsScheduleFragment.ALARM_ID, alarm.id)\r\n    return PendingIntent.getBroadcast(this, alarm.id, intent, pendingIntentFlag())\r\n}",
  "start_lineno" : "195",
  "methodName" : "getAlarmIntent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/267",
  "prompt" : "import me.blog.korn123.easydiary.receivers.AlarmReceiver\nimport me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.R\nimport android.content.Intent\nimport android.content.Context\nfun Context.getAlarmIntent(alarm: Alarm): PendingIntent {\r\n    val intent = Intent(this, AlarmReceiver::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "204",
  "ground_truth" : "    val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n    alarmManager.cancel(getAlarmIntent(alarm))\r\n}",
  "context" : "fun Context.cancelAlarmClock(alarm: Alarm) {\r\n    val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n    alarmManager.cancel(getAlarmIntent(alarm))\r\n}",
  "start_lineno" : "201",
  "methodName" : "cancelAlarmClock",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/268",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport android.content.Context\nfun Context.cancelAlarmClock(alarm: Alarm) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "231",
  "ground_truth" : "    val targetMS = System.currentTimeMillis() + triggerInSeconds * 1000\r\n    AlarmManagerCompat.setAlarmClock(alarmManager, targetMS, getOpenAlarmTabIntent(alarm), getAlarmIntent(alarm))\r\n}",
  "context" : "fun Context.setupAlarmClock(alarm: Alarm, triggerInSeconds: Int) {\r\n    val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n    val targetMS = System.currentTimeMillis() + triggerInSeconds * 1000\r\n    AlarmManagerCompat.setAlarmClock(alarmManager, targetMS, getOpenAlarmTabIntent(alarm), getAlarmIntent(alarm))\r\n}",
  "start_lineno" : "227",
  "methodName" : "setupAlarmClock",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/269",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun Context.setupAlarmClock(alarm: Alarm, triggerInSeconds: Int) {\r\n    val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "236",
  "ground_truth" : "    val fullString = String.format(\"Time remaining till the alarm goes off: %s\", formatMinutesToTimeString(totalMinutes))\r\n    toast(fullString, Toast.LENGTH_LONG)\r\n}",
  "context" : "fun Context.showRemainingTimeMessage(totalMinutes: Int) {\r\n    val fullString = String.format(\"Time remaining till the alarm goes off: %s\", formatMinutesToTimeString(totalMinutes))\r\n    toast(fullString, Toast.LENGTH_LONG)\r\n}",
  "start_lineno" : "233",
  "methodName" : "showRemainingTimeMessage",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/270",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.content.Context\nfun Context.showRemainingTimeMessage(totalMinutes: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "246",
  "ground_truth" : "        if (it.isEnabled) scheduleNextAlarm(it, false)\r\n    }\r\n}",
  "context" : "fun Context.rescheduleEnabledAlarms() {\r\n    EasyDiaryDbHelper.findAlarmAll().forEach {\r\n        if (it.isEnabled) scheduleNextAlarm(it, false)\r\n    }\r\n}",
  "start_lineno" : "242",
  "methodName" : "rescheduleEnabledAlarms",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/271",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport android.content.Context\nfun Context.rescheduleEnabledAlarms() {\r\n    EasyDiaryDbHelper.findAlarmAll().forEach {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "313",
  "ground_truth" : "    Configuration.UI_MODE_NIGHT_NO -> false\r\n    else -> false\r\n}",
  "context" : "fun Context.isNightMode() = when (resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) {\r\n    Configuration.UI_MODE_NIGHT_YES -> false\r\n    Configuration.UI_MODE_NIGHT_NO -> false\r\n    else -> false\r\n}",
  "start_lineno" : "309",
  "methodName" : "isNightMode",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/272",
  "prompt" : "import android.content.res.Configuration\nimport android.content.Context\nfun Context.isNightMode() = when (resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) {\r\n    Configuration.UI_MODE_NIGHT_YES -> false\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "322",
  "ground_truth" : "        // FIXME remove test code\r\n//        Toast.makeText(this, \"${this::class.java.simpleName}\", Toast.LENGTH_LONG).show()\r\n        config.aafPinLockPauseMillis = System.currentTimeMillis()\r\n    }\r\n}",
  "context" : "fun Context.pauseLock() {\r\n    if (config.aafPinLockEnable || config.fingerprintLockEnable) {\r\n\r\n        // FIXME remove test code\r\n//        Toast.makeText(this, \"${this::class.java.simpleName}\", Toast.LENGTH_LONG).show()\r\n        config.aafPinLockPauseMillis = System.currentTimeMillis()\r\n    }\r\n}",
  "start_lineno" : "315",
  "methodName" : "pauseLock",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/273",
  "prompt" : "import android.content.Context\nfun Context.pauseLock() {\r\n    if (config.aafPinLockEnable || config.fingerprintLockEnable) {\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "525",
  "ground_truth" : "\r\n    val defaultFontSize: Float = dpToPixelFloatValue(SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n    val settingFontSize: Float = config.settingFontSize\r\n    textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, settingFontSize)\r\n}",
  "context" : "fun Context.initTextSize(textView: TextView) {\r\n    if (isNightMode()) return\r\n\r\n    val defaultFontSize: Float = dpToPixelFloatValue(SUPPORT_LANGUAGE_FONT_SIZE_DEFAULT_SP.toFloat())\r\n    val settingFontSize: Float = config.settingFontSize\r\n    textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, settingFontSize)\r\n}",
  "start_lineno" : "519",
  "methodName" : "initTextSize",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/274",
  "prompt" : "import android.view.View\nimport android.content.Context\nfun Context.initTextSize(textView: TextView) {\r\n    if (isNightMode()) return\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "530",
  "ground_truth" : "    if (isNightMode()) return\r\n    changeDrawableIconColor(color, resourceId)\r\n}",
  "context" : "fun Context.updateDrawableColorInnerCardView(resourceId: Int, color: Int = config.textColor) {\r\n    if (isNightMode()) return\r\n    changeDrawableIconColor(color, resourceId)\r\n}",
  "start_lineno" : "527",
  "methodName" : "updateDrawableColorInnerCardView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/275",
  "prompt" : "import androidx.cardview.widget.CardView\nimport android.view.View\nimport android.content.Context\nfun Context.updateDrawableColorInnerCardView(resourceId: Int, color: Int = config.textColor) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "535",
  "ground_truth" : "    if (isNightMode()) return\r\n    changeDrawableIconColor(color, imageView)\r\n}",
  "context" : "fun Context.updateDrawableColorInnerCardView(imageView: ImageView, color: Int = config.textColor) {\r\n    if (isNightMode()) return\r\n    changeDrawableIconColor(color, imageView)\r\n}",
  "start_lineno" : "532",
  "methodName" : "updateDrawableColorInnerCardView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/276",
  "prompt" : "import androidx.cardview.widget.CardView\nimport android.view.View\nimport android.content.Context\nfun Context.updateDrawableColorInnerCardView(imageView: ImageView, color: Int = config.textColor) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "549",
  "ground_truth" : "        } else {\r\n            setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n        }\r\n    }\r\n}",
  "context" : "fun Context.changeDrawableIconColor(color: Int, resourceId: Int) {\r\n    AppCompatResources.getDrawable(this, resourceId)?.apply {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            colorFilter = BlendModeColorFilter(color, BlendMode.SRC_IN)\r\n        } else {\r\n            setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "541",
  "methodName" : "changeDrawableIconColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/277",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.appcompat.content.res.AppCompatResources\nimport android.os.Build\nimport android.content.Context\nimport android.app\nfun Context.changeDrawableIconColor(color: Int, resourceId: Int) {\r\n    AppCompatResources.getDrawable(this, resourceId)?.apply {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            colorFilter = BlendModeColorFilter(color, BlendMode.SRC_IN)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "750",
  "ground_truth" : "            listDeniedPermissions.isEmpty()\r\n        }\r\n    }\r\n\r\n}",
  "context" : "fun Context.checkPermission(permissions: Array<String>): Boolean {\r\n    return when (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && permissions === EXTERNAL_STORAGE_PERMISSIONS) {\r\n        true -> true\r\n        false -> {\r\n            val listDeniedPermissions: List<String> = permissions.filter { permission ->\r\n                ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_DENIED\r\n            }\r\n            listDeniedPermissions.isEmpty()\r\n        }\r\n    }\r\n\r\n}",
  "start_lineno" : "739",
  "methodName" : "checkPermission",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/278",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.core.content.ContextCompat\nimport android.os.Build\nimport android.content.pm.PackageManager\nimport android.content.Context\nfun Context.checkPermission(permissions: Array<String>): Boolean {\r\n    return when (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && permissions === EXTERNAL_STORAGE_PERMISSIONS) {\r\n        true -> true\r\n        false -> {\r\n            val listDeniedPermissions: List<String> = permissions.filter { permission ->\r\n                ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_DENIED\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "755",
  "ground_truth" : "    val preferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n    return preferences.contains(key)\r\n}",
  "context" : "fun Context.preferencesContains(key: String): Boolean {\r\n    val preferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n    return preferences.contains(key)\r\n}",
  "start_lineno" : "752",
  "methodName" : "preferencesContains",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/279",
  "prompt" : "import android.content.Context\nfun Context.preferencesContains(key: String): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "761",
  "ground_truth" : "    mNewTitle.setSpan(CustomTypefaceSpan(\"\", FontUtils.getCommonTypeface(this)!!), 0, mNewTitle.length, Spannable.SPAN_INCLUSIVE_INCLUSIVE)\r\n    mi.title = mNewTitle\r\n}",
  "context" : "fun Context.applyFontToMenuItem(mi: MenuItem) {\r\n    val mNewTitle = SpannableString(mi.title)\r\n    mNewTitle.setSpan(CustomTypefaceSpan(\"\", FontUtils.getCommonTypeface(this)!!), 0, mNewTitle.length, Spannable.SPAN_INCLUSIVE_INCLUSIVE)\r\n    mi.title = mNewTitle\r\n}",
  "start_lineno" : "757",
  "methodName" : "applyFontToMenuItem",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/280",
  "prompt" : "import android.view.MenuItem\nimport android.text.SpannableString\nimport android.text.Spannable\nimport android.content.Context\nimport android.app\nfun Context.applyFontToMenuItem(mi: MenuItem) {\r\n    val mNewTitle = SpannableString(mi.title)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "766",
  "ground_truth" : "    val authority = \"${this.packageName}.provider\"\r\n    return if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) FileProvider.getUriForFile(this, authority, targetFile) else Uri.fromFile(targetFile)\r\n}",
  "context" : "fun Context.getUriForFile(targetFile: File): Uri {\r\n    val authority = \"${this.packageName}.provider\"\r\n    return if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) FileProvider.getUriForFile(this, authority, targetFile) else Uri.fromFile(targetFile)\r\n}",
  "start_lineno" : "763",
  "methodName" : "getUriForFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/281",
  "prompt" : "import java.io.File\nimport android.net.Uri\nimport android.content.Context\nfun Context.getUriForFile(targetFile: File): Uri {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "832",
  "ground_truth" : "        putExtra(Intent.EXTRA_STREAM, getUriForFile(targetFile))\r\n        type = mimeType\r\n        startActivity(Intent.createChooser(this, getString(R.string.diary_card_share_info)))\r\n    }\r\n}",
  "context" : "fun Context.shareFile(targetFile: File, mimeType: String) {\r\n    Intent().apply {\r\n        action = Intent.ACTION_SEND\r\n        putExtra(Intent.EXTRA_STREAM, getUriForFile(targetFile))\r\n        type = mimeType\r\n        startActivity(Intent.createChooser(this, getString(R.string.diary_card_share_info)))\r\n    }\r\n}",
  "start_lineno" : "825",
  "methodName" : "shareFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/282",
  "prompt" : "import java.io.File\nimport android.content.Intent\nimport android.content.Context\nimport android.app\nfun Context.shareFile(targetFile: File, mimeType: String) {\r\n    Intent().apply {\r\n        action = Intent.ACTION_SEND\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "840",
  "ground_truth" : "    val destFilePath = BACKUP_DB_DIRECTORY + DIARY_DB_NAME + \"_\" + DateUtils.getCurrentDateTime(\"yyyyMMdd_HHmmss\")\r\n    val destFile = File(EasyDiaryUtils.getApplicationDataDirectory(this) + destFilePath)\r\n    FileUtils.copyFile(srcFile, destFile, false)\r\n    config.diaryBackupLocal = System.currentTimeMillis()\r\n}",
  "context" : "fun Context.exportRealmFile() {\r\n    val srcFile = File(EasyDiaryDbHelper.getRealmPath())\r\n    val destFilePath = BACKUP_DB_DIRECTORY + DIARY_DB_NAME + \"_\" + DateUtils.getCurrentDateTime(\"yyyyMMdd_HHmmss\")\r\n    val destFile = File(EasyDiaryUtils.getApplicationDataDirectory(this) + destFilePath)\r\n    FileUtils.copyFile(srcFile, destFile, false)\r\n    config.diaryBackupLocal = System.currentTimeMillis()\r\n}",
  "start_lineno" : "834",
  "methodName" : "exportRealmFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/283",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nimport io.realm.Realm\nimport android.content.Context\nfun Context.exportRealmFile() {\r\n    val srcFile = File(EasyDiaryDbHelper.getRealmPath())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "852",
  "ground_truth" : "        String.format(format, hours, minutes, seconds)\r\n    } else {\r\n        String.format(format, hours, minutes)\r\n    }\r\n}",
  "context" : "fun Context.formatTime(showSeconds: Boolean, use24HourFormat: Boolean, hours: Int, minutes: Int, seconds: Int): String {\r\n    val hoursFormat = if (use24HourFormat) \"%02d\" else \"%01d\"\r\n    var format = \"$hoursFormat:%02d\"\r\n\r\n    return if (showSeconds) {\r\n        format += \":%02d\"\r\n        String.format(format, hours, minutes, seconds)\r\n    } else {\r\n        String.format(format, hours, minutes)\r\n    }\r\n}",
  "start_lineno" : "842",
  "methodName" : "formatTime",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/284",
  "prompt" : "import android.content.Context\nfun Context.formatTime(showSeconds: Boolean, use24HourFormat: Boolean, hours: Int, minutes: Int, seconds: Int): String {\r\n    val hoursFormat = if (use24HourFormat) \"%02d\" else \"%01d\"\r\n    var format = \"$hoursFormat:%02d\"\r\n\r\n    return if (showSeconds) {\r\n        format += \":%02d\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "876",
  "ground_truth" : "    val newHours = if (hours == 0 || hours == 12) 12 else hours % 12\r\n    return \"${formatTime(showSeconds, false, newHours, minutes, seconds)} $appendable\"\r\n}",
  "context" : "fun Context.formatTo12HourFormat(showSeconds: Boolean, hours: Int, minutes: Int, seconds: Int): String {\r\n    val appendable = getString(if (hours >= 12) R.string.p_m else R.string.a_m)\r\n    val newHours = if (hours == 0 || hours == 12) 12 else hours % 12\r\n    return \"${formatTime(showSeconds, false, newHours, minutes, seconds)} $appendable\"\r\n}",
  "start_lineno" : "872",
  "methodName" : "formatTo12HourFormat",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/285",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.content.Context\nimport android.app\nfun Context.formatTo12HourFormat(showSeconds: Boolean, hours: Int, minutes: Int, seconds: Int): String {\r\n    val appendable = getString(if (hours >= 12) R.string.p_m else R.string.a_m)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "887",
  "ground_truth" : "    val colorRes = resolvedAttr.run { if (resourceId != 0) resourceId else data }\r\n    return ContextCompat.getColor(this, colorRes)\r\n}",
  "context" : "\r\n@ColorInt\r\n@SuppressLint(\"ResourceAsColor\")\r\nfun Context.getColorResCompat(@AttrRes id: Int): Int {\r\n    val resolvedAttr = TypedValue()\r\n    theme.resolveAttribute(id, resolvedAttr, true)\r\n    val colorRes = resolvedAttr.run { if (resourceId != 0) resourceId else data }\r\n    return ContextCompat.getColor(this, colorRes)\r\n}",
  "start_lineno" : "879",
  "methodName" : "getColorResCompat",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/286",
  "prompt" : "import java.util\nimport me.blog.korn123.easydiary.R\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.content.Context\nimport android.annotation.SuppressLint\n\r\n@ColorInt\r\n@SuppressLint(\"ResourceAsColor\")\r\nfun Context.getColorResCompat(@AttrRes id: Int): Int {\r\n    val resolvedAttr = TypedValue()\r\n    theme.resolveAttribute(id, resolvedAttr, true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "910",
  "ground_truth" : "        .append(getString(R.string.notification_msg_duplicate_file_count, \"*\", duplicateFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_upload_success, \"*\", successCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_upload_fail, \"*\", failCount, \"<br>\"))",
  "context" : "fun Context.createBackupContentText(localDeviceFileCount: Int, duplicateFileCount: Int, successCount: Int, failCount: Int): StringBuilder = StringBuilder()\r\n        .append(\"<b>\\uD83D\\uDCF7 Attached Photos</b><br>\")\r\n        .append(getString(R.string.notification_msg_device_file_count, \"*\", localDeviceFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_duplicate_file_count, \"*\", duplicateFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_upload_success, \"*\", successCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_upload_fail, \"*\", failCount, \"<br>\"))",
  "start_lineno" : "905",
  "methodName" : "createBackupContentText",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/287",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nimport android.os.Build\nimport android.content.Context\nimport android.app\nfun Context.createBackupContentText(localDeviceFileCount: Int, duplicateFileCount: Int, successCount: Int, failCount: Int): StringBuilder = StringBuilder()\r\n        .append(\"<b>\\uD83D\\uDCF7 Attached Photos</b><br>\")\r\n        .append(getString(R.string.notification_msg_device_file_count, \"*\", localDeviceFileCount, \"<br>\"))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "917",
  "ground_truth" : "        .append(getString(R.string.notification_msg_duplicate_file_count, \"*\", duplicateFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_download_success, \"*\", successCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_download_fail, \"*\", failCount, \"<br>\"))",
  "context" : "fun Context.createRecoveryContentText(remoteDriveFileCount: Int, duplicateFileCount: Int, successCount: Int, failCount: Int): StringBuilder = StringBuilder()\r\n        .append(\"<b>\\uD83D\\uDCF7 Attached Photos</b><br>\")\r\n        .append(getString(R.string.notification_msg_google_drive_file_count, \"*\", remoteDriveFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_duplicate_file_count, \"*\", duplicateFileCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_download_success, \"*\", successCount, \"<br>\"))\r\n        .append(getString(R.string.notification_msg_download_fail, \"*\", failCount, \"<br>\"))",
  "start_lineno" : "912",
  "methodName" : "createRecoveryContentText",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/288",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nimport android.os.Build\nimport android.content.Context\nimport android.app\nfun Context.createRecoveryContentText(remoteDriveFileCount: Int, duplicateFileCount: Int, successCount: Int, failCount: Int): StringBuilder = StringBuilder()\r\n        .append(\"<b>\\uD83D\\uDCF7 Attached Photos</b><br>\")\r\n        .append(getString(R.string.notification_msg_google_drive_file_count, \"*\", remoteDriveFileCount, \"<br>\"))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "924",
  "ground_truth" : "        Realm.init(this)\r\n    }\r\n}",
  "context" : "fun Context.forceInitRealmLessThanOreo() {\r\n    // android marshmallow minor version bug workaround\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {\r\n        Realm.init(this)\r\n    }\r\n}",
  "start_lineno" : "919",
  "methodName" : "forceInitRealmLessThanOreo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/289",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport io.realm.Realm\nimport android.os.Build\nimport android.content.Context\nfun Context.forceInitRealmLessThanOreo() {\r\n    // android marshmallow minor version bug workaround\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "929",
  "ground_truth" : "    val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n    return LocationManagerCompat.isLocationEnabled(locationManager)\r\n}",
  "context" : "fun Context.isLocationEnabled(): Boolean {\r\n    val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n    return LocationManagerCompat.isLocationEnabled(locationManager)\r\n}",
  "start_lineno" : "926",
  "methodName" : "isLocationEnabled",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/290",
  "prompt" : "import android.location.Location\nimport android.content.Context\nfun Context.isLocationEnabled(): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "975",
  "ground_truth" : "    } catch (e: Exception) {\r\n        toast(e.message ?: \"Error\")\r\n    }\r\n    return addressList\r\n}",
  "context" : "fun Context.getFromLocation(latitude: Double, longitude: Double, maxResults: Int): List<Address>? {\r\n//    val lat = java.lang.Double.parseDouble(String.format(\"%.6f\", latitude))\r\n//    val lon = java.lang.Double.parseDouble(String.format(\"%.7f\", longitude))\r\n    val addressList = arrayListOf<Address>()\r\n    try {\r\n        addressList.addAll(Geocoder(this, Locale.getDefault()).getFromLocation(latitude, longitude, maxResults)!!)\r\n    } catch (e: Exception) {\r\n        toast(e.message ?: \"Error\")\r\n    }\r\n    return addressList\r\n}",
  "start_lineno" : "965",
  "methodName" : "getFromLocation",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/291",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.location.Location\nimport android.location.Geocoder\nimport android.location.Address\nimport android.content.Context\nfun Context.getFromLocation(latitude: Double, longitude: Double, maxResults: Int): List<Address>? {\r\n//    val lat = java.lang.Double.parseDouble(String.format(\"%.6f\", latitude))\r\n//    val lon = java.lang.Double.parseDouble(String.format(\"%.7f\", longitude))\r\n    val addressList = arrayListOf<Address>()\r\n    try {\r\n        addressList.addAll(Geocoder(this, Locale.getDefault()).getFromLocation(latitude, longitude, maxResults)!!)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "998",
  "ground_truth" : "    val activeNetwork: NetworkInfo? = cm.activeNetworkInfo\r\n    return activeNetwork?.isConnectedOrConnecting == true\r\n}",
  "context" : "fun Context.isConnectedOrConnecting(): Boolean {\r\n    val cm = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n    val activeNetwork: NetworkInfo? = cm.activeNetworkInfo\r\n    return activeNetwork?.isConnectedOrConnecting == true\r\n}",
  "start_lineno" : "994",
  "methodName" : "isConnectedOrConnecting",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/292",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.net.ConnectivityManager\nimport android.content.Context\nfun Context.isConnectedOrConnecting(): Boolean {\r\n    val cm = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "1008",
  "ground_truth" : "        shape = GradientDrawable.RECTANGLE\r\n//        cornerRadius = dpToPixel(5F).toFloat()\r\n        setStroke(strokeWidth, strokeColor)\r\n    }\r\n}",
  "context" : "fun Context.getLabelBackground(): GradientDrawable {\r\n    val strokeWidth = dpToPixel(1F)\r\n    val strokeColor: Int = config.textColor\r\n    return GradientDrawable().apply {\r\n        shape = GradientDrawable.RECTANGLE\r\n//        cornerRadius = dpToPixel(5F).toFloat()\r\n        setStroke(strokeWidth, strokeColor)\r\n    }\r\n}",
  "start_lineno" : "1000",
  "methodName" : "getLabelBackground",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/293",
  "prompt" : "import android.graphics.drawable.GradientDrawable\nimport android.content.Context\nimport android.app\nfun Context.getLabelBackground(): GradientDrawable {\r\n    val strokeWidth = dpToPixel(1F)\r\n    val strokeColor: Int = config.textColor\r\n    return GradientDrawable().apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "1015",
  "ground_truth" : "        checkAppIconColor(it.themeName,it == launcher)\r\n    }\r\n}",
  "context" : "fun Context.toggleLauncher(launcher: Launcher) {\r\n    themeItems.forEach {\r\n        checkAppIconColor(it.themeName,it == launcher)\r\n    }\r\n}",
  "start_lineno" : "1011",
  "methodName" : "toggleLauncher",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/294",
  "prompt" : "import me.blog.korn123.easydiary.enums.Launcher\nimport android.content.Context\nfun Context.toggleLauncher(launcher: Launcher) {\r\n    themeItems.forEach {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "1060",
  "ground_truth" : "        Calculation.CEIL -> Math.ceil(px.toDouble()).toInt()\r\n        Calculation.ROUND -> Math.round(px)\r\n        Calculation.FLOOR -> Math.floor(px.toDouble()).toInt()\r\n    }\r\n}",
  "context" : "fun Context.dpToPixel(dp: Float, policy: Calculation = Calculation.CEIL): Int {\r\n    val px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.displayMetrics)\r\n    return when (policy) {\r\n        Calculation.CEIL -> Math.ceil(px.toDouble()).toInt()\r\n        Calculation.ROUND -> Math.round(px)\r\n        Calculation.FLOOR -> Math.floor(px.toDouble()).toInt()\r\n    }\r\n}",
  "start_lineno" : "1053",
  "methodName" : "dpToPixel",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/295",
  "prompt" : "import java.util\nimport me.blog.korn123.easydiary.enums.Calculation\nimport android.util.TypedValue\nimport android.content.Context\nimport android.app\nfun Context.dpToPixel(dp: Float, policy: Calculation = Calculation.CEIL): Int {\r\n    val px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.displayMetrics)\r\n    return when (policy) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "1151",
  "ground_truth" : "    if (config.boldStyleEnable) spannableString.setSpan(StyleSpan(Typeface.BOLD), 0, dateString.length, 0)\r\n    return spannableString\r\n}",
  "context" : "fun Context.applyBoldToDate(dateString: String, summary: String): SpannableString {\r\n    val spannableString = SpannableString(\"$dateString\\n$summary\")\r\n    if (config.boldStyleEnable) spannableString.setSpan(StyleSpan(Typeface.BOLD), 0, dateString.length, 0)\r\n    return spannableString\r\n}",
  "start_lineno" : "1147",
  "methodName" : "applyBoldToDate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt",
  "task_id" : "aaf-easydiary/296",
  "prompt" : "import android.text.SpannableString\nimport android.text.Spannable\nimport android.content.Context\nimport android.app\nfun Context.applyBoldToDate(dateString: String, summary: String): SpannableString {\r\n    val spannableString = SpannableString(\"$dateString\\n$summary\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "            paint.textSkewX = -0.25f\r\n        }\r\n\r\n        paint.typeface = tf\r\n    }",
  "context" : "private fun applyCustomTypeFace(paint: Paint) {\r\n        val oldStyle: Int\r\n        val old = paint.typeface\r\n        oldStyle = old?.style ?: 0\r\n\r\n        val fake = oldStyle and tf.style.inv()\r\n        if (fake and Typeface.BOLD != 0) {\r\n            paint.isFakeBoldText = true\r\n        }\r\n\r\n        if (fake and Typeface.ITALIC != 0) {\r\n            paint.textSkewX = -0.25f\r\n        }\r\n\r\n        paint.typeface = tf\r\n    }",
  "start_lineno" : "17",
  "methodName" : "applyCustomTypeFace",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\CustomTypefaceSpan.kt",
  "task_id" : "aaf-easydiary/297",
  "prompt" : "import android.graphics.Typeface\nimport android.graphics.Paint\nprivate fun applyCustomTypeFace(paint: Paint) {\r\n        val oldStyle: Int\r\n        val old = paint.typeface\r\n        oldStyle = old?.style ?: 0\r\n\r\n        val fake = oldStyle and tf.style.inv()\r\n        if (fake and Typeface.BOLD != 0) {\r\n            paint.isFakeBoldText = true\r\n        }\r\n\r\n        if (fake and Typeface.ITALIC != 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "            updateCardViewPolicy(it)\r\n            FontUtils.setFontsTypeface(this, null, it, true)\r\n        }\r\n    }\r\n}",
  "context" : "fun Fragment.updateFragmentUI(rootView: ViewGroup) {\r\n    rootView.let {\r\n        context?.run {\r\n            initTextSize(it)\r\n            updateTextColors(it,0,0)\r\n            updateAppViews(it)\r\n            updateCardViewPolicy(it)\r\n            FontUtils.setFontsTypeface(this, null, it, true)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "22",
  "methodName" : "updateFragmentUI",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Fragment.kt",
  "task_id" : "aaf-easydiary/298",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nfun Fragment.updateFragmentUI(rootView: ViewGroup) {\r\n    rootView.let {\r\n        context?.run {\r\n            initTextSize(it)\r\n            updateTextColors(it,0,0)\r\n            updateAppViews(it)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "10",
  "ground_truth" : "    val y = (299 * Color.red(this) + 587 * Color.green(this) + 114 * Color.blue(this)) / 1000\r\n    return if (y >= 149) DARK_GREY else Color.WHITE\r\n}",
  "context" : "fun Int.getContrastColor(): Int {\r\n    val DARK_GREY = -13421773\r\n    val y = (299 * Color.red(this) + 587 * Color.green(this) + 114 * Color.blue(this)) / 1000\r\n    return if (y >= 149) DARK_GREY else Color.WHITE\r\n}",
  "start_lineno" : "6",
  "methodName" : "getContrastColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/299",
  "prompt" : "import android.graphics.Color\nfun Int.getContrastColor(): Int {\r\n    val DARK_GREY = -13421773\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "    val red = Color.red(this)\r\n    val green = Color.green(this)\r\n    val blue = Color.blue(this)\r\n    return Color.argb(alpha, red, green, blue)\r\n}",
  "context" : "fun Int.adjustAlpha(factor: Float): Int {\r\n    val alpha = Math.round(Color.alpha(this) * factor)\r\n    val red = Color.red(this)\r\n    val green = Color.green(this)\r\n    val blue = Color.blue(this)\r\n    return Color.argb(alpha, red, green, blue)\r\n}",
  "start_lineno" : "14",
  "methodName" : "adjustAlpha",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/300",
  "prompt" : "import android.graphics.Color\nfun Int.adjustAlpha(factor: Float): Int {\r\n    val alpha = Math.round(Color.alpha(this) * factor)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "\r\n    sb.append(String.format(Locale.getDefault(), \"%02d\", minutes))\r\n    sb.append(\":\").append(String.format(Locale.getDefault(), \"%02d\", seconds))\r\n    return sb.toString()\r\n}",
  "context" : "fun Int.getFormattedDuration(): String {\r\n    val sb = StringBuilder(8)\r\n    val hours = this / 3600\r\n    val minutes = this % 3600 / 60\r\n    val seconds = this % 60\r\n\r\n    if (this > 3600) {\r\n        sb.append(String.format(Locale.getDefault(), \"%02d\", hours)).append(\":\")\r\n    }\r\n\r\n    sb.append(String.format(Locale.getDefault(), \"%02d\", minutes))\r\n    sb.append(\":\").append(String.format(Locale.getDefault(), \"%02d\", seconds))\r\n    return sb.toString()\r\n}",
  "start_lineno" : "22",
  "methodName" : "getFormattedDuration",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/301",
  "prompt" : "fun Int.getFormattedDuration(): String {\r\n    val sb = StringBuilder(8)\r\n    val hours = this / 3600\r\n    val minutes = this % 3600 / 60\r\n    val seconds = this % 60\r\n\r\n    if (this > 3600) {\r\n        sb.append(String.format(Locale.getDefault(), \"%02d\", hours)).append(\":\")\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "    if (hsl[2] < 0)\r\n        hsl[2] = 0f\r\n    hsv = hsl2hsv(hsl)\r\n    return Color.HSVToColor(hsv)\r\n}",
  "context" : "fun Int.darkenColor(darkFactor: Int = 8): Int {\r\n    if (this == Color.WHITE) {\r\n        return -2105377\r\n    } else if (this == Color.BLACK) {\r\n        return Color.BLACK\r\n    }\r\n\r\n    var hsv = FloatArray(3)\r\n    Color.colorToHSV(this, hsv)\r\n    val hsl = hsv2hsl(hsv)\r\n    hsl[2] -= darkFactor / 100f\r\n    if (hsl[2] < 0)\r\n        hsl[2] = 0f\r\n    hsv = hsl2hsv(hsl)\r\n    return Color.HSVToColor(hsv)\r\n}",
  "start_lineno" : "47",
  "methodName" : "darkenColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/302",
  "prompt" : "import android.graphics.Color\nfun Int.darkenColor(darkFactor: Int = 8): Int {\r\n    if (this == Color.WHITE) {\r\n        return -2105377\r\n    } else if (this == Color.BLACK) {\r\n        return Color.BLACK\r\n    }\r\n\r\n    var hsv = FloatArray(3)\r\n    Color.colorToHSV(this, hsv)\r\n    val hsl = hsv2hsl(hsv)\r\n    hsl[2] -= darkFactor / 100f\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "    var sat = hsl[1]\r\n    val light = hsl[2]\r\n    sat *= if (light < .5) light else 1 - light\r\n    return floatArrayOf(hue, 2f * sat / (light + sat), light + sat)\r\n}",
  "context" : "private fun hsl2hsv(hsl: FloatArray): FloatArray {\r\n    val hue = hsl[0]\r\n    var sat = hsl[1]\r\n    val light = hsl[2]\r\n    sat *= if (light < .5) light else 1 - light\r\n    return floatArrayOf(hue, 2f * sat / (light + sat), light + sat)\r\n}",
  "start_lineno" : "64",
  "methodName" : "hsl2hsv",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/303",
  "prompt" : "private fun hsl2hsv(hsl: FloatArray): FloatArray {\r\n    val hue = hsl[0]\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "83",
  "ground_truth" : "    if (newSat > 1f)\r\n        newSat = 1f\r\n\r\n    return floatArrayOf(hue, newSat, newHue / 2f)\r\n}",
  "context" : "private fun hsv2hsl(hsv: FloatArray): FloatArray {\r\n    val hue = hsv[0]\r\n    val sat = hsv[1]\r\n    val value = hsv[2]\r\n\r\n    val newHue = (2f - sat) * value\r\n    var newSat = sat * value / if (newHue < 1f) newHue else 2f - newHue\r\n    if (newSat > 1f)\r\n        newSat = 1f\r\n\r\n    return floatArrayOf(hue, newSat, newHue / 2f)\r\n}",
  "start_lineno" : "72",
  "methodName" : "hsv2hsl",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt",
  "task_id" : "aaf-easydiary/304",
  "prompt" : "private fun hsv2hsl(hsv: FloatArray): FloatArray {\r\n    val hue = hsv[0]\r\n    val sat = hsv[1]\r\n    val value = hsv[2]\r\n\r\n    val newHue = (2f - sat) * value\r\n    var newSat = sat * value / if (newHue < 1f) newHue else 2f - newHue\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "        return CaldroidItemAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }",
  "context" : "override fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r\n        return CaldroidItemAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }",
  "start_lineno" : "15",
  "methodName" : "getNewDatesGridAdapter",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\CalendarFragment.kt",
  "task_id" : "aaf-easydiary/305",
  "prompt" : "import com.roomorama.caldroid.CaldroidGridAdapter\noverride fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "                requireActivity(), R.layout.item_weekday,\r\n                daysOfWeek, themeResource)\r\n    }",
  "context" : "override fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r\n                requireActivity(), R.layout.item_weekday,\r\n                daysOfWeek, themeResource)\r\n    }",
  "start_lineno" : "20",
  "methodName" : "getNewWeekdayAdapter",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\CalendarFragment.kt",
  "task_id" : "aaf-easydiary/306",
  "prompt" : "import me.blog.korn123.easydiary.adapters.WeekdayArrayAdapter\nimport me.blog.korn123.easydiary.R\noverride fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDailySymbolBinding\nvar mDailySymbolAdapter DailySymbolAdapter\nvar mCalendarFragment CaldroidFragmentEx\nvar mDailySymbolList ArrayList<DailySymbolAdapter.DailySymbol>\nval mRequestUpdateDailySymbol",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "        mBinding = FragmentDailySymbolBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        mBinding = FragmentDailySymbolBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "69",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DailySymbolFragment.kt",
  "task_id" : "aaf-easydiary/307",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDailySymbolBinding\nvar mDailySymbolAdapter DailySymbolAdapter\nvar mCalendarFragment CaldroidFragmentEx\nvar mDailySymbolList ArrayList<DailySymbolAdapter.DailySymbol>\nval mRequestUpdateDailySymbol",
  "app_type" : "notes",
  "end_lineno" : "171",
  "ground_truth" : "\r\n\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n\r\n\r\n    }",
  "start_lineno" : "167",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DailySymbolFragment.kt",
  "task_id" : "aaf-easydiary/308",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDailySymbolBinding\nvar mDailySymbolAdapter DailySymbolAdapter\nvar mCalendarFragment CaldroidFragmentEx\nvar mDailySymbolList ArrayList<DailySymbolAdapter.DailySymbol>\nval mRequestUpdateDailySymbol",
  "app_type" : "notes",
  "end_lineno" : "246",
  "ground_truth" : "        mBinding.dailyCardRecyclerView.minimumHeight = mBinding.dailyCardRecyclerView.height\r\n        mDailySymbolAdapter.notifyDataSetChanged()\r\n    }",
  "context" : " @SuppressLint(\"NotifyDataSetChanged\")\r\n    fun updateDailySymbol() {\r\n        init365Day()\r\n        mBinding.dailyCardRecyclerView.minimumHeight = mBinding.dailyCardRecyclerView.height\r\n        mDailySymbolAdapter.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "241",
  "methodName" : "updateDailySymbol",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DailySymbolFragment.kt",
  "task_id" : "aaf-easydiary/309",
  "prompt" : "import android.annotation.SuppressLint\n @SuppressLint(\"NotifyDataSetChanged\")\r\n    fun updateDailySymbol() {\r\n        init365Day()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDashboardRankBinding\nval MODE_FLAG\nval MODE_LIFETIME\nval MODE_LAST_MONTH\nval MODE_LAST_WEEK",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "        mBinding = FragmentDashboardRankBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentDashboardRankBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "23",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DashBoardRankFragment.kt",
  "task_id" : "aaf-easydiary/310",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDashboardSummaryBinding",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "        mBinding = FragmentDashboardSummaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentDashboardSummaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "21",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DashBoardSummaryFragment.kt",
  "task_id" : "aaf-easydiary/311",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinging FragmentDdayBinding\nvar mDDayAdapter DDayAdapter\nvar mLinearLayoutManager LinearLayoutManager\nvar mSafeFlexboxLayoutManager FlexboxLayoutManager\nvar mDDayItems MutableList<DDay>\nvar mDDaySortOrder",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "        mBinging = FragmentDdayBinding.inflate(layoutInflater)\r\n        return mBinging.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        mBinging = FragmentDdayBinding.inflate(layoutInflater)\r\n        return mBinging.root\r\n    }",
  "start_lineno" : "41",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DDayFragment.kt",
  "task_id" : "aaf-easydiary/312",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinging FragmentDdayBinding\nvar mDDayAdapter DDayAdapter\nvar mLinearLayoutManager LinearLayoutManager\nvar mSafeFlexboxLayoutManager FlexboxLayoutManager\nvar mDDayItems MutableList<DDay>\nvar mDDaySortOrder",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "        super.onResume()\r\n        updateDDayList(mDDaySortOrder)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateDDayList(mDDaySortOrder)\r\n    }",
  "start_lineno" : "87",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DDayFragment.kt",
  "task_id" : "aaf-easydiary/313",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinging FragmentDdayBinding\nvar mDDayAdapter DDayAdapter\nvar mLinearLayoutManager LinearLayoutManager\nvar mSafeFlexboxLayoutManager FlexboxLayoutManager\nvar mDDayItems MutableList<DDay>\nvar mDDaySortOrder",
  "app_type" : "notes",
  "end_lineno" : "101",
  "ground_truth" : "            addAll(EasyDiaryDbHelper.findDDayAll(sortOrder))\r\n            add(DDay(\"New D-Day!!!\"))\r\n        }\r\n        mDDayAdapter.notifyDataSetChanged()\r\n    }",
  "context" : "private fun updateDDayList(sortOrder: Sort) {\r\n        mDDayItems.run {\r\n            clear()\r\n            addAll(EasyDiaryDbHelper.findDDayAll(sortOrder))\r\n            add(DDay(\"New D-Day!!!\"))\r\n        }\r\n        mDDayAdapter.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "94",
  "methodName" : "updateDDayList",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DDayFragment.kt",
  "task_id" : "aaf-easydiary/314",
  "prompt" : "import me.blog.korn123.easydiary.models.DDay\nimport io.realm.Sort\nprivate fun updateDDayList(sortOrder: Sort) {\r\n        mDDayItems.run {\r\n            clear()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDiaryBinding\nvar mBannerDiary BannerViewPager<Diary>\nvar mDiaryList ArrayList<Diary>\nval MODE_FLAG\nval MODE_TASK_TODO\nval MODE_TASK_DOING\nval MODE_TASK_DONE\nval MODE_TASK_CANCEL\nval MODE_PREVIOUS_100\nval MODE_FUTURE",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        mBinding = FragmentDiaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        mBinding = FragmentDiaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "44",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DiaryFragment.kt",
  "task_id" : "aaf-easydiary/315",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDiaryBinding\nvar mBannerDiary BannerViewPager<Diary>\nvar mDiaryList ArrayList<Diary>\nval MODE_FLAG\nval MODE_TASK_TODO\nval MODE_TASK_DOING\nval MODE_TASK_DONE\nval MODE_TASK_CANCEL\nval MODE_PREVIOUS_100\nval MODE_FUTURE",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateDiary() }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateDiary() }\r\n    }",
  "start_lineno" : "86",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DiaryFragment.kt",
  "task_id" : "aaf-easydiary/316",
  "prompt" : "override fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentDiaryBinding\nvar mBannerDiary BannerViewPager<Diary>\nvar mDiaryList ArrayList<Diary>\nval MODE_FLAG\nval MODE_TASK_TODO\nval MODE_TASK_DOING\nval MODE_TASK_DONE\nval MODE_TASK_CANCEL\nval MODE_PREVIOUS_100\nval MODE_FUTURE",
  "app_type" : "notes",
  "end_lineno" : "158",
  "ground_truth" : "        mDiaryList.addAll(applyFilter(arguments?.getString(MODE_FLAG, MODE_PREVIOUS_100)))\r\n        mBinding.layoutDiaryContainer.visibility = if (mDiaryList.isNotEmpty()) View.VISIBLE else View.GONE\r\n        mBannerDiary.data.clear()\r\n        mBannerDiary.addData(mDiaryList)\r\n    }",
  "context" : "private fun updateDiary() {\r\n        mDiaryList.clear()\r\n        mDiaryList.addAll(applyFilter(arguments?.getString(MODE_FLAG, MODE_PREVIOUS_100)))\r\n        mBinding.layoutDiaryContainer.visibility = if (mDiaryList.isNotEmpty()) View.VISIBLE else View.GONE\r\n        mBannerDiary.data.clear()\r\n        mBannerDiary.addData(mDiaryList)\r\n    }",
  "start_lineno" : "152",
  "methodName" : "updateDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DiaryFragment.kt",
  "task_id" : "aaf-easydiary/317",
  "prompt" : "import me.blog.korn123.easydiary.models.Diary\nprivate fun updateDiary() {\r\n        mDiaryList.clear()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding DialogPostcardPhotoOptionBinding\nvar itemIndex Int\nvar viewMode\nvar filterMode\nvar forceSinglePhotoPosition\nvar photoUri String?\nvar positiveCallback\nval ITEM_INDEX\nval VIEW_MODE\nval FILTER_MODE\nval PHOTO_URI\nval FORCE_SINGLE_PHOTO_POSITION",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        mBinding = DialogPostcardPhotoOptionBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        dialog?.setTitle(getString(R.string.title_dialog_postcard_photo_option))\r\n        mBinding = DialogPostcardPhotoOptionBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "41",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoFlexItemOptionFragment.kt",
  "task_id" : "aaf-easydiary/318",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        dialog?.setTitle(getString(R.string.title_dialog_postcard_photo_option))\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding DialogPostcardPhotoOptionBinding\nvar itemIndex Int\nvar viewMode\nvar filterMode\nvar forceSinglePhotoPosition\nvar photoUri String?\nvar positiveCallback\nval ITEM_INDEX\nval VIEW_MODE\nval FILTER_MODE\nval PHOTO_URI\nval FORCE_SINGLE_PHOTO_POSITION",
  "app_type" : "notes",
  "end_lineno" : "107",
  "ground_truth" : "                putInt(FILTER_MODE, postCardPhotoItem.filterMode)\r\n                putBoolean(FORCE_SINGLE_PHOTO_POSITION, postCardPhotoItem.forceSinglePhotoPosition)\r\n                putString(PHOTO_URI, postCardPhotoItem.photoUri)\r\n            }\r\n        }",
  "context" : "fun newInstance(postCardPhotoItem: PhotoAdapter.PostCardPhotoItem) = PhotoFlexItemOptionFragment().apply {\r\n            arguments = Bundle().apply {\r\n                putInt(ITEM_INDEX, postCardPhotoItem.position)\r\n                putInt(VIEW_MODE, postCardPhotoItem.viewMode)\r\n                putInt(FILTER_MODE, postCardPhotoItem.filterMode)\r\n                putBoolean(FORCE_SINGLE_PHOTO_POSITION, postCardPhotoItem.forceSinglePhotoPosition)\r\n                putString(PHOTO_URI, postCardPhotoItem.photoUri)\r\n            }\r\n        }",
  "start_lineno" : "99",
  "methodName" : "newInstance",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoFlexItemOptionFragment.kt",
  "task_id" : "aaf-easydiary/319",
  "prompt" : "import me.blog.korn123.easydiary.adapters.PhotoAdapter\nimport android.os.Bundle\nfun newInstance(postCardPhotoItem: PhotoAdapter.PostCardPhotoItem) = PhotoFlexItemOptionFragment().apply {\r\n            arguments = Bundle().apply {\r\n                putInt(ITEM_INDEX, postCardPhotoItem.position)\r\n                putInt(VIEW_MODE, postCardPhotoItem.viewMode)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentPhotoHighlightBinding\nvar mBannerHistory BannerViewPager<History>\nvar togglePhotoHighlightCallback\nval PAGE_STYLE\nval PAGE_MARGIN\nval REVEAL_WIDTH\nval AUTO_PLAY",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        mBinding = FragmentPhotoHighlightBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentPhotoHighlightBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt",
  "task_id" : "aaf-easydiary/320",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentPhotoHighlightBinding\nvar mBannerHistory BannerViewPager<History>\nvar togglePhotoHighlightCallback\nval PAGE_STYLE\nval PAGE_MARGIN\nval REVEAL_WIDTH\nval AUTO_PLAY",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "        super.onViewCreated(view, savedInstanceState)\r\n        setupHistory()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setupHistory()\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt",
  "task_id" : "aaf-easydiary/321",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentPhotoHighlightBinding\nvar mBannerHistory BannerViewPager<History>\nvar togglePhotoHighlightCallback\nval PAGE_STYLE\nval PAGE_MARGIN\nval REVEAL_WIDTH\nval AUTO_PLAY",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateHistory() }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateHistory() }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt",
  "task_id" : "aaf-easydiary/322",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsAppInfoBinding\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "        mBinding = FragmentSettingsAppInfoBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentSettingsAppInfoBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt",
  "task_id" : "aaf-easydiary/323",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsAppInfoBinding\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt",
  "task_id" : "aaf-easydiary/324",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsAppInfoBinding\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "45",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt",
  "task_id" : "aaf-easydiary/325",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBasicBinding\nvar mRequestLocationSourceLauncher ActivityResultLauncher<Intent>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "        mBinding = FragmentSettingsBasicBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        mBinding = FragmentSettingsBasicBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "61",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsBasicFragment.kt",
  "task_id" : "aaf-easydiary/326",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBasicBinding\nvar mRequestLocationSourceLauncher ActivityResultLauncher<Intent>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "72",
  "ground_truth" : "        if (BuildConfig.FLAVOR == \"foss\") mBinding.enableReviewFlow.visibility = View.GONE\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        if (BuildConfig.FLAVOR == \"foss\") mBinding.enableReviewFlow.visibility = View.GONE\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "66",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsBasicFragment.kt",
  "task_id" : "aaf-easydiary/327",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBasicBinding\nvar mRequestLocationSourceLauncher ActivityResultLauncher<Intent>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "84",
  "ground_truth" : "                config.isThemeChanged = false\r\n                startMainActivityWithClearTask()\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n        requireActivity().run {\r\n            if (config.isThemeChanged) {\r\n                config.isThemeChanged = false\r\n                startMainActivityWithClearTask()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "74",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsBasicFragment.kt",
  "task_id" : "aaf-easydiary/328",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n        requireActivity().run {\r\n            if (config.isThemeChanged) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsFontBinding\nvar progressContainer ConstraintLayout\nvar mRequestFontPick ActivityResultLauncher<Intent>\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "101",
  "ground_truth" : "        mBinding = FragmentSettingsFontBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentSettingsFontBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "98",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt",
  "task_id" : "aaf-easydiary/329",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsFontBinding\nvar progressContainer ConstraintLayout\nvar mRequestFontPick ActivityResultLauncher<Intent>\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "113",
  "ground_truth" : "        }\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        progressContainer = (requireActivity() as BaseSettingsActivity).getProgressContainer()\r\n        requireActivity().run {\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_minus_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_plus_6)\r\n        }\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "103",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt",
  "task_id" : "aaf-easydiary/330",
  "prompt" : "import me.blog.korn123.easydiary.activities.SettingsActivity\nimport me.blog.korn123.easydiary.activities.BaseSettingsActivity\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Activity\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        progressContainer = (requireActivity() as BaseSettingsActivity).getProgressContainer()\r\n        requireActivity().run {\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_minus_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_plus_6)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsFontBinding\nvar progressContainer ConstraintLayout\nvar mRequestFontPick ActivityResultLauncher<Intent>\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "115",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt",
  "task_id" : "aaf-easydiary/331",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "113",
  "ground_truth" : "        mBinding = FragmentSettingsBackupLocalBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentSettingsBackupLocalBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "110",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/332",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "120",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "115",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/333",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "126",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "122",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/334",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "136",
  "ground_truth" : "        requireActivity().exportRealmFile()\r\n        requireActivity().makeSnackBar(\"Operation completed.\")\r\n    }",
  "context" : "private fun exportRealmFile(showDialog: Boolean = true) {\r\n        requireActivity().exportRealmFile()\r\n        requireActivity().makeSnackBar(\"Operation completed.\")\r\n    }",
  "start_lineno" : "133",
  "methodName" : "exportRealmFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/335",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.R\nprivate fun exportRealmFile(showDialog: Boolean = true) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "147",
  "ground_truth" : "            os?.close()\r\n            `is`.close()\r\n            requireActivity().makeSnackBar(\"Operation completed.\")\r\n        }\r\n    }",
  "context" : "private fun exportRealmFileWithSAF(uri: Uri?) {\r\n        uri?.let {\r\n            val os = requireActivity().contentResolver.openOutputStream(it)\r\n            val `is` = FileInputStream(EasyDiaryDbHelper.getRealmPath())\r\n            IOUtils.copy(`is`, os)\r\n            os?.close()\r\n            `is`.close()\r\n            requireActivity().makeSnackBar(\"Operation completed.\")\r\n        }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "exportRealmFileWithSAF",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/336",
  "prompt" : "import java.io.FileInputStream\nimport java.io.File\nimport org.apache.commons.io.IOUtils\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun exportRealmFileWithSAF(uri: Uri?) {\r\n        uri?.let {\r\n            val os = requireActivity().contentResolver.openOutputStream(it)\r\n            val `is` = FileInputStream(EasyDiaryDbHelper.getRealmPath())\r\n            IOUtils.copy(`is`, os)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "200",
  "ground_truth" : "            inputStream?.close()\r\n            outputStream.close()\r\n            requireActivity().refreshApp()\r\n        }\r\n    }",
  "context" : "private fun importRealmFileWithSAF(uri: Uri?) {\r\n        uri?.let {\r\n            val inputStream = requireActivity().contentResolver.openInputStream(it)\r\n            val outputStream = FileOutputStream(File(EasyDiaryDbHelper.getRealmPath()))\r\n            EasyDiaryDbHelper.closeInstance()\r\n            IOUtils.copy(inputStream, outputStream)\r\n            inputStream?.close()\r\n            outputStream.close()\r\n            requireActivity().refreshApp()\r\n        }\r\n    }",
  "start_lineno" : "190",
  "methodName" : "importRealmFileWithSAF",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/337",
  "prompt" : "import java.io.FileOutputStream\nimport java.io.File\nimport org.apache.commons.io.IOUtils\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun importRealmFileWithSAF(uri: Uri?) {\r\n        uri?.let {\r\n            val inputStream = requireActivity().contentResolver.openInputStream(it)\r\n            val outputStream = FileOutputStream(File(EasyDiaryDbHelper.getRealmPath()))\r\n            EasyDiaryDbHelper.closeInstance()\r\n            IOUtils.copy(inputStream, outputStream)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "301",
  "ground_truth" : "            EasyDiaryUtils.writeFileWithSAF(DateUtils.getCurrentDateTime(DateUtils.DATE_TIME_PATTERN_WITHOUT_DASH) + \".xls\", MIME_TYPE_XLS, mRequestWriteFileWithSAF)\r\n        }\r\n    }",
  "context" : "private fun createExportExcelUri() {\r\n        setupLauncher(REQUEST_CODE_SAF_WRITE_XLS) {\r\n            EasyDiaryUtils.writeFileWithSAF(DateUtils.getCurrentDateTime(DateUtils.DATE_TIME_PATTERN_WITHOUT_DASH) + \".xls\", MIME_TYPE_XLS, mRequestWriteFileWithSAF)\r\n        }\r\n    }",
  "start_lineno" : "297",
  "methodName" : "createExportExcelUri",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/338",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.net.Uri\nprivate fun createExportExcelUri() {\r\n        setupLauncher(REQUEST_CODE_SAF_WRITE_XLS) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "455",
  "ground_truth" : "            continuation.enqueue()\r\n        }\r\n    }",
  "context" : "private fun exportFullBackupFile(uri: Uri?) {\r\n        exportRealmFile(false)\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_BACKUP).build().apply {\r\n            continuation.enqueue()\r\n        }\r\n    }",
  "start_lineno" : "450",
  "methodName" : "exportFullBackupFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/339",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.workers.BackupOperations\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun exportFullBackupFile(uri: Uri?) {\r\n        exportRealmFile(false)\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_BACKUP).build().apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "461",
  "ground_truth" : "            continuation.enqueue()\r\n        }\r\n    }",
  "context" : "private fun importFullBackupFile(uri: Uri?) {\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_RECOVERY).build().apply {\r\n            continuation.enqueue()\r\n        }\r\n    }",
  "start_lineno" : "457",
  "methodName" : "importFullBackupFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/340",
  "prompt" : "import java.io.File\nimport me.blog.korn123.easydiary.workers.BackupOperations\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun importFullBackupFile(uri: Uri?) {\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_RECOVERY).build().apply {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsBackupLocalBinding\nvar mRequestExternalStoragePermissionLauncher ActivityResultLauncher<Array<String>>\nvar mRequestWriteFileWithSAF ActivityResultLauncher<Intent>\nvar mRequestReadFileWithSAF ActivityResultLauncher<Intent>\nvar mTaskFlag\nval mOnClickListener\nval SEQ\nval WRITE_DATE\nval TITLE\nval CONTENTS\nval ATTACH_PHOTO_NAME\nval ATTACH_PHOTO_SIZE\nval WEATHER\nval SYMBOL\nval IS_ALL_DAY\nval WRITE_TIME_MILLIS\nval MODE_BACKUP\nval MODE_RECOVERY",
  "app_type" : "notes",
  "end_lineno" : "466",
  "ground_truth" : "        mTaskFlag = taskFlag\r\n        callback()\r\n    }",
  "context" : "private fun setupLauncher(taskFlag: Int, callback: () -> Unit) {\r\n        mTaskFlag = taskFlag\r\n        callback()\r\n    }",
  "start_lineno" : "463",
  "methodName" : "setupLauncher",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt",
  "task_id" : "aaf-easydiary/341",
  "prompt" : "private fun setupLauncher(taskFlag: Int, callback: () -> Unit) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsLockBinding\nval mActivity Activity\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "        mBinding = FragmentSettingsLockBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentSettingsLockBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt",
  "task_id" : "aaf-easydiary/342",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsLockBinding\nval mActivity Activity\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onViewCreated",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt",
  "task_id" : "aaf-easydiary/343",
  "prompt" : "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsLockBinding\nval mActivity Activity\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt",
  "task_id" : "aaf-easydiary/344",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsLockBinding\nval mActivity Activity\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "            fingerprint.setOnClickListener(mOnClickListener)\r\n        }\r\n    }",
  "context" : "private fun bindEvent() {\r\n        mBinding.run {\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            fingerprint.setOnClickListener(mOnClickListener)\r\n        }\r\n    }",
  "start_lineno" : "110",
  "methodName" : "bindEvent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt",
  "task_id" : "aaf-easydiary/345",
  "prompt" : "private fun bindEvent() {\r\n        mBinding.run {\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsLockBinding\nval mActivity Activity\nval mOnClickListener",
  "app_type" : "notes",
  "end_lineno" : "122",
  "ground_truth" : "            fingerprintSwitcher.isChecked = mActivity.config.fingerprintLockEnable\r\n        }\r\n    }",
  "context" : "private fun initPreference() {\r\n        mBinding.run {\r\n            appLockSettingSwitcher.isChecked = mActivity.config.aafPinLockEnable\r\n            fingerprintSwitcher.isChecked = mActivity.config.fingerprintLockEnable\r\n        }\r\n    }",
  "start_lineno" : "117",
  "methodName" : "initPreference",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt",
  "task_id" : "aaf-easydiary/346",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport android.app.Activity\nprivate fun initPreference() {\r\n        mBinding.run {\r\n            appLockSettingSwitcher.isChecked = mActivity.config.aafPinLockEnable\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "        mBinding = FragmentSettingsScheduleBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        mBinding = FragmentSettingsScheduleBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/347",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "        super.onPause()\r\n        mActivity.changeDrawableIconColor(android.R.color.white, R.drawable.ic_delete_w)\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n        mActivity.changeDrawableIconColor(android.R.color.white, R.drawable.ic_delete_w)\r\n    }",
  "start_lineno" : "78",
  "methodName" : "onPause",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/348",
  "prompt" : "override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "87",
  "ground_truth" : "        updateFragmentUI(mBinding.root)\r\n        mActivity.updateDrawableColorInnerCardView(R.drawable.ic_delete_w)\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        updateFragmentUI(mBinding.root)\r\n        mActivity.updateDrawableColorInnerCardView(R.drawable.ic_delete_w)\r\n    }",
  "start_lineno" : "83",
  "methodName" : "onResume",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/349",
  "prompt" : "import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "236",
  "ground_truth" : "            addAll(EasyDiaryDbHelper.findAlarmAll())\r\n            mBinding.infoMessage.visibility = if (this.isEmpty()) View.VISIBLE else View.GONE\r\n        }\r\n        mAlarmAdapter.notifyDataSetChanged()\r\n    }",
  "context" : "private fun updateAlarmList() {\r\n        mAlarmList.run {\r\n            clear()\r\n            addAll(EasyDiaryDbHelper.findAlarmAll())\r\n            mBinding.infoMessage.visibility = if (this.isEmpty()) View.VISIBLE else View.GONE\r\n        }\r\n        mAlarmAdapter.notifyDataSetChanged()\r\n    }",
  "start_lineno" : "229",
  "methodName" : "updateAlarmList",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/350",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nprivate fun updateAlarmList() {\r\n        mAlarmList.run {\r\n            clear()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "243",
  "ground_truth" : "        drawable!!.applyColorFilter(mActivity.config.textColor)\r\n        return drawable\r\n    }",
  "context" : "private fun getProperDayDrawable(selected: Boolean): Drawable {\r\n        val drawableId = if (selected) R.drawable.bg_circle_filled else R.drawable.bg_circle_stroke\r\n        val drawable = ContextCompat.getDrawable(mActivity, drawableId)\r\n        drawable!!.applyColorFilter(mActivity.config.textColor)\r\n        return drawable\r\n    }",
  "start_lineno" : "238",
  "methodName" : "getProperDayDrawable",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/351",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.app.Activity\nprivate fun getProperDayDrawable(selected: Boolean): Drawable {\r\n        val drawableId = if (selected) R.drawable.bg_circle_filled else R.drawable.bg_circle_stroke\r\n        val drawable = ContextCompat.getDrawable(mActivity, drawableId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentSettingsScheduleBinding\nvar mAlarmAdapter AlarmAdapter\nvar mAlarmList ArrayList<Alarm>\nval mActivity Activity\nval ALARM_ID",
  "app_type" : "notes",
  "end_lineno" : "260",
  "ground_truth" : "            when (position == 0) {\r\n                true -> outRect.top = 0\r\n                false -> outRect.top = space\r\n            }\r\n        }",
  "context" : "override fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n            val position = parent.getChildAdapterPosition(view)\r\n            when (position == 0) {\r\n                true -> outRect.top = 0\r\n                false -> outRect.top = space\r\n            }\r\n        }",
  "start_lineno" : "254",
  "methodName" : "getItemOffsets",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt",
  "task_id" : "aaf-easydiary/352",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n            val position = parent.getChildAdapterPosition(view)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "        mBinding = FragmentStockLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\r\n    ): View {\r\n        mBinding = FragmentStockLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "110",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/353",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\r\n    ): View {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "192",
  "ground_truth" : "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "start_lineno" : "189",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/354",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "482",
  "ground_truth" : "        mCombineChart.highlightValue(null)\r\n        mStockLineDataSets.clear()\r\n        mStockBarDataSets.clear()\r\n        mKospiDataSets.clear()\r\n    }",
  "context" : "private fun clearChart() {\r\n        mCombineChart.clear()\r\n        mKospiChart.clear()\r\n        mCombineChart.highlightValue(null)\r\n        mStockLineDataSets.clear()\r\n        mStockBarDataSets.clear()\r\n        mKospiDataSets.clear()\r\n    }",
  "start_lineno" : "475",
  "methodName" : "clearChart",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/355",
  "prompt" : "private fun clearChart() {\r\n        mCombineChart.clear()\r\n        mKospiChart.clear()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "746",
  "ground_truth" : "            setCircleColor(requireContext().config.primaryColor)\r\n//            setCircleColorHole(requireContext().config.textColor)\r\n            setDrawCircles(mCheckedDrawCircle)\r\n        }\r\n    }",
  "context" : "private fun setDefaultLineChartColor(lineDataSet: LineDataSet) {\r\n        lineDataSet.run {\r\n            color = requireContext().config.primaryColor\r\n            highLightColor = requireContext().config.textColor\r\n            setCircleColor(requireContext().config.primaryColor)\r\n//            setCircleColorHole(requireContext().config.textColor)\r\n            setDrawCircles(mCheckedDrawCircle)\r\n        }\r\n    }",
  "start_lineno" : "738",
  "methodName" : "setDefaultLineChartColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/356",
  "prompt" : "import com.github.mikephil.charting.charts.LineChart\nimport android.graphics.Color\nimport android.content.Context\nprivate fun setDefaultLineChartColor(lineDataSet: LineDataSet) {\r\n        lineDataSet.run {\r\n            color = requireContext().config.primaryColor\r\n            highLightColor = requireContext().config.textColor\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "754",
  "ground_truth" : "            setDrawCircles(false)\r\n            enableDashedLine(0f, 1f, 0f)\r\n            highLightColor = requireContext().config.textColor\r\n        }\r\n    }",
  "context" : "private fun setGhostLineChartColor(lineDataSet: LineDataSet) {\r\n        lineDataSet.run {\r\n            setDrawCircles(false)\r\n            enableDashedLine(0f, 1f, 0f)\r\n            highLightColor = requireContext().config.textColor\r\n        }\r\n    }",
  "start_lineno" : "748",
  "methodName" : "setGhostLineChartColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/357",
  "prompt" : "import com.github.mikephil.charting.charts.LineChart\nimport android.graphics.Color\nprivate fun setGhostLineChartColor(lineDataSet: LineDataSet) {\r\n        lineDataSet.run {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "766",
  "ground_truth" : "            setDrawCircleHole(false)\r\n            setDrawCircles(false)\r\n            highLightColor = requireContext().config.textColor\r\n        }\r\n    }",
  "context" : "private fun setDefaultFillChartColor(lineDataSet: LineDataSet, color: Int) {\r\n        lineDataSet.run {\r\n            fillColor = color\r\n            this.color = color\r\n//            enableDashedLine(3f, 1f, 0f)\r\n            setDrawFilled(true)\r\n            setDrawCircleHole(false)\r\n            setDrawCircles(false)\r\n            highLightColor = requireContext().config.textColor\r\n        }\r\n    }",
  "start_lineno" : "756",
  "methodName" : "setDefaultFillChartColor",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/358",
  "prompt" : "import android.graphics.Color\nprivate fun setDefaultFillChartColor(lineDataSet: LineDataSet, color: Int) {\r\n        lineDataSet.run {\r\n            fillColor = color\r\n            this.color = color\r\n//            enableDashedLine(3f, 1f, 0f)\r\n            setDrawFilled(true)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "783",
  "ground_truth" : "            val timeMillis = if (mTimeMillisMap.size > value) mTimeMillisMap[value.toInt()] ?: 0 else 0\r\n            return xAxisTimeMillisToDate(timeMillis, dateFormat)\r\n        }",
  "context" : "override fun getFormattedValue(value: Float, axis: AxisBase): String {\r\n            val timeMillis = if (mTimeMillisMap.size > value) mTimeMillisMap[value.toInt()] ?: 0 else 0\r\n            return xAxisTimeMillisToDate(timeMillis, dateFormat)\r\n        }",
  "start_lineno" : "780",
  "methodName" : "getFormattedValue",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/359",
  "prompt" : "override fun getFormattedValue(value: Float, axis: AxisBase): String {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "821",
  "ground_truth" : "                if (mKospiChart.height.div(2) > posY) 20F else height.plus(20F).unaryMinus()\r\n            return MPPointF(pointX, pointY)\r\n        }",
  "context" : "override fun getOffsetForDrawingAtPoint(posX: Float, posY: Float): MPPointF {\r\n            val pointX = if (mKospiChart.width.div(2) > posX) 10F else width.plus(10F).unaryMinus()\r\n            val pointY =\r\n                if (mKospiChart.height.div(2) > posY) 20F else height.plus(20F).unaryMinus()\r\n            return MPPointF(pointX, pointY)\r\n        }",
  "start_lineno" : "816",
  "methodName" : "getOffsetForDrawingAtPoint",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/360",
  "prompt" : "import java.util\nimport com.github.mikephil.charting.utils.MPPointF\noverride fun getOffsetForDrawingAtPoint(posX: Float, posY: Float): MPPointF {\r\n            val pointX = if (mKospiChart.width.div(2) > posX) 10F else width.plus(10F).unaryMinus()\r\n            val pointY =\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mSDatePickerDialog DatePickerDialog\nvar mEDatePickerDialog DatePickerDialog\nval mStartCalendar\nval mEndCalendar\nvar mStartMillis\nvar mEndMillis\nvar mStartDateListener DatePickerDialog.OnDateSetListener\nvar mEndDateListener DatePickerDialog.OnDateSetListener\nvar mBinding FragmentStockLineChartBinding\nvar mCombineChart CombinedChart\nvar mKospiChart LineChart\nvar mKrPrincipalDataSet BarDataSet\nvar mKrEvaluatedPriceDataSet LineDataSet\nvar mKrTradingProfitDataSet LineDataSet\nvar mKrTradingProfitNegativeDataSet LineDataSet\nvar mKrTradingProfitPositiveDataSet LineDataSet\nvar mUsPrincipalDataSet BarDataSet\nvar mUsEvaluatedPriceDataSet LineDataSet\nvar mUsTradingProfitDataSet LineDataSet\nvar mUsTradingProfitNegativeDataSet LineDataSet\nvar mUsTradingProfitPositiveDataSet LineDataSet\nvar mTotalPrincipalDataSet BarDataSet\nvar mTotalEvaluatedPriceDataSet LineDataSet\nvar mTotalTradingProfitDataSet LineDataSet\nvar mTotalTradingProfitNegativeDataSet LineDataSet\nvar mTotalTradingProfitPositiveDataSet LineDataSet\nval mTimeMillisMap\nvar mCoroutineJob Job?\nval mStockLineDataSets\nval mStockBarDataSets\nval mKospiDataSets\nvar mTotalDataSetCnt\nval mColorPlus\nval mColorMinus\nvar mChartMode\nvar mCheckedSyncMarker\nvar mCheckedDrawCircle\nvar mCheckedDrawMarker\nvar mCheckedEvaluatePrice\nvar mCheckedPrincipalHighlight\nval CHART_TITLE\nval textLabelX TextView\nval textLabelY TextView\nval markerOffset\nvar stockDataType StockDataType?",
  "app_type" : "notes",
  "end_lineno" : "854",
  "ground_truth" : "                if (mKospiChart.height.div(2) > posY) markerOffset else height.plus(markerOffset).unaryMinus()\r\n            return MPPointF(pointX, pointY)\r\n        }",
  "context" : "override fun getOffsetForDrawingAtPoint(posX: Float, posY: Float): MPPointF {\r\n            val pointX = if (mKospiChart.width.div(2) > posX) markerOffset else width.plus(markerOffset).unaryMinus()\r\n            val pointY =\r\n                if (mKospiChart.height.div(2) > posY) markerOffset else height.plus(markerOffset).unaryMinus()\r\n            return MPPointF(pointX, pointY)\r\n        }",
  "start_lineno" : "849",
  "methodName" : "getOffsetForDrawingAtPoint",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt",
  "task_id" : "aaf-easydiary/361",
  "prompt" : "import java.util\nimport com.github.mikephil.charting.utils.MPPointF\noverride fun getOffsetForDrawingAtPoint(posX: Float, posY: Float): MPPointF {\r\n            val pointX = if (mKospiChart.width.div(2) > posX) markerOffset else width.plus(markerOffset).unaryMinus()\r\n            val pointY =\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mSymbolMap HashMap<Int, String>\nval mSequences\nval mTypeface Typeface\nvar mCoroutineJob Job?",
  "app_type" : "notes",
  "end_lineno" : "195",
  "ground_truth" : "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "start_lineno" : "192",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolBarChartFragment.kt",
  "task_id" : "aaf-easydiary/362",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mSymbolMap HashMap<Int, String>\nval mSequences\nval mTypeface Typeface\nvar mCoroutineJob Job?",
  "app_type" : "notes",
  "end_lineno" : "203",
  "ground_truth" : "                else -> \"None\"\r\n            }\r\n        }",
  "context" : "override fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r\n                else -> \"None\"\r\n            }\r\n        }",
  "start_lineno" : "198",
  "methodName" : "getFormattedValue",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolBarChartFragment.kt",
  "task_id" : "aaf-easydiary/363",
  "prompt" : "import com.github.mikephil.charting.components.AxisBase\noverride fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mSymbolMap HashMap<Int, String>\nvar mCoroutineJob Job?\nval mTypeface Typeface\nval mSequences",
  "app_type" : "notes",
  "end_lineno" : "194",
  "ground_truth" : "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "start_lineno" : "191",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolHorizontalBarChartFragment.kt",
  "task_id" : "aaf-easydiary/364",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mSymbolMap HashMap<Int, String>\nvar mCoroutineJob Job?\nval mTypeface Typeface\nval mSequences",
  "app_type" : "notes",
  "end_lineno" : "202",
  "ground_truth" : "                else -> \"None\"\r\n            }\r\n        }",
  "context" : "override fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r\n                else -> \"None\"\r\n            }\r\n        }",
  "start_lineno" : "197",
  "methodName" : "getFormattedValue",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolHorizontalBarChartFragment.kt",
  "task_id" : "aaf-easydiary/365",
  "prompt" : "import com.github.mikephil.charting.components.AxisBase\noverride fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "        mBinding = FragmentWeightLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "context" : "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        mBinding = FragmentWeightLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onCreateView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/366",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "326",
  "ground_truth" : "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "start_lineno" : "323",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/367",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "373",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"앞 ${averageInfo.joinToString(\",\")}\")\r\n    }",
  "context" : "private fun fillValueForward(averageInfo: ArrayList<Float>) {\r\n        Log.i(AAF_TEST, \"원본 ${averageInfo.joinToString(\",\")}\")\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                up@ for (seq in index..averageInfo.size.minus(1)) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@up\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"앞 ${averageInfo.joinToString(\",\")}\")\r\n    }",
  "start_lineno" : "360",
  "methodName" : "fillValueForward",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/368",
  "prompt" : "import me.blog.korn123.easydiary.helper.AAF_TEST\nimport android.util.Log\nprivate fun fillValueForward(averageInfo: ArrayList<Float>) {\r\n        Log.i(AAF_TEST, \"원본 ${averageInfo.joinToString(\",\")}\")\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                up@ for (seq in index..averageInfo.size.minus(1)) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@up\r\n                    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "387",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"뒤 ${averageInfo.joinToString(\",\")}\")\r\n    }",
  "context" : "private fun fillValueBackward(averageInfo: ArrayList<Float>) {\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                down@ for (seq in index.minus(1) downTo 0) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@down\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"뒤 ${averageInfo.joinToString(\",\")}\")\r\n    }",
  "start_lineno" : "375",
  "methodName" : "fillValueBackward",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/369",
  "prompt" : "private fun fillValueBackward(averageInfo: ArrayList<Float>) {\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                down@ for (seq in index.minus(1) downTo 0) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@down\r\n                    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "406",
  "ground_truth" : "                }\r\n\r\n            }\r\n            return label\r\n        }",
  "context" : "override fun getFormattedValue(value: Float, axis: AxisBase): String {\r\n            val label = when (mChartMode == \"A\") {\r\n                true -> {\r\n                    val timeMillis: Long = mTimeMillisMap[value.toInt()] ?: 0\r\n                    xAxisTimeMillisToDate(timeMillis)\r\n                }\r\n                false -> {\r\n                    value.toInt().toString().padStart(2, '0')\r\n                }\r\n\r\n            }\r\n            return label\r\n        }",
  "start_lineno" : "394",
  "methodName" : "getFormattedValue",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/370",
  "prompt" : "override fun getFormattedValue(value: Float, axis: AxisBase): String {\r\n            val label = when (mChartMode == \"A\") {\r\n                true -> {\r\n                    val timeMillis: Long = mTimeMillisMap[value.toInt()] ?: 0\r\n                    xAxisTimeMillisToDate(timeMillis)\r\n                }\r\n                false -> {\r\n                    value.toInt().toString().padStart(2, '0')\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBinding FragmentWeightLineChartBinding\nvar mLineChart LineChart\nval mTimeMillisMap\nvar mCoroutineJob Job?\nvar mChartMode\nval mDataSets\nval CHART_TITLE\nval tvContent TextView",
  "app_type" : "notes",
  "end_lineno" : "447",
  "ground_truth" : "                    typeface = FontUtils.getCommonTypeface(context)\r\n                }\r\n                super.refreshContent(entry, highlight)\r\n            }\r\n        }",
  "context" : "override fun refreshContent(e: Entry?, highlight: Highlight?) {\r\n            e?.let { entry ->\r\n\r\n                tvContent.run {\r\n                    text = \"${xAxisValueFormatter.getFormattedValue(entry.x, mLineChart.xAxis)}: ${entry.y}kg\"\r\n                    typeface = FontUtils.getCommonTypeface(context)\r\n                }\r\n                super.refreshContent(entry, highlight)\r\n            }\r\n        }",
  "start_lineno" : "438",
  "methodName" : "refreshContent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt",
  "task_id" : "aaf-easydiary/371",
  "prompt" : "import com.github.mikephil.charting.highlight.Highlight\nimport com.github.mikephil.charting.data.Entry\nimport com.github.mikephil.charting.charts.LineChart\noverride fun refreshContent(e: Entry?, highlight: Highlight?) {\r\n            e?.let { entry ->\r\n\r\n                tvContent.run {\r\n                    text = \"${xAxisValueFormatter.getFormattedValue(entry.x, mLineChart.xAxis)}: ${entry.y}kg\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mCoroutineJob Job?\nval CHART_TITLE",
  "app_type" : "notes",
  "end_lineno" : "181",
  "ground_truth" : "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "context" : "override fun onDestroy() {\r\n        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }",
  "start_lineno" : "178",
  "methodName" : "onDestroy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WritingBarChartFragment.kt",
  "task_id" : "aaf-easydiary/372",
  "prompt" : "override fun onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mCoroutineJob Job?\nval CHART_TITLE",
  "app_type" : "notes",
  "end_lineno" : "218",
  "ground_truth" : "        in 13..15 -> 5\r\n        in 16..18 -> 6\r\n        in 19..21 -> 7\r\n        else -> 8\r\n    }",
  "context" : "private fun hourToItemNumber(hour: Int): Int = when (hour) {\r\n        in 1..3 -> 1\r\n        in 4..6 -> 2\r\n        in 7..9 -> 3\r\n        in 10..12 -> 4\r\n        in 13..15 -> 5\r\n        in 16..18 -> 6\r\n        in 19..21 -> 7\r\n        else -> 8\r\n    }",
  "start_lineno" : "209",
  "methodName" : "hourToItemNumber",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WritingBarChartFragment.kt",
  "task_id" : "aaf-easydiary/373",
  "prompt" : "private fun hourToItemNumber(hour: Int): Int = when (hour) {\r\n        in 1..3 -> 1\r\n        in 4..6 -> 2\r\n        in 7..9 -> 3\r\n        in 10..12 -> 4\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBarChart BarChart\nvar mChartTitle FixedTextView\nvar mBarChartProgressBar ContentLoadingProgressBar\nvar mCoroutineJob Job?\nval CHART_TITLE",
  "app_type" : "notes",
  "end_lineno" : "234",
  "ground_truth" : "            5 -> context!!.getString(R.string.range_e)\r\n            6 -> context!!.getString(R.string.range_f)\r\n            7 -> context!!.getString(R.string.range_g)\r\n            else -> context!!.getString(R.string.range_h)\r\n        }",
  "context" : "override fun getFormattedValue(value: Float, axis: AxisBase?): String = when (value.toInt()) {\r\n            1 -> context!!.getString(R.string.range_a)\r\n            2 -> context!!.getString(R.string.range_b)\r\n            3 -> context!!.getString(R.string.range_c)\r\n            4 -> context!!.getString(R.string.range_d)\r\n            5 -> context!!.getString(R.string.range_e)\r\n            6 -> context!!.getString(R.string.range_f)\r\n            7 -> context!!.getString(R.string.range_g)\r\n            else -> context!!.getString(R.string.range_h)\r\n        }",
  "start_lineno" : "225",
  "methodName" : "getFormattedValue",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WritingBarChartFragment.kt",
  "task_id" : "aaf-easydiary/374",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport com.github.mikephil.charting.components.AxisBase\noverride fun getFormattedValue(value: Float, axis: AxisBase?): String = when (value.toInt()) {\r\n            1 -> context!!.getString(R.string.range_a)\r\n            2 -> context!!.getString(R.string.range_b)\r\n            3 -> context!!.getString(R.string.range_c)\r\n            4 -> context!!.getString(R.string.range_d)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "                }\r\n                Alarm.WORK_MODE_DIARY_WRITING -> openNotification(alarm)\r\n            }\r\n        }\r\n    }",
  "context" : "open fun executeWork(alarm: Alarm) {\r\n        context.run {\r\n            when (alarm.workMode) {\r\n                Alarm.WORK_MODE_DIARY_BACKUP_LOCAL -> {\r\n                    exportRealmFile()\r\n                    openNotification(alarm)\r\n                }\r\n                Alarm.WORK_MODE_DIARY_WRITING -> openNotification(alarm)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "24",
  "methodName" : "executeWork",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\BaseAlarmWorkExecutor.kt",
  "task_id" : "aaf-easydiary/375",
  "prompt" : "import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.extensions.openNotification\nimport me.blog.korn123.easydiary.extensions.exportRealmFile\nopen fun executeWork(alarm: Alarm) {\r\n        context.run {\r\n            when (alarm.workMode) {\r\n                Alarm.WORK_MODE_DIARY_BACKUP_LOCAL -> {\r\n                    exportRealmFile()\r\n                    openNotification(alarm)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "13",
  "ground_truth" : "//        imageView.setImageResource(FlavorUtils.sequenceToSymbolResourceId(symbolSequence))\r\n        FlavorUtils.initWeatherView(imageView.context, imageView, symbolSequence)\r\n    }",
  "context" : " @BindingAdapter(\"symbolSequence\")\r\n    @JvmStatic\r\n    fun bindSrcCompat(imageView: ImageView, symbolSequence: Int) {\r\n//        imageView.setImageResource(FlavorUtils.sequenceToSymbolResourceId(symbolSequence))\r\n        FlavorUtils.initWeatherView(imageView.context, imageView, symbolSequence)\r\n    }",
  "start_lineno" : "8",
  "methodName" : "bindSrcCompat",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\BindingAdapter.kt",
  "task_id" : "aaf-easydiary/376",
  "prompt" : "import androidx.databinding.BindingAdapter\nimport android.widget.ImageView\n @BindingAdapter(\"symbolSequence\")\r\n    @JvmStatic\r\n    fun bindSrcCompat(imageView: ImageView, symbolSequence: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var context Context?",
  "app_type" : "notes",
  "end_lineno" : "16",
  "ground_truth" : "        Realm.init(this)\r\n        context = this\r\n    }",
  "context" : "override fun onCreate() {\r\n        super.onCreate()\r\n        Realm.init(this)\r\n        context = this\r\n    }",
  "start_lineno" : "12",
  "methodName" : "onCreate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryApplication.kt",
  "task_id" : "aaf-easydiary/377",
  "prompt" : "override fun onCreate() {\r\n        super.onCreate()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "        }\r\n        return mRealmInstance!!\r\n    }",
  "context" : "private fun getInstance(): Realm {\r\n        if (mRealmInstance == null || mRealmInstance?.isClosed == true) {\r\n            mRealmInstance = Realm.getInstance(mDiaryConfig)\r\n        }\r\n        return mRealmInstance!!\r\n    }",
  "start_lineno" : "28",
  "methodName" : "getInstance",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/378",
  "prompt" : "private fun getInstance(): Realm {\r\n        if (mRealmInstance == null || mRealmInstance?.isClosed == true) {\r\n            mRealmInstance = Realm.getInstance(mDiaryConfig)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "            realm.where(Diary::class.java).equalTo(\"isSelected\", true).findAll().forEach { diaryDto ->\r\n                diaryDto.isSelected = false\r\n            }\r\n        }\r\n    }",
  "context" : "fun clearSelectedStatus() {\r\n        getInstance().executeTransaction { realm ->\r\n            realm.where(Diary::class.java).equalTo(\"isSelected\", true).findAll().forEach { diaryDto ->\r\n                diaryDto.isSelected = false\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "53",
  "methodName" : "clearSelectedStatus",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/379",
  "prompt" : "import io.realm\nfun clearSelectedStatus() {\r\n        getInstance().executeTransaction { realm ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "84",
  "ground_truth" : "            }\r\n            diary.sequence = sequence\r\n            realm.insert(diary)\r\n        }\r\n    }",
  "context" : "fun insertDiary(diary: Diary) {\r\n        getInstance().executeTransaction { realm ->\r\n            var sequence = 1\r\n            if (realm.where(Diary::class.java).count() > 0L) {\r\n                val number = realm.where(Diary::class.java).max(\"sequence\")\r\n                number?.let {\r\n                    sequence = it.toInt().plus(1)\r\n                }\r\n            }\r\n            diary.sequence = sequence\r\n            realm.insert(diary)\r\n        }\r\n    }",
  "start_lineno" : "72",
  "methodName" : "insertDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/380",
  "prompt" : "import io.realm\nfun insertDiary(diary: Diary) {\r\n        getInstance().executeTransaction { realm ->\r\n            var sequence = 1\r\n            if (realm.where(Diary::class.java).count() > 0L) {\r\n                val number = realm.where(Diary::class.java).max(\"sequence\")\r\n                number?.let {\r\n                    sequence = it.toInt().plus(1)\r\n                }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "96",
  "ground_truth" : "                }\r\n            }\r\n            realm.insert(diaryTemp)\r\n        }\r\n    }",
  "context" : "fun insertTemporaryDiary(diaryTemp: Diary) {\r\n        deleteTemporaryDiaryBy(diaryTemp.originSequence)\r\n        getInstance().executeTransaction { realm ->\r\n            if (diaryTemp.sequence == BaseDiaryEditingActivity.DIARY_SEQUENCE_INIT) {\r\n                realm.where(Diary::class.java).max(\"sequence\")?.let {\r\n                    diaryTemp.sequence = it.toInt().plus(1)\r\n                }\r\n            }\r\n            realm.insert(diaryTemp)\r\n        }\r\n    }",
  "start_lineno" : "86",
  "methodName" : "insertTemporaryDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/381",
  "prompt" : "import me.blog.korn123.easydiary.activities.BaseDiaryEditingActivity\nimport io.realm\nfun insertTemporaryDiary(diaryTemp: Diary) {\r\n        deleteTemporaryDiaryBy(diaryTemp.originSequence)\r\n        getInstance().executeTransaction { realm ->\r\n            if (diaryTemp.sequence == BaseDiaryEditingActivity.DIARY_SEQUENCE_INIT) {\r\n                realm.where(Diary::class.java).max(\"sequence\")?.let {\r\n                    diaryTemp.sequence = it.toInt().plus(1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "            updateDateString()\r\n            originSequence = DIARY_ORIGIN_SEQUENCE_INIT\r\n            insertDiary(this)\r\n        }\r\n    }",
  "context" : "fun duplicateDiaryBy(diary: Diary) {\r\n        getInstance().copyFromRealm(diary).run {\r\n            currentTimeMillis = System.currentTimeMillis()\r\n            updateDateString()\r\n            originSequence = DIARY_ORIGIN_SEQUENCE_INIT\r\n            insertDiary(this)\r\n        }\r\n    }",
  "start_lineno" : "98",
  "methodName" : "duplicateDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/382",
  "prompt" : "fun duplicateDiaryBy(diary: Diary) {\r\n        getInstance().copyFromRealm(diary).run {\r\n            currentTimeMillis = System.currentTimeMillis()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "117",
  "ground_truth" : "        val firstItemTimeMillis = (realm.where(Diary::class.java)\r\n                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .min(\"currentTimeMillis\") ?: 0L).toLong()\r\n        return realm.where(Diary::class.java).equalTo(\"currentTimeMillis\", firstItemTimeMillis).findFirst()\r\n    }",
  "context" : "fun findFirstDiary(): Diary? {\r\n        val realm = getInstance()\r\n        val firstItemTimeMillis = (realm.where(Diary::class.java)\r\n                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .min(\"currentTimeMillis\") ?: 0L).toLong()\r\n        return realm.where(Diary::class.java).equalTo(\"currentTimeMillis\", firstItemTimeMillis).findFirst()\r\n    }",
  "start_lineno" : "111",
  "methodName" : "findFirstDiary",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/383",
  "prompt" : "import io.realm\nfun findFirstDiary(): Diary? {\r\n        val realm = getInstance()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "189",
  "ground_truth" : "        return realmInstance.where(Diary::class.java)\r\n                .equalTo(\"sequence\", sequence).findFirst()\r\n    }",
  "context" : "fun findDiaryBy(sequence: Int, realmInstance: Realm = getInstance()): Diary? {\r\n        return realmInstance.where(Diary::class.java)\r\n                .equalTo(\"sequence\", sequence).findFirst()\r\n    }",
  "start_lineno" : "186",
  "methodName" : "findDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/384",
  "prompt" : "import io.realm\nfun findDiaryBy(sequence: Int, realmInstance: Realm = getInstance()): Diary? {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "201",
  "ground_truth" : "            }\r\n        }\r\n\r\n        return diary\r\n    }",
  "context" : "fun findDiaryBy(photoUri: String, realmInstance: Realm = getInstance()): Diary? {\r\n        val result = realmInstance.where(PhotoUri::class.java).contains(\"photoUri\", photoUri).findFirst()?.diary\r\n        var diary: Diary? = null\r\n        result?.let {\r\n            if (it.isValid && it.isNotEmpty()) {\r\n                diary = it.first()\r\n            }\r\n        }\r\n\r\n        return diary\r\n    }",
  "start_lineno" : "191",
  "methodName" : "findDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/385",
  "prompt" : "import io.realm\nfun findDiaryBy(photoUri: String, realmInstance: Realm = getInstance()): Diary? {\r\n        val result = realmInstance.where(PhotoUri::class.java).contains(\"photoUri\", photoUri).findFirst()?.diary\r\n        var diary: Diary? = null\r\n        result?.let {\r\n            if (it.isValid && it.isNotEmpty()) {\r\n                diary = it.first()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "209",
  "ground_truth" : "                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .equalTo(\"dateString\", dateString)\r\n                .findAll()\r\n                .sort(\"currentTimeMillis\", sort).toList()\r\n    }",
  "context" : "fun findDiaryByDateString(dateString: String?, sort: Sort = Sort.DESCENDING): List<Diary> {\r\n        return getInstance().where(Diary::class.java)\r\n                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .equalTo(\"dateString\", dateString)\r\n                .findAll()\r\n                .sort(\"currentTimeMillis\", sort).toList()\r\n    }",
  "start_lineno" : "203",
  "methodName" : "findDiaryByDateString",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/386",
  "prompt" : "fun findDiaryByDateString(dateString: String?, sort: Sort = Sort.DESCENDING): List<Diary> {\r\n        return getInstance().where(Diary::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "227",
  "ground_truth" : "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "context" : "fun deleteDiaryBy(sequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()?.let {\r\n                beginTransaction()\r\n                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "219",
  "methodName" : "deleteDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/387",
  "prompt" : "import io.realm\nfun deleteDiaryBy(sequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()?.let {\r\n                beginTransaction()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "237",
  "ground_truth" : "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "context" : "fun deleteTemporaryDiaryBy(originSequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"originSequence\", originSequence).findFirst()?.let {\r\n                beginTransaction()\r\n                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "229",
  "methodName" : "deleteTemporaryDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/388",
  "prompt" : "import io.realm\nfun deleteTemporaryDiaryBy(originSequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"originSequence\", originSequence).findFirst()?.let {\r\n                beginTransaction()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "243",
  "ground_truth" : "                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .count()\r\n    }",
  "context" : "fun countDiaryAll(): Long {\r\n        return getInstance().where(Diary::class.java)\r\n                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .count()\r\n    }",
  "start_lineno" : "239",
  "methodName" : "countDiaryAll",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/389",
  "prompt" : "fun countDiaryAll(): Long {\r\n        return getInstance().where(Diary::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "248",
  "ground_truth" : "            .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n            .equalTo(\"dateString\", dateString)\r\n            .count().toInt()",
  "context" : "fun countDiaryBy(dateString: String): Int = getInstance().where(Diary::class.java)\r\n            .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n            .equalTo(\"dateString\", dateString)\r\n            .count().toInt()",
  "start_lineno" : "245",
  "methodName" : "countDiaryBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/390",
  "prompt" : "fun countDiaryBy(dateString: String): Int = getInstance().where(Diary::class.java)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "307",
  "ground_truth" : "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "context" : "fun deleteAlarmBy(sequence: Int) {\r\n        findAlarmBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r\n                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "299",
  "methodName" : "deleteAlarmBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/391",
  "prompt" : "fun deleteAlarmBy(sequence: Int) {\r\n        findAlarmBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "324",
  "ground_truth" : "            val sequence = realm.where(ActionLog::class.java).max(\"sequence\") ?: 0\r\n            actionLog.sequence = sequence.toInt().plus(1)\r\n            realm.insert(actionLog)\r\n        }\r\n    }",
  "context" : "private fun insertActionLog(actionLog: ActionLog, realmInstance: Realm = getInstance()) {\r\n        realmInstance.executeTransaction { realm ->\r\n            val sequence = realm.where(ActionLog::class.java).max(\"sequence\") ?: 0\r\n            actionLog.sequence = sequence.toInt().plus(1)\r\n            realm.insert(actionLog)\r\n        }\r\n    }",
  "start_lineno" : "318",
  "methodName" : "insertActionLog",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/392",
  "prompt" : "import io.realm\nprivate fun insertActionLog(actionLog: ActionLog, realmInstance: Realm = getInstance()) {\r\n        realmInstance.executeTransaction { realm ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "339",
  "ground_truth" : "        val actionLog = ActionLog(className, signature, \"INFO\", Thread.currentThread().id.toString())\r\n        insertActionLog(actionLog, realmInstance)\r\n    }",
  "context" : "fun insertCurrentThreadInfo(className: String, signature: String, realmInstance: Realm = getInstance()) {\r\n        val actionLog = ActionLog(className, signature, \"INFO\", Thread.currentThread().id.toString())\r\n        insertActionLog(actionLog, realmInstance)\r\n    }",
  "start_lineno" : "336",
  "methodName" : "insertCurrentThreadInfo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/393",
  "prompt" : "import io.realm\nfun insertCurrentThreadInfo(className: String, signature: String, realmInstance: Realm = getInstance()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "345",
  "ground_truth" : "            insertActionLog(actionLog)\r\n        }\r\n    }",
  "context" : "fun insertActionLog(actionLog: ActionLog, context: Context) {\r\n        if (context.config.enableDebugMode) {\r\n            insertActionLog(actionLog)\r\n        }\r\n    }",
  "start_lineno" : "341",
  "methodName" : "insertActionLog",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/394",
  "prompt" : "import me.blog.korn123.easydiary.extensions.config\nimport android.content.Context\nfun insertActionLog(actionLog: ActionLog, context: Context) {\r\n        if (context.config.enableDebugMode) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "353",
  "ground_truth" : "            realm.where(ActionLog::class.java).findAll().deleteAllFromRealm()\r\n        }\r\n    }",
  "context" : "fun deleteActionLogAll() {\r\n        getInstance().executeTransaction { realm ->\r\n            realm.where(ActionLog::class.java).findAll().deleteAllFromRealm()\r\n        }\r\n    }",
  "start_lineno" : "349",
  "methodName" : "deleteActionLogAll",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/395",
  "prompt" : "import io.realm\nfun deleteActionLogAll() {\r\n        getInstance().executeTransaction { realm ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "381",
  "ground_truth" : "            val sequence = getInstance().where(DDay::class.java).max(\"sequence\") ?: 0\r\n            dDay.sequence = sequence.toInt().plus(1)\r\n        }\r\n        getInstance().executeTransaction { realm -> realm.insertOrUpdate(dDay) }\r\n    }",
  "context" : "fun updateDDayBy(dDay: DDay) {\r\n\r\n        if (dDay.sequence == -1) {\r\n            val sequence = getInstance().where(DDay::class.java).max(\"sequence\") ?: 0\r\n            dDay.sequence = sequence.toInt().plus(1)\r\n        }\r\n        getInstance().executeTransaction { realm -> realm.insertOrUpdate(dDay) }\r\n    }",
  "start_lineno" : "374",
  "methodName" : "updateDDayBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/396",
  "prompt" : "fun updateDDayBy(dDay: DDay) {\r\n\r\n        if (dDay.sequence == -1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?",
  "app_type" : "notes",
  "end_lineno" : "391",
  "ground_truth" : "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "context" : "fun deleteDDayBy(sequence: Int) {\r\n        findDDayBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r\n                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "383",
  "methodName" : "deleteDDayBy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt",
  "task_id" : "aaf-easydiary/397",
  "prompt" : "fun deleteDDayBy(sequence: Int) {\r\n        findDDayBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "13",
  "ground_truth" : "        val isTopColumn = position < callback.invoke()\r\n        val isStartColumn = position % callback.invoke() == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r\n        outRect.left = if (isStartColumn) 0 else space\r\n    }",
  "context" : "override fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val isTopColumn = position < callback.invoke()\r\n        val isStartColumn = position % callback.invoke() == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r\n        outRect.left = if (isStartColumn) 0 else space\r\n    }",
  "start_lineno" : "7",
  "methodName" : "getItemOffsets",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\GridItemDecoration.kt",
  "task_id" : "aaf-easydiary/398",
  "prompt" : "import android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val position = parent.getChildAdapterPosition(view)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "        outRect.left = if (isStartColumn) 0 else space\r\n//        parent.adapter?.run {\r\n//            outRect.bottom = if (position == itemCount.minus(1)) activity.dpToPixel(80F) else 0\r\n//        }\r\n    }",
  "context" : "override fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val spanCount = activity.diaryMainSpanCount()\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val isTopColumn = position < spanCount\r\n        val isStartColumn = position % spanCount == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r\n        outRect.left = if (isStartColumn) 0 else space\r\n//        parent.adapter?.run {\r\n//            outRect.bottom = if (position == itemCount.minus(1)) activity.dpToPixel(80F) else 0\r\n//        }\r\n    }",
  "start_lineno" : "10",
  "methodName" : "getItemOffsets",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\GridItemDecorationDiaryMain.kt",
  "task_id" : "aaf-easydiary/399",
  "prompt" : "import me.blog.korn123.easydiary.extensions.diaryMainSpanCount\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val spanCount = activity.diaryMainSpanCount()\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val isTopColumn = position < spanCount\r\n        val isStartColumn = position % spanCount == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "16",
  "ground_truth" : "        val isTopColumn = position < spanCount\r\n        val isStartColumn = position % spanCount == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r\n        outRect.left = if (isStartColumn) 0 else space\r\n    }",
  "context" : "override fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val spanCount = activity.postcardViewerSpanCount()\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val isTopColumn = position < spanCount\r\n        val isStartColumn = position % spanCount == 0\r\n        outRect.top = if (isTopColumn) 0 else space\r\n        outRect.left = if (isStartColumn) 0 else space\r\n    }",
  "start_lineno" : "9",
  "methodName" : "getItemOffsets",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\GridItemDecorationPostcardViewer.kt",
  "task_id" : "aaf-easydiary/400",
  "prompt" : "import me.blog.korn123.easydiary.extensions.postcardViewerSpanCount\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State) {\r\n        val spanCount = activity.postcardViewerSpanCount()\r\n        val position = parent.getChildAdapterPosition(view)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DEFAULT\nval BOTTOM_TO_TOP\nval TOP_TO_BOTTOM",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "                    DEFAULT -> overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n                    BOTTOM_TO_TOP -> overridePendingTransition(R.anim.slide_in_up, R.anim.stay)\r\n                }\r\n            }\r\n        }",
  "context" : "fun startActivityWithTransition(activity: Activity?, intent: Intent, type: Int = DEFAULT) {\r\n            activity?.run {\r\n                startActivity(intent)\r\n                when (type) {\r\n                    DEFAULT -> overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n                    BOTTOM_TO_TOP -> overridePendingTransition(R.anim.slide_in_up, R.anim.stay)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "19",
  "methodName" : "startActivityWithTransition",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\TransitionHelper.kt",
  "task_id" : "aaf-easydiary/401",
  "prompt" : "import android.content.Intent\nimport android.app.Activity\nfun startActivityWithTransition(activity: Activity?, intent: Intent, type: Int = DEFAULT) {\r\n            activity?.run {\r\n                startActivity(intent)\r\n                when (type) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DEFAULT\nval BOTTOM_TO_TOP\nval TOP_TO_BOTTOM",
  "app_type" : "notes",
  "end_lineno" : "37",
  "ground_truth" : "                    DEFAULT -> overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n                    TOP_TO_BOTTOM -> overridePendingTransition(R.anim.stay, R.anim.slide_in_down)\r\n                }\r\n            }\r\n        }",
  "context" : "fun finishActivityWithTransition(activity: Activity?, type: Int = DEFAULT) {\r\n            activity?.run {\r\n                finish()\r\n                when (type) {\r\n                    DEFAULT -> overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n                    TOP_TO_BOTTOM -> overridePendingTransition(R.anim.stay, R.anim.slide_in_down)\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "29",
  "methodName" : "finishActivityWithTransition",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\TransitionHelper.kt",
  "task_id" : "aaf-easydiary/402",
  "prompt" : "import android.app.Activity\nfun finishActivityWithTransition(activity: Activity?, type: Int = DEFAULT) {\r\n            activity?.run {\r\n                finish()\r\n                when (type) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBuilder NotificationCompat.Builder\nval mFileNames\nvar mRootDirectoryName String?\nvar isOnProgress",
  "app_type" : "notes",
  "end_lineno" : "116",
  "ground_truth" : "        this.mRootDirectoryName = targetDirectoryName\r\n        determineFiles(targetDirectoryName, null)\r\n    }",
  "context" : "fun determineFiles(targetDirectoryName: String) {\r\n        this.mRootDirectoryName = targetDirectoryName\r\n        determineFiles(targetDirectoryName, null)\r\n    }",
  "start_lineno" : "113",
  "methodName" : "determineFiles",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt",
  "task_id" : "aaf-easydiary/403",
  "prompt" : "fun determineFiles(targetDirectoryName: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBuilder NotificationCompat.Builder\nval mFileNames\nvar mRootDirectoryName String?\nvar isOnProgress",
  "app_type" : "notes",
  "end_lineno" : "177",
  "ground_truth" : "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return count\r\n    }",
  "context" : "private fun countFileEntry(uri: Uri?): Int {\r\n        val uriStream = context.contentResolver.openInputStream(uri!!)\r\n        var count = 0\r\n        try {\r\n            val zipInputStream = ZipInputStream(uriStream)\r\n            while (zipInputStream.nextEntry != null && isOnProgress) {\r\n                zipInputStream.closeEntry()\r\n                count++\r\n            }\r\n            zipInputStream.close()\r\n            uriStream?.close()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return count\r\n    }",
  "start_lineno" : "162",
  "methodName" : "countFileEntry",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt",
  "task_id" : "aaf-easydiary/404",
  "prompt" : "import java.util.zip.ZipInputStream\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nprivate fun countFileEntry(uri: Uri?): Int {\r\n        val uriStream = context.contentResolver.openInputStream(uri!!)\r\n        var count = 0\r\n        try {\r\n            val zipInputStream = ZipInputStream(uriStream)\r\n            while (zipInputStream.nextEntry != null && isOnProgress) {\r\n                zipInputStream.closeEntry()\r\n                count++\r\n            }\r\n            zipInputStream.close()\r\n            uriStream?.close()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mBuilder NotificationCompat.Builder\nval mFileNames\nvar mRootDirectoryName String?\nvar isOnProgress",
  "app_type" : "notes",
  "end_lineno" : "263",
  "ground_truth" : "            Log.i(\"aaf\", fileName)\r\n        }\r\n    }",
  "context" : "fun printFileNames() {\r\n        for (fileName in mFileNames) {\r\n            Log.i(\"aaf\", fileName)\r\n        }\r\n    }",
  "start_lineno" : "259",
  "methodName" : "printFileNames",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt",
  "task_id" : "aaf-easydiary/405",
  "prompt" : "fun printFileNames() {\r\n        for (fileName in mFileNames) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sourceDir Path\nvar zipOutputStream ZipOutputStream",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "            System.err.println(ex)\r\n        }\r\n\r\n        return FileVisitResult.CONTINUE\r\n    }",
  "context" : "override fun visitFile(file: Path, attributes: BasicFileAttributes): FileVisitResult {\r\n        try {\r\n            val targetFile = sourceDir.relativize(file)\r\n            zipOutputStream.putNextEntry(ZipEntry(targetFile.toString()))\r\n            val bytes = Files.readAllBytes(file)\r\n            zipOutputStream.write(bytes, 0, bytes.size)\r\n            zipOutputStream.closeEntry()\r\n\r\n        } catch (ex: IOException) {\r\n            System.err.println(ex)\r\n        }\r\n\r\n        return FileVisitResult.CONTINUE\r\n    }",
  "start_lineno" : "28",
  "methodName" : "visitFile",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelperWithVisitor.kt",
  "task_id" : "aaf-easydiary/406",
  "prompt" : "import java.util.zip.ZipEntry\nimport java.nio.file.attribute.BasicFileAttributes\nimport java.nio.file.Path\nimport java.nio.file.Files\nimport java.nio.file.FileVisitResult\nimport java.io\noverride fun visitFile(file: Path, attributes: BasicFileAttributes): FileVisitResult {\r\n        try {\r\n            val targetFile = sourceDir.relativize(file)\r\n            zipOutputStream.putNextEntry(ZipEntry(targetFile.toString()))\r\n            val bytes = Files.readAllBytes(file)\r\n            zipOutputStream.write(bytes, 0, bytes.size)\r\n            zipOutputStream.closeEntry()\r\n\r\n        } catch (ex: IOException) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sourceDir Path\nvar zipOutputStream ZipOutputStream",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }",
  "context" : "fun closeOutputStream() {\r\n        try {\r\n           zipOutputStream.close()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }",
  "start_lineno" : "43",
  "methodName" : "closeOutputStream",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelperWithVisitor.kt",
  "task_id" : "aaf-easydiary/407",
  "prompt" : "fun closeOutputStream() {\r\n        try {\r\n           zipOutputStream.close()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var sequence Int\nvar originSequence Int\nval sessionId Int\nvar currentTimeMillis Long\nvar title String?\nvar contents String?\nvar dateString String?\nvar weather Int\nvar photoUris RealmList<PhotoUri>?\nvar fontName String?\nvar fontSize Float\nvar isAllDay Boolean\nvar isEncrypt Boolean\nvar encryptKeyHash String?\nvar isSelected Boolean\nvar location Location?\nvar isHoliday Boolean",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "        true -> { photoUris?.map { PhotoUri(\"\") } }\r\n        false -> photoUris\r\n    }",
  "context" : "fun photoUrisWithEncryptionPolicy(): List<PhotoUri>? = when (isEncrypt) {\r\n        true -> { photoUris?.map { PhotoUri(\"\") } }\r\n        false -> photoUris\r\n    }",
  "start_lineno" : "73",
  "methodName" : "photoUrisWithEncryptionPolicy",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\models\\Diary.kt",
  "task_id" : "aaf-easydiary/408",
  "prompt" : "fun photoUrisWithEncryptionPolicy(): List<PhotoUri>? = when (isEncrypt) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "13",
  "ground_truth" : "            \"android.intent.action.BOOT_COMPLETED\", \"android.intent.action.QUICKBOOT_POWERON\", \"com.htc.intent.action.QUICKBOOT_POWERON\" -> context.rescheduleEnabledAlarms()\r\n        }\r\n    }",
  "context" : "override fun onReceive(context: Context, intent: Intent) {\r\n        when (intent.action) {\r\n            \"android.intent.action.BOOT_COMPLETED\", \"android.intent.action.QUICKBOOT_POWERON\", \"com.htc.intent.action.QUICKBOOT_POWERON\" -> context.rescheduleEnabledAlarms()\r\n        }\r\n    }",
  "start_lineno" : "9",
  "methodName" : "onReceive",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\receivers\\BootCompletedReceiver.kt",
  "task_id" : "aaf-easydiary/409",
  "prompt" : "import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\r\n        when (intent.action) {\r",
  "type" : "android",
  "actions" : "android.intent.action.BOOT_COMPLETED\nandroid.intent.action.QUICKBOOT_POWERON\ncom.htc.intent.action.QUICKBOOT_POWERON"
}, {
  "variables" : "val symbol MutableLiveData<Int>",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "            withContext(Dispatchers.Main) {\r\n                symbol.value = symbol.value?.plus(1) ?: 1\r\n            }\r\n        }\r\n    }",
  "context" : "fun plus() {\r\n        // Launch a coroutine that reads from a remote data source and updates cache\r\n        viewModelScope.launch {\r\n\r\n            // Force Main thread\r\n            withContext(Dispatchers.Main) {\r\n                symbol.value = symbol.value?.plus(1) ?: 1\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "13",
  "methodName" : "plus",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\viewmodels\\BaseDevViewModel.kt",
  "task_id" : "aaf-easydiary/410",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun plus() {\r\n        // Launch a coroutine that reads from a remote data source and updates cache\r\n        viewModelScope.launch {\r\n\r\n            // Force Main thread\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            return super.onInterceptTouchEvent(ev)\r\n        } catch (e: IllegalArgumentException) {\r\n            return false\r\n        }\r\n    }",
  "context" : "override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        try {\r\n            return super.onInterceptTouchEvent(ev)\r\n        } catch (e: IllegalArgumentException) {\r\n            return false\r\n        }\r\n    }",
  "start_lineno" : "29",
  "methodName" : "onInterceptTouchEvent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\viewpagers\\HackyViewPager.kt",
  "task_id" : "aaf-easydiary/411",
  "prompt" : "import android.view.MotionEvent\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var applyStroke Boolean",
  "app_type" : "notes",
  "end_lineno" : "37",
  "ground_truth" : "            paint.style = Paint.Style.FILL\r\n            setTextColor(colorState)\r\n            super.onDraw(canvas)\r\n        }\r\n    }",
  "context" : "override fun onDraw(canvas: Canvas?) {\r\n        super.onDraw(canvas)\r\n\r\n        if (applyStroke) {\r\n            val colorState = textColors\r\n\r\n            paint.style = Paint.Style.STROKE\r\n            paint.strokeWidth = 2.0F\r\n            setTextColor(Color.WHITE)\r\n            super.onDraw(canvas)\r\n\r\n            paint.style = Paint.Style.FILL\r\n            setTextColor(colorState)\r\n            super.onDraw(canvas)\r\n        }\r\n    }",
  "start_lineno" : "22",
  "methodName" : "onDraw",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\CalendarItem.kt",
  "task_id" : "aaf-easydiary/412",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.graphics.Paint\nimport android.graphics.Color\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas?) {\r\n        super.onDraw(canvas)\r\n\r\n        if (applyStroke) {\r\n            val colorState = textColors\r\n\r\n            paint.style = Paint.Style.STROKE\r\n            paint.strokeWidth = 2.0F\r\n            setTextColor(Color.WHITE)\r\n            super.onDraw(canvas)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            ViewStyleSetter.applyRoundCorner(this, radius.toFloat())\r\n        }\r\n    }",
  "context" : "fun setRoundCorner(radius: Int) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            ViewStyleSetter.applyRoundCorner(this, radius.toFloat())\r\n        }\r\n    }",
  "start_lineno" : "17",
  "methodName" : "setRoundCorner",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\CornerImageView.kt",
  "task_id" : "aaf-easydiary/413",
  "prompt" : "import android.os.Build\nfun setRoundCorner(radius: Int) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "//        drawable.setColor(backgroundColor)\r\n        setBackgroundColor(backgroundColor)\r\n    }",
  "context" : "fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n//        val drawable = background as GradientDrawable\r\n//        drawable.setColor(backgroundColor)\r\n        setBackgroundColor(backgroundColor)\r\n    }",
  "start_lineno" : "18",
  "methodName" : "setColors",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\DiaryCardLayout.kt",
  "task_id" : "aaf-easydiary/414",
  "prompt" : "fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n//        val drawable = background as GradientDrawable\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPrevFirstVisiblePosition\nvar mPrevFirstVisibleChildHeight\nvar mPrevScrolledChildrenHeight\nvar mPrevScrollY\nvar mScrollY\nvar mChildrenHeights SparseIntArray?\nvar mCallbacks ObservableScrollViewCallbacks?\nvar mScrollState ScrollState?\nvar mFirstScroll\nvar mDragging\nvar mIntercepted\nvar mPrevMoveEvent MotionEvent?\nvar mTouchInterceptionViewGroup ViewGroup?\nvar mDownPositionY\nvar prevFirstVisiblePosition\nvar prevFirstVisibleChildHeight\nvar prevScrolledChildrenHeight\nvar prevScrollY\nvar scrollY\nvar childrenHeights SparseIntArray?\nvar superState Parcelable?\nval EMPTY_STATE SavedState\nval CREATOR Parcelable.Creator<SavedState?>",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "        mPrevScrollY = ss.prevScrollY\r\n        mScrollY = ss.scrollY\r\n        mChildrenHeights = ss.childrenHeights\r\n        super.onRestoreInstanceState(ss.superState)\r\n    }",
  "context" : "override fun onRestoreInstanceState(state: Parcelable) {\r\n        val ss = state as SavedState\r\n        mPrevFirstVisiblePosition = ss.prevFirstVisiblePosition\r\n        mPrevFirstVisibleChildHeight = ss.prevFirstVisibleChildHeight\r\n        mPrevScrolledChildrenHeight = ss.prevScrolledChildrenHeight\r\n        mPrevScrollY = ss.prevScrollY\r\n        mScrollY = ss.scrollY\r\n        mChildrenHeights = ss.childrenHeights\r\n        super.onRestoreInstanceState(ss.superState)\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onRestoreInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt",
  "task_id" : "aaf-easydiary/415",
  "prompt" : "import android.os.Parcelable\nimport android.os.Parcel\noverride fun onRestoreInstanceState(state: Parcelable) {\r\n        val ss = state as SavedState\r\n        mPrevFirstVisiblePosition = ss.prevFirstVisiblePosition\r\n        mPrevFirstVisibleChildHeight = ss.prevFirstVisibleChildHeight\r\n        mPrevScrolledChildrenHeight = ss.prevScrolledChildrenHeight\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPrevFirstVisiblePosition\nvar mPrevFirstVisibleChildHeight\nvar mPrevScrolledChildrenHeight\nvar mPrevScrollY\nvar mScrollY\nvar mChildrenHeights SparseIntArray?\nvar mCallbacks ObservableScrollViewCallbacks?\nvar mScrollState ScrollState?\nvar mFirstScroll\nvar mDragging\nvar mIntercepted\nvar mPrevMoveEvent MotionEvent?\nvar mTouchInterceptionViewGroup ViewGroup?\nvar mDownPositionY\nvar prevFirstVisiblePosition\nvar prevFirstVisibleChildHeight\nvar prevScrolledChildrenHeight\nvar prevScrollY\nvar scrollY\nvar childrenHeights SparseIntArray?\nvar superState Parcelable?\nval EMPTY_STATE SavedState\nval CREATOR Parcelable.Creator<SavedState?>",
  "app_type" : "notes",
  "end_lineno" : "72",
  "ground_truth" : "        ss.prevScrollY = mPrevScrollY\r\n        ss.scrollY = mScrollY\r\n        ss.childrenHeights = mChildrenHeights\r\n        return ss\r\n    }",
  "context" : "override fun onSaveInstanceState(): Parcelable? {\r\n        val superState = super.onSaveInstanceState()\r\n        val ss = SavedState(superState)\r\n        ss.prevFirstVisiblePosition = mPrevFirstVisiblePosition\r\n        ss.prevFirstVisibleChildHeight = mPrevFirstVisibleChildHeight\r\n        ss.prevScrolledChildrenHeight = mPrevScrolledChildrenHeight\r\n        ss.prevScrollY = mPrevScrollY\r\n        ss.scrollY = mScrollY\r\n        ss.childrenHeights = mChildrenHeights\r\n        return ss\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onSaveInstanceState",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt",
  "task_id" : "aaf-easydiary/416",
  "prompt" : "import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable? {\r\n        val superState = super.onSaveInstanceState()\r\n        val ss = SavedState(superState)\r\n        ss.prevFirstVisiblePosition = mPrevFirstVisiblePosition\r\n        ss.prevFirstVisibleChildHeight = mPrevFirstVisibleChildHeight\r\n        ss.prevScrolledChildrenHeight = mPrevScrolledChildrenHeight\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPrevFirstVisiblePosition\nvar mPrevFirstVisibleChildHeight\nvar mPrevScrolledChildrenHeight\nvar mPrevScrollY\nvar mScrollY\nvar mChildrenHeights SparseIntArray?\nvar mCallbacks ObservableScrollViewCallbacks?\nvar mScrollState ScrollState?\nvar mFirstScroll\nvar mDragging\nvar mIntercepted\nvar mPrevMoveEvent MotionEvent?\nvar mTouchInterceptionViewGroup ViewGroup?\nvar mDownPositionY\nvar prevFirstVisiblePosition\nvar prevFirstVisibleChildHeight\nvar prevScrolledChildrenHeight\nvar prevScrollY\nvar scrollY\nvar childrenHeights SparseIntArray?\nvar superState Parcelable?\nval EMPTY_STATE SavedState\nval CREATOR Parcelable.Creator<SavedState?>",
  "app_type" : "notes",
  "end_lineno" : "168",
  "ground_truth" : "                }\r\n            }\r\n        }\r\n        return super.onInterceptTouchEvent(ev)\r\n    }",
  "context" : "override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        if (mCallbacks != null) {\r\n            when (ev.actionMasked) {\r\n                MotionEvent.ACTION_DOWN -> {\r\n                    mDownPositionY = ev.y\r\n                    run {\r\n                        mDragging = true\r\n                        mFirstScroll = mDragging\r\n                    }\r\n                    mCallbacks!!.onDownMotionEvent()\r\n                }\r\n            }\r\n        }\r\n        return super.onInterceptTouchEvent(ev)\r\n    }",
  "start_lineno" : "154",
  "methodName" : "onInterceptTouchEvent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt",
  "task_id" : "aaf-easydiary/417",
  "prompt" : "import android.view.MotionEvent\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        if (mCallbacks != null) {\r\n            when (ev.actionMasked) {\r\n                MotionEvent.ACTION_DOWN -> {\r\n                    mDownPositionY = ev.y\r\n                    run {\r\n                        mDragging = true\r\n                        mFirstScroll = mDragging\r\n                    }\r\n                    mCallbacks!!.onDownMotionEvent()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var mPrevFirstVisiblePosition\nvar mPrevFirstVisibleChildHeight\nvar mPrevScrolledChildrenHeight\nvar mPrevScrollY\nvar mScrollY\nvar mChildrenHeights SparseIntArray?\nvar mCallbacks ObservableScrollViewCallbacks?\nvar mScrollState ScrollState?\nvar mFirstScroll\nvar mDragging\nvar mIntercepted\nvar mPrevMoveEvent MotionEvent?\nvar mTouchInterceptionViewGroup ViewGroup?\nvar mDownPositionY\nvar prevFirstVisiblePosition\nvar prevFirstVisibleChildHeight\nvar prevScrolledChildrenHeight\nvar prevScrollY\nvar scrollY\nvar childrenHeights SparseIntArray?\nvar superState Parcelable?\nval EMPTY_STATE SavedState\nval CREATOR Parcelable.Creator<SavedState?>",
  "app_type" : "notes",
  "end_lineno" : "248",
  "ground_truth" : "            val baseHeight = firstVisibleChild.height\r\n            val position = y / baseHeight\r\n            scrollVerticallyToPosition(position)\r\n        }\r\n    }",
  "context" : "override fun scrollVerticallyTo(y: Int) {\r\n        val firstVisibleChild = getChildAt(0)\r\n        if (firstVisibleChild != null) {\r\n            val baseHeight = firstVisibleChild.height\r\n            val position = y / baseHeight\r\n            scrollVerticallyToPosition(position)\r\n        }\r\n    }",
  "start_lineno" : "241",
  "methodName" : "scrollVerticallyTo",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt",
  "task_id" : "aaf-easydiary/418",
  "prompt" : "override fun scrollVerticallyTo(y: Int) {\r\n        val firstVisibleChild = getChildAt(0)\r\n        if (firstVisibleChild != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var mPrevFirstVisiblePosition\nvar mPrevFirstVisibleChildHeight\nvar mPrevScrolledChildrenHeight\nvar mPrevScrollY\nvar mScrollY\nvar mChildrenHeights SparseIntArray?\nvar mCallbacks ObservableScrollViewCallbacks?\nvar mScrollState ScrollState?\nvar mFirstScroll\nvar mDragging\nvar mIntercepted\nvar mPrevMoveEvent MotionEvent?\nvar mTouchInterceptionViewGroup ViewGroup?\nvar mDownPositionY\nvar prevFirstVisiblePosition\nvar prevFirstVisibleChildHeight\nvar prevScrolledChildrenHeight\nvar prevScrollY\nvar scrollY\nvar childrenHeights SparseIntArray?\nvar superState Parcelable?\nval EMPTY_STATE SavedState\nval CREATOR Parcelable.Creator<SavedState?>",
  "app_type" : "notes",
  "end_lineno" : "274",
  "ground_truth" : "            (lm as LinearLayoutManager).scrollToPositionWithOffset(position, 0)\r\n        } else {\r\n            scrollToPosition(position)\r\n        }\r\n    }",
  "context" : "fun scrollVerticallyToPosition(position: Int) {\r\n        val lm = layoutManager\r\n        if (lm != null && lm is LinearLayoutManager) {\r\n            (lm as LinearLayoutManager).scrollToPositionWithOffset(position, 0)\r\n        } else {\r\n            scrollToPosition(position)\r\n        }\r\n    }",
  "start_lineno" : "267",
  "methodName" : "scrollVerticallyToPosition",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt",
  "task_id" : "aaf-easydiary/419",
  "prompt" : "import androidx.recyclerview.widget.LinearLayoutManager\nfun scrollVerticallyToPosition(position: Int) {\r\n        val lm = layoutManager\r\n        if (lm != null && lm is LinearLayoutManager) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var fixedAppcompatPadding Boolean\nvar applyCardBackgroundColor Boolean\nvar dashboardInnerCard Boolean",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "        super.onDraw(canvas)\r\n        if (fixedAppcompatPadding) useCompatPadding = true\r\n    }",
  "context" : "override fun onDraw(canvas: Canvas?) {\r\n        super.onDraw(canvas)\r\n        if (fixedAppcompatPadding) useCompatPadding = true\r\n    }",
  "start_lineno" : "23",
  "methodName" : "onDraw",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FixedCardView.kt",
  "task_id" : "aaf-easydiary/420",
  "prompt" : "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var applyGlobalSize Boolean\nvar applyGlobalColor Boolean\nvar applyHighLight Boolean\nvar applyBoldStyle Boolean",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "        setTextColor(textColor)\r\n        setLinkTextColor(accentColor)\r\n    }",
  "context" : "fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n        setTextColor(textColor)\r\n        setLinkTextColor(accentColor)\r\n    }",
  "start_lineno" : "22",
  "methodName" : "setColors",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FixedTextView.kt",
  "task_id" : "aaf-easydiary/421",
  "prompt" : "fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "146",
  "ground_truth" : "        mTabViewLayoutId = layoutResId\r\n        mTabViewTextViewId = textViewId\r\n    }",
  "context" : "fun setCustomTabView(layoutResId: Int, textViewId: Int) {\r\n        mTabViewLayoutId = layoutResId\r\n        mTabViewTextViewId = textViewId\r\n    }",
  "start_lineno" : "143",
  "methodName" : "setCustomTabView",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/422",
  "prompt" : "import android.view.View\nfun setCustomTabView(layoutResId: Int, textViewId: Int) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "160",
  "ground_truth" : "        if (viewPager != null) {\r\n            viewPager.setOnPageChangeListener(InternalViewPagerListener())\r\n            populateTabStrip()\r\n        }\r\n    }",
  "context" : "fun setViewPager(viewPager: androidx.viewpager.widget.ViewPager?) {\r\n        mTabStrip.removeAllViews()\r\n\r\n        mViewPager = viewPager\r\n        if (viewPager != null) {\r\n            viewPager.setOnPageChangeListener(InternalViewPagerListener())\r\n            populateTabStrip()\r\n        }\r\n    }",
  "start_lineno" : "152",
  "methodName" : "setViewPager",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/423",
  "prompt" : "import androidx.viewpager.widget.ViewPager\nimport android.view.View\nfun setViewPager(viewPager: androidx.viewpager.widget.ViewPager?) {\r\n        mTabStrip.removeAllViews()\r\n\r\n        mViewPager = viewPager\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "235",
  "ground_truth" : "\r\n        if (mViewPager != null) {\r\n            scrollToTab(mViewPager!!.currentItem, 0)\r\n        }\r\n    }",
  "context" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n\r\n        if (mViewPager != null) {\r\n            scrollToTab(mViewPager!!.currentItem, 0)\r\n        }\r\n    }",
  "start_lineno" : "229",
  "methodName" : "onAttachedToWindow",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/424",
  "prompt" : "override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "286",
  "ground_truth" : "\r\n            if (mViewPagerPageChangeListener != null) {\r\n                mViewPagerPageChangeListener!!.onPageScrollStateChanged(state)\r\n            }\r\n        }",
  "context" : "override fun onPageScrollStateChanged(state: Int) {\r\n            mScrollState = state\r\n\r\n            if (mViewPagerPageChangeListener != null) {\r\n                mViewPagerPageChangeListener!!.onPageScrollStateChanged(state)\r\n            }\r\n        }",
  "start_lineno" : "280",
  "methodName" : "onPageScrollStateChanged",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/425",
  "prompt" : "override fun onPageScrollStateChanged(state: Int) {\r\n            mScrollState = state\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "297",
  "ground_truth" : "\r\n            if (mViewPagerPageChangeListener != null) {\r\n                mViewPagerPageChangeListener!!.onPageSelected(position)\r\n            }\r\n        }",
  "context" : "override fun onPageSelected(position: Int) {\r\n            if (mScrollState == androidx.viewpager.widget.ViewPager.SCROLL_STATE_IDLE) {\r\n                mTabStrip.onViewPagerPageChanged(position, 0f)\r\n                scrollToTab(position, 0)\r\n            }\r\n\r\n            if (mViewPagerPageChangeListener != null) {\r\n                mViewPagerPageChangeListener!!.onPageSelected(position)\r\n            }\r\n        }",
  "start_lineno" : "288",
  "methodName" : "onPageSelected",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/426",
  "prompt" : "import androidx.viewpager.widget.ViewPager\nimport android.view.View\noverride fun onPageSelected(position: Int) {\r\n            if (mScrollState == androidx.viewpager.widget.ViewPager.SCROLL_STATE_IDLE) {\r\n                mTabStrip.onViewPagerPageChanged(position, 0f)\r\n                scrollToTab(position, 0)\r\n            }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mTitleOffset Int\nvar mTabViewLayoutId Int\nvar mTabViewTextViewId Int\nvar mViewPager androidx?.viewpager?.widget?.ViewPager?\nvar mViewPagerPageChangeListener androidx?.viewpager?.widget?.ViewPager?.OnPageChangeListener?\nval mTabStrip SlidingTabStrip\nvar mScrollState Int\nval TITLE_OFFSET_DIPS\nval TAB_VIEW_PADDING_DIPS\nval TAB_VIEW_TEXT_SIZE_SP",
  "app_type" : "notes",
  "end_lineno" : "309",
  "ground_truth" : "                    mViewPager!!.currentItem = i\r\n                    return\r\n                }\r\n            }\r\n        }",
  "context" : "override fun onClick(v: View) {\r\n            for (i in 0 until mTabStrip.getChildCount()) {\r\n                if (v === mTabStrip.getChildAt(i)) {\r\n                    mViewPager!!.currentItem = i\r\n                    return\r\n                }\r\n            }\r\n        }",
  "start_lineno" : "302",
  "methodName" : "onClick",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt",
  "task_id" : "aaf-easydiary/427",
  "prompt" : "import android.view.View\noverride fun onClick(v: View) {\r\n            for (i in 0 until mTabStrip.getChildCount()) {\r\n                if (v === mTabStrip.getChildAt(i)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mBottomBorderThickness Int\nval mBottomBorderPaint Paint\nval mSelectedIndicatorThickness Int\nval mSelectedIndicatorPaint Paint\nval mDefaultBottomBorderColor Int\nval mDividerPaint Paint\nval mDividerHeight Float\nvar mSelectedPosition Int\nvar mSelectionOffset Float\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nvar mIndicatorColors IntArray?\nvar mDividerColors IntArray?\nval DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS\nval DEFAULT_BOTTOM_BORDER_COLOR_ALPHA Byte\nval SELECTED_INDICATOR_THICKNESS_DIPS\nval DEFAULT_SELECTED_INDICATOR_COLOR\nval DEFAULT_DIVIDER_THICKNESS_DIPS\nval DEFAULT_DIVIDER_COLOR_ALPHA Byte\nval DEFAULT_DIVIDER_HEIGHT",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "        mCustomTabColorizer = customTabColorizer\r\n        invalidate()\r\n    }",
  "context" : "fun setCustomTabColorizer(customTabColorizer: SlidingTabLayout.TabColorizer) {\r\n        mCustomTabColorizer = customTabColorizer\r\n        invalidate()\r\n    }",
  "start_lineno" : "75",
  "methodName" : "setCustomTabColorizer",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt",
  "task_id" : "aaf-easydiary/428",
  "prompt" : "import android.graphics.Color\nfun setCustomTabColorizer(customTabColorizer: SlidingTabLayout.TabColorizer) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mBottomBorderThickness Int\nval mBottomBorderPaint Paint\nval mSelectedIndicatorThickness Int\nval mSelectedIndicatorPaint Paint\nval mDefaultBottomBorderColor Int\nval mDividerPaint Paint\nval mDividerHeight Float\nvar mSelectedPosition Int\nvar mSelectionOffset Float\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nvar mIndicatorColors IntArray?\nvar mDividerColors IntArray?\nval DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS\nval DEFAULT_BOTTOM_BORDER_COLOR_ALPHA Byte\nval SELECTED_INDICATOR_THICKNESS_DIPS\nval DEFAULT_SELECTED_INDICATOR_COLOR\nval DEFAULT_DIVIDER_THICKNESS_DIPS\nval DEFAULT_DIVIDER_COLOR_ALPHA Byte\nval DEFAULT_DIVIDER_HEIGHT",
  "app_type" : "notes",
  "end_lineno" : "85",
  "ground_truth" : "        mDefaultTabColorizer.setIndicatorColors(*colors)\r\n        invalidate()\r\n    }",
  "context" : "fun setSelectedIndicatorColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r\n        mDefaultTabColorizer.setIndicatorColors(*colors)\r\n        invalidate()\r\n    }",
  "start_lineno" : "80",
  "methodName" : "setSelectedIndicatorColors",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt",
  "task_id" : "aaf-easydiary/429",
  "prompt" : "import android.graphics.Color\nfun setSelectedIndicatorColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mBottomBorderThickness Int\nval mBottomBorderPaint Paint\nval mSelectedIndicatorThickness Int\nval mSelectedIndicatorPaint Paint\nval mDefaultBottomBorderColor Int\nval mDividerPaint Paint\nval mDividerHeight Float\nvar mSelectedPosition Int\nvar mSelectionOffset Float\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nvar mIndicatorColors IntArray?\nvar mDividerColors IntArray?\nval DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS\nval DEFAULT_BOTTOM_BORDER_COLOR_ALPHA Byte\nval SELECTED_INDICATOR_THICKNESS_DIPS\nval DEFAULT_SELECTED_INDICATOR_COLOR\nval DEFAULT_DIVIDER_THICKNESS_DIPS\nval DEFAULT_DIVIDER_COLOR_ALPHA Byte\nval DEFAULT_DIVIDER_HEIGHT",
  "app_type" : "notes",
  "end_lineno" : "92",
  "ground_truth" : "        mDefaultTabColorizer.setDividerColors(*colors)\r\n        invalidate()\r\n    }",
  "context" : "fun setDividerColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r\n        mDefaultTabColorizer.setDividerColors(*colors)\r\n        invalidate()\r\n    }",
  "start_lineno" : "87",
  "methodName" : "setDividerColors",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt",
  "task_id" : "aaf-easydiary/430",
  "prompt" : "import android.graphics.Color\nfun setDividerColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val mBottomBorderThickness Int\nval mBottomBorderPaint Paint\nval mSelectedIndicatorThickness Int\nval mSelectedIndicatorPaint Paint\nval mDefaultBottomBorderColor Int\nval mDividerPaint Paint\nval mDividerHeight Float\nvar mSelectedPosition Int\nvar mSelectionOffset Float\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nvar mIndicatorColors IntArray?\nvar mDividerColors IntArray?\nval DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS\nval DEFAULT_BOTTOM_BORDER_COLOR_ALPHA Byte\nval SELECTED_INDICATOR_THICKNESS_DIPS\nval DEFAULT_SELECTED_INDICATOR_COLOR\nval DEFAULT_DIVIDER_THICKNESS_DIPS\nval DEFAULT_DIVIDER_COLOR_ALPHA Byte\nval DEFAULT_DIVIDER_HEIGHT",
  "app_type" : "notes",
  "end_lineno" : "98",
  "ground_truth" : "        mSelectionOffset = positionOffset\r\n        invalidate()\r\n    }",
  "context" : "fun onViewPagerPageChanged(position: Int, positionOffset: Float) {\r\n        mSelectedPosition = position\r\n        mSelectionOffset = positionOffset\r\n        invalidate()\r\n    }",
  "start_lineno" : "94",
  "methodName" : "onViewPagerPageChanged",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt",
  "task_id" : "aaf-easydiary/431",
  "prompt" : "fun onViewPagerPageChanged(position: Int, positionOffset: Float) {\r\n        mSelectedPosition = position\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mBottomBorderThickness Int\nval mBottomBorderPaint Paint\nval mSelectedIndicatorThickness Int\nval mSelectedIndicatorPaint Paint\nval mDefaultBottomBorderColor Int\nval mDividerPaint Paint\nval mDividerHeight Float\nvar mSelectedPosition Int\nvar mSelectionOffset Float\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nvar mIndicatorColors IntArray?\nvar mDividerColors IntArray?\nval DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS\nval DEFAULT_BOTTOM_BORDER_COLOR_ALPHA Byte\nval SELECTED_INDICATOR_THICKNESS_DIPS\nval DEFAULT_SELECTED_INDICATOR_COLOR\nval DEFAULT_DIVIDER_THICKNESS_DIPS\nval DEFAULT_DIVIDER_COLOR_ALPHA Byte\nval DEFAULT_DIVIDER_HEIGHT",
  "app_type" : "notes",
  "end_lineno" : "198",
  "ground_truth" : "            val r = Color.red(color1) * ratio + Color.red(color2) * inverseRation\r\n            val g = Color.green(color1) * ratio + Color.green(color2) * inverseRation\r\n            val b = Color.blue(color1) * ratio + Color.blue(color2) * inverseRation\r\n            return Color.rgb(r.toInt(), g.toInt(), b.toInt())\r\n        }",
  "context" : "private fun blendColors(color1: Int, color2: Int, ratio: Float): Int {\r\n            val inverseRation = 1f - ratio\r\n            val r = Color.red(color1) * ratio + Color.red(color2) * inverseRation\r\n            val g = Color.green(color1) * ratio + Color.green(color2) * inverseRation\r\n            val b = Color.blue(color1) * ratio + Color.blue(color2) * inverseRation\r\n            return Color.rgb(r.toInt(), g.toInt(), b.toInt())\r\n        }",
  "start_lineno" : "192",
  "methodName" : "blendColors",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt",
  "task_id" : "aaf-easydiary/432",
  "prompt" : "import android.graphics.Color\nprivate fun blendColors(color1: Int, color2: Int, ratio: Float): Int {\r\n            val inverseRation = 1f - ratio\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val OPEN_WRITE_PAGE\nval OPEN_READ_PAGE\nval UPDATE_WIDGET",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "        super.onUpdate(context, appWidgetManager, appWidgetIds)\r\n        performUpdate(context)\r\n    }",
  "context" : "override fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {\r\n        super.onUpdate(context, appWidgetManager, appWidgetIds)\r\n        performUpdate(context)\r\n    }",
  "start_lineno" : "70",
  "methodName" : "onUpdate",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\widgets\\DiaryMainWidget.kt",
  "task_id" : "aaf-easydiary/433",
  "prompt" : "import android.content.Context\nimport android.appwidget.AppWidgetManager\noverride fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "val OPEN_WRITE_PAGE\nval OPEN_READ_PAGE\nval UPDATE_WIDGET",
  "app_type" : "notes",
  "end_lineno" : "127",
  "ground_truth" : "            this.action = action\r\n            val pendingIntent = PendingIntent.getBroadcast(context, 0, this, context.pendingIntentFlagMutable())\r\n            views.setOnClickPendingIntent(id, pendingIntent)\r\n        }\r\n    }",
  "context" : "private fun setupIntent(context: Context, views: RemoteViews, action: String, id: Int) {\r\n        Intent(context, DiaryMainWidget::class.java).apply {\r\n            this.action = action\r\n            val pendingIntent = PendingIntent.getBroadcast(context, 0, this, context.pendingIntentFlagMutable())\r\n            views.setOnClickPendingIntent(id, pendingIntent)\r\n        }\r\n    }",
  "start_lineno" : "121",
  "methodName" : "setupIntent",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\widgets\\DiaryMainWidget.kt",
  "task_id" : "aaf-easydiary/434",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport android.widget.RemoteViews\nimport android.content.Intent\nimport android.content.Context\nprivate fun setupIntent(context: Context, views: RemoteViews, action: String, id: Int) {\r\n        Intent(context, DiaryMainWidget::class.java).apply {\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "val OPEN_WRITE_PAGE\nval OPEN_READ_PAGE\nval UPDATE_WIDGET",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "    } else {\r\n        R.layout.widget_diary_main\r\n    }",
  "context" : "private fun getProperLayout(context: Context) = if (isOreoPlus()) {\r\n        R.layout.widget_diary_main\r\n    } else {\r\n        R.layout.widget_diary_main\r\n    }",
  "start_lineno" : "129",
  "methodName" : "getProperLayout",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\widgets\\DiaryMainWidget.kt",
  "task_id" : "aaf-easydiary/435",
  "prompt" : "import me.blog.korn123.easydiary.R\nimport com.simplemobiletools.commons.helpers.isOreoPlus\nimport android.content.Context\nprivate fun getProperLayout(context: Context) = if (isOreoPlus()) {\r\n        R.layout.widget_diary_main\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "val mZipHelper",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "        mZipHelper.isOnProgress = false\r\n        NotificationManagerCompat.from(applicationContext).cancel(NOTIFICATION_COMPRESS_ID)\r\n    }",
  "context" : "override fun onStopped() {\r\n        super.onStopped()\r\n        mZipHelper.isOnProgress = false\r\n        NotificationManagerCompat.from(applicationContext).cancel(NOTIFICATION_COMPRESS_ID)\r\n    }",
  "start_lineno" : "51",
  "methodName" : "onStopped",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\workers\\FullBackupWorker.kt",
  "task_id" : "aaf-easydiary/436",
  "prompt" : "override fun onStopped() {\r\n        super.onStopped()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val mZipHelper",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "        mZipHelper.isOnProgress = false\r\n        NotificationManagerCompat.from(applicationContext).cancel(NOTIFICATION_DECOMPRESS_ID)\r\n    }",
  "context" : "override fun onStopped() {\r\n        super.onStopped()\r\n        mZipHelper.isOnProgress = false\r\n        NotificationManagerCompat.from(applicationContext).cancel(NOTIFICATION_DECOMPRESS_ID)\r\n    }",
  "start_lineno" : "71",
  "methodName" : "onStopped",
  "fpath" : "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\workers\\FullRecoveryWorker.kt",
  "task_id" : "aaf-easydiary/437",
  "prompt" : "override fun onStopped() {\r\n        super.onStopped()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "31",
  "ground_truth" : "                .collect { setState { copy(user = it) } }\r\n        }\r\n    }",
  "context" : "private fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r\n                .collect { setState { copy(user = it) } }\r\n        }\r\n    }",
  "start_lineno" : "26",
  "methodName" : "initUser",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\dashboard\\ui\\DashboardViewModel.kt",
  "task_id" : "Compose-ToDo/0",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "                .collect()\r\n        }\r\n    }",
  "context" : "private fun initToDoTaskDiff() {\r\n        viewModelScope.launch {\r\n            environment.listenToDoTaskDiff()\r\n                .collect()\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "initToDoTaskDiff",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\dashboard\\ui\\DashboardViewModel.kt",
  "task_id" : "Compose-ToDo/1",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initToDoTaskDiff() {\r\n        viewModelScope.launch {\r\n            environment.listenToDoTaskDiff()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "\r\n    Theme(theme = state.theme, content = content)\r\n}",
  "context" : "\r\n@Composable\r\nfun Host(content: @Composable () -> Unit) {\r\n    val viewModel = hiltViewModel<HostViewModel>()\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    Theme(theme = state.theme, content = content)\r\n}",
  "start_lineno" : "8",
  "methodName" : "Host",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\host\\ui\\HostScreen.kt",
  "task_id" : "Compose-ToDo/2",
  "prompt" : "import androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun Host(content: @Composable () -> Unit) {\r\n    val viewModel = hiltViewModel<HostViewModel>()\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "                .collect { setState { copy(theme = it) } }\r\n        }\r\n    }",
  "context" : "private fun initTheme() {\r\n        viewModelScope.launch {\r\n            environment.getTheme()\r\n                .collect { setState { copy(theme = it) } }\r\n        }\r\n    }",
  "start_lineno" : "22",
  "methodName" : "initTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\host\\ui\\HostViewModel.kt",
  "task_id" : "Compose-ToDo/3",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initTheme() {\r\n        viewModelScope.launch {\r\n            environment.getTheme()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "74",
  "ground_truth" : "                Spacer(Modifier.height(8.dp))\r\n            }\r\n        }\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun LanguageScreen(\r\n    items: List<LanguageItem>,\r\n    clickItem: (LanguageItem) -> Unit,\r\n    onClickBack: () -> Unit\r\n) {\r\n    PgModalLayout(\r\n        title = {\r\n            PgModalBackHeader(\r\n                text = stringResource(R.string.setting_language),\r\n                onClickBack = onClickBack\r\n            )\r\n        },\r\n        content = {\r\n            items(items) { item ->\r\n                LanguageItem(\r\n                    onClick = { clickItem(item) },\r\n                    item = item\r\n                )\r\n                Spacer(Modifier.height(8.dp))\r\n            }\r\n        }\r\n    )\r\n}",
  "start_lineno" : "50",
  "methodName" : "LanguageScreen",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingScreen.kt",
  "task_id" : "Compose-ToDo/4",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalLayout\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalBackHeader\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\n\r\n@Composable\r\nprivate fun LanguageScreen(\r\n    items: List<LanguageItem>,\r\n    clickItem: (LanguageItem) -> Unit,\r\n    onClickBack: () -> Unit\r\n) {\r\n    PgModalLayout(\r\n        title = {\r\n            PgModalBackHeader(\r\n                text = stringResource(R.string.setting_language),\r\n                onClickBack = onClickBack\r\n            )\r\n        },\r\n        content = {\r\n            items(items) { item ->\r\n                LanguageItem(\r\n                    onClick = { clickItem(item) },\r\n                    item = item\r\n                )\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "                    setEffect(LocalizedEffect.ApplyLanguage(action.selected.language))\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: LocalizedSettingAction) {\r\n        when (action) {\r\n            is LocalizedSettingAction.SelectLanguage -> {\r\n                viewModelScope.launch {\r\n                    environment.setLanguage(action.selected.language)\r\n                    setEffect(LocalizedEffect.ApplyLanguage(action.selected.language))\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingViewModel.kt",
  "task_id" : "Compose-ToDo/5",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.wisnu.kurniawan.composetodolist.model.Language\nimport androidx.lifecycle.viewModelScope\noverride fun dispatch(action: LocalizedSettingAction) {\r\n        when (action) {\r\n            is LocalizedSettingAction.SelectLanguage -> {\r\n                viewModelScope.launch {\r\n                    environment.setLanguage(action.selected.language)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "                .collect {\r\n                    setState { copy(items = initial().select(it)) }\r\n                }\r\n        }\r\n    }",
  "context" : "private fun initLanguage() {\r\n        viewModelScope.launch {\r\n            delay(100)\r\n            environment.getLanguage()\r\n                .collect {\r\n                    setState { copy(items = initial().select(it)) }\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "32",
  "methodName" : "initLanguage",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingViewModel.kt",
  "task_id" : "Compose-ToDo/6",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport com.wisnu.kurniawan.composetodolist.model.Language\nimport androidx.lifecycle.viewModelScope\nprivate fun initLanguage() {\r\n        viewModelScope.launch {\r\n            delay(100)\r\n            environment.getLanguage()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "            title = R.string.setting_language_indonesia,\r\n            language = Language.INDONESIA,\r\n            applied = false\r\n        ),\r\n    )",
  "context" : "private fun initial() = listOf(\r\n        LanguageItem(\r\n            title = R.string.setting_language_english,\r\n            language = Language.ENGLISH,\r\n            applied = false\r\n        ),\r\n        LanguageItem(\r\n            title = R.string.setting_language_indonesia,\r\n            language = Language.INDONESIA,\r\n            applied = false\r\n        ),\r\n    )",
  "start_lineno" : "42",
  "methodName" : "initial",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingViewModel.kt",
  "task_id" : "Compose-ToDo/7",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.R\nprivate fun initial() = listOf(\r\n        LanguageItem(\r\n            title = R.string.setting_language_english,\r\n            language = Language.ENGLISH,\r\n            applied = false\r\n        ),\r\n        LanguageItem(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "61",
  "ground_truth" : "        it.copy(applied = it.language == language)\r\n    }\r\n}",
  "context" : "fun List<LanguageItem>.select(language: Language): List<LanguageItem> {\r\n    return map {\r\n        it.copy(applied = it.language == language)\r\n    }\r\n}",
  "start_lineno" : "57",
  "methodName" : "select",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingViewModel.kt",
  "task_id" : "Compose-ToDo/8",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Language\nfun List<LanguageItem>.select(language: Language): List<LanguageItem> {\r\n    return map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "                is Credential -> credentialProvider.setCredential(it)\r\n                is User -> userProvider.setUser(it)\r\n            }\r\n        }\r\n    }",
  "context" : "override fun login(email: String, password: String): Flow<Any> {\r\n        return merge(\r\n            serverProvider.fetchCredential(),\r\n            serverProvider.fetchUser(email, password)\r\n        ).onEach {\r\n            when (it) {\r\n                is Credential -> credentialProvider.setCredential(it)\r\n                is User -> userProvider.setUser(it)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "19",
  "methodName" : "login",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\data\\LoginEnvironment.kt",
  "task_id" : "Compose-ToDo/9",
  "prompt" : "import kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.merge\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.User\nimport com.wisnu.kurniawan.composetodolist.model.Credential\noverride fun login(email: String, password: String): Flow<Any> {\r\n        return merge(\r\n            serverProvider.fetchCredential(),\r\n            serverProvider.fetchUser(email, password)\r\n        ).onEach {\r\n            when (it) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "150",
  "ground_truth" : "            modifier = Modifier.fillMaxWidth(),\r\n            style = LocalTextStyle.current.copy(color = MaterialTheme.colorScheme.error)\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun TextFieldError(textError: String) {\r\n    Row(modifier = Modifier.fillMaxWidth()) {\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = textError,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            style = LocalTextStyle.current.copy(color = MaterialTheme.colorScheme.error)\r\n        )\r\n    }\r\n}",
  "start_lineno" : "139",
  "methodName" : "TextFieldError",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginScreen.kt",
  "task_id" : "Compose-ToDo/10",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\n\r\n@Composable\r\nprivate fun TextFieldError(textError: String) {\r\n    Row(modifier = Modifier.fillMaxWidth()) {\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = textError,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "            is LoginAction.ChangePassword -> onPasswordChange(action.value)\r\n            is LoginAction.ChangeEmail -> onUserNameChange(action.value)\r\n            is LoginAction.ClickLogin, LoginAction.ClickImePasswordDone -> login()\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: LoginAction) {\r\n        when (action) {\r\n            is LoginAction.ChangePassword -> onPasswordChange(action.value)\r\n            is LoginAction.ChangeEmail -> onUserNameChange(action.value)\r\n            is LoginAction.ClickLogin, LoginAction.ClickImePasswordDone -> login()\r\n        }\r\n    }",
  "start_lineno" : "19",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt",
  "task_id" : "Compose-ToDo/11",
  "prompt" : "override fun dispatch(action: LoginAction) {\r\n        when (action) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "                    environment.login(state.value.email, state.value.password)\r\n                        .collect { setEffect(LoginEffect.NavigateToDashboard) }\r\n                }\r\n        }\r\n    }",
  "context" : "private fun login() {\r\n        viewModelScope.launch {\r\n            flow { emit(state.value.canLogin()) }\r\n                .filter { it }\r\n                .onEach { setState { copy(showEmailInvalidError = !isValidEmail()) } }\r\n                .filter { state.value.isValidEmail() }\r\n                .collect {\r\n                    environment.login(state.value.email, state.value.password)\r\n                        .collect { setEffect(LoginEffect.NavigateToDashboard) }\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "27",
  "methodName" : "login",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt",
  "task_id" : "Compose-ToDo/12",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.filter\nimport androidx.lifecycle.viewModelScope\nprivate fun login() {\r\n        viewModelScope.launch {\r\n            flow { emit(state.value.canLogin()) }\r\n                .filter { it }\r\n                .onEach { setState { copy(showEmailInvalidError = !isValidEmail()) } }\r\n                .filter { state.value.isValidEmail() }\r\n                .collect {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "            setState { copy(email = email, showEmailInvalidError = false) }\r\n        }\r\n    }",
  "context" : "private fun onUserNameChange(email: String) {\r\n        viewModelScope.launch {\r\n            setState { copy(email = email, showEmailInvalidError = false) }\r\n        }\r\n    }",
  "start_lineno" : "40",
  "methodName" : "onUserNameChange",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt",
  "task_id" : "Compose-ToDo/13",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun onUserNameChange(email: String) {\r\n        viewModelScope.launch {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "            setState { copy(password = password) }\r\n        }\r\n    }",
  "context" : "private fun onPasswordChange(password: String) {\r\n        viewModelScope.launch {\r\n            setState { copy(password = password) }\r\n        }\r\n    }",
  "start_lineno" : "46",
  "methodName" : "onPasswordChange",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt",
  "task_id" : "Compose-ToDo/14",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun onPasswordChange(password: String) {\r\n        viewModelScope.launch {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "17",
  "ground_truth" : "        credentialProvider.setCredential(Credential(token = \"\"))\r\n        userProvider.setUser(User(email = \"\"))\r\n    }",
  "context" : "override suspend fun logout() {\r\n        credentialProvider.setCredential(Credential(token = \"\"))\r\n        userProvider.setUser(User(email = \"\"))\r\n    }",
  "start_lineno" : "14",
  "methodName" : "logout",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\data\\LogoutEnvironment.kt",
  "task_id" : "Compose-ToDo/15",
  "prompt" : "override suspend fun logout() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "            is LogoutAction.ClickLogout -> logout()\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: LogoutAction) {\r\n        when (action) {\r\n            is LogoutAction.ClickLogout -> logout()\r\n        }\r\n    }",
  "start_lineno" : "18",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt",
  "task_id" : "Compose-ToDo/16",
  "prompt" : "override fun dispatch(action: LogoutAction) {\r\n        when (action) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "            setEffect(LogoutEffect.NavigateToSplash)\r\n        }\r\n    }",
  "context" : "private fun logout() {\r\n        viewModelScope.launch {\r\n            environment.logout()\r\n            setEffect(LogoutEffect.NavigateToSplash)\r\n        }\r\n    }",
  "start_lineno" : "24",
  "methodName" : "logout",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt",
  "task_id" : "Compose-ToDo/17",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun logout() {\r\n        viewModelScope.launch {\r\n            environment.logout()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "                .collect { setState { copy(user = it) } }\r\n        }\r\n    }",
  "context" : "private fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r\n                .collect { setState { copy(user = it) } }\r\n        }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "initUser",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt",
  "task_id" : "Compose-ToDo/18",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "        onClick = onClick,\r\n        text = title,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun SettingItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n) {\r\n    PgModalCell(\r\n        onClick = onClick,\r\n        text = title,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    )\r\n}",
  "start_lineno" : "54",
  "methodName" : "SettingItem",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\setting\\ui\\SettingScreen.kt",
  "task_id" : "Compose-ToDo/19",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalCell\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun SettingItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n) {\r\n    PgModalCell(\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "            SettingItem.Language(R.string.setting_language),\r\n            // SettingItem.Logout(R.string.setting_logout),\r\n        )",
  "context" : "private fun initial() = listOf(\r\n            SettingItem.Theme(R.string.setting_theme),\r\n            SettingItem.Language(R.string.setting_language),\r\n            // SettingItem.Logout(R.string.setting_logout),\r\n        )",
  "start_lineno" : "11",
  "methodName" : "initial",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\setting\\ui\\SettingState.kt",
  "task_id" : "Compose-ToDo/20",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nprivate fun initial() = listOf(\r\n            SettingItem.Theme(R.string.setting_theme),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            is ThemeAction.SelectTheme -> applyTheme(action.selected)\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: ThemeAction) {\r\n        when (action) {\r\n            is ThemeAction.SelectTheme -> applyTheme(action.selected)\r\n        }\r\n    }",
  "start_lineno" : "34",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt",
  "task_id" : "Compose-ToDo/21",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Theme\noverride fun dispatch(action: ThemeAction) {\r\n        when (action) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "                .collect {\r\n                    setState { copy(items = items.select(it)) }\r\n                }\r\n        }\r\n    }",
  "context" : "private fun initTheme() {\r\n        viewModelScope.launch {\r\n            setState { copy(items = initial()) }\r\n\r\n            environment.getTheme()\r\n                .collect {\r\n                    setState { copy(items = items.select(it)) }\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "40",
  "methodName" : "initTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt",
  "task_id" : "Compose-ToDo/22",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nimport androidx.lifecycle.viewModelScope\nprivate fun initTheme() {\r\n        viewModelScope.launch {\r\n            setState { copy(items = initial()) }\r\n\r\n            environment.getTheme()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "            environment.setTheme(item.theme)\r\n        }\r\n    }",
  "context" : "private fun applyTheme(item: ThemeItem) {\r\n        viewModelScope.launch {\r\n            environment.setTheme(item.theme)\r\n        }\r\n    }",
  "start_lineno" : "51",
  "methodName" : "applyTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt",
  "task_id" : "Compose-ToDo/23",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nimport androidx.lifecycle.viewModelScope\nprivate fun applyTheme(item: ThemeItem) {\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "166",
  "ground_truth" : "        it.copy(applied = it.theme == theme)\r\n    }\r\n}",
  "context" : "fun List<ThemeItem>.select(theme: Theme): List<ThemeItem> {\r\n    return map {\r\n        it.copy(applied = it.theme == theme)\r\n    }\r\n}",
  "start_lineno" : "162",
  "methodName" : "select",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt",
  "task_id" : "Compose-ToDo/24",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Theme\nfun List<ThemeItem>.select(theme: Theme): List<ThemeItem> {\r\n    return map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "context" : "override suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r\n            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "22",
  "methodName" : "toggleTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\data\\AllEnvironment.kt",
  "task_id" : "Compose-ToDo/25",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggleStatusHandler\noverride suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        data.addAll(it.tasks.toItemListAllState(it))\r\n    }\r\n\r\n    return data\r\n}",
  "context" : "fun List<ToDoList>.toItemAllState(): List<ItemAllState> {\r\n    val data = mutableListOf<ItemAllState>()\r\n\r\n    forEach {\r\n        data.add(ItemAllState.List(it))\r\n        data.addAll(it.tasks.toItemListAllState(it))\r\n    }\r\n\r\n    return data\r\n}",
  "start_lineno" : "50",
  "methodName" : "toItemAllState",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\ui\\AllViewModel.kt",
  "task_id" : "Compose-ToDo/26",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun List<ToDoList>.toItemAllState(): List<ItemAllState> {\r\n    val data = mutableListOf<ItemAllState>()\r\n\r\n    forEach {\r\n        data.add(ItemAllState.List(it))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "68",
  "ground_truth" : "            ToDoStatus.IN_PROGRESS -> ItemAllState.Task.InProgress(it, toDoList)\r\n            ToDoStatus.COMPLETE -> ItemAllState.Task.Complete(it, toDoList)\r\n        }\r\n    }\r\n}",
  "context" : "private fun List<ToDoTask>.toItemListAllState(toDoList: ToDoList): List<ItemAllState> {\r\n    return map {\r\n        when (it.status) {\r\n            ToDoStatus.IN_PROGRESS -> ItemAllState.Task.InProgress(it, toDoList)\r\n            ToDoStatus.COMPLETE -> ItemAllState.Task.Complete(it, toDoList)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "61",
  "methodName" : "toItemListAllState",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\ui\\AllViewModel.kt",
  "task_id" : "Compose-ToDo/27",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nprivate fun List<ToDoTask>.toItemListAllState(toDoList: ToDoList): List<ItemAllState> {\r\n    return map {\r\n        when (it.status) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "        }.filter { it.tasks.isNotEmpty() }\r\n    } else {\r\n        this\r\n    }\r\n}",
  "context" : "fun List<ToDoList>.filterCompleteTask(shouldFilter: Boolean): List<ToDoList> {\r\n    return if (shouldFilter) {\r\n        this.map {\r\n            it.copy(tasks = it.tasks.filter { task -> task.status != ToDoStatus.COMPLETE })\r\n        }.filter { it.tasks.isNotEmpty() }\r\n    } else {\r\n        this\r\n    }\r\n}",
  "start_lineno" : "70",
  "methodName" : "filterCompleteTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\ui\\AllViewModel.kt",
  "task_id" : "Compose-ToDo/28",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun List<ToDoList>.filterCompleteTask(shouldFilter: Boolean): List<ToDoList> {\r\n    return if (shouldFilter) {\r\n        this.map {\r\n            it.copy(tasks = it.tasks.filter { task -> task.status != ToDoStatus.COMPLETE })\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "47",
  "ground_truth" : "            updateName = { process(list.name) },\r\n            onDuplicate = { resolveListName(list.name, toDoListProvider.getList(), process) }\r\n        )\r\n            .flatMapConcat { toDoListProvider.getListWithTasksById(list.id) }\r\n    }",
  "context" : "override suspend fun createList(list: ToDoList): Flow<ToDoList> {\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoListProvider.insertList(\r\n                listOf(list.copy(name = newName)),\r\n                ToDoGroupDb.DEFAULT_ID\r\n            )\r\n        }\r\n\r\n        return duplicateNameResolver(\r\n            updateName = { process(list.name) },\r\n            onDuplicate = { resolveListName(list.name, toDoListProvider.getList(), process) }\r\n        )\r\n            .flatMapConcat { toDoListProvider.getListWithTasksById(list.id) }\r\n    }",
  "start_lineno" : "34",
  "methodName" : "createList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt",
  "task_id" : "Compose-ToDo/29",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.duplicateNameResolver\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.OnResolveDuplicateName\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\noverride suspend fun createList(list: ToDoList): Flow<ToDoList> {\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoListProvider.insertList(\r\n                listOf(list.copy(name = newName)),\r\n                ToDoGroupDb.DEFAULT_ID\r\n            )\r\n        }\r\n\r\n        return duplicateNameResolver(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        return duplicateNameResolver(\r\n            updateName = { process(list.name) },\r\n            onDuplicate = { resolveListName(list.name, toDoListProvider.getList(), process) }\r\n        )\r\n    }",
  "context" : "override suspend fun updateList(list: ToDoList): Flow<Any> {\r\n        val currentDate = dateTimeProvider.now()\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoListProvider.updateListNameAndColor(list.copy(name = newName), currentDate)\r\n        }\r\n\r\n        return duplicateNameResolver(\r\n            updateName = { process(list.name) },\r\n            onDuplicate = { resolveListName(list.name, toDoListProvider.getList(), process) }\r\n        )\r\n    }",
  "start_lineno" : "49",
  "methodName" : "updateList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt",
  "task_id" : "Compose-ToDo/30",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.OnResolveDuplicateName\noverride suspend fun updateList(list: ToDoList): Flow<Any> {\r\n        val currentDate = dateTimeProvider.now()\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoListProvider.updateListNameAndColor(list.copy(name = newName), currentDate)\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "                )\r\n            ),\r\n            listId\r\n        )\r\n    }",
  "context" : "override suspend fun createTask(taskName: String, listId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoTaskProvider.insertTask(\r\n            listOf(\r\n                ToDoTask(\r\n                    id = idProvider.generate(),\r\n                    name = taskName,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r\n                )\r\n            ),\r\n            listId\r\n        )\r\n    }",
  "start_lineno" : "61",
  "methodName" : "createTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt",
  "task_id" : "Compose-ToDo/31",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\noverride suspend fun createTask(taskName: String, listId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoTaskProvider.insertTask(\r\n            listOf(\r\n                ToDoTask(\r\n                    id = idProvider.generate(),\r\n                    name = taskName,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "88",
  "ground_truth" : "            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "context" : "override suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r\n            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "77",
  "methodName" : "toggleTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt",
  "task_id" : "Compose-ToDo/32",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggleStatusHandler\noverride suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "102",
  "ground_truth" : "                FirebaseAnalytics.Param.SCREEN_NAME to \"list_detail\",\r\n                FirebaseAnalytics.Param.ITEM_NAME to \"button_save_list\",\r\n            ),\r\n        )\r\n    }",
  "context" : "override fun trackSaveListButtonClicked() {\r\n        analyticManager.trackEvent(\r\n            FirebaseAnalytics.Event.SELECT_CONTENT,\r\n            mapOf(\r\n                FirebaseAnalytics.Param.SCREEN_NAME to \"list_detail\",\r\n                FirebaseAnalytics.Param.ITEM_NAME to \"button_save_list\",\r\n            ),\r\n        )\r\n    }",
  "start_lineno" : "94",
  "methodName" : "trackSaveListButtonClicked",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt",
  "task_id" : "Compose-ToDo/33",
  "prompt" : "import com.google.firebase.analytics.FirebaseAnalytics\noverride fun trackSaveListButtonClicked() {\r\n        analyticManager.trackEvent(\r\n            FirebaseAnalytics.Event.SELECT_CONTENT,\r\n            mapOf(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val listId",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "            is ListDetailAction.TaskAction -> handleTaskAction(action)\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: ListDetailAction) {\r\n        when (action) {\r\n            is ListDetailAction.ListAction -> handleListAction(action)\r\n            is ListDetailAction.TaskAction -> handleTaskAction(action)\r\n        }\r\n    }",
  "start_lineno" : "52",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt",
  "task_id" : "Compose-ToDo/34",
  "prompt" : "override fun dispatch(action: ListDetailAction) {\r\n        when (action) {\r\n            is ListDetailAction.ListAction -> handleListAction(action)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val listId",
  "app_type" : "notes",
  "end_lineno" : "154",
  "ground_truth" : "        colors = colors.select(list.color.toColor()),\r\n        newListName = list.name\r\n    )",
  "context" : "private fun ListDetailState.setAllState(list: ToDoList) = copy(\r\n        list = list,\r\n        colors = colors.select(list.color.toColor()),\r\n        newListName = list.name\r\n    )",
  "start_lineno" : "150",
  "methodName" : "setAllState",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt",
  "task_id" : "Compose-ToDo/35",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nprivate fun ListDetailState.setAllState(list: ToDoList) = copy(\r\n        list = list,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val listId",
  "app_type" : "notes",
  "end_lineno" : "187",
  "ground_truth" : "        it.copy(applied = it.repeat == repeat)\r\n    }\r\n}",
  "context" : "fun List<ToDoRepeatItem>.select(repeat: ToDoRepeat): List<ToDoRepeatItem> {\r\n    return map {\r\n        it.copy(applied = it.repeat == repeat)\r\n    }\r\n}",
  "start_lineno" : "183",
  "methodName" : "select",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt",
  "task_id" : "Compose-ToDo/36",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.features.todo.step.ui.ToDoRepeatItem\nfun List<ToDoRepeatItem>.select(repeat: ToDoRepeat): List<ToDoRepeatItem> {\r\n    return map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val listId",
  "app_type" : "notes",
  "end_lineno" : "193",
  "ground_truth" : "        it.copy(applied = it.color == color)\r\n    }\r\n}",
  "context" : "fun List<ColorItem>.select(color: Color): List<ColorItem> {\r\n    return map {\r\n        it.copy(applied = it.color == color)\r\n    }\r\n}",
  "start_lineno" : "189",
  "methodName" : "select",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt",
  "task_id" : "Compose-ToDo/37",
  "prompt" : "import androidx.compose.ui.graphics.Color\nfun List<ColorItem>.select(color: Color): List<ColorItem> {\r\n    return map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "        return duplicateNameResolver(\r\n            updateName = { process(name) },\r\n            onDuplicate = { resolveGroupName(name, toDoGroupProvider.getGroup(), process) },\r\n        )\r\n    }",
  "context" : "override suspend fun renameGroup(groupId: String, name: String): Flow<Any> {\r\n        val currentDate = dateTimeProvider.now()\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoGroupProvider.updateGroupName(groupId, newName, currentDate)\r\n        }\r\n\r\n        return duplicateNameResolver(\r\n            updateName = { process(name) },\r\n            onDuplicate = { resolveGroupName(name, toDoGroupProvider.getGroup(), process) },\r\n        )\r\n    }",
  "start_lineno" : "47",
  "methodName" : "renameGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\group\\data\\CreateGroupEnvironment.kt",
  "task_id" : "Compose-ToDo/38",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.OnResolveDuplicateName\noverride suspend fun renameGroup(groupId: String, name: String): Flow<Any> {\r\n        val currentDate = dateTimeProvider.now()\r\n        val process: OnResolveDuplicateName = { newName ->\r\n            toDoGroupProvider.updateGroupName(groupId, newName, currentDate)\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "        val update = data.map { it.copy(list = it.list.copy(updatedAt = dateTimeProvider.now())) }\r\n        toDoListProvider.updateList(update)\r\n    }",
  "context" : "override suspend fun updateList(data: List<GroupIdWithList>) {\r\n        val update = data.map { it.copy(list = it.list.copy(updatedAt = dateTimeProvider.now())) }\r\n        toDoListProvider.updateList(update)\r\n    }",
  "start_lineno" : "18",
  "methodName" : "updateList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\grouplist\\data\\UpdateGroupListEnvironment.kt",
  "task_id" : "Compose-ToDo/39",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\noverride suspend fun updateList(data: List<GroupIdWithList>) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "            onSubmit()\r\n        },\r\n        onSkip = onSkip\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun UpdateGroupListScreen(\r\n    viewModel: UpdateGroupListViewModel,\r\n    onSubmit: () -> Unit,\r\n    onSkip: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    UpdateGroupListScreen(\r\n        state = state,\r\n        title = {\r\n            PgModalTitle(\r\n                text = stringResource(R.string.todo_update_group_list)\r\n            )\r\n        },\r\n        onItemChange = { viewModel.dispatch(UpdateGroupListAction.Change(it)) },\r\n        onSubmit = {\r\n            viewModel.dispatch(UpdateGroupListAction.Submit)\r\n            onSubmit()\r\n        },\r\n        onSkip = onSkip\r\n    )\r\n}",
  "start_lineno" : "42",
  "methodName" : "UpdateGroupListScreen",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\grouplist\\ui\\UpdateGroupListScreen.kt",
  "task_id" : "Compose-ToDo/40",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalTitle\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.List\n\r\n@Composable\r\nfun UpdateGroupListScreen(\r\n    viewModel: UpdateGroupListViewModel,\r\n    onSubmit: () -> Unit,\r\n    onSkip: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    UpdateGroupListScreen(\r\n        state = state,\r\n        title = {\r\n            PgModalTitle(\r\n                text = stringResource(R.string.todo_update_group_list)\r\n            )\r\n        },\r\n        onItemChange = { viewModel.dispatch(UpdateGroupListAction.Change(it)) },\r\n        onSubmit = {\r\n            viewModel.dispatch(UpdateGroupListAction.Submit)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val groupId",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "        } else {\r\n            it\r\n        }\r\n    }\r\n}",
  "context" : "fun List<GroupIdWithList>.update(item: GroupIdWithList, groupId: String): List<GroupIdWithList> {\r\n    return map {\r\n        if (it.list.id == item.list.id) {\r\n            val newGroupId = if (item.isUngroup()) {\r\n                groupId\r\n            } else {\r\n                ToDoGroupDb.DEFAULT_ID\r\n            }\r\n\r\n            it.copy(\r\n                groupId = newGroupId\r\n            )\r\n        } else {\r\n            it\r\n        }\r\n    }\r\n}",
  "start_lineno" : "62",
  "methodName" : "update",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\grouplist\\ui\\UpdateGroupListViewModel.kt",
  "task_id" : "Compose-ToDo/41",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<GroupIdWithList>.update(item: GroupIdWithList, groupId: String): List<GroupIdWithList> {\r\n    return map {\r\n        if (it.list.id == item.list.id) {\r\n            val newGroupId = if (item.isUngroup()) {\r\n                groupId\r\n            } else {\r\n                ToDoGroupDb.DEFAULT_ID\r\n            }\r\n\r\n            it.copy(\r\n                groupId = newGroupId\r\n            )\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "            .filter { !it }\r\n            .flatMapConcat { toDoListProvider.getListByGroupId(groupId).take(1) }\r\n            .map { it.map { list -> list.id } }\r\n            .onEach { toDoGroupProvider.ungroup(groupId, dateTimeProvider.now(), it) }\r\n    }",
  "context" : " @OptIn(FlowPreview::class)\r\n    override suspend fun deleteGroup(groupId: String): Flow<Any> {\r\n        return hasList(groupId)\r\n            .take(1)\r\n            .onEach {\r\n                if (it) {\r\n                    toDoGroupProvider.deleteGroup(groupId)\r\n                }\r\n            }\r\n            .filter { !it }\r\n            .flatMapConcat { toDoListProvider.getListByGroupId(groupId).take(1) }\r\n            .map { it.map { list -> list.id } }\r\n            .onEach { toDoGroupProvider.ungroup(groupId, dateTimeProvider.now(), it) }\r\n    }",
  "start_lineno" : "21",
  "methodName" : "deleteGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\data\\GroupMenuEnvironment.kt",
  "task_id" : "Compose-ToDo/42",
  "prompt" : "import kotlinx.coroutines.flow.take\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.FlowPreview\n @OptIn(FlowPreview::class)\r\n    override suspend fun deleteGroup(groupId: String): Flow<Any> {\r\n        return hasList(groupId)\r\n            .take(1)\r\n            .onEach {\r\n                if (it) {\r\n                    toDoGroupProvider.deleteGroup(groupId)\r\n                }\r\n            }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "            viewModel.dispatch(GroupMenuAction.ClickDelete)\r\n        },\r\n        onRenameClick = onRenameClick\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun GroupMenuScreen(\r\n    viewModel: GroupMenuViewModel,\r\n    onAddRemoveClick: () -> Unit,\r\n    onDeleteClick: () -> Unit,\r\n    onRenameClick: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    GroupMenuScreen(\r\n        items = state.items,\r\n        onAddRemoveClick = onAddRemoveClick,\r\n        onDeleteClick = {\r\n            onDeleteClick()\r\n            viewModel.dispatch(GroupMenuAction.ClickDelete)\r\n        },\r\n        onRenameClick = onRenameClick\r\n    )\r\n}",
  "start_lineno" : "23",
  "methodName" : "GroupMenuScreen",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuScreen.kt",
  "task_id" : "Compose-ToDo/43",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\n\r\n@Composable\r\nfun GroupMenuScreen(\r\n    viewModel: GroupMenuViewModel,\r\n    onAddRemoveClick: () -> Unit,\r\n    onDeleteClick: () -> Unit,\r\n    onRenameClick: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    GroupMenuScreen(\r\n        items = state.items,\r\n        onAddRemoveClick = onAddRemoveClick,\r\n        onDeleteClick = {\r\n            onDeleteClick()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "111",
  "ground_truth" : "            )\r\n        },\r\n        enabled = enabled\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun GroupMenuItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n    imageVector: ImageVector,\r\n    color: Color,\r\n    enabled: Boolean\r\n) {\r\n    PgModalCell(\r\n        onClick = onClick,\r\n        text = title,\r\n        color = color,\r\n        leftIcon = @Composable {\r\n            PgIcon(\r\n                imageVector = imageVector\r\n            )\r\n        },\r\n        enabled = enabled\r\n    )\r\n}",
  "start_lineno" : "91",
  "methodName" : "GroupMenuItem",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuScreen.kt",
  "task_id" : "Compose-ToDo/44",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalCell\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIcon\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun GroupMenuItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n    imageVector: ImageVector,\r\n    color: Color,\r\n    enabled: Boolean\r\n) {\r\n    PgModalCell(\r\n        onClick = onClick,\r\n        text = title,\r\n        color = color,\r\n        leftIcon = @Composable {\r\n            PgIcon(\r\n                imageVector = imageVector\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val groupId",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: GroupMenuAction) {\r\n        when (action) {\r\n            GroupMenuAction.ClickDelete -> {\r\n                viewModelScope.launch {\r\n                    if (!groupId.isNullOrBlank()) {\r\n                        environment.deleteGroup(groupId).collect()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "61",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuViewModel.kt",
  "task_id" : "Compose-ToDo/45",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.collect\nimport androidx.lifecycle.viewModelScope\nimport androidx.compose.material.icons.rounded.Delete\noverride fun dispatch(action: GroupMenuAction) {\r\n        when (action) {\r\n            GroupMenuAction.ClickDelete -> {\r\n                viewModelScope.launch {\r\n                    if (!groupId.isNullOrBlank()) {\r\n                        environment.deleteGroup(groupId).collect()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "        val tomorrow = LocalDateTime.of(dateTimeProvider.now().toLocalDate().plusDays(1), LocalTime.MIN)\r\n        return toDoTaskProvider.getOverallCount(tomorrow)\r\n    }",
  "context" : "override fun getOverallCount(): Flow<ToDoTaskOverallCount> {\r\n        val tomorrow = LocalDateTime.of(dateTimeProvider.now().toLocalDate().plusDays(1), LocalTime.MIN)\r\n        return toDoTaskProvider.getOverallCount(tomorrow)\r\n    }",
  "start_lineno" : "26",
  "methodName" : "getOverallCount",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\data\\ToDoMainEnvironment.kt",
  "task_id" : "Compose-ToDo/46",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTaskOverallCount\noverride fun getOverallCount(): Flow<ToDoTaskOverallCount> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "189",
  "ground_truth" : "        iconColor = ListRed,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun ScheduledTodayCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    currentDate: String,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_today),\r\n        iconText = currentDate,\r\n        icon = Icons.Rounded.CalendarToday,\r\n        iconColor = ListRed,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "start_lineno" : "170",
  "methodName" : "ScheduledTodayCell",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt",
  "task_id" : "Compose-ToDo/47",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material.icons.rounded.CalendarToday\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun ScheduledTodayCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    currentDate: String,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_today),\r\n        iconText = currentDate,\r\n        icon = Icons.Rounded.CalendarToday,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "207",
  "ground_truth" : "        iconColor = ListBlue,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun ScheduledCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_scheduled),\r\n        icon = Icons.Rounded.Event,\r\n        iconColor = ListBlue,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "start_lineno" : "190",
  "methodName" : "ScheduledCell",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt",
  "task_id" : "Compose-ToDo/48",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Event\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun ScheduledCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_scheduled),\r\n        icon = Icons.Rounded.Event,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "225",
  "ground_truth" : "        iconColor = CommonGrey,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun AllTaskCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    allTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = allTaskCount,\r\n        title = stringResource(R.string.todo_all),\r\n        icon = Icons.Rounded.Inbox,\r\n        iconColor = CommonGrey,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}",
  "start_lineno" : "208",
  "methodName" : "AllTaskCell",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt",
  "task_id" : "Compose-ToDo/49",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Inbox\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun AllTaskCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    allTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = allTaskCount,\r\n        title = stringResource(R.string.todo_all),\r\n        icon = Icons.Rounded.Inbox,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "457",
  "ground_truth" : "            )\r\n        }\r\n        Divider(color = color)\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun PgDivider(\r\n    needSpacer: Boolean,\r\n    color: Color = MaterialTheme.colorScheme.onSurface.copy(alpha = DividerAlpha),\r\n) {\r\n    Row {\r\n        if (needSpacer) {\r\n            Spacer(\r\n                Modifier\r\n                    .width(48.dp)\r\n                    .height(1.dp)\r\n                    .background(color = MaterialTheme.colorScheme.secondary)\r\n            )\r\n        }\r\n        Divider(color = color)\r\n    }\r\n}",
  "start_lineno" : "440",
  "methodName" : "PgDivider",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt",
  "task_id" : "Compose-ToDo/50",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.theme.DividerAlpha\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Divider\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nprivate fun PgDivider(\r\n    needSpacer: Boolean,\r\n    color: Color = MaterialTheme.colorScheme.onSurface.copy(alpha = DividerAlpha),\r\n) {\r\n    Row {\r\n        if (needSpacer) {\r\n            Spacer(\r\n                Modifier\r\n                    .width(48.dp)\r\n                    .height(1.dp)\r\n                    .background(color = MaterialTheme.colorScheme.secondary)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "472",
  "ground_truth" : "        false,\r\n        {},\r\n        {}\r\n    )\r\n}",
  "context" : "\r\n@Preview\r\n@Composable\r\nfun CellPreview() {\r\n    ListCell(\r\n        RectangleShape,\r\n        \"Name\",\r\n        \"23\",\r\n        ListRed,\r\n        true,\r\n        false,\r\n        {},\r\n        {}\r\n    )\r\n}",
  "start_lineno" : "458",
  "methodName" : "CellPreview",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt",
  "task_id" : "Compose-ToDo/51",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.theme.ListRed\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.List\n\r\n@Preview\r\n@Composable\r\nfun CellPreview() {\r\n    ListCell(\r\n        RectangleShape,\r\n        \"Name\",\r\n        \"23\",\r\n        ListRed,\r\n        true,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "                        )\r\n                    }\r\n                }\r\n        }\r\n    }",
  "context" : "private fun initToDo() {\r\n        viewModelScope.launch {\r\n            environment.getGroup()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            data = it,\r\n                            currentDate = environment.dateTimeProvider.now().dayOfMonth.toString()\r\n                        )\r\n                    }\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "68",
  "methodName" : "initToDo",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt",
  "task_id" : "Compose-ToDo/52",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initToDo() {\r\n        viewModelScope.launch {\r\n            environment.getGroup()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            data = it,\r\n                            currentDate = environment.dateTimeProvider.now().dayOfMonth.toString()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "                        )\r\n                    }\r\n                }\r\n        }\r\n    }",
  "context" : "private fun initOverallCount() {\r\n        viewModelScope.launch {\r\n            environment.getOverallCount()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            allTaskCount = it.allTaskCount.toString(),\r\n                            scheduledTodayTaskCount = it.scheduledTodayTaskCount.toString(),\r\n                            scheduledTaskCount = it.scheduledTaskCount.toString(),\r\n                        )\r\n                    }\r\n                }\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "initOverallCount",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt",
  "task_id" : "Compose-ToDo/53",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initOverallCount() {\r\n        viewModelScope.launch {\r\n            environment.getOverallCount()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            allTaskCount = it.allTaskCount.toString(),\r\n                            scheduledTodayTaskCount = it.scheduledTodayTaskCount.toString(),\r\n                            scheduledTaskCount = it.scheduledTaskCount.toString(),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "131",
  "ground_truth" : "        data.addAll(it.lists.toItemListMainState(selectedItemState))\r\n    }\r\n\r\n    return data\r\n}",
  "context" : "fun List<ToDoGroup>.toItemGroup(selectedItemState: SelectedItemState): List<ItemMainState> {\r\n    val data = mutableListOf<ItemMainState>()\r\n\r\n    forEach {\r\n        if (it.id != ToDoGroupDb.DEFAULT_ID) {\r\n            data.add(ItemMainState.ItemGroup(it))\r\n        }\r\n        data.addAll(it.lists.toItemListMainState(selectedItemState))\r\n    }\r\n\r\n    return data\r\n}",
  "start_lineno" : "120",
  "methodName" : "toItemGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt",
  "task_id" : "Compose-ToDo/54",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<ToDoGroup>.toItemGroup(selectedItemState: SelectedItemState): List<ItemMainState> {\r\n    val data = mutableListOf<ItemMainState>()\r\n\r\n    forEach {\r\n        if (it.id != ToDoGroupDb.DEFAULT_ID) {\r\n            data.add(ItemMainState.ItemGroup(it))\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "        }\r\n\r\n        return operation\r\n            .distinctUntilChanged()\r\n    }",
  "context" : "override fun getToDoTaskWithStepsOrderByDueDateWithList(maxDate: LocalDateTime?): Flow<List<TaskWithList>> {\r\n        val operation = if (maxDate != null) {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDateToday(maxDate)\r\n        } else {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDate()\r\n        }\r\n\r\n        return operation\r\n            .distinctUntilChanged()\r\n    }",
  "start_lineno" : "20",
  "methodName" : "getToDoTaskWithStepsOrderByDueDateWithList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\scheduled\\data\\ScheduledEnvironment.kt",
  "task_id" : "Compose-ToDo/55",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\noverride fun getToDoTaskWithStepsOrderByDueDateWithList(maxDate: LocalDateTime?): Flow<List<TaskWithList>> {\r\n        val operation = if (maxDate != null) {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDateToday(maxDate)\r\n        } else {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDate()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "context" : "override suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r\n            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "31",
  "methodName" : "toggleTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\scheduled\\data\\ScheduledEnvironment.kt",
  "task_id" : "Compose-ToDo/56",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggleStatusHandler\noverride suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "210",
  "ground_truth" : "                onTaskSwipeToDelete\r\n            )\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun ScheduledContent(\r\n    items: List<ItemScheduledState>,\r\n    header: @Composable ColumnScope.() -> Unit,\r\n    onTaskItemClick: (ItemScheduledState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    PgPageLayout {\r\n        header()\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .weight(1F)\r\n        ) {\r\n            TaskContent(\r\n                items,\r\n                onTaskItemClick,\r\n                onTaskStatusItemClick,\r\n                onTaskSwipeToDelete\r\n            )\r\n        }\r\n    }\r\n}",
  "start_lineno" : "185",
  "methodName" : "ScheduledContent",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\scheduled\\ui\\ScheduledScreen.kt",
  "task_id" : "Compose-ToDo/57",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgPageLayout\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nprivate fun ScheduledContent(\r\n    items: List<ItemScheduledState>,\r\n    header: @Composable ColumnScope.() -> Unit,\r\n    onTaskItemClick: (ItemScheduledState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    PgPageLayout {\r\n        header()\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .weight(1F)\r\n        ) {\r\n            TaskContent(\r\n                items,\r\n                onTaskItemClick,\r\n                onTaskStatusItemClick,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "context" : "override suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r\n            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(toDoTask.id, nextDueDate, toDoTask.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "37",
  "methodName" : "toggleTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\search\\data\\SearchEnvironment.kt",
  "task_id" : "Compose-ToDo/58",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggleStatusHandler\noverride suspend fun toggleTaskStatus(toDoTask: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTask.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(toDoTask.id, newStatus, completedAt, currentDate)\r\n            },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "163",
  "ground_truth" : "        onTaskItemClick,\r\n        onTaskStatusItemClick,\r\n        onTaskSwipeToDelete\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun SearchContent(\r\n    items: List<ItemAllState>,\r\n    onTaskItemClick: (ItemAllState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    TaskContent(\r\n        items,\r\n        onTaskItemClick,\r\n        onTaskStatusItemClick,\r\n        onTaskSwipeToDelete\r\n    )\r\n}",
  "start_lineno" : "149",
  "methodName" : "SearchContent",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\search\\ui\\SearchScreen.kt",
  "task_id" : "Compose-ToDo/59",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.all.ui.TaskContent\nimport com.wisnu.kurniawan.composetodolist.features.todo.all.ui.ItemAllState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Search\n\r\n@Composable\r\nfun SearchContent(\r\n    items: List<ItemAllState>,\r\n    onTaskItemClick: (ItemAllState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    TaskContent(\r\n        items,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "                toDoListProvider.getListById(listId)\r\n                    .take(1)\r\n                    .map { Pair(task, it.color) }\r\n            }\r\n    }",
  "context" : "override fun getTask(taskId: String, listId: String): Flow<Pair<ToDoTask, ToDoColor>> {\r\n        return toDoTaskProvider.getTaskWithStepsById(taskId)\r\n            .flatMapConcat { task ->\r\n                toDoListProvider.getListById(listId)\r\n                    .take(1)\r\n                    .map { Pair(task, it.color) }\r\n            }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "getTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt",
  "task_id" : "Compose-ToDo/60",
  "prompt" : "import kotlinx.coroutines.flow.flatMapConcat\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoColor\noverride fun getTask(taskId: String, listId: String): Flow<Pair<ToDoTask, ToDoColor>> {\r\n        return toDoTaskProvider.getTaskWithStepsById(taskId)\r\n            .flatMapConcat { task ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(task.id, nextDueDate, task.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "context" : "override suspend fun toggleTaskStatus(task: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        task.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(task.id, newStatus, completedAt, currentDate)\r\n            },\r\n            { nextDueDate ->\r\n                toDoTaskProvider.updateTaskDueDate(task.id, nextDueDate, task.isDueDateTimeSet, currentDate)\r\n            }\r\n        )\r\n    }",
  "start_lineno" : "44",
  "methodName" : "toggleTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt",
  "task_id" : "Compose-ToDo/61",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggleStatusHandler\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.toggle\noverride suspend fun toggleTaskStatus(task: ToDoTask) {\r\n        val currentDate = dateTimeProvider.now()\r\n        task.toggleStatusHandler(\r\n            currentDate,\r\n            { completedAt, newStatus ->\r\n                toDoTaskProvider.updateTaskStatus(task.id, newStatus, completedAt, currentDate)\r\n            },\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "79",
  "ground_truth" : "                )\r\n            ),\r\n            taskId\r\n        )\r\n    }",
  "context" : "override suspend fun createStep(name: String, taskId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoStepProvider.insertStep(\r\n            listOf(\r\n                ToDoStep(\r\n                    id = idProvider.generate(),\r\n                    name = name,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r\n                )\r\n            ),\r\n            taskId\r\n        )\r\n    }",
  "start_lineno" : "65",
  "methodName" : "createStep",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt",
  "task_id" : "Compose-ToDo/62",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStep\noverride suspend fun createStep(name: String, taskId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoStepProvider.insertStep(\r\n            listOf(\r\n                ToDoStep(\r\n                    id = idProvider.generate(),\r\n                    name = name,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "104",
  "ground_truth" : "        val currentDate = dateTimeProvider.now()\r\n        toDoTaskProvider.updateTaskNote(taskId, note, currentDate)\r\n    }",
  "context" : "override suspend fun updateTaskNote(note: String, taskId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n        toDoTaskProvider.updateTaskNote(taskId, note, currentDate)\r\n    }",
  "start_lineno" : "101",
  "methodName" : "updateTaskNote",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt",
  "task_id" : "Compose-ToDo/63",
  "prompt" : "override suspend fun updateTaskNote(note: String, taskId: String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "291",
  "ground_truth" : "                PgIcon(imageVector = Icons.Rounded.ChevronLeft)\r\n            }\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nprivate fun StepTitle(\r\n    onClickBack: () -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier\r\n            .height(56.dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 4.dp)\r\n                .align(Alignment.CenterStart)\r\n        ) {\r\n            PgIconButton(\r\n                onClick = onClickBack,\r\n                color = Color.Transparent\r\n            ) {\r\n                PgIcon(imageVector = Icons.Rounded.ChevronLeft)\r\n            }\r\n        }\r\n    }\r\n}",
  "start_lineno" : "268",
  "methodName" : "StepTitle",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepScreen.kt",
  "task_id" : "Compose-ToDo/64",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIconButton\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIcon\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nprivate fun StepTitle(\r\n    onClickBack: () -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier\r\n            .height(56.dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 4.dp)\r\n                .align(Alignment.CenterStart)\r\n        ) {\r\n            PgIconButton(\r\n                onClick = onClickBack,\r\n                color = Color.Transparent\r\n            ) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val taskId\nval listId\nvar updateNoteJob Job?",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "                        setState { copy(task = task, color = color, repeatItems = repeatItems.select(task.repeat)) }\r\n                    }\r\n            }\r\n        }\r\n    }",
  "context" : "private fun initTask() {\r\n        viewModelScope.launch {\r\n            if (taskId != null && listId != null) {\r\n                environment.getTask(taskId, listId)\r\n                    .collect { (task, color) ->\r\n                        setState { copy(task = task, color = color, repeatItems = repeatItems.select(task.repeat)) }\r\n                    }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "39",
  "methodName" : "initTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt",
  "task_id" : "Compose-ToDo/65",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initTask() {\r\n        viewModelScope.launch {\r\n            if (taskId != null && listId != null) {\r\n                environment.getTask(taskId, listId)\r\n                    .collect { (task, color) ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskId\nval listId\nvar updateNoteJob Job?",
  "app_type" : "notes",
  "end_lineno" : "56",
  "ground_truth" : "            is StepAction.TaskAction -> handleTaskAction(action)\r\n            is StepAction.StepItemAction -> handleStepItemAction(action)\r\n            is StepAction.NoteAction -> handleStepNoteAction(action)\r\n        }\r\n    }",
  "context" : "override fun dispatch(action: StepAction) {\r\n        when (action) {\r\n            is StepAction.TaskAction -> handleTaskAction(action)\r\n            is StepAction.StepItemAction -> handleStepItemAction(action)\r\n            is StepAction.NoteAction -> handleStepNoteAction(action)\r\n        }\r\n    }",
  "start_lineno" : "50",
  "methodName" : "dispatch",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt",
  "task_id" : "Compose-ToDo/66",
  "prompt" : "override fun dispatch(action: StepAction) {\r\n        when (action) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskId\nval listId\nvar updateNoteJob Job?",
  "app_type" : "notes",
  "end_lineno" : "176",
  "ground_truth" : "            is StepAction.StepItemAction.Edit -> handleStepItemEditAction(action)\r\n        }\r\n    }",
  "context" : "private fun handleStepItemAction(action: StepAction.StepItemAction) {\r\n        when (action) {\r\n            is StepAction.StepItemAction.Create -> handleStepItemCreateAction(action)\r\n            is StepAction.StepItemAction.Edit -> handleStepItemEditAction(action)\r\n        }\r\n    }",
  "start_lineno" : "171",
  "methodName" : "handleStepItemAction",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt",
  "task_id" : "Compose-ToDo/67",
  "prompt" : "private fun handleStepItemAction(action: StepAction.StepItemAction) {\r\n        when (action) {\r\n            is StepAction.StepItemAction.Create -> handleStepItemCreateAction(action)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskId\nval listId\nvar updateNoteJob Job?",
  "app_type" : "notes",
  "end_lineno" : "264",
  "ground_truth" : "    val localTime = dueDate?.toLocalTime() ?: DEFAULT_TASK_LOCAL_TIME\r\n    return LocalDateTime.of(newLocalDate, localTime)\r\n}",
  "context" : "fun ToDoTask.updatedDate(newLocalDate: LocalDate): LocalDateTime {\r\n    val localTime = dueDate?.toLocalTime() ?: DEFAULT_TASK_LOCAL_TIME\r\n    return LocalDateTime.of(newLocalDate, localTime)\r\n}",
  "start_lineno" : "261",
  "methodName" : "updatedDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt",
  "task_id" : "Compose-ToDo/68",
  "prompt" : "import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.updatedDate(newLocalDate: LocalDate): LocalDateTime {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val taskId\nval listId\nvar updateNoteJob Job?",
  "app_type" : "notes",
  "end_lineno" : "269",
  "ground_truth" : "    val localDate = dueDate?.toLocalDate() ?: defaultDate\r\n    return LocalDateTime.of(localDate, newLocalTime)\r\n}",
  "context" : "fun ToDoTask.updatedTime(defaultDate: LocalDate, newLocalTime: LocalTime): LocalDateTime {\r\n    val localDate = dueDate?.toLocalDate() ?: defaultDate\r\n    return LocalDateTime.of(localDate, newLocalTime)\r\n}",
  "start_lineno" : "266",
  "methodName" : "updatedTime",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt",
  "task_id" : "Compose-ToDo/69",
  "prompt" : "import java.time.LocalTime\nimport java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.updatedTime(defaultDate: LocalDate, newLocalTime: LocalTime): LocalDateTime {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val alarmManager\nval flags",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "            flags\r\n        )\r\n\r\n        setAlarm(time.toMillis(), pendingIntent)\r\n    }",
  "context" : "fun scheduleTaskAlarm(task: ToDoTask, time: LocalDateTime) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java).apply {\r\n            action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n            putExtra(TaskBroadcastReceiver.EXTRA_TASK_ID, task.id)\r\n        }\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r\n            flags\r\n        )\r\n\r\n        setAlarm(time.toMillis(), pendingIntent)\r\n    }",
  "start_lineno" : "29",
  "methodName" : "scheduleTaskAlarm",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt",
  "task_id" : "Compose-ToDo/70",
  "prompt" : "import java.time.LocalDateTime\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.taskreminder.ui.TaskBroadcastReceiver\nimport com.wisnu.foundation.coredatetime.toMillis\nimport android.content.Intent\nimport android.app.PendingIntent\nfun scheduleTaskAlarm(task: ToDoTask, time: LocalDateTime) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java).apply {\r\n            action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n            putExtra(TaskBroadcastReceiver.EXTRA_TASK_ID, task.id)\r\n        }\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val alarmManager\nval flags",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "            flags\r\n        )\r\n\r\n        cancelAlarm(pendingIntent)\r\n    }",
  "context" : "fun cancelTaskAlarm(task: ToDoTask) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java)\r\n        receiverIntent.action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r\n            flags\r\n        )\r\n\r\n        cancelAlarm(pendingIntent)\r\n    }",
  "start_lineno" : "45",
  "methodName" : "cancelTaskAlarm",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt",
  "task_id" : "Compose-ToDo/71",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.taskreminder.ui.TaskBroadcastReceiver\nimport com.wisnu.foundation.coredatetime.toMillis\nimport android.content.Intent\nimport android.app.PendingIntent\nfun cancelTaskAlarm(task: ToDoTask) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java)\r\n        receiverIntent.action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val alarmManager\nval flags",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "\r\n        alarmManager?.let {\r\n            AlarmManagerCompat.setAndAllowWhileIdle(it, AlarmManager.RTC_WAKEUP, triggerAtMillis, operation)\r\n        }\r\n    }",
  "context" : "private fun setAlarm(\r\n        triggerAtMillis: Long,\r\n        operation: PendingIntent?\r\n    ) {\r\n        if (operation == null) {\r\n            return\r\n        }\r\n\r\n        alarmManager?.let {\r\n            AlarmManagerCompat.setAndAllowWhileIdle(it, AlarmManager.RTC_WAKEUP, triggerAtMillis, operation)\r\n        }\r\n    }",
  "start_lineno" : "59",
  "methodName" : "setAlarm",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt",
  "task_id" : "Compose-ToDo/72",
  "prompt" : "import android.content.Intent\nimport android.app.PendingIntent\nprivate fun setAlarm(\r\n        triggerAtMillis: Long,\r\n        operation: PendingIntent?\r\n    ) {\r\n        if (operation == null) {\r\n            return\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val alarmManager\nval flags",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "            return\r\n        }\r\n\r\n        alarmManager?.cancel(operation)\r\n    }",
  "context" : "private fun cancelAlarm(operation: PendingIntent?) {\r\n        if (operation == null) {\r\n            return\r\n        }\r\n\r\n        alarmManager?.cancel(operation)\r\n    }",
  "start_lineno" : "72",
  "methodName" : "cancelAlarm",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt",
  "task_id" : "Compose-ToDo/73",
  "prompt" : "import android.content.Intent\nimport android.app.PendingIntent\nprivate fun cancelAlarm(operation: PendingIntent?) {\r\n        if (operation == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "        notificationManager?.notify(\r\n            id,\r\n            builder.build()\r\n        )\r\n    }",
  "context" : "fun show(task: ToDoTask, toDoList: ToDoList) {\r\n        val builder = buildNotification(task, toDoList)\r\n        val id = task.createdAt.toMillis().toInt()\r\n        notificationManager?.notify(\r\n            id,\r\n            builder.build()\r\n        )\r\n    }",
  "start_lineno" : "55",
  "methodName" : "show",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/74",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.foundation.coredatetime.toMillis\nfun show(task: ToDoTask, toDoList: ToDoList) {\r\n        val builder = buildNotification(task, toDoList)\r\n        val id = task.createdAt.toMillis().toInt()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "        val id = task.createdAt.toMillis().toInt()\r\n        notificationManager?.cancel(id)\r\n    }",
  "context" : "fun dismiss(task: ToDoTask) {\r\n        val id = task.createdAt.toMillis().toInt()\r\n        notificationManager?.cancel(id)\r\n    }",
  "start_lineno" : "64",
  "methodName" : "dismiss",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/75",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun dismiss(task: ToDoTask) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "108",
  "ground_truth" : "        val intent = getIntent(taskId, TaskBroadcastReceiver.ACTION_NOTIFICATION_COMPLETED, REQUEST_CODE_ACTION_COMPLETE)\r\n        return NotificationCompat.Action(ACTION_NO_ICON, actionTitle, intent)\r\n    }",
  "context" : "private fun getCompleteAction(taskId: String): NotificationCompat.Action {\r\n        val actionTitle = getLocalizedContext().getString(R.string.todo_done)\r\n        val intent = getIntent(taskId, TaskBroadcastReceiver.ACTION_NOTIFICATION_COMPLETED, REQUEST_CODE_ACTION_COMPLETE)\r\n        return NotificationCompat.Action(ACTION_NO_ICON, actionTitle, intent)\r\n    }",
  "start_lineno" : "104",
  "methodName" : "getCompleteAction",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/76",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.core.app.NotificationCompat\nimport android.content.Context\nprivate fun getCompleteAction(taskId: String): NotificationCompat.Action {\r\n        val actionTitle = getLocalizedContext().getString(R.string.todo_done)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "114",
  "ground_truth" : "        val intent = getIntent(taskId, TaskBroadcastReceiver.ACTION_NOTIFICATION_SNOOZE, REQUEST_CODE_ACTION_SNOOZE)\r\n        return NotificationCompat.Action(ACTION_NO_ICON, actionTitle, intent)\r\n    }",
  "context" : "private fun getSnoozeAction(taskId: String): NotificationCompat.Action {\r\n        val actionTitle = getLocalizedContext().getString(R.string.todo_task_notification_action_snooze)\r\n        val intent = getIntent(taskId, TaskBroadcastReceiver.ACTION_NOTIFICATION_SNOOZE, REQUEST_CODE_ACTION_SNOOZE)\r\n        return NotificationCompat.Action(ACTION_NO_ICON, actionTitle, intent)\r\n    }",
  "start_lineno" : "110",
  "methodName" : "getSnoozeAction",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/77",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.R\nimport androidx.core.app.NotificationCompat\nimport android.content.Context\nprivate fun getSnoozeAction(taskId: String): NotificationCompat.Action {\r\n        val actionTitle = getLocalizedContext().getString(R.string.todo_task_notification_action_snooze)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "                requestCode,\r\n                receiverIntent,\r\n                PendingIntent.FLAG_CANCEL_CURRENT or PendingIntent.FLAG_IMMUTABLE\r\n            )\r\n    }",
  "context" : "private fun getIntent(\r\n        taskId: String,\r\n        intentAction: String,\r\n        requestCode: Int\r\n    ): PendingIntent {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java).apply {\r\n            action = intentAction\r\n            putExtra(TaskBroadcastReceiver.EXTRA_TASK_ID, taskId)\r\n        }\r\n\r\n        return PendingIntent\r\n            .getBroadcast(\r\n                context,\r\n                requestCode,\r\n                receiverIntent,\r\n                PendingIntent.FLAG_CANCEL_CURRENT or PendingIntent.FLAG_IMMUTABLE\r\n            )\r\n    }",
  "start_lineno" : "116",
  "methodName" : "getIntent",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/78",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.features.todo.taskreminder.ui.TaskBroadcastReceiver\nimport com.wisnu.kurniawan.composetodolist.R\nimport android.content.Intent\nimport android.app.PendingIntent\nprivate fun getIntent(\r\n        taskId: String,\r\n        intentAction: String,\r\n        requestCode: Int\r\n    ): PendingIntent {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java).apply {\r\n            action = intentAction\r\n            putExtra(TaskBroadcastReceiver.EXTRA_TASK_ID, taskId)\r\n        }\r\n\r\n        return PendingIntent\r\n            .getBroadcast(\r\n                context,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val notificationManager\nval REQUEST_CODE_OPEN_TASK\nval REQUEST_CODE_ACTION_COMPLETE\nval REQUEST_CODE_ACTION_SNOOZE\nval ACTION_NO_ICON\nval CHANNEL_ID",
  "app_type" : "notes",
  "end_lineno" : "138",
  "ground_truth" : "        val locale = AppCompatDelegate.getApplicationLocales().get(0) ?: Locale.getDefault()\r\n        return LocalizationUtil.applyLanguageContext(context, locale)\r\n    }",
  "context" : "private fun getLocalizedContext(): Context {\r\n        val locale = AppCompatDelegate.getApplicationLocales().get(0) ?: Locale.getDefault()\r\n        return LocalizationUtil.applyLanguageContext(context, locale)\r\n    }",
  "start_lineno" : "135",
  "methodName" : "getLocalizedContext",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt",
  "task_id" : "Compose-ToDo/79",
  "prompt" : "import android.content.Context\nprivate fun getLocalizedContext(): Context {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "            .onEach { (list, task) ->\r\n                Loggr.debug(\"AlarmFlow\") { \"AlarmShow $task $list\" }\r\n                notificationManager.show(task, list)\r\n            }\r\n    }",
  "context" : "override fun notifyNotification(taskId: String): Flow<TaskWithList> {\r\n        return getTask(taskId)\r\n            .onEach { (list, task) ->\r\n                Loggr.debug(\"AlarmFlow\") { \"AlarmShow $task $list\" }\r\n                notificationManager.show(task, list)\r\n            }\r\n    }",
  "start_lineno" : "24",
  "methodName" : "notifyNotification",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskReminderEnvironment.kt",
  "task_id" : "Compose-ToDo/80",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\noverride fun notifyNotification(taskId: String): Flow<TaskWithList> {\r\n        return getTask(taskId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            .onEach { task ->\r\n                alarmManager.scheduleTaskAlarm(task.task, dateTimeProvider.now().plusMinutes(15))\r\n                notificationManager.dismiss(task.task)\r\n            }\r\n    }",
  "context" : "override fun snoozeReminder(taskId: String): Flow<TaskWithList> {\r\n        return getTask(taskId)\r\n            .onEach { task ->\r\n                alarmManager.scheduleTaskAlarm(task.task, dateTimeProvider.now().plusMinutes(15))\r\n                notificationManager.dismiss(task.task)\r\n            }\r\n    }",
  "start_lineno" : "32",
  "methodName" : "snoozeReminder",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskReminderEnvironment.kt",
  "task_id" : "Compose-ToDo/81",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\noverride fun snoozeReminder(taskId: String): Flow<TaskWithList> {\r\n        return getTask(taskId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "                tasks.forEach {\r\n                    alarmManager.scheduleTaskAlarm(it, it.getNextScheduledDueDate(dateTimeProvider.now()))\r\n                }\r\n            }\r\n    }",
  "context" : "override fun restartAllReminder(): Flow<List<ToDoTask>> {\r\n        return toDoTaskProvider.getScheduledTasks()\r\n            .take(1)\r\n            .onEach { tasks ->\r\n                tasks.forEach {\r\n                    alarmManager.scheduleTaskAlarm(it, it.getNextScheduledDueDate(dateTimeProvider.now()))\r\n                }\r\n            }\r\n    }",
  "start_lineno" : "59",
  "methodName" : "restartAllReminder",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskReminderEnvironment.kt",
  "task_id" : "Compose-ToDo/82",
  "prompt" : "import kotlinx.coroutines.flow.take\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\noverride fun restartAllReminder(): Flow<List<ToDoTask>> {\r\n        return toDoTaskProvider.getScheduledTasks()\r\n            .take(1)\r\n            .onEach { tasks ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "            .filter { task ->\r\n                task.task.status != ToDoStatus.COMPLETE &&\r\n                    task.task.dueDate != null\r\n            }\r\n    }",
  "context" : "private fun getTask(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskProvider.getTaskWithListById(taskId)\r\n            .take(1)\r\n            .filter { task ->\r\n                task.task.status != ToDoStatus.COMPLETE &&\r\n                    task.task.dueDate != null\r\n            }\r\n    }",
  "start_lineno" : "69",
  "methodName" : "getTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskReminderEnvironment.kt",
  "task_id" : "Compose-ToDo/83",
  "prompt" : "import kotlinx.coroutines.flow.take\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nprivate fun getTask(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskProvider.getTaskWithListById(taskId)\r\n            .take(1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "\r\n        return date.toLocalDateTime()\r\n    }",
  "context" : " @TypeConverter\r\n    fun toDate(date: Long?): LocalDateTime? {\r\n        if (date == null) return null\r\n\r\n        return date.toLocalDateTime()\r\n    }",
  "start_lineno" : "10",
  "methodName" : "toDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\converter\\DateConverter.kt",
  "task_id" : "Compose-ToDo/84",
  "prompt" : "import java.time.LocalDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun toDate(date: Long?): LocalDateTime? {\r\n        if (date == null) return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "\r\n        return date.toMillis()\r\n    }",
  "context" : " @TypeConverter\r\n    fun toDateLong(date: LocalDateTime?): Long? {\r\n        if (date == null) return null\r\n\r\n        return date.toMillis()\r\n    }",
  "start_lineno" : "17",
  "methodName" : "toDateLong",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\converter\\DateConverter.kt",
  "task_id" : "Compose-ToDo/85",
  "prompt" : "import java.time.LocalDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun toDateLong(date: LocalDateTime?): Long? {\r\n        if (date == null) return null\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            groupId = list.groupId,\r\n            list = list.toToDoList()\r\n        )\r\n    }\r\n}",
  "context" : "fun List<ToDoListDb>.toGroupIdWithList(): List<GroupIdWithList> {\r\n    return map { list ->\r\n        GroupIdWithList(\r\n            groupId = list.groupId,\r\n            list = list.toToDoList()\r\n        )\r\n    }\r\n}",
  "start_lineno" : "14",
  "methodName" : "toGroupIdWithList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt",
  "task_id" : "Compose-ToDo/86",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nfun List<ToDoListDb>.toGroupIdWithList(): List<GroupIdWithList> {\r\n    return map { list ->\r\n        GroupIdWithList(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "        it.group.toGroup(it.listWithTasks.toDoListWithTasksToToDoList())\r\n    }\r\n}",
  "context" : "fun List<ToDoGroupWithList>.groupWithListToGroup(): List<ToDoGroup> {\r\n    return map {\r\n        it.group.toGroup(it.listWithTasks.toDoListWithTasksToToDoList())\r\n    }\r\n}",
  "start_lineno" : "23",
  "methodName" : "groupWithListToGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt",
  "task_id" : "Compose-ToDo/87",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupWithList\nfun List<ToDoGroupWithList>.groupWithListToGroup(): List<ToDoGroup> {\r\n    return map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "37",
  "ground_truth" : "        createdAt = createdAt,\r\n        updatedAt = updatedAt,\r\n        lists = lists\r\n    )\r\n}",
  "context" : "fun ToDoGroupDb.toGroup(lists: List<ToDoList> = listOf()): ToDoGroup {\r\n    return ToDoGroup(\r\n        id = id,\r\n        name = name,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt,\r\n        lists = lists\r\n    )\r\n}",
  "start_lineno" : "29",
  "methodName" : "toGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt",
  "task_id" : "Compose-ToDo/88",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun ToDoGroupDb.toGroup(lists: List<ToDoList> = listOf()): ToDoGroup {\r\n    return ToDoGroup(\r\n        id = id,\r\n        name = name,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "context" : "fun List<ToDoGroup>.toGroupDp(): List<ToDoGroupDb> {\r\n    return map {\r\n        ToDoGroupDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "start_lineno" : "39",
  "methodName" : "toGroupDp",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt",
  "task_id" : "Compose-ToDo/89",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<ToDoGroup>.toGroupDp(): List<ToDoGroupDb> {\r\n    return map {\r\n        ToDoGroupDb(\r\n            id = it.id,\r\n            name = it.name,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "        tasks = tasks,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "context" : "fun ToDoListDb.toToDoList(tasks: List<ToDoTask> = listOf()): ToDoList {\r\n    return ToDoList(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r\n        tasks = tasks,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "start_lineno" : "21",
  "methodName" : "toToDoList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoListMapper.kt",
  "task_id" : "Compose-ToDo/90",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nfun ToDoListDb.toToDoList(tasks: List<ToDoTask> = listOf()): ToDoList {\r\n    return ToDoList(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        groupId = groupId,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "context" : "private fun ToDoList.toToDoListDb(groupId: String): ToDoListDb {\r\n    return ToDoListDb(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r\n        groupId = groupId,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "start_lineno" : "40",
  "methodName" : "toToDoListDb",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoListMapper.kt",
  "task_id" : "Compose-ToDo/91",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nprivate fun ToDoList.toToDoListDb(groupId: String): ToDoListDb {\r\n    return ToDoListDb(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "16",
  "ground_truth" : "            createdAt = step.createdAt,\r\n            updatedAt = step.updatedAt\r\n        )\r\n    }\r\n}",
  "context" : "fun List<ToDoStepDb>.toStep(): List<ToDoStep> {\r\n    return map { step ->\r\n        ToDoStep(\r\n            id = step.id,\r\n            name = step.name,\r\n            status = step.status,\r\n            createdAt = step.createdAt,\r\n            updatedAt = step.updatedAt\r\n        )\r\n    }\r\n}",
  "start_lineno" : "6",
  "methodName" : "toStep",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoStepMapper.kt",
  "task_id" : "Compose-ToDo/92",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoStepDb\nfun List<ToDoStepDb>.toStep(): List<ToDoStep> {\r\n    return map { step ->\r\n        ToDoStep(\r\n            id = step.id,\r\n            name = step.name,\r\n            status = step.status,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "context" : "fun List<ToDoStep>.toStepDb(taskId: String): List<ToDoStepDb> {\r\n    return map {\r\n        ToDoStepDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            taskId = taskId,\r\n            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "start_lineno" : "18",
  "methodName" : "toStepDb",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoStepMapper.kt",
  "task_id" : "Compose-ToDo/93",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoStepDb\nfun List<ToDoStep>.toStepDb(taskId: String): List<ToDoStepDb> {\r\n    return map {\r\n        ToDoStepDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            taskId = taskId,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "        noteUpdatedAt = noteUpdatedAt,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "context" : "fun ToDoTaskDb.toTask(steps: List<ToDoStep> = listOf()): ToDoTask {\r\n    return ToDoTask(\r\n        id = id,\r\n        name = name,\r\n        status = status,\r\n        steps = steps,\r\n        completedAt = completedAt,\r\n        dueDate = dueDate,\r\n        isDueDateTimeSet = isDueDateTimeSet,\r\n        repeat = repeat,\r\n        note = note,\r\n        noteUpdatedAt = noteUpdatedAt,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}",
  "start_lineno" : "20",
  "methodName" : "toTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoTaskMapper.kt",
  "task_id" : "Compose-ToDo/94",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoTaskDb\nfun ToDoTaskDb.toTask(steps: List<ToDoStep> = listOf()): ToDoTask {\r\n    return ToDoTask(\r\n        id = id,\r\n        name = name,\r\n        status = status,\r\n        steps = steps,\r\n        completedAt = completedAt,\r\n        dueDate = dueDate,\r\n        isDueDateTimeSet = isDueDateTimeSet,\r\n        repeat = repeat,\r\n        note = note,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "context" : "fun List<ToDoTask>.toTaskDb(listId: String): List<ToDoTaskDb> {\r\n    return map {\r\n        ToDoTaskDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            listId = listId,\r\n            dueDate = it.dueDate,\r\n            completedAt = it.completedAt,\r\n            isDueDateTimeSet = it.isDueDateTimeSet,\r\n            repeat = it.repeat,\r\n            note = it.note,\r\n            noteUpdatedAt = it.noteUpdatedAt,\r\n            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "toTaskDb",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoTaskMapper.kt",
  "task_id" : "Compose-ToDo/95",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoTaskDb\nfun List<ToDoTask>.toTaskDb(listId: String): List<ToDoTaskDb> {\r\n    return map {\r\n        ToDoTaskDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            listId = listId,\r\n            dueDate = it.dueDate,\r\n            completedAt = it.completedAt,\r\n            isDueDateTimeSet = it.isDueDateTimeSet,\r\n            repeat = it.repeat,\r\n            note = it.note,\r\n            noteUpdatedAt = it.noteUpdatedAt,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getGroup(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroup()\r\n            .filterNotNull()\r\n            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "29",
  "methodName" : "getGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/96",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroup()\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getGroup(groupId: String): Flow<ToDoGroup> {\r\n        return toDoGroupReadDao.getGroup(groupId)\r\n            .filterNotNull()\r\n            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "36",
  "methodName" : "getGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/97",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(groupId: String): Flow<ToDoGroup> {\r\n        return toDoGroupReadDao.getGroup(groupId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "            .map { it.groupWithListToGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getGroupWithList(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroupWithList()\r\n            .filterNotNull()\r\n            .map { it.groupWithListToGroup() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "43",
  "methodName" : "getGroupWithList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/98",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroupWithList(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroupWithList()\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "            toDoGroupWriteDao.insertGroup(data.toGroupDp())\r\n        }\r\n    }",
  "context" : "suspend fun insertGroup(data: List<ToDoGroup>) {\r\n        withContext(dispatcher) {\r\n            toDoGroupWriteDao.insertGroup(data.toGroupDp())\r\n        }\r\n    }",
  "start_lineno" : "50",
  "methodName" : "insertGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/99",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nsuspend fun insertGroup(data: List<ToDoGroup>) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "61",
  "ground_truth" : "            toDoGroupWriteDao.deleteGroup(groupId)\r\n        }\r\n    }",
  "context" : "suspend fun ungroup(groupId: String, updatedAt: LocalDateTime, listIds: List<String>) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.updateListGroup(listIds, ToDoGroupDb.DEFAULT_ID, updatedAt)\r\n            toDoGroupWriteDao.deleteGroup(groupId)\r\n        }\r\n    }",
  "start_lineno" : "56",
  "methodName" : "ungroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/100",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nsuspend fun ungroup(groupId: String, updatedAt: LocalDateTime, listIds: List<String>) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.updateListGroup(listIds, ToDoGroupDb.DEFAULT_ID, updatedAt)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "            toDoGroupWriteDao.updateGroupName(id, name, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateGroupName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoGroupWriteDao.updateGroupName(id, name, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "63",
  "methodName" : "updateGroupName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/101",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateGroupName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "            toDoGroupWriteDao.deleteGroup(id)\r\n        }\r\n    }",
  "context" : "suspend fun deleteGroup(id: String) {\r\n        withContext(dispatcher) {\r\n            toDoGroupWriteDao.deleteGroup(id)\r\n        }\r\n    }",
  "start_lineno" : "69",
  "methodName" : "deleteGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt",
  "task_id" : "Compose-ToDo/102",
  "prompt" : "import kotlinx.coroutines.withContext\nsuspend fun deleteGroup(id: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "            .map { it.toDoListWithTasksToToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getListWithTasks(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListWithTasks()\r\n            .filterNotNull()\r\n            .map { it.toDoListWithTasksToToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "28",
  "methodName" : "getListWithTasks",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/103",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListWithTasks(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListWithTasks()\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getList(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getList()\r\n            .filterNotNull()\r\n            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "35",
  "methodName" : "getList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/104",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getList(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getList()\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "47",
  "ground_truth" : "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getListById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListById(listId)\r\n            .filterNotNull()\r\n            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "42",
  "methodName" : "getListById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/105",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListById(listId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getListByGroupId(groupId: String): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListByGroupId(groupId)\r\n            .filterNotNull()\r\n            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "49",
  "methodName" : "getListByGroupId",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/106",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListByGroupId(groupId: String): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListByGroupId(groupId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getListWithTasksById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListWithTasksById(listId)\r\n            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "56",
  "methodName" : "getListWithTasksById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/107",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListWithTasksById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListWithTasksById(listId)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "            .map { it.toGroupIdWithList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getListWithUnGroupList(groupId: String): Flow<List<GroupIdWithList>> {\r\n        return toDoListReadDao.getListWithUnGroupList(groupId)\r\n            .filterNotNull()\r\n            .map { it.toGroupIdWithList() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "62",
  "methodName" : "getListWithUnGroupList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/108",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nfun getListWithUnGroupList(groupId: String): Flow<List<GroupIdWithList>> {\r\n        return toDoListReadDao.getListWithUnGroupList(groupId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "74",
  "ground_truth" : "            toDoListWriteDao.insertList(data.toToDoListDb(groupId))\r\n        }\r\n    }",
  "context" : "suspend fun insertList(data: List<ToDoList>, groupId: String) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.insertList(data.toToDoListDb(groupId))\r\n        }\r\n    }",
  "start_lineno" : "70",
  "methodName" : "insertList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/109",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nsuspend fun insertList(data: List<ToDoList>, groupId: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "            toDoListWriteDao.deleteListById(listId)\r\n        }\r\n    }",
  "context" : "suspend fun deleteListById(listId: String) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.deleteListById(listId)\r\n        }\r\n    }",
  "start_lineno" : "76",
  "methodName" : "deleteListById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/110",
  "prompt" : "import kotlinx.coroutines.withContext\nsuspend fun deleteListById(listId: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "86",
  "ground_truth" : "            toDoListWriteDao.updateList(data.toToDoListDb())\r\n        }\r\n    }",
  "context" : "suspend fun updateList(data: List<GroupIdWithList>) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.updateList(data.toToDoListDb())\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "updateList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/111",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nsuspend fun updateList(data: List<GroupIdWithList>) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "92",
  "ground_truth" : "            toDoListWriteDao.updateListNameAndColor(toDoList.id, toDoList.name, toDoList.color, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateListNameAndColor(toDoList: ToDoList, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.updateListNameAndColor(toDoList.id, toDoList.name, toDoList.color, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "88",
  "methodName" : "updateListNameAndColor",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt",
  "task_id" : "Compose-ToDo/112",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nsuspend fun updateListNameAndColor(toDoList: ToDoList, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "23",
  "ground_truth" : "            toDoStepWriteDao.insertStep(data.toStepDb(taskId))\r\n        }\r\n    }",
  "context" : "suspend fun insertStep(data: List<ToDoStep>, taskId: String) {\r\n        withContext(dispatcher) {\r\n            toDoStepWriteDao.insertStep(data.toStepDb(taskId))\r\n        }\r\n    }",
  "start_lineno" : "19",
  "methodName" : "insertStep",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt",
  "task_id" : "Compose-ToDo/113",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStep\nsuspend fun insertStep(data: List<ToDoStep>, taskId: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "            toDoStepWriteDao.updateStepStatus(id, status, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateStepStatus(id: String, status: ToDoStatus, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoStepWriteDao.updateStepStatus(id, status, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "25",
  "methodName" : "updateStepStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt",
  "task_id" : "Compose-ToDo/114",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nsuspend fun updateStepStatus(id: String, status: ToDoStatus, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            toDoStepWriteDao.updateStepName(id, name, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateStepName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoStepWriteDao.updateStepName(id, name, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "updateStepName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt",
  "task_id" : "Compose-ToDo/115",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateStepName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "            toDoStepWriteDao.deleteStepById(id)\r\n        }\r\n    }",
  "context" : "suspend fun deleteStepById(id: String) {\r\n        withContext(dispatcher) {\r\n            toDoStepWriteDao.deleteStepById(id)\r\n        }\r\n    }",
  "start_lineno" : "37",
  "methodName" : "deleteStepById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt",
  "task_id" : "Compose-ToDo/116",
  "prompt" : "import kotlinx.coroutines.withContext\nsuspend fun deleteStepById(id: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "        return toDoTaskReadDao.getTaskOverallCount(date)\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getOverallCount(date: LocalDateTime): Flow<ToDoTaskOverallCount> {\r\n        return toDoTaskReadDao.getTaskOverallCount(date)\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "31",
  "methodName" : "getOverallCount",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/117",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTaskOverallCount\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getOverallCount(date: LocalDateTime): Flow<ToDoTaskOverallCount> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getTaskWithListOrderByDueDate(): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.getTaskWithListOrderByDueDate()\r\n            .filterNotNull()\r\n            .map { tasks ->\r\n                tasks.map {\r\n                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "36",
  "methodName" : "getTaskWithListOrderByDueDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/118",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun getTaskWithListOrderByDueDate(): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.getTaskWithListOrderByDueDate()\r\n            .filterNotNull()\r\n            .map { tasks ->\r\n                tasks.map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "56",
  "ground_truth" : "                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getTaskWithListOrderByDueDateToday(date: LocalDateTime): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.getTaskWithListOrderByDueDateToday(date)\r\n            .filterNotNull()\r\n            .map { tasks ->\r\n                tasks.map {\r\n                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "47",
  "methodName" : "getTaskWithListOrderByDueDateToday",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/119",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun getTaskWithListOrderByDueDateToday(date: LocalDateTime): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.getTaskWithListOrderByDueDateToday(date)\r\n            .filterNotNull()\r\n            .map { tasks ->\r\n                tasks.map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "63",
  "ground_truth" : "            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getTaskWithStepsById(taskId: String): Flow<ToDoTask> {\r\n        return toDoTaskReadDao.getTaskWithStepsById(taskId)\r\n            .filterNotNull()\r\n            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "58",
  "methodName" : "getTaskWithStepsById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/120",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getTaskWithStepsById(taskId: String): Flow<ToDoTask> {\r\n        return toDoTaskReadDao.getTaskWithStepsById(taskId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "            .map { TaskWithList(it.list.toToDoList(), it.task.toTask()) }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getTaskWithListById(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskReadDao.getTaskWithListById(taskId)\r\n            .filterNotNull()\r\n            .map { TaskWithList(it.list.toToDoList(), it.task.toTask()) }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "65",
  "methodName" : "getTaskWithListById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/121",
  "prompt" : "import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun getTaskWithListById(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskReadDao.getTaskWithListById(taskId)\r\n            .filterNotNull()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun searchTaskWithList(query: String): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.searchTaskWithList(query)\r\n            .map { tasks ->\r\n                tasks.map {\r\n                    TaskWithList(it.list.toToDoList(), it.task.toTask())\r\n                }\r\n            }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "72",
  "methodName" : "searchTaskWithList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/122",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun searchTaskWithList(query: String): Flow<List<TaskWithList>> {\r\n        return toDoTaskReadDao.searchTaskWithList(query)\r\n            .map { tasks ->\r\n                tasks.map {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "86",
  "ground_truth" : "            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getScheduledTasks(): Flow<List<ToDoTask>> {\r\n        return toDoTaskReadDao.getScheduledTasks()\r\n            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "82",
  "methodName" : "getScheduledTasks",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/123",
  "prompt" : "import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getScheduledTasks(): Flow<List<ToDoTask>> {\r\n        return toDoTaskReadDao.getScheduledTasks()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "92",
  "ground_truth" : "            toDoTaskWriteDao.insertTask(data.toTaskDb(listId))\r\n        }\r\n    }",
  "context" : "suspend fun insertTask(data: List<ToDoTask>, listId: String) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.insertTask(data.toTaskDb(listId))\r\n        }\r\n    }",
  "start_lineno" : "88",
  "methodName" : "insertTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/124",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nsuspend fun insertTask(data: List<ToDoTask>, listId: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "103",
  "ground_truth" : "            toDoTaskWriteDao.updateTaskDueDate(id, dueDateTime, isDueDateTimeSet, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateTaskDueDate(\r\n        id: String,\r\n        dueDateTime: LocalDateTime?,\r\n        isDueDateTimeSet: Boolean,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.updateTaskDueDate(id, dueDateTime, isDueDateTimeSet, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "94",
  "methodName" : "updateTaskDueDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/125",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskDueDate(\r\n        id: String,\r\n        dueDateTime: LocalDateTime?,\r\n        isDueDateTimeSet: Boolean,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "118",
  "ground_truth" : "                ToDoRepeat.NEVER,\r\n                updatedAt\r\n            )\r\n        }\r\n    }",
  "context" : "suspend fun resetTaskDueDate(\r\n        id: String,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.resetTaskDueDate(\r\n                id,\r\n                null,\r\n                false,\r\n                ToDoRepeat.NEVER,\r\n                updatedAt\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "resetTaskDueDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/126",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun resetTaskDueDate(\r\n        id: String,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.resetTaskDueDate(\r\n                id,\r\n                null,\r\n                false,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "124",
  "ground_truth" : "            toDoTaskWriteDao.updateTaskRepeat(id, repeat, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateTaskRepeat(id: String, repeat: ToDoRepeat, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.updateTaskRepeat(id, repeat, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "120",
  "methodName" : "updateTaskRepeat",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/127",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nsuspend fun updateTaskRepeat(id: String, repeat: ToDoRepeat, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "            toDoTaskWriteDao.updateTaskStatus(id, status, completedAt, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateTaskStatus(id: String, status: ToDoStatus, completedAt: LocalDateTime?, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.updateTaskStatus(id, status, completedAt, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "126",
  "methodName" : "updateTaskStatus",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/128",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nsuspend fun updateTaskStatus(id: String, status: ToDoStatus, completedAt: LocalDateTime?, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "136",
  "ground_truth" : "            toDoTaskWriteDao.updateTaskNote(id, note, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateTaskNote(id: String, note: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.updateTaskNote(id, note, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "132",
  "methodName" : "updateTaskNote",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/129",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskNote(id: String, note: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "142",
  "ground_truth" : "            toDoTaskWriteDao.updateTaskName(id, name, updatedAt)\r\n        }\r\n    }",
  "context" : "suspend fun updateTaskName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.updateTaskName(id, name, updatedAt)\r\n        }\r\n    }",
  "start_lineno" : "138",
  "methodName" : "updateTaskName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/130",
  "prompt" : "import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "148",
  "ground_truth" : "            toDoTaskWriteDao.deleteTaskById(id)\r\n        }\r\n    }",
  "context" : "suspend fun deleteTaskById(id: String) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.deleteTaskById(id)\r\n        }\r\n    }",
  "start_lineno" : "144",
  "methodName" : "deleteTaskById",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt",
  "task_id" : "Compose-ToDo/131",
  "prompt" : "import kotlinx.coroutines.withContext\nsuspend fun deleteTaskById(id: String) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val TODO_DB_NAME\nvar INSTANCE ToDoDatabase?",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "                INSTANCE ?: buildDatabase(context).also { INSTANCE = it }\r\n            }\r\n        }",
  "context" : "fun getInstance(context: Context): ToDoDatabase {\r\n            return INSTANCE ?: synchronized(this) {\r\n                INSTANCE ?: buildDatabase(context).also { INSTANCE = it }\r\n            }\r\n        }",
  "start_lineno" : "61",
  "methodName" : "getInstance",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\ToDoDatabase.kt",
  "task_id" : "Compose-ToDo/132",
  "prompt" : "import androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): ToDoDatabase {\r\n            return INSTANCE ?: synchronized(this) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val TODO_DB_NAME\nvar INSTANCE ToDoDatabase?",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "            )\r\n            val writeDao = getInstance(context).toDoGroupWriteDao()\r\n\r\n            writeDao.insertGroup(listOf(defaultGroup))\r\n        }",
  "context" : "private suspend fun initPrePopulateDefaultGroup(context: Context) {\r\n            val currentDate = DateTimeProviderImpl().now()\r\n            val defaultGroup = ToDoGroupDb(\r\n                id = ToDoGroupDb.DEFAULT_ID,\r\n                name = \"Others\",\r\n                createdAt = currentDate,\r\n                updatedAt = currentDate\r\n            )\r\n            val writeDao = getInstance(context).toDoGroupWriteDao()\r\n\r\n            writeDao.insertGroup(listOf(defaultGroup))\r\n        }",
  "start_lineno" : "89",
  "methodName" : "initPrePopulateDefaultGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\ToDoDatabase.kt",
  "task_id" : "Compose-ToDo/133",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.wrapper.DateTimeProviderImpl\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nimport android.content.Context\nprivate suspend fun initPrePopulateDefaultGroup(context: Context) {\r\n            val currentDate = DateTimeProviderImpl().now()\r\n            val defaultGroup = ToDoGroupDb(\r\n                id = ToDoGroupDb.DEFAULT_ID,\r\n                name = \"Others\",\r\n                createdAt = currentDate,\r\n                updatedAt = currentDate\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "11",
  "ground_truth" : "        Language.INDONESIA -> LanguagePreference.INDONESIA\r\n    }\r\n}",
  "context" : "fun Language.toLanguagePreference(): LanguagePreference {\r\n    return when (this) {\r\n        Language.ENGLISH -> LanguagePreference.ENGLISH\r\n        Language.INDONESIA -> LanguagePreference.INDONESIA\r\n    }\r\n}",
  "start_lineno" : "6",
  "methodName" : "toLanguagePreference",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\LanguageMapper.kt",
  "task_id" : "Compose-ToDo/134",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.LanguagePreference\nfun Language.toLanguagePreference(): LanguagePreference {\r\n    return when (this) {\r\n        Language.ENGLISH -> LanguagePreference.ENGLISH\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "        LanguagePreference.INDONESIA -> Language.INDONESIA\r\n    }\r\n}",
  "context" : "fun LanguagePreference.toLanguage(): Language {\r\n    return when (this) {\r\n        LanguagePreference.ENGLISH -> Language.ENGLISH\r\n        LanguagePreference.INDONESIA -> Language.INDONESIA\r\n    }\r\n}",
  "start_lineno" : "13",
  "methodName" : "toLanguage",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\LanguageMapper.kt",
  "task_id" : "Compose-ToDo/135",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.LanguagePreference\nfun LanguagePreference.toLanguage(): Language {\r\n    return when (this) {\r\n        LanguagePreference.ENGLISH -> Language.ENGLISH\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "14",
  "ground_truth" : "    Theme.NIGHT -> ThemePreference.NIGHT\r\n    Theme.SUNRISE -> ThemePreference.SUNRISE\r\n    Theme.AURORA -> ThemePreference.AURORA\r\n    Theme.WALLPAPER -> ThemePreference.WALLPAPER\r\n}",
  "context" : "fun Theme.toThemePreference() = when (this) {\r\n    Theme.SYSTEM -> ThemePreference.SYSTEM\r\n    Theme.LIGHT -> ThemePreference.LIGHT\r\n    Theme.TWILIGHT -> ThemePreference.TWILIGHT\r\n    Theme.NIGHT -> ThemePreference.NIGHT\r\n    Theme.SUNRISE -> ThemePreference.SUNRISE\r\n    Theme.AURORA -> ThemePreference.AURORA\r\n    Theme.WALLPAPER -> ThemePreference.WALLPAPER\r\n}",
  "start_lineno" : "6",
  "methodName" : "toThemePreference",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\ThemeMapper.kt",
  "task_id" : "Compose-ToDo/136",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Theme\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.ThemePreference\nfun Theme.toThemePreference() = when (this) {\r\n    Theme.SYSTEM -> ThemePreference.SYSTEM\r\n    Theme.LIGHT -> ThemePreference.LIGHT\r\n    Theme.TWILIGHT -> ThemePreference.TWILIGHT\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "    ThemePreference.NIGHT -> Theme.NIGHT\r\n    ThemePreference.SUNRISE -> Theme.SUNRISE\r\n    ThemePreference.AURORA -> Theme.AURORA\r\n    ThemePreference.WALLPAPER -> Theme.WALLPAPER\r\n}",
  "context" : "fun ThemePreference.toTheme() = when (this) {\r\n    ThemePreference.SYSTEM -> Theme.SYSTEM\r\n    ThemePreference.LIGHT -> Theme.LIGHT\r\n    ThemePreference.TWILIGHT -> Theme.TWILIGHT\r\n    ThemePreference.NIGHT -> Theme.NIGHT\r\n    ThemePreference.SUNRISE -> Theme.SUNRISE\r\n    ThemePreference.AURORA -> Theme.AURORA\r\n    ThemePreference.WALLPAPER -> Theme.WALLPAPER\r\n}",
  "start_lineno" : "16",
  "methodName" : "toTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\ThemeMapper.kt",
  "task_id" : "Compose-ToDo/137",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.Theme\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.ThemePreference\nfun ThemePreference.toTheme() = when (this) {\r\n    ThemePreference.SYSTEM -> Theme.SYSTEM\r\n    ThemePreference.LIGHT -> Theme.LIGHT\r\n    ThemePreference.TWILIGHT -> Theme.TWILIGHT\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "            .catch { emit(Credential(token = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getCredential(): Flow<Credential> {\r\n        return credentialDataStore.data\r\n            .map { Credential(it.token) }\r\n            .catch { emit(Credential(token = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "getCredential",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\CredentialProvider.kt",
  "task_id" : "Compose-ToDo/138",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Credential\nimport androidx.datastore.core.DataStore\nfun getCredential(): Flow<Credential> {\r\n        return credentialDataStore.data\r\n            .map { Credential(it.token) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "            credentialDataStore.updateData {\r\n                CredentialPreference(data.token)\r\n            }\r\n        }\r\n    }",
  "context" : "suspend fun setCredential(data: Credential) {\r\n        withContext(dispatcher) {\r\n            credentialDataStore.updateData {\r\n                CredentialPreference(data.token)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "28",
  "methodName" : "setCredential",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\CredentialProvider.kt",
  "task_id" : "Compose-ToDo/139",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Credential\nsuspend fun setCredential(data: Credential) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "            .catch { emit(Language.ENGLISH) }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getLanguage(): Flow<Language> {\r\n        return languageDataStore.data.map { it.toLanguage() }\r\n            .catch { emit(Language.ENGLISH) }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "23",
  "methodName" : "getLanguage",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\LanguageProvider.kt",
  "task_id" : "Compose-ToDo/140",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper.toLanguage\nimport androidx.datastore.core.DataStore\nfun getLanguage(): Flow<Language> {\r\n        return languageDataStore.data.map { it.toLanguage() }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            languageDataStore.updateData {\r\n                data.toLanguagePreference()\r\n            }\r\n        }\r\n    }",
  "context" : "suspend fun setLanguage(data: Language) {\r\n        withContext(dispatcher) {\r\n            languageDataStore.updateData {\r\n                data.toLanguagePreference()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "29",
  "methodName" : "setLanguage",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\LanguageProvider.kt",
  "task_id" : "Compose-ToDo/141",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Language\nsuspend fun setLanguage(data: Language) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "            .catch { emit(Theme.SYSTEM) }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getTheme(): Flow<Theme> {\r\n        return themeDataStore.data.map { it.toTheme() }\r\n            .catch { emit(Theme.SYSTEM) }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "23",
  "methodName" : "getTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\ThemeProvider.kt",
  "task_id" : "Compose-ToDo/142",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper.toTheme\nimport androidx.datastore.core.DataStore\nfun getTheme(): Flow<Theme> {\r\n        return themeDataStore.data.map { it.toTheme() }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            themeDataStore.updateData {\r\n                data.toThemePreference()\r\n            }\r\n        }\r\n    }",
  "context" : "suspend fun setTheme(data: Theme) {\r\n        withContext(dispatcher) {\r\n            themeDataStore.updateData {\r\n                data.toThemePreference()\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "29",
  "methodName" : "setTheme",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\ThemeProvider.kt",
  "task_id" : "Compose-ToDo/143",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nsuspend fun setTheme(data: Theme) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "            .catch { emit(User(email = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }",
  "context" : "fun getUser(): Flow<User> {\r\n        return userDataStore.data\r\n            .map { User(it.email) }\r\n            .catch { emit(User(email = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }",
  "start_lineno" : "21",
  "methodName" : "getUser",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\UserProvider.kt",
  "task_id" : "Compose-ToDo/144",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.User\nimport androidx.datastore.core.DataStore\nfun getUser(): Flow<User> {\r\n        return userDataStore.data\r\n            .map { User(it.email) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "            userDataStore.updateData {\r\n                UserPreference(data.email)\r\n            }\r\n        }\r\n    }",
  "context" : "suspend fun setUser(data: User) {\r\n        withContext(dispatcher) {\r\n            userDataStore.updateData {\r\n                UserPreference(data.email)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "28",
  "methodName" : "setUser",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\UserProvider.kt",
  "task_id" : "Compose-ToDo/145",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.User\nsuspend fun setUser(data: User) {\r\n        withContext(dispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val defaultValue CredentialPreference",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            return CredentialPreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "context" : " @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): CredentialPreference {\r\n        try {\r\n            return CredentialPreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "start_lineno" : "14",
  "methodName" : "readFrom",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\serializer\\CredentialPreferenceSerializer.kt",
  "task_id" : "Compose-ToDo/146",
  "prompt" : "import java.io.InputStream\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.CredentialPreference\n @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): CredentialPreference {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val defaultValue LanguagePreference",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            return LanguagePreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "context" : " @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): LanguagePreference {\r\n        try {\r\n            return LanguagePreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "start_lineno" : "14",
  "methodName" : "readFrom",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\serializer\\LanguagePreferenceSerializer.kt",
  "task_id" : "Compose-ToDo/147",
  "prompt" : "import java.io.InputStream\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.LanguagePreference\n @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): LanguagePreference {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val defaultValue ThemePreference",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            return ThemePreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "context" : " @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): ThemePreference {\r\n        try {\r\n            return ThemePreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "start_lineno" : "14",
  "methodName" : "readFrom",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\serializer\\ThemePreferenceSerializer.kt",
  "task_id" : "Compose-ToDo/148",
  "prompt" : "import java.io.InputStream\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.ThemePreference\n @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): ThemePreference {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val defaultValue UserPreference",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            return UserPreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "context" : " @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): UserPreference {\r\n        try {\r\n            return UserPreference.ADAPTER.decode(input)\r\n        } catch (exception: IOException) {\r\n            throw CorruptionException(\"Cannot read proto\", exception)\r\n        }\r\n    }",
  "start_lineno" : "14",
  "methodName" : "readFrom",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\serializer\\UserPreferenceSerializer.kt",
  "task_id" : "Compose-ToDo/149",
  "prompt" : "import java.io.InputStream\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.UserPreference\n @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n    override suspend fun readFrom(input: InputStream): UserPreference {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "31",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupWriteDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoGroupWriteDao(@ApplicationContext context: Context): ToDoGroupWriteDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupWriteDao()\r\n    }",
  "start_lineno" : "26",
  "methodName" : "provideToDoGroupWriteDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/150",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoGroupWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoGroupWriteDao(@ApplicationContext context: Context): ToDoGroupWriteDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoListWriteDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoListWriteDao(@ApplicationContext context: Context): ToDoListWriteDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoListWriteDao()\r\n    }",
  "start_lineno" : "33",
  "methodName" : "provideToDoListWriteDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/151",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoListWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoListWriteDao(@ApplicationContext context: Context): ToDoListWriteDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskWriteDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoTaskWriteDao(@ApplicationContext context: Context): ToDoTaskWriteDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskWriteDao()\r\n    }",
  "start_lineno" : "40",
  "methodName" : "provideToDoTaskWriteDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/152",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoTaskWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoTaskWriteDao(@ApplicationContext context: Context): ToDoTaskWriteDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoStepWriteDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoStepWriteDao(@ApplicationContext context: Context): ToDoStepWriteDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoStepWriteDao()\r\n    }",
  "start_lineno" : "47",
  "methodName" : "provideToDoStepWriteDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/153",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoStepWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoStepWriteDao(@ApplicationContext context: Context): ToDoStepWriteDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupReadDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoGroupReadDao(@ApplicationContext context: Context): ToDoGroupReadDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupReadDao()\r\n    }",
  "start_lineno" : "54",
  "methodName" : "provideToDoGroupReadDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/154",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoGroupReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoGroupReadDao(@ApplicationContext context: Context): ToDoGroupReadDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoListReadDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoListReadDao(@ApplicationContext context: Context): ToDoListReadDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoListReadDao()\r\n    }",
  "start_lineno" : "61",
  "methodName" : "provideToDoListReadDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/155",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoListReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoListReadDao(@ApplicationContext context: Context): ToDoListReadDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskReadDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoTaskReadDao(@ApplicationContext context: Context): ToDoTaskReadDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskReadDao()\r\n    }",
  "start_lineno" : "68",
  "methodName" : "provideToDoTaskReadDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/156",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoTaskReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoTaskReadDao(@ApplicationContext context: Context): ToDoTaskReadDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "        return ToDoDatabase.getInstance(context)\r\n            .toDoStepReadDao()\r\n    }",
  "context" : " @Singleton\r\n    @Provides\r\n    fun provideToDoStepReadDao(@ApplicationContext context: Context): ToDoStepReadDao {\r\n        return ToDoDatabase.getInstance(context)\r\n            .toDoStepReadDao()\r\n    }",
  "start_lineno" : "75",
  "methodName" : "provideToDoStepReadDao",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt",
  "task_id" : "Compose-ToDo/157",
  "prompt" : "import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoStepReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoStepReadDao(@ApplicationContext context: Context): ToDoStepReadDao {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "            buffer.append(element.toString())\r\n        } else break\r\n    }\r\n    return buffer\r\n}",
  "context" : "private fun <T, A : Appendable> Iterable<T>.joinTo(\r\n    buffer: A,\r\n    separator: (Int) -> CharSequence\r\n): A {\r\n    val limit = -1\r\n    var count = 0\r\n    for (element in this) {\r\n        if (++count > 1) buffer.append(separator(count - 1))\r\n        if (limit < 0 || count <= limit) {\r\n            buffer.append(element.toString())\r\n        } else break\r\n    }\r\n    return buffer\r\n}",
  "start_lineno" : "9",
  "methodName" : "joinTo",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\CollectionExt.kt",
  "task_id" : "Compose-ToDo/158",
  "prompt" : "private fun <T, A : Appendable> Iterable<T>.joinTo(\r\n    buffer: A,\r\n    separator: (Int) -> CharSequence\r\n): A {\r\n    val limit = -1\r\n    var count = 0\r\n    for (element in this) {\r\n        if (++count > 1) buffer.append(separator(count - 1))\r\n        if (limit < 0 || count <= limit) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "    ToDoColor.YELLOW -> ListYellow\r\n    ToDoColor.ORANGE -> ListOrange\r\n    ToDoColor.PURPLE -> ListPurple\r\n    ToDoColor.BROWN -> ListBrown\r\n}",
  "context" : "fun ToDoColor.toColor() = when (this) {\r\n    ToDoColor.BLUE -> ListBlue\r\n    ToDoColor.RED -> ListRed\r\n    ToDoColor.GREEN -> ListGreen\r\n    ToDoColor.YELLOW -> ListYellow\r\n    ToDoColor.ORANGE -> ListOrange\r\n    ToDoColor.PURPLE -> ListPurple\r\n    ToDoColor.BROWN -> ListBrown\r\n}",
  "start_lineno" : "14",
  "methodName" : "toColor",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ColorExt.kt",
  "task_id" : "Compose-ToDo/159",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoColor\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListRed\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListGreen\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListBlue\nimport androidx.compose.ui.graphics.Color\nfun ToDoColor.toColor() = when (this) {\r\n    ToDoColor.BLUE -> ListBlue\r\n    ToDoColor.RED -> ListRed\r\n    ToDoColor.GREEN -> ListGreen\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "    ListOrange -> ToDoColor.ORANGE\r\n    ListPurple -> ToDoColor.PURPLE\r\n    ListBrown -> ToDoColor.BROWN\r\n    else -> ToDoColor.BLUE\r\n}",
  "context" : "fun Color.toToDoColor() = when (this) {\r\n    ListRed -> ToDoColor.RED\r\n    ListGreen -> ToDoColor.GREEN\r\n    ListYellow -> ToDoColor.YELLOW\r\n    ListOrange -> ToDoColor.ORANGE\r\n    ListPurple -> ToDoColor.PURPLE\r\n    ListBrown -> ToDoColor.BROWN\r\n    else -> ToDoColor.BLUE\r\n}",
  "start_lineno" : "24",
  "methodName" : "toToDoColor",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ColorExt.kt",
  "task_id" : "Compose-ToDo/160",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoColor\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListYellow\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListRed\nimport com.wisnu.kurniawan.composetodolist.foundation.theme.ListGreen\nimport androidx.compose.ui.graphics.Color\nfun Color.toToDoColor() = when (this) {\r\n    ListRed -> ToDoColor.RED\r\n    ListGreen -> ToDoColor.GREEN\r\n    ListYellow -> ToDoColor.YELLOW\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "        flow { emit(Any()) }\r\n    } catch (e: SQLiteConstraintException) {\r\n        onDuplicate()\r\n    }\r\n}",
  "context" : "suspend fun duplicateNameResolver(\r\n    updateName: suspend () -> Unit,\r\n    onDuplicate: () -> Flow<Any>\r\n): Flow<Any> {\r\n    return try {\r\n        updateName()\r\n        flow { emit(Any()) }\r\n    } catch (e: SQLiteConstraintException) {\r\n        onDuplicate()\r\n    }\r\n}",
  "start_lineno" : "14",
  "methodName" : "duplicateNameResolver",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/161",
  "prompt" : "import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nsuspend fun duplicateNameResolver(\r\n    updateName: suspend () -> Unit,\r\n    onDuplicate: () -> Flow<Any>\r\n): Flow<Any> {\r\n    return try {\r\n        updateName()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            .take(1)\r\n            .map { group -> group.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}",
  "context" : "fun resolveGroupName(\r\n    name: String,\r\n    toDoGroups: Flow<List<ToDoGroup>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoGroups\r\n            .take(1)\r\n            .map { group -> group.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}",
  "start_lineno" : "26",
  "methodName" : "resolveGroupName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/162",
  "prompt" : "import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun resolveGroupName(\r\n    name: String,\r\n    toDoGroups: Flow<List<ToDoGroup>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoGroups\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "            .take(1)\r\n            .map { list -> list.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}",
  "context" : "fun resolveListName(\r\n    name: String,\r\n    toDoLists: Flow<List<ToDoList>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoLists\r\n            .take(1)\r\n            .map { list -> list.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}",
  "start_lineno" : "40",
  "methodName" : "resolveListName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/163",
  "prompt" : "import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun resolveListName(\r\n    name: String,\r\n    toDoLists: Flow<List<ToDoList>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoLists\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "63",
  "ground_truth" : "        .onEach { updateNameWithNewName(it) }\r\n        .map { Any() }\r\n}",
  "context" : "private fun resolveName(\r\n    name: String,\r\n    names: Flow<List<String>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return names\r\n        .map { name.resolveDuplicate(it) }\r\n        .onEach { updateNameWithNewName(it) }\r\n        .map { Any() }\r\n}",
  "start_lineno" : "54",
  "methodName" : "resolveName",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/164",
  "prompt" : "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nprivate fun resolveName(\r\n    name: String,\r\n    names: Flow<List<String>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return names\r\n        .map { name.resolveDuplicate(it) }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "            .resolveDuplicate(names)\r\n    } else {\r\n        this\r\n    }\r\n}",
  "context" : "fun String.resolveDuplicate(names: List<String>): String {\r\n    return if (names.any { it == this }) {\r\n        this\r\n            .addSuffixIdentifier()\r\n            .resolveDuplicate(names)\r\n    } else {\r\n        this\r\n    }\r\n}",
  "start_lineno" : "65",
  "methodName" : "resolveDuplicate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/165",
  "prompt" : "fun String.resolveDuplicate(names: List<String>): String {\r\n    return if (names.any { it == this }) {\r\n        this\r\n            .addSuffixIdentifier()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "            acc.isBlank() -> cur\r\n            else -> \"$acc $cur\"\r\n        }\r\n    }\r\n}",
  "context" : "fun String.addSuffixIdentifier(): String {\r\n    if (isBlank()) return \"1\"\r\n\r\n    val names = this.split(\" \")\r\n\r\n    if (names.size == 1) return \"$this 1\"\r\n\r\n    val currentIdentifier = names.last().toIntOrNull() ?: return \"$this 1\"\r\n\r\n    val lastIndex = names.lastIndex\r\n\r\n    return names.foldIndexed(\r\n        \"\"\r\n    ) { index, acc, cur ->\r\n        when {\r\n            index == lastIndex -> acc + \" ${currentIdentifier + 1}\"\r\n            acc.isBlank() -> cur\r\n            else -> \"$acc $cur\"\r\n        }\r\n    }\r\n}",
  "start_lineno" : "75",
  "methodName" : "addSuffixIdentifier",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt",
  "task_id" : "Compose-ToDo/166",
  "prompt" : "fun String.addSuffixIdentifier(): String {\r\n    if (isBlank()) return \"1\"\r\n\r\n    val names = this.split(\" \")\r\n\r\n    if (names.size == 1) return \"$this 1\"\r\n\r\n    val currentIdentifier = names.last().toIntOrNull() ?: return \"$this 1\"\r\n\r\n    val lastIndex = names.lastIndex\r\n\r\n    return names.foldIndexed(\r\n        \"\"\r\n    ) { index, acc, cur ->\r\n        when {\r\n            index == lastIndex -> acc + \" ${currentIdentifier + 1}\"\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            delay(waitMs)\r\n            destinationFunction(param)\r\n        }\r\n    }\r\n}",
  "context" : "fun <T> debounce(\r\n    waitMs: Long = 300L,\r\n    coroutineScope: CoroutineScope,\r\n    destinationFunction: (T) -> Unit\r\n): (T) -> Unit {\r\n    var debounceJob: Job? = null\r\n    return { param: T ->\r\n        debounceJob?.cancel()\r\n        debounceJob = coroutineScope.launch {\r\n            delay(waitMs)\r\n            destinationFunction(param)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "8",
  "methodName" : "debounce",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\FlowExt.kt",
  "task_id" : "Compose-ToDo/167",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.CoroutineScope\nfun <T> debounce(\r\n    waitMs: Long = 300L,\r\n    coroutineScope: CoroutineScope,\r\n    destinationFunction: (T) -> Unit\r\n): (T) -> Unit {\r\n    var debounceJob: Job? = null\r\n    return { param: T ->\r\n        debounceJob?.cancel()\r\n        debounceJob = coroutineScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "12",
  "ground_truth" : "    is ToDoTaskItem.Complete -> toDoTask.id\r\n    is ToDoTaskItem.InProgress -> toDoTask.id\r\n}",
  "context" : "fun ToDoTaskItem.identifier() = when (this) {\r\n    is ToDoTaskItem.CompleteHeader -> id\r\n    is ToDoTaskItem.Complete -> toDoTask.id\r\n    is ToDoTaskItem.InProgress -> toDoTask.id\r\n}",
  "start_lineno" : "8",
  "methodName" : "identifier",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt",
  "task_id" : "Compose-ToDo/168",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.features.todo.detail.ui.ToDoTaskItem\nfun ToDoTaskItem.identifier() = when (this) {\r\n    is ToDoTaskItem.CompleteHeader -> id\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "    is ItemAllState.Task.InProgress -> task.id\r\n    is ItemAllState.List -> list.id\r\n}",
  "context" : "fun ItemAllState.identifier() = when (this) {\r\n    is ItemAllState.Task.Complete -> task.id\r\n    is ItemAllState.Task.InProgress -> task.id\r\n    is ItemAllState.List -> list.id\r\n}",
  "start_lineno" : "14",
  "methodName" : "identifier",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt",
  "task_id" : "Compose-ToDo/169",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.features.todo.all.ui.ItemAllState\nfun ItemAllState.identifier() = when (this) {\r\n    is ItemAllState.Task.Complete -> task.id\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "    is ItemScheduledState.Task.Complete -> task.id\r\n    is ItemScheduledState.Task.InProgress -> task.id\r\n}",
  "context" : "fun ItemScheduledState.identifier() = when (this) {\r\n    is ItemScheduledState.Header -> date.toString()\r\n    is ItemScheduledState.Task.Complete -> task.id\r\n    is ItemScheduledState.Task.InProgress -> task.id\r\n}",
  "start_lineno" : "20",
  "methodName" : "identifier",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt",
  "task_id" : "Compose-ToDo/170",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.features.todo.scheduled.ui.ItemScheduledState\nfun ItemScheduledState.identifier() = when (this) {\r\n    is ItemScheduledState.Header -> date.toString()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "    is ItemMainState.ItemGroup -> group.id\r\n    is ItemMainState.ItemListType -> list.id\r\n}",
  "context" : "fun ItemMainState.identifier() = when (this) {\r\n    is ItemMainState.ItemGroup -> group.id\r\n    is ItemMainState.ItemListType -> list.id\r\n}",
  "start_lineno" : "26",
  "methodName" : "identifier",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt",
  "task_id" : "Compose-ToDo/171",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.features.todo.main.ui.ItemMainState\nfun ItemMainState.identifier() = when (this) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "        .map { it.trim() }\r\n        .filter { it.isNotBlank() }\r\n        .map { it.replace(Regex.fromLiteral(\"\\\"\"), \"\\\"\\\"\") }\r\n        .joinToString(separator = \" \") { \"\\\"$it*\\\"\" }\r\n}",
  "context" : "fun String.sanitizeQuery(): String {\r\n    return trim()\r\n        .split(\" \")\r\n        .map { it.trim() }\r\n        .filter { it.isNotBlank() }\r\n        .map { it.replace(Regex.fromLiteral(\"\\\"\"), \"\\\"\\\"\") }\r\n        .joinToString(separator = \" \") { \"\\\"$it*\\\"\" }\r\n}",
  "start_lineno" : "8",
  "methodName" : "sanitizeQuery",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\StringExt.kt",
  "task_id" : "Compose-ToDo/172",
  "prompt" : "fun String.sanitizeQuery(): String {\r\n    return trim()\r\n        .split(\" \")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "        substring(0, n.coerceAtMost(length)) + \"...\"\r\n    } else {\r\n        this\r\n    }\r\n}",
  "context" : "fun String.ellipsisAt(n: Int): String {\r\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\r\n    return if (length > n) {\r\n        substring(0, n.coerceAtMost(length)) + \"...\"\r\n    } else {\r\n        this\r\n    }\r\n}",
  "start_lineno" : "17",
  "methodName" : "ellipsisAt",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\StringExt.kt",
  "task_id" : "Compose-ToDo/173",
  "prompt" : "fun String.ellipsisAt(n: Int): String {\r\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\r\n    return if (length > n) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "        ToDoRepeat.WEEKLY -> R.string.todo_repeat_weekly\r\n        ToDoRepeat.MONTHLY -> R.string.todo_repeat_monthly\r\n        ToDoRepeat.YEARLY -> R.string.todo_repeat_yearly\r\n    }\r\n}",
  "context" : "fun ToDoRepeat.displayable(): Int {\r\n    return when (this) {\r\n        ToDoRepeat.NEVER -> R.string.todo_repeat_never\r\n        ToDoRepeat.DAILY -> R.string.todo_repeat_daily\r\n        ToDoRepeat.WEEKDAYS -> R.string.todo_repeat_weekdays\r\n        ToDoRepeat.WEEKLY -> R.string.todo_repeat_weekly\r\n        ToDoRepeat.MONTHLY -> R.string.todo_repeat_monthly\r\n        ToDoRepeat.YEARLY -> R.string.todo_repeat_yearly\r\n    }\r\n}",
  "start_lineno" : "6",
  "methodName" : "displayable",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoRepeatExt.kt",
  "task_id" : "Compose-ToDo/174",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.R\nfun ToDoRepeat.displayable(): Int {\r\n    return when (this) {\r\n        ToDoRepeat.NEVER -> R.string.todo_repeat_never\r\n        ToDoRepeat.DAILY -> R.string.todo_repeat_daily\r\n        ToDoRepeat.WEEKDAYS -> R.string.todo_repeat_weekdays\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "10",
  "ground_truth" : "        ToDoStatus.COMPLETE -> ToDoStatus.IN_PROGRESS\r\n    }\r\n}",
  "context" : "fun ToDoStatus.toggle(): ToDoStatus {\r\n    return when (this) {\r\n        ToDoStatus.IN_PROGRESS -> ToDoStatus.COMPLETE\r\n        ToDoStatus.COMPLETE -> ToDoStatus.IN_PROGRESS\r\n    }\r\n}",
  "start_lineno" : "5",
  "methodName" : "toggle",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoStatusExt.kt",
  "task_id" : "Compose-ToDo/175",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nfun ToDoStatus.toggle(): ToDoStatus {\r\n    return when (this) {\r\n        ToDoStatus.IN_PROGRESS -> ToDoStatus.COMPLETE\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "        }\r\n    } else {\r\n        dueDate\r\n    }\r\n}",
  "context" : "fun ToDoTask.getScheduledDueDate(currentDate: LocalDateTime): LocalDateTime {\r\n    require(dueDate != null)\r\n\r\n    return if (repeat != ToDoRepeat.NEVER) {\r\n        if (isExpired(currentDate)) {\r\n            currentDate.plusMinutes(1)\r\n        } else {\r\n            dueDate\r\n        }\r\n    } else {\r\n        dueDate\r\n    }\r\n}",
  "start_lineno" : "43",
  "methodName" : "getScheduledDueDate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoTaskExt.kt",
  "task_id" : "Compose-ToDo/176",
  "prompt" : "import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nfun ToDoTask.getScheduledDueDate(currentDate: LocalDateTime): LocalDateTime {\r\n    require(dueDate != null)\r\n\r\n    return if (repeat != ToDoRepeat.NEVER) {\r\n        if (isExpired(currentDate)) {\r\n            currentDate.plusMinutes(1)\r\n        } else {\r\n            dueDate\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "    } else {\r\n        val nextDueDate = getNextScheduledDueDate(currentDate)\r\n        onUpdateDueDate(nextDueDate)\r\n    }\r\n}",
  "context" : "suspend fun ToDoTask.toggleStatusHandler(\r\n    currentDate: LocalDateTime,\r\n    onUpdateStatus: suspend (LocalDateTime?, ToDoStatus) -> Unit,\r\n    onUpdateDueDate: suspend (LocalDateTime) -> Unit,\r\n) {\r\n    if (repeat == ToDoRepeat.NEVER) {\r\n        val newStatus = status.toggle()\r\n        val completedAt = when (newStatus) {\r\n            ToDoStatus.IN_PROGRESS -> null\r\n            ToDoStatus.COMPLETE -> currentDate\r\n        }\r\n        onUpdateStatus(completedAt, newStatus)\r\n    } else {\r\n        val nextDueDate = getNextScheduledDueDate(currentDate)\r\n        onUpdateDueDate(nextDueDate)\r\n    }\r\n}",
  "start_lineno" : "57",
  "methodName" : "toggleStatusHandler",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoTaskExt.kt",
  "task_id" : "Compose-ToDo/177",
  "prompt" : "import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nsuspend fun ToDoTask.toggleStatusHandler(\r\n    currentDate: LocalDateTime,\r\n    onUpdateStatus: suspend (LocalDateTime?, ToDoStatus) -> Unit,\r\n    onUpdateDueDate: suspend (LocalDateTime) -> Unit,\r\n) {\r\n    if (repeat == ToDoRepeat.NEVER) {\r\n        val newStatus = status.toggle()\r\n        val completedAt = when (newStatus) {\r\n            ToDoStatus.IN_PROGRESS -> null\r\n            ToDoStatus.COMPLETE -> currentDate\r\n        }\r\n        onUpdateStatus(completedAt, newStatus)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            LocaleList.setDefault(LocaleList(locale))\r\n        }\r\n    }",
  "context" : "private fun setupLocale(locale: Locale) {\r\n        Locale.setDefault(locale)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            LocaleList.setDefault(LocaleList(locale))\r\n        }\r\n    }",
  "start_lineno" : "28",
  "methodName" : "setupLocale",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\localization\\LocalizationUtil.kt",
  "task_id" : "Compose-ToDo/178",
  "prompt" : "private fun setupLocale(locale: Locale) {\r\n        Locale.setDefault(locale)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        } else {\r\n            configuration.locale = locale\r\n        }\r\n        return configuration\r\n    }",
  "context" : "private fun getOverridingConfig(locale: Locale, resources: Resources): Configuration {\r\n        val configuration = resources.configuration\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            configuration.setLocales(LocaleList(locale))\r\n        } else {\r\n            configuration.locale = locale\r\n        }\r\n        return configuration\r\n    }",
  "start_lineno" : "36",
  "methodName" : "getOverridingConfig",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\localization\\LocalizationUtil.kt",
  "task_id" : "Compose-ToDo/179",
  "prompt" : "import android.os.LocaleList\nimport android.os.Build\nimport android.content.res.Resources\nimport android.content.res.Configuration\nprivate fun getOverridingConfig(locale: Locale, resources: Resources): Configuration {\r\n        val configuration = resources.configuration\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            configuration.setLocales(LocaleList(locale))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "            configuration.locales.get(0)\r\n        } else {\r\n            configuration.locale\r\n        }\r\n    }",
  "context" : "private fun getLocale(configuration: Configuration): Locale {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            configuration.locales.get(0)\r\n        } else {\r\n            configuration.locale\r\n        }\r\n    }",
  "start_lineno" : "47",
  "methodName" : "getLocale",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\localization\\LocalizationUtil.kt",
  "task_id" : "Compose-ToDo/180",
  "prompt" : "import android.os.Build\nimport android.content.res.Configuration\nprivate fun getLocale(configuration: Configuration): Locale {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "16",
  "ground_truth" : "    muchTask = 10,\r\n    muchStep = 5\r\n)",
  "context" : "fun dummyRandomData() = buildGroup(\r\n    muchGroup = 5,\r\n    muchList = 10,\r\n    muchTask = 10,\r\n    muchStep = 5\r\n)",
  "start_lineno" : "11",
  "methodName" : "dummyRandomData",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/181",
  "prompt" : "fun dummyRandomData() = buildGroup(\r\n    muchGroup = 5,\r\n    muchList = 10,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "23",
  "ground_truth" : "    muchTask = 1,\r\n    muchStep = 1\r\n)",
  "context" : "fun dummySmallData() = buildGroup(\r\n    muchGroup = 10,\r\n    muchList = 1,\r\n    muchTask = 1,\r\n    muchStep = 1\r\n)",
  "start_lineno" : "18",
  "methodName" : "dummySmallData",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/182",
  "prompt" : "fun dummySmallData() = buildGroup(\r\n    muchGroup = 10,\r\n    muchList = 1,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "    muchTask = 0,\r\n    muchStep = 0\r\n)",
  "context" : "fun dummyEmptyData() = buildGroup(\r\n    muchGroup = 0,\r\n    muchList = 0,\r\n    muchTask = 0,\r\n    muchStep = 0\r\n)",
  "start_lineno" : "25",
  "methodName" : "dummyEmptyData",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/183",
  "prompt" : "fun dummyEmptyData() = buildGroup(\r\n    muchGroup = 0,\r\n    muchList = 0,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "47",
  "ground_truth" : "            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "context" : "private fun buildGroup(\r\n    muchGroup: Int,\r\n    muchList: Int,\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoGroup> {\r\n    return build(muchGroup) {\r\n        ToDoGroup(\r\n            id = \"group$it\",\r\n            name = \"Group$it\",\r\n            lists = buildList(muchList, muchTask, muchStep),\r\n            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "start_lineno" : "32",
  "methodName" : "buildGroup",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/184",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nprivate fun buildGroup(\r\n    muchGroup: Int,\r\n    muchList: Int,\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoGroup> {\r\n    return build(muchGroup) {\r\n        ToDoGroup(\r\n            id = \"group$it\",\r\n            name = \"Group$it\",\r\n            lists = buildList(muchList, muchTask, muchStep),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "context" : "private fun buildList(\r\n    muchList: Int,\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoList> {\r\n    return build(muchList) {\r\n        ToDoList(\r\n            id = \"list$it\",\r\n            name = \"List$it\",\r\n            color = ToDoColor.BLUE,\r\n            tasks = buildTask(muchTask, muchStep),\r\n            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "start_lineno" : "49",
  "methodName" : "buildList",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/185",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.model.ToDoColor\nprivate fun buildList(\r\n    muchList: Int,\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoList> {\r\n    return build(muchList) {\r\n        ToDoList(\r\n            id = \"list$it\",\r\n            name = \"List$it\",\r\n            color = ToDoColor.BLUE,\r\n            tasks = buildTask(muchTask, muchStep),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "context" : "private fun buildTask(\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoTask> {\r\n    return build(muchTask) {\r\n        ToDoTask(\r\n            id = \"task$it\",\r\n            name = \"Task$it\",\r\n            status = ToDoStatus.IN_PROGRESS,\r\n            steps = buildStep(muchStep),\r\n            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "start_lineno" : "66",
  "methodName" : "buildTask",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/186",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nprivate fun buildTask(\r\n    muchTask: Int,\r\n    muchStep: Int\r\n): List<ToDoTask> {\r\n    return build(muchTask) {\r\n        ToDoTask(\r\n            id = \"task$it\",\r\n            name = \"Task$it\",\r\n            status = ToDoStatus.IN_PROGRESS,\r\n            steps = buildStep(muchStep),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "92",
  "ground_truth" : "            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "context" : "private fun buildStep(muchStep: Int): List<ToDoStep> {\r\n    return build(muchStep) {\r\n        ToDoStep(\r\n            id = \"step$it\",\r\n            name = \"Step$it\",\r\n            status = ToDoStatus.IN_PROGRESS,\r\n            createdAt = DateTimeProviderImpl().now(),\r\n            updatedAt = DateTimeProviderImpl().now()\r\n        )\r\n    }\r\n}",
  "start_lineno" : "82",
  "methodName" : "buildStep",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/187",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nprivate fun buildStep(muchStep: Int): List<ToDoStep> {\r\n    return build(muchStep) {\r\n        ToDoStep(\r\n            id = \"step$it\",\r\n            name = \"Step$it\",\r\n            status = ToDoStatus.IN_PROGRESS,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "    for (i in 0 until much) {\r\n        list.add(obj(i))\r\n    }\r\n    return list\r\n}",
  "context" : "private fun <T> build(much: Int, obj: (Int) -> T): List<T> {\r\n    val list = mutableListOf<T>()\r\n    for (i in 0 until much) {\r\n        list.add(obj(i))\r\n    }\r\n    return list\r\n}",
  "start_lineno" : "94",
  "methodName" : "build",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt",
  "task_id" : "Compose-ToDo/188",
  "prompt" : "private fun <T> build(much: Int, obj: (Int) -> T): List<T> {\r\n    val list = mutableListOf<T>()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "        composable(route = \"root\") {\r\n            View1(navController = navController)\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun NavPg() {\r\n\r\n    val navController = rememberNavController()\r\n\r\n    NavHost(\r\n        navController = navController,\r\n        startDestination = \"root\"\r\n    ) {\r\n        composable(route = \"root\") {\r\n            View1(navController = navController)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "28",
  "methodName" : "NavPg",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/189",
  "prompt" : "import androidx.navigation.compose.rememberNavController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun NavPg() {\r\n\r\n    val navController = rememberNavController()\r\n\r\n    NavHost(\r\n        navController = navController,\r\n        startDestination = \"root\"\r\n    ) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "127",
  "ground_truth" : "        ) {\r\n            Text(\"Button\")\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun View3(navController: NavController) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        Text(\"View 3\")\r\n        Button(\r\n            {\r\n\r\n            }\r\n        ) {\r\n            Text(\"Button\")\r\n        }\r\n    }\r\n}",
  "start_lineno" : "112",
  "methodName" : "View3",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/190",
  "prompt" : "import androidx.navigation.NavController\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun View3(navController: NavController) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        Text(\"View 3\")\r\n        Button(\r\n            {\r\n\r\n            }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "152",
  "ground_truth" : "        ) {\r\n            Text(\"Button2\")\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun View4(navController: NavController, vm2: Vm2) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize().padding(50.dp)\r\n    ) {\r\n        val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n        Text(\"View 4 ${state.value}\")\r\n        Button(\r\n            {\r\n                navController.navigate(\"root2a\")\r\n            }\r\n        ) {\r\n            Text(\"Button\")\r\n        }\r\n\r\n        Button(\r\n            {\r\n                vm2.inc()\r\n            }\r\n        ) {\r\n            Text(\"Button2\")\r\n        }\r\n    }\r\n}",
  "start_lineno" : "128",
  "methodName" : "View4",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/191",
  "prompt" : "import androidx.navigation.NavController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun View4(navController: NavController, vm2: Vm2) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize().padding(50.dp)\r\n    ) {\r\n        val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n        Text(\"View 4 ${state.value}\")\r\n        Button(\r\n            {\r\n                navController.navigate(\"root2a\")\r\n            }\r\n        ) {\r\n            Text(\"Button\")\r\n        }\r\n\r\n        Button(\r\n            {\r\n                vm2.inc()\r\n            }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "166",
  "ground_truth" : "        }\r\n    ) {\r\n        Text(\"Button inc\")\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun View5(navController: NavController, vm2: Vm2) {\r\n    val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n    Text(\"View 5 ${state.value}\")\r\n\r\n    Button(\r\n        {\r\n            vm2.inc()\r\n        }\r\n    ) {\r\n        Text(\"Button inc\")\r\n    }\r\n}",
  "start_lineno" : "153",
  "methodName" : "View5",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/192",
  "prompt" : "import androidx.navigation.NavController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\n\r\n@Composable\r\nfun View5(navController: NavController, vm2: Vm2) {\r\n    val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n    Text(\"View 5 ${state.value}\")\r\n\r\n    Button(\r\n        {\r\n            vm2.inc()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "174",
  "ground_truth" : "            data1.inc()\r\n        }\r\n    }",
  "context" : "fun inc() {\r\n        viewModelScope.launch {\r\n            data1.inc()\r\n        }\r\n    }",
  "start_lineno" : "170",
  "methodName" : "inc",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/193",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun inc() {\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _state\nval state StateFlow<Int>",
  "app_type" : "notes",
  "end_lineno" : "184",
  "ground_truth" : "            data1.inc()\r\n        }\r\n    }",
  "context" : "fun inc() {\r\n        viewModelScope.launch {\r\n            data1.inc()\r\n        }\r\n    }",
  "start_lineno" : "180",
  "methodName" : "inc",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt",
  "task_id" : "Compose-ToDo/194",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun inc() {\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "37",
  "ground_truth" : "        PgIcon(\r\n            imageVector = imageVector,\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalBackButton(\r\n    onClick: () -> Unit,\r\n    imageVector: ImageVector = Icons.Rounded.ChevronLeft\r\n) {\r\n    PgIconButton(\r\n        onClick = onClick,\r\n        modifier = Modifier.size(28.dp),\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        PgIcon(\r\n            imageVector = imageVector,\r\n        )\r\n    }\r\n}",
  "start_lineno" : "22",
  "methodName" : "PgModalBackButton",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt",
  "task_id" : "Compose-ToDo/195",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Button\nimport androidx.compose.material.icons.rounded.ChevronLeft\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\n\r\n@Composable\r\nfun PgModalBackButton(\r\n    onClick: () -> Unit,\r\n    imageVector: ImageVector = Icons.Rounded.ChevronLeft\r\n) {\r\n    PgIconButton(\r\n        onClick = onClick,\r\n        modifier = Modifier.size(28.dp),\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "        enabled = enabled\r\n    ) {\r\n        content()\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgIconButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    color: Color = MaterialTheme.colorScheme.secondary,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val shape = CircleShape\r\n    IconButton(\r\n        onClick = onClick,\r\n        modifier = modifier.background(\r\n            color = color,\r\n            shape = shape\r\n        ).clip(shape),\r\n        enabled = enabled\r\n    ) {\r\n        content()\r\n    }\r\n}",
  "start_lineno" : "38",
  "methodName" : "PgIconButton",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt",
  "task_id" : "Compose-ToDo/196",
  "prompt" : "import androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgIconButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    color: Color = MaterialTheme.colorScheme.secondary,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val shape = CircleShape\r\n    IconButton(\r\n        onClick = onClick,\r\n        modifier = modifier.background(\r\n            color = color,\r\n            shape = shape\r\n        ).clip(shape),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "77",
  "ground_truth" : "        colors = ButtonDefaults.buttonColors(\r\n            disabledContainerColor = MaterialTheme.colorScheme.primary.copy(alpha = AlphaDisabled)\r\n        ),\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PgButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Button(\r\n        modifier = modifier.height(56.dp),\r\n        enabled = enabled,\r\n        onClick = onClick,\r\n        shape = MaterialTheme.shapes.medium,\r\n        content = content,\r\n        colors = ButtonDefaults.buttonColors(\r\n            disabledContainerColor = MaterialTheme.colorScheme.primary.copy(alpha = AlphaDisabled)\r\n        ),\r\n    )\r\n}",
  "start_lineno" : "59",
  "methodName" : "PgButton",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt",
  "task_id" : "Compose-ToDo/197",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.RowScope\n\r\n@Composable\r\nfun PgButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Button(\r\n        modifier = modifier.height(56.dp),\r\n        enabled = enabled,\r\n        onClick = onClick,\r\n        shape = MaterialTheme.shapes.medium,\r\n        content = content,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "91",
  "ground_truth" : "        onClick = onClick,\r\n        shape = MaterialTheme.shapes.medium,\r\n        content = content\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PgSecondaryButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    OutlinedButton(\r\n        modifier = modifier.height(56.dp),\r\n        onClick = onClick,\r\n        shape = MaterialTheme.shapes.medium,\r\n        content = content\r\n    )\r\n}",
  "start_lineno" : "78",
  "methodName" : "PgSecondaryButton",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt",
  "task_id" : "Compose-ToDo/198",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.OutlinedButton\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.RowScope\n\r\n@Composable\r\nfun PgSecondaryButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    OutlinedButton(\r\n        modifier = modifier.height(56.dp),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "                longestDistanceToACorner(size, offset) * progress,\r\n                Path.Direction.CW\r\n            )\r\n        }.asComposePath())\r\n    }",
  "context" : "override fun createOutline(size: Size, layoutDirection: LayoutDirection, density: Density): Outline {\r\n        return Outline.Generic(Path().apply {\r\n            addCircle(\r\n                offset?.x ?: (size.width / 2f),\r\n                offset?.y ?: (size.height / 2f),\r\n                longestDistanceToACorner(size, offset) * progress,\r\n                Path.Direction.CW\r\n            )\r\n        }.asComposePath())\r\n    }",
  "start_lineno" : "110",
  "methodName" : "createOutline",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\CircularRevealAnimation.kt",
  "task_id" : "Compose-ToDo/199",
  "prompt" : "import androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.Density\nimport androidx.compose.ui.graphics.Outline\nimport androidx.compose.ui.geometry.Size\nimport android.graphics.Path\noverride fun createOutline(size: Size, layoutDirection: LayoutDirection, density: Density): Outline {\r\n        return Outline.Generic(Path().apply {\r\n            addCircle(\r\n                offset?.x ?: (size.width / 2f),\r\n                offset?.y ?: (size.height / 2f),\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "132",
  "ground_truth" : "        val bottomLeft = hypot(offset.x, size.height - offset.y)\r\n        val bottomRight = hypot(size.width - offset.x, size.height - offset.y)\r\n\r\n        return topLeft.coerceAtLeast(topRight).coerceAtLeast(bottomLeft).coerceAtLeast(bottomRight)\r\n    }",
  "context" : "private fun longestDistanceToACorner(size: Size, offset: Offset?): Float {\r\n        if (offset == null) {\r\n            return hypot(size.width / 2f, size.height / 2f)\r\n        }\r\n\r\n        val topLeft = hypot(offset.x, offset.y)\r\n        val topRight = hypot(size.width - offset.x, offset.y)\r\n        val bottomLeft = hypot(offset.x, size.height - offset.y)\r\n        val bottomRight = hypot(size.width - offset.x, size.height - offset.y)\r\n\r\n        return topLeft.coerceAtLeast(topRight).coerceAtLeast(bottomLeft).coerceAtLeast(bottomRight)\r\n    }",
  "start_lineno" : "121",
  "methodName" : "longestDistanceToACorner",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\CircularRevealAnimation.kt",
  "task_id" : "Compose-ToDo/200",
  "prompt" : "import kotlin.math.hypot\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.geometry.Offset\nprivate fun longestDistanceToACorner(size: Size, offset: Offset?): Float {\r\n        if (offset == null) {\r\n            return hypot(size.width / 2f, size.height / 2f)\r\n        }\r\n\r\n        val topLeft = hypot(offset.x, offset.y)\r\n        val topRight = hypot(size.width - offset.x, offset.y)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "            modifier = Modifier.align(Alignment.Center),\r\n            color = MaterialTheme.colorScheme.onSurface.copy(alpha = AlphaDisabled)\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgEmpty(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(modifier.fillMaxWidth()) {\r\n        Text(\r\n            text,\r\n            modifier = Modifier.align(Alignment.Center),\r\n            color = MaterialTheme.colorScheme.onSurface.copy(alpha = AlphaDisabled)\r\n        )\r\n    }\r\n}",
  "start_lineno" : "11",
  "methodName" : "PgEmpty",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Empty.kt",
  "task_id" : "Compose-ToDo/201",
  "prompt" : "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun PgEmpty(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(modifier.fillMaxWidth()) {\r\n        Text(\r\n            text,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "                .size(0.dp)\r\n                .weight(0.2F)\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalBackHeader(\r\n    text: String,\r\n    onClickBack: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(modifier = modifier) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 16.dp)\r\n                .weight(0.2F)\r\n        ) {\r\n            PgModalBackButton(\r\n                onClick = onClickBack\r\n            )\r\n        }\r\n\r\n        PgModalTitle(\r\n            text = text,\r\n            modifier = Modifier.weight(0.6F)\r\n        )\r\n\r\n        Spacer(\r\n            Modifier\r\n                .size(0.dp)\r\n                .weight(0.2F)\r\n        )\r\n    }\r\n}",
  "start_lineno" : "11",
  "methodName" : "PgModalBackHeader",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Header.kt",
  "task_id" : "Compose-ToDo/202",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun PgModalBackHeader(\r\n    text: String,\r\n    onClickBack: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(modifier = modifier) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 16.dp)\r\n                .weight(0.2F)\r\n        ) {\r\n            PgModalBackButton(\r\n                onClick = onClickBack\r\n            )\r\n        }\r\n\r\n        PgModalTitle(\r\n            text = text,\r\n            modifier = Modifier.weight(0.6F)\r\n        )\r\n\r\n        Spacer(\r\n            Modifier\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "        contentDescription = \"\",\r\n        tint = tint,\r\n        modifier = modifier\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PgIcon(\r\n    modifier: Modifier = Modifier,\r\n    imageVector: ImageVector,\r\n    tint: Color = LocalContentColor.current,\r\n) {\r\n    Icon(\r\n        imageVector = imageVector,\r\n        contentDescription = \"\",\r\n        tint = tint,\r\n        modifier = modifier\r\n    )\r\n}",
  "start_lineno" : "9",
  "methodName" : "PgIcon",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Icon.kt",
  "task_id" : "Compose-ToDo/203",
  "prompt" : "import androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.Icon\n\r\n@Composable\r\nfun PgIcon(\r\n    modifier: Modifier = Modifier,\r\n    imageVector: ImageVector,\r\n    tint: Color = LocalContentColor.current,\r\n) {\r\n    Icon(\r\n        imageVector = imageVector,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "        verticalArrangement = verticalArrangement,\r\n        horizontalAlignment = horizontalAlignment,\r\n        content = content\r\n    )\r\n}",
  "context" : "\r\n@Composable\r\nfun PgPageLayout(\r\n    modifier: Modifier = Modifier,\r\n    verticalArrangement: Arrangement.Vertical = Arrangement.Top,\r\n    horizontalAlignment: Alignment.Horizontal = Alignment.Start,\r\n    content: @Composable ColumnScope.() -> Unit\r\n) {\r\n    Column(\r\n        modifier = modifier\r\n            .statusBarsPadding()\r\n            .navigationBarsPadding(),\r\n        verticalArrangement = verticalArrangement,\r\n        horizontalAlignment = horizontalAlignment,\r\n        content = content\r\n    )\r\n}",
  "start_lineno" : "24",
  "methodName" : "PgPageLayout",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt",
  "task_id" : "Compose-ToDo/204",
  "prompt" : "import androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.statusBarsPadding\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nfun PgPageLayout(\r\n    modifier: Modifier = Modifier,\r\n    verticalArrangement: Arrangement.Vertical = Arrangement.Top,\r\n    horizontalAlignment: Alignment.Horizontal = Alignment.Start,\r\n    content: @Composable ColumnScope.() -> Unit\r\n) {\r\n    Column(\r\n        modifier = modifier\r\n            .statusBarsPadding()\r\n            .navigationBarsPadding(),\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "61",
  "ground_truth" : "        item {\r\n            Spacer(Modifier.height(8.dp))\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalLayout(\r\n    title: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    PgModalLazyColumn(modifier) {\r\n        item {\r\n            Spacer(Modifier.height(24.dp))\r\n            title()\r\n            Spacer(Modifier.height(24.dp))\r\n        }\r\n\r\n        content()\r\n\r\n        item {\r\n            Spacer(Modifier.height(8.dp))\r\n        }\r\n    }\r\n}",
  "start_lineno" : "41",
  "methodName" : "PgModalLayout",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt",
  "task_id" : "Compose-ToDo/205",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListScope\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun PgModalLayout(\r\n    title: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    PgModalLazyColumn(modifier) {\r\n        item {\r\n            Spacer(Modifier.height(24.dp))\r\n            title()\r\n            Spacer(Modifier.height(24.dp))\r\n        }\r\n\r\n        content()\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "82",
  "ground_truth" : "                .imePadding(),\r\n            content = content\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalLazyColumn(\r\n    modifier: Modifier = Modifier,\r\n    shape: Shape = RectangleShape,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background,\r\n            shape = shape\r\n        )\r\n    ) {\r\n        LazyColumn(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r\n                .imePadding(),\r\n            content = content\r\n        )\r\n    }\r\n}",
  "start_lineno" : "62",
  "methodName" : "PgModalLazyColumn",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt",
  "task_id" : "Compose-ToDo/206",
  "prompt" : "import androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.lazy.LazyListScope\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgModalLazyColumn(\r\n    modifier: Modifier = Modifier,\r\n    shape: Shape = RectangleShape,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background,\r\n            shape = shape\r\n        )\r\n    ) {\r\n        LazyColumn(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "            verticalAlignment = verticalAlignment,\r\n            content = content\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalRow(\r\n    modifier: Modifier = Modifier,\r\n    horizontalArrangement: Arrangement.Horizontal = Arrangement.Start,\r\n    verticalAlignment: Alignment.Vertical = Alignment.Top,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background\r\n        )\r\n    ) {\r\n        Row(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r\n                .imePadding(),\r\n            horizontalArrangement = horizontalArrangement,\r\n            verticalAlignment = verticalAlignment,\r\n            content = content\r\n        )\r\n    }\r\n}",
  "start_lineno" : "83",
  "methodName" : "PgModalRow",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt",
  "task_id" : "Compose-ToDo/207",
  "prompt" : "import androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.imePadding\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgModalRow(\r\n    modifier: Modifier = Modifier,\r\n    horizontalArrangement: Arrangement.Horizontal = Arrangement.Start,\r\n    verticalAlignment: Alignment.Vertical = Alignment.Top,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background\r\n        )\r\n    ) {\r\n        Row(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r\n                .imePadding(),\r\n            horizontalArrangement = horizontalArrangement,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val offsetState\nval mutatorMutex\nvar currentValue SwipeSearchValue\nvar isSwipeInProgress Boolean\nval offset Float\nvar shouldConsumeScrollDown",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "        SwipeSearchState(initialValue)\r\n    }.apply {\r\n        this.currentValue = initialValue\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun rememberSwipeSearchState(\r\n    initialValue: SwipeSearchValue\r\n): SwipeSearchState {\r\n    return remember {\r\n        SwipeSearchState(initialValue)\r\n    }.apply {\r\n        this.currentValue = initialValue\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "rememberSwipeSearchState",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt",
  "task_id" : "Compose-ToDo/208",
  "prompt" : "import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberSwipeSearchState(\r\n    initialValue: SwipeSearchValue\r\n): SwipeSearchState {\r\n    return remember {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val offsetState\nval mutatorMutex\nvar currentValue SwipeSearchValue\nvar isSwipeInProgress Boolean\nval offset Float\nvar shouldConsumeScrollDown",
  "app_type" : "notes",
  "end_lineno" : "79",
  "ground_truth" : "            offsetState.animateTo(offset)\r\n        }\r\n    }",
  "context" : "internal suspend fun animateOffsetTo(offset: Float) {\r\n        mutatorMutex.mutate {\r\n            offsetState.animateTo(offset)\r\n        }\r\n    }",
  "start_lineno" : "75",
  "methodName" : "animateOffsetTo",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt",
  "task_id" : "Compose-ToDo/209",
  "prompt" : "import androidx.compose.ui.geometry.Offset\nimport androidx.compose.animation.core.animate\ninternal suspend fun animateOffsetTo(offset: Float) {\r\n        mutatorMutex.mutate {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val offsetState\nval mutatorMutex\nvar currentValue SwipeSearchValue\nvar isSwipeInProgress Boolean\nval offset Float\nvar shouldConsumeScrollDown",
  "app_type" : "notes",
  "end_lineno" : "85",
  "ground_truth" : "            offsetState.snapTo((offsetState.value + delta).coerceAtMost(max))\r\n        }\r\n    }",
  "context" : "internal suspend fun dispatchScrollDelta(delta: Float, max: Float) {\r\n        mutatorMutex.mutate(MutatePriority.UserInput) {\r\n            offsetState.snapTo((offsetState.value + delta).coerceAtMost(max))\r\n        }\r\n    }",
  "start_lineno" : "81",
  "methodName" : "dispatchScrollDelta",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt",
  "task_id" : "Compose-ToDo/210",
  "prompt" : "import androidx.compose.foundation.MutatePriority\ninternal suspend fun dispatchScrollDelta(delta: Float, max: Float) {\r\n        mutatorMutex.mutate(MutatePriority.UserInput) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val offsetState\nval mutatorMutex\nvar currentValue SwipeSearchValue\nvar isSwipeInProgress Boolean\nval offset Float\nvar shouldConsumeScrollDown",
  "app_type" : "notes",
  "end_lineno" : "213",
  "ground_truth" : "                performDrag(available, SCROLL_UP)\r\n            }\r\n            else -> Offset.Zero\r\n        }\r\n    }",
  "context" : "override fun onPreScroll(\r\n        available: Offset,\r\n        source: NestedScrollSource\r\n    ): Offset {\r\n        return when {\r\n            // If isn't enabled, return zero\r\n            !enabled -> Offset.Zero\r\n            // If scroll up, handle it\r\n            source == NestedScrollSource.Drag && available.y < 0 -> {\r\n                performDrag(available, SCROLL_UP)\r\n            }\r\n            else -> Offset.Zero\r\n        }\r\n    }",
  "start_lineno" : "200",
  "methodName" : "onPreScroll",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt",
  "task_id" : "Compose-ToDo/211",
  "prompt" : "import androidx.compose.ui.input.nestedscroll.NestedScrollSource\nimport androidx.compose.ui.geometry.Offset\noverride fun onPreScroll(\r\n        available: Offset,\r\n        source: NestedScrollSource\r\n    ): Offset {\r\n        return when {\r\n            // If isn't enabled, return zero\r\n            !enabled -> Offset.Zero\r\n            // If scroll up, handle it\r\n            source == NestedScrollSource.Drag && available.y < 0 -> {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val offsetState\nval mutatorMutex\nvar currentValue SwipeSearchValue\nvar isSwipeInProgress Boolean\nval offset Float\nvar shouldConsumeScrollDown",
  "app_type" : "notes",
  "end_lineno" : "246",
  "ground_truth" : "        // Reset to default\r\n        shouldConsumeScrollDown = true\r\n\r\n        return Velocity.Zero\r\n    }",
  "context" : "override suspend fun onPreFling(available: Velocity): Velocity {\r\n        performFling(available)\r\n\r\n        // Reset to default\r\n        shouldConsumeScrollDown = true\r\n\r\n        return Velocity.Zero\r\n    }",
  "start_lineno" : "239",
  "methodName" : "onPreFling",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt",
  "task_id" : "Compose-ToDo/212",
  "prompt" : "import androidx.compose.ui.unit.Velocity\noverride suspend fun onPreFling(available: Velocity): Velocity {\r\n        performFling(available)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "31",
  "ground_truth" : "            style = MaterialTheme.typography.titleMedium.copy(textAlign = TextAlign.Center),\r\n            color = textColor,\r\n        )\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun PgModalTitle(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n    textColor: Color = Color.Unspecified\r\n) {\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.Center,\r\n        modifier = modifier.fillMaxWidth()\r\n    ) {\r\n        Text(\r\n            text = text,\r\n            style = MaterialTheme.typography.titleMedium.copy(textAlign = TextAlign.Center),\r\n            color = textColor,\r\n        )\r\n    }\r\n}",
  "start_lineno" : "13",
  "methodName" : "PgModalTitle",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Text.kt",
  "task_id" : "Compose-ToDo/213",
  "prompt" : "import androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nfun PgModalTitle(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n    textColor: Color = Color.Unspecified\r\n) {\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.Center,\r\n        modifier = modifier.fillMaxWidth()\r\n    ) {\r\n        Text(\r\n            text = text,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "88",
  "ground_truth" : "        date.isTomorrow(currentDate) -> resources.getString(R.string.todo_task_tomorrow)\r\n        date.isYesterday(currentDate) -> resources.getString(R.string.todo_task_yesterday)\r\n        else -> date.formatDateTime()\r\n    }\r\n}",
  "context" : "fun LocalDate.headerDateDisplayable(resources: Resources, currentDate: LocalDateTime = DateTimeProviderImpl().now()): String {\r\n    val date = LocalDateTime.of(this, LocalTime.MIN)\r\n    return when {\r\n        date.isSameDay(currentDate) -> resources.getString(R.string.todo_task_today)\r\n        date.isTomorrow(currentDate) -> resources.getString(R.string.todo_task_tomorrow)\r\n        date.isYesterday(currentDate) -> resources.getString(R.string.todo_task_yesterday)\r\n        else -> date.formatDateTime()\r\n    }\r\n}",
  "start_lineno" : "80",
  "methodName" : "headerDateDisplayable",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt",
  "task_id" : "Compose-ToDo/214",
  "prompt" : "import java.time.LocalTime\nimport java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.foundation.wrapper.DateTimeProviderImpl\nimport com.wisnu.kurniawan.composetodolist.R\nimport com.wisnu.foundation.coredatetime.isSameDay\nimport android.content.res.Resources\nfun LocalDate.headerDateDisplayable(resources: Resources, currentDate: LocalDateTime = DateTimeProviderImpl().now()): String {\r\n    val date = LocalDateTime.of(this, LocalTime.MIN)\r\n    return when {\r\n        date.isSameDay(currentDate) -> resources.getString(R.string.todo_task_today)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "96",
  "ground_truth" : "        dueDate?.toLocalTime().toString()\r\n    } else {\r\n        null\r\n    }\r\n}",
  "context" : "fun ToDoTask.timeDisplayable(): String? {\r\n    return if (isDueDateTimeSet) {\r\n        dueDate?.toLocalTime().toString()\r\n    } else {\r\n        null\r\n    }\r\n}",
  "start_lineno" : "90",
  "methodName" : "timeDisplayable",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt",
  "task_id" : "Compose-ToDo/215",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.timeDisplayable(): String? {\r\n    return if (isDueDateTimeSet) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "165",
  "ground_truth" : "        resources.getString(R.string.todo_task_item_info, totalStepDone.toString(), totalStep.toString())\r\n    } else {\r\n        \"\"\r\n    }\r\n}",
  "context" : "private fun ToDoTask.totalStepInfo(resources: Resources): String {\r\n    val totalStep = steps.size\r\n    return if (totalStep != 0) {\r\n        val totalStepDone = steps.filter { it.status == ToDoStatus.COMPLETE }.size\r\n        resources.getString(R.string.todo_task_item_info, totalStepDone.toString(), totalStep.toString())\r\n    } else {\r\n        \"\"\r\n    }\r\n}",
  "start_lineno" : "157",
  "methodName" : "totalStepInfo",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt",
  "task_id" : "Compose-ToDo/216",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nimport com.wisnu.kurniawan.composetodolist.R\nimport android.content.res.Resources\nprivate fun ToDoTask.totalStepInfo(resources: Resources): String {\r\n    val totalStep = steps.size\r\n    return if (totalStep != 0) {\r\n        val totalStepDone = steps.filter { it.status == ToDoStatus.COMPLETE }.size\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "180",
  "ground_truth" : "        info.toString()\r\n    } else {\r\n        \"\"\r\n    }\r\n}",
  "context" : "private fun ToDoTask.dueDateInfo(resources: Resources): String {\r\n    val info = StringBuilder()\r\n    val dueDateInfo = dueDateDisplayable(resources)\r\n    val timeInfo = timeDisplayable()\r\n\r\n    return if (dueDateInfo != null) {\r\n        info.append(dueDateInfo)\r\n        if (timeInfo != null) info.append(\" $timeInfo\")\r\n        if (repeat != ToDoRepeat.NEVER) info.append(\", ${resources.getString(repeat.displayable())}\")\r\n        info.toString()\r\n    } else {\r\n        \"\"\r\n    }\r\n}",
  "start_lineno" : "167",
  "methodName" : "dueDateInfo",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt",
  "task_id" : "Compose-ToDo/217",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.displayable\nimport com.wisnu.kurniawan.composetodolist.R\nimport android.content.res.Resources\nprivate fun ToDoTask.dueDateInfo(resources: Resources): String {\r\n    val info = StringBuilder()\r\n    val dueDateInfo = dueDateDisplayable(resources)\r\n    val timeInfo = timeDisplayable()\r\n\r\n    return if (dueDateInfo != null) {\r\n        info.append(dueDateInfo)\r\n        if (timeInfo != null) info.append(\" $timeInfo\")\r\n        if (repeat != ToDoRepeat.NEVER) info.append(\", ${resources.getString(repeat.displayable())}\")\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "63",
  "ground_truth" : "    picker.show(supportFragmentManager, TIME_PICKER_TAG)\r\n    picker.addOnPositiveButtonClickListener {\r\n        selectedTime(LocalTime.of(picker.hour, picker.minute))\r\n    }\r\n}",
  "context" : "fun AppCompatActivity.showTimePicker(\r\n    time: LocalTime? = null,\r\n    selectedTime: (LocalTime) -> Unit\r\n) {\r\n    val picker = MaterialTimePicker\r\n        .Builder()\r\n        .setTimeFormat(TimeFormat.CLOCK_12H)\r\n        .apply {\r\n            if (time != null) {\r\n                setHour(time.hour)\r\n                setMinute(time.minute)\r\n            } else {\r\n                setHour(9)\r\n            }\r\n        }\r\n        .build()\r\n\r\n    picker.show(supportFragmentManager, TIME_PICKER_TAG)\r\n    picker.addOnPositiveButtonClickListener {\r\n        selectedTime(LocalTime.of(picker.hour, picker.minute))\r\n    }\r\n}",
  "start_lineno" : "42",
  "methodName" : "showTimePicker",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\AppCompatActivityExt.kt",
  "task_id" : "Compose-ToDo/218",
  "prompt" : "import java.time.LocalTime\nimport com.google.android.material.timepicker.TimeFormat\nimport com.google.android.material.timepicker.MaterialTimePicker\nimport androidx.appcompat.app.AppCompatActivity\nfun AppCompatActivity.showTimePicker(\r\n    time: LocalTime? = null,\r\n    selectedTime: (LocalTime) -> Unit\r\n) {\r\n    val picker = MaterialTimePicker\r\n        .Builder()\r\n        .setTimeFormat(TimeFormat.CLOCK_12H)\r\n        .apply {\r\n            if (time != null) {\r\n                setHour(time.hour)\r\n                setMinute(time.minute)\r\n            } else {\r\n                setHour(9)\r\n            }\r\n        }\r\n        .build()\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "    val resources = resources()\r\n    return resources.getBoolean(id)\r\n}",
  "context" : "\r\n@Composable\r\n@ReadOnlyComposable\r\nfun boolResource(@BoolRes id: Int): Boolean {\r\n    val resources = resources()\r\n    return resources.getBoolean(id)\r\n}",
  "start_lineno" : "9",
  "methodName" : "boolResource",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BoolResourceExt.kt",
  "task_id" : "Compose-ToDo/219",
  "prompt" : "import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\nimport androidx.annotation.BoolRes\n\r\n@Composable\r\n@ReadOnlyComposable\r\nfun boolResource(@BoolRes id: Int): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}",
  "context" : "\r\n@Composable\r\n@ReadOnlyComposable\r\nprivate fun resources(): Resources {\r\n    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}",
  "start_lineno" : "16",
  "methodName" : "resources",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BoolResourceExt.kt",
  "task_id" : "Compose-ToDo/220",
  "prompt" : "import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\nimport android.content.res.Resources\n\r\n@Composable\r\n@ReadOnlyComposable\r\nprivate fun resources(): Resources {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "    )\r\n    return remember(sheetState) {\r\n        BottomSheetNavigator(sheetState = sheetState)\r\n    }\r\n}",
  "context" : "\r\n@ExperimentalMaterialNavigationApi\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@Composable\r\nfun rememberBottomSheetNavigator(\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec\r\n): BottomSheetNavigator {\r\n    val sheetState = rememberModalBottomSheetStateInternal(\r\n        ModalBottomSheetValue.Hidden,\r\n        animationSpec\r\n    )\r\n    return remember(sheetState) {\r\n        BottomSheetNavigator(sheetState = sheetState)\r\n    }\r\n}",
  "start_lineno" : "15",
  "methodName" : "rememberBottomSheetNavigator",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BottomSheetNavigator.kt",
  "task_id" : "Compose-ToDo/221",
  "prompt" : "import com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi\nimport com.google.accompanist.navigation.material.BottomSheetNavigator\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberModalBottomSheetState\nimport androidx.compose.material.SwipeableDefaults\nimport androidx.compose.material.ModalBottomSheetValue\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@ExperimentalMaterialNavigationApi\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@Composable\r\nfun rememberBottomSheetNavigator(\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec\r\n): BottomSheetNavigator {\r\n    val sheetState = rememberModalBottomSheetStateInternal(\r\n        ModalBottomSheetValue.Hidden,\r\n        animationSpec\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "    skipHalfExpanded = true,\r\n    confirmValueChange = confirmStateChange,\r\n)",
  "context" : "\r\n@Composable\r\n@ExperimentalMaterialApi\r\nprivate fun rememberModalBottomSheetStateInternal(\r\n    initialValue: ModalBottomSheetValue,\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec,\r\n    confirmStateChange: (ModalBottomSheetValue) -> Boolean = { true }\r\n): ModalBottomSheetState = rememberModalBottomSheetState(\r\n    initialValue = initialValue,\r\n    animationSpec = animationSpec,\r\n    skipHalfExpanded = true,\r\n    confirmValueChange = confirmStateChange,\r\n)",
  "start_lineno" : "30",
  "methodName" : "rememberModalBottomSheetStateInternal",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BottomSheetNavigator.kt",
  "task_id" : "Compose-ToDo/222",
  "prompt" : "import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberModalBottomSheetState\nimport androidx.compose.material.SwipeableDefaults\nimport androidx.compose.material.ModalBottomSheetValue\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@Composable\r\n@ExperimentalMaterialApi\r\nprivate fun rememberModalBottomSheetStateInternal(\r\n    initialValue: ModalBottomSheetValue,\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec,\r\n    confirmStateChange: (ModalBottomSheetValue) -> Boolean = { true }\r\n): ModalBottomSheetState = rememberModalBottomSheetState(\r\n    initialValue = initialValue,\r\n    animationSpec = animationSpec,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "9",
  "ground_truth" : "    delay(260)\r\n    requestFocus()\r\n}",
  "context" : "suspend fun FocusRequester.requestFocusImeAware() {\r\n    delay(260)\r\n    requestFocus()\r\n}",
  "start_lineno" : "6",
  "methodName" : "requestFocusImeAware",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\FocusRequesterExt.kt",
  "task_id" : "Compose-ToDo/223",
  "prompt" : "import androidx.compose.ui.focus.FocusRequester\nsuspend fun FocusRequester.requestFocusImeAware() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "            radius = radius,\r\n            center = center\r\n        )\r\n    }\r\n}",
  "context" : "fun Modifier.drawGrowingCircle(\r\n    color: Color,\r\n    center: Offset,\r\n    radius: Float\r\n) = drawWithContent {\r\n    drawContent()\r\n    clipRect {\r\n        drawCircle(\r\n            color = color,\r\n            radius = radius,\r\n            center = center\r\n        )\r\n    }\r\n}",
  "start_lineno" : "30",
  "methodName" : "drawGrowingCircle",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\ModifierExt.kt",
  "task_id" : "Compose-ToDo/224",
  "prompt" : "import androidx.compose.ui.graphics.drawscope.clipRect\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.draw.drawWithContent\nimport androidx.compose.ui.Modifier\nfun Modifier.drawGrowingCircle(\r\n    color: Color,\r\n    center: Offset,\r\n    radius: Float\r\n) = drawWithContent {\r\n    drawContent()\r\n    clipRect {\r\n        drawCircle(\r\n            color = color,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "            lastPosition = coordinates.positionInParent()\r\n            onChange(coordinates)\r\n        }\r\n    }\r\n}",
  "context" : "fun Modifier.onPositionInParentChanged(\r\n    onChange: (LayoutCoordinates) -> Unit\r\n) = composed {\r\n    var lastPosition by remember { mutableStateOf(Offset.Zero) }\r\n    Modifier.onGloballyPositioned { coordinates ->\r\n        if (coordinates.positionInParent() != lastPosition) {\r\n            lastPosition = coordinates.positionInParent()\r\n            onChange(coordinates)\r\n        }\r\n    }\r\n}",
  "start_lineno" : "45",
  "methodName" : "onPositionInParentChanged",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\ModifierExt.kt",
  "task_id" : "Compose-ToDo/225",
  "prompt" : "import androidx.compose.ui.layout.positionInParent\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.layout.LayoutCoordinates\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nfun Modifier.onPositionInParentChanged(\r\n    onChange: (LayoutCoordinates) -> Unit\r\n) = composed {\r\n    var lastPosition by remember { mutableStateOf(Offset.Zero) }\r\n    Modifier.onGloballyPositioned { coordinates ->\r\n        if (coordinates.positionInParent() != lastPosition) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "            handle(it)\r\n            viewModel.resetEffect()\r\n        }\r\n    }\r\n}",
  "context" : "\r\n@Composable\r\nfun <STATE, EFFECT, ACTION, ENVIRONMENT> HandleEffect(\r\n    viewModel: StatefulViewModel<STATE, EFFECT, ACTION, ENVIRONMENT>,\r\n    handle: suspend CoroutineScope.(EFFECT) -> Unit\r\n) {\r\n    val effect by viewModel.effect.collectAsStateWithLifecycle()\r\n    LaunchedEffect(effect) {\r\n        effect?.let {\r\n            handle(it)\r\n            viewModel.resetEffect()\r\n        }\r\n    }\r\n}",
  "start_lineno" : "9",
  "methodName" : "HandleEffect",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\viewmodel\\StatefulViewModelExt.kt",
  "task_id" : "Compose-ToDo/226",
  "prompt" : "import kotlinx.coroutines.CoroutineScope\nimport com.wisnu.foundation.coreviewmodel.StatefulViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun <STATE, EFFECT, ACTION, ENVIRONMENT> HandleEffect(\r\n    viewModel: StatefulViewModel<STATE, EFFECT, ACTION, ENVIRONMENT>,\r\n    handle: suspend CoroutineScope.(EFFECT) -> Unit\r\n) {\r\n    val effect by viewModel.effect.collectAsStateWithLifecycle()\r\n    LaunchedEffect(effect) {\r\n        effect?.let {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "18",
  "ground_truth" : "        Dimension.WIDTH -> getSizeClass(dimenDp, 600.dp, 840.dp)\r\n        Dimension.HEIGHT -> getSizeClass(dimenDp, 480.dp, 900.dp)\r\n    }",
  "context" : "fun getWindowSizeClass(dimenDp: Dp, dimen: Dimension = Dimension.WIDTH): WindowSizeClass =\r\n    when (dimen) {\r\n        Dimension.WIDTH -> getSizeClass(dimenDp, 600.dp, 840.dp)\r\n        Dimension.HEIGHT -> getSizeClass(dimenDp, 480.dp, 900.dp)\r\n    }",
  "start_lineno" : "14",
  "methodName" : "getWindowSizeClass",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowSizeClass.kt",
  "task_id" : "Compose-ToDo/227",
  "prompt" : "import androidx.compose.ui.unit.Dp\nfun getWindowSizeClass(dimenDp: Dp, dimen: Dimension = Dimension.WIDTH): WindowSizeClass =\r\n    when (dimen) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "    size < expanded -> WindowSizeClass.MEDIUM\r\n    else -> WindowSizeClass.EXPANDED\r\n}",
  "context" : "private fun getSizeClass(size: Dp, medium: Dp, expanded: Dp): WindowSizeClass = when {\r\n    size < 0.dp -> throw IllegalArgumentException(\"Dp value cannot be negative\")\r\n    size < medium -> WindowSizeClass.COMPACT\r\n    size < expanded -> WindowSizeClass.MEDIUM\r\n    else -> WindowSizeClass.EXPANDED\r\n}",
  "start_lineno" : "20",
  "methodName" : "getSizeClass",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowSizeClass.kt",
  "task_id" : "Compose-ToDo/228",
  "prompt" : "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nprivate fun getSizeClass(size: Dp, medium: Dp, expanded: Dp): WindowSizeClass = when {\r\n    size < 0.dp -> throw IllegalArgumentException(\"Dp value cannot be negative\")\r\n    size < medium -> WindowSizeClass.COMPACT\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val foldSizeDp Dp\nval windowMode WindowMode\nvar largeScreenPane1Weight Float\nval foldablePane1SizeDp DpSize\nval foldablePane2SizeDp DpSize\nval pane1SizeDp DpSize\nval pane2SizeDp DpSize",
  "app_type" : "notes",
  "end_lineno" : "79",
  "ground_truth" : "        if (weight <= 0f || weight >= 1f)\r\n            throw IllegalArgumentException(\"Pane 1 weight must be between 0 and 1\")\r\n    }",
  "context" : "private fun checkWeight(weight: Float) {\r\n        // Check that 0 < weight < 1\r\n        if (weight <= 0f || weight >= 1f)\r\n            throw IllegalArgumentException(\"Pane 1 weight must be between 0 and 1\")\r\n    }",
  "start_lineno" : "75",
  "methodName" : "checkWeight",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowState.kt",
  "task_id" : "Compose-ToDo/229",
  "prompt" : "private fun checkWeight(weight: Float) {\r\n        // Check that 0 < weight < 1\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val foldSizeDp Dp\nval windowMode WindowMode\nvar largeScreenPane1Weight Float\nval foldablePane1SizeDp DpSize\nval foldablePane2SizeDp DpSize\nval pane1SizeDp DpSize\nval pane2SizeDp DpSize",
  "app_type" : "notes",
  "end_lineno" : "217",
  "ground_truth" : "        // REVISIT: should width/height ratio of the window be used instead of orientation?\r\n        return LocalConfiguration.current.orientation == Configuration.ORIENTATION_PORTRAIT\r\n    }",
  "context" : " @Composable\r\n    private fun windowIsPortrait(): Boolean {\r\n        // REVISIT: should width/height ratio of the window be used instead of orientation?\r\n        return LocalConfiguration.current.orientation == Configuration.ORIENTATION_PORTRAIT\r\n    }",
  "start_lineno" : "213",
  "methodName" : "windowIsPortrait",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowState.kt",
  "task_id" : "Compose-ToDo/230",
  "prompt" : "import androidx.compose.runtime.Composable\n @Composable\r\n    private fun windowIsPortrait(): Boolean {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val foldSizeDp Dp\nval windowMode WindowMode\nvar largeScreenPane1Weight Float\nval foldablePane1SizeDp DpSize\nval foldablePane2SizeDp DpSize\nval pane1SizeDp DpSize\nval pane2SizeDp DpSize",
  "app_type" : "notes",
  "end_lineno" : "249",
  "ground_truth" : "            foldIsSeparating -> if (foldIsHorizontal) WindowMode.DUAL_LANDSCAPE else WindowMode.DUAL_PORTRAIT\r\n            windowIsLarge() -> if (isPortrait) WindowMode.DUAL_LANDSCAPE else WindowMode.DUAL_PORTRAIT\r\n            else -> if (isPortrait) WindowMode.SINGLE_PORTRAIT else WindowMode.SINGLE_LANDSCAPE\r\n        }\r\n    }",
  "context" : " @VisibleForTesting\r\n    internal fun calculateWindowMode(isPortrait: Boolean): WindowMode {\r\n        return when {\r\n            foldIsSeparating -> if (foldIsHorizontal) WindowMode.DUAL_LANDSCAPE else WindowMode.DUAL_PORTRAIT\r\n            windowIsLarge() -> if (isPortrait) WindowMode.DUAL_LANDSCAPE else WindowMode.DUAL_PORTRAIT\r\n            else -> if (isPortrait) WindowMode.SINGLE_PORTRAIT else WindowMode.SINGLE_LANDSCAPE\r\n        }\r\n    }",
  "start_lineno" : "242",
  "methodName" : "calculateWindowMode",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowState.kt",
  "task_id" : "Compose-ToDo/231",
  "prompt" : "import androidx.annotation.VisibleForTesting\n @VisibleForTesting\r\n    internal fun calculateWindowMode(isPortrait: Boolean): WindowMode {\r\n        return when {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val foldSizeDp Dp\nval windowMode WindowMode\nvar largeScreenPane1Weight Float\nval foldablePane1SizeDp DpSize\nval foldablePane2SizeDp DpSize\nval pane1SizeDp DpSize\nval pane2SizeDp DpSize",
  "app_type" : "notes",
  "end_lineno" : "347",
  "ground_truth" : "            foldIsSeparating -> getFoldablePaneSizes(layoutDir)\r\n            windowIsLarge() -> getLargeScreenPaneSizes(isPortrait, largeScreenPane1Weight)\r\n            else -> Pair(DpSize.Zero, DpSize.Zero)\r\n        }\r\n    }",
  "context" : "private fun getPaneSizes(\r\n        isPortrait: Boolean,\r\n        layoutDir: LayoutDirection,\r\n        largeScreenPane1Weight: Float\r\n    ): Pair<DpSize, DpSize> {\r\n        return when {\r\n            foldIsSeparating -> getFoldablePaneSizes(layoutDir)\r\n            windowIsLarge() -> getLargeScreenPaneSizes(isPortrait, largeScreenPane1Weight)\r\n            else -> Pair(DpSize.Zero, DpSize.Zero)\r\n        }\r\n    }",
  "start_lineno" : "337",
  "methodName" : "getPaneSizes",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowState.kt",
  "task_id" : "Compose-ToDo/232",
  "prompt" : "import androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.unit.Dp\nprivate fun getPaneSizes(\r\n        isPortrait: Boolean,\r\n        layoutDir: LayoutDirection,\r\n        largeScreenPane1Weight: Float\r\n    ): Pair<DpSize, DpSize> {\r\n        return when {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "14",
  "ground_truth" : "                .registerActivityLifecycleCallbacks(it)\r\n        }\r\n    }",
  "context" : "override fun create(context: Context): ActivityLifecycleLoggr {\r\n        return ActivityLifecycleLoggr().also {\r\n            (context.applicationContext as ComposeToDoListApp)\r\n                .registerActivityLifecycleCallbacks(it)\r\n        }\r\n    }",
  "start_lineno" : "9",
  "methodName" : "create",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\ActivityLifecycleLoggrInitializer.kt",
  "task_id" : "Compose-ToDo/233",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.runtime.ComposeToDoListApp\nimport com.wisnu.foundation.liblifecycleloggr.ActivityLifecycleLoggr\nimport android.content.Context\noverride fun create(context: Context): ActivityLifecycleLoggr {\r\n        return ActivityLifecycleLoggr().also {\r\n            (context.applicationContext as ComposeToDoListApp)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "11",
  "ground_truth" : "        DebugTools.init()\r\n        return DebugTools\r\n    }",
  "context" : "override fun create(context: Context): DebugTools {\r\n        DebugTools.init()\r\n        return DebugTools\r\n    }",
  "start_lineno" : "8",
  "methodName" : "create",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\DebugToolsInitializer.kt",
  "task_id" : "Compose-ToDo/234",
  "prompt" : "import com.wisnu.foundation.testdebug.DebugTools\nimport android.content.Context\noverride fun create(context: Context): DebugTools {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "        Loggr.initialize(loggings)\r\n        return Loggr\r\n    }",
  "context" : "override fun create(context: Context): Loggr {\r\n        val loggings = DebugTools.getLoggings().toMutableList()\r\n        loggings.add(CrashLogging())\r\n        Loggr.initialize(loggings)\r\n        return Loggr\r\n    }",
  "start_lineno" : "10",
  "methodName" : "create",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\LoggrInitializer.kt",
  "task_id" : "Compose-ToDo/235",
  "prompt" : "import com.wisnu.foundation.testdebug.DebugTools\nimport com.wisnu.foundation.libanalyticsmanager.crash.CrashLogging\nimport com.wisnu.foundation.coreloggr.Loggr\nimport android.content.Context\noverride fun create(context: Context): Loggr {\r\n        val loggings = DebugTools.getLoggings().toMutableList()\r\n        loggings.add(CrashLogging())\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var windowState WindowState",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "                    MainNavHost(windowState)\r\n                }\r\n            }\r\n        }\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.Theme_ComposeToDoList_Light)\r\n        super.onCreate(savedInstanceState)\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {\r\n            windowState = rememberWindowState()\r\n\r\n            Host {\r\n                Surface {\r\n                    MainNavHost(windowState)\r\n                }\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "19",
  "methodName" : "onCreate",
  "fpath" : "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\MainActivity.kt",
  "task_id" : "Compose-ToDo/236",
  "prompt" : "import com.wisnu.kurniawan.composetodolist.foundation.window.rememberWindowState\nimport com.wisnu.kurniawan.composetodolist.foundation.window.WindowState\nimport com.wisnu.kurniawan.composetodolist.features.host.ui.Host\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.core.view.WindowCompat\nimport androidx.compose.material3.Surface\nimport androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.Theme_ComposeToDoList_Light)\r\n        super.onCreate(savedInstanceState)\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {\r\n            windowState = rememberWindowState()\r\n\r\n            Host {\r\n                Surface {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.VIEW"
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setHomeAsUpIndicator(DrawableUtils.tintDrawableWithResource(this, R.drawable.ic_cross_24dp, android.R.color.white));\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_about);\r\n    Toolbar toolbar = findViewById(R.id.toolbar);\r\n    setSupportActionBar(toolbar);\r\n    setTitle(\"\");\r\n    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setHomeAsUpIndicator(DrawableUtils.tintDrawableWithResource(this, R.drawable.ic_cross_24dp, android.R.color.white));\r\n    }\r\n}",
  "start_lineno" : "13",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutActivity.java",
  "task_id" : "simplenote-android/0",
  "prompt" : "import androidx.appcompat.widget.Toolbar\nimport androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_about);\r\n    Toolbar toolbar = findViewById(R.id.toolbar);\r\n    setSupportActionBar(toolbar);\r\n    setTitle(\"\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "    super.onResume();\r\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n}",
  "start_lineno" : "29",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutActivity.java",
  "task_id" : "simplenote-android/1",
  "prompt" : "@Override\r\nprotected void onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "    onBackPressed();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onSupportNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}",
  "start_lineno" : "35",
  "methodName" : "onSupportNavigateUp",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutActivity.java",
  "task_id" : "simplenote-android/2",
  "prompt" : "@Override\r\npublic boolean onSupportNavigateUp() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_BLOG_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_BLOG_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "71",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/3",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), TWITTER_APP_URI + SIMPLENOTE_TWITTER_HANDLE);\r\n    } catch (Exception e) {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), TWITTER_PROFILE_URL + SIMPLENOTE_TWITTER_HANDLE);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), TWITTER_APP_URI + SIMPLENOTE_TWITTER_HANDLE);\r\n    } catch (Exception e) {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), TWITTER_PROFILE_URL + SIMPLENOTE_TWITTER_HANDLE);\r\n    }\r\n}",
  "start_lineno" : "82",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/4",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_HELP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_HELP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "93",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/5",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_CONTRIBUTE);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_CONTRIBUTE);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "126",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/6",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "144",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_HIRING_HANDLE);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), SIMPLENOTE_HIRING_HANDLE);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "137",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/7",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "162",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_PRIVACY);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_PRIVACY);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "155",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/8",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "180",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_TERMS);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_TERMS);\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "173",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/9",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "198",
  "ground_truth" : "        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(URL_CALIFORNIA)));\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    try {\r\n        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(URL_CALIFORNIA)));\r\n    } catch (Exception e) {\r\n        Toast.makeText(getActivity(), R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "191",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/10",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String PLAY_STORE_URL = \"http://play.google.com/store/apps/details?id=\";\nprivate static final String PLAY_STORE_URI = \"market://details?id=\";\nprivate static final String SIMPLENOTE_BLOG_URL = \"https://simplenote.com/blog\";\nprivate static final String SIMPLENOTE_HELP_URL = \"https://simplenote.com/help\";\nprivate static final String SIMPLENOTE_HIRING_HANDLE = \"https://automattic.com/work-with-us/\";\nprivate static final String SIMPLENOTE_TWITTER_HANDLE = \"simplenoteapp\";\nprivate static final String TWITTER_PROFILE_URL = \"https://twitter.com/#!/\";\nprivate static final String TWITTER_APP_URI = \"twitter://user?screen_name=\";\nprivate static final String URL_CALIFORNIA = \"https://automattic.com/privacy/#california-consumer-privacy-act-ccpa\";\nprivate static final String URL_CONTRIBUTE = \"https://github.com/Automattic/simplenote-android\";\nprivate static final String URL_PRIVACY = \"https://automattic.com/privacy\";\nprivate static final String URL_TERMS = \"https://simplenote.com/terms\";",
  "app_type" : "notes",
  "end_lineno" : "227",
  "ground_truth" : "        dialog.dismiss();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (dialog.isShowing()) {\r\n        dialog.dismiss();\r\n    }\r\n}",
  "start_lineno" : "222",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java",
  "task_id" : "simplenote-android/11",
  "prompt" : "@Override\r\npublic void run() {\r\n    if (dialog.isShowing()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel AddCollaboratorViewModel\nvar _dialogEditTag AlertDialog?\nval dialogEditTag\nvar _binding AddCollaboratorBinding?\nval binding",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "        _binding = null\r\n        _dialogEditTag = null\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n        _dialogEditTag = null\r\n    }",
  "start_lineno" : "35",
  "methodName" : "onDestroyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddCollaboratorFragment.kt",
  "task_id" : "simplenote-android/12",
  "prompt" : "override fun onDestroyView() {\r\n        super.onDestroyView()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel AddCollaboratorViewModel\nvar _dialogEditTag AlertDialog?\nval dialogEditTag\nvar _binding AddCollaboratorBinding?\nval binding",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "        setupViews()\r\n        setObservers()\r\n    }",
  "context" : "override fun onShow(dialog: DialogInterface?) {\r\n        setupViews()\r\n        setObservers()\r\n    }",
  "start_lineno" : "62",
  "methodName" : "onShow",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddCollaboratorFragment.kt",
  "task_id" : "simplenote-android/13",
  "prompt" : "import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onShow(dialog: DialogInterface?) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel AddTagViewModel",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "\r\n        viewModel.start()\r\n\r\n        setContentView(binding.root)\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        ThemeUtils.setTheme(this)\r\n        super.onCreate(savedInstanceState)\r\n        val binding: ActivityTagAddBinding = ActivityTagAddBinding.inflate(layoutInflater)\r\n\r\n        binding.setObservers()\r\n        binding.setupLayout()\r\n        binding.setupViews()\r\n\r\n        viewModel.start()\r\n\r\n        setContentView(binding.root)\r\n    }",
  "start_lineno" : "27",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddTagActivity.kt",
  "task_id" : "simplenote-android/14",
  "prompt" : "import com.automattic.simplenote.utils.ThemeUtils\nimport com.automattic.simplenote.databinding.ActivityTagAddBinding\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        ThemeUtils.setTheme(this)\r\n        super.onCreate(savedInstanceState)\r\n        val binding: ActivityTagAddBinding = ActivityTagAddBinding.inflate(layoutInflater)\r\n\r\n        binding.setObservers()\r\n        binding.setupLayout()\r\n        binding.setupViews()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel AddTagViewModel",
  "app_type" : "notes",
  "end_lineno" : "46",
  "ground_truth" : "        buttonNegative.setOnClickListener { viewModel.close() }\r\n        buttonPositive.setOnClickListener { viewModel.saveTag() }\r\n    }",
  "context" : "private fun ActivityTagAddBinding.setupViews() {\r\n        title.text = getString(R.string.add_tag)\r\n        tagInput.doAfterTextChanged { s -> viewModel.updateUiState(s.toString()) }\r\n        buttonNegative.setOnClickListener { viewModel.close() }\r\n        buttonPositive.setOnClickListener { viewModel.saveTag() }\r\n    }",
  "start_lineno" : "41",
  "methodName" : "setupViews",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddTagActivity.kt",
  "task_id" : "simplenote-android/15",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagAddBinding\nimport androidx.core.widget.doAfterTextChanged\nimport android.view.View\nprivate fun ActivityTagAddBinding.setupViews() {\r\n        title.text = getString(R.string.add_tag)\r\n        tagInput.doAfterTextChanged { s -> viewModel.updateUiState(s.toString()) }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "        TRACKERS.add(tracker);\r\n    }\r\n}",
  "context" : "public static void registerTracker(Tracker tracker) {\r\n    if (tracker != null) {\r\n        TRACKERS.add(tracker);\r\n    }\r\n}",
  "start_lineno" : "22",
  "methodName" : "registerTracker",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/16",
  "prompt" : "public static void registerTracker(Tracker tracker) {\r\n    if (tracker != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, null);\r\n    }\r\n}",
  "context" : "public static void track(Stat stat, String category, String label) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, null);\r\n    }\r\n}",
  "start_lineno" : "28",
  "methodName" : "track",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/17",
  "prompt" : "import com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, String category, String label) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "46",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, properties);\r\n    }\r\n}",
  "context" : "public static void track(Stat stat, String category, String label, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, properties);\r\n    }\r\n}",
  "start_lineno" : "38",
  "methodName" : "track",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/18",
  "prompt" : "import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, String category, String label, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "56",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.refreshMetadata(username);\r\n    }\r\n}",
  "context" : "public static void refreshMetadata(String username) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.refreshMetadata(username);\r\n    }\r\n}",
  "start_lineno" : "48",
  "methodName" : "refreshMetadata",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/19",
  "prompt" : "import com.automattic.simplenote.Simplenote\npublic static void refreshMetadata(String username) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.flush();\r\n    }\r\n}",
  "context" : "public static void flush() {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.flush();\r\n    }\r\n}",
  "start_lineno" : "58",
  "methodName" : "flush",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/20",
  "prompt" : "import com.automattic.simplenote.Simplenote\npublic static void flush() {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null);\r\n    }\r\n}",
  "context" : "public static void track(Stat stat) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null);\r\n    }\r\n}",
  "start_lineno" : "68",
  "methodName" : "track",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/21",
  "prompt" : "import com.automattic.simplenote.Simplenote\npublic static void track(Stat stat) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final List<Tracker> TRACKERS = new ArrayList<>();\npublic static String CATEGORY_NOTE = \"note\";\npublic static String CATEGORY_LINK = \"link\";\npublic static String CATEGORY_SEARCH = \"search\";\npublic static String CATEGORY_SETTING = \"setting\";\npublic static String CATEGORY_TAG = \"tag\";\npublic static String CATEGORY_USER = \"user\";\npublic static String CATEGORY_WIDGET = \"widget\";",
  "app_type" : "notes",
  "end_lineno" : "86",
  "ground_truth" : "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null, properties);\r\n    }\r\n}",
  "context" : "public static void track(Stat stat, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null, properties);\r\n    }\r\n}",
  "start_lineno" : "78",
  "methodName" : "track",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java",
  "task_id" : "simplenote-android/22",
  "prompt" : "import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TRACKS_ANON_ID = \"nosara_tracks_anon_id\";\nprivate static final String EVENTS_PREFIX = \"spandroid_\";\nprivate String mUserName = null;\nprivate TracksClient mNosaraClient;\nprivate Context mContext;",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        final SharedPreferences.Editor editor = preferences.edit();\r\n        editor.remove(TRACKS_ANON_ID);\r\n        editor.apply();\r\n    }\r\n}",
  "context" : "private void clearAnonID() {\r\n    mAnonID = null;\r\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n    if (preferences.contains(TRACKS_ANON_ID)) {\r\n        final SharedPreferences.Editor editor = preferences.edit();\r\n        editor.remove(TRACKS_ANON_ID);\r\n        editor.apply();\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "clearAnonID",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java",
  "task_id" : "simplenote-android/23",
  "prompt" : "import androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate void clearAnonID() {\r\n    mAnonID = null;\r\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n    if (preferences.contains(TRACKS_ANON_ID)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TRACKS_ANON_ID = \"nosara_tracks_anon_id\";\nprivate static final String EVENTS_PREFIX = \"spandroid_\";\nprivate String mUserName = null;\nprivate TracksClient mNosaraClient;\nprivate Context mContext;",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n        mAnonID = preferences.getString(TRACKS_ANON_ID, null);\r\n    }\r\n    return mAnonID;\r\n}",
  "context" : "private String getAnonID() {\r\n    if (mAnonID == null) {\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n        mAnonID = preferences.getString(TRACKS_ANON_ID, null);\r\n    }\r\n    return mAnonID;\r\n}",
  "start_lineno" : "47",
  "methodName" : "getAnonID",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java",
  "task_id" : "simplenote-android/24",
  "prompt" : "private String getAnonID() {\r\n    if (mAnonID == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TRACKS_ANON_ID = \"nosara_tracks_anon_id\";\nprivate static final String EVENTS_PREFIX = \"spandroid_\";\nprivate String mUserName = null;\nprivate TracksClient mNosaraClient;\nprivate Context mContext;",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "    editor.putString(TRACKS_ANON_ID, uuid);\r\n    editor.apply();\r\n    mAnonID = uuid;\r\n    return uuid;\r\n}",
  "context" : "private String generateNewAnonID() {\r\n    String uuid = UUID.randomUUID().toString();\r\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n    final SharedPreferences.Editor editor = preferences.edit();\r\n    editor.putString(TRACKS_ANON_ID, uuid);\r\n    editor.apply();\r\n    mAnonID = uuid;\r\n    return uuid;\r\n}",
  "start_lineno" : "55",
  "methodName" : "generateNewAnonID",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java",
  "task_id" : "simplenote-android/25",
  "prompt" : "import java.util.UUID\nimport androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate String generateNewAnonID() {\r\n    String uuid = UUID.randomUUID().toString();\r\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n    final SharedPreferences.Editor editor = preferences.edit();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TRACKS_ANON_ID = \"nosara_tracks_anon_id\";\nprivate static final String EVENTS_PREFIX = \"spandroid_\";\nprivate String mUserName = null;\nprivate TracksClient mNosaraClient;\nprivate Context mContext;",
  "app_type" : "notes",
  "end_lineno" : "121",
  "ground_truth" : "        if (getAnonID() == null) {\r\n            generateNewAnonID();\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void refreshMetadata(String username) {\r\n    if (mNosaraClient == null) {\r\n        return;\r\n    }\r\n    if (!TextUtils.isEmpty(username)) {\r\n        mUserName = username;\r\n        if (getAnonID() != null) {\r\n            mNosaraClient.trackAliasUser(mUserName, getAnonID(), TracksClient.NosaraUserType.SIMPLENOTE);\r\n            clearAnonID();\r\n        }\r\n    } else {\r\n        mUserName = null;\r\n        if (getAnonID() == null) {\r\n            generateNewAnonID();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "103",
  "methodName" : "refreshMetadata",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java",
  "task_id" : "simplenote-android/26",
  "prompt" : "import com.automattic.android.tracks.TracksClient\nimport android.text.TextUtils\n@Override\r\npublic void refreshMetadata(String username) {\r\n    if (mNosaraClient == null) {\r\n        return;\r\n    }\r\n    if (!TextUtils.isEmpty(username)) {\r\n        mUserName = username;\r\n        if (getAnonID() != null) {\r\n            mNosaraClient.trackAliasUser(mUserName, getAnonID(), TracksClient.NosaraUserType.SIMPLENOTE);\r\n            clearAnonID();\r\n        }\r\n    } else {\r\n        mUserName = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TRACKS_ANON_ID = \"nosara_tracks_anon_id\";\nprivate static final String EVENTS_PREFIX = \"spandroid_\";\nprivate String mUserName = null;\nprivate TracksClient mNosaraClient;\nprivate Context mContext;",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "    }\r\n    mNosaraClient.flush();\r\n}",
  "context" : "@Override\r\npublic void flush() {\r\n    if (mNosaraClient == null) {\r\n        return;\r\n    }\r\n    mNosaraClient.flush();\r\n}",
  "start_lineno" : "123",
  "methodName" : "flush",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java",
  "task_id" : "simplenote-android/27",
  "prompt" : "@Override\r\npublic void flush() {\r\n    if (mNosaraClient == null) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String CONFIRMATION_EMAIL_KEY = \"CONFIRMATION_EMAIL_KEY\";",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "    Bundle bundle = new Bundle();\r\n    bundle.putString(CONFIRMATION_EMAIL_KEY, email);\r\n    confirmationFragment.setArguments(bundle);\r\n    return confirmationFragment;\r\n}",
  "context" : "public static ConfirmationFragment newInstance(String email) {\r\n    ConfirmationFragment confirmationFragment = new ConfirmationFragment();\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(CONFIRMATION_EMAIL_KEY, email);\r\n    confirmationFragment.setArguments(bundle);\r\n    return confirmationFragment;\r\n}",
  "start_lineno" : "21",
  "methodName" : "newInstance",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java",
  "task_id" : "simplenote-android/28",
  "prompt" : "import androidx.fragment.app.Fragment\npublic static ConfirmationFragment newInstance(String email) {\r\n    ConfirmationFragment confirmationFragment = new ConfirmationFragment();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String CONFIRMATION_EMAIL_KEY = \"CONFIRMATION_EMAIL_KEY\";",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "    initUi(view);\r\n    return view;\r\n}",
  "context" : "@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_confirmation, container, false);\r\n    initUi(view);\r\n    return view;\r\n}",
  "start_lineno" : "29",
  "methodName" : "onCreateView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java",
  "task_id" : "simplenote-android/29",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_confirmation, container, false);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final static String CONFIRMATION_EMAIL_KEY = \"CONFIRMATION_EMAIL_KEY\";",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "    initEmailConfirmation((TextView) view.findViewById(R.id.email_confirmation_text));\r\n    initSupport((TextView) view.findViewById(R.id.support_text));\r\n}",
  "context" : "private void initUi(View view) {\r\n    initEmailConfirmation((TextView) view.findViewById(R.id.email_confirmation_text));\r\n    initSupport((TextView) view.findViewById(R.id.support_text));\r\n}",
  "start_lineno" : "38",
  "methodName" : "initUi",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java",
  "task_id" : "simplenote-android/30",
  "prompt" : "import android.view.View\nprivate void initUi(View view) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String CONFIRMATION_EMAIL_KEY = \"CONFIRMATION_EMAIL_KEY\";",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "    Spanned emailConfirmationText = HtmlCompat.fromHtml(String.format(getString(R.string.email_confirmation_text), boldEmail));\r\n    emailConfirmation.setText(emailConfirmationText);\r\n}",
  "context" : "private void initEmailConfirmation(TextView emailConfirmation) {\r\n    String boldEmail = \"<b>\" + requireArguments().getString(CONFIRMATION_EMAIL_KEY) + \"</b>\";\r\n    Spanned emailConfirmationText = HtmlCompat.fromHtml(String.format(getString(R.string.email_confirmation_text), boldEmail));\r\n    emailConfirmation.setText(emailConfirmationText);\r\n}",
  "start_lineno" : "43",
  "methodName" : "initEmailConfirmation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java",
  "task_id" : "simplenote-android/31",
  "prompt" : "import com.automattic.simplenote.R\nimport android.widget.TextView\nimport android.view.View\nprivate void initEmailConfirmation(TextView emailConfirmation) {\r\n    String boldEmail = \"<b>\" + requireArguments().getString(CONFIRMATION_EMAIL_KEY) + \"</b>\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final static String CONFIRMATION_EMAIL_KEY = \"CONFIRMATION_EMAIL_KEY\";",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "    String link = \"<a href='mailto:\" + supportEmail + \"'>\" + supportEmail + \"</a>\";\r\n    Spanned supportText = HtmlCompat.fromHtml(String.format(getString(R.string.support_text), link));\r\n    support.setText(supportText);\r\n    support.setMovementMethod(LinkMovementMethod.getInstance());\r\n}",
  "context" : "private void initSupport(TextView support) {\r\n    String supportEmail = getString(R.string.support_email);\r\n    String link = \"<a href='mailto:\" + supportEmail + \"'>\" + supportEmail + \"</a>\";\r\n    Spanned supportText = HtmlCompat.fromHtml(String.format(getString(R.string.support_text), link));\r\n    support.setText(supportText);\r\n    support.setMovementMethod(LinkMovementMethod.getInstance());\r\n}",
  "start_lineno" : "51",
  "methodName" : "initSupport",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java",
  "task_id" : "simplenote-android/32",
  "prompt" : "import com.automattic.simplenote.R\nimport android.widget.TextView\nimport android.view.View\nprivate void initSupport(TextView support) {\r\n    String supportEmail = getString(R.string.support_email);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "        return when (currentUser.email != null && !currentUser.needsAuthorization()) {\r\n            true -> UserSession.AuthorizedUser(currentUser)\r\n            false -> UserSession.UnauthorizedUser\r\n        }\r\n    }",
  "context" : "fun getCurrentUser(): UserSession {\r\n        val currentUser = simperium.user ?: return UserSession.UnauthorizedUser\r\n\r\n        return when (currentUser.email != null && !currentUser.needsAuthorization()) {\r\n            true -> UserSession.AuthorizedUser(currentUser)\r\n            false -> UserSession.UnauthorizedUser\r\n        }\r\n    }",
  "start_lineno" : "13",
  "methodName" : "getCurrentUser",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SessionManager.kt",
  "task_id" : "simplenote-android/33",
  "prompt" : "import com.simperium.client.User\nfun getCurrentUser(): UserSession {\r\n        val currentUser = simperium.user ?: return UserSession.UnauthorizedUser\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "    initUi(view);\r\n    return view;\r\n}",
  "context" : "@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_signup, container, false);\r\n    initUi(view);\r\n    return view;\r\n}",
  "start_lineno" : "64",
  "methodName" : "onCreateView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/34",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_signup, container, false);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "    initFooter((TextView) view.findViewById(com.simperium.R.id.text_footer));\r\n    initSignupButton(view);\r\n}",
  "context" : "private void initUi(View view) {\r\n    initFooter((TextView) view.findViewById(com.simperium.R.id.text_footer));\r\n    initSignupButton(view);\r\n}",
  "start_lineno" : "73",
  "methodName" : "initUi",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/35",
  "prompt" : "import android.view.View\nprivate void initUi(View view) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "85",
  "ground_truth" : "    final Button signupButton = view.findViewById(R.id.button);\r\n    setButtonState(signupButton, emailEditText.getText());\r\n    listenToEmailChanges(emailEditText, signupButton);\r\n    listenToSignupClick(signupButton, emailEditText);\r\n}",
  "context" : "@SuppressWarnings(\"ConstantConditions\")\r\nprivate void initSignupButton(View view) {\r\n    EditText emailEditText = ((TextInputLayout) view.findViewById(R.id.input_email)).getEditText();\r\n    final Button signupButton = view.findViewById(R.id.button);\r\n    setButtonState(signupButton, emailEditText.getText());\r\n    listenToEmailChanges(emailEditText, signupButton);\r\n    listenToSignupClick(signupButton, emailEditText);\r\n}",
  "start_lineno" : "78",
  "methodName" : "initSignupButton",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/36",
  "prompt" : "import com.google.android.material.textfield.TextInputLayout\nimport com.automattic.simplenote.R\nimport android.widget.EditText\nimport android.widget.Button\nimport android.view.View\n@SuppressWarnings(\"ConstantConditions\")\r\nprivate void initSignupButton(View view) {\r\n    EditText emailEditText = ((TextInputLayout) view.findViewById(R.id.input_email)).getEditText();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "102",
  "ground_truth" : "        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n    });\r\n}",
  "context" : "private void listenToEmailChanges(EditText emailEditText, final Button signupButton) {\r\n    emailEditText.addTextChangedListener(new TextWatcher() {\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            setButtonState(signupButton, s);\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n    });\r\n}",
  "start_lineno" : "87",
  "methodName" : "listenToEmailChanges",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/37",
  "prompt" : "import android.widget.EditText\nimport android.widget.Button\nimport android.text.TextWatcher\nimport android.text.Editable\nprivate void listenToEmailChanges(EditText emailEditText, final Button signupButton) {\r\n    emailEditText.addTextChangedListener(new TextWatcher() {\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            setButtonState(signupButton, s);\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "116",
  "ground_truth" : "                showDialogError(getString(R.string.simperium_dialog_message_network));\r\n            }\r\n        }\r\n    });\r\n}",
  "context" : "private void listenToSignupClick(Button signupButton, final EditText emailEditText) {\r\n    signupButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (NetworkUtils.isNetworkAvailable(requireContext())) {\r\n                showProgressDialog();\r\n                signupUser(emailEditText.getText().toString());\r\n            } else {\r\n                showDialogError(getString(R.string.simperium_dialog_message_network));\r\n            }\r\n        }\r\n    });\r\n}",
  "start_lineno" : "104",
  "methodName" : "listenToSignupClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/38",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport android.widget.EditText\nimport android.widget.Button\nimport android.view.View\nprivate void listenToSignupClick(Button signupButton, final EditText emailEditText) {\r\n    signupButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (NetworkUtils.isNetworkAvailable(requireContext())) {\r\n                showProgressDialog();\r\n                signupUser(emailEditText.getText().toString());\r\n            } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "114",
  "ground_truth" : "        signupUser(emailEditText.getText().toString());\r\n    } else {\r\n        showDialogError(getString(R.string.simperium_dialog_message_network));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        showProgressDialog();\r\n        signupUser(emailEditText.getText().toString());\r\n    } else {\r\n        showDialogError(getString(R.string.simperium_dialog_message_network));\r\n    }\r\n}",
  "start_lineno" : "106",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/39",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        showProgressDialog();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "123",
  "ground_truth" : "    progressDialogFragment.setStyle(DialogFragment.STYLE_NO_TITLE, R.style.Simperium);\r\n    progressDialogFragment.show(requireFragmentManager(), ProgressDialogFragment.TAG);\r\n}",
  "context" : "private void showProgressDialog() {\r\n    progressDialogFragment = ProgressDialogFragment.newInstance(getString(R.string.simperium_dialog_progress_signing_up));\r\n    progressDialogFragment.setStyle(DialogFragment.STYLE_NO_TITLE, R.style.Simperium);\r\n    progressDialogFragment.show(requireFragmentManager(), ProgressDialogFragment.TAG);\r\n}",
  "start_lineno" : "118",
  "methodName" : "showProgressDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/40",
  "prompt" : "import com.simperium.android.ProgressDialogFragment\nimport com.automattic.simplenote.R\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nprivate void showProgressDialog() {\r\n    progressDialogFragment = ProgressDialogFragment.newInstance(getString(R.string.simperium_dialog_progress_signing_up));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "        progressDialogFragment = null;\r\n    }\r\n}",
  "context" : "private void hideDialogProgress() {\r\n    if (progressDialogFragment != null && !progressDialogFragment.isHidden()) {\r\n        progressDialogFragment.dismiss();\r\n        progressDialogFragment = null;\r\n    }\r\n}",
  "start_lineno" : "125",
  "methodName" : "hideDialogProgress",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/41",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nprivate void hideDialogProgress() {\r\n    if (progressDialogFragment != null && !progressDialogFragment.isHidden()) {\r\n        progressDialogFragment.dismiss();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "157",
  "ground_truth" : "    } catch (JSONException e) {\r\n        throw new IllegalArgumentException(\"Cannot construct json with supplied email: \" + email);\r\n    }\r\n    return RequestBody.create(JSON_MEDIA_TYPE, json.toString());\r\n}",
  "context" : "private RequestBody buildJsonBody(String email) {\r\n    JSONObject json = new JSONObject();\r\n    try {\r\n        json.put(\"username\", email);\r\n    } catch (JSONException e) {\r\n        throw new IllegalArgumentException(\"Cannot construct json with supplied email: \" + email);\r\n    }\r\n    return RequestBody.create(JSON_MEDIA_TYPE, json.toString());\r\n}",
  "start_lineno" : "149",
  "methodName" : "buildJsonBody",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/42",
  "prompt" : "import okhttp3.RequestBody\nimport okhttp3.Request\nimport org.json.JSONObject\nimport com.automattic.simplenote.R\nprivate RequestBody buildJsonBody(String email) {\r\n    JSONObject json = new JSONObject();\r\n    try {\r\n        json.put(\"username\", email);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "173",
  "ground_truth" : "        return LocaleList.getDefault().toLanguageTags();\r\n    } else {\r\n        return Locale.getDefault().getLanguage();\r\n    }\r\n}",
  "context" : "private String getLanguage() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        return LocaleList.getDefault().toLanguageTags();\r\n    } else {\r\n        return Locale.getDefault().getLanguage();\r\n    }\r\n}",
  "start_lineno" : "167",
  "methodName" : "getLanguage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/43",
  "prompt" : "import com.automattic.simplenote.R\nimport android.os.Build\nprivate String getLanguage() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "190",
  "ground_truth" : "                Logger.log(error.getMessage(), error);\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onFailure(@NonNull Call call, @NonNull final IOException error) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                showDialogError(getString(R.string.dialog_message_signup_error));\r\n                AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r\n                Logger.log(error.getMessage(), error);\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "177",
  "methodName" : "onFailure",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/44",
  "prompt" : "import okhttp3.Call\nimport java.io.IOException\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.app.Activity\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull final IOException error) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                showDialogError(getString(R.string.dialog_message_signup_error));\r\n                AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "187",
  "ground_truth" : "    AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r\n    Logger.log(error.getMessage(), error);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    showDialogError(getString(R.string.dialog_message_signup_error));\r\n    AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r\n    Logger.log(error.getMessage(), error);\r\n}",
  "start_lineno" : "182",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/45",
  "prompt" : "import com.automattic.simplenote.R\n@Override\r\npublic void run() {\r\n    showDialogError(getString(R.string.dialog_message_signup_error));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "205",
  "ground_truth" : "                showConfirmationScreen(email);\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                hideDialogProgress();\r\n                DisplayUtils.hideKeyboard(getView());\r\n                showConfirmationScreen(email);\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "192",
  "methodName" : "onResponse",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/46",
  "prompt" : "import okhttp3.Response\nimport okhttp3.Call\nimport com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                hideDialogProgress();\r\n                DisplayUtils.hideKeyboard(getView());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "202",
  "ground_truth" : "    DisplayUtils.hideKeyboard(getView());\r\n    showConfirmationScreen(email);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    hideDialogProgress();\r\n    DisplayUtils.hideKeyboard(getView());\r\n    showConfirmationScreen(email);\r\n}",
  "start_lineno" : "197",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/47",
  "prompt" : "@Override\r\npublic void run() {\r\n    hideDialogProgress();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "216",
  "ground_truth" : "    hideDialogProgress();\r\n    new AlertDialog.Builder(requireActivity()).setTitle(R.string.simperium_dialog_title_error).setMessage(message).setPositiveButton(android.R.string.ok, null).show();\r\n}",
  "context" : "private void showDialogError(String message) {\r\n    hideDialogProgress();\r\n    new AlertDialog.Builder(requireActivity()).setTitle(R.string.simperium_dialog_title_error).setMessage(message).setPositiveButton(android.R.string.ok, null).show();\r\n}",
  "start_lineno" : "209",
  "methodName" : "showDialogError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/48",
  "prompt" : "private void showDialogError(String message) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "223",
  "ground_truth" : "    ConfirmationFragment confirmationFragment = ConfirmationFragment.newInstance(email);\r\n    requireFragmentManager().beginTransaction().replace(R.id.fragment_container, confirmationFragment, SimplenoteSignupActivity.SIGNUP_FRAGMENT_TAG).commit();\r\n}",
  "context" : "private void showConfirmationScreen(String email) {\r\n    ConfirmationFragment confirmationFragment = ConfirmationFragment.newInstance(email);\r\n    requireFragmentManager().beginTransaction().replace(R.id.fragment_container, confirmationFragment, SimplenoteSignupActivity.SIGNUP_FRAGMENT_TAG).commit();\r\n}",
  "start_lineno" : "218",
  "methodName" : "showConfirmationScreen",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/49",
  "prompt" : "private void showConfirmationScreen(String email) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String SIMPLENOTE_SIGNUP_PATH = \"account/request-signup\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\nprivate ProgressDialogFragment progressDialogFragment;",
  "app_type" : "notes",
  "end_lineno" : "257",
  "ground_truth" : "        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\r\n    } else {\r\n        BrowserUtils.showDialogErrorBrowser(requireContext(), url);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    String url = getString(com.simperium.R.string.simperium_footer_signup_url);\r\n    if (BrowserUtils.isBrowserInstalled(requireContext())) {\r\n        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\r\n    } else {\r\n        BrowserUtils.showDialogErrorBrowser(requireContext(), url);\r\n    }\r\n}",
  "start_lineno" : "249",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java",
  "task_id" : "simplenote-android/50",
  "prompt" : "import com.automattic.simplenote.utils.BrowserUtils\nimport com.automattic.simplenote.R\nimport android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    String url = getString(com.simperium.R.string.simperium_footer_signup_url);\r\n    if (BrowserUtils.isBrowserInstalled(requireContext())) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static String STATE_AUTH_STATE = \"STATE_AUTH_STATE\";\nprivate String mAuthState;",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteSignupActivity.class);\r\n    startActivity(intent);\r\n}",
  "context" : "@Override\r\nprotected void buttonSignupClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteSignupActivity.class);\r\n    startActivity(intent);\r\n}",
  "start_lineno" : "37",
  "methodName" : "buttonSignupClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java",
  "task_id" : "simplenote-android/51",
  "prompt" : "@Override\r\nprotected void buttonSignupClicked() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static String STATE_AUTH_STATE = \"STATE_AUTH_STATE\";\nprivate String mAuthState;",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "    startActivity(intent);\r\n    finish();\r\n}",
  "context" : "@Override\r\npublic void onLoginSheetEmailClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteCredentialsActivity.class);\r\n    intent.putExtra(EXTRA_IS_LOGIN, true);\r\n    startActivity(intent);\r\n    finish();\r\n}",
  "start_lineno" : "89",
  "methodName" : "onLoginSheetEmailClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java",
  "task_id" : "simplenote-android/52",
  "prompt" : "import com.simperium.android.AuthenticationActivity\nimport com.automattic.simplenote.Simplenote\nimport com.automattic.simplenote.R\nimport android.content.Intent\n@Override\r\npublic void onLoginSheetEmailClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteCredentialsActivity.class);\r\n    intent.putExtra(EXTRA_IS_LOGIN, true);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static String STATE_AUTH_STATE = \"STATE_AUTH_STATE\";\nprivate String mAuthState;",
  "app_type" : "notes",
  "end_lineno" : "121",
  "ground_truth" : "    outState.putString(STATE_AUTH_STATE, mAuthState);\r\n    super.onSaveInstanceState(outState);\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    outState.putString(STATE_AUTH_STATE, mAuthState);\r\n    super.onSaveInstanceState(outState);\r\n}",
  "start_lineno" : "117",
  "methodName" : "onSaveInstanceState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java",
  "task_id" : "simplenote-android/53",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static String STATE_AUTH_STATE = \"STATE_AUTH_STATE\";\nprivate String mAuthState;",
  "app_type" : "notes",
  "end_lineno" : "130",
  "ground_truth" : "        mAuthState = savedInstanceState.getString(STATE_AUTH_STATE);\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    if (savedInstanceState.containsKey(STATE_AUTH_STATE)) {\r\n        mAuthState = savedInstanceState.getString(STATE_AUTH_STATE);\r\n    }\r\n}",
  "start_lineno" : "123",
  "methodName" : "onRestoreInstanceState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java",
  "task_id" : "simplenote-android/54",
  "prompt" : "import com.automattic.simplenote.R\nimport android.os.Bundle\n@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    if (savedInstanceState.containsKey(STATE_AUTH_STATE)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static String STATE_AUTH_STATE = \"STATE_AUTH_STATE\";\nprivate String mAuthState;",
  "app_type" : "notes",
  "end_lineno" : "149",
  "ground_truth" : "    }\r\n    Context context = new ContextThemeWrapper(SimplenoteAuthenticationActivity.this, getTheme());\r\n    new AlertDialog.Builder(context).setTitle(R.string.simperium_dialog_title_error).setMessage(message).setPositiveButton(android.R.string.ok, null).show();\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.WPCC_LOGIN_FAILED, AnalyticsTracker.CATEGORY_USER, \"wpcc_login_failed_signin_activity\");\r\n}",
  "context" : "private void showDialogError(@StringRes int message) {\r\n    if (isFinishing() || message == 0) {\r\n        return;\r\n    }\r\n    Context context = new ContextThemeWrapper(SimplenoteAuthenticationActivity.this, getTheme());\r\n    new AlertDialog.Builder(context).setTitle(R.string.simperium_dialog_title_error).setMessage(message).setPositiveButton(android.R.string.ok, null).show();\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.WPCC_LOGIN_FAILED, AnalyticsTracker.CATEGORY_USER, \"wpcc_login_failed_signin_activity\");\r\n}",
  "start_lineno" : "132",
  "methodName" : "showDialogError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java",
  "task_id" : "simplenote-android/55",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.StringRes\nprivate void showDialogError(@StringRes int message) {\r\n    if (isFinishing() || message == 0) {\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "AuthResponseListener mAuthListener = new AuthResponseListener() {\r\n\r\n    @Override\r\n    public void onFailure(final User user, final AuthException error) {\r\n        runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                switch(error.failureType) {\r\n                    case EXISTING_ACCOUNT:\r\n                        showDialogErrorExistingAccount();\r\n                        break;\r\n                    case COMPROMISED_PASSWORD:\r\n                        showCompromisedPasswordDialog();\r\n                        break;\r\n                    case UNVERIFIED_ACCOUNT:\r\n                        showUnverifiedAccountDialog();\r\n                        break;\r\n                    case TOO_MANY_REQUESTS:\r\n                        showDialogError(getString(R.string.simperium_too_many_attempts));\r\n                        break;\r\n                    case INVALID_ACCOUNT:\r\n                    default:\r\n                        showDialogError(getString(mIsLogin ? com.simperium.R.string.simperium_dialog_message_login : com.simperium.R.string.simperium_dialog_message_signup));\r\n                }\r\n                Logger.log(error.getMessage(), error);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(final User user, final String userId, final String token, final AuthProvider provider) {\r\n        handleResponseSuccess(user, userId, token, provider);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "    startActivity(new Intent(SimplenoteCredentialsActivity.this, SimplenoteAuthenticationActivity.class));\r\n    finish();\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    startActivity(new Intent(SimplenoteCredentialsActivity.this, SimplenoteAuthenticationActivity.class));\r\n    finish();\r\n}",
  "start_lineno" : "71",
  "methodName" : "onBackPressed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteCredentialsActivity.java",
  "task_id" : "simplenote-android/56",
  "prompt" : "@Override\r\npublic void onBackPressed() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String SIGNUP_FRAGMENT_TAG = \"signup\";",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "    initContainer();\r\n    initToolbar();\r\n}",
  "context" : "@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_signup);\r\n    initContainer();\r\n    initToolbar();\r\n}",
  "start_lineno" : "16",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java",
  "task_id" : "simplenote-android/57",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_signup);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String SIGNUP_FRAGMENT_TAG = \"signup\";",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "    if (fragment == null) {\r\n        fragment = new SignupFragment();\r\n    }\r\n    getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, fragment, SIGNUP_FRAGMENT_TAG).commit();\r\n}",
  "context" : "private void initContainer() {\r\n    Fragment fragment = getSupportFragmentManager().findFragmentByTag(SIGNUP_FRAGMENT_TAG);\r\n    if (fragment == null) {\r\n        fragment = new SignupFragment();\r\n    }\r\n    getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, fragment, SIGNUP_FRAGMENT_TAG).commit();\r\n}",
  "start_lineno" : "24",
  "methodName" : "initContainer",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java",
  "task_id" : "simplenote-android/58",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.fragment.app.Fragment\nprivate void initContainer() {\r\n    Fragment fragment = getSupportFragmentManager().findFragmentByTag(SIGNUP_FRAGMENT_TAG);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String SIGNUP_FRAGMENT_TAG = \"signup\";",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\r\n    }\r\n}",
  "context" : "private void initToolbar() {\r\n    Toolbar toolbar = findViewById(com.simperium.R.id.toolbar);\r\n    setSupportActionBar(toolbar);\r\n    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\r\n    }\r\n}",
  "start_lineno" : "34",
  "methodName" : "initToolbar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java",
  "task_id" : "simplenote-android/59",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.appcompat.widget.Toolbar\nprivate void initToolbar() {\r\n    Toolbar toolbar = findViewById(com.simperium.R.id.toolbar);\r\n    setSupportActionBar(toolbar);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String SIGNUP_FRAGMENT_TAG = \"signup\";",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}",
  "context" : "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        onBackPressed();\r\n        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java",
  "task_id" : "simplenote-android/60",
  "prompt" : "import com.automattic.simplenote.R\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        onBackPressed();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var viewModel IapViewModel\nval TAG String",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "        super.onCancel(dialog)\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.IAP_PLANS_DIALOG_DISMISSED)\r\n    }",
  "context" : "override fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.IAP_PLANS_DIALOG_DISMISSED)\r\n    }",
  "start_lineno" : "73",
  "methodName" : "onCancel",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\billing\\SubscriptionBottomSheetDialog.kt",
  "task_id" : "simplenote-android/61",
  "prompt" : "import android.content.DialogInterface\noverride fun onCancel(dialog: DialogInterface) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val planName\nval planPrice\nval container",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "        val uiState = getItem(position)\r\n        holder.onBind(uiState)\r\n    }",
  "context" : "override fun onBindViewHolder(\r\n        holder: PlanListItemViewHolder,\r\n        position: Int\r\n    ) {\r\n        val uiState = getItem(position)\r\n        holder.onBind(uiState)\r\n    }",
  "start_lineno" : "19",
  "methodName" : "onBindViewHolder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\billing\\SubscriptionDurationAdapter.kt",
  "task_id" : "simplenote-android/62",
  "prompt" : "import android.view.View\noverride fun onBindViewHolder(\r\n        holder: PlanListItemViewHolder,\r\n        position: Int\r\n    ) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val planName\nval planPrice\nval container",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "\r\n            container.setOnClickListener {\r\n                uiState.onTapListener.invoke(uiState.offerId, uiState.tracker)\r\n            }\r\n        }",
  "context" : "fun onBind(uiState: IapViewModel.PlansListItem) {\r\n            planName.setText(uiState.period)\r\n            planPrice.text = uiState.price\r\n\r\n            container.setOnClickListener {\r\n                uiState.onTapListener.invoke(uiState.offerId, uiState.tracker)\r\n            }\r\n        }",
  "start_lineno" : "41",
  "methodName" : "onBind",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\billing\\SubscriptionDurationAdapter.kt",
  "task_id" : "simplenote-android/63",
  "prompt" : "import com.automattic.simplenote.viewmodels.IapViewModel\nimport android.view.View\nfun onBind(uiState: IapViewModel.PlansListItem) {\r\n            planName.setText(uiState.period)\r\n            planPrice.text = uiState.price\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "    setRetainInstance(true);\r\n    return new BottomSheetDialog(requireContext(), getTheme());\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    setRetainInstance(true);\r\n    return new BottomSheetDialog(requireContext(), getTheme());\r\n}",
  "start_lineno" : "22",
  "methodName" : "onCreateDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\BottomSheetDialogBase.java",
  "task_id" : "simplenote-android/64",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "            setObservers()\r\n\r\n            viewModel.loadCollaborators(noteId)\r\n        }\r\n    }",
  "context" : "override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val noteId = intent.getStringExtra(NOTE_ID_ARG)\r\n        if (noteId == null) {\r\n            finish()\r\n            return\r\n        }\r\n\r\n        with(ActivityCollaboratorsBinding.inflate(layoutInflater)) {\r\n            setContentView(root)\r\n\r\n            setupViews()\r\n            setObservers()\r\n\r\n            viewModel.loadCollaborators(noteId)\r\n        }\r\n    }",
  "start_lineno" : "33",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/65",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val noteId = intent.getStringExtra(NOTE_ID_ARG)\r\n        if (noteId == null) {\r\n            finish()\r\n            return\r\n        }\r\n\r\n        with(ActivityCollaboratorsBinding.inflate(layoutInflater)) {\r\n            setContentView(root)\r\n\r\n            setupViews()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r\n            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "52",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/66",
  "prompt" : "import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "\r\n        viewModel.startListeningChanges()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n\r\n        viewModel.startListeningChanges()\r\n    }",
  "start_lineno" : "60",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/67",
  "prompt" : "override fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "\r\n        viewModel.stopListeningChanges()\r\n    }",
  "context" : "override fun onPause() {\r\n        super.onPause()\r\n\r\n        viewModel.stopListeningChanges()\r\n    }",
  "start_lineno" : "66",
  "methodName" : "onPause",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/68",
  "prompt" : "override fun onPause() {\r\n        super.onPause()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "        supportActionBar?.apply {\r\n            title = SpannableString(getString(R.string.collaborators))\r\n            setDisplayHomeAsUpEnabled(true)\r\n        }\r\n    }",
  "context" : "private fun setupToolbar() {\r\n        val toolbar = findViewById<Toolbar>(R.id.toolbar)\r\n        setSupportActionBar(toolbar)\r\n\r\n        supportActionBar?.apply {\r\n            title = SpannableString(getString(R.string.collaborators))\r\n            setDisplayHomeAsUpEnabled(true)\r\n        }\r\n    }",
  "start_lineno" : "87",
  "methodName" : "setupToolbar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/69",
  "prompt" : "import androidx.appcompat.widget.Toolbar\nimport android.view.View\nprivate fun setupToolbar() {\r\n        val toolbar = findViewById<Toolbar>(R.id.toolbar)\r\n        setSupportActionBar(toolbar)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "126",
  "ground_truth" : "        val items = listOf(HeaderItem) + collaborators.map { CollaboratorItem(it) }\r\n        (collaboratorsList.adapter as CollaboratorsAdapter).submitList(items)\r\n    }",
  "context" : "private fun ActivityCollaboratorsBinding.handleCollaboratorsList(collaborators: List<String>) {\r\n        hideEmptyView()\r\n        val items = listOf(HeaderItem) + collaborators.map { CollaboratorItem(it) }\r\n        (collaboratorsList.adapter as CollaboratorsAdapter).submitList(items)\r\n    }",
  "start_lineno" : "122",
  "methodName" : "handleCollaboratorsList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/70",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nprivate fun ActivityCollaboratorsBinding.handleCollaboratorsList(collaborators: List<String>) {\r\n        hideEmptyView()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "131",
  "ground_truth" : "        showEmptyView()\r\n        (collaboratorsList.adapter as CollaboratorsAdapter).submitList(emptyList())\r\n    }",
  "context" : "private fun ActivityCollaboratorsBinding.handleEmptyCollaborators() {\r\n        showEmptyView()\r\n        (collaboratorsList.adapter as CollaboratorsAdapter).submitList(emptyList())\r\n    }",
  "start_lineno" : "128",
  "methodName" : "handleEmptyCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/71",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nprivate fun ActivityCollaboratorsBinding.handleEmptyCollaborators() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "137",
  "ground_truth" : "        empty.title.visibility = View.GONE\r\n        empty.message.visibility = View.GONE\r\n    }",
  "context" : "private fun ActivityCollaboratorsBinding.hideEmptyView() {\r\n        empty.image.visibility = View.GONE\r\n        empty.title.visibility = View.GONE\r\n        empty.message.visibility = View.GONE\r\n    }",
  "start_lineno" : "133",
  "methodName" : "hideEmptyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/72",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nprivate fun ActivityCollaboratorsBinding.hideEmptyView() {\r\n        empty.image.visibility = View.GONE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "143",
  "ground_truth" : "        empty.title.visibility = View.VISIBLE\r\n        empty.message.visibility = View.VISIBLE\r\n    }",
  "context" : "private fun ActivityCollaboratorsBinding.showEmptyView() {\r\n        empty.image.visibility = View.VISIBLE\r\n        empty.title.visibility = View.VISIBLE\r\n        empty.message.visibility = View.VISIBLE\r\n    }",
  "start_lineno" : "139",
  "methodName" : "showEmptyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/73",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nprivate fun ActivityCollaboratorsBinding.showEmptyView() {\r\n        empty.image.visibility = View.VISIBLE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "148",
  "ground_truth" : "        val dialog = AddCollaboratorFragment(event.noteId)\r\n        dialog.show(supportFragmentManager.beginTransaction(), DIALOG_TAG)\r\n    }",
  "context" : "private fun showAddCollaboratorFragment(event: Event.AddCollaboratorEvent) {\r\n        val dialog = AddCollaboratorFragment(event.noteId)\r\n        dialog.show(supportFragmentManager.beginTransaction(), DIALOG_TAG)\r\n    }",
  "start_lineno" : "145",
  "methodName" : "showAddCollaboratorFragment",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/74",
  "prompt" : "import com.automattic.simplenote.viewmodels.CollaboratorsViewModel.Event\nprivate fun showAddCollaboratorFragment(event: Event.AddCollaboratorEvent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "157",
  "ground_truth" : "        alert.setMessage(R.string.remove_collaborator_message)\r\n        alert.setNegativeButton(R.string.cancel, null)\r\n        alert.setPositiveButton(R.string.remove) {  _, _ -> viewModel.removeCollaborator(event.collaborator) }\r\n        alert.show()\r\n    }",
  "context" : "private fun showRemoveCollaboratorDialog(event: Event.RemoveCollaboratorEvent) {\r\n        val alert = AlertDialog.Builder(ContextThemeWrapper(this, R.style.Dialog))\r\n        alert.setTitle(R.string.remove_collaborator)\r\n        alert.setMessage(R.string.remove_collaborator_message)\r\n        alert.setNegativeButton(R.string.cancel, null)\r\n        alert.setPositiveButton(R.string.remove) {  _, _ -> viewModel.removeCollaborator(event.collaborator) }\r\n        alert.show()\r\n    }",
  "start_lineno" : "150",
  "methodName" : "showRemoveCollaboratorDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/75",
  "prompt" : "import com.automattic.simplenote.viewmodels.CollaboratorsViewModel.Event\nimport androidx.appcompat.view.ContextThemeWrapper\nimport androidx.appcompat.app.AlertDialog\nprivate fun showRemoveCollaboratorDialog(event: Event.RemoveCollaboratorEvent) {\r\n        val alert = AlertDialog.Builder(ContextThemeWrapper(this, R.style.Dialog))\r\n        alert.setTitle(R.string.remove_collaborator)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "163",
  "ground_truth" : "        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        startActivity(intent)\r\n    }",
  "context" : "private fun navigateToNotesList() {\r\n        val intent = Intent(applicationContext, NotesActivity::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        startActivity(intent)\r\n    }",
  "start_lineno" : "159",
  "methodName" : "navigateToNotesList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt",
  "task_id" : "simplenote-android/76",
  "prompt" : "import android.content.Intent\nprivate fun navigateToNotesList() {\r\n        val intent = Intent(applicationContext, NotesActivity::class.java)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "    dialog.setOnConfirmListener(builder.mOnConfirmListener);\r\n    dialog.setOnDismissListener(builder.mOnDismissListener);\r\n    dialog.setHideActivityBar(builder.mHideActivityBar);\r\n    return dialog;\r\n}",
  "context" : "protected static FullScreenDialogFragment newInstance(Builder builder) {\r\n    FullScreenDialogFragment dialog = new FullScreenDialogFragment();\r\n    dialog.setArguments(setArguments(builder));\r\n    //noinspection deprecation\r\n    dialog.setContent(Fragment.instantiate(builder.mContext, builder.mClass.getName(), builder.mArguments));\r\n    dialog.setOnConfirmListener(builder.mOnConfirmListener);\r\n    dialog.setOnDismissListener(builder.mOnDismissListener);\r\n    dialog.setHideActivityBar(builder.mHideActivityBar);\r\n    return dialog;\r\n}",
  "start_lineno" : "80",
  "methodName" : "newInstance",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/77",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport android.content.Context\nimport android.app.Dialog\nprotected static FullScreenDialogFragment newInstance(Builder builder) {\r\n    FullScreenDialogFragment dialog = new FullScreenDialogFragment();\r\n    dialog.setArguments(setArguments(builder));\r\n    //noinspection deprecation\r\n    dialog.setContent(Fragment.instantiate(builder.mContext, builder.mClass.getName(), builder.mArguments));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "    bundle.putString(ARG_TITLE, builder.mTitle);\r\n    bundle.putString(ARG_SUBTITLE, builder.mSubtitle);\r\n    bundle.putBoolean(ARG_HIDE_ACTIVITY_BAR, builder.mHideActivityBar);\r\n    return bundle;\r\n}",
  "context" : "private static Bundle setArguments(Builder builder) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(ARG_ACTION, builder.mAction);\r\n    bundle.putInt(ARG_CONTAINER, builder.mContainer);\r\n    bundle.putFloat(ARG_ELEVATION, builder.mElevation);\r\n    bundle.putString(ARG_TITLE, builder.mTitle);\r\n    bundle.putString(ARG_SUBTITLE, builder.mSubtitle);\r\n    bundle.putBoolean(ARG_HIDE_ACTIVITY_BAR, builder.mHideActivityBar);\r\n    return bundle;\r\n}",
  "start_lineno" : "91",
  "methodName" : "setArguments",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/78",
  "prompt" : "import android.os.Bundle\nprivate static Bundle setArguments(Builder builder) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(ARG_ACTION, builder.mAction);\r\n    bundle.putInt(ARG_CONTAINER, builder.mContainer);\r\n    bundle.putFloat(ARG_ELEVATION, builder.mElevation);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "118",
  "ground_truth" : "        getChildFragmentManager().beginTransaction().setCustomAnimations(R.anim.full_screen_dialog_fragment_none, 0, 0, R.anim.full_screen_dialog_fragment_none).add(R.id.full_screen_dialog_fragment_content, mFragment).commitNow();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onActivityCreated(Bundle savedInstanceState) {\r\n    super.onActivityCreated(savedInstanceState);\r\n    if (savedInstanceState == null) {\r\n        getChildFragmentManager().beginTransaction().setCustomAnimations(R.anim.full_screen_dialog_fragment_none, 0, 0, R.anim.full_screen_dialog_fragment_none).add(R.id.full_screen_dialog_fragment_content, mFragment).commitNow();\r\n    }\r\n}",
  "start_lineno" : "102",
  "methodName" : "onActivityCreated",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/79",
  "prompt" : "import android.os.Bundle\n@Override\r\npublic void onActivityCreated(Bundle savedInstanceState) {\r\n    super.onActivityCreated(savedInstanceState);\r\n    if (savedInstanceState == null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "155",
  "ground_truth" : "        }\r\n    };\r\n    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n    return dialog;\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    Dialog dialog = new Dialog(requireContext(), getTheme()) {\r\n\r\n        @Override\r\n        public void onBackPressed() {\r\n            onDismissClicked();\r\n        }\r\n    };\r\n    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n    return dialog;\r\n}",
  "start_lineno" : "141",
  "methodName" : "onCreateDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/80",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.content.Context\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    Dialog dialog = new Dialog(requireContext(), getTheme()) {\r\n\r\n        @Override\r\n        public void onBackPressed() {\r\n            onDismissClicked();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "173",
  "ground_truth" : "    setThemeBackground(view);\r\n    view.setFocusableInTouchMode(true);\r\n    view.requestFocus();\r\n    return view;\r\n}",
  "context" : "@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    if (mHideActivityBar) {\r\n        hideActivityBar();\r\n    }\r\n    ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_full_screen_dialog, container, false);\r\n    initToolbar(view);\r\n    setThemeBackground(view);\r\n    view.setFocusableInTouchMode(true);\r\n    view.requestFocus();\r\n    return view;\r\n}",
  "start_lineno" : "157",
  "methodName" : "onCreateView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/81",
  "prompt" : "import androidx.appcompat.widget.Toolbar\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    if (mHideActivityBar) {\r\n        hideActivityBar();\r\n    }\r\n    ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_full_screen_dialog, container, false);\r\n    initToolbar(view);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "197",
  "ground_truth" : "    if (mHideActivityBar) {\r\n        showActivityBar();\r\n    }\r\n    super.dismiss();\r\n}",
  "context" : "@Override\r\npublic void dismiss() {\r\n    // If isStateSaved() is true, it means that the application is not in the foreground, thus, we cannot\r\n    // dismiss the dialog because it would cause an IllegalStateException\r\n    if (isStateSaved()) {\r\n        return;\r\n    }\r\n    if (mOnDismissListener != null) {\r\n        mOnDismissListener.onDismiss();\r\n    }\r\n    if (mHideActivityBar) {\r\n        showActivityBar();\r\n    }\r\n    super.dismiss();\r\n}",
  "start_lineno" : "180",
  "methodName" : "dismiss",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/82",
  "prompt" : "@Override\r\npublic void dismiss() {\r\n    // If isStateSaved() is true, it means that the application is not in the foreground, thus, we cannot\r\n    // dismiss the dialog because it would cause an IllegalStateException\r\n    if (isStateSaved()) {\r\n        return;\r\n    }\r\n    if (mOnDismissListener != null) {\r\n        mOnDismissListener.onDismiss();\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "215",
  "ground_truth" : "    transaction.setCustomAnimations(R.anim.full_screen_dialog_fragment_slide_up, 0, 0, R.anim.full_screen_dialog_fragment_slide_down);\r\n    @IdRes\r\n    int container = mContainer != 0 ? mContainer : android.R.id.content;\r\n    return transaction.add(container, this, tag).addToBackStack(null).commit();\r\n}",
  "context" : "@Override\r\npublic int show(FragmentTransaction transaction, String tag) {\r\n    initBuilderArguments();\r\n    transaction.setCustomAnimations(R.anim.full_screen_dialog_fragment_slide_up, 0, 0, R.anim.full_screen_dialog_fragment_slide_down);\r\n    @IdRes\r\n    int container = mContainer != 0 ? mContainer : android.R.id.content;\r\n    return transaction.add(container, this, tag).addToBackStack(null).commit();\r\n}",
  "start_lineno" : "204",
  "methodName" : "show",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/83",
  "prompt" : "import androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.Fragment\n@Override\r\npublic int show(FragmentTransaction transaction, String tag) {\r\n    initBuilderArguments();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "223",
  "ground_truth" : "    }\r\n    dismiss();\r\n}",
  "context" : "protected void confirm(Bundle result) {\r\n    if (mOnConfirmListener != null) {\r\n        mOnConfirmListener.onConfirm(result);\r\n    }\r\n    dismiss();\r\n}",
  "start_lineno" : "217",
  "methodName" : "confirm",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/84",
  "prompt" : "import android.os.Bundle\nprotected void confirm(Bundle result) {\r\n    if (mOnConfirmListener != null) {\r\n        mOnConfirmListener.onConfirm(result);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "247",
  "ground_truth" : "        if (actionBar != null && actionBar.isShowing()) {\r\n            actionBar.hide();\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Hide {@link androidx.appcompat.app.AppCompatActivity} bar when showing fullscreen dialog.\r\n */\r\npublic void hideActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r\n        if (actionBar != null && actionBar.isShowing()) {\r\n            actionBar.hide();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "237",
  "methodName" : "hideActivityBar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/85",
  "prompt" : "import androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.ActionBar\n/**\r\n * Hide {@link androidx.appcompat.app.AppCompatActivity} bar when showing fullscreen dialog.\r\n */\r\npublic void hideActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "262",
  "ground_truth" : "        mTitle = bundle.getString(ARG_TITLE);\r\n        mSubtitle = bundle.getString(ARG_SUBTITLE);\r\n        mHideActivityBar = bundle.getBoolean(ARG_HIDE_ACTIVITY_BAR);\r\n    }\r\n}",
  "context" : "/**\r\n * Initialize arguments passed in {@link Builder}.\r\n */\r\nprivate void initBuilderArguments() {\r\n    if (getArguments() != null) {\r\n        Bundle bundle = getArguments();\r\n        mAction = bundle.getString(ARG_ACTION);\r\n        mContainer = bundle.getInt(ARG_CONTAINER);\r\n        mElevation = bundle.getFloat(ARG_ELEVATION);\r\n        mTitle = bundle.getString(ARG_TITLE);\r\n        mSubtitle = bundle.getString(ARG_SUBTITLE);\r\n        mHideActivityBar = bundle.getBoolean(ARG_HIDE_ACTIVITY_BAR);\r\n    }\r\n}",
  "start_lineno" : "252",
  "methodName" : "initBuilderArguments",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/86",
  "prompt" : "import android.os.Bundle\n/**\r\n * Initialize arguments passed in {@link Builder}.\r\n */\r\nprivate void initBuilderArguments() {\r\n    if (getArguments() != null) {\r\n        Bundle bundle = getArguments();\r\n        mAction = bundle.getString(ARG_ACTION);\r\n        mContainer = bundle.getInt(ARG_CONTAINER);\r\n        mElevation = bundle.getFloat(ARG_ELEVATION);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "299",
  "ground_truth" : "        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}",
  "context" : "@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (item.getItemId() == ID_ACTION) {\r\n        onConfirmClicked();\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "291",
  "methodName" : "onMenuItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/87",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (item.getItemId() == ID_ACTION) {\r\n        onConfirmClicked();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "309",
  "ground_truth" : "        onDismissClicked();\r\n    }\r\n}",
  "context" : "public void onBackPressed() {\r\n    if (isAdded()) {\r\n        onDismissClicked();\r\n    }\r\n}",
  "start_lineno" : "305",
  "methodName" : "onBackPressed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/88",
  "prompt" : "public void onBackPressed() {\r\n    if (isAdded()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "317",
  "ground_truth" : "        mController.confirm(null);\r\n    }\r\n}",
  "context" : "protected void onConfirmClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onConfirmClicked(mController);\r\n    if (!isConsumed) {\r\n        mController.confirm(null);\r\n    }\r\n}",
  "start_lineno" : "311",
  "methodName" : "onConfirmClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/89",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.app.Dialog\nprotected void onConfirmClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onConfirmClicked(mController);\r\n    if (!isConsumed) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "325",
  "ground_truth" : "        mController.dismiss();\r\n    }\r\n}",
  "context" : "protected void onDismissClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onDismissClicked(mController);\r\n    if (!isConsumed) {\r\n        mController.dismiss();\r\n    }\r\n}",
  "start_lineno" : "319",
  "methodName" : "onDismissClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/90",
  "prompt" : "import androidx.fragment.app.Fragment\nimport android.app.Dialog\nprotected void onDismissClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onDismissClicked(mController);\r\n    if (!isConsumed) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "371",
  "ground_truth" : "    mSubtitle = text;\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n */\r\npublic void setSubtitle(@NonNull String text) {\r\n    mSubtitle = text;\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}",
  "start_lineno" : "368",
  "methodName" : "setSubtitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/91",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n */\r\npublic void setSubtitle(@NonNull String text) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "381",
  "ground_truth" : "    mSubtitle = requireContext().getString(textId);\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n */\r\npublic void setSubtitle(@StringRes int textId) {\r\n    mSubtitle = requireContext().getString(textId);\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}",
  "start_lineno" : "378",
  "methodName" : "setSubtitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/92",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n */\r\npublic void setSubtitle(@StringRes int textId) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "418",
  "ground_truth" : "        if (actionBar != null && !actionBar.isShowing()) {\r\n            actionBar.show();\r\n        }\r\n    }\r\n}",
  "context" : "/**\r\n * Show {@link androidx.appcompat.app.AppCompatActivity} bar when hiding fullscreen dialog.\r\n */\r\npublic void showActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r\n        if (actionBar != null && !actionBar.isShowing()) {\r\n            actionBar.show();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "408",
  "methodName" : "showActivityBar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/93",
  "prompt" : "import androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.ActionBar\n/**\r\n * Show {@link androidx.appcompat.app.AppCompatActivity} bar when hiding fullscreen dialog.\r\n */\r\npublic void showActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "461",
  "ground_truth" : "    mAction = text;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} action text.\r\n *\r\n * @param text {@link String} to set as action text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setAction(@NonNull String text) {\r\n    mAction = text;\r\n    return this;\r\n}",
  "start_lineno" : "458",
  "methodName" : "setAction",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/94",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} action text.\r\n *\r\n * @param text {@link String} to set as action text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setAction(@NonNull String text) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "489",
  "ground_truth" : "    }\r\n    mClass = contentClass;\r\n    mArguments = contentArguments;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link Fragment} to be added as dialog, which must implement {@link FullScreenDialogContent}.\r\n *\r\n * @param contentClass     Fragment class to be instantiated\r\n * @param contentArguments arguments to be added to Fragment\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n * @throws IllegalArgumentException if content class does not implement\r\n *                                  {@link FullScreenDialogContent} interface\r\n */\r\npublic Builder setContent(Class<? extends Fragment> contentClass, @Nullable Bundle contentArguments) {\r\n    if (!FullScreenDialogContent.class.isAssignableFrom(contentClass)) {\r\n        throw new IllegalArgumentException(\"The fragment class must implement FullScreenDialogContent interface\");\r\n    }\r\n    mClass = contentClass;\r\n    mArguments = contentArguments;\r\n    return this;\r\n}",
  "start_lineno" : "481",
  "methodName" : "setContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/95",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.annotation.Nullable\nimport android.os.Bundle\nimport android.app.Dialog\n/**\r\n * Set {@link Fragment} to be added as dialog, which must implement {@link FullScreenDialogContent}.\r\n *\r\n * @param contentClass     Fragment class to be instantiated\r\n * @param contentArguments arguments to be added to Fragment\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n * @throws IllegalArgumentException if content class does not implement\r\n *                                  {@link FullScreenDialogContent} interface\r\n */\r\npublic Builder setContent(Class<? extends Fragment> contentClass, @Nullable Bundle contentArguments) {\r\n    if (!FullScreenDialogContent.class.isAssignableFrom(contentClass)) {\r\n        throw new IllegalArgumentException(\"The fragment class must implement FullScreenDialogContent interface\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "500",
  "ground_truth" : "    mHideActivityBar = hide;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set flag to hide activity bar when showing fullscreen dialog.\r\n *\r\n * @param hide boolean to hide activity bar\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setHideActivityBar(boolean hide) {\r\n    mHideActivityBar = hide;\r\n    return this;\r\n}",
  "start_lineno" : "497",
  "methodName" : "setHideActivityBar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/96",
  "prompt" : "/**\r\n * Set flag to hide activity bar when showing fullscreen dialog.\r\n *\r\n * @param hide boolean to hide activity bar\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setHideActivityBar(boolean hide) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "511",
  "ground_truth" : "    mSubtitle = text;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@NonNull String text) {\r\n    mSubtitle = text;\r\n    return this;\r\n}",
  "start_lineno" : "508",
  "methodName" : "setSubtitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/97",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@NonNull String text) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "522",
  "ground_truth" : "    mSubtitle = mContext.getString(textId);\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@StringRes int textId) {\r\n    mSubtitle = mContext.getString(textId);\r\n    return this;\r\n}",
  "start_lineno" : "519",
  "methodName" : "setSubtitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/98",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@StringRes int textId) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "533",
  "ground_truth" : "    mTitle = text;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param text {@link String} to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@NonNull String text) {\r\n    mTitle = text;\r\n    return this;\r\n}",
  "start_lineno" : "530",
  "methodName" : "setTitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/99",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param text {@link String} to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@NonNull String text) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "544",
  "ground_truth" : "    mTitle = mContext.getString(textId);\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param textId resource ID to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@StringRes int textId) {\r\n    mTitle = mContext.getString(textId);\r\n    return this;\r\n}",
  "start_lineno" : "541",
  "methodName" : "setTitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/100",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param textId resource ID to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@StringRes int textId) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "555",
  "ground_truth" : "    mElevation = elevation;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param elevation {@link Float} to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(float elevation) {\r\n    mElevation = elevation;\r\n    return this;\r\n}",
  "start_lineno" : "552",
  "methodName" : "setToolbarElevation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/101",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.appcompat.widget.Toolbar\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param elevation {@link Float} to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(float elevation) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "570",
  "ground_truth" : "    } else {\r\n        mElevation = mContext.getResources().getDimension(dimension);\r\n        return this;\r\n    }\r\n}",
  "context" : "/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param dimension resource ID dimension to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(@DimenRes int dimension) {\r\n    if (dimension == 0) {\r\n        return setToolbarElevation(Float.valueOf(dimension));\r\n    } else {\r\n        mElevation = mContext.getResources().getDimension(dimension);\r\n        return this;\r\n    }\r\n}",
  "start_lineno" : "563",
  "methodName" : "setToolbarElevation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/102",
  "prompt" : "import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.appcompat.widget.Toolbar\nimport androidx.annotation.DimenRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param dimension resource ID dimension to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(@DimenRes int dimension) {\r\n    if (dimension == 0) {\r\n        return setToolbarElevation(Float.valueOf(dimension));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "581",
  "ground_truth" : "    mOnConfirmListener = listener;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set callback to call when dialog is closed due to confirm click.\r\n *\r\n * @param listener {@link OnConfirmListener} interface to call on confirm click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnConfirmListener(@Nullable OnConfirmListener listener) {\r\n    mOnConfirmListener = listener;\r\n    return this;\r\n}",
  "start_lineno" : "578",
  "methodName" : "setOnConfirmListener",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/103",
  "prompt" : "import androidx.annotation.Nullable\n/**\r\n * Set callback to call when dialog is closed due to confirm click.\r\n *\r\n * @param listener {@link OnConfirmListener} interface to call on confirm click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnConfirmListener(@Nullable OnConfirmListener listener) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "592",
  "ground_truth" : "    mOnDismissListener = listener;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set callback to call when dialog is closed due to dismiss click.\r\n *\r\n * @param listener {@link OnDismissListener} interface to call on dismiss click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnDismissListener(@Nullable OnDismissListener listener) {\r\n    mOnDismissListener = listener;\r\n    return this;\r\n}",
  "start_lineno" : "589",
  "methodName" : "setOnDismissListener",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/104",
  "prompt" : "import androidx.annotation.Nullable\n/**\r\n * Set callback to call when dialog is closed due to dismiss click.\r\n *\r\n * @param listener {@link OnDismissListener} interface to call on dismiss click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnDismissListener(@Nullable OnDismissListener listener) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = FullScreenDialogFragment.class.getSimpleName();\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\nprivate static final String ARG_ELEVATION = \"ARG_ELEVATION\";\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_SUBTITLE = \"ARG_SUBTITLE\";\nprivate static final String ARG_TITLE = \"ARG_TITLE\";\nprivate static final int ID_ACTION = 1;\nprivate Fragment mFragment;\nprivate FullScreenDialogController mController;\nprivate OnConfirmListener mOnConfirmListener;\nprivate OnDismissListener mOnDismissListener;\nprivate String mAction;\nprivate String mSubtitle;\nprivate String mTitle;\nprivate Toolbar mToolbar;\nprivate boolean mHideActivityBar;\nprivate float mElevation;\n@IdRes\r\nprivate int mContainer;\nBundle mArguments;\nClass<? extends Fragment> mClass;\nContext mContext;\nOnConfirmListener mOnConfirmListener;\nOnDismissListener mOnDismissListener;\nString mAction = \"\";\nString mSubtitle = \"\";\nString mTitle = \"\";\nboolean mHideActivityBar = false;\nfloat mElevation = 0;\n@IdRes\r\nint mContainer = 0;",
  "app_type" : "notes",
  "end_lineno" : "603",
  "ground_truth" : "    mContainer = container;\r\n    return this;\r\n}",
  "context" : "/**\r\n * Set container view for full-screen dialog.\r\n *\r\n * @param container resource ID to use as container of full-screen dialog\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setViewContainer(@IdRes int container) {\r\n    mContainer = container;\r\n    return this;\r\n}",
  "start_lineno" : "600",
  "methodName" : "setViewContainer",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java",
  "task_id" : "simplenote-android/105",
  "prompt" : "import androidx.annotation.IdRes\nimport android.view.View\n/**\r\n * Set container view for full-screen dialog.\r\n *\r\n * @param container resource ID to use as container of full-screen dialog\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setViewContainer(@IdRes int container) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "61",
  "ground_truth" : "        public void run() {\r\n            updateProgressBar();\r\n        }\r\n    });\r\n}",
  "context" : "// Note: These callbacks won't be running on the main thread\r\n@Override\r\npublic void onComplete(Map<Integer, Note> revisionsMap) {\r\n    if (!mFragment.isAdded() || mNote == null) {\r\n        return;\r\n    }\r\n    // Convert map to an array list, to work better with the 0-index based seekbar\r\n    mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            updateProgressBar();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "47",
  "methodName" : "onComplete",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/106",
  "prompt" : "import java.util.Map\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n// Note: These callbacks won't be running on the main thread\r\n@Override\r\npublic void onComplete(Map<Integer, Note> revisionsMap) {\r\n    if (!mFragment.isAdded() || mNote == null) {\r\n        return;\r\n    }\r\n    // Convert map to an array list, to work better with the 0-index based seekbar\r\n    mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "            mProgressBar.setVisibility(View.GONE);\r\n            mErrorText.setVisibility(View.VISIBLE);\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onError(Throwable exception) {\r\n    if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n        return;\r\n    }\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            mProgressBar.setVisibility(View.GONE);\r\n            mErrorText.setVisibility(View.VISIBLE);\r\n        }\r\n    });\r\n}",
  "start_lineno" : "67",
  "methodName" : "onError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/107",
  "prompt" : "import androidx.fragment.app.Fragment\n@Override\r\npublic void onError(Throwable exception) {\r\n    if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n        return;\r\n    }\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "    mProgressBar.setVisibility(View.GONE);\r\n    mErrorText.setVisibility(View.VISIBLE);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    mProgressBar.setVisibility(View.GONE);\r\n    mErrorText.setVisibility(View.VISIBLE);\r\n}",
  "start_lineno" : "74",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/108",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "146",
  "ground_truth" : "    mDidTapButton = true;\r\n    mListener.onHistoryCancelClicked();\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    mDidTapButton = true;\r\n    mListener.onHistoryCancelClicked();\r\n}",
  "start_lineno" : "142",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/109",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "155",
  "ground_truth" : "    mDidTapButton = true;\r\n    mListener.onHistoryRestoreClicked();\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    mDidTapButton = true;\r\n    mListener.onHistoryRestoreClicked();\r\n}",
  "start_lineno" : "151",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/110",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "164",
  "ground_truth" : "    mListener.onHistoryDismissed();\r\n    mNote = null;\r\n}",
  "context" : "@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    mListener.onHistoryDismissed();\r\n    mNote = null;\r\n}",
  "start_lineno" : "160",
  "methodName" : "onDismiss",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/111",
  "prompt" : "import android.content.DialogInterface\n@Override\r\npublic void onDismiss(DialogInterface dialog) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "180",
  "ground_truth" : "        BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);\r\n        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n        behavior.setSkipCollapsed(true);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onShow(DialogInterface dialogInterface) {\r\n    BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n    FrameLayout bottomSheet = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    if (bottomSheet != null) {\r\n        BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);\r\n        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n        behavior.setSkipCollapsed(true);\r\n    }\r\n}",
  "start_lineno" : "170",
  "methodName" : "onShow",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/112",
  "prompt" : "import com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.widget.FrameLayout\nimport android.view.View\nimport android.content.DialogInterface\n@Override\r\npublic void onShow(DialogInterface dialogInterface) {\r\n    BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n    FrameLayout bottomSheet = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    if (bottomSheet != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "196",
  "ground_truth" : "        mNote = note;\r\n        mDidTapButton = false;\r\n        setProgressBar();\r\n    }\r\n}",
  "context" : "public void show(FragmentManager manager, Note note) {\r\n    if (mFragment.isAdded()) {\r\n        showNow(manager, TAG);\r\n        mNote = note;\r\n        mDidTapButton = false;\r\n        setProgressBar();\r\n    }\r\n}",
  "start_lineno" : "189",
  "methodName" : "show",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/113",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\npublic void show(FragmentManager manager, Note note) {\r\n    if (mFragment.isAdded()) {\r\n        showNow(manager, TAG);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = HistoryBottomSheetDialog.class.getSimpleName();\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate Fragment mFragment;\nprivate HistorySheetListener mListener;\nprivate Note mNote;\nprivate SeekBar mHistorySeekBar;\nprivate TextView mHistoryDate;\nprivate View mButtonRestore;\nprivate View mErrorText;\nprivate View mLoadingView;\nprivate View mProgressBar;\nprivate View mSliderView;\nprivate boolean mDidTapButton;\nprivate final Bucket.RevisionsRequestCallbacks<Note> mRevisionsRequestCallbacks = new Bucket.RevisionsRequestCallbacks<Note>() {\r\n\r\n    // Note: These callbacks won't be running on the main thread\r\n    @Override\r\n    public void onComplete(Map<Integer, Note> revisionsMap) {\r\n        if (!mFragment.isAdded() || mNote == null) {\r\n            return;\r\n        }\r\n        // Convert map to an array list, to work better with the 0-index based seekbar\r\n        mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateProgressBar();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRevision(String key, int version, JSONObject object) {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable exception) {\r\n        if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n            return;\r\n        }\r\n        mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                mProgressBar.setVisibility(View.GONE);\r\n                mErrorText.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "206",
  "ground_truth" : "        setProgressBar();\r\n    }\r\n}",
  "context" : "public void updateProgressBar() {\r\n    if (getDialog() != null && getDialog().isShowing()) {\r\n        setProgressBar();\r\n    }\r\n}",
  "start_lineno" : "202",
  "methodName" : "updateProgressBar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java",
  "task_id" : "simplenote-android/114",
  "prompt" : "public void updateProgressBar() {\r\n    if (getDialog() != null && getDialog().isShowing()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mNotesBucket;\nprivate final Bucket<Tag> mTagsBucket;\nprivate FailureReason mReason;",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_IMPORT_NOTES, AnalyticsTracker.CATEGORY_NOTE, \"import_notes_type_\" + fileType);\r\n    } catch (IOException e) {\r\n        throw new ImportException(FailureReason.FileError);\r\n    }\r\n}",
  "context" : "public static void fromUri(FragmentActivity activity, Uri uri) throws ImportException {\r\n    try {\r\n        String fileType = FileUtils.getFileExtension(activity, uri);\r\n        new Importer((Simplenote) activity.getApplication()).dispatchFileImport(fileType, FileUtils.readFile(activity, uri));\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_IMPORT_NOTES, AnalyticsTracker.CATEGORY_NOTE, \"import_notes_type_\" + fileType);\r\n    } catch (IOException e) {\r\n        throw new ImportException(FailureReason.FileError);\r\n    }\r\n}",
  "start_lineno" : "32",
  "methodName" : "fromUri",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java",
  "task_id" : "simplenote-android/115",
  "prompt" : "import com.automattic.simplenote.utils.FileUtils\nimport androidx.fragment.app.FragmentActivity\nimport android.net.Uri\npublic static void fromUri(FragmentActivity activity, Uri uri) throws ImportException {\r\n    try {\r\n        String fileType = FileUtils.getFileExtension(activity, uri);\r\n        new Importer((Simplenote) activity.getApplication()).dispatchFileImport(fileType, FileUtils.readFile(activity, uri));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mNotesBucket;\nprivate final Bucket<Tag> mTagsBucket;\nprivate FailureReason mReason;",
  "app_type" : "notes",
  "end_lineno" : "65",
  "ground_truth" : "            break;\r\n        default:\r\n            throw new ImportException(FailureReason.UnknownExportType);\r\n    }\r\n}",
  "context" : "private void dispatchFileImport(String fileType, String content) throws ImportException {\r\n    switch(fileType) {\r\n        case \"json\":\r\n            importJsonFile(content);\r\n            break;\r\n        case \"md\":\r\n            importMarkdown(content);\r\n            break;\r\n        case \"txt\":\r\n            importPlaintext(content);\r\n            break;\r\n        default:\r\n            throw new ImportException(FailureReason.UnknownExportType);\r\n    }\r\n}",
  "start_lineno" : "51",
  "methodName" : "dispatchFileImport",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java",
  "task_id" : "simplenote-android/116",
  "prompt" : "private void dispatchFileImport(String fileType, String content) throws ImportException {\r\n    switch(fileType) {\r\n        case \"json\":\r\n            importJsonFile(content);\r\n            break;\r\n        case \"md\":\r\n            importMarkdown(content);\r\n            break;\r\n        case \"txt\":\r\n            importPlaintext(content);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mNotesBucket;\nprivate final Bucket<Tag> mTagsBucket;\nprivate FailureReason mReason;",
  "app_type" : "notes",
  "end_lineno" : "76",
  "ground_truth" : "    note.enableMarkdown();\r\n    addNote(note);\r\n}",
  "context" : "private void importMarkdown(String content) {\r\n    Note note = Note.fromContent(mNotesBucket, content);\r\n    note.enableMarkdown();\r\n    addNote(note);\r\n}",
  "start_lineno" : "71",
  "methodName" : "importMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java",
  "task_id" : "simplenote-android/117",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nprivate void importMarkdown(String content) {\r\n    Note note = Note.fromContent(mNotesBucket, content);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mNotesBucket;\nprivate final Bucket<Tag> mTagsBucket;\nprivate FailureReason mReason;",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "            note.removeTag(tagName);\r\n        }\r\n    }\r\n    note.save();\r\n}",
  "context" : "private void addNote(Note note) {\r\n    for (String tagName : note.getTags()) {\r\n        try {\r\n            TagUtils.createTagIfMissing(mTagsBucket, tagName);\r\n        } catch (BucketObjectNameInvalid e) {\r\n            // if it can't be added then remove it, we can't keep it anyway\r\n            note.removeTag(tagName);\r\n        }\r\n    }\r\n    note.save();\r\n}",
  "start_lineno" : "78",
  "methodName" : "addNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java",
  "task_id" : "simplenote-android/118",
  "prompt" : "import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagUtils\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nprivate void addNote(Note note) {\r\n    for (String tagName : note.getTags()) {\r\n        try {\r\n            TagUtils.createTagIfMissing(mTagsBucket, tagName);\r\n        } catch (BucketObjectNameInvalid e) {\r\n            // if it can't be added then remove it, we can't keep it anyway\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mNotesBucket;\nprivate final Bucket<Tag> mTagsBucket;\nprivate FailureReason mReason;",
  "app_type" : "notes",
  "end_lineno" : "97",
  "ground_truth" : "        importJsonExport(new JSONObject(content));\r\n    } catch (JSONException | ParseException e) {\r\n        throw new ImportException(FailureReason.ParseError);\r\n    }\r\n}",
  "context" : "private void importJsonFile(String content) throws ImportException {\r\n    try {\r\n        importJsonExport(new JSONObject(content));\r\n    } catch (JSONException | ParseException e) {\r\n        throw new ImportException(FailureReason.ParseError);\r\n    }\r\n}",
  "start_lineno" : "91",
  "methodName" : "importJsonFile",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java",
  "task_id" : "simplenote-android/119",
  "prompt" : "private void importJsonFile(String content) throws ImportException {\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = InfoBottomSheetDialog.class.getSimpleName();\nprivate final Fragment mFragment;\nprivate LinearLayout mDateTimeSyncedLayout;\nprivate LinearLayout mReferencesLayout;\nprivate RecyclerView mReferences;\nprivate TextView mCountCharacters;\nprivate TextView mCountWords;\nprivate TextView mDateTimeCreated;\nprivate TextView mDateTimeModified;\nprivate TextView mDateTimeSynced;\nprivate final List<Reference> mReferences;\nprivate final TextView mSubtitle;\nprivate final TextView mTitle;\nprivate final View mView;",
  "app_type" : "notes",
  "end_lineno" : "157",
  "ground_truth" : "    AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_info\");\r\n    SimplenoteLinkify.openNote(mFragment.requireActivity(), reference.getKey());\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_info\");\r\n    SimplenoteLinkify.openNote(mFragment.requireActivity(), reference.getKey());\r\n}",
  "start_lineno" : "149",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\InfoBottomSheetDialog.java",
  "task_id" : "simplenote-android/120",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View view) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String KEY_EMAIL_VERIFICATION = \"email-verification\";\nprivate static final String BUCKET_NAME = \"account\";\nprivate static final String FIELD_EMAIL_VERIFICATION_SENT_TO = \"sent_to\";\nprivate static final String FIELD_EMAIL_VERIFICATION_TOKEN = \"token\";\nprivate static final String FIELD_EMAIL_VERIFICATION_USERNAME = \"username\";",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "        return email.equalsIgnoreCase((String) username);\r\n    } catch (JSONException exception) {\r\n        return false;\r\n    }\r\n}",
  "context" : "public boolean hasVerifiedEmail(String email) {\r\n    Object token = getProperty(FIELD_EMAIL_VERIFICATION_TOKEN);\r\n    if (token == null) {\r\n        return false;\r\n    }\r\n    try {\r\n        JSONObject json = new JSONObject((String) token);\r\n        Object username = json.opt(FIELD_EMAIL_VERIFICATION_USERNAME);\r\n        return email.equalsIgnoreCase((String) username);\r\n    } catch (JSONException exception) {\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "25",
  "methodName" : "hasVerifiedEmail",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Account.java",
  "task_id" : "simplenote-android/121",
  "prompt" : "import org.json.JSONObject\npublic boolean hasVerifiedEmail(String email) {\r\n    Object token = getProperty(FIELD_EMAIL_VERIFICATION_TOKEN);\r\n    if (token == null) {\r\n        return false;\r\n    }\r\n    try {\r\n        JSONObject json = new JSONObject((String) token);\r\n        Object username = json.opt(FIELD_EMAIL_VERIFICATION_USERNAME);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "118",
  "ground_truth" : "    note.setContent(content);\r\n    note.setCreationDate(Calendar.getInstance());\r\n    note.setModificationDate(note.getCreationDate());\r\n    return note;\r\n}",
  "context" : "public static Note fromContent(Bucket<Note> notesBucket, String content) {\r\n    Note note = notesBucket.newObject();\r\n    note.setContent(content);\r\n    note.setCreationDate(Calendar.getInstance());\r\n    note.setModificationDate(note.getCreationDate());\r\n    return note;\r\n}",
  "start_lineno" : "111",
  "methodName" : "fromContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/122",
  "prompt" : "import com.simperium.client.Bucket\npublic static Note fromContent(Bucket<Note> notesBucket, String content) {\r\n    Note note = notesBucket.newObject();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "136",
  "ground_truth" : "    Calendar c = numberToDate(time);\r\n    return dateString(c, useShortFormat, context);\r\n}",
  "context" : "@SuppressWarnings(\"unused\")\r\npublic static String dateString(Number time, boolean useShortFormat, Context context) {\r\n    Calendar c = numberToDate(time);\r\n    return dateString(c, useShortFormat, context);\r\n}",
  "start_lineno" : "132",
  "methodName" : "dateString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/123",
  "prompt" : "import android.content.Context\n@SuppressWarnings(\"unused\")\r\npublic static String dateString(Number time, boolean useShortFormat, Context context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "182",
  "ground_truth" : "    while (matcher.find()) {\r\n        count++;\r\n    }\r\n    return count;\r\n}",
  "context" : "private static int getReferenceCount(String key, String content) {\r\n    Pattern pattern = Pattern.compile(SIMPLENOTE_LINK_PREFIX + key);\r\n    Matcher matcher = pattern.matcher(content);\r\n    int count = 0;\r\n    while (matcher.find()) {\r\n        count++;\r\n    }\r\n    return count;\r\n}",
  "start_lineno" : "172",
  "methodName" : "getReferenceCount",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/124",
  "prompt" : "import com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\nimport java.util.regex.Pattern\nimport java.util.regex.Matcher\nimport com.automattic.simplenote.R\nprivate static int getReferenceCount(String key, String content) {\r\n    Pattern pattern = Pattern.compile(SIMPLENOTE_LINK_PREFIX + key);\r\n    Matcher matcher = pattern.matcher(content);\r\n    int count = 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "201",
  "ground_truth" : "        Note note = cursor.getObject();\r\n        references.add(new Reference(note.getSimperiumKey(), note.getTitle(), note.getModificationDate(), getReferenceCount(key, note.getContent())));\r\n    }\r\n    return references;\r\n}",
  "context" : "public static List<Reference> getReferences(Bucket<Note> bucket, String key) {\r\n    List<Reference> references = new ArrayList<>();\r\n    Bucket.ObjectCursor<Note> cursor = Note.search(bucket, SIMPLENOTE_LINK_PREFIX + key).execute();\r\n    while (cursor.moveToNext()) {\r\n        Note note = cursor.getObject();\r\n        references.add(new Reference(note.getSimperiumKey(), note.getTitle(), note.getModificationDate(), getReferenceCount(key, note.getContent())));\r\n    }\r\n    return references;\r\n}",
  "start_lineno" : "184",
  "methodName" : "getReferences",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/125",
  "prompt" : "import com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\nimport java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.R\npublic static List<Reference> getReferences(Bucket<Note> bucket, String key) {\r\n    List<Reference> references = new ArrayList<>();\r\n    Bucket.ObjectCursor<Note> cursor = Note.search(bucket, SIMPLENOTE_LINK_PREFIX + key).execute();\r\n    while (cursor.moveToNext()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "224",
  "ground_truth" : "    calendar.setTimeInMillis(milliseconds);\r\n    SimpleDateFormat date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US);\r\n    date.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n    return date.format(calendar.getTime());\r\n}",
  "context" : "public static String numberToDateString(@NonNull Number number) {\r\n    long milliseconds = new BigDecimal(number.toString()).multiply(new BigDecimal(1000)).longValue();\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.setTimeInMillis(milliseconds);\r\n    SimpleDateFormat date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US);\r\n    date.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n    return date.format(calendar.getTime());\r\n}",
  "start_lineno" : "217",
  "methodName" : "numberToDateString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/126",
  "prompt" : "import java.util.Calendar\nimport java.math.BigDecimal\nimport androidx.annotation.NonNull\npublic static String numberToDateString(@NonNull Number number) {\r\n    long milliseconds = new BigDecimal(number.toString()).multiply(new BigDecimal(1000)).longValue();\r\n    Calendar calendar = Calendar.getInstance();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "254",
  "ground_truth" : "    }\r\n    return mTitle;\r\n}",
  "context" : "public String getTitle() {\r\n    if (mTitle == null) {\r\n        updateTitleAndPreview();\r\n    }\r\n    return mTitle;\r\n}",
  "start_lineno" : "249",
  "methodName" : "getTitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/127",
  "prompt" : "public String getTitle() {\r\n    if (mTitle == null) {\r\n        updateTitleAndPreview();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "262",
  "ground_truth" : "    if (content == null) {\r\n        return BLANK_CONTENT;\r\n    }\r\n    return (String) content;\r\n}",
  "context" : "public String getContent() {\r\n    Object content = getProperty(CONTENT_PROPERTY);\r\n    if (content == null) {\r\n        return BLANK_CONTENT;\r\n    }\r\n    return (String) content;\r\n}",
  "start_lineno" : "256",
  "methodName" : "getContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/128",
  "prompt" : "import com.automattic.simplenote.R\npublic String getContent() {\r\n    Object content = getProperty(CONTENT_PROPERTY);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "268",
  "ground_truth" : "    mContentPreview = null;\r\n    setProperty(CONTENT_PROPERTY, content);\r\n}",
  "context" : "public void setContent(String content) {\r\n    mTitle = null;\r\n    mContentPreview = null;\r\n    setProperty(CONTENT_PROPERTY, content);\r\n}",
  "start_lineno" : "264",
  "methodName" : "setContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/129",
  "prompt" : "public void setContent(String content) {\r\n    mTitle = null;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "275",
  "ground_truth" : "    }\r\n    return mContentPreview;\r\n}",
  "context" : "public String getContentPreview() {\r\n    if (mContentPreview == null) {\r\n        updateTitleAndPreview();\r\n    }\r\n    return mContentPreview;\r\n}",
  "start_lineno" : "270",
  "methodName" : "getContentPreview",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/130",
  "prompt" : "public String getContentPreview() {\r\n    if (mContentPreview == null) {\r\n        updateTitleAndPreview();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "308",
  "ground_truth" : "    if (TextUtils.isEmpty(urlCode)) {\r\n        return \"\";\r\n    }\r\n    return PUBLISH_URL + urlCode;\r\n}",
  "context" : "public String getPublishedUrl() {\r\n    String urlCode = (String) getProperty(PUBLISH_URL_PROPERTY);\r\n    if (TextUtils.isEmpty(urlCode)) {\r\n        return \"\";\r\n    }\r\n    return PUBLISH_URL + urlCode;\r\n}",
  "start_lineno" : "301",
  "methodName" : "getPublishedUrl",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/131",
  "prompt" : "import com.automattic.simplenote.R\npublic String getPublishedUrl() {\r\n    String urlCode = (String) getProperty(PUBLISH_URL_PROPERTY);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "317",
  "ground_truth" : "        if (tagLower.equals(tagName.toLowerCase()))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
  "context" : "public boolean hasTag(String tag) {\r\n    List<String> tags = getTags();\r\n    String tagLower = tag.toLowerCase();\r\n    for (String tagName : tags) {\r\n        if (tagLower.equals(tagName.toLowerCase()))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "310",
  "methodName" : "hasTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/132",
  "prompt" : "import java.util.List\npublic boolean hasTag(String tag) {\r\n    List<String> tags = getTags();\r\n    String tagLower = tag.toLowerCase();\r\n    for (String tagName : tags) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "345",
  "ground_truth" : "        if (!tag.equals(\"\"))\r\n            tagList.add(tag);\r\n    }\r\n    return tagList;\r\n}",
  "context" : "public List<String> getTags() {\r\n    JSONArray tags = (JSONArray) getProperty(TAGS_PROPERTY);\r\n    if (tags == null) {\r\n        tags = new JSONArray();\r\n        setProperty(TAGS_PROPERTY, \"\");\r\n    }\r\n    int length = tags.length();\r\n    List<String> tagList = new ArrayList<>(length);\r\n    if (length == 0)\r\n        return tagList;\r\n    for (int i = 0; i < length; i++) {\r\n        String tag = tags.optString(i);\r\n        if (!tag.equals(\"\"))\r\n            tagList.add(tag);\r\n    }\r\n    return tagList;\r\n}",
  "start_lineno" : "323",
  "methodName" : "getTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/133",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport org.json.JSONArray\nimport com.automattic.simplenote.R\npublic List<String> getTags() {\r\n    JSONArray tags = (JSONArray) getProperty(TAGS_PROPERTY);\r\n    if (tags == null) {\r\n        tags = new JSONArray();\r\n        setProperty(TAGS_PROPERTY, \"\");\r\n    }\r\n    int length = tags.length();\r\n    List<String> tagList = new ArrayList<>(length);\r\n    if (length == 0)\r\n        return tagList;\r\n    for (int i = 0; i < length; i++) {\r\n        String tag = tags.optString(i);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "360",
  "ground_truth" : "    }\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}",
  "context" : "public void addTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    // Avoid adding tags with the same canonical name\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r\n    if (tagsMatched.isEmpty()) {\r\n        tags.add(tagName);\r\n    }\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}",
  "start_lineno" : "347",
  "methodName" : "addTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/134",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.utils.TagUtils\npublic void addTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    // Avoid adding tags with the same canonical name\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r\n    if (tagsMatched.isEmpty()) {\r\n        tags.add(tagName);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "372",
  "ground_truth" : "    tags.removeAll(tagsMatched);\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}",
  "context" : "public void removeTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r\n    tags.removeAll(tagsMatched);\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}",
  "start_lineno" : "362",
  "methodName" : "removeTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/135",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.utils.TagUtils\npublic void removeTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "395",
  "ground_truth" : "        }\r\n        tagString.append(tag);\r\n    }\r\n    return tagString;\r\n}",
  "context" : "/**\r\n * String of tags delimited by a space\r\n */\r\npublic CharSequence getTagString() {\r\n    StringBuilder tagString = new StringBuilder();\r\n    List<String> tags = getTags();\r\n    for (String tag : tags) {\r\n        if (tagString.length() > 0) {\r\n            tagString.append(SPACE);\r\n        }\r\n        tagString.append(tag);\r\n    }\r\n    return tagString;\r\n}",
  "start_lineno" : "385",
  "methodName" : "getTagString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/136",
  "prompt" : "import java.util.List\n/**\r\n * String of tags delimited by a space\r\n */\r\npublic CharSequence getTagString() {\r\n    StringBuilder tagString = new StringBuilder();\r\n    List<String> tags = getTags();\r\n    for (String tag : tags) {\r\n        if (tagString.length() > 0) {\r\n            tagString.append(SPACE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "446",
  "ground_truth" : "        tags = new JSONArray();\r\n        setProperty(SYSTEM_TAGS_PROPERTY, tags);\r\n    }\r\n    return tags;\r\n}",
  "context" : "public JSONArray getSystemTags() {\r\n    JSONArray tags = (JSONArray) getProperty(SYSTEM_TAGS_PROPERTY);\r\n    if (tags == null) {\r\n        tags = new JSONArray();\r\n        setProperty(SYSTEM_TAGS_PROPERTY, tags);\r\n    }\r\n    return tags;\r\n}",
  "start_lineno" : "439",
  "methodName" : "getSystemTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/137",
  "prompt" : "import org.json.JSONArray\nimport com.automattic.simplenote.R\npublic JSONArray getSystemTags() {\r\n    JSONArray tags = (JSONArray) getProperty(SYSTEM_TAGS_PROPERTY);\r\n    if (tags == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "459",
  "ground_truth" : "    } else {\r\n        // Simperium-iOS sets booleans as integer values (0 or 1)\r\n        return deleted instanceof Number && ((Number) deleted).intValue() != 0;\r\n    }\r\n}",
  "context" : "public Boolean isDeleted() {\r\n    Object deleted = getProperty(DELETED_PROPERTY);\r\n    if (deleted == null) {\r\n        return false;\r\n    }\r\n    if (deleted instanceof Boolean) {\r\n        return (Boolean) deleted;\r\n    } else {\r\n        // Simperium-iOS sets booleans as integer values (0 or 1)\r\n        return deleted instanceof Number && ((Number) deleted).intValue() != 0;\r\n    }\r\n}",
  "start_lineno" : "448",
  "methodName" : "isDeleted",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/138",
  "prompt" : "import com.automattic.simplenote.R\npublic Boolean isDeleted() {\r\n    Object deleted = getProperty(DELETED_PROPERTY);\r\n    if (deleted == null) {\r\n        return false;\r\n    }\r\n    if (deleted instanceof Boolean) {\r\n        return (Boolean) deleted;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "479",
  "ground_truth" : "        addSystemTag(MARKDOWN_TAG);\r\n    } else {\r\n        removeSystemTag(MARKDOWN_TAG);\r\n    }\r\n}",
  "context" : "public void setMarkdownEnabled(boolean isMarkdownEnabled) {\r\n    if (isMarkdownEnabled) {\r\n        addSystemTag(MARKDOWN_TAG);\r\n    } else {\r\n        removeSystemTag(MARKDOWN_TAG);\r\n    }\r\n}",
  "start_lineno" : "473",
  "methodName" : "setMarkdownEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/139",
  "prompt" : "public void setMarkdownEnabled(boolean isMarkdownEnabled) {\r\n    if (isMarkdownEnabled) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "497",
  "ground_truth" : "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "public boolean hasCollaborators() {\r\n    for (String tag : getTags()) {\r\n        if (StrUtils.isEmail(tag)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "489",
  "methodName" : "hasCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/140",
  "prompt" : "import com.automattic.simplenote.utils.StrUtils\npublic boolean hasCollaborators() {\r\n    for (String tag : getTags()) {\r\n        if (StrUtils.isEmail(tag)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "505",
  "ground_truth" : "        addSystemTag(PINNED_TAG);\r\n    } else {\r\n        removeSystemTag(PINNED_TAG);\r\n    }\r\n}",
  "context" : "public void setPinned(boolean isPinned) {\r\n    if (isPinned) {\r\n        addSystemTag(PINNED_TAG);\r\n    } else {\r\n        removeSystemTag(PINNED_TAG);\r\n    }\r\n}",
  "start_lineno" : "499",
  "methodName" : "setPinned",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/141",
  "prompt" : "public void setPinned(boolean isPinned) {\r\n    if (isPinned) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "517",
  "ground_truth" : "        addSystemTag(PREVIEW_TAG);\r\n    } else {\r\n        removeSystemTag(PREVIEW_TAG);\r\n    }\r\n}",
  "context" : "public void setPreviewEnabled(boolean isPreviewEnabled) {\r\n    if (isPreviewEnabled) {\r\n        addSystemTag(PREVIEW_TAG);\r\n    } else {\r\n        removeSystemTag(PREVIEW_TAG);\r\n    }\r\n}",
  "start_lineno" : "511",
  "methodName" : "setPreviewEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/142",
  "prompt" : "public void setPreviewEnabled(boolean isPreviewEnabled) {\r\n    if (isPreviewEnabled) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "529",
  "ground_truth" : "        addSystemTag(PUBLISHED_TAG);\r\n    } else {\r\n        removeSystemTag(PUBLISHED_TAG);\r\n    }\r\n}",
  "context" : "public void setPublished(boolean isPublished) {\r\n    if (isPublished) {\r\n        addSystemTag(PUBLISHED_TAG);\r\n    } else {\r\n        removeSystemTag(PUBLISHED_TAG);\r\n    }\r\n}",
  "start_lineno" : "523",
  "methodName" : "setPublished",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/143",
  "prompt" : "public void setPublished(boolean isPublished) {\r\n    if (isPublished) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "544",
  "ground_truth" : "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "private boolean hasSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag))\r\n        return false;\r\n    JSONArray tags = getSystemTags();\r\n    int length = tags.length();\r\n    for (int i = 0; i < length; i++) {\r\n        if (tags.optString(i).equals(tag)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "531",
  "methodName" : "hasSystemTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/144",
  "prompt" : "import org.json.JSONArray\nimport android.text.TextUtils\nprivate boolean hasSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag))\r\n        return false;\r\n    JSONArray tags = getSystemTags();\r\n    int length = tags.length();\r\n    for (int i = 0; i < length; i++) {\r\n        if (tags.optString(i).equals(tag)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "555",
  "ground_truth" : "    // Ensure we don't add the same tag again\r\n    if (!hasSystemTag(tag)) {\r\n        getSystemTags().put(tag);\r\n    }\r\n}",
  "context" : "private void addSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r\n    // Ensure we don't add the same tag again\r\n    if (!hasSystemTag(tag)) {\r\n        getSystemTags().put(tag);\r\n    }\r\n}",
  "start_lineno" : "546",
  "methodName" : "addSystemTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/145",
  "prompt" : "import android.text.TextUtils\nprivate void addSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "576",
  "ground_truth" : "    } catch (JSONException e) {\r\n        // could not update pinned setting\r\n    }\r\n    setProperty(SYSTEM_TAGS_PROPERTY, newTags);\r\n}",
  "context" : "private void removeSystemTag(String tag) {\r\n    if (!hasSystemTag(tag)) {\r\n        return;\r\n    }\r\n    JSONArray tags = getSystemTags();\r\n    JSONArray newTags = new JSONArray();\r\n    int length = tags.length();\r\n    try {\r\n        for (int i = 0; i < length; i++) {\r\n            Object val = tags.get(i);\r\n            if (!val.equals(tag))\r\n                newTags.put(val);\r\n        }\r\n    } catch (JSONException e) {\r\n        // could not update pinned setting\r\n    }\r\n    setProperty(SYSTEM_TAGS_PROPERTY, newTags);\r\n}",
  "start_lineno" : "557",
  "methodName" : "removeSystemTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/146",
  "prompt" : "import org.json.JSONArray\nprivate void removeSystemTag(String tag) {\r\n    if (!hasSystemTag(tag)) {\r\n        return;\r\n    }\r\n    JSONArray tags = getSystemTags();\r\n    JSONArray newTags = new JSONArray();\r\n    int length = tags.length();\r\n    try {\r\n        for (int i = 0; i < length; i++) {\r\n            Object val = tags.get(i);\r\n            if (!val.equals(tag))\r\n                newTags.put(val);\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"note\";\npublic static final String MARKDOWN_TAG = \"markdown\";\npublic static final String PINNED_TAG = \"pinned\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PREVIEW_TAG = \"preview\";\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String NEW_LINE = \"\\n\";\npublic static final String CONTENT_PROPERTY = \"content\";\npublic static final String KEY_PROPERTY = \"key\";\npublic static final String TAGS_PROPERTY = \"tags\";\npublic static final String SYSTEM_TAGS_PROPERTY = \"systemTags\";\npublic static final String CREATION_DATE_PROPERTY = \"creationDate\";\npublic static final String MODIFICATION_DATE_PROPERTY = \"modificationDate\";\npublic static final String SHARE_URL_PROPERTY = \"shareURL\";\npublic static final String PUBLISH_URL_PROPERTY = \"publishURL\";\npublic static final String DELETED_PROPERTY = \"deleted\";\npublic static final String TITLE_INDEX_NAME = \"title\";\npublic static final String CONTENT_PREVIEW_INDEX_NAME = \"contentPreview\";\npublic static final String PINNED_INDEX_NAME = \"pinned\";\npublic static final String MODIFIED_INDEX_NAME = \"modified\";\npublic static final String CREATED_INDEX_NAME = \"created\";\npublic static final String MATCHED_TITLE_INDEX_NAME = \"matchedTitle\";\npublic static final String MATCHED_CONTENT_INDEX_NAME = \"matchedContent\";\npublic static final String PUBLISH_URL = \"http://simp.ly/p/\";\nstatic public final String[] FULL_TEXT_INDEXES = new String[] { Note.TITLE_INDEX_NAME, Note.CONTENT_PROPERTY };\nprivate static final String BLANK_CONTENT = \"\";\nprivate static final String SPACE = \" \";\nprivate static final int MAX_PREVIEW_CHARS = 300;\nprotected String mTitle = null;\nprotected String mContentPreview = null;\nprotected static NoteIndexer sNoteIndexer = new NoteIndexer();\nprotected static NoteFullTextIndexer sFullTextIndexer = new NoteFullTextIndexer();",
  "app_type" : "notes",
  "end_lineno" : "623",
  "ground_truth" : "    note.mTitle = null;\r\n    note.mContentPreview = null;\r\n}",
  "context" : "public void update(Note note, JSONObject properties) {\r\n    note.setProperties(properties);\r\n    note.mTitle = null;\r\n    note.mContentPreview = null;\r\n}",
  "start_lineno" : "619",
  "methodName" : "update",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java",
  "task_id" : "simplenote-android/147",
  "prompt" : "import org.json.JSONObject\npublic void update(Note note, JSONObject properties) {\r\n    note.setProperties(properties);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Note> mNotesBucket;",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "    indexes.add(new Index(Tag.NOTE_COUNT_INDEX_NAME, count));\r\n    return indexes;\r\n}",
  "context" : "@Override\r\npublic List<Index> index(Tag tag) {\r\n    List<Index> indexes = new ArrayList<>(1);\r\n    int count = Note.allInTag(mNotesBucket, tag.getSimperiumKey()).count();\r\n    indexes.add(new Index(Tag.NOTE_COUNT_INDEX_NAME, count));\r\n    return indexes;\r\n}",
  "start_lineno" : "18",
  "methodName" : "index",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteCountIndexer.java",
  "task_id" : "simplenote-android/148",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.BucketSchema.Index\nimport com.simperium.client.Bucket\n@Override\r\npublic List<Index> index(Tag tag) {\r\n    List<Index> indexes = new ArrayList<>(1);\r\n    int count = Note.allInTag(mNotesBucket, tag.getSimperiumKey()).count();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "@SuppressWarnings(\"unused\")\r\nstatic public final String COMMA = \", \";\nstatic public final String[] INDEXES = Note.FULL_TEXT_INDEXES;",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "    values.put(INDEXES[1], note.getContent());\r\n    return values;\r\n}",
  "context" : "@Override\r\npublic Map<String, String> index(String[] keys, Note note) {\r\n    Map<String, String> values = new HashMap<>(keys.length);\r\n    values.put(INDEXES[0], note.getTitle());\r\n    values.put(INDEXES[1], note.getContent());\r\n    return values;\r\n}",
  "start_lineno" : "14",
  "methodName" : "index",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteFullTextIndexer.java",
  "task_id" : "simplenote-android/149",
  "prompt" : "import java.util.Map\nimport java.util.HashMap\n@Override\r\npublic Map<String, String> index(String[] keys, Note note) {\r\n    Map<String, String> values = new HashMap<>(keys.length);\r\n    values.put(INDEXES[0], note.getTitle());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "22",
  "ground_truth" : "    indexes.add(new Index(Note.TITLE_INDEX_NAME, note.getTitle()));\r\n    indexes.add(new Index(Note.MODIFIED_INDEX_NAME, note.getModificationDate().getTimeInMillis()));\r\n    indexes.add(new Index(Note.CREATED_INDEX_NAME, note.getCreationDate().getTimeInMillis()));\r\n    return indexes;\r\n}",
  "context" : "@Override\r\npublic List<Index> index(Note note) {\r\n    List<Index> indexes = new ArrayList<>();\r\n    indexes.add(new Index(Note.PINNED_INDEX_NAME, note.isPinned()));\r\n    indexes.add(new Index(Note.CONTENT_PREVIEW_INDEX_NAME, note.getContentPreview()));\r\n    indexes.add(new Index(Note.TITLE_INDEX_NAME, note.getTitle()));\r\n    indexes.add(new Index(Note.MODIFIED_INDEX_NAME, note.getModificationDate().getTimeInMillis()));\r\n    indexes.add(new Index(Note.CREATED_INDEX_NAME, note.getCreationDate().getTimeInMillis()));\r\n    return indexes;\r\n}",
  "start_lineno" : "11",
  "methodName" : "index",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteIndexer.java",
  "task_id" : "simplenote-android/150",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.BucketSchema.Index\n@Override\r\npublic List<Index> index(Note note) {\r\n    List<Index> indexes = new ArrayList<>();\r\n    indexes.add(new Index(Note.PINNED_INDEX_NAME, note.isPinned()));\r\n    indexes.add(new Index(Note.CONTENT_PREVIEW_INDEX_NAME, note.getContentPreview()));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mTagsBucket;",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "        } catch (BucketObjectNameInvalid e) {\r\n            Log.e(\"Simplenote.NoteTagger\", \"Invalid tag name \" + \"\\\"\" + name + \"\\\"\", e);\r\n        }\r\n    }\r\n}",
  "context" : "/*\r\n    * When a note is saved check its array of tags to make sure there is a corresponding tag\r\n    * object and create one if necessary. Re-save all tags so their indexes are updated.\r\n    * */\r\n@Override\r\npublic void onSaveObject(Bucket<Note> bucket, Note note) {\r\n    // make sure we have tags\r\n    List<String> tags = note.getTags();\r\n    for (String name : tags) {\r\n        try {\r\n            TagUtils.createTagIfMissing(mTagsBucket, name);\r\n        } catch (BucketObjectNameInvalid e) {\r\n            Log.e(\"Simplenote.NoteTagger\", \"Invalid tag name \" + \"\\\"\" + name + \"\\\"\", e);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "26",
  "methodName" : "onSaveObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteTagger.java",
  "task_id" : "simplenote-android/151",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagUtils\n/*\r\n    * When a note is saved check its array of tags to make sure there is a corresponding tag\r\n    * object and create one if necessary. Re-save all tags so their indexes are updated.\r\n    * */\r\n@Override\r\npublic void onSaveObject(Bucket<Note> bucket, Note note) {\r\n    // make sure we have tags\r\n    List<String> tags = note.getTags();\r\n    for (String name : tags) {\r\n        try {\r\n            TagUtils.createTagIfMissing(mTagsBucket, name);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "    } else {\r\n        // Simperium-iOS sets booleans as integer values (0 or 1)\r\n        return isEnabled instanceof Integer && ((Integer) isEnabled) > 0;\r\n    }\r\n}",
  "context" : "public boolean getAnalyticsEnabled() {\r\n    Object isEnabled = getProperty(ANALYTICS_ENABLED_KEY);\r\n    if (isEnabled == null) {\r\n        return true;\r\n    }\r\n    if (isEnabled instanceof Boolean) {\r\n        return (Boolean) isEnabled;\r\n    } else {\r\n        // Simperium-iOS sets booleans as integer values (0 or 1)\r\n        return isEnabled instanceof Integer && ((Integer) isEnabled) > 0;\r\n    }\r\n}",
  "start_lineno" : "29",
  "methodName" : "getAnalyticsEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/152",
  "prompt" : "public boolean getAnalyticsEnabled() {\r\n    Object isEnabled = getProperty(ANALYTICS_ENABLED_KEY);\r\n    if (isEnabled == null) {\r\n        return true;\r\n    }\r\n    if (isEnabled instanceof Boolean) {\r\n        return (Boolean) isEnabled;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "        getProperties().put(ANALYTICS_ENABLED_KEY, enabled);\r\n    } catch (JSONException e) {\r\n        e.printStackTrace();\r\n    }\r\n}",
  "context" : "public void setAnalyticsEnabled(boolean enabled) {\r\n    try {\r\n        getProperties().put(ANALYTICS_ENABLED_KEY, enabled);\r\n    } catch (JSONException e) {\r\n        e.printStackTrace();\r\n    }\r\n}",
  "start_lineno" : "64",
  "methodName" : "setAnalyticsEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/153",
  "prompt" : "public void setAnalyticsEnabled(boolean enabled) {\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "    }\r\n    setProperty(RECENT_SEARCHES_KEY, new JSONArray(recents));\r\n}",
  "context" : "public void setRecentSearches(List<String> recents) {\r\n    if (recents == null) {\r\n        recents = new ArrayList<>();\r\n    }\r\n    setProperty(RECENT_SEARCHES_KEY, new JSONArray(recents));\r\n}",
  "start_lineno" : "72",
  "methodName" : "setRecentSearches",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/154",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\npublic void setRecentSearches(List<String> recents) {\r\n    if (recents == null) {\r\n        recents = new ArrayList<>();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "85",
  "ground_truth" : "    setSubscriptionDate(purchaseTime);\r\n    save();\r\n}",
  "context" : "public void setActiveSubscription(long purchaseTime) {\r\n    setSubscriptionPlatform(Preferences.SubscriptionPlatform.ANDROID);\r\n    setSubscriptionLevel(Preferences.SubscriptionLevel.SUSTAINER);\r\n    setSubscriptionDate(purchaseTime);\r\n    save();\r\n}",
  "start_lineno" : "80",
  "methodName" : "setActiveSubscription",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/155",
  "prompt" : "public void setActiveSubscription(long purchaseTime) {\r\n    setSubscriptionPlatform(Preferences.SubscriptionPlatform.ANDROID);\r\n    setSubscriptionLevel(Preferences.SubscriptionLevel.SUSTAINER);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "92",
  "ground_truth" : "    setSubscriptionDate(null);\r\n    save();\r\n}",
  "context" : "public void removeActiveSubscription() {\r\n    setSubscriptionPlatform(SubscriptionPlatform.NONE);\r\n    setSubscriptionLevel(SubscriptionLevel.NONE);\r\n    setSubscriptionDate(null);\r\n    save();\r\n}",
  "start_lineno" : "87",
  "methodName" : "removeActiveSubscription",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/156",
  "prompt" : "public void removeActiveSubscription() {\r\n    setSubscriptionPlatform(SubscriptionPlatform.NONE);\r\n    setSubscriptionLevel(SubscriptionLevel.NONE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "105",
  "ground_truth" : "        return SubscriptionPlatform.fromString((String) subscriptionPlatform);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
  "context" : "public SubscriptionPlatform getCurrentSubscriptionPlatform() {\r\n    Object subscriptionPlatform = getProperty(SUBSCRIPTION_PLATFORM_KEY);\r\n    if (subscriptionPlatform == null) {\r\n        return null;\r\n    }\r\n    if (subscriptionPlatform instanceof String) {\r\n        return SubscriptionPlatform.fromString((String) subscriptionPlatform);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
  "start_lineno" : "94",
  "methodName" : "getCurrentSubscriptionPlatform",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/157",
  "prompt" : "public SubscriptionPlatform getCurrentSubscriptionPlatform() {\r\n    Object subscriptionPlatform = getProperty(SUBSCRIPTION_PLATFORM_KEY);\r\n    if (subscriptionPlatform == null) {\r\n        return null;\r\n    }\r\n    if (subscriptionPlatform instanceof String) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "163",
  "ground_truth" : "            }\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "public static SubscriptionPlatform fromString(String platformName) {\r\n    if (platformName != null) {\r\n        for (SubscriptionPlatform platform : SubscriptionPlatform.values()) {\r\n            if (platformName.equalsIgnoreCase(platform.getName())) {\r\n                return platform;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "154",
  "methodName" : "fromString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/158",
  "prompt" : "public static SubscriptionPlatform fromString(String platformName) {\r\n    if (platformName != null) {\r\n        for (SubscriptionPlatform platform : SubscriptionPlatform.values()) {\r\n            if (platformName.equalsIgnoreCase(platform.getName())) {\r\n                return platform;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String BUCKET_NAME = \"preferences\";\npublic static final String PREFERENCES_OBJECT_KEY = \"preferences-key\";\npublic static final int MAX_RECENT_SEARCHES = 5;\nprivate static final String ANALYTICS_ENABLED_KEY = \"analytics_enabled\";\nprivate static final String RECENT_SEARCHES_KEY = \"recent_searches\";\nprivate static final String SUBSCRIPTION_LEVEL_KEY = \"subscription_level\";\nprivate static final String SUBSCRIPTION_PLATFORM_KEY = \"subscription_platform\";\nprivate static final String SUBSCRIPTION_DATE_KEY = \"subscription_date\";\nprivate final String platformName;\nprivate final String subscriptionLevel;",
  "app_type" : "notes",
  "end_lineno" : "190",
  "ground_truth" : "            }\r\n        }\r\n    }\r\n    return null;\r\n}",
  "context" : "public static SubscriptionLevel fromString(String level) {\r\n    if (level != null) {\r\n        for (SubscriptionLevel subscriptionLevel : SubscriptionLevel.values()) {\r\n            if (level.equalsIgnoreCase(subscriptionLevel.getName())) {\r\n                return subscriptionLevel;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "181",
  "methodName" : "fromString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java",
  "task_id" : "simplenote-android/159",
  "prompt" : "public static SubscriptionLevel fromString(String level) {\r\n    if (level != null) {\r\n        for (SubscriptionLevel subscriptionLevel : SubscriptionLevel.values()) {\r\n            if (level.equalsIgnoreCase(subscriptionLevel.getName())) {\r\n                return subscriptionLevel;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String BUCKET_NAME = \"tag\";\npublic static final String NOTE_COUNT_INDEX_NAME = \"note_count\";\npublic static final String NAME_PROPERTY = \"name\";\nprivate static final String INDEX_PROPERTY = \"index\";\nprotected String name = \"\";",
  "app_type" : "notes",
  "end_lineno" : "47",
  "ground_truth" : "    String lowerCaseOrderBy = String.format(Locale.US, \"LOWER(%s)\", NAME_PROPERTY);\r\n    return bucket.query().include(NAME_PROPERTY).order(lowerCaseOrderBy);\r\n}",
  "context" : "public static Query<Tag> allSortedAlphabetically(Bucket<Tag> bucket) {\r\n    String lowerCaseOrderBy = String.format(Locale.US, \"LOWER(%s)\", NAME_PROPERTY);\r\n    return bucket.query().include(NAME_PROPERTY).order(lowerCaseOrderBy);\r\n}",
  "start_lineno" : "44",
  "methodName" : "allSortedAlphabetically",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java",
  "task_id" : "simplenote-android/160",
  "prompt" : "import com.simperium.client.Query\nimport com.simperium.client.Bucket\npublic static Query<Tag> allSortedAlphabetically(Bucket<Tag> bucket) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String BUCKET_NAME = \"tag\";\npublic static final String NOTE_COUNT_INDEX_NAME = \"note_count\";\npublic static final String NAME_PROPERTY = \"name\";\nprivate static final String INDEX_PROPERTY = \"index\";\nprotected String name = \"\";",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "    if (name == null) {\r\n        name = getSimperiumKey();\r\n    }\r\n    return name;\r\n}",
  "context" : "public String getName() {\r\n    String name = (String) getProperty(NAME_PROPERTY);\r\n    if (name == null) {\r\n        name = getSimperiumKey();\r\n    }\r\n    return name;\r\n}",
  "start_lineno" : "49",
  "methodName" : "getName",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java",
  "task_id" : "simplenote-android/161",
  "prompt" : "public String getName() {\r\n    String name = (String) getProperty(NAME_PROPERTY);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String BUCKET_NAME = \"tag\";\npublic static final String NOTE_COUNT_INDEX_NAME = \"note_count\";\npublic static final String NAME_PROPERTY = \"name\";\nprivate static final String INDEX_PROPERTY = \"index\";\nprotected String name = \"\";",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "    }\r\n    setProperty(NAME_PROPERTY, name);\r\n}",
  "context" : "public void setName(String name) {\r\n    if (name == null) {\r\n        name = \"\";\r\n    }\r\n    setProperty(NAME_PROPERTY, name);\r\n}",
  "start_lineno" : "57",
  "methodName" : "setName",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java",
  "task_id" : "simplenote-android/162",
  "prompt" : "public void setName(String name) {\r\n    if (name == null) {\r\n        name = \"\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String BUCKET_NAME = \"tag\";\npublic static final String NOTE_COUNT_INDEX_NAME = \"note_count\";\npublic static final String NAME_PROPERTY = \"name\";\nprivate static final String INDEX_PROPERTY = \"index\";\nprotected String name = \"\";",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "        getProperties().remove(\"index\");\r\n    } else {\r\n        setProperty(\"index\", tagIndex);\r\n    }\r\n}",
  "context" : "public void setIndex(Integer tagIndex) {\r\n    if (tagIndex == null) {\r\n        getProperties().remove(\"index\");\r\n    } else {\r\n        setProperty(\"index\", tagIndex);\r\n    }\r\n}",
  "start_lineno" : "72",
  "methodName" : "setIndex",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java",
  "task_id" : "simplenote-android/163",
  "prompt" : "public void setIndex(Integer tagIndex) {\r\n    if (tagIndex == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "263",
  "ground_truth" : "    if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {\r\n        AppLockManager.getInstance().getAppLock().setExemptActivities(null);\r\n    }\r\n    AppLog.add(Type.SCREEN, \"Paused (NoteEditorActivity)\");\r\n}",
  "context" : "@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {\r\n        AppLockManager.getInstance().getAppLock().setExemptActivities(null);\r\n    }\r\n    AppLog.add(Type.SCREEN, \"Paused (NoteEditorActivity)\");\r\n}",
  "start_lineno" : "254",
  "methodName" : "onPause",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/164",
  "prompt" : "@Override\r\nprotected void onPause() {\r\n    super.onPause();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "271",
  "ground_truth" : "    AppLog.add(Type.NETWORK, NetworkUtils.getNetworkInfo(NoteEditorActivity.this));\r\n    AppLog.add(Type.SCREEN, \"Resumed (NoteEditorActivity)\");\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    disableScreenshotsIfLocked(this);\r\n    AppLog.add(Type.NETWORK, NetworkUtils.getNetworkInfo(NoteEditorActivity.this));\r\n    AppLog.add(Type.SCREEN, \"Resumed (NoteEditorActivity)\");\r\n}",
  "start_lineno" : "265",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/165",
  "prompt" : "import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.utils.DisplayUtils.disableScreenshotsIfLocked\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    disableScreenshotsIfLocked(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "405",
  "ground_truth" : "    mTabLayout.setVisibility(View.GONE);\r\n    mViewPager.setPagingEnabled(false);\r\n}",
  "context" : "public void hideTabs() {\r\n    mTabLayout.setVisibility(View.GONE);\r\n    mViewPager.setPagingEnabled(false);\r\n}",
  "start_lineno" : "402",
  "methodName" : "hideTabs",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/166",
  "prompt" : "public void hideTabs() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "414",
  "ground_truth" : "    mTabLayout.setVisibility(View.VISIBLE);\r\n    mViewPager.setPagingEnabled(true);\r\n}",
  "context" : "public void showTabs() {\r\n    mTabLayout.setVisibility(View.VISIBLE);\r\n    mViewPager.setPagingEnabled(true);\r\n}",
  "start_lineno" : "411",
  "methodName" : "showTabs",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/167",
  "prompt" : "public void showTabs() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "420",
  "ground_truth" : "        mSearchMatchBar.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n    }\r\n}",
  "context" : "public void setSearchMatchBarVisible(boolean isVisible) {\r\n    if (mSearchMatchBar != null) {\r\n        mSearchMatchBar.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n    }\r\n}",
  "start_lineno" : "416",
  "methodName" : "setSearchMatchBarVisible",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/168",
  "prompt" : "public void setSearchMatchBarVisible(boolean isVisible) {\r\n    if (mSearchMatchBar != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "487",
  "ground_truth" : "        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(NoteEditorActivity.this, getString(R.string.previous), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r\n        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(NoteEditorActivity.this, getString(R.string.previous), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "start_lineno" : "479",
  "methodName" : "onLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/169",
  "prompt" : "import android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "522",
  "ground_truth" : "        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(NoteEditorActivity.this, getString(R.string.next), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r\n        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(NoteEditorActivity.this, getString(R.string.next), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "start_lineno" : "514",
  "methodName" : "onLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/170",
  "prompt" : "import android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "553",
  "ground_truth" : "    mButtonPrevious.setEnabled(mSearchMatchIndex > 0);\r\n    mButtonNext.setEnabled(mSearchMatchIndex < mSearchMatchIndexes.length - 1);\r\n}",
  "context" : "private void updateSearchMatchBarStatus() {\r\n    mNumberPosition.setText(String.valueOf(mSearchMatchIndex + 1));\r\n    mNumberTotal.setText(String.valueOf(mSearchMatchIndexes.length));\r\n    mButtonPrevious.setEnabled(mSearchMatchIndex > 0);\r\n    mButtonNext.setEnabled(mSearchMatchIndex < mSearchMatchIndexes.length - 1);\r\n}",
  "start_lineno" : "548",
  "methodName" : "updateSearchMatchBarStatus",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/171",
  "prompt" : "private void updateSearchMatchBarStatus() {\r\n    mNumberPosition.setText(String.valueOf(mSearchMatchIndex + 1));\r\n    mNumberTotal.setText(String.valueOf(mSearchMatchIndexes.length));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String STATE_TAB_EDIT = \"TAB_EDIT\";\nprivate static final String STATE_TAB_PREVIEW = \"TAB_PREVIEW\";\nprivate static final String STATE_MATCHES_INDEX = \"MATCHES_INDEX\";\nprivate static final String STATE_MATCHES_LOCATIONS = \"MATCHES_LOCATIONS\";\nprivate static final int INDEX_TAB_EDIT = 0;\nprivate static final int INDEX_TAB_PREVIEW = 1;\nprivate ImageButton mButtonPrevious;\nprivate ImageButton mButtonNext;\nprivate Note mNote;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate NoteEditorFragmentPagerAdapter mNoteEditorFragmentPagerAdapter;\nprivate NoteEditorViewPager mViewPager;\nprivate RelativeLayout mSearchMatchBar;\nprivate RobotoMediumTextView mNumberPosition;\nprivate RobotoMediumTextView mNumberTotal;\nprivate String mNoteId;\nprivate TabLayout mTabLayout;\nprivate boolean isMarkdownEnabled;\nprivate boolean isPreviewEnabled;\nprivate boolean isSearchMatch;\nprivate int[] mSearchMatchIndexes;\nprivate int mSearchMatchIndex;\nprivate final ArrayList<Fragment> mFragments = new ArrayList<>();\nprivate final ArrayList<String> mTitles = new ArrayList<>();",
  "app_type" : "notes",
  "end_lineno" : "588",
  "ground_truth" : "    mTitles.add(title);\r\n    notifyDataSetChanged();\r\n}",
  "context" : "void addFragment(Fragment fragment, String title) {\r\n    mFragments.add(fragment);\r\n    mTitles.add(title);\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "584",
  "methodName" : "addFragment",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java",
  "task_id" : "simplenote-android/172",
  "prompt" : "import androidx.fragment.app.Fragment\nvoid addFragment(Fragment fragment, String title) {\r\n    mFragments.add(fragment);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "184",
  "ground_truth" : "            mHistoryBottomSheet.dismiss();\r\n            Toast.makeText(getActivity(), R.string.error_history, Toast.LENGTH_LONG).show();\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    requireActivity().runOnUiThread(() -> {\r\n        if (mHistoryBottomSheet.getDialog() != null && mHistoryBottomSheet.getDialog().isShowing() && !mHistoryBottomSheet.isHistoryLoaded()) {\r\n            mHistoryBottomSheet.dismiss();\r\n            Toast.makeText(getActivity(), R.string.error_history, Toast.LENGTH_LONG).show();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "172",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/173",
  "prompt" : "import android.app.Activity\n@Override\r\npublic void run() {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    requireActivity().runOnUiThread(() -> {\r\n        if (mHistoryBottomSheet.getDialog() != null && mHistoryBottomSheet.getDialog().isShowing() && !mHistoryBottomSheet.isHistoryLoaded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "216",
  "ground_truth" : "    // Return false if nothing is done\r\n    return false;\r\n}",
  "context" : "// Called each time the action mode is shown. Always called after onCreateActionMode, but\r\n// may be called multiple times if the mode is invalidated.\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n    // Return false if nothing is done\r\n    return false;\r\n}",
  "start_lineno" : "213",
  "methodName" : "onPrepareActionMode",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/174",
  "prompt" : "import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n// Called each time the action mode is shown. Always called after onCreateActionMode, but\r\n// may be called multiple times if the mode is invalidated.\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "286",
  "ground_truth" : "        mActionMode.setSubtitle(\"\");\r\n        mActionMode = null;\r\n    }\r\n    new Handler().postDelayed(() -> requireActivity().getWindow().setStatusBarColor(getResources().getColor(android.R.color.transparent, requireActivity().getTheme())), requireContext().getResources().getInteger(android.R.integer.config_mediumAnimTime));\r\n}",
  "context" : "// Called when the user exits the action mode\r\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    if (mActionMode != null) {\r\n        mActionMode.setSubtitle(\"\");\r\n        mActionMode = null;\r\n    }\r\n    new Handler().postDelayed(() -> requireActivity().getWindow().setStatusBarColor(getResources().getColor(android.R.color.transparent, requireActivity().getTheme())), requireContext().getResources().getInteger(android.R.integer.config_mediumAnimTime));\r\n}",
  "start_lineno" : "274",
  "methodName" : "onDestroyActionMode",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/175",
  "prompt" : "import androidx.appcompat.view.ActionMode\n// Called when the user exits the action mode\r\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    if (mActionMode != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "302",
  "ground_truth" : "        mNote.setPublished(!mNote.isPublished());\r\n        mNote.save();\r\n        updatePublishedState(false);\r\n    });\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (!isAdded())\r\n        return;\r\n    requireActivity().runOnUiThread(() -> {\r\n        mNote.setPublished(!mNote.isPublished());\r\n        mNote.save();\r\n        updatePublishedState(false);\r\n    });\r\n}",
  "start_lineno" : "292",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/176",
  "prompt" : "import android.app.Activity\n@Override\r\npublic void run() {\r\n    if (!isAdded())\r\n        return;\r\n    requireActivity().runOnUiThread(() -> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "348",
  "ground_truth" : "        return null;\r\n    return activity.getLayoutInflater().inflate(R.layout.autocomplete_list_item, null);\r\n}",
  "context" : "@Override\r\npublic View newView(Context context, Cursor cursor, ViewGroup parent) {\r\n    Activity activity = (Activity) context;\r\n    if (activity == null)\r\n        return null;\r\n    return activity.getLayoutInflater().inflate(R.layout.autocomplete_list_item, null);\r\n}",
  "start_lineno" : "343",
  "methodName" : "newView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/177",
  "prompt" : "import android.view.ViewGroup\nimport android.view.View\nimport android.database.Cursor\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic View newView(Context context, Cursor cursor, ViewGroup parent) {\r\n    Activity activity = (Activity) context;\r\n    if (activity == null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "354",
  "ground_truth" : "    TextView textView = (TextView) view;\r\n    textView.setText(convertToString(cursor));\r\n}",
  "context" : "@Override\r\npublic void bindView(View view, Context context, Cursor cursor) {\r\n    TextView textView = (TextView) view;\r\n    textView.setText(convertToString(cursor));\r\n}",
  "start_lineno" : "350",
  "methodName" : "bindView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/178",
  "prompt" : "import android.view.View\nimport android.database.Cursor\nimport android.content.Context\n@Override\r\npublic void bindView(View view, Context context, Cursor cursor) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "469",
  "ground_truth" : "                ((NestedScrollView) mRootView).scrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n            }\r\n        }, requireContext().getResources().getInteger(android.R.integer.config_mediumAnimTime));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onPageFinished(final WebView view, String url) {\r\n    super.onPageFinished(view, url);\r\n    if (mMarkdown.getVisibility() == View.VISIBLE) {\r\n        new Handler().postDelayed(() -> {\r\n            if (mNote != null && mNote.getSimperiumKey() != null) {\r\n                ((NestedScrollView) mRootView).scrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n            }\r\n        }, requireContext().getResources().getInteger(android.R.integer.config_mediumAnimTime));\r\n    }\r\n}",
  "start_lineno" : "456",
  "methodName" : "onPageFinished",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/179",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.webkit.WebView\nimport android.view.View\nimport android.os.Handler\n@Override\r\npublic void onPageFinished(final WebView view, String url) {\r\n    super.onPageFinished(view, url);\r\n    if (mMarkdown.getVisibility() == View.VISIBLE) {\r\n        new Handler().postDelayed(() -> {\r\n            if (mNote != null && mNote.getSimperiumKey() != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "487",
  "ground_truth" : "    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r\n    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "471",
  "methodName" : "shouldOverrideUrlLoading",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/180",
  "prompt" : "import com.automattic.simplenote.utils.SimplenoteLinkify\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport android.webkit.WebView\nimport android.webkit.WebResourceRequest\nimport android.view.View\nimport android.text.util.Linkify\nimport android.app.Activity\nimport com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\n@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "567",
  "ground_truth" : "        setScroll();\r\n        mRootView.getViewTreeObserver().removeOnPreDrawListener(this);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreDraw() {\r\n    if (mContentEditText.getLayout() != null) {\r\n        setScroll();\r\n        mRootView.getViewTreeObserver().removeOnPreDrawListener(this);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "560",
  "methodName" : "onPreDraw",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/181",
  "prompt" : "import android.text.Layout\n@Override\r\npublic boolean onPreDraw() {\r\n    if (mContentEditText.getLayout() != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "585",
  "ground_truth" : "        return ((NoteEditorActivity) getActivity()).getCurrentSearchMatchIndexLocation();\r\n    }\r\n    int defaultFirstLocation = MatchOffsetHighlighter.getFirstMatchLocation(mContentEditText.getText(), mMatchOffsets);\r\n    return defaultFirstLocation;\r\n}",
  "context" : "private int getFirstSearchMatchLocation() {\r\n    if (getActivity() != null && getActivity() instanceof NoteEditorActivity) {\r\n        return ((NoteEditorActivity) getActivity()).getCurrentSearchMatchIndexLocation();\r\n    }\r\n    int defaultFirstLocation = MatchOffsetHighlighter.getFirstMatchLocation(mContentEditText.getText(), mMatchOffsets);\r\n    return defaultFirstLocation;\r\n}",
  "start_lineno" : "574",
  "methodName" : "getFirstSearchMatchLocation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/182",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.app.Activity\nprivate int getFirstSearchMatchLocation() {\r\n    if (getActivity() != null && getActivity() instanceof NoteEditorActivity) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "630",
  "ground_truth" : "        Layout layout = mContentEditText.getLayout();\r\n        int lineTop = layout.getLineTop(layout.getLineForOffset(location));\r\n        ((NestedScrollView) mRootView).smoothScrollTo(0, lineTop);\r\n    }\r\n}",
  "context" : "public void scrollToMatch(int location) {\r\n    if (isAdded()) {\r\n        // Calculate how far to scroll to bring the match into view\r\n        Layout layout = mContentEditText.getLayout();\r\n        int lineTop = layout.getLineTop(layout.getLineForOffset(location));\r\n        ((NestedScrollView) mRootView).smoothScrollTo(0, lineTop);\r\n    }\r\n}",
  "start_lineno" : "623",
  "methodName" : "scrollToMatch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/183",
  "prompt" : "public void scrollToMatch(int location) {\r\n    if (isAdded()) {\r\n        // Calculate how far to scroll to bring the match into view\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "648",
  "ground_truth" : "        if (mContentEditText.hasFocus()) {\r\n            showSoftKeyboard();\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    checkWebView();\r\n    mIsPaused = false;\r\n    mNotesBucket.addListener(this);\r\n    AppLog.add(Type.SYNC, \"Added note bucket listener (NoteEditorFragment)\");\r\n    mTagInput.setOnTagAddedListener(this);\r\n    if (mContentEditText != null) {\r\n        mContentEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP, PrefUtils.getFontSize(requireContext()));\r\n        if (mContentEditText.hasFocus()) {\r\n            showSoftKeyboard();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "632",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/184",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagsMultiAutoCompleteTextView.OnTagAddedListener\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\nimport android.util.TypedValue\nimport android.content.Context\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    checkWebView();\r\n    mIsPaused = false;\r\n    mNotesBucket.addListener(this);\r\n    AppLog.add(Type.SYNC, \"Added note bucket listener (NoteEditorFragment)\");\r\n    mTagInput.setOnTagAddedListener(this);\r\n    if (mContentEditText != null) {\r\n        mContentEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP, PrefUtils.getFontSize(requireContext()));\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "658",
  "ground_truth" : "    // the editor view.\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown == null && DisplayUtils.isLargeScreenLandscape(requireContext())) {\r\n        requireActivity().recreate();\r\n    }\r\n}",
  "context" : "private void checkWebView() {\r\n    // When a WebView is installed and mMarkdown is null on a large landscape device, a WebView\r\n    // was not installed when the fragment was created.  So, recreate the activity to refresh\r\n    // the editor view.\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown == null && DisplayUtils.isLargeScreenLandscape(requireContext())) {\r\n        requireActivity().recreate();\r\n    }\r\n}",
  "start_lineno" : "650",
  "methodName" : "checkWebView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/185",
  "prompt" : "import android.webkit.WebView\nimport android.view.View\nprivate void checkWebView() {\r\n    // When a WebView is installed and mMarkdown is null on a large landscape device, a WebView\r\n    // was not installed when the fragment was created.  So, recreate the activity to refresh\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "671",
  "ground_truth" : "        if (inputMethodManager != null) {\r\n            inputMethodManager.showSoftInput(mContentEditText, 0);\r\n        }\r\n    }, 100);\r\n}",
  "context" : "private void showSoftKeyboard() {\r\n    new Handler().postDelayed(() -> {\r\n        if (getActivity() == null) {\r\n            return;\r\n        }\r\n        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\r\n        if (inputMethodManager != null) {\r\n            inputMethodManager.showSoftInput(mContentEditText, 0);\r\n        }\r\n    }, 100);\r\n}",
  "start_lineno" : "660",
  "methodName" : "showSoftKeyboard",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/186",
  "prompt" : "import android.view.inputmethod.InputMethodManager\nimport android.os.Handler\nimport android.content.Context\nimport android.app.Activity\nprivate void showSoftKeyboard() {\r\n    new Handler().postDelayed(() -> {\r\n        if (getActivity() == null) {\r\n            return;\r\n        }\r\n        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "707",
  "ground_truth" : "    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Destroyed (NoteEditorFragment)\");\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mNotesBucket.removeListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Destroyed (NoteEditorFragment)\");\r\n}",
  "start_lineno" : "701",
  "methodName" : "onDestroy",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/187",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mNotesBucket.removeListener(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "716",
  "ground_truth" : "        outState.putString(STATE_NOTE_ID, mNote.getSimperiumKey());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (DisplayUtils.isLargeScreenLandscape(getActivity()) && mNote != null) {\r\n        outState.putString(STATE_NOTE_ID, mNote.getSimperiumKey());\r\n    }\r\n}",
  "start_lineno" : "709",
  "methodName" : "onSaveInstanceState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/188",
  "prompt" : "import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\nimport androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (DisplayUtils.isLargeScreenLandscape(getActivity()) && mNote != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "728",
  "ground_truth" : "        return;\r\n    }\r\n    inflater.inflate(R.menu.note_editor, menu);\r\n    MenuCompat.setGroupDividerEnabled(menu, true);\r\n}",
  "context" : "@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n    if (!isAdded() || (!mIsFromWidget && DisplayUtils.isLargeScreenLandscape(getActivity()) && mNoteMarkdownFragment == null)) {\r\n        return;\r\n    }\r\n    inflater.inflate(R.menu.note_editor, menu);\r\n    MenuCompat.setGroupDividerEnabled(menu, true);\r\n}",
  "start_lineno" : "718",
  "methodName" : "onCreateOptionsMenu",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/189",
  "prompt" : "import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nimport android.view.MenuInflater\nimport android.view.Menu\nimport android.app.Activity\n@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n    if (!isAdded() || (!mIsFromWidget && DisplayUtils.isLargeScreenLandscape(getActivity()) && mNoteMarkdownFragment == null)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "821",
  "ground_truth" : "    Intent intent = new Intent(requireActivity(), CollaboratorsActivity.class);\r\n    intent.putExtra(CollaboratorsActivity.NOTE_ID_ARG, mNote.getSimperiumKey());\r\n    startActivity(intent);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_COLLABORATORS_ACCESSED, CATEGORY_NOTE, \"collaborators_ui_accessed\");\r\n}",
  "context" : "private void navigateToCollaborators() {\r\n    if (getActivity() == null || mNote == null) {\r\n        return;\r\n    }\r\n    Intent intent = new Intent(requireActivity(), CollaboratorsActivity.class);\r\n    intent.putExtra(CollaboratorsActivity.NOTE_ID_ARG, mNote.getSimperiumKey());\r\n    startActivity(intent);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_COLLABORATORS_ACCESSED, CATEGORY_NOTE, \"collaborators_ui_accessed\");\r\n}",
  "start_lineno" : "807",
  "methodName" : "navigateToCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/190",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.app.Activity\nprivate void navigateToCollaborators() {\r\n    if (getActivity() == null || mNote == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "892",
  "ground_truth" : "        e.printStackTrace();\r\n        return;\r\n    }\r\n    AnalyticsTracker.track(EDITOR_CHECKLIST_INSERTED, CATEGORY_NOTE, \"toolbar_button\");\r\n}",
  "context" : "public void insertChecklist() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mChecklistMenuItem.getIcon());\r\n    try {\r\n        mContentEditText.insertChecklist();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return;\r\n    }\r\n    AnalyticsTracker.track(EDITOR_CHECKLIST_INSERTED, CATEGORY_NOTE, \"toolbar_button\");\r\n}",
  "start_lineno" : "877",
  "methodName" : "insertChecklist",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/191",
  "prompt" : "import com.automattic.simplenote.utils.DrawableUtils\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.graphics.drawable.Drawable\npublic void insertChecklist() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mChecklistMenuItem.getIcon());\r\n    try {\r\n        mContentEditText.insertChecklist();\r\n    } catch (Exception e) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "901",
  "ground_truth" : "    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacks(mAutoSaveRunnable);\r\n        mAutoSaveHandler.postDelayed(mAutoSaveRunnable, AUTOSAVE_DELAY_MILLIS);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onCheckboxToggled() {\r\n    // Save note (using delay) after toggling a checkbox\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacks(mAutoSaveRunnable);\r\n        mAutoSaveHandler.postDelayed(mAutoSaveRunnable, AUTOSAVE_DELAY_MILLIS);\r\n    }\r\n}",
  "start_lineno" : "894",
  "methodName" : "onCheckboxToggled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/192",
  "prompt" : "@Override\r\npublic void onCheckboxToggled() {\r\n    // Save note (using delay) after toggling a checkbox\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "906",
  "ground_truth" : "    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}",
  "context" : "private void deleteNote() {\r\n    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}",
  "start_lineno" : "903",
  "methodName" : "deleteNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/193",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void deleteNote() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "912",
  "ground_truth" : "        mMarkdown.loadDataWithBaseURL(\"file:///android_asset/\", mCss + \"\", \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "context" : "protected void clearMarkdown() {\r\n    if (mMarkdown != null) {\r\n        mMarkdown.loadDataWithBaseURL(\"file:///android_asset/\", mCss + \"\", \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "start_lineno" : "908",
  "methodName" : "clearMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/194",
  "prompt" : "protected void clearMarkdown() {\r\n    if (mMarkdown != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "920",
  "ground_truth" : "        mMarkdown.setVisibility(View.INVISIBLE);\r\n    } else {\r\n        mError.setVisibility(View.INVISIBLE);\r\n    }\r\n}",
  "context" : "protected void hideMarkdown() {\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown != null) {\r\n        mMarkdown.setVisibility(View.INVISIBLE);\r\n    } else {\r\n        mError.setVisibility(View.INVISIBLE);\r\n    }\r\n}",
  "start_lineno" : "914",
  "methodName" : "hideMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/195",
  "prompt" : "import com.automattic.simplenote.utils.BrowserUtils\nimport android.webkit.WebView\nimport android.view.View\nimport android.content.Context\nprotected void hideMarkdown() {\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "939",
  "ground_truth" : "        if (!isDetached()) {\r\n            requireActivity().invalidateOptionsMenu();\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "context" : "protected void showMarkdown() {\r\n    loadMarkdownData();\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown != null) {\r\n        mMarkdown.setVisibility(View.VISIBLE);\r\n    } else {\r\n        mError.setVisibility(View.VISIBLE);\r\n    }\r\n    new Handler().postDelayed(() -> {\r\n        if (!isDetached()) {\r\n            requireActivity().invalidateOptionsMenu();\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "start_lineno" : "922",
  "methodName" : "showMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/196",
  "prompt" : "import com.automattic.simplenote.utils.BrowserUtils\nimport android.webkit.WebView\nimport android.view.View\nimport android.os.Handler\nimport android.content.Context\nprotected void showMarkdown() {\r\n    loadMarkdownData();\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown != null) {\r\n        mMarkdown.setVisibility(View.VISIBLE);\r\n    } else {\r\n        mError.setVisibility(View.VISIBLE);\r\n    }\r\n    new Handler().postDelayed(() -> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "951",
  "ground_truth" : "        mContentEditText.clearFocus();\r\n        showShareSheet();\r\n        AnalyticsTracker.track(EDITOR_NOTE_CONTENT_SHARED, CATEGORY_NOTE, \"action_bar_share_button\");\r\n    }\r\n}",
  "context" : "public void shareNote() {\r\n    if (mNote != null) {\r\n        mContentEditText.clearFocus();\r\n        showShareSheet();\r\n        AnalyticsTracker.track(EDITOR_NOTE_CONTENT_SHARED, CATEGORY_NOTE, \"action_bar_share_button\");\r\n    }\r\n}",
  "start_lineno" : "941",
  "methodName" : "shareNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/197",
  "prompt" : "import com.automattic.simplenote.models.Note\npublic void shareNote() {\r\n    if (mNote != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "961",
  "ground_truth" : "        showHistorySheet();\r\n    } else {\r\n        Toast.makeText(getActivity(), R.string.error_history, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "public void showHistory() {\r\n    if (mNote != null && mNote.getVersion() > 1) {\r\n        mContentEditText.clearFocus();\r\n        mHistoryTimeoutHandler.postDelayed(mHistoryTimeoutRunnable, HISTORY_TIMEOUT);\r\n        showHistorySheet();\r\n    } else {\r\n        Toast.makeText(getActivity(), R.string.error_history, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "953",
  "methodName" : "showHistory",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/198",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.os.Handler\npublic void showHistory() {\r\n    if (mNote != null && mNote.getVersion() > 1) {\r\n        mContentEditText.clearFocus();\r\n        mHistoryTimeoutHandler.postDelayed(mHistoryTimeoutRunnable, HISTORY_TIMEOUT);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "971",
  "ground_truth" : "        mContentEditText.clearFocus();\r\n        saveNote();\r\n        showInfoSheet();\r\n    }\r\n}",
  "context" : "public void showInfo() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mInformationMenuItem.getIcon());\r\n    if (mNote != null) {\r\n        mContentEditText.clearFocus();\r\n        saveNote();\r\n        showInfoSheet();\r\n    }\r\n}",
  "start_lineno" : "963",
  "methodName" : "showInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/199",
  "prompt" : "import com.automattic.simplenote.utils.DrawableUtils\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.graphics.drawable.Drawable\npublic void showInfo() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mInformationMenuItem.getIcon());\r\n    if (mNote != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "983",
  "ground_truth" : "    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());\r\n    SharedPreferences.Editor editor = prefs.edit();\r\n    editor.putBoolean(PrefUtils.PREF_MARKDOWN_ENABLED, isChecked);\r\n    editor.apply();\r\n}",
  "context" : "private void setMarkdown(boolean isChecked) {\r\n    mIsMarkdownEnabled = isChecked;\r\n    showMarkdownActionOrTabs();\r\n    saveNote();\r\n    // Set preference so that next new note will have markdown enabled.\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());\r\n    SharedPreferences.Editor editor = prefs.edit();\r\n    editor.putBoolean(PrefUtils.PREF_MARKDOWN_ENABLED, isChecked);\r\n    editor.apply();\r\n}",
  "start_lineno" : "973",
  "methodName" : "setMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/200",
  "prompt" : "import java.util.Set\nimport com.automattic.simplenote.models.Note\nprivate void setMarkdown(boolean isChecked) {\r\n    mIsMarkdownEnabled = isChecked;\r\n    showMarkdownActionOrTabs();\r\n    saveNote();\r\n    // Set preference so that next new note will have markdown enabled.\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "991",
  "ground_truth" : "        loadMarkdownData();\r\n    }\r\n}",
  "context" : "private void setMarkdownEnabled(boolean enabled) {\r\n    mIsMarkdownEnabled = enabled;\r\n    if (mIsMarkdownEnabled) {\r\n        loadMarkdownData();\r\n    }\r\n}",
  "start_lineno" : "985",
  "methodName" : "setMarkdownEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/201",
  "prompt" : "private void setMarkdownEnabled(boolean enabled) {\r\n    mIsMarkdownEnabled = enabled;\r\n    if (mIsMarkdownEnabled) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1025",
  "ground_truth" : "        mMarkdown.loadDataWithBaseURL(null, formattedContent, \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "context" : "private void loadMarkdownData() {\r\n    String formattedContent = NoteMarkdownFragment.getMarkdownFormattedContent(mCss, mContentEditText.getPreviewTextContent());\r\n    if (mMarkdown != null) {\r\n        mMarkdown.loadDataWithBaseURL(null, formattedContent, \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "start_lineno" : "1016",
  "methodName" : "loadMarkdownData",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/202",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nprivate void loadMarkdownData() {\r\n    String formattedContent = NoteMarkdownFragment.getMarkdownFormattedContent(mCss, mContentEditText.getPreviewTextContent());\r\n    if (mMarkdown != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1036",
  "ground_truth" : "    mPlaceholderView.setVisibility(View.GONE);\r\n    mMatchOffsets = matchOffsets;\r\n    saveNote();\r\n    new LoadNoteTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, noteID);\r\n}",
  "context" : "public void setNote(String noteID, String matchOffsets) {\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacks(mAutoSaveRunnable);\r\n    }\r\n    mPlaceholderView.setVisibility(View.GONE);\r\n    mMatchOffsets = matchOffsets;\r\n    saveNote();\r\n    new LoadNoteTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, noteID);\r\n}",
  "start_lineno" : "1027",
  "methodName" : "setNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/203",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.os.Handler\npublic void setNote(String noteID, String matchOffsets) {\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacks(mAutoSaveRunnable);\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1042",
  "ground_truth" : "    mNote = updatedNote;\r\n    refreshContent(true);\r\n}",
  "context" : "private void updateNote(Note updatedNote) {\r\n    // update note if network change arrived\r\n    mNote = updatedNote;\r\n    refreshContent(true);\r\n}",
  "start_lineno" : "1038",
  "methodName" : "updateNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/204",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void updateNote(Note updatedNote) {\r\n    // update note if network change arrived\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1087",
  "ground_truth" : "    setChips(tags);\r\n    mTagInput.setText(\"\");\r\n}",
  "context" : "private void updateTagList(List<String> tags) {\r\n    setChips(tags);\r\n    mTagInput.setText(\"\");\r\n}",
  "start_lineno" : "1084",
  "methodName" : "updateTagList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/205",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Tag\nprivate void updateTagList(List<String> tags) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1136",
  "ground_truth" : "    if (mNote == null || !isAdded() || TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r\n    viewModel.addTag(tag, mNote);\r\n}",
  "context" : "@Override\r\npublic void onTagAdded(String tag) {\r\n    // When a tag is added, it triggers an event that sends an empty tag. For those cases or if the note is null,\r\n    // we avoid updating the UI and the note\r\n    if (mNote == null || !isAdded() || TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r\n    viewModel.addTag(tag, mNote);\r\n}",
  "start_lineno" : "1127",
  "methodName" : "onTagAdded",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/206",
  "prompt" : "import com.automattic.simplenote.models.Tag\n@Override\r\npublic void onTagAdded(String tag) {\r\n    // When a tag is added, it triggers an event that sends an empty tag. For those cases or if the note is null,\r\n    // we avoid updating the UI and the note\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1148",
  "ground_truth" : "    setTitleSpan(editable);\r\n    mContentEditText.fixLineSpacing();\r\n}",
  "context" : "@Override\r\npublic void afterTextChanged(Editable editable) {\r\n    attemptAutoList(editable);\r\n    setTitleSpan(editable);\r\n    mContentEditText.fixLineSpacing();\r\n}",
  "start_lineno" : "1143",
  "methodName" : "afterTextChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/207",
  "prompt" : "import java.util.List\nimport android.text.Editable\n@Override\r\npublic void afterTextChanged(Editable editable) {\r\n    attemptAutoList(editable);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1204",
  "ground_truth" : "    AutoBullet.apply(editable, oldCursorPosition, mCurrentCursorPosition);\r\n    mCurrentCursorPosition = mContentEditText.getSelectionStart();\r\n}",
  "context" : "private void attemptAutoList(Editable editable) {\r\n    int oldCursorPosition = mCurrentCursorPosition;\r\n    mCurrentCursorPosition = mContentEditText.getSelectionStart();\r\n    AutoBullet.apply(editable, oldCursorPosition, mCurrentCursorPosition);\r\n    mCurrentCursorPosition = mContentEditText.getSelectionStart();\r\n}",
  "start_lineno" : "1199",
  "methodName" : "attemptAutoList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/208",
  "prompt" : "import java.util.List\nimport android.text.Editable\nimport android.database.Cursor\nprivate void attemptAutoList(Editable editable) {\r\n    int oldCursorPosition = mCurrentCursorPosition;\r\n    mCurrentCursorPosition = mContentEditText.getSelectionStart();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1219",
  "ground_truth" : "        return;\r\n    }\r\n    AppLog.add(Type.ACTION, \"Edited note (ID: \" + mNote.getSimperiumKey() + \" / Title: \" + mNote.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(mNote.getContent()) + \" / Words: \" + NoteUtils.getWordCount(mNote.getContent()) + \")\");\r\n    new SaveNoteTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n}",
  "context" : "private void saveAndSyncNote() {\r\n    if (mNote == null) {\r\n        return;\r\n    }\r\n    AppLog.add(Type.ACTION, \"Edited note (ID: \" + mNote.getSimperiumKey() + \" / Title: \" + mNote.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(mNote.getContent()) + \" / Words: \" + NoteUtils.getWordCount(mNote.getContent()) + \")\");\r\n    new SaveNoteTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n}",
  "start_lineno" : "1206",
  "methodName" : "saveAndSyncNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/209",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void saveAndSyncNote() {\r\n    if (mNote == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1227",
  "ground_truth" : "        return mPlaceholderView.getVisibility() == View.VISIBLE;\r\n    } else {\r\n        return false;\r\n    }\r\n}",
  "context" : "public boolean isPlaceholderVisible() {\r\n    if (mPlaceholderView != null) {\r\n        return mPlaceholderView.getVisibility() == View.VISIBLE;\r\n    } else {\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "1221",
  "methodName" : "isPlaceholderVisible",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/210",
  "prompt" : "import android.view.View\npublic boolean isPlaceholderVisible() {\r\n    if (mPlaceholderView != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1238",
  "ground_truth" : "    }\r\n    if (mPlaceholderView != null) {\r\n        mPlaceholderView.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n    }\r\n}",
  "context" : "public void setPlaceholderVisible(boolean isVisible) {\r\n    if (isVisible) {\r\n        mNote = null;\r\n        mContentEditText.setText(\"\");\r\n    }\r\n    if (mPlaceholderView != null) {\r\n        mPlaceholderView.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n    }\r\n}",
  "start_lineno" : "1229",
  "methodName" : "setPlaceholderVisible",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/211",
  "prompt" : "import com.automattic.simplenote.models.Note\npublic void setPlaceholderVisible(boolean isVisible) {\r\n    if (isVisible) {\r\n        mNote = null;\r\n        mContentEditText.setText(\"\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1251",
  "ground_truth" : "            viewModel.addTag(tag, mNote);\r\n        }\r\n    }\r\n    hideToolbarForLandscapeEditing();\r\n}",
  "context" : "@Override\r\npublic void onFocusChange(View v, boolean hasFocus) {\r\n    if (!hasFocus) {\r\n        // When the tag field looses focus, if it is not empty, the tag is added\r\n        String tag = mTagInput.getText().toString().trim();\r\n        if (tag.length() > 0 && mNote != null) {\r\n            viewModel.addTag(tag, mNote);\r\n        }\r\n    }\r\n    hideToolbarForLandscapeEditing();\r\n}",
  "start_lineno" : "1240",
  "methodName" : "onFocusChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/212",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport android.view.View\n@Override\r\npublic void onFocusChange(View v, boolean hasFocus) {\r\n    if (!hasFocus) {\r\n        // When the tag field looses focus, if it is not empty, the tag is added\r\n        String tag = mTagInput.getText().toString().trim();\r\n        if (tag.length() > 0 && mNote != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1296",
  "ground_truth" : "        return \"\";\r\n    } else {\r\n        return mContentEditText.getText().toString();\r\n    }\r\n}",
  "context" : "private String getNoteContentString() {\r\n    if (mContentEditText == null || mContentEditText.getText() == null) {\r\n        return \"\";\r\n    } else {\r\n        return mContentEditText.getText().toString();\r\n    }\r\n}",
  "start_lineno" : "1290",
  "methodName" : "getNoteContentString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/213",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate String getNoteContentString() {\r\n    if (mContentEditText == null || mContentEditText.getText() == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1308",
  "ground_truth" : "        mShareBottomSheet.dismiss();\r\n    }\r\n}",
  "context" : "/**\r\n * Share bottom sheet callbacks\r\n */\r\n@Override\r\npublic void onSharePublishClicked() {\r\n    publishNote();\r\n    if (mShareBottomSheet != null) {\r\n        mShareBottomSheet.dismiss();\r\n    }\r\n}",
  "start_lineno" : "1302",
  "methodName" : "onSharePublishClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/214",
  "prompt" : "import com.automattic.simplenote.models.Note\n/**\r\n * Share bottom sheet callbacks\r\n */\r\n@Override\r\npublic void onSharePublishClicked() {\r\n    publishNote();\r\n    if (mShareBottomSheet != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1316",
  "ground_truth" : "        mShareBottomSheet.dismiss();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onShareUnpublishClicked() {\r\n    unpublishNote();\r\n    if (mShareBottomSheet != null) {\r\n        mShareBottomSheet.dismiss();\r\n    }\r\n}",
  "start_lineno" : "1310",
  "methodName" : "onShareUnpublishClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/215",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic void onShareUnpublishClicked() {\r\n    unpublishNote();\r\n    if (mShareBottomSheet != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1361",
  "ground_truth" : "        mHistoryBottomSheet.dismiss();\r\n    }\r\n}",
  "context" : "/**\r\n * History bottom sheet listeners\r\n */\r\n@Override\r\npublic void onHistoryCancelClicked() {\r\n    mContentEditText.setText(mNote.getContent());\r\n    if (mHistoryBottomSheet != null) {\r\n        mHistoryBottomSheet.dismiss();\r\n    }\r\n}",
  "start_lineno" : "1355",
  "methodName" : "onHistoryCancelClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/216",
  "prompt" : "import com.automattic.simplenote.models.Note\n/**\r\n * History bottom sheet listeners\r\n */\r\n@Override\r\npublic void onHistoryCancelClicked() {\r\n    mContentEditText.setText(mNote.getContent());\r\n    if (mHistoryBottomSheet != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1369",
  "ground_truth" : "    }\r\n    saveAndSyncNote();\r\n}",
  "context" : "@Override\r\npublic void onHistoryRestoreClicked() {\r\n    if (mHistoryBottomSheet != null) {\r\n        mHistoryBottomSheet.dismiss();\r\n    }\r\n    saveAndSyncNote();\r\n}",
  "start_lineno" : "1363",
  "methodName" : "onHistoryRestoreClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/217",
  "prompt" : "@Override\r\npublic void onHistoryRestoreClicked() {\r\n    if (mHistoryBottomSheet != null) {\r\n        mHistoryBottomSheet.dismiss();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1380",
  "ground_truth" : "    }\r\n    if (mHistoryTimeoutHandler != null) {\r\n        mHistoryTimeoutHandler.removeCallbacks(mHistoryTimeoutRunnable);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onHistoryDismissed() {\r\n    if (!mHistoryBottomSheet.didTapOnButton()) {\r\n        mContentEditText.setText(mNote.getContent());\r\n    }\r\n    if (mHistoryTimeoutHandler != null) {\r\n        mHistoryTimeoutHandler.removeCallbacks(mHistoryTimeoutRunnable);\r\n    }\r\n}",
  "start_lineno" : "1371",
  "methodName" : "onHistoryDismissed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/218",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic void onHistoryDismissed() {\r\n    if (!mHistoryBottomSheet.didTapOnButton()) {\r\n        mContentEditText.setText(mNote.getContent());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1509",
  "ground_truth" : "        // reset publish status in 20 seconds if we don't hear back from Simperium\r\n        mPublishTimeoutHandler.postDelayed(mPublishTimeoutRunnable, PUBLISH_TIMEOUT);\r\n        AnalyticsTracker.track(isPublished ? EDITOR_NOTE_PUBLISHED : EDITOR_NOTE_UNPUBLISHED, CATEGORY_NOTE, \"publish_note_button\");\r\n    }\r\n}",
  "context" : "private void setPublishedNote(boolean isPublished) {\r\n    if (mNote != null) {\r\n        mNote.setPublished(isPublished);\r\n        mNote.save();\r\n        // reset publish status in 20 seconds if we don't hear back from Simperium\r\n        mPublishTimeoutHandler.postDelayed(mPublishTimeoutRunnable, PUBLISH_TIMEOUT);\r\n        AnalyticsTracker.track(isPublished ? EDITOR_NOTE_PUBLISHED : EDITOR_NOTE_UNPUBLISHED, CATEGORY_NOTE, \"publish_note_button\");\r\n    }\r\n}",
  "start_lineno" : "1495",
  "methodName" : "setPublishedNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/219",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void setPublishedNote(boolean isPublished) {\r\n    if (mNote != null) {\r\n        mNote.setPublished(isPublished);\r\n        mNote.save();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1589",
  "ground_truth" : "        mPublishingSnackbar = Snackbar.make(mRootView, R.string.publishing, Snackbar.LENGTH_INDEFINITE);\r\n        mPublishingSnackbar.show();\r\n    }\r\n    setPublishedNote(true);\r\n}",
  "context" : "private void publishNote() {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    if (isAdded()) {\r\n        mPublishingSnackbar = Snackbar.make(mRootView, R.string.publishing, Snackbar.LENGTH_INDEFINITE);\r\n        mPublishingSnackbar.show();\r\n    }\r\n    setPublishedNote(true);\r\n}",
  "start_lineno" : "1577",
  "methodName" : "publishNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/220",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport com.automattic.simplenote.models.Note\nimport android.widget.Toast\nimport android.content.Context\nprivate void publishNote() {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    if (isAdded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1603",
  "ground_truth" : "        mPublishingSnackbar = Snackbar.make(mRootView, R.string.unpublishing, Snackbar.LENGTH_INDEFINITE);\r\n        mPublishingSnackbar.show();\r\n    }\r\n    setPublishedNote(false);\r\n}",
  "context" : "private void unpublishNote() {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    if (isAdded()) {\r\n        mPublishingSnackbar = Snackbar.make(mRootView, R.string.unpublishing, Snackbar.LENGTH_INDEFINITE);\r\n        mPublishingSnackbar.show();\r\n    }\r\n    setPublishedNote(false);\r\n}",
  "start_lineno" : "1591",
  "methodName" : "unpublishNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/221",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport com.automattic.simplenote.models.Note\nimport android.widget.Toast\nimport android.content.Context\nprivate void unpublishNote() {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    if (isAdded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1617",
  "ground_truth" : "        mShareBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "context" : "private void showShareSheet() {\r\n    if (isAdded() && mShareBottomSheet != null && !mShareBottomSheet.isAdded()) {\r\n        mShareBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "start_lineno" : "1613",
  "methodName" : "showShareSheet",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/222",
  "prompt" : "private void showShareSheet() {\r\n    if (isAdded() && mShareBottomSheet != null && !mShareBottomSheet.isAdded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1623",
  "ground_truth" : "        mInfoBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "context" : "private void showInfoSheet() {\r\n    if (isAdded() && mInfoBottomSheet != null && !mInfoBottomSheet.isAdded()) {\r\n        mInfoBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "start_lineno" : "1619",
  "methodName" : "showInfoSheet",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/223",
  "prompt" : "private void showInfoSheet() {\r\n    if (isAdded() && mInfoBottomSheet != null && !mInfoBottomSheet.isAdded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1633",
  "ground_truth" : "        mNotesBucket.getRevisions(mNote, MAX_REVISIONS, mHistoryBottomSheet.getRevisionsRequestCallbacks());\r\n        saveNote();\r\n        mHistoryBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "context" : "private void showHistorySheet() {\r\n    if (isAdded() && mHistoryBottomSheet != null && !mHistoryBottomSheet.isAdded()) {\r\n        // Request revisions for the current note\r\n        mNotesBucket.getRevisions(mNote, MAX_REVISIONS, mHistoryBottomSheet.getRevisionsRequestCallbacks());\r\n        saveNote();\r\n        mHistoryBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}",
  "start_lineno" : "1625",
  "methodName" : "showHistorySheet",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/224",
  "prompt" : "private void showHistorySheet() {\r\n    if (isAdded() && mHistoryBottomSheet != null && !mHistoryBottomSheet.isAdded()) {\r\n        // Request revisions for the current note\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1677",
  "ground_truth" : "        mNotesBucket.removeListener(this);\r\n        AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    }\r\n    AppLog.add(Type.SYNC, \"Saved note callback in NoteEditorFragment (ID: \" + note.getSimperiumKey() + \" / Title: \" + note.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(note.getContent()) + \" / Words: \" + NoteUtils.getWordCount(note.getContent()) + \")\");\r\n}",
  "context" : "@Override\r\npublic void onSaveObject(Bucket<Note> noteBucket, Note note) {\r\n    if (mIsPaused) {\r\n        mNotesBucket.removeListener(this);\r\n        AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    }\r\n    AppLog.add(Type.SYNC, \"Saved note callback in NoteEditorFragment (ID: \" + note.getSimperiumKey() + \" / Title: \" + note.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(note.getContent()) + \" / Words: \" + NoteUtils.getWordCount(note.getContent()) + \")\");\r\n}",
  "start_lineno" : "1663",
  "methodName" : "onSaveObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/225",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onSaveObject(Bucket<Note> noteBucket, Note note) {\r\n    if (mIsPaused) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1690",
  "ground_truth" : "    Note openNote = getNote();\r\n    if (openNote == null || !openNote.getSimperiumKey().equals(note.getSimperiumKey()))\r\n        return;\r\n    note.setContent(mContentEditText.getPlainTextContent());\r\n}",
  "context" : "@Override\r\npublic void onBeforeUpdateObject(Bucket<Note> bucket, Note note) {\r\n    // Don't apply updates if we haven't loaded the note yet\r\n    if (mIsLoadingNote)\r\n        return;\r\n    Note openNote = getNote();\r\n    if (openNote == null || !openNote.getSimperiumKey().equals(note.getSimperiumKey()))\r\n        return;\r\n    note.setContent(mContentEditText.getPlainTextContent());\r\n}",
  "start_lineno" : "1679",
  "methodName" : "onBeforeUpdateObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/226",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onBeforeUpdateObject(Bucket<Note> bucket, Note note) {\r\n    // Don't apply updates if we haven't loaded the note yet\r\n    if (mIsLoadingNote)\r\n        return;\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1717",
  "ground_truth" : "    if (fragment != null) {\r\n        fragment.mContentEditText.removeTextChangedListener(fragment);\r\n        fragment.mIsLoadingNote = true;\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onPreExecute() {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment != null) {\r\n        fragment.mContentEditText.removeTextChangedListener(fragment);\r\n        fragment.mIsLoadingNote = true;\r\n    }\r\n}",
  "start_lineno" : "1709",
  "methodName" : "onPreExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/227",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n@Override\r\nprotected void onPreExecute() {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1827",
  "ground_truth" : "    if (fragment != null) {\r\n        fragment.saveNote();\r\n    }\r\n    return null;\r\n}",
  "context" : "@Override\r\nprotected Void doInBackground(Void... args) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment != null) {\r\n        fragment.saveNote();\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "1818",
  "methodName" : "doInBackground",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/228",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n@Override\r\nprotected Void doInBackground(Void... args) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1838",
  "ground_truth" : "        // Update links\r\n        fragment.linkifyEditorContent();\r\n        fragment.updateMarkdownView();\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment != null && fragment.getActivity() != null && !fragment.getActivity().isFinishing()) {\r\n        // Update links\r\n        fragment.linkifyEditorContent();\r\n        fragment.updateMarkdownView();\r\n    }\r\n}",
  "start_lineno" : "1829",
  "methodName" : "onPostExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/229",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment != null && fragment.getActivity() != null && !fragment.getActivity().isFinishing()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1849",
  "ground_truth" : "    }\r\n    if (PrefUtils.getBoolPref(getActivity(), PrefUtils.PREF_DETECT_LINKS)) {\r\n        SimplenoteLinkify.addLinks(mContentEditText, Linkify.ALL);\r\n    }\r\n}",
  "context" : "private void linkifyEditorContent() {\r\n    if (getActivity() == null || getActivity().isFinishing()) {\r\n        return;\r\n    }\r\n    if (PrefUtils.getBoolPref(getActivity(), PrefUtils.PREF_DETECT_LINKS)) {\r\n        SimplenoteLinkify.addLinks(mContentEditText, Linkify.ALL);\r\n    }\r\n}",
  "start_lineno" : "1841",
  "methodName" : "linkifyEditorContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/230",
  "prompt" : "import android.app.Activity\nprivate void linkifyEditorContent() {\r\n    if (getActivity() == null || getActivity().isFinishing()) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\npublic static final String ARG_ITEM_ID = \"item_id\";\npublic static final String ARG_NEW_NOTE = \"new_note\";\npublic static final String ARG_MATCH_OFFSETS = \"match_offsets\";\npublic static final String ARG_MARKDOWN_ENABLED = \"markdown_enabled\";\npublic static final String ARG_PREVIEW_ENABLED = \"preview_enabled\";\nprivate static final String STATE_NOTE_ID = \"state_note_id\";\nprivate static final int AUTOSAVE_DELAY_MILLIS = 2000;\nprivate static final int MAX_REVISIONS = 30;\nprivate static final int PUBLISH_TIMEOUT = 20000;\nprivate static final int HISTORY_TIMEOUT = 10000;\nprivate Note mNote;\nprivate final Runnable mAutoSaveRunnable = this::saveAndSyncNote;\nprivate Bucket<Note> mNotesBucket;\nprivate View mRootView;\nprivate View mTagPadding;\nprivate SimplenoteEditText mContentEditText;\nprivate ChipGroup mTagChips;\nprivate TagsMultiAutoCompleteTextView mTagInput;\nprivate Handler mAutoSaveHandler;\nprivate Handler mPublishTimeoutHandler;\nprivate Handler mHistoryTimeoutHandler;\nprivate LinearLayout mPlaceholderView;\nprivate CursorAdapter mLinkAutocompleteAdapter;\nprivate CursorAdapter mTagAutocompleteAdapter;\nprivate boolean mIsLoadingNote;\nprivate boolean mIsMarkdownEnabled;\nprivate boolean mIsPreviewEnabled;\nprivate ActionMode mActionMode;\nprivate MenuItem mChecklistMenuItem;\nprivate MenuItem mCopyMenuItem;\nprivate MenuItem mInformationMenuItem;\nprivate MenuItem mShareMenuItem;\nprivate MenuItem mViewLinkMenuItem;\nprivate String mLinkUrl;\nprivate String mLinkText;\nprivate MatchOffsetHighlighter mHighlighter;\nprivate Drawable mBrowserIcon;\nprivate Drawable mCallIcon;\nprivate Drawable mCopyIcon;\nprivate Drawable mEmailIcon;\nprivate Drawable mLinkIcon;\nprivate Drawable mMapIcon;\nprivate Drawable mShareIcon;\nprivate MatchOffsetHighlighter.SpanFactory mMatchHighlighter;\nprivate String mMatchOffsets;\nprivate int mCurrentCursorPosition;\nprivate HistoryBottomSheetDialog mHistoryBottomSheet;\nprivate LinearLayout mError;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsPaused;\nprivate boolean mIsFromWidget;\nprivate NoteEditorViewModel viewModel;\nprivate InfoBottomSheetDialog mInfoBottomSheet;\nprivate ShareBottomSheetDialog mShareBottomSheet;\nprivate Snackbar mPublishingSnackbar;\nprivate boolean mHideActionOnSuccess;\nprivate Activity mActivity = requireActivity();\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "1885",
  "ground_truth" : "    new int[] { android.R.attr.state_checked }, // unchecked\r\n    new int[] { -android.R.attr.state_checked } };\r\n    int[] colors = new int[] { ThemeUtils.getColorFromAttribute(requireContext(), R.attr.chipCheckedOnBackgroundColor), ThemeUtils.getColorFromAttribute(requireContext(), R.attr.chipCheckedOffBackgroundColor) };\r\n    return new ColorStateList(states, colors);\r\n}",
  "context" : "private ColorStateList getChipBackgroundColor() {\r\n    int[][] states = new int[][] { // checked\r\n    new int[] { android.R.attr.state_checked }, // unchecked\r\n    new int[] { -android.R.attr.state_checked } };\r\n    int[] colors = new int[] { ThemeUtils.getColorFromAttribute(requireContext(), R.attr.chipCheckedOnBackgroundColor), ThemeUtils.getColorFromAttribute(requireContext(), R.attr.chipCheckedOffBackgroundColor) };\r\n    return new ColorStateList(states, colors);\r\n}",
  "start_lineno" : "1873",
  "methodName" : "getChipBackgroundColor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java",
  "task_id" : "simplenote-android/231",
  "prompt" : "import java.util.List\nimport com.google.android.material.chip.Chip\nimport android.content.res.ColorStateList\nprivate ColorStateList getChipBackgroundColor() {\r\n    int[][] states = new int[][] { // checked\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "187",
  "ground_truth" : "    if (mActionMode == null) {\r\n        requireActivity().startActionMode(this);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long l) {\r\n    getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);\r\n    getListView().setItemChecked(position, true);\r\n    if (mActionMode == null) {\r\n        requireActivity().startActionMode(this);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "177",
  "methodName" : "onItemLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/232",
  "prompt" : "import java.util.List\nimport android.widget.ListView\nimport android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long l) {\r\n    getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);\r\n    getListView().setItemChecked(position, true);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "198",
  "ground_truth" : "    DrawableUtils.tintMenuWithAttribute(getActivity(), menu, R.attr.actionModeTextColor);\r\n    mActionMode = actionMode;\r\n    requireActivity().getWindow().setStatusBarColor(ThemeUtils.getColorFromAttribute(requireContext(), R.attr.mainBackgroundColor));\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r\n    mCallbacks.onActionModeCreated();\r\n    MenuInflater inflater = actionMode.getMenuInflater();\r\n    inflater.inflate(R.menu.bulk_edit, menu);\r\n    DrawableUtils.tintMenuWithAttribute(getActivity(), menu, R.attr.actionModeTextColor);\r\n    mActionMode = actionMode;\r\n    requireActivity().getWindow().setStatusBarColor(ThemeUtils.getColorFromAttribute(requireContext(), R.attr.mainBackgroundColor));\r\n    return true;\r\n}",
  "start_lineno" : "189",
  "methodName" : "onCreateActionMode",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/233",
  "prompt" : "import android.view.MenuInflater\nimport android.view.Menu\nimport android.view.ActionMode\n@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r\n    mCallbacks.onActionModeCreated();\r\n    MenuInflater inflater = actionMode.getMenuInflater();\r\n    inflater.inflate(R.menu.bulk_edit, menu);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "242",
  "ground_truth" : "            links.append(SimplenoteLinkify.getNoteLinkWithTitle(note.getTitle(), note.getSimperiumKey())).append(\"\\n\");\r\n        }\r\n    }\r\n    return links.toString();\r\n}",
  "context" : "private String getSelectedNoteLinks() {\r\n    SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();\r\n    StringBuilder links = new StringBuilder();\r\n    for (int i = 0; i < checkedPositions.size(); i++) {\r\n        if (checkedPositions.valueAt(i)) {\r\n            Note note = mNotesAdapter.getItem(checkedPositions.keyAt(i));\r\n            links.append(SimplenoteLinkify.getNoteLinkWithTitle(note.getTitle(), note.getSimperiumKey())).append(\"\\n\");\r\n        }\r\n    }\r\n    return links.toString();\r\n}",
  "start_lineno" : "230",
  "methodName" : "getSelectedNoteLinks",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/234",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Note\nimport android.widget.ListView\nimport android.view.View\nimport android.util.SparseBooleanArray\nprivate String getSelectedNoteLinks() {\r\n    SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();\r\n    StringBuilder links = new StringBuilder();\r\n    for (int i = 0; i < checkedPositions.size(); i++) {\r\n        if (checkedPositions.valueAt(i)) {\r\n            Note note = mNotesAdapter.getItem(checkedPositions.keyAt(i));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "255",
  "ground_truth" : "            positions.add(checkedPositions.keyAt(i) - mList.getHeaderViewsCount());\r\n        }\r\n    }\r\n    return positions;\r\n}",
  "context" : "public List<Integer> getSelectedNotesPositions() {\r\n    SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();\r\n    ArrayList<Integer> positions = new ArrayList<>();\r\n    for (int i = 0; i < checkedPositions.size(); i++) {\r\n        if (checkedPositions.valueAt(i)) {\r\n            positions.add(checkedPositions.keyAt(i) - mList.getHeaderViewsCount());\r\n        }\r\n    }\r\n    return positions;\r\n}",
  "start_lineno" : "244",
  "methodName" : "getSelectedNotesPositions",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/235",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Note\nimport android.widget.ListView\nimport android.view.View\nimport android.util.SparseBooleanArray\npublic List<Integer> getSelectedNotesPositions() {\r\n    SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();\r\n    ArrayList<Integer> positions = new ArrayList<>();\r\n    for (int i = 0; i < checkedPositions.size(); i++) {\r\n        if (checkedPositions.valueAt(i)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "325",
  "ground_truth" : "    } else {\r\n        actionMode.setTitle(getResources().getQuantityString(R.plurals.selected_notes, checkedCount, checkedCount));\r\n    }\r\n    actionMode.invalidate();\r\n}",
  "context" : "@Override\r\npublic void onItemCheckedStateChanged(ActionMode actionMode, int position, long id, boolean checked) {\r\n    int checkedCount = getListView().getCheckedItemCount();\r\n    if (checkedCount == 0) {\r\n        actionMode.setTitle(\"\");\r\n    } else {\r\n        actionMode.setTitle(getResources().getQuantityString(R.plurals.selected_notes, checkedCount, checkedCount));\r\n    }\r\n    actionMode.invalidate();\r\n}",
  "start_lineno" : "314",
  "methodName" : "onItemCheckedStateChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/236",
  "prompt" : "import java.util.List\nimport android.widget.ListView\nimport android.view.View\nimport android.view.ActionMode\n@Override\r\npublic void onItemCheckedStateChanged(ActionMode actionMode, int position, long id, boolean checked) {\r\n    int checkedCount = getListView().getCheckedItemCount();\r\n    if (checkedCount == 0) {\r\n        actionMode.setTitle(\"\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "334",
  "ground_truth" : "    AppLog.add(Type.NETWORK, NetworkUtils.getNetworkInfo(requireContext()));\r\n    AppLog.add(Type.SCREEN, \"Created (NoteListFragment)\");\r\n    mBucketPreferences = ((Simplenote) requireActivity().getApplication()).getPreferencesBucket();\r\n    mBucketTag = ((Simplenote) requireActivity().getApplication()).getTagsBucket();\r\n}",
  "context" : "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    AppLog.add(Type.NETWORK, NetworkUtils.getNetworkInfo(requireContext()));\r\n    AppLog.add(Type.SCREEN, \"Created (NoteListFragment)\");\r\n    mBucketPreferences = ((Simplenote) requireActivity().getApplication()).getPreferencesBucket();\r\n    mBucketTag = ((Simplenote) requireActivity().getApplication()).getTagsBucket();\r\n}",
  "start_lineno" : "327",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/237",
  "prompt" : "import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "340",
  "ground_truth" : "    mTitleFontSize = PrefUtils.getFontSize(getActivity());\r\n    mPreviewFontSize = mTitleFontSize - 2;\r\n}",
  "context" : "protected void getPrefs() {\r\n    mIsCondensedNoteList = PrefUtils.getBoolPref(getActivity(), PrefUtils.PREF_CONDENSED_LIST, false);\r\n    mTitleFontSize = PrefUtils.getFontSize(getActivity());\r\n    mPreviewFontSize = mTitleFontSize - 2;\r\n}",
  "start_lineno" : "336",
  "methodName" : "getPrefs",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/238",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.models.Note\nprotected void getPrefs() {\r\n    mIsCondensedNoteList = PrefUtils.getBoolPref(getActivity(), PrefUtils.PREF_CONDENSED_LIST, false);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "391",
  "ground_truth" : "        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(getContext(), requireContext().getString(R.string.new_note), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r\n        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(getContext(), requireContext().getString(R.string.new_note), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "start_lineno" : "383",
  "methodName" : "onLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/239",
  "prompt" : "import android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "429",
  "ground_truth" : "        return;\r\n    }\r\n    addNote(title);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.LIST_NOTE_CREATED, AnalyticsTracker.CATEGORY_NOTE, label);\r\n}",
  "context" : "public void createNewNote(String title, String label) {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    addNote(title);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.LIST_NOTE_CREATED, AnalyticsTracker.CATEGORY_NOTE, label);\r\n}",
  "start_lineno" : "418",
  "methodName" : "createNewNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/240",
  "prompt" : "import com.automattic.simplenote.models.Note\npublic void createNewNote(String title, String label) {\r\n    if (!isAdded()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "441",
  "ground_truth" : "    if (!(activity instanceof Callbacks)) {\r\n        throw new IllegalStateException(\"Activity must implement fragment's callbacks.\");\r\n    }\r\n    mCallbacks = (Callbacks) activity;\r\n}",
  "context" : "@Override\r\npublic void onAttach(@NonNull Context activity) {\r\n    super.onAttach(activity);\r\n    // Activities containing this fragment must implement its callbacks.\r\n    if (!(activity instanceof Callbacks)) {\r\n        throw new IllegalStateException(\"Activity must implement fragment's callbacks.\");\r\n    }\r\n    mCallbacks = (Callbacks) activity;\r\n}",
  "start_lineno" : "431",
  "methodName" : "onAttach",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/241",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onAttach(@NonNull Context activity) {\r\n    super.onAttach(activity);\r\n    // Activities containing this fragment must implement its callbacks.\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "459",
  "ground_truth" : "    mBucketPreferences.addOnDeleteObjectListener(this);\r\n    mBucketPreferences.addOnNetworkChangeListener(this);\r\n    mBucketPreferences.addOnSaveObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Added preference bucket listener (NoteListFragment)\");\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    getPrefs();\r\n    if (mIsSearching) {\r\n        refreshListForSearch();\r\n    } else {\r\n        refreshList();\r\n    }\r\n    mBucketPreferences.start();\r\n    mBucketPreferences.addOnDeleteObjectListener(this);\r\n    mBucketPreferences.addOnNetworkChangeListener(this);\r\n    mBucketPreferences.addOnSaveObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Added preference bucket listener (NoteListFragment)\");\r\n}",
  "start_lineno" : "443",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/242",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    getPrefs();\r\n    if (mIsSearching) {\r\n        refreshListForSearch();\r\n    } else {\r\n        refreshList();\r\n    }\r\n    mBucketPreferences.start();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "469",
  "ground_truth" : "    mBucketPreferences.removeOnNetworkChangeListener(this);\r\n    mBucketPreferences.removeOnSaveObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed preference bucket listener (NoteListFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Paused (NoteListFragment)\");\r\n}",
  "context" : "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    mBucketPreferences.removeOnDeleteObjectListener(this);\r\n    mBucketPreferences.removeOnNetworkChangeListener(this);\r\n    mBucketPreferences.removeOnSaveObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed preference bucket listener (NoteListFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Paused (NoteListFragment)\");\r\n}",
  "start_lineno" : "461",
  "methodName" : "onPause",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/243",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    mBucketPreferences.removeOnDeleteObjectListener(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "476",
  "ground_truth" : "    // Reset the active callbacks interface to the dummy implementation.\r\n    mCallbacks = sCallbacks;\r\n}",
  "context" : "@Override\r\npublic void onDetach() {\r\n    super.onDetach();\r\n    // Reset the active callbacks interface to the dummy implementation.\r\n    mCallbacks = sCallbacks;\r\n}",
  "start_lineno" : "471",
  "methodName" : "onDetach",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/244",
  "prompt" : "@Override\r\npublic void onDetach() {\r\n    super.onDetach();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "487",
  "ground_truth" : "        } else {\r\n            mEmptyViewButton.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}",
  "context" : "public void setEmptyListButton(String message) {\r\n    if (mEmptyViewButton != null) {\r\n        if (!message.isEmpty()) {\r\n            mEmptyViewButton.setVisibility(View.VISIBLE);\r\n            mEmptyViewButton.setText(message);\r\n        } else {\r\n            mEmptyViewButton.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "478",
  "methodName" : "setEmptyListButton",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/245",
  "prompt" : "import java.util.List\nimport android.view.View\npublic void setEmptyListButton(String message) {\r\n    if (mEmptyViewButton != null) {\r\n        if (!message.isEmpty()) {\r\n            mEmptyViewButton.setVisibility(View.VISIBLE);\r\n            mEmptyViewButton.setText(message);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "498",
  "ground_truth" : "        } else {\r\n            mEmptyViewImage.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}",
  "context" : "public void setEmptyListImage(@DrawableRes int image) {\r\n    if (mEmptyViewImage != null) {\r\n        if (image != -1) {\r\n            mEmptyViewImage.setVisibility(View.VISIBLE);\r\n            mEmptyViewImage.setImageResource(image);\r\n        } else {\r\n            mEmptyViewImage.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "489",
  "methodName" : "setEmptyListImage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/246",
  "prompt" : "import java.util.List\nimport androidx.annotation.DrawableRes\nimport android.view.View\npublic void setEmptyListImage(@DrawableRes int image) {\r\n    if (mEmptyViewImage != null) {\r\n        if (image != -1) {\r\n            mEmptyViewImage.setVisibility(View.VISIBLE);\r\n            mEmptyViewImage.setImageResource(image);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "504",
  "ground_truth" : "        mEmptyViewText.setText(message);\r\n    }\r\n}",
  "context" : "public void setEmptyListMessage(String message) {\r\n    if (mEmptyViewText != null && message != null) {\r\n        mEmptyViewText.setText(message);\r\n    }\r\n}",
  "start_lineno" : "500",
  "methodName" : "setEmptyListMessage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/247",
  "prompt" : "import java.util.List\nimport android.view.View\npublic void setEmptyListMessage(String message) {\r\n    if (mEmptyViewText != null && message != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "520",
  "ground_truth" : "        Note note = mNotesAdapter.getItem(position);\r\n        mCallbacks.onNoteSelected(noteID, holder.mMatchOffsets, note.isMarkdownEnabled(), note.isPreviewEnabled());\r\n    }\r\n    mActivatedPosition = position;\r\n}",
  "context" : "@Override\r\npublic void onListItemClick(@NonNull ListView listView, @NonNull View view, int position, long id) {\r\n    if (!isAdded())\r\n        return;\r\n    super.onListItemClick(listView, view, position, id);\r\n    NoteViewHolder holder = (NoteViewHolder) view.getTag();\r\n    String noteID = holder.getNoteId();\r\n    if (noteID != null) {\r\n        Note note = mNotesAdapter.getItem(position);\r\n        mCallbacks.onNoteSelected(noteID, holder.mMatchOffsets, note.isMarkdownEnabled(), note.isPreviewEnabled());\r\n    }\r\n    mActivatedPosition = position;\r\n}",
  "start_lineno" : "506",
  "methodName" : "onListItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/248",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport androidx.annotation.NonNull\nimport android.widget.ListView\nimport android.view.View\n@Override\r\npublic void onListItemClick(@NonNull ListView listView, @NonNull View view, int position, long id) {\r\n    if (!isAdded())\r\n        return;\r\n    super.onListItemClick(listView, view, position, id);\r\n    NoteViewHolder holder = (NoteViewHolder) view.getTag();\r\n    String noteID = holder.getNoteId();\r\n    if (noteID != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "530",
  "ground_truth" : "        mCallbacks.onNoteSelected(selectedNote.getSimperiumKey(), null, selectedNote.isMarkdownEnabled(), selectedNote.isPreviewEnabled());\r\n    }\r\n}",
  "context" : "/**\r\n * Selects first row in the list if available\r\n */\r\npublic void selectFirstNote() {\r\n    if (mNotesAdapter.getCount() > 0) {\r\n        Note selectedNote = mNotesAdapter.getItem(mList.getHeaderViewsCount());\r\n        mCallbacks.onNoteSelected(selectedNote.getSimperiumKey(), null, selectedNote.isMarkdownEnabled(), selectedNote.isPreviewEnabled());\r\n    }\r\n}",
  "start_lineno" : "525",
  "methodName" : "selectFirstNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/249",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Note\nimport android.view.View\n/**\r\n * Selects first row in the list if available\r\n */\r\npublic void selectFirstNote() {\r\n    if (mNotesAdapter.getCount() > 0) {\r\n        Note selectedNote = mNotesAdapter.getItem(mList.getHeaderViewsCount());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "539",
  "ground_truth" : "    if (mActivatedPosition != ListView.INVALID_POSITION) {\r\n        // Serialize and persist the activated item position.\r\n        outState.putInt(STATE_ACTIVATED_POSITION, mActivatedPosition);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (mActivatedPosition != ListView.INVALID_POSITION) {\r\n        // Serialize and persist the activated item position.\r\n        outState.putInt(STATE_ACTIVATED_POSITION, mActivatedPosition);\r\n    }\r\n}",
  "start_lineno" : "532",
  "methodName" : "onSaveInstanceState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/250",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "553",
  "ground_truth" : "    // give items the 'activated' state when touched.\r\n    getListView().setChoiceMode(activateOnItemClick ? ListView.CHOICE_MODE_SINGLE : ListView.CHOICE_MODE_NONE);\r\n}",
  "context" : "/**\r\n * Turns on activate-on-click mode. When this mode is on, list items will be\r\n * given the 'activated' state when touched.\r\n */\r\npublic void setActivateOnItemClick(boolean activateOnItemClick) {\r\n    // When setting CHOICE_MODE_SINGLE, ListView will automatically\r\n    // give items the 'activated' state when touched.\r\n    getListView().setChoiceMode(activateOnItemClick ? ListView.CHOICE_MODE_SINGLE : ListView.CHOICE_MODE_NONE);\r\n}",
  "start_lineno" : "549",
  "methodName" : "setActivateOnItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/251",
  "prompt" : "import java.util.List\nimport android.widget.ListView\nimport android.view.View\n/**\r\n * Turns on activate-on-click mode. When this mode is on, list items will be\r\n * given the 'activated' state when touched.\r\n */\r\npublic void setActivateOnItemClick(boolean activateOnItemClick) {\r\n    // When setting CHOICE_MODE_SINGLE, ListView will automatically\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "565",
  "ground_truth" : "            getListView().setItemChecked(position, true);\r\n        }\r\n        mActivatedPosition = position;\r\n    }\r\n}",
  "context" : "public void setActivatedPosition(int position) {\r\n    if (getListView() != null) {\r\n        if (position == ListView.INVALID_POSITION) {\r\n            getListView().setItemChecked(mActivatedPosition, false);\r\n        } else {\r\n            getListView().setItemChecked(position, true);\r\n        }\r\n        mActivatedPosition = position;\r\n    }\r\n}",
  "start_lineno" : "555",
  "methodName" : "setActivatedPosition",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/252",
  "prompt" : "import java.util.List\nimport android.widget.ListView\nimport android.view.View\npublic void setActivatedPosition(int position) {\r\n    if (getListView() != null) {\r\n        if (position == ListView.INVALID_POSITION) {\r\n            getListView().setItemChecked(mActivatedPosition, false);\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "579",
  "ground_truth" : "        mFloatingActionButton.show();\r\n    } else {\r\n        mFloatingActionButton.hide();\r\n    }\r\n}",
  "context" : "public void setFloatingActionButtonVisible(boolean visible) {\r\n    if (mFloatingActionButton == null)\r\n        return;\r\n    if (visible) {\r\n        mFloatingActionButton.show();\r\n    } else {\r\n        mFloatingActionButton.hide();\r\n    }\r\n}",
  "start_lineno" : "571",
  "methodName" : "setFloatingActionButtonVisible",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/253",
  "prompt" : "import com.google.android.material.floatingactionbutton.FloatingActionButton\npublic void setFloatingActionButtonVisible(boolean visible) {\r\n    if (mFloatingActionButton == null)\r\n        return;\r\n    if (visible) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "594",
  "ground_truth" : "    }\r\n    mRefreshListTask = new RefreshListTask(this);\r\n    mRefreshListTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, fromNav);\r\n    WidgetUtils.updateNoteWidgets(requireActivity().getApplicationContext());\r\n}",
  "context" : "public void refreshList(boolean fromNav) {\r\n    if (mRefreshListTask != null && mRefreshListTask.getStatus() != AsyncTask.Status.FINISHED) {\r\n        mRefreshListTask.cancel(true);\r\n    }\r\n    mRefreshListTask = new RefreshListTask(this);\r\n    mRefreshListTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, fromNav);\r\n    WidgetUtils.updateNoteWidgets(requireActivity().getApplicationContext());\r\n}",
  "start_lineno" : "585",
  "methodName" : "refreshList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/254",
  "prompt" : "import java.util.List\nimport android.os.AsyncTask\npublic void refreshList(boolean fromNav) {\r\n    if (mRefreshListTask != null && mRefreshListTask.getStatus() != AsyncTask.Status.FINISHED) {\r\n        mRefreshListTask.cancel(true);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "603",
  "ground_truth" : "        mRefreshListForSearchTask.cancel(true);\r\n    }\r\n    mRefreshListForSearchTask = new RefreshListForSearchTask(this);\r\n    mRefreshListForSearchTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n}",
  "context" : "private void refreshListForSearch() {\r\n    if (mRefreshListForSearchTask != null && mRefreshListForSearchTask.getStatus() != AsyncTask.Status.FINISHED) {\r\n        mRefreshListForSearchTask.cancel(true);\r\n    }\r\n    mRefreshListForSearchTask = new RefreshListForSearchTask(this);\r\n    mRefreshListForSearchTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n}",
  "start_lineno" : "596",
  "methodName" : "refreshListForSearch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/255",
  "prompt" : "import java.util.List\nimport android.os.AsyncTask\nprivate void refreshListForSearch() {\r\n    if (mRefreshListForSearchTask != null && mRefreshListForSearchTask.getStatus() != AsyncTask.Status.FINISHED) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "667",
  "ground_truth" : "    while (matcher.find()) {\r\n        query.where(TAGS_PROPERTY, Query.ComparisonType.LIKE, matcher.group(1));\r\n    }\r\n    return matcher.replaceAll(\"\");\r\n}",
  "context" : "private String queryTags(Query<Note> query, String searchString) {\r\n    Pattern pattern = Pattern.compile(TAG_PREFIX + \"(.*?)( |$)\");\r\n    Matcher matcher = pattern.matcher(searchString);\r\n    while (matcher.find()) {\r\n        query.where(TAGS_PROPERTY, Query.ComparisonType.LIKE, matcher.group(1));\r\n    }\r\n    return matcher.replaceAll(\"\");\r\n}",
  "start_lineno" : "660",
  "methodName" : "queryTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/256",
  "prompt" : "import java.util.regex.Pattern\nimport java.util.regex.Matcher\nimport com.simperium.client.Query\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.models.Suggestion.Type.TAG\nprivate String queryTags(Query<Note> query, String searchString) {\r\n    Pattern pattern = Pattern.compile(TAG_PREFIX + \"(.*?)( |$)\");\r\n    Matcher matcher = pattern.matcher(searchString);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "755",
  "ground_truth" : "    if (isSubmit) {\r\n        mSuggestionLayout.setVisibility(View.GONE);\r\n        refreshListForSearch();\r\n    }\r\n}",
  "context" : "public void searchNotes(String searchString, boolean isSubmit) {\r\n    mIsSearching = true;\r\n    mSuggestionLayout.setVisibility(View.VISIBLE);\r\n    if (!searchString.equals(mSearchString)) {\r\n        mSearchString = searchString;\r\n    }\r\n    if (searchString.isEmpty()) {\r\n        getSearchItems();\r\n    } else {\r\n        getTagSuggestions(searchString);\r\n    }\r\n    if (isSubmit) {\r\n        mSuggestionLayout.setVisibility(View.GONE);\r\n        refreshListForSearch();\r\n    }\r\n}",
  "start_lineno" : "737",
  "methodName" : "searchNotes",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/257",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Note\nimport android.view.View\npublic void searchNotes(String searchString, boolean isSubmit) {\r\n    mIsSearching = true;\r\n    mSuggestionLayout.setVisibility(View.VISIBLE);\r\n    if (!searchString.equals(mSearchString)) {\r\n        mSearchString = searchString;\r\n    }\r\n    if (searchString.isEmpty()) {\r\n        getSearchItems();\r\n    } else {\r\n        getTagSuggestions(searchString);\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "769",
  "ground_truth" : "    if (mSearchString != null && !mSearchString.equals(\"\")) {\r\n        mSearchString = null;\r\n        refreshList();\r\n    }\r\n}",
  "context" : "/**\r\n * Clear search and load all notes\r\n */\r\npublic void clearSearch() {\r\n    mIsSearching = false;\r\n    mSuggestionLayout.setVisibility(View.GONE);\r\n    refreshList();\r\n    if (mSearchString != null && !mSearchString.equals(\"\")) {\r\n        mSearchString = null;\r\n        refreshList();\r\n    }\r\n}",
  "start_lineno" : "760",
  "methodName" : "clearSearch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/258",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Suggestion\nimport android.view.View\n/**\r\n * Clear search and load all notes\r\n */\r\npublic void clearSearch() {\r\n    mIsSearching = false;\r\n    mSuggestionLayout.setVisibility(View.GONE);\r\n    refreshList();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "802",
  "ground_truth" : "        preferences.save();\r\n    } else {\r\n        Log.e(\"deleteSearchItem\", \"Could not get preferences entity\");\r\n    }\r\n}",
  "context" : "private void deleteSearchItem(String item) {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences != null) {\r\n        List<String> recents = preferences.getRecentSearches();\r\n        mDeletedItemIndex = recents.indexOf(item);\r\n        recents.remove(item);\r\n        preferences.setRecentSearches(recents);\r\n        preferences.save();\r\n    } else {\r\n        Log.e(\"deleteSearchItem\", \"Could not get preferences entity\");\r\n    }\r\n}",
  "start_lineno" : "790",
  "methodName" : "deleteSearchItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/259",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Preferences\nprivate void deleteSearchItem(String item) {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences != null) {\r\n        List<String> recents = preferences.getRecentSearches();\r\n        mDeletedItemIndex = recents.indexOf(item);\r\n        recents.remove(item);\r\n        preferences.setRecentSearches(recents);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "817",
  "ground_truth" : "            Log.e(\"getPreferences\", \"Could not create preferences entity\", invalid);\r\n            return null;\r\n        }\r\n    }\r\n}",
  "context" : "private Preferences getPreferences() {\r\n    try {\r\n        return mBucketPreferences.get(PREFERENCES_OBJECT_KEY);\r\n    } catch (BucketObjectMissingException exception) {\r\n        try {\r\n            Preferences preferences = mBucketPreferences.newObject(PREFERENCES_OBJECT_KEY);\r\n            preferences.save();\r\n            return preferences;\r\n        } catch (BucketObjectNameInvalid invalid) {\r\n            Log.e(\"getPreferences\", \"Could not create preferences entity\", invalid);\r\n            return null;\r\n        }\r\n    }\r\n}",
  "start_lineno" : "804",
  "methodName" : "getPreferences",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/260",
  "prompt" : "import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.BucketObjectMissingException\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.models.Preferences.PREFERENCES_OBJECT_KEY\nprivate Preferences getPreferences() {\r\n    try {\r\n        return mBucketPreferences.get(PREFERENCES_OBJECT_KEY);\r\n    } catch (BucketObjectMissingException exception) {\r\n        try {\r\n            Preferences preferences = mBucketPreferences.newObject(PREFERENCES_OBJECT_KEY);\r\n            preferences.save();\r\n            return preferences;\r\n        } catch (BucketObjectNameInvalid invalid) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "833",
  "ground_truth" : "        mSuggestionAdapter.updateItems(suggestions);\r\n    } else {\r\n        Log.e(\"getSearchItems\", \"Could not get preferences entity\");\r\n    }\r\n}",
  "context" : "private void getSearchItems() {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences != null) {\r\n        ArrayList<Suggestion> suggestions = new ArrayList<>();\r\n        for (String recent : preferences.getRecentSearches()) {\r\n            suggestions.add(new Suggestion(recent, HISTORY));\r\n        }\r\n        mSuggestionAdapter.updateItems(suggestions);\r\n    } else {\r\n        Log.e(\"getSearchItems\", \"Could not get preferences entity\");\r\n    }\r\n}",
  "start_lineno" : "819",
  "methodName" : "getSearchItems",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/261",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.models.Suggestion.Type.HISTORY\nprivate void getSearchItems() {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences != null) {\r\n        ArrayList<Suggestion> suggestions = new ArrayList<>();\r\n        for (String recent : preferences.getRecentSearches()) {\r\n            suggestions.add(new Suggestion(recent, HISTORY));\r\n        }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "921",
  "ground_truth" : "    mCursor = cursor;\r\n    super.changeCursor(cursor);\r\n}",
  "context" : "public void changeCursor(ObjectCursor<Note> cursor) {\r\n    mCursor = cursor;\r\n    super.changeCursor(cursor);\r\n}",
  "start_lineno" : "918",
  "methodName" : "changeCursor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/262",
  "prompt" : "import com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport android.database.Cursor\npublic void changeCursor(ObjectCursor<Note> cursor) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "927",
  "ground_truth" : "    mCursor.moveToPosition(position - mList.getHeaderViewsCount());\r\n    return mCursor.getObject();\r\n}",
  "context" : "@Override\r\npublic Note getItem(int position) {\r\n    mCursor.moveToPosition(position - mList.getHeaderViewsCount());\r\n    return mCursor.getObject();\r\n}",
  "start_lineno" : "923",
  "methodName" : "getItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/263",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1066",
  "ground_truth" : "        showPopupMenuAtPosition(view, position);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "context" : "@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouch(View view, MotionEvent event) {\r\n    if (event.getButtonState() == MotionEvent.BUTTON_SECONDARY && event.getAction() == MotionEvent.ACTION_DOWN) {\r\n        showPopupMenuAtPosition(view, position);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "1057",
  "methodName" : "onTouch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/264",
  "prompt" : "import android.view.View\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouch(View view, MotionEvent event) {\r\n    if (event.getButtonState() == MotionEvent.BUTTON_SECONDARY && event.getAction() == MotionEvent.ACTION_DOWN) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1096",
  "ground_truth" : "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onDeleteObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "1086",
  "methodName" : "onDeleteObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/265",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onDeleteObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1108",
  "ground_truth" : "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onNetworkChange(Bucket<Preferences> bucket, Bucket.ChangeType type, String key) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "1098",
  "methodName" : "onNetworkChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/266",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onNetworkChange(Bucket<Preferences> bucket, Bucket.ChangeType type, String key) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1120",
  "ground_truth" : "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSaveObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}",
  "start_lineno" : "1110",
  "methodName" : "onSaveObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/267",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onSaveObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1181",
  "ground_truth" : "        public void onClick(View view) {\r\n            addSearchItem(item, mDeletedItemIndex);\r\n        }\r\n    }).show();\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    final String item = holder.mSuggestionText.getText().toString();\r\n    deleteSearchItem(item);\r\n    Snackbar.make(getRootView(), R.string.snackbar_deleted_recent_search, Snackbar.LENGTH_LONG).setAction(getString(R.string.undo), new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            addSearchItem(item, mDeletedItemIndex);\r\n        }\r\n    }).show();\r\n}",
  "start_lineno" : "1161",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/268",
  "prompt" : "import java.util.List\nimport com.google.android.material.snackbar.Snackbar\nimport com.automattic.simplenote.models.Suggestion\nimport android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    final String item = holder.mSuggestionText.getText().toString();\r\n    deleteSearchItem(item);\r\n    Snackbar.make(getRootView(), R.string.snackbar_deleted_recent_search, Snackbar.LENGTH_LONG).setAction(getString(R.string.undo), new View.OnClickListener() {\r\n\r\n        @Override\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1192",
  "ground_truth" : "        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(getContext(), requireContext().getString(R.string.description_delete_item), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r\n        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    }\r\n    Toast.makeText(getContext(), requireContext().getString(R.string.description_delete_item), Toast.LENGTH_SHORT).show();\r\n    return true;\r\n}",
  "start_lineno" : "1184",
  "methodName" : "onLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/269",
  "prompt" : "import android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v.isHapticFeedbackEnabled()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1207",
  "ground_truth" : "        AnalyticsTracker.track(RECENT_SEARCH_TAPPED, CATEGORY_SEARCH, \"recent_search_tapped\");\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    ((NotesActivity) requireActivity()).submitSearch(holder.mSuggestionText.getText().toString());\r\n    if (holder.mViewType == HISTORY) {\r\n        AnalyticsTracker.track(RECENT_SEARCH_TAPPED, CATEGORY_SEARCH, \"recent_search_tapped\");\r\n    }\r\n}",
  "start_lineno" : "1196",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/270",
  "prompt" : "import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Note\nimport android.view.View\nimport com.automattic.simplenote.models.Suggestion.Type.HISTORY\n@Override\r\npublic void onClick(View view) {\r\n    ((NotesActivity) requireActivity()).submitSearch(holder.mSuggestionText.getText().toString());\r\n    if (holder.mViewType == HISTORY) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1239",
  "ground_truth" : "    mSuggestions.addAll(suggestions);\r\n    diffResult.dispatchUpdatesTo(this);\r\n}",
  "context" : "private void updateItems(List<Suggestion> suggestions) {\r\n    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new SuggestionDiffCallback(mSuggestions, suggestions));\r\n    mSuggestions.clear();\r\n    mSuggestions.addAll(suggestions);\r\n    diffResult.dispatchUpdatesTo(this);\r\n}",
  "start_lineno" : "1234",
  "methodName" : "updateItems",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/271",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Suggestion\nimport androidx.recyclerview.widget.DiffUtil\nprivate void updateItems(List<Suggestion> suggestions) {\r\n    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new SuggestionDiffCallback(mSuggestions, suggestions));\r\n    mSuggestions.clear();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1256",
  "ground_truth" : "    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}",
  "context" : "@Override\r\npublic boolean areContentsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r\n    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}",
  "start_lineno" : "1251",
  "methodName" : "areContentsTheSame",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/272",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Suggestion\n@Override\r\npublic boolean areContentsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1263",
  "ground_truth" : "    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}",
  "context" : "@Override\r\npublic boolean areItemsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r\n    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}",
  "start_lineno" : "1258",
  "methodName" : "areItemsTheSame",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/273",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Suggestion\n@Override\r\npublic boolean areItemsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1289",
  "ground_truth" : "        case ALPHABETICAL_DESCENDING:\r\n        default:\r\n            return null;\r\n    }\r\n}",
  "context" : "private Calendar getDateByPreference(Note note) {\r\n    switch(PrefUtils.getIntPref(requireContext(), PrefUtils.PREF_SORT_ORDER)) {\r\n        case DATE_CREATED_ASCENDING:\r\n        case DATE_CREATED_DESCENDING:\r\n            return note.getCreationDate();\r\n        case DATE_MODIFIED_ASCENDING:\r\n        case DATE_MODIFIED_DESCENDING:\r\n            return note.getModificationDate();\r\n        case ALPHABETICAL_ASCENDING:\r\n        case ALPHABETICAL_DESCENDING:\r\n        default:\r\n            return null;\r\n    }\r\n}",
  "start_lineno" : "1276",
  "methodName" : "getDateByPreference",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/274",
  "prompt" : "import java.util.Calendar\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.models.Note\nimport android.content.Context\nimport com.automattic.simplenote.utils.PrefUtils.DATE_MODIFIED_DESCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_MODIFIED_ASCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_CREATED_DESCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_CREATED_ASCENDING\nimport com.automattic.simplenote.utils.PrefUtils.ALPHABETICAL_ASCENDING\nprivate Calendar getDateByPreference(Note note) {\r\n    switch(PrefUtils.getIntPref(requireContext(), PrefUtils.PREF_SORT_ORDER)) {\r\n        case DATE_CREATED_ASCENDING:\r\n        case DATE_CREATED_DESCENDING:\r\n            return note.getCreationDate();\r\n        case DATE_MODIFIED_ASCENDING:\r\n        case DATE_MODIFIED_DESCENDING:\r\n            return note.getModificationDate();\r\n        case ALPHABETICAL_ASCENDING:\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1335",
  "ground_truth" : "            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}",
  "context" : "@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_pin:\r\n            note.setPinned(!note.isPinned());\r\n            note.setModificationDate(Calendar.getInstance());\r\n            note.save();\r\n            refreshList();\r\n            return true;\r\n        case R.id.menu_trash:\r\n            if (getActivity() != null) {\r\n                ((NotesActivity) getActivity()).trashNote(note);\r\n            }\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}",
  "start_lineno" : "1318",
  "methodName" : "onMenuItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/275",
  "prompt" : "import java.util.List\nimport java.util.Calendar\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_pin:\r\n            note.setPinned(!note.isPinned());\r\n            note.setModificationDate(Calendar.getInstance());\r\n            note.save();\r\n            refreshList();\r\n            return true;\r\n        case R.id.menu_trash:\r\n            if (getActivity() != null) {\r\n                ((NotesActivity) getActivity()).trashNote(note);\r\n            }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1354",
  "ground_truth" : "    mIsFromNavSelect = args[0];\r\n    return fragment.queryNotes();\r\n}",
  "context" : "@Override\r\nprotected ObjectCursor<Note> doInBackground(Boolean... args) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    mIsFromNavSelect = args[0];\r\n    return fragment.queryNotes();\r\n}",
  "start_lineno" : "1349",
  "methodName" : "doInBackground",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/276",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.ListFragment\nimport android.database.Cursor\n@Override\r\nprotected ObjectCursor<Note> doInBackground(Boolean... args) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1409",
  "ground_truth" : "    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    return fragment.queryNotesForSearch();\r\n}",
  "context" : "@Override\r\nprotected ObjectCursor<Note> doInBackground(Void... args) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    return fragment.queryNotesForSearch();\r\n}",
  "start_lineno" : "1405",
  "methodName" : "doInBackground",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/277",
  "prompt" : "import com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport android.database.Cursor\n@Override\r\nprotected ObjectCursor<Note> doInBackground(Void... args) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1449",
  "ground_truth" : "    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    mSelectedRows = fragment.getListView().getCheckedItemPositions();\r\n}",
  "context" : "@Override\r\nprotected void onPreExecute() {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    mSelectedRows = fragment.getListView().getCheckedItemPositions();\r\n}",
  "start_lineno" : "1445",
  "methodName" : "onPreExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/278",
  "prompt" : "@Override\r\nprotected void onPreExecute() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1479",
  "ground_truth" : "    fragment.mActionMode.finish();\r\n    fragment.refreshList();\r\n}",
  "context" : "@Override\r\nprotected void onPostExecute(Void aVoid) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    fragment.mActionMode.finish();\r\n    fragment.refreshList();\r\n}",
  "start_lineno" : "1474",
  "methodName" : "onPostExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/279",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.ListFragment\n@Override\r\nprotected void onPostExecute(Void aVoid) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1495",
  "ground_truth" : "    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    mSelectedRows = fragment.getListView().getCheckedItemPositions();\r\n}",
  "context" : "@Override\r\nprotected void onPreExecute() {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    mSelectedRows = fragment.getListView().getCheckedItemPositions();\r\n}",
  "start_lineno" : "1491",
  "methodName" : "onPreExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/280",
  "prompt" : "@Override\r\nprotected void onPreExecute() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG_PREFIX = \"tag:\";\n/**\r\n * The preferences key representing the activated item position. Only used on tablets.\r\n */\r\nprivate static final String STATE_ACTIVATED_POSITION = \"activated_position\";\nprivate static final int POPUP_MENU_FIRST_ITEM_POSITION = 0;\npublic static final String ACTION_NEW_NOTE = \"com.automattic.simplenote.NEW_NOTE\";\n/**\r\n * A dummy implementation of the {@link Callbacks} interface that does\r\n * nothing. Used only when this fragment is not attached to an activity.\r\n */\r\nprivate static Callbacks sCallbacks = new Callbacks() {\r\n\r\n    @Override\r\n    public void onActionModeCreated() {\r\n    }\r\n\r\n    @Override\r\n    public void onActionModeDestroyed() {\r\n    }\r\n\r\n    @Override\r\n    public void onNoteSelected(String noteID, String matchOffsets, boolean isMarkdownEnabled, boolean isPreviewEnabled) {\r\n    }\r\n};\nprotected NotesCursorAdapter mNotesAdapter;\nprotected String mSearchString;\nprivate Bucket<Preferences> mBucketPreferences;\nprivate Bucket<Tag> mBucketTag;\nprivate ActionMode mActionMode;\nprivate View mRootView;\nprivate RobotoRegularTextView mEmptyViewButton;\nprivate ImageView mEmptyViewImage;\nprivate TextView mEmptyViewText;\nprivate View mDividerLine;\nprivate FloatingActionButton mFloatingActionButton;\nprivate boolean mIsCondensedNoteList;\nprivate boolean mIsSearching;\nprivate ListView mList;\nprivate RecyclerView mSuggestionList;\nprivate RelativeLayout mSuggestionLayout;\nprivate String mSelectedNoteId;\nprivate SuggestionAdapter mSuggestionAdapter;\nprivate RefreshListTask mRefreshListTask;\nprivate RefreshListForSearchTask mRefreshListForSearchTask;\nprivate int mDeletedItemIndex;\nprivate int mTitleFontSize;\nprivate int mPreviewFontSize;\n/**\r\n * The fragment's current callback object, which is notified of list item\r\n * clicks.\r\n */\r\nprivate Callbacks mCallbacks = sCallbacks;\n/**\r\n * The current activated item position. Only used on tablets.\r\n */\r\nprivate int mActivatedPosition = ListView.INVALID_POSITION;\nprivate ImageView mHasCollaborators;\nprivate ImageView mPinned;\nprivate ImageView mPublished;\nprivate TextView mContent;\nprivate TextView mDate;\nprivate TextView mTitle;\nprivate String mMatchOffsets;\nprivate String mNoteId;\nprivate View mStatus;\nprivate ObjectCursor<Note> mCursor;\nprivate SearchSnippetFormatter.SpanFactory mSnippetHighlighter = new TextHighlighter(requireActivity(), R.attr.listSearchHighlightForegroundColor, R.attr.listSearchHighlightBackgroundColor);\nprivate final List<Suggestion> mSuggestions;\nprivate ImageButton mButtonDelete;\nprivate ImageView mSuggestionIcon;\nprivate TextView mSuggestionText;\nprivate View mView;\nprivate int mViewType;\nprivate List<Suggestion> mListNew;\nprivate List<Suggestion> mListOld;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate boolean mIsFromNavSelect;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();\nprivate List<String> mDeletedNoteIds = new ArrayList<>();\nprivate SoftReference<NoteListFragment> mNoteListFragmentReference;\nprivate SparseBooleanArray mSelectedRows = new SparseBooleanArray();",
  "app_type" : "notes",
  "end_lineno" : "1535",
  "ground_truth" : "        fragment.updateSelectionAfterTrashAction();\r\n        fragment.mActionMode.finish();\r\n        fragment.refreshList();\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onPostExecute(Void aVoid) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    NotesActivity notesActivity = ((NotesActivity) fragment.getActivity());\r\n    if (notesActivity != null) {\r\n        notesActivity.showUndoBarWithNoteIds(mDeletedNoteIds);\r\n    }\r\n    if (!fragment.isDetached()) {\r\n        fragment.updateSelectionAfterTrashAction();\r\n        fragment.mActionMode.finish();\r\n        fragment.refreshList();\r\n    }\r\n}",
  "start_lineno" : "1521",
  "methodName" : "onPostExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java",
  "task_id" : "simplenote-android/281",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.ListFragment\n@Override\r\nprotected void onPostExecute(Void aVoid) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    NotesActivity notesActivity = ((NotesActivity) fragment.getActivity());\r\n    if (notesActivity != null) {\r\n        notesActivity.showUndoBarWithNoteIds(mDeletedNoteIds);\r\n    }\r\n    if (!fragment.isDetached()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_DARK = \"key_list_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "    if (((Simplenote) context.getApplicationContext()).getSimperium().getUser().getStatus().equals(User.Status.AUTHORIZED)) {\r\n        resizeWidget(context, newOptions, views);\r\n    }\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "context" : "@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidgetList(context, false));\r\n    if (((Simplenote) context.getApplicationContext()).getSimperium().getUser().getStatus().equals(User.Status.AUTHORIZED)) {\r\n        resizeWidget(context, newOptions, views);\r\n    }\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "start_lineno" : "35",
  "methodName" : "onAppWidgetOptionsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetDark.java",
  "task_id" : "simplenote-android/282",
  "prompt" : "import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidgetList(context, false));\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_DARK = \"key_list_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_LIST_WIDGET_IDS_DARK)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_LIST_WIDGET_IDS_DARK);\r\n        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "start_lineno" : "73",
  "methodName" : "onReceive",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetDark.java",
  "task_id" : "simplenote-android/283",
  "prompt" : "import android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_LIST_WIDGET_IDS_DARK)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_LIST_WIDGET_IDS_DARK);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_DARK = \"key_list_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r\n        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "start_lineno" : "83",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetDark.java",
  "task_id" : "simplenote-android/284",
  "prompt" : "import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String EXTRA_IS_LIGHT = \"is_light\";\nprivate Bucket.ObjectCursor<Note> mCursor;\nprivate Context mContext;\nprivate boolean mIsLight;",
  "app_type" : "notes",
  "end_lineno" : "109",
  "ground_truth" : "    Query<Note> query = Note.all(notesBucket);\r\n    query.include(Note.TITLE_INDEX_NAME, Note.CONTENT_PREVIEW_INDEX_NAME);\r\n    PrefUtils.sortNoteQuery(query, mContext, true);\r\n    mCursor = query.execute();\r\n}",
  "context" : "@Override\r\npublic void onDataSetChanged() {\r\n    if (mCursor != null) {\r\n        mCursor.close();\r\n    }\r\n    Bucket<Note> notesBucket = ((Simplenote) mContext.getApplicationContext()).getNotesBucket();\r\n    Query<Note> query = Note.all(notesBucket);\r\n    query.include(Note.TITLE_INDEX_NAME, Note.CONTENT_PREVIEW_INDEX_NAME);\r\n    PrefUtils.sortNoteQuery(query, mContext, true);\r\n    mCursor = query.execute();\r\n}",
  "start_lineno" : "98",
  "methodName" : "onDataSetChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetFactory.java",
  "task_id" : "simplenote-android/285",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.content.Context\n@Override\r\npublic void onDataSetChanged() {\r\n    if (mCursor != null) {\r\n        mCursor.close();\r\n    }\r\n    Bucket<Note> notesBucket = ((Simplenote) mContext.getApplicationContext()).getNotesBucket();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_IS_LIGHT = \"is_light\";\nprivate Bucket.ObjectCursor<Note> mCursor;\nprivate Context mContext;\nprivate boolean mIsLight;",
  "app_type" : "notes",
  "end_lineno" : "116",
  "ground_truth" : "        mCursor.close();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    if (mCursor != null) {\r\n        mCursor.close();\r\n    }\r\n}",
  "start_lineno" : "111",
  "methodName" : "onDestroy",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetFactory.java",
  "task_id" : "simplenote-android/286",
  "prompt" : "@Override\r\npublic void onDestroy() {\r\n    if (mCursor != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_LIGHT = \"key_list_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "    if (((Simplenote) context.getApplicationContext()).getSimperium().getUser().getStatus().equals(User.Status.AUTHORIZED)) {\r\n        resizeWidget(context, newOptions, views);\r\n    }\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "context" : "@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidgetList(context, true));\r\n    if (((Simplenote) context.getApplicationContext()).getSimperium().getUser().getStatus().equals(User.Status.AUTHORIZED)) {\r\n        resizeWidget(context, newOptions, views);\r\n    }\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "start_lineno" : "35",
  "methodName" : "onAppWidgetOptionsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetLight.java",
  "task_id" : "simplenote-android/287",
  "prompt" : "import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidgetList(context, true));\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_LIGHT = \"key_list_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "81",
  "ground_truth" : "        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_LIST_WIDGET_IDS_LIGHT)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_LIST_WIDGET_IDS_LIGHT);\r\n        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "start_lineno" : "73",
  "methodName" : "onReceive",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetLight.java",
  "task_id" : "simplenote-android/288",
  "prompt" : "import android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_LIST_WIDGET_IDS_LIGHT)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_LIST_WIDGET_IDS_LIGHT);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_LIST_WIDGET_IDS_LIGHT = \"key_list_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r\n        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "start_lineno" : "83",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetLight.java",
  "task_id" : "simplenote-android/289",
  "prompt" : "import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "139",
  "ground_truth" : "                ((NestedScrollView) layout).smoothScrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n            }\r\n        }\r\n    }, delay);\r\n}",
  "context" : "@Override\r\npublic void onPageFinished(final WebView view, String url) {\r\n    super.onPageFinished(view, url);\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mNote != null && mNote.getSimperiumKey() != null) {\r\n                ((NestedScrollView) layout).smoothScrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n            }\r\n        }\r\n    }, delay);\r\n}",
  "start_lineno" : "124",
  "methodName" : "onPageFinished",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/290",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.webkit.WebView\nimport android.view.View\nimport android.os.Handler\n@Override\r\npublic void onPageFinished(final WebView view, String url) {\r\n    super.onPageFinished(view, url);\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mNote != null && mNote.getSimperiumKey() != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "135",
  "ground_truth" : "        ((NestedScrollView) layout).smoothScrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (mNote != null && mNote.getSimperiumKey() != null) {\r\n        ((NestedScrollView) layout).smoothScrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n    }\r\n}",
  "start_lineno" : "130",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/291",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic void run() {\r\n    if (mNote != null && mNote.getSimperiumKey() != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "157",
  "ground_truth" : "    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r\n    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "141",
  "methodName" : "shouldOverrideUrlLoading",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/292",
  "prompt" : "import com.automattic.simplenote.utils.SimplenoteLinkify\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport android.webkit.WebView\nimport android.webkit.WebResourceRequest\nimport android.view.View\nimport com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\n@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "237",
  "ground_truth" : "    Intent intent = new Intent(requireActivity(), CollaboratorsActivity.class);\r\n    intent.putExtra(CollaboratorsActivity.NOTE_ID_ARG, mNote.getSimperiumKey());\r\n    startActivity(intent);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_COLLABORATORS_ACCESSED, CATEGORY_NOTE, \"collaborators_ui_accessed\");\r\n}",
  "context" : "private void navigateToCollaborators() {\r\n    if (getActivity() == null || mNote == null) {\r\n        return;\r\n    }\r\n    Intent intent = new Intent(requireActivity(), CollaboratorsActivity.class);\r\n    intent.putExtra(CollaboratorsActivity.NOTE_ID_ARG, mNote.getSimperiumKey());\r\n    startActivity(intent);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_COLLABORATORS_ACCESSED, CATEGORY_NOTE, \"collaborators_ui_accessed\");\r\n}",
  "start_lineno" : "223",
  "methodName" : "navigateToCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/293",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void navigateToCollaborators() {\r\n    if (getActivity() == null || mNote == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "242",
  "ground_truth" : "    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}",
  "context" : "private void deleteNote() {\r\n    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}",
  "start_lineno" : "239",
  "methodName" : "deleteNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/294",
  "prompt" : "import com.automattic.simplenote.models.Note\nprivate void deleteNote() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "278",
  "ground_truth" : "    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteMarkdownFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Destroyed (NoteMarkdownFragment)\");\r\n}",
  "context" : "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mNotesBucket.removeListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteMarkdownFragment)\");\r\n    AppLog.add(Type.SCREEN, \"Destroyed (NoteMarkdownFragment)\");\r\n}",
  "start_lineno" : "272",
  "methodName" : "onDestroy",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/295",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mNotesBucket.removeListener(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "320",
  "ground_truth" : "        mNote = note;\r\n        requireActivity().invalidateOptionsMenu();\r\n    }\r\n    AppLog.add(Type.SYNC, \"Saved note callback in NoteMarkdownFragment (ID: \" + note.getSimperiumKey() + \" / Title: \" + note.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(note.getContent()) + \" / Words: \" + NoteUtils.getWordCount(note.getContent()) + \")\");\r\n}",
  "context" : "@Override\r\npublic void onSaveObject(Bucket<Note> bucket, Note note) {\r\n    if (note.equals(mNote)) {\r\n        mNote = note;\r\n        requireActivity().invalidateOptionsMenu();\r\n    }\r\n    AppLog.add(Type.SYNC, \"Saved note callback in NoteMarkdownFragment (ID: \" + note.getSimperiumKey() + \" / Title: \" + note.getTitle() + \" / Characters: \" + NoteUtils.getCharactersCount(note.getContent()) + \" / Words: \" + NoteUtils.getWordCount(note.getContent()) + \")\");\r\n}",
  "start_lineno" : "306",
  "methodName" : "onSaveObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/296",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onSaveObject(Bucket<Note> bucket, Note note) {\r\n    if (note.equals(mNote)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "328",
  "ground_truth" : "    // fragment was created.  So, open the note again to show the markdown preview.\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown == null) {\r\n        SimplenoteLinkify.openNote(requireActivity(), mNote.getSimperiumKey());\r\n    }\r\n}",
  "context" : "private void checkWebView() {\r\n    // When a WebView is installed and mMarkdown is null, a WebView was not installed when the\r\n    // fragment was created.  So, open the note again to show the markdown preview.\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown == null) {\r\n        SimplenoteLinkify.openNote(requireActivity(), mNote.getSimperiumKey());\r\n    }\r\n}",
  "start_lineno" : "322",
  "methodName" : "checkWebView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/297",
  "prompt" : "import android.webkit.WebView\nimport android.view.View\nprivate void checkWebView() {\r\n    // When a WebView is installed and mMarkdown is null, a WebView was not installed when the\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "334",
  "ground_truth" : "        mMarkdown.loadDataWithBaseURL(null, getMarkdownFormattedContent(mCss, text), \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "context" : "public void updateMarkdown(String text) {\r\n    if (mMarkdown != null) {\r\n        mMarkdown.loadDataWithBaseURL(null, getMarkdownFormattedContent(mCss, text), \"text/html\", \"utf-8\", null);\r\n    }\r\n}",
  "start_lineno" : "330",
  "methodName" : "updateMarkdown",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/298",
  "prompt" : "public void updateMarkdown(String text) {\r\n    if (mMarkdown != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "381",
  "ground_truth" : "    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r\n    fragment.mIsLoadingNote = true;\r\n}",
  "context" : "@Override\r\nprotected void onPreExecute() {\r\n    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r\n    fragment.mIsLoadingNote = true;\r\n}",
  "start_lineno" : "377",
  "methodName" : "onPreExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/299",
  "prompt" : "@Override\r\nprotected void onPreExecute() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String ARG_ITEM_ID = \"item_id\";\nprivate Bucket<Note> mNotesBucket;\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\nprivate String mCss;\nprivate WebView mMarkdown;\nprivate boolean mIsLoadingNote;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;",
  "app_type" : "notes",
  "end_lineno" : "410",
  "ground_truth" : "    fragment.mIsLoadingNote = false;\r\n    fragment.requireActivity().invalidateOptionsMenu();\r\n}",
  "context" : "@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r\n    fragment.mIsLoadingNote = false;\r\n    fragment.requireActivity().invalidateOptionsMenu();\r\n}",
  "start_lineno" : "405",
  "methodName" : "onPostExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java",
  "task_id" : "simplenote-android/300",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "184",
  "ground_truth" : "        public void run() {\r\n            updateNavigationDrawerItems();\r\n        }\r\n    });\r\n}",
  "context" : "void updateNavigationDrawer() {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        public void run() {\r\n            updateNavigationDrawerItems();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "178",
  "methodName" : "updateNavigationDrawer",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/301",
  "prompt" : "void updateNavigationDrawer() {\r\n    runOnUiThread(new Runnable() {\r\n\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "311",
  "ground_truth" : "    super.onNewIntent(intent);\r\n    checkForSharedContent(intent);\r\n}",
  "context" : "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    checkForSharedContent(intent);\r\n}",
  "start_lineno" : "307",
  "methodName" : "onNewIntent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/302",
  "prompt" : "import android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "425",
  "ground_truth" : "    AuthUtils.logOut((Simplenote) getApplication());\r\n    finish();\r\n}",
  "context" : "@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    AuthUtils.logOut((Simplenote) getApplication());\r\n    finish();\r\n}",
  "start_lineno" : "421",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/303",
  "prompt" : "import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "442",
  "ground_truth" : "    mNotesBucket.removeOnSaveObjectListener(this);\r\n    mNotesBucket.removeOnDeleteObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NotesActivity)\");\r\n    AppLog.add(Type.SCREEN, \"Paused (NotesActivity)\");\r\n}",
  "context" : "@Override\r\nprotected void onPause() {\r\n    // Always call the superclass method first\r\n    super.onPause();\r\n    mTagsBucket.removeListener(mTagsMenuUpdater);\r\n    AppLog.add(Type.SYNC, \"Removed tag bucket listener (NotesActivity)\");\r\n    mNotesBucket.removeOnNetworkChangeListener(this);\r\n    mNotesBucket.removeOnSaveObjectListener(this);\r\n    mNotesBucket.removeOnDeleteObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NotesActivity)\");\r\n    AppLog.add(Type.SCREEN, \"Paused (NotesActivity)\");\r\n}",
  "start_lineno" : "431",
  "methodName" : "onPause",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/304",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport android.view.Menu\nimport android.app.Activity\n@Override\r\nprotected void onPause() {\r\n    // Always call the superclass method first\r\n    super.onPause();\r\n    mTagsBucket.removeListener(mTagsMenuUpdater);\r\n    AppLog.add(Type.SYNC, \"Removed tag bucket listener (NotesActivity)\");\r\n    mNotesBucket.removeOnNetworkChangeListener(this);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "448",
  "ground_truth" : "    outState.putBoolean(STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED, mHasTappedNoteListWidgetButton);\r\n    super.onSaveInstanceState(outState);\r\n}",
  "context" : "@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    outState.putBoolean(STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED, mHasTappedNoteListWidgetButton);\r\n    super.onSaveInstanceState(outState);\r\n}",
  "start_lineno" : "444",
  "methodName" : "onSaveInstanceState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/305",
  "prompt" : "import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "455",
  "ground_truth" : "        getSupportActionBar().setTitle(title);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void setTitle(CharSequence title) {\r\n    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setTitle(title);\r\n    }\r\n}",
  "start_lineno" : "450",
  "methodName" : "setTitle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/306",
  "prompt" : "import androidx.appcompat.app.ActionBar\n@Override\r\npublic void setTitle(CharSequence title) {\r\n    if (getSupportActionBar() != null) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "464",
  "ground_truth" : "        mDrawerLayout.closeDrawer(GravityCompat.START);\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onBackPressed() {\r\n    if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n        mDrawerLayout.closeDrawer(GravityCompat.START);\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}",
  "start_lineno" : "457",
  "methodName" : "onBackPressed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/307",
  "prompt" : "import androidx.drawerlayout.widget.DrawerLayout\nimport androidx.core.view.GravityCompat\n@Override\r\npublic void onBackPressed() {\r\n    if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "476",
  "ground_truth" : "        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onActionModeDestroyed() {\r\n    if (mSearchMenuItem != null && !mSearchMenuItem.isActionViewExpanded()) {\r\n        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\r\n    }\r\n}",
  "start_lineno" : "471",
  "methodName" : "onActionModeDestroyed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/308",
  "prompt" : "import android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onActionModeDestroyed() {\r\n    if (mSearchMenuItem != null && !mSearchMenuItem.isActionViewExpanded()) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "490",
  "ground_truth" : "    new int[] { android.R.attr.state_checked }, // unchecked\r\n    new int[] { -android.R.attr.state_checked } };\r\n    int[] colors = new int[] { ThemeUtils.getColorFromAttribute(NotesActivity.this, R.attr.colorAccent), ThemeUtils.getColorFromAttribute(NotesActivity.this, R.attr.toolbarIconColor) };\r\n    return new ColorStateList(states, colors);\r\n}",
  "context" : "private ColorStateList getIconSelector() {\r\n    int[][] states = new int[][] { // checked\r\n    new int[] { android.R.attr.state_checked }, // unchecked\r\n    new int[] { -android.R.attr.state_checked } };\r\n    int[] colors = new int[] { ThemeUtils.getColorFromAttribute(NotesActivity.this, R.attr.colorAccent), ThemeUtils.getColorFromAttribute(NotesActivity.this, R.attr.toolbarIconColor) };\r\n    return new ColorStateList(states, colors);\r\n}",
  "start_lineno" : "478",
  "methodName" : "getIconSelector",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/309",
  "prompt" : "import java.util.List\nimport android.content.res.ColorStateList\nprivate ColorStateList getIconSelector() {\r\n    int[][] states = new int[][] { // checked\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "562",
  "ground_truth" : "        Intent intent = new Intent(NotesActivity.this, PreferencesActivity.class);\r\n        startActivityForResult(intent, Simplenote.INTENT_PREFERENCES);\r\n        mIsSettingsClicked = false;\r\n    }\r\n}",
  "context" : "public void onDrawerClosed(View view) {\r\n    supportInvalidateOptionsMenu();\r\n    if (mIsSettingsClicked) {\r\n        Intent intent = new Intent(NotesActivity.this, PreferencesActivity.class);\r\n        startActivityForResult(intent, Simplenote.INTENT_PREFERENCES);\r\n        mIsSettingsClicked = false;\r\n    }\r\n}",
  "start_lineno" : "554",
  "methodName" : "onDrawerClosed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/310",
  "prompt" : "import java.util.Set\nimport android.view.View\nimport android.view.Menu\npublic void onDrawerClosed(View view) {\r\n    supportInvalidateOptionsMenu();\r\n    if (mIsSettingsClicked) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "705",
  "ground_truth" : "            tags.add(tag);\r\n        }\r\n    }\r\n    return tags;\r\n}",
  "context" : "private List<Tag> getTagsFromCursor(Bucket.ObjectCursor<Tag> tagCursor) {\r\n    List<Tag> tags = new ArrayList<>();\r\n    for (int i = 0; i < tagCursor.getCount(); i++) {\r\n        tagCursor.moveToNext();\r\n        Tag tag = tagCursor.getObject();\r\n        if (!collaboratorsRepository.isValidCollaborator(tag.getName())) {\r\n            tags.add(tag);\r\n        }\r\n    }\r\n    return tags;\r\n}",
  "start_lineno" : "693",
  "methodName" : "getTagsFromCursor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/311",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nprivate List<Tag> getTagsFromCursor(Bucket.ObjectCursor<Tag> tagCursor) {\r\n    List<Tag> tags = new ArrayList<>();\r\n    for (int i = 0; i < tagCursor.getCount(); i++) {\r\n        tagCursor.moveToNext();\r\n        Tag tag = tagCursor.getObject();\r\n        if (!collaboratorsRepository.isValidCollaborator(tag.getName())) {\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "762",
  "ground_truth" : "    AnalyticsTracker.track(AnalyticsTracker.Stat.SEARCH_EMPTY_TAPPED, AnalyticsTracker.CATEGORY_SEARCH, \"search_empty_tapped_new_note\");\r\n    getNoteListFragment().createNewNote(isSearchQueryNotNull() ? mSearchView.getQuery().toString() : \"\", \"new_note_search\");\r\n}",
  "context" : "public void createNewNote(View view) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.SEARCH_EMPTY_TAPPED, AnalyticsTracker.CATEGORY_SEARCH, \"search_empty_tapped_new_note\");\r\n    getNoteListFragment().createNewNote(isSearchQueryNotNull() ? mSearchView.getQuery().toString() : \"\", \"new_note_search\");\r\n}",
  "start_lineno" : "753",
  "methodName" : "createNewNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/312",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.view.View\npublic void createNewNote(View view) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "782",
  "ground_truth" : "    } else {\r\n        mNavigationMenu.findItem(ALL_NOTES_ID).setChecked(true);\r\n    }\r\n    setTitle(mSelectedTag.name);\r\n}",
  "context" : "private void setSelectedTagActive() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r\n    }\r\n    MenuItem selectedMenuItem = mNavigationMenu.findItem((int) mSelectedTag.id);\r\n    if (selectedMenuItem != null) {\r\n        selectedMenuItem.setChecked(true);\r\n    } else {\r\n        mNavigationMenu.findItem(ALL_NOTES_ID).setChecked(true);\r\n    }\r\n    setTitle(mSelectedTag.name);\r\n}",
  "start_lineno" : "768",
  "methodName" : "setSelectedTagActive",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/313",
  "prompt" : "import com.automattic.simplenote.utils.TagsAdapter\nimport com.automattic.simplenote.models.Tag\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void setSelectedTagActive() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r\n    }\r\n    MenuItem selectedMenuItem = mNavigationMenu.findItem((int) mSelectedTag.id);\r\n    if (selectedMenuItem != null) {\r\n        selectedMenuItem.setChecked(true);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "790",
  "ground_truth" : "    }\r\n    return mSelectedTag;\r\n}",
  "context" : "public TagsAdapter.TagMenuItem getSelectedTag() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r\n    }\r\n    return mSelectedTag;\r\n}",
  "start_lineno" : "784",
  "methodName" : "getSelectedTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/314",
  "prompt" : "import com.automattic.simplenote.utils.TagsAdapter\nimport com.automattic.simplenote.models.Tag\nimport android.view.MenuItem\nimport android.view.Menu\npublic TagsAdapter.TagMenuItem getSelectedTag() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "808",
  "ground_truth" : "    } else {\r\n        mEmptyTrashMenuItem.setIcon(R.drawable.av_trash_empty_24dp);\r\n        mEmptyTrashMenuItem.setEnabled(true);\r\n    }\r\n}",
  "context" : "// Set trash action bar button enabled/disabled and icon based on deleted notes or not.\r\npublic void updateTrashMenuItem() {\r\n    if (mEmptyTrashMenuItem == null || mNotesBucket == null) {\r\n        return;\r\n    }\r\n    // Disable trash icon if there are no trashed notes.\r\n    Query<Note> query = Note.allDeleted(mNotesBucket);\r\n    if (query.count() == 0) {\r\n        mEmptyTrashMenuItem.setIcon(R.drawable.ic_trash_disabled_24dp);\r\n        mEmptyTrashMenuItem.setEnabled(false);\r\n    } else {\r\n        mEmptyTrashMenuItem.setIcon(R.drawable.av_trash_empty_24dp);\r\n        mEmptyTrashMenuItem.setEnabled(true);\r\n    }\r\n}",
  "start_lineno" : "793",
  "methodName" : "updateTrashMenuItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/315",
  "prompt" : "import java.util.Set\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\n// Set trash action bar button enabled/disabled and icon based on deleted notes or not.\r\npublic void updateTrashMenuItem() {\r\n    if (mEmptyTrashMenuItem == null || mNotesBucket == null) {\r\n        return;\r\n    }\r\n    // Disable trash icon if there are no trashed notes.\r\n    Query<Note> query = Note.allDeleted(mNotesBucket);\r\n    if (query.count() == 0) {\r\n        mEmptyTrashMenuItem.setIcon(R.drawable.ic_trash_disabled_24dp);\r\n        mEmptyTrashMenuItem.setEnabled(false);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "824",
  "ground_truth" : "        }, getResources().getInteger(R.integer.time_animation));\r\n    } else {\r\n        updateTrashMenuItem();\r\n    }\r\n}",
  "context" : "public void updateTrashMenuItem(boolean shouldWaitForAnimation) {\r\n    if (shouldWaitForAnimation) {\r\n        new Handler().postDelayed(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateTrashMenuItem();\r\n            }\r\n        }, getResources().getInteger(R.integer.time_animation));\r\n    } else {\r\n        updateTrashMenuItem();\r\n    }\r\n}",
  "start_lineno" : "810",
  "methodName" : "updateTrashMenuItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/316",
  "prompt" : "import android.view.MenuItem\nimport android.view.Menu\nimport android.os.Handler\npublic void updateTrashMenuItem(boolean shouldWaitForAnimation) {\r\n    if (shouldWaitForAnimation) {\r\n        new Handler().postDelayed(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateTrashMenuItem();\r\n            }\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "833",
  "ground_truth" : "    mNoteEditorFragment = new NoteEditorFragment();\r\n    ft.add(R.id.note_fragment_container, mNoteEditorFragment, TAG_NOTE_EDITOR);\r\n    ft.commitAllowingStateLoss();\r\n    fm.executePendingTransactions();\r\n}",
  "context" : "private void addEditorFragment() {\r\n    FragmentManager fm = getSupportFragmentManager();\r\n    FragmentTransaction ft = fm.beginTransaction();\r\n    mNoteEditorFragment = new NoteEditorFragment();\r\n    ft.add(R.id.note_fragment_container, mNoteEditorFragment, TAG_NOTE_EDITOR);\r\n    ft.commitAllowingStateLoss();\r\n    fm.executePendingTransactions();\r\n}",
  "start_lineno" : "826",
  "methodName" : "addEditorFragment",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/317",
  "prompt" : "import androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.FragmentManager\nprivate void addEditorFragment() {\r\n    FragmentManager fm = getSupportFragmentManager();\r\n    FragmentTransaction ft = fm.beginTransaction();\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "864",
  "ground_truth" : "    Simplenote currentApp = (Simplenote) getApplication();\r\n    return currentApp.getSimperium().getUser().getStatus() == User.Status.NOT_AUTHORIZED;\r\n}",
  "context" : "public boolean userIsUnauthorized() {\r\n    Simplenote currentApp = (Simplenote) getApplication();\r\n    return currentApp.getSimperium().getUser().getStatus() == User.Status.NOT_AUTHORIZED;\r\n}",
  "start_lineno" : "861",
  "methodName" : "userIsUnauthorized",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/318",
  "prompt" : "public boolean userIsUnauthorized() {\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "919",
  "ground_truth" : "    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onQueryTextChange(String newText) {\r\n    if (mSearchMenuItem.isActionViewExpanded()) {\r\n        getNoteListFragment().searchNotes(newText, false);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "912",
  "methodName" : "onQueryTextChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/319",
  "prompt" : "import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onQueryTextChange(String newText) {\r\n    if (mSearchMenuItem.isActionViewExpanded()) {\r\n        getNoteListFragment().searchNotes(newText, false);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "927",
  "ground_truth" : "    checkEmptyListText(true);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onQueryTextSubmit(String queryText) {\r\n    getNoteListFragment().searchNotes(queryText, true);\r\n    getNoteListFragment().addSearchItem(queryText, 0);\r\n    checkEmptyListText(true);\r\n    return true;\r\n}",
  "start_lineno" : "921",
  "methodName" : "onQueryTextSubmit",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/320",
  "prompt" : "import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic boolean onQueryTextSubmit(String queryText) {\r\n    getNoteListFragment().searchNotes(queryText, true);\r\n    getNoteListFragment().addSearchItem(queryText, 0);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "985",
  "ground_truth" : "    }\r\n    return false;\r\n}",
  "context" : "@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (!mSearchMenuItem.isActionViewExpanded()) {\r\n        showDetailPlaceholder();\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "979",
  "methodName" : "onMenuItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/321",
  "prompt" : "import android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (!mSearchMenuItem.isActionViewExpanded()) {\r\n        showDetailPlaceholder();\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1084",
  "ground_truth" : "    setIconAfterAnimation(item, R.drawable.ic_trash_disabled_24dp, R.string.empty_trash);\r\n    AnalyticsTracker.track(LIST_TRASH_EMPTIED, CATEGORY_NOTE, \"overflow_menu\");\r\n}",
  "context" : "public void onClick(DialogInterface dialog, int whichButton) {\r\n    new EmptyTrashTask(NotesActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n    setIconAfterAnimation(item, R.drawable.ic_trash_disabled_24dp, R.string.empty_trash);\r\n    AnalyticsTracker.track(LIST_TRASH_EMPTIED, CATEGORY_NOTE, \"overflow_menu\");\r\n}",
  "start_lineno" : "1076",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/322",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.os.AsyncTask\nimport android.content.DialogInterface\nimport android.app.Activity\npublic void onClick(DialogInterface dialog, int whichButton) {\r\n    new EmptyTrashTask(NotesActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1162",
  "ground_truth" : "                invalidateOptionsMenu();\r\n            }\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "context" : "private void setIconAfterAnimation(final MenuItem item, @DrawableRes final int drawable, @StringRes final int string) {\r\n    DrawableUtils.startAnimatedVectorDrawable(item.getIcon());\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            item.setIcon(drawable);\r\n            item.setTitle(string);\r\n            if (item == mEmptyTrashMenuItem) {\r\n                invalidateOptionsMenu();\r\n            }\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "start_lineno" : "1146",
  "methodName" : "setIconAfterAnimation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/323",
  "prompt" : "import com.automattic.simplenote.utils.DrawableUtils\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.os.Handler\nprivate void setIconAfterAnimation(final MenuItem item, @DrawableRes final int drawable, @StringRes final int string) {\r\n    DrawableUtils.startAnimatedVectorDrawable(item.getIcon());\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            item.setIcon(drawable);\r\n            item.setTitle(string);\r\n            if (item == mEmptyTrashMenuItem) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1158",
  "ground_truth" : "    item.setTitle(string);\r\n    if (item == mEmptyTrashMenuItem) {\r\n        invalidateOptionsMenu();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    item.setIcon(drawable);\r\n    item.setTitle(string);\r\n    if (item == mEmptyTrashMenuItem) {\r\n        invalidateOptionsMenu();\r\n    }\r\n}",
  "start_lineno" : "1150",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/324",
  "prompt" : "@Override\r\npublic void run() {\r\n    item.setIcon(drawable);\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1174",
  "ground_truth" : "        } else {\r\n            mSearchView.setQuery(selection, true);\r\n        }\r\n    }\r\n}",
  "context" : "public void submitSearch(String selection) {\r\n    if (mSearchView != null) {\r\n        String query = mSearchView.getQuery().toString();\r\n        if (query.endsWith(TAG_PREFIX)) {\r\n            mSearchView.setQuery(query.substring(0, query.lastIndexOf(TAG_PREFIX)) + selection, true);\r\n        } else {\r\n            mSearchView.setQuery(selection, true);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "1164",
  "methodName" : "submitSearch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/325",
  "prompt" : "import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\nimport androidx.appcompat.widget.SearchView\nimport android.view.View\nimport com.automattic.simplenote.NoteListFragment.TAG_PREFIX\npublic void submitSearch(String selection) {\r\n    if (mSearchView != null) {\r\n        String query = mSearchView.getQuery().toString();\r\n        if (query.endsWith(TAG_PREFIX)) {\r\n            mSearchView.setQuery(query.substring(0, query.lastIndexOf(TAG_PREFIX)) + selection, true);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1263",
  "ground_truth" : "        public void run() {\r\n            invalidateOptionsMenu();\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "context" : "public void setMarkdownShowing(boolean isMarkdownShowing) {\r\n    mIsShowingMarkdown = isMarkdownShowing;\r\n    if (mNoteEditorFragment != null) {\r\n        if (isMarkdownShowing) {\r\n            mNoteEditorFragment.showMarkdown();\r\n        } else {\r\n            mNoteEditorFragment.hideMarkdown();\r\n        }\r\n    }\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            invalidateOptionsMenu();\r\n        }\r\n    }, getResources().getInteger(R.integer.time_animation));\r\n}",
  "start_lineno" : "1243",
  "methodName" : "setMarkdownShowing",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/326",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.os.Handler\npublic void setMarkdownShowing(boolean isMarkdownShowing) {\r\n    mIsShowingMarkdown = isMarkdownShowing;\r\n    if (mNoteEditorFragment != null) {\r\n        if (isMarkdownShowing) {\r\n            mNoteEditorFragment.showMarkdown();\r\n        } else {\r\n            mNoteEditorFragment.hideMarkdown();\r\n        }\r\n    }\r\n    new Handler().postDelayed(new Runnable() {\r\n\r\n        @Override\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1320",
  "ground_truth" : "    // New account created\r\n    AnalyticsTracker.track(USER_ACCOUNT_CREATED, CATEGORY_USER, \"account_created_from_login_activity\");\r\n}",
  "context" : "@Override\r\npublic void onUserCreated(User user) {\r\n    // New account created\r\n    AnalyticsTracker.track(USER_ACCOUNT_CREATED, CATEGORY_USER, \"account_created_from_login_activity\");\r\n}",
  "start_lineno" : "1312",
  "methodName" : "onUserCreated",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/327",
  "prompt" : "import com.simperium.client.User\n@Override\r\npublic void onUserCreated(User user) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1368",
  "ground_truth" : "        setToolbarProgressVisibility(true);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (!mNotesBucket.hasChangeVersion()) {\r\n        setToolbarProgressVisibility(true);\r\n    }\r\n}",
  "start_lineno" : "1363",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/328",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void run() {\r\n    if (!mNotesBucket.hasChangeVersion()) {\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1379",
  "ground_truth" : "    AppLog.add(Type.ACCOUNT, \"Access token not authorized\");\r\n    startLoginActivity();\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    AppLog.add(Type.ACCOUNT, \"Access token not authorized\");\r\n    startLoginActivity();\r\n}",
  "start_lineno" : "1375",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/329",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1393",
  "ground_truth" : "        getSupportActionBar().setDisplayShowCustomEnabled(isVisible);\r\n    }\r\n}",
  "context" : "private void setToolbarProgressVisibility(boolean isVisible) {\r\n    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setDisplayShowCustomEnabled(isVisible);\r\n    }\r\n}",
  "start_lineno" : "1389",
  "methodName" : "setToolbarProgressVisibility",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/330",
  "prompt" : "import androidx.appcompat.widget.Toolbar\nimport androidx.appcompat.app.ActionBar\nprivate void setToolbarProgressVisibility(boolean isVisible) {\r\n    if (getSupportActionBar() != null) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1401",
  "ground_truth" : "    Intent intent = new Intent(NotesActivity.this, SimplenoteAuthenticationActivity.class);\r\n    startActivityForResult(intent, Simperium.SIGNUP_SIGNIN_REQUEST);\r\n}",
  "context" : "public void startLoginActivity() {\r\n    // Clear account-specific data\r\n    AuthUtils.logOut((Simplenote) getApplication());\r\n    Intent intent = new Intent(NotesActivity.this, SimplenoteAuthenticationActivity.class);\r\n    startActivityForResult(intent, Simperium.SIGNUP_SIGNIN_REQUEST);\r\n}",
  "start_lineno" : "1395",
  "methodName" : "startLoginActivity",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/331",
  "prompt" : "import com.automattic.simplenote.utils.AuthUtils\nimport android.app.Activity\npublic void startLoginActivity() {\r\n    // Clear account-specific data\r\n    AuthUtils.logOut((Simplenote) getApplication());\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1492",
  "ground_truth" : "    // Sync the toggle state after onRestoreInstanceState has occurred.\r\n    mDrawerToggle.syncState();\r\n}",
  "context" : "@Override\r\nprotected void onPostCreate(Bundle savedInstanceState) {\r\n    super.onPostCreate(savedInstanceState);\r\n    // Sync the toggle state after onRestoreInstanceState has occurred.\r\n    mDrawerToggle.syncState();\r\n}",
  "start_lineno" : "1487",
  "methodName" : "onPostCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/332",
  "prompt" : "import android.os.Bundle\n@Override\r\nprotected void onPostCreate(Bundle savedInstanceState) {\r\n    super.onPostCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1740",
  "ground_truth" : "        mNoteEditorFragment.clearMarkdown();\r\n        mNoteEditorFragment.hideMarkdown();\r\n        mIsShowingMarkdown = false;\r\n    }\r\n}",
  "context" : "public void showDetailPlaceholder() {\r\n    if (DisplayUtils.isLargeScreenLandscape(this) && mNoteEditorFragment != null) {\r\n        mCurrentNote = null;\r\n        mNoteEditorFragment.setPlaceholderVisible(true);\r\n        mNoteEditorFragment.clearMarkdown();\r\n        mNoteEditorFragment.hideMarkdown();\r\n        mIsShowingMarkdown = false;\r\n    }\r\n}",
  "start_lineno" : "1732",
  "methodName" : "showDetailPlaceholder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/333",
  "prompt" : "import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\npublic void showDetailPlaceholder() {\r\n    if (DisplayUtils.isLargeScreenLandscape(this) && mNoteEditorFragment != null) {\r\n        mCurrentNote = null;\r\n        mNoteEditorFragment.setPlaceholderVisible(true);\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1747",
  "ground_truth" : "    mNotesBucket.removeOnDeleteObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NotesActivity)\");\r\n}",
  "context" : "public void stopListeningToNotesBucket() {\r\n    mNotesBucket.removeOnNetworkChangeListener(this);\r\n    mNotesBucket.removeOnSaveObjectListener(this);\r\n    mNotesBucket.removeOnDeleteObjectListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NotesActivity)\");\r\n}",
  "start_lineno" : "1742",
  "methodName" : "stopListeningToNotesBucket",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/334",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\npublic void stopListeningToNotesBucket() {\r\n    mNotesBucket.removeOnNetworkChangeListener(this);\r\n    mNotesBucket.removeOnSaveObjectListener(this);\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1759",
  "ground_truth" : "    if (!DisplayUtils.isLargeScreenLandscape(this) && getNoteListFragment() != null && getNoteListFragment().getRootView() != null) {\r\n        undoView = getNoteListFragment().getRootView();\r\n    }\r\n    return undoView;\r\n}",
  "context" : "// Returns the appropriate view to show the undo bar within\r\nprivate View getUndoView() {\r\n    View undoView = mFragmentsContainer;\r\n    if (!DisplayUtils.isLargeScreenLandscape(this) && getNoteListFragment() != null && getNoteListFragment().getRootView() != null) {\r\n        undoView = getNoteListFragment().getRootView();\r\n    }\r\n    return undoView;\r\n}",
  "start_lineno" : "1750",
  "methodName" : "getUndoView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/335",
  "prompt" : "import android.view.View\n// Returns the appropriate view to show the undo bar within\r\nprivate View getUndoView() {\r\n    View undoView = mFragmentsContainer;\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1769",
  "ground_truth" : "        mUndoBarController.showUndoBar(getUndoView(), getResources().getQuantityString(R.plurals.trashed_notes, noteIds.size(), noteIds.size()));\r\n    }\r\n}",
  "context" : "public void showUndoBarWithNoteIds(List<String> noteIds) {\r\n    if (mUndoBarController != null) {\r\n        mUndoBarController.setDeletedNoteIds(noteIds);\r\n        mUndoBarController.showUndoBar(getUndoView(), getResources().getQuantityString(R.plurals.trashed_notes, noteIds.size(), noteIds.size()));\r\n    }\r\n}",
  "start_lineno" : "1761",
  "methodName" : "showUndoBarWithNoteIds",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/336",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.utils.UndoBarController\nimport com.automattic.simplenote.models.Note\npublic void showUndoBarWithNoteIds(List<String> noteIds) {\r\n    if (mUndoBarController != null) {\r\n        mUndoBarController.setDeletedNoteIds(noteIds);\r",
  "type" : "java",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1783",
  "ground_truth" : "        setMarkdownShowing(true);\r\n        mCurrentNote.setPreviewEnabled(true);\r\n    }\r\n    mCurrentNote.save();\r\n}",
  "context" : "private void togglePreview(MenuItem item) {\r\n    if (mIsShowingMarkdown) {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_on_off_24dp, R.string.markdown_show);\r\n        setMarkdownShowing(false);\r\n        mCurrentNote.setPreviewEnabled(false);\r\n    } else {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_off_on_24dp, R.string.markdown_hide);\r\n        setMarkdownShowing(true);\r\n        mCurrentNote.setPreviewEnabled(true);\r\n    }\r\n    mCurrentNote.save();\r\n}",
  "start_lineno" : "1771",
  "methodName" : "togglePreview",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/337",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void togglePreview(MenuItem item) {\r\n    if (mIsShowingMarkdown) {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_on_off_24dp, R.string.markdown_show);\r\n        setMarkdownShowing(false);\r\n        mCurrentNote.setPreviewEnabled(false);\r\n    } else {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_off_on_24dp, R.string.markdown_hide);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1798",
  "ground_truth" : "        setIconAfterAnimation(item, R.drawable.av_list_show_hide_24dp, R.string.list_show);\r\n    }\r\n    ft.commitNowAllowingStateLoss();\r\n    mIsTabletFullscreen = mNoteListFragment.isHidden();\r\n}",
  "context" : "private void toggleSidebar(MenuItem item) {\r\n    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\r\n    if (mNoteListFragment.isHidden()) {\r\n        ft.show(mNoteListFragment);\r\n        setIconAfterAnimation(item, R.drawable.av_list_hide_show_24dp, R.string.list_hide);\r\n    } else {\r\n        ft.hide(mNoteListFragment);\r\n        setIconAfterAnimation(item, R.drawable.av_list_show_hide_24dp, R.string.list_show);\r\n    }\r\n    ft.commitNowAllowingStateLoss();\r\n    mIsTabletFullscreen = mNoteListFragment.isHidden();\r\n}",
  "start_lineno" : "1785",
  "methodName" : "toggleSidebar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/338",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.FragmentManager\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void toggleSidebar(MenuItem item) {\r\n    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\r\n    if (mNoteListFragment.isHidden()) {\r\n        ft.show(mNoteListFragment);\r\n        setIconAfterAnimation(item, R.drawable.av_list_hide_show_24dp, R.string.list_hide);\r\n    } else {\r\n        ft.hide(mNoteListFragment);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1813",
  "ground_truth" : "            }\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}",
  "context" : "/* Simperium Bucket Listeners */\r\n// received a change from the network, refresh the list\r\n@Override\r\npublic void onNetworkChange(Bucket<Note> bucket, final Bucket.ChangeType type, String key) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (type == Bucket.ChangeType.INDEX) {\r\n                setToolbarProgressVisibility(false);\r\n            }\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "1802",
  "methodName" : "onNetworkChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/339",
  "prompt" : "import java.util.List\nimport com.simperium.client.Bucket\nimport com.simperium.Simperium\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Note\nimport androidx.appcompat.widget.Toolbar\n/* Simperium Bucket Listeners */\r\n// received a change from the network, refresh the list\r\n@Override\r\npublic void onNetworkChange(Bucket<Note> bucket, final Bucket.ChangeType type, String key) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (type == Bucket.ChangeType.INDEX) {\r\n                setToolbarProgressVisibility(false);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1811",
  "ground_truth" : "    }\r\n    mNoteListFragment.refreshList();\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (type == Bucket.ChangeType.INDEX) {\r\n        setToolbarProgressVisibility(false);\r\n    }\r\n    mNoteListFragment.refreshList();\r\n}",
  "start_lineno" : "1805",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/340",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.AppLog.Type\nimport androidx.appcompat.widget.Toolbar\n@Override\r\npublic void run() {\r\n    if (type == Bucket.ChangeType.INDEX) {\r\n        setToolbarProgressVisibility(false);\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1855",
  "ground_truth" : "        public void run() {\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onDeleteObject(Bucket<Note> bucket, Note object) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "1847",
  "methodName" : "onDeleteObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/341",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onDeleteObject(Bucket<Note> bucket, Note object) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1895",
  "ground_truth" : "    while (cursor.moveToNext()) {\r\n        cursor.getObject().delete();\r\n    }\r\n    return null;\r\n}",
  "context" : "@Override\r\nprotected Void doInBackground(Void... voids) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity.mNotesBucket == null) {\r\n        return null;\r\n    }\r\n    Query<Note> query = Note.allDeleted(activity.mNotesBucket);\r\n    Bucket.ObjectCursor cursor = query.execute();\r\n    while (cursor.moveToNext()) {\r\n        cursor.getObject().delete();\r\n    }\r\n    return null;\r\n}",
  "start_lineno" : "1879",
  "methodName" : "doInBackground",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/342",
  "prompt" : "import com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Void... voids) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity.mNotesBucket == null) {\r\n        return null;\r\n    }\r\n    Query<Note> query = Note.allDeleted(activity.mNotesBucket);\r\n    Bucket.ObjectCursor cursor = query.execute();\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static String TAG_NOTE_LIST = \"noteList\";\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\npublic static final String KEY_ALREADY_LOGGED_IN = \"KEY_ALREADY_LOGGED_IN\";\nprivate static String STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED = \"STATE_NOTE_LIST_WIDGET_BUTTON_TAPPED\";\nprotected Bucket<Note> mNotesBucket;\nprotected Bucket<Tag> mTagsBucket;\nprivate boolean mHasTappedNoteListWidgetButton;\nprivate boolean mIsSettingsClicked;\nprivate boolean mIsShowingMarkdown;\nprivate boolean mIsTabletFullscreen;\nprivate boolean mShouldSelectNewNote;\nprivate Menu mMenu;\nprivate String mTabletSearchQuery;\nprivate UndoBarController mUndoBarController;\nprivate View mFragmentsContainer;\nprivate SearchView mSearchView;\nprivate MenuItem mSearchMenuItem;\nprivate NoteListFragment mNoteListFragment;\nprivate NoteEditorFragment mNoteEditorFragment;\nprivate Note mCurrentNote;\nprivate MenuItem mEmptyTrashMenuItem;\nprivate Handler mInvalidateOptionsMenuHandler = new Handler();\nprivate Runnable mInvalidateOptionsMenuRunnable = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        invalidateOptionsMenu();\r\n    }\r\n};\nprivate IapViewModel viewModel;\nprivate static final int GROUP_SECONDARY = 101;\nprivate static final int GROUP_TERTIARY = 102;\nprivate DrawerLayout mDrawerLayout;\nprivate Menu mNavigationMenu;\nprivate ActionBarDrawerToggle mDrawerToggle;\nprivate TagsAdapter mTagsAdapter;\nprivate TagsAdapter.TagMenuItem mSelectedTag;\n@Inject\r\nCollaboratorsRepository collaboratorsRepository;\nprivate SoftReference<NotesActivity> mNotesActivityReference;",
  "app_type" : "notes",
  "end_lineno" : "1904",
  "ground_truth" : "        activity.showDetailPlaceholder();\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity != null) {\r\n        activity.showDetailPlaceholder();\r\n    }\r\n}",
  "start_lineno" : "1897",
  "methodName" : "onPostExecute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java",
  "task_id" : "simplenote-android/343",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity != null) {\r",
  "type" : "android",
  "actions" : "android.intent.action.MAIN\nandroid.intent.action.SEND\ncom.google.android.gm.action.AUTO_SEND\ncom.google.android.voicesearch.action.AUTO_SEND\ncom.automattic.simplenote.NEW_NOTE\nandroid.intent.action.VIEW"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_DARK = \"key_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_WIDGET_IDS_DARK)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_WIDGET_IDS_DARK);\r\n        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "start_lineno" : "34",
  "methodName" : "onReceive",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDark.java",
  "task_id" : "simplenote-android/344",
  "prompt" : "import android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_WIDGET_IDS_DARK)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_WIDGET_IDS_DARK);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_DARK = \"key_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r\n        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDark.java",
  "task_id" : "simplenote-android/345",
  "prompt" : "import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_DARK = \"key_widget_ids_dark\";",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "context" : "@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, false));\r\n    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "start_lineno" : "52",
  "methodName" : "onAppWidgetOptionsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDark.java",
  "task_id" : "simplenote-android/346",
  "prompt" : "import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, false));\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "private AppWidgetManager mWidgetManager;\nprivate NotesCursorAdapter mNotesAdapter;\nprivate RemoteViews mRemoteViews;\nprivate Simplenote mApplication;\nprivate int mAppWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;\nprivate final ObjectCursor<Note> mCursor;",
  "app_type" : "notes",
  "end_lineno" : "154",
  "ground_truth" : "    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}",
  "context" : "@Override\r\npublic Note getItem(int position) {\r\n    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}",
  "start_lineno" : "150",
  "methodName" : "getItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDarkConfigureActivity.java",
  "task_id" : "simplenote-android/347",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r",
  "type" : "java",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_LIGHT = \"key_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_WIDGET_IDS_LIGHT)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_WIDGET_IDS_LIGHT);\r\n        this.onUpdate(context, AppWidgetManager.getInstance(context), ids);\r\n    } else {\r\n        super.onReceive(context, intent);\r\n    }\r\n}",
  "start_lineno" : "34",
  "methodName" : "onReceive",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLight.java",
  "task_id" : "simplenote-android/348",
  "prompt" : "import android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getExtras() != null && intent.hasExtra(KEY_WIDGET_IDS_LIGHT)) {\r\n        int[] ids = intent.getExtras().getIntArray(KEY_WIDGET_IDS_LIGHT);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_LIGHT = \"key_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r\n        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}",
  "start_lineno" : "44",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLight.java",
  "task_id" : "simplenote-android/349",
  "prompt" : "import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "public static final String KEY_WIDGET_IDS_LIGHT = \"key_widget_ids_light\";",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "context" : "@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, true));\r\n    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}",
  "start_lineno" : "52",
  "methodName" : "onAppWidgetOptionsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLight.java",
  "task_id" : "simplenote-android/350",
  "prompt" : "import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, true));\r",
  "type" : "android",
  "actions" : "android.appwidget.action.APPWIDGET_UPDATE"
}, {
  "variables" : "private AppWidgetManager mWidgetManager;\nprivate NotesCursorAdapter mNotesAdapter;\nprivate RemoteViews mRemoteViews;\nprivate Simplenote mApplication;\nprivate int mAppWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;\nprivate final ObjectCursor<Note> mCursor;",
  "app_type" : "notes",
  "end_lineno" : "154",
  "ground_truth" : "    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}",
  "context" : "@Override\r\npublic Note getItem(int position) {\r\n    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}",
  "start_lineno" : "150",
  "methodName" : "getItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLightConfigureActivity.java",
  "task_id" : "simplenote-android/351",
  "prompt" : "import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r",
  "type" : "java",
  "actions" : "android.appwidget.action.APPWIDGET_CONFIGURE"
}, {
  "variables" : "private PasscodePreferenceFragmentCompat mPasscodePreferenceFragment;\nprivate PreferencesFragment mPreferencesFragment;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate IapViewModel mViewModel;\nprivate View mIapBanner;\nprivate View mIapThankYouBanner;",
  "app_type" : "notes",
  "end_lineno" : "147",
  "ground_truth" : "    Preference changePref = mPreferencesFragment.findPreference(getString(R.string.pref_key_change_passcode));\r\n    if (togglePref != null && changePref != null) {\r\n        mPasscodePreferenceFragment.setPreferences(togglePref, changePref);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    Preference togglePref = mPreferencesFragment.findPreference(getString(R.string.pref_key_passcode_toggle));\r\n    Preference changePref = mPreferencesFragment.findPreference(getString(R.string.pref_key_change_passcode));\r\n    if (togglePref != null && changePref != null) {\r\n        mPasscodePreferenceFragment.setPreferences(togglePref, changePref);\r\n    }\r\n}",
  "start_lineno" : "135",
  "methodName" : "onStart",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesActivity.java",
  "task_id" : "simplenote-android/352",
  "prompt" : "import com.automattic.simplenote.models.Preferences\nimport androidx.preference.Preference\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    Preference togglePref = mPreferencesFragment.findPreference(getString(R.string.pref_key_passcode_toggle));\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private PasscodePreferenceFragmentCompat mPasscodePreferenceFragment;\nprivate PreferencesFragment mPreferencesFragment;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate IapViewModel mViewModel;\nprivate View mIapBanner;\nprivate View mIapThankYouBanner;",
  "app_type" : "notes",
  "end_lineno" : "153",
  "ground_truth" : "    super.onResume();\r\n    disableScreenshotsIfLocked(this);\r\n}",
  "context" : "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    disableScreenshotsIfLocked(this);\r\n}",
  "start_lineno" : "149",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesActivity.java",
  "task_id" : "simplenote-android/353",
  "prompt" : "@Override\r\nprotected void onResume() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private PasscodePreferenceFragmentCompat mPasscodePreferenceFragment;\nprivate PreferencesFragment mPreferencesFragment;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate IapViewModel mViewModel;\nprivate View mIapBanner;\nprivate View mIapThankYouBanner;",
  "app_type" : "notes",
  "end_lineno" : "161",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(PreferencesActivity.this, WEB_APP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(PreferencesActivity.this, R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "public void openBrowserForMembership(View view) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(PreferencesActivity.this, WEB_APP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(PreferencesActivity.this, R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "155",
  "methodName" : "openBrowserForMembership",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesActivity.java",
  "task_id" : "simplenote-android/354",
  "prompt" : "import android.view.View\npublic void openBrowserForMembership(View view) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "126",
  "ground_truth" : "    } else {\r\n        new LogOutTask(PreferencesFragment.this).execute();\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    if (!isAdded()) {\r\n        return false;\r\n    }\r\n    Simplenote currentApp = (Simplenote) getActivity().getApplication();\r\n    if (currentApp.getSimperium().needsAuthorization()) {\r\n        Intent loginIntent = new Intent(getActivity(), SimplenoteAuthenticationActivity.class);\r\n        startActivityForResult(loginIntent, Simperium.SIGNUP_SIGNIN_REQUEST);\r\n    } else {\r\n        new LogOutTask(PreferencesFragment.this).execute();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "112",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/355",
  "prompt" : "import com.simperium.Simperium\nimport com.automattic.simplenote.authentication.SimplenoteAuthenticationActivity\nimport androidx.preference.Preference\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    if (!isAdded()) {\r\n        return false;\r\n    }\r\n    Simplenote currentApp = (Simplenote) getActivity().getApplication();\r\n    if (currentApp.getSimperium().needsAuthorization()) {\r\n        Intent loginIntent = new Intent(getActivity(), SimplenoteAuthenticationActivity.class);\r\n        startActivityForResult(loginIntent, Simperium.SIGNUP_SIGNIN_REQUEST);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "141",
  "ground_truth" : "    showDeleteAccountDialog();\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_ACCOUNT_DELETE_REQUESTED, AnalyticsTracker.CATEGORY_USER, \"preferences_delete_account_button\");\r\n    showDeleteAccountDialog();\r\n    return true;\r\n}",
  "start_lineno" : "131",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/356",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_ACCOUNT_DELETE_REQUESTED, AnalyticsTracker.CATEGORY_USER, \"preferences_delete_account_button\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "153",
  "ground_truth" : "    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"https://simplenote.com/help\");\r\n    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "145",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/357",
  "prompt" : "import com.automattic.simplenote.utils.BrowserUtils\nimport androidx.preference.Preference\nimport android.content.Context\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"https://simplenote.com/help\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "165",
  "ground_truth" : "    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"http://simplenote.com\");\r\n    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "157",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/358",
  "prompt" : "import com.automattic.simplenote.utils.BrowserUtils\nimport androidx.preference.Preference\nimport android.content.Context\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"http://simplenote.com\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "173",
  "ground_truth" : "    startActivity(new Intent(getActivity(), AboutActivity.class));\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    startActivity(new Intent(getActivity(), AboutActivity.class));\r\n    return true;\r\n}",
  "start_lineno" : "169",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/359",
  "prompt" : "import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "191",
  "ground_truth" : "    intent.setType(\"*/*\");\r\n    intent.putExtra(Intent.EXTRA_MIME_TYPES, new String[] { \"text/*\", \"application/json\" });\r\n    startActivityForResult(intent, REQUEST_IMPORT_DATA);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_IMPORT_NOTES, AnalyticsTracker.CATEGORY_NOTE, \"preferences_import_data_button\");\r\n    Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n    intent.setType(\"*/*\");\r\n    intent.putExtra(Intent.EXTRA_MIME_TYPES, new String[] { \"text/*\", \"application/json\" });\r\n    startActivityForResult(intent, REQUEST_IMPORT_DATA);\r\n    return true;\r\n}",
  "start_lineno" : "177",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/360",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.Preference\nimport android.content.Intent\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_IMPORT_NOTES, AnalyticsTracker.CATEGORY_NOTE, \"preferences_import_data_button\");\r\n    Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "203",
  "ground_truth" : "    intent.setType(\"application/json\");\r\n    intent.putExtra(Intent.EXTRA_TITLE, getString(R.string.export_file));\r\n    startActivityForResult(intent, REQUEST_EXPORT_DATA);\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n    intent.setType(\"application/json\");\r\n    intent.putExtra(Intent.EXTRA_TITLE, getString(R.string.export_file));\r\n    startActivityForResult(intent, REQUEST_EXPORT_DATA);\r\n    return true;\r\n}",
  "start_lineno" : "195",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/361",
  "prompt" : "import androidx.preference.Preference\nimport android.content.Intent\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "212",
  "ground_truth" : "    updateTheme(requireActivity(), Integer.parseInt(newValue.toString()));\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r\n    updateTheme(requireActivity(), Integer.parseInt(newValue.toString()));\r\n    return true;\r\n}",
  "start_lineno" : "208",
  "methodName" : "onPreferenceChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/362",
  "prompt" : "import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "223",
  "ground_truth" : "    themePreference.setSummary(entries[index]);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_THEME_UPDATED, AnalyticsTracker.CATEGORY_USER, \"theme_preference\");\r\n}",
  "context" : "private void updateTheme(Activity activity, int index) {\r\n    CharSequence[] entries = themePreference.getEntries();\r\n    themePreference.setSummary(entries[index]);\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_THEME_UPDATED, AnalyticsTracker.CATEGORY_USER, \"theme_preference\");\r\n}",
  "start_lineno" : "214",
  "methodName" : "updateTheme",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/363",
  "prompt" : "import androidx.preference.Preference\nimport android.app.Activity\nprivate void updateTheme(Activity activity, int index) {\r\n    CharSequence[] entries = themePreference.getEntries();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "237",
  "ground_truth" : "    startActivity(new Intent(requireContext(), StyleActivity.class));\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    startActivity(new Intent(requireContext(), StyleActivity.class));\r\n    return true;\r\n}",
  "start_lineno" : "233",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/364",
  "prompt" : "import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "246",
  "ground_truth" : "    ((PreferencesActivity) requireActivity()).openBrowserForMembership(getView());\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    ((PreferencesActivity) requireActivity()).openBrowserForMembership(getView());\r\n    return true;\r\n}",
  "start_lineno" : "242",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/365",
  "prompt" : "import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "305",
  "ground_truth" : "    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceChange(Preference preference, Object o) {\r\n    if (((SwitchPreferenceCompat) preference).isChecked()) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_LIST_CONDENSED_ENABLED, AnalyticsTracker.CATEGORY_USER, \"condensed_list_preference\");\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "294",
  "methodName" : "onPreferenceChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/366",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.SwitchPreferenceCompat\nimport androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object o) {\r\n    if (((SwitchPreferenceCompat) preference).isChecked()) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_LIST_CONDENSED_ENABLED, AnalyticsTracker.CATEGORY_USER, \"condensed_list_preference\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "331",
  "ground_truth" : "    } catch (BucketObjectMissingException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r\n    try {\r\n        boolean isChecked = (boolean) newValue;\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r\n        prefs.setAnalyticsEnabled(isChecked);\r\n        prefs.save();\r\n    } catch (BucketObjectMissingException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return true;\r\n}",
  "start_lineno" : "319",
  "methodName" : "onPreferenceChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/367",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport androidx.preference.Preference\nimport com.automattic.simplenote.models.Preferences.PREFERENCES_OBJECT_KEY\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r\n    try {\r\n        boolean isChecked = (boolean) newValue;\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r\n        prefs.setAnalyticsEnabled(isChecked);\r\n        prefs.save();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "346",
  "ground_truth" : "    startActivity(ShareCompat.IntentBuilder.from(requireActivity()).setText(AppLog.get()).setType(\"text/plain\").createChooserIntent());\r\n    return true;\r\n}",
  "context" : "@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    startActivity(ShareCompat.IntentBuilder.from(requireActivity()).setText(AppLog.get()).setType(\"text/plain\").createChooserIntent());\r\n    return true;\r\n}",
  "start_lineno" : "337",
  "methodName" : "onPreferenceClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/368",
  "prompt" : "import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "358",
  "ground_truth" : "        return;\r\n    }\r\n    mProgressDialogFragment = SimplenoteProgressDialogFragment.newInstance(getString(R.string.requesting_message));\r\n    mProgressDialogFragment.show(activity.getSupportFragmentManager(), ProgressDialogFragment.TAG);\r\n}",
  "context" : "private void showProgressDialogDeleteAccount() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity == null) {\r\n        return;\r\n    }\r\n    mProgressDialogFragment = SimplenoteProgressDialogFragment.newInstance(getString(R.string.requesting_message));\r\n    mProgressDialogFragment.show(activity.getSupportFragmentManager(), ProgressDialogFragment.TAG);\r\n}",
  "start_lineno" : "350",
  "methodName" : "showProgressDialogDeleteAccount",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/369",
  "prompt" : "import androidx.fragment.app.FragmentActivity\nimport android.app.Fragment\nimport android.app.Activity\nprivate void showProgressDialogDeleteAccount() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "365",
  "ground_truth" : "        mProgressDialogFragment = null;\r\n    }\r\n}",
  "context" : "private void closeProgressDialogDeleteAccount() {\r\n    if (mProgressDialogFragment != null && !mProgressDialogFragment.isHidden()) {\r\n        mProgressDialogFragment.dismiss();\r\n        mProgressDialogFragment = null;\r\n    }\r\n}",
  "start_lineno" : "360",
  "methodName" : "closeProgressDialogDeleteAccount",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/370",
  "prompt" : "import com.simperium.android.ProgressDialogFragment\nimport android.app.Fragment\nprivate void closeProgressDialogDeleteAccount() {\r\n    if (mProgressDialogFragment != null && !mProgressDialogFragment.isHidden()) {\r\n        mProgressDialogFragment.dismiss();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "433",
  "ground_truth" : "        return;\r\n    }\r\n    int colorRed = ContextCompat.getColor(activity, R.color.text_button_red);\r\n    dialogDeleteAccount.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(colorRed);\r\n}",
  "context" : "@Override\r\npublic void onShow(DialogInterface dialog) {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity == null) {\r\n        return;\r\n    }\r\n    int colorRed = ContextCompat.getColor(activity, R.color.text_button_red);\r\n    dialogDeleteAccount.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(colorRed);\r\n}",
  "start_lineno" : "422",
  "methodName" : "onShow",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/371",
  "prompt" : "import androidx.fragment.app.FragmentActivity\nimport android.content.DialogInterface\nimport android.app.Fragment\nimport android.app.Activity\n@Override\r\npublic void onShow(DialogInterface dialog) {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity == null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "470",
  "ground_truth" : "    if (context == null) {\r\n        return;\r\n    }\r\n    DialogUtils.showDialogWithEmail(context, getString(R.string.error_ocurred_message));\r\n}",
  "context" : "private void showDialogDeleteAccountError() {\r\n    Context context = getContext();\r\n    if (context == null) {\r\n        return;\r\n    }\r\n    DialogUtils.showDialogWithEmail(context, getString(R.string.error_ocurred_message));\r\n}",
  "start_lineno" : "460",
  "methodName" : "showDialogDeleteAccountError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/372",
  "prompt" : "import android.content.Context\nprivate void showDialogDeleteAccountError() {\r\n    Context context = getContext();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "534",
  "ground_truth" : "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "private boolean hasUnsyncedNotes() {\r\n    Simplenote application = (Simplenote) getActivity().getApplication();\r\n    Bucket<Note> notesBucket = application.getNotesBucket();\r\n    Bucket.ObjectCursor<Note> notesCursor = notesBucket.allObjects();\r\n    while (notesCursor.moveToNext()) {\r\n        Note note = notesCursor.getObject();\r\n        if (note.isNew() || note.isModified()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "522",
  "methodName" : "hasUnsyncedNotes",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/373",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.app.Activity\nprivate boolean hasUnsyncedNotes() {\r\n    Simplenote application = (Simplenote) getActivity().getApplication();\r\n    Bucket<Note> notesBucket = application.getNotesBucket();\r\n    Bucket.ObjectCursor<Note> notesCursor = notesBucket.allObjects();\r\n    while (notesCursor.moveToNext()) {\r\n        Note note = notesCursor.getObject();\r\n        if (note.isNew() || note.isModified()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "547",
  "ground_truth" : "    AuthUtils.logOut((Simplenote) requireActivity().getApplication());\r\n    getActivity().finish();\r\n}",
  "context" : "private void logOut() {\r\n    AppLog.add(Type.ACTION, \"Tapped logout button (PreferencesFragment)\");\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_SIGNED_OUT, AnalyticsTracker.CATEGORY_USER, \"preferences_sign_out_button\");\r\n    AuthUtils.logOut((Simplenote) requireActivity().getApplication());\r\n    getActivity().finish();\r\n}",
  "start_lineno" : "536",
  "methodName" : "logOut",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/374",
  "prompt" : "import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.Preference\nimport android.app.Fragment\nprivate void logOut() {\r\n    AppLog.add(Type.ACTION, \"Tapped logout button (PreferencesFragment)\");\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_SIGNED_OUT, AnalyticsTracker.CATEGORY_USER, \"preferences_sign_out_button\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "557",
  "ground_truth" : "    Preference authenticatePreference = findPreference(\"pref_key_authenticate\");\r\n    authenticatePreference.setTitle(R.string.log_out);\r\n}",
  "context" : "public void run() {\r\n    Preference authenticatePreference = findPreference(\"pref_key_authenticate\");\r\n    authenticatePreference.setTitle(R.string.log_out);\r\n}",
  "start_lineno" : "554",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/375",
  "prompt" : "public void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "723",
  "ground_truth" : "    PreferencesFragment fragment = mPreferencesFragmentReference.get();\r\n    return fragment == null || fragment.hasUnsyncedNotes();\r\n}",
  "context" : "@Override\r\nprotected Boolean doInBackground(Void... voids) {\r\n    PreferencesFragment fragment = mPreferencesFragmentReference.get();\r\n    return fragment == null || fragment.hasUnsyncedNotes();\r\n}",
  "start_lineno" : "719",
  "methodName" : "doInBackground",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/376",
  "prompt" : "@Override\r\nprotected Boolean doInBackground(Void... voids) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "755",
  "ground_truth" : "    intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n    intent.setType(\"application/json\");\r\n    intent.putExtra(Intent.EXTRA_TITLE, fragment.getString(R.string.export_file));\r\n    fragment.startActivityForResult(intent, REQUEST_EXPORT_UNSYNCED);\r\n}",
  "context" : "@Override\r\npublic void onClick(DialogInterface dialogInterface, int i) {\r\n    Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n    intent.setType(\"application/json\");\r\n    intent.putExtra(Intent.EXTRA_TITLE, fragment.getString(R.string.export_file));\r\n    fragment.startActivityForResult(intent, REQUEST_EXPORT_UNSYNCED);\r\n}",
  "start_lineno" : "748",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/377",
  "prompt" : "import android.content.Intent\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialogInterface, int i) {\r\n    Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "805",
  "ground_truth" : "    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDeleteAccountConfirmationDialog();\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDeleteAccountConfirmationDialog();\r\n}",
  "start_lineno" : "801",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/378",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String WEB_APP_URL = \"https://app.simplenote.com\";\nprivate static final int REQUEST_EXPORT_DATA = 9001;\nprivate static final int REQUEST_EXPORT_UNSYNCED = 9002;\nprivate static final int REQUEST_IMPORT_DATA = 9003;\nprivate Bucket<Preferences> mPreferencesBucket;\nprivate SwitchPreferenceCompat mAnalyticsSwitch;\nprivate SimplenoteProgressDialogFragment mProgressDialogFragment;\nprivate WeakReference<PreferencesFragment> mPreferencesFragmentReference;\nfinal WeakReference<PreferencesFragment> preferencesFragment;",
  "app_type" : "notes",
  "end_lineno" : "833",
  "ground_truth" : "    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDialogDeleteAccountError();\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDialogDeleteAccountError();\r\n}",
  "start_lineno" : "829",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java",
  "task_id" : "simplenote-android/379",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "        is Either.Left -> result.l\r\n        is Either.Right -> CollaboratorsActionResult.CollaboratorsList(filterCollaborators(result.r))\r\n    }",
  "context" : "override suspend fun getCollaborators(\r\n        noteId: String\r\n    ) = when (val result = getNote(noteId)) {\r\n        is Either.Left -> result.l\r\n        is Either.Right -> CollaboratorsActionResult.CollaboratorsList(filterCollaborators(result.r))\r\n    }",
  "start_lineno" : "38",
  "methodName" : "getCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumCollaboratorsRepository.kt",
  "task_id" : "simplenote-android/380",
  "prompt" : "import com.automattic.simplenote.models.Note\noverride suspend fun getCollaborators(\r\n        noteId: String\r\n    ) = when (val result = getNote(noteId)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "            val note = result.r\r\n            note.addTag(collaborator)\r\n            CollaboratorsActionResult.CollaboratorsList(filterCollaborators(note))\r\n        }\r\n    }",
  "context" : "override suspend fun addCollaborator(\r\n        noteId: String,\r\n        collaborator: String\r\n    ) = when (val result = getNote(noteId)) {\r\n        is Either.Left -> result.l\r\n        is Either.Right -> {\r\n            val note = result.r\r\n            note.addTag(collaborator)\r\n            CollaboratorsActionResult.CollaboratorsList(filterCollaborators(note))\r\n        }\r\n    }",
  "start_lineno" : "45",
  "methodName" : "addCollaborator",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumCollaboratorsRepository.kt",
  "task_id" : "simplenote-android/381",
  "prompt" : "import com.automattic.simplenote.utils.Either\nimport com.automattic.simplenote.models.Note\noverride suspend fun addCollaborator(\r\n        noteId: String,\r\n        collaborator: String\r\n    ) = when (val result = getNote(noteId)) {\r\n        is Either.Left -> result.l\r\n        is Either.Right -> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "            val note = result.r\r\n            note.removeTag(collaborator)\r\n            CollaboratorsActionResult.CollaboratorsList(filterCollaborators(note))\r\n        }\r\n    }",
  "context" : "override suspend fun removeCollaborator(\r\n        noteId: String,\r\n        collaborator: String\r\n    ) = when (val result = getNote(noteId)) {\r\n        is Either.Left -> result.l\r\n        is Either.Right -> {\r\n            val note = result.r\r\n            note.removeTag(collaborator)\r\n            CollaboratorsActionResult.CollaboratorsList(filterCollaborators(note))\r\n        }\r\n    }",
  "start_lineno" : "57",
  "methodName" : "removeCollaborator",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumCollaboratorsRepository.kt",
  "task_id" : "simplenote-android/382",
  "prompt" : "import com.automattic.simplenote.utils.Either\nimport com.automattic.simplenote.models.Note\noverride suspend fun removeCollaborator(\r\n        noteId: String,\r\n        collaborator: String\r\n    ) = when (val result = getNote(noteId)) {\r\n        is Either.Left -> result.l\r\n        is Either.Right -> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "107",
  "ground_truth" : "            }\r\n        } catch (e: BucketObjectMissingException) {\r\n            Either.Left(CollaboratorsActionResult.NoteDeleted)\r\n        }\r\n    }",
  "context" : "private suspend fun getNote(noteId: String) = withContext(ioDispatcher) {\r\n        return@withContext try {\r\n            val note = notesBucket.get(noteId)\r\n            when (note.isDeleted) {\r\n                true -> Either.Left(CollaboratorsActionResult.NoteInTrash)\r\n                false -> Either.Right(note)\r\n            }\r\n        } catch (e: BucketObjectMissingException) {\r\n            Either.Left(CollaboratorsActionResult.NoteDeleted)\r\n        }\r\n    }",
  "start_lineno" : "97",
  "methodName" : "getNote",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumCollaboratorsRepository.kt",
  "task_id" : "simplenote-android/383",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.Either\nimport com.automattic.simplenote.models.Note\nprivate suspend fun getNote(noteId: String) = withContext(ioDispatcher) {\r\n        return@withContext try {\r\n            val note = notesBucket.get(noteId)\r\n            when (note.isDeleted) {\r\n                true -> Either.Left(CollaboratorsActionResult.NoteInTrash)\r\n                false -> Either.Right(note)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            true\r\n        } catch (bucketObjectNameInvalid: BucketObjectNameInvalid) {\r\n            false\r\n        }\r\n    }",
  "context" : "override fun saveTag(tagName: String): Boolean {\r\n        return try {\r\n            TagUtils.createTagIfMissing(tagsBucket, tagName)\r\n            true\r\n        } catch (bucketObjectNameInvalid: BucketObjectNameInvalid) {\r\n            false\r\n        }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "saveTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/384",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagUtils\nimport com.automattic.simplenote.models.Tag\noverride fun saveTag(tagName: String): Boolean {\r\n        return try {\r\n            TagUtils.createTagIfMissing(tagsBucket, tagName)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        val isRenamingToLexical = TagUtils.hashTag(tagName).equals(TagUtils.hashTag(oldTagName))\r\n        return !isRenamingToLexical && !isTagMissing(tagName)\r\n    }",
  "context" : "override fun isTagConflict(tagName: String, oldTagName: String): Boolean {\r\n        val isRenamingToLexical = TagUtils.hashTag(tagName).equals(TagUtils.hashTag(oldTagName))\r\n        return !isRenamingToLexical && !isTagMissing(tagName)\r\n    }",
  "start_lineno" : "48",
  "methodName" : "isTagConflict",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/385",
  "prompt" : "import com.automattic.simplenote.models.Tag\noverride fun isTagConflict(tagName: String, oldTagName: String): Boolean {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "        } catch (e: BucketObjectNameInvalid) {\r\n            Log.e(Simplenote.TAG, \"Unable to rename tag\", e)\r\n            false\r\n        }\r\n    }",
  "context" : "override fun renameTag(tagName: String, oldTag: Tag): Boolean {\r\n        return try {\r\n            val index = if (oldTag.hasIndex()) oldTag.index else tagsBucket.count()\r\n            oldTag.renameTo(oldTag.name, tagName, index, notesBucket)\r\n            true\r\n        } catch (e: BucketObjectNameInvalid) {\r\n            Log.e(Simplenote.TAG, \"Unable to rename tag\", e)\r\n            false\r\n        }\r\n    }",
  "start_lineno" : "57",
  "methodName" : "renameTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/386",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\noverride fun renameTag(tagName: String, oldTag: Tag): Boolean {\r\n        return try {\r\n            val index = if (oldTag.hasIndex()) oldTag.index else tagsBucket.count()\r\n            oldTag.renameTo(oldTag.name, tagName, index, notesBucket)\r\n            true\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "        deleteTagFromNotes(tag)\r\n        tag.delete()\r\n    }",
  "context" : "override suspend fun deleteTag(tag: Tag) = withContext(ioDispatcher) {\r\n        deleteTagFromNotes(tag)\r\n        tag.delete()\r\n    }",
  "start_lineno" : "68",
  "methodName" : "deleteTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/387",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.automattic.simplenote.models.Tag\noverride suspend fun deleteTag(tag: Tag) = withContext(ioDispatcher) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "82",
  "ground_truth" : "            note.removeTag(tag.name)\r\n        }\r\n\r\n        cursor.close()\r\n    }",
  "context" : "private fun deleteTagFromNotes(tag: Tag) {\r\n        val cursor = tag.findNotes(notesBucket, tag.name)\r\n\r\n        while (cursor.moveToNext()) {\r\n            val note = cursor.getObject()\r\n            note.removeTag(tag.name)\r\n        }\r\n\r\n        cursor.close()\r\n    }",
  "start_lineno" : "73",
  "methodName" : "deleteTagFromNotes",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/388",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nprivate fun deleteTagFromNotes(tag: Tag) {\r\n        val cursor = tag.findNotes(notesBucket, tag.name)\r\n\r\n        while (cursor.moveToNext()) {\r\n            val note = cursor.getObject()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "107",
  "ground_truth" : "\r\n        return@withContext cursorToTagItems(cursor)\r\n    }",
  "context" : "override suspend fun allTags(): List<TagItem> = withContext(ioDispatcher) {\r\n        val tagQuery = Tag.all(tagsBucket).reorder().orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r\n        val cursor = tagQuery.execute()\r\n\r\n        return@withContext cursorToTagItems(cursor)\r\n    }",
  "start_lineno" : "102",
  "methodName" : "allTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/389",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\noverride suspend fun allTags(): List<TagItem> = withContext(ioDispatcher) {\r\n        val tagQuery = Tag.all(tagsBucket).reorder().orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r\n        val cursor = tagQuery.execute()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "117",
  "ground_truth" : "                .reorder()\r\n        val cursor = tags.execute()\r\n\r\n        return@withContext cursorToTagItems(cursor)\r\n    }",
  "context" : "override suspend fun searchTags(query: String): List<TagItem> = withContext(ioDispatcher) {\r\n        val tags = Tag.all(tagsBucket)\r\n                .where(Tag.NAME_PROPERTY, Query.ComparisonType.LIKE, \"%$query%\")\r\n                .orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r\n                .reorder()\r\n        val cursor = tags.execute()\r\n\r\n        return@withContext cursorToTagItems(cursor)\r\n    }",
  "start_lineno" : "109",
  "methodName" : "searchTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/390",
  "prompt" : "import kotlinx.coroutines.withContext\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\noverride suspend fun searchTags(query: String): List<TagItem> = withContext(ioDispatcher) {\r\n        val tags = Tag.all(tagsBucket)\r\n                .where(Tag.NAME_PROPERTY, Query.ComparisonType.LIKE, \"%$query%\")\r\n                .orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "129",
  "ground_truth" : "                    .where(Note.TAGS_PROPERTY, Query.ComparisonType.EQUAL_TO, tag.name)\r\n                    .count()\r\n            TagItem(tag, noteCount)\r\n        }\r\n    }",
  "context" : "private fun cursorToTagItems(cursor: Bucket.ObjectCursor<Tag>): List<TagItem> {\r\n        return (1 .. cursor.count).map {\r\n            cursor.moveToNext()\r\n            val tag = cursor.`object`\r\n            val noteCount: Int = notesBucket\r\n                    .query()\r\n                    .where(Note.TAGS_PROPERTY, Query.ComparisonType.EQUAL_TO, tag.name)\r\n                    .count()\r\n            TagItem(tag, noteCount)\r\n        }\r\n    }",
  "start_lineno" : "119",
  "methodName" : "cursorToTagItems",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt",
  "task_id" : "simplenote-android/391",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\nprivate fun cursorToTagItems(cursor: Bucket.ObjectCursor<Tag>): List<TagItem> {\r\n        return (1 .. cursor.count).map {\r\n            cursor.moveToNext()\r\n            val tag = cursor.`object`\r\n            val noteCount: Int = notesBucket\r\n                    .query()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "70",
  "ground_truth" : "        showVerifyEmail();\r\n    }\r\n    sendVerificationEmail();\r\n    return false;\r\n}",
  "context" : "@Override\r\npublic boolean onConfirmClicked(FullScreenDialogController controller) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return false;\r\n    }\r\n    if (mHasSentEmail) {\r\n        Toast.makeText(requireContext(), R.string.toast_email_sent, Toast.LENGTH_SHORT).show();\r\n    } else {\r\n        showVerifyEmail();\r\n    }\r\n    sendVerificationEmail();\r\n    return false;\r\n}",
  "start_lineno" : "55",
  "methodName" : "onConfirmClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/392",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport com.automattic.simplenote.FullScreenDialogFragment.FullScreenDialogController\nimport android.widget.Toast\n@Override\r\npublic boolean onConfirmClicked(FullScreenDialogController controller) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return false;\r\n    }\r\n    if (mHasSentEmail) {\r\n        Toast.makeText(requireContext(), R.string.toast_email_sent, Toast.LENGTH_SHORT).show();\r\n    } else {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "103",
  "ground_truth" : "    AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_CONFIRM_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_confirm\");\r\n    onConfirmClicked(mDialogController);\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_CONFIRM_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_confirm\");\r\n    onConfirmClicked(mDialogController);\r\n}",
  "start_lineno" : "95",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/393",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "128",
  "ground_truth" : "    } else {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_CHANGE_EMAIL_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_change_email\");\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_SETTINGS_REDIRECT);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (mHasSentEmail) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_RESEND_EMAIL_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_resend_email\");\r\n        onConfirmClicked(mDialogController);\r\n    } else {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_CHANGE_EMAIL_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_change_email\");\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), URL_SETTINGS_REDIRECT);\r\n    }\r\n}",
  "start_lineno" : "111",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/394",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mHasSentEmail) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_RESEND_EMAIL_BUTTON_TAPPED, AnalyticsTracker.CATEGORY_USER, \"verification_resend_email\");\r\n        onConfirmClicked(mDialogController);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "149",
  "ground_truth" : "    AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_DISMISSED, AnalyticsTracker.CATEGORY_USER, \"verification_dismissed\");\r\n    return false;\r\n}",
  "context" : "@Override\r\npublic boolean onDismissClicked(FullScreenDialogController controller) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.VERIFICATION_DISMISSED, AnalyticsTracker.CATEGORY_USER, \"verification_dismissed\");\r\n    return false;\r\n}",
  "start_lineno" : "141",
  "methodName" : "onDismissClicked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/395",
  "prompt" : "import com.automattic.simplenote.FullScreenDialogFragment.FullScreenDialogController\n@Override\r\npublic boolean onDismissClicked(FullScreenDialogController controller) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "163",
  "ground_truth" : "        public void run() {\r\n            dismissIfVerified();\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    new Handler(Looper.getMainLooper()).post(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            dismissIfVerified();\r\n        }\r\n    });\r\n}",
  "start_lineno" : "151",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/396",
  "prompt" : "import android.os.Looper\nimport android.os.Handler\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    new Handler(Looper.getMainLooper()).post(new Runnable() {\r\n\r\n        @Override\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "184",
  "ground_truth" : "        }\r\n    } catch (BucketObjectMissingException bucketObjectMissingException) {\r\n        // Do nothing if account cannot be retrieved.\r\n    }\r\n}",
  "context" : "private void dismissIfVerified() {\r\n    if (isDetached() || isRemoving()) {\r\n        return;\r\n    }\r\n    try {\r\n        Account account = mBucketAccount.get(KEY_EMAIL_VERIFICATION);\r\n        if (account.hasVerifiedEmail(mEmail)) {\r\n            mDialogController.dismiss();\r\n        }\r\n    } catch (BucketObjectMissingException bucketObjectMissingException) {\r\n        // Do nothing if account cannot be retrieved.\r\n    }\r\n}",
  "start_lineno" : "170",
  "methodName" : "dismissIfVerified",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/397",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Account\nimport com.automattic.simplenote.models.Account.KEY_EMAIL_VERIFICATION\nprivate void dismissIfVerified() {\r\n    if (isDetached() || isRemoving()) {\r\n        return;\r\n    }\r\n    try {\r\n        Account account = mBucketAccount.get(KEY_EMAIL_VERIFICATION);\r\n        if (account.hasVerifiedEmail(mEmail)) {\r\n            mDialogController.dismiss();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "190",
  "ground_truth" : "    bundle.putBoolean(EXTRA_SENT_EMAIL, hasSentEmail);\r\n    return bundle;\r\n}",
  "context" : "public static Bundle newBundle(boolean hasSentEmail) {\r\n    Bundle bundle = new Bundle();\r\n    bundle.putBoolean(EXTRA_SENT_EMAIL, hasSentEmail);\r\n    return bundle;\r\n}",
  "start_lineno" : "186",
  "methodName" : "newBundle",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/398",
  "prompt" : "import android.os.Bundle\npublic static Bundle newBundle(boolean hasSentEmail) {\r\n    Bundle bundle = new Bundle();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String EXTRA_SENT_EMAIL = \"EXTRA_SENT_EMAIL\";\nprivate static final String URL_SETTINGS_REDIRECT = \"https://app.simplenote.com/settings/\";\nprivate static final String URL_VERIFY_EMAIL = \"https://app.simplenote.com/account/verify-email/\";\nprivate static final int TIMEOUT_SECONDS = 30;\nprivate AppCompatButton mButtonPrimary;\nprivate AppCompatButton mButtonSecondary;\nprivate Bucket<Account> mBucketAccount;\nprivate FullScreenDialogController mDialogController;\nprivate ImageView mImageIcon;\nprivate String mEmail;\nprivate TextView mTextSubtitle;\nprivate TextView mTextTitle;\nprivate boolean mHasSentEmail;",
  "app_type" : "notes",
  "end_lineno" : "214",
  "ground_truth" : "    mTextTitle.setText(R.string.fullscreen_verify_email_title);\r\n    mTextSubtitle.setText(Html.fromHtml(String.format(getResources().getString(R.string.fullscreen_verify_email_subtitle), mEmail)));\r\n    mButtonPrimary.setVisibility(View.GONE);\r\n    mButtonSecondary.setText(R.string.fullscreen_verify_email_button_secondary);\r\n}",
  "context" : "private void showVerifyEmail() {\r\n    mImageIcon.setImageResource(R.drawable.ic_mail_24dp);\r\n    mTextTitle.setText(R.string.fullscreen_verify_email_title);\r\n    mTextSubtitle.setText(Html.fromHtml(String.format(getResources().getString(R.string.fullscreen_verify_email_subtitle), mEmail)));\r\n    mButtonPrimary.setVisibility(View.GONE);\r\n    mButtonSecondary.setText(R.string.fullscreen_verify_email_button_secondary);\r\n}",
  "start_lineno" : "208",
  "methodName" : "showVerifyEmail",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java",
  "task_id" : "simplenote-android/399",
  "prompt" : "private void showVerifyEmail() {\r\n    mImageIcon.setImageResource(R.drawable.ic_mail_24dp);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ShareBottomSheetDialog.class.getSimpleName();\nprivate static final int SHARE_SHEET_COLUMN_COUNT = 3;\nprivate Fragment mFragment;\nprivate Intent mShareIntent;\nprivate List<ShareButtonAdapter.ShareButtonItem> mShareButtons;\nprivate RecyclerView mRecyclerView;\nprivate ShareSheetListener mListener;\nprivate TextView mPublishButton;\nprivate TextView mUnpublishButton;\nprivate TextView mWordPressButton;",
  "app_type" : "notes",
  "end_lineno" : "86",
  "ground_truth" : "        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    mListener.onSharePublishClicked();\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    mListener.onSharePublishClicked();\r\n}",
  "start_lineno" : "78",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShareBottomSheetDialog.java",
  "task_id" : "simplenote-android/400",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ShareBottomSheetDialog.class.getSimpleName();\nprivate static final int SHARE_SHEET_COLUMN_COUNT = 3;\nprivate Fragment mFragment;\nprivate Intent mShareIntent;\nprivate List<ShareButtonAdapter.ShareButtonItem> mShareButtons;\nprivate RecyclerView mRecyclerView;\nprivate ShareSheetListener mListener;\nprivate TextView mPublishButton;\nprivate TextView mUnpublishButton;\nprivate TextView mWordPressButton;",
  "app_type" : "notes",
  "end_lineno" : "98",
  "ground_truth" : "        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    mListener.onShareUnpublishClicked();\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return;\r\n    }\r\n    mListener.onShareUnpublishClicked();\r\n}",
  "start_lineno" : "90",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShareBottomSheetDialog.java",
  "task_id" : "simplenote-android/401",
  "prompt" : "import com.automattic.simplenote.utils.NetworkUtils\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ShareBottomSheetDialog.class.getSimpleName();\nprivate static final int SHARE_SHEET_COLUMN_COUNT = 3;\nprivate Fragment mFragment;\nprivate Intent mShareIntent;\nprivate List<ShareButtonAdapter.ShareButtonItem> mShareButtons;\nprivate RecyclerView mRecyclerView;\nprivate ShareSheetListener mListener;\nprivate TextView mPublishButton;\nprivate TextView mUnpublishButton;\nprivate TextView mWordPressButton;",
  "app_type" : "notes",
  "end_lineno" : "132",
  "ground_truth" : "        BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);\r\n        behavior.setState(BottomSheetBehavior.STATE_HALF_EXPANDED);\r\n        behavior.setSkipCollapsed(true);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onShow(DialogInterface dialogInterface) {\r\n    BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n    FrameLayout bottomSheet = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    if (bottomSheet != null) {\r\n        BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);\r\n        behavior.setState(BottomSheetBehavior.STATE_HALF_EXPANDED);\r\n        behavior.setSkipCollapsed(true);\r\n    }\r\n}",
  "start_lineno" : "122",
  "methodName" : "onShow",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShareBottomSheetDialog.java",
  "task_id" : "simplenote-android/402",
  "prompt" : "import com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.widget.FrameLayout\nimport android.view.View\nimport android.content.DialogInterface\n@Override\r\npublic void onShow(DialogInterface dialogInterface) {\r\n    BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n    FrameLayout bottomSheet = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    if (bottomSheet != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = ShareBottomSheetDialog.class.getSimpleName();\nprivate static final int SHARE_SHEET_COLUMN_COUNT = 3;\nprivate Fragment mFragment;\nprivate Intent mShareIntent;\nprivate List<ShareButtonAdapter.ShareButtonItem> mShareButtons;\nprivate RecyclerView mRecyclerView;\nprivate ShareSheetListener mListener;\nprivate TextView mPublishButton;\nprivate TextView mUnpublishButton;\nprivate TextView mWordPressButton;",
  "app_type" : "notes",
  "end_lineno" : "159",
  "ground_truth" : "    mFragment.requireActivity().startActivity(Intent.createChooser(mShareIntent, mFragment.getString(R.string.share)));\r\n    dismiss();\r\n}",
  "context" : "@Override\r\npublic void onItemClick(ShareButtonAdapter.ShareButtonItem item) {\r\n    mShareIntent.setComponent(new ComponentName(item.getPackageName(), item.getActivityName()));\r\n    mFragment.requireActivity().startActivity(Intent.createChooser(mShareIntent, mFragment.getString(R.string.share)));\r\n    dismiss();\r\n}",
  "start_lineno" : "154",
  "methodName" : "onItemClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShareBottomSheetDialog.java",
  "task_id" : "simplenote-android/403",
  "prompt" : "import com.automattic.simplenote.utils.ShareButtonAdapter\nimport android.content.Intent\nimport android.content.ComponentName\nimport android.app.Activity\n@Override\r\npublic void onItemClick(ShareButtonAdapter.ShareButtonItem item) {\r\n    mShareIntent.setComponent(new ComponentName(item.getPackageName(), item.getActivityName()));\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"shortcut_tag\";\npublic final static String DIALOG_VISIBLE = \"shortcut_visible\";\nprivate boolean mIsPreview;",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "        return new AlertDialog.Builder(new ContextThemeWrapper(requireContext(), R.style.Dialog)).setView(view).setPositiveButton(android.R.string.ok, null).create();\r\n    } else {\r\n        return super.onCreateDialog(savedInstanceState);\r\n    }\r\n}",
  "context" : "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    if (getContext() != null && getActivity() != null) {\r\n        View view = View.inflate(requireContext(), getLayout(), null);\r\n        return new AlertDialog.Builder(new ContextThemeWrapper(requireContext(), R.style.Dialog)).setView(view).setPositiveButton(android.R.string.ok, null).create();\r\n    } else {\r\n        return super.onCreateDialog(savedInstanceState);\r\n    }\r\n}",
  "start_lineno" : "28",
  "methodName" : "onCreateDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShortcutDialogFragment.java",
  "task_id" : "simplenote-android/404",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    if (getContext() != null && getActivity() != null) {\r\n        View view = View.inflate(requireContext(), getLayout(), null);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"shortcut_tag\";\npublic final static String DIALOG_VISIBLE = \"shortcut_visible\";\nprivate boolean mIsPreview;",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        transaction.remove(fragment);\r\n    }\r\n    ShortcutDialogFragment dialog = new ShortcutDialogFragment(isPreview);\r\n    dialog.show(transaction, DIALOG_TAG);\r\n}",
  "context" : "public static void showShortcuts(@NonNull FragmentActivity activity, boolean isPreview) {\r\n    FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\r\n    Fragment fragment = activity.getSupportFragmentManager().findFragmentByTag(DIALOG_TAG);\r\n    if (fragment != null) {\r\n        transaction.remove(fragment);\r\n    }\r\n    ShortcutDialogFragment dialog = new ShortcutDialogFragment(isPreview);\r\n    dialog.show(transaction, DIALOG_TAG);\r\n}",
  "start_lineno" : "49",
  "methodName" : "showShortcuts",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ShortcutDialogFragment.java",
  "task_id" : "simplenote-android/405",
  "prompt" : "import androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\npublic static void showShortcuts(@NonNull FragmentActivity activity, boolean isPreview) {\r\n    FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\r\n    Fragment fragment = activity.getSupportFragmentManager().findFragmentByTag(DIALOG_TAG);\r\n    if (fragment != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "123",
  "ground_truth" : "    mHeartbeatHandler.removeCallbacks(mHeartbeatRunnable);\r\n    mHeartbeatHandler.postDelayed(mHeartbeatRunnable, HEARTBEAT_TIMEOUT);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    AppLog.add(Type.NETWORK, \"Heartbeat stopped\");\r\n    mHeartbeatHandler.removeCallbacks(mHeartbeatRunnable);\r\n    mHeartbeatHandler.postDelayed(mHeartbeatRunnable, HEARTBEAT_TIMEOUT);\r\n}",
  "start_lineno" : "118",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/406",
  "prompt" : "import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport android.util.Log\n@Override\r\npublic void run() {\r\n    AppLog.add(Type.NETWORK, \"Heartbeat stopped\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "166",
  "ground_truth" : "    mHeartbeatHandler.removeCallbacks(mHeartbeatRunnable);\r\n    mHeartbeatHandler.postDelayed(mHeartbeatRunnable, HEARTBEAT_TIMEOUT);\r\n}",
  "context" : "@Override\r\npublic void onBeat() {\r\n    AppLog.add(Type.NETWORK, \"Heartbeat received\");\r\n    mHeartbeatHandler.removeCallbacks(mHeartbeatRunnable);\r\n    mHeartbeatHandler.postDelayed(mHeartbeatRunnable, HEARTBEAT_TIMEOUT);\r\n}",
  "start_lineno" : "161",
  "methodName" : "onBeat",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/407",
  "prompt" : "import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport android.util.Log\n@Override\r\npublic void onBeat() {\r\n    AppLog.add(Type.NETWORK, \"Heartbeat received\");\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "179",
  "ground_truth" : "        return prefs.getAnalyticsEnabled();\r\n    } catch (BucketObjectMissingException e) {\r\n        return true;\r\n    }\r\n}",
  "context" : "public static boolean analyticsIsEnabled() {\r\n    if (mPreferencesBucket == null) {\r\n        return true;\r\n    }\r\n    try {\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r\n        return prefs.getAnalyticsEnabled();\r\n    } catch (BucketObjectMissingException e) {\r\n        return true;\r\n    }\r\n}",
  "start_lineno" : "168",
  "methodName" : "analyticsIsEnabled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/408",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.models.Preferences.PREFERENCES_OBJECT_KEY\npublic static boolean analyticsIsEnabled() {\r\n    if (mPreferencesBucket == null) {\r\n        return true;\r\n    }\r\n    try {\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "186",
  "ground_truth" : "    String tags = \"Tags: \" + (mTagsBucket != null ? mTagsBucket.count() : \"?\");\r\n    return email + \"\\n\" + notes + \"\\n\" + tags + \"\\n\\n\";\r\n}",
  "context" : "private String getAccountInfo() {\r\n    String email = \"Email: \" + (mSimperium != null && mSimperium.getUser() != null ? mSimperium.getUser().getEmail() : \"?\");\r\n    String notes = \"Notes: \" + (mNotesBucket != null ? mNotesBucket.count() : \"?\");\r\n    String tags = \"Tags: \" + (mTagsBucket != null ? mTagsBucket.count() : \"?\");\r\n    return email + \"\\n\" + notes + \"\\n\" + tags + \"\\n\\n\";\r\n}",
  "start_lineno" : "181",
  "methodName" : "getAccountInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/409",
  "prompt" : "import com.simperium.client.User\nimport com.simperium.client.Bucket\nimport com.simperium.Simperium\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.models.Account\nprivate String getAccountInfo() {\r\n    String email = \"Email: \" + (mSimperium != null && mSimperium.getUser() != null ? mSimperium.getUser().getEmail() : \"?\");\r\n    String notes = \"Notes: \" + (mNotesBucket != null ? mNotesBucket.count() : \"?\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "194",
  "ground_truth" : "    String device = \"Device: \" + Build.MANUFACTURER + \" \" + Build.MODEL + \" (\" + Build.DEVICE + \")\";\r\n    String system = \"System: \" + architecture + Build.VERSION.RELEASE + \" (\" + Build.VERSION.SDK_INT + \")\";\r\n    String app = \"App: Simplenote \" + PrefUtils.versionInfo();\r\n    return device + \"\\n\" + system + \"\\n\" + app + \"\\n\\n\";\r\n}",
  "context" : "private String getDeviceInfo() {\r\n    String architecture = Build.DEVICE != null && Build.DEVICE.matches(\".+_cheets|cheets_.+\") ? \"Chrome OS \" : \"Android \";\r\n    String device = \"Device: \" + Build.MANUFACTURER + \" \" + Build.MODEL + \" (\" + Build.DEVICE + \")\";\r\n    String system = \"System: \" + architecture + Build.VERSION.RELEASE + \" (\" + Build.VERSION.SDK_INT + \")\";\r\n    String app = \"App: Simplenote \" + PrefUtils.versionInfo();\r\n    return device + \"\\n\" + system + \"\\n\" + app + \"\\n\\n\";\r\n}",
  "start_lineno" : "188",
  "methodName" : "getDeviceInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/410",
  "prompt" : "import android.os.Build\nprivate String getDeviceInfo() {\r\n    String architecture = Build.DEVICE != null && Build.DEVICE.matches(\".+_cheets|cheets_.+\") ? \"Chrome OS \" : \"Android \";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "241",
  "ground_truth" : "    User user = mSimperium.getUser();\r\n    return user != null && user.getStatus() == User.Status.AUTHORIZED;\r\n}",
  "context" : "public boolean isLoggedIn() {\r\n    User user = mSimperium.getUser();\r\n    return user != null && user.getStatus() == User.Status.AUTHORIZED;\r\n}",
  "start_lineno" : "238",
  "methodName" : "isLoggedIn",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/411",
  "prompt" : "import android.util.Log\npublic boolean isLoggedIn() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "246",
  "ground_truth" : "    User user = mSimperium.getUser();\r\n    return user != null ? user.getEmail() : null;\r\n}",
  "context" : "public String getUserEmail() {\r\n    User user = mSimperium.getUser();\r\n    return user != null ? user.getEmail() : null;\r\n}",
  "start_lineno" : "243",
  "methodName" : "getUserEmail",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/412",
  "prompt" : "import com.simperium.client.User\npublic String getUserEmail() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "450",
  "ground_truth" : "        instant.setTimeInMillis(syncTime.getValue());\r\n        syncTimes.put(syncTime.getKey(), instant);\r\n    }\r\n    return syncTimes;\r\n}",
  "context" : "public HashMap<String, Calendar> load() {\r\n    HashMap<String, Calendar> syncTimes = new HashMap<>();\r\n    //noinspection unchecked\r\n    for (Map.Entry<String, Long> syncTime : ((Map<String, Long>) mPreferences.getAll()).entrySet()) {\r\n        Calendar instant = Calendar.getInstance();\r\n        instant.setTimeInMillis(syncTime.getValue());\r\n        syncTimes.put(syncTime.getKey(), instant);\r\n    }\r\n    return syncTimes;\r\n}",
  "start_lineno" : "439",
  "methodName" : "load",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/413",
  "prompt" : "import java.util.Map\nimport java.util.HashMap\nimport java.util.Calendar\nimport com.automattic.simplenote.models.Preferences\npublic HashMap<String, Calendar> load() {\r\n    HashMap<String, Calendar> syncTimes = new HashMap<>();\r\n    //noinspection unchecked\r\n    for (Map.Entry<String, Long> syncTime : ((Map<String, Long>) mPreferences.getAll()).entrySet()) {\r\n        Calendar instant = Calendar.getInstance();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "462",
  "ground_truth" : "        mPreferences.edit().putLong(entityId, lastSyncTime.getTimeInMillis()).apply();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(String entityId, Calendar lastSyncTime, boolean isSynced) {\r\n    if (lastSyncTime != null) {\r\n        mPreferences.edit().putLong(entityId, lastSyncTime.getTimeInMillis()).apply();\r\n    }\r\n}",
  "start_lineno" : "457",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/414",
  "prompt" : "import java.util.Calendar\n@Override\r\npublic void onUpdate(String entityId, Calendar lastSyncTime, boolean isSynced) {\r\n    if (lastSyncTime != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String DELETED_NOTE_ID = \"deletedNoteId\";\npublic static final String SELECTED_NOTE_ID = \"selectedNoteId\";\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String SYNC_TIME_PREFERENCES = \"sync_time\";\npublic static final String TAG = \"Simplenote\";\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final int INTENT_PREFERENCES = 1;\nprivate static final String AUTH_PROVIDER = \"simplenote.com\";\nprivate static final String TAG_SYNC = \"sync\";\nprivate static final long HEARTBEAT_TIMEOUT = WebSocketManager.HEARTBEAT_INTERVAL * 2;\nprivate Activity mCurrentActivity;\nprivate static Bucket<Account> mAccountBucket;\nprivate static Bucket<Preferences> mPreferencesBucket;\nprivate Bucket<Note> mNotesBucket;\nprivate Bucket<Tag> mTagsBucket;\nprivate SyncTimes<Note> mNoteSyncTimes;\nprivate Handler mHeartbeatHandler;\nprivate Runnable mHeartbeatRunnable;\nprivate Simperium mSimperium;\nprivate boolean mIsInBackground = true;\nprivate final SharedPreferences mPreferences;",
  "app_type" : "notes",
  "end_lineno" : "480",
  "ground_truth" : "            return;\r\n        case UNVERIFIED:\r\n            showUnverifiedAccount();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onUpdate(AccountVerificationWatcher.Status status) {\r\n    switch(status) {\r\n        case VERIFIED:\r\n            dismissReviewAccountDialog();\r\n            return;\r\n        case SENT_EMAIL:\r\n            showWaitingOnEmailConfirmation();\r\n            return;\r\n        case UNVERIFIED:\r\n            showUnverifiedAccount();\r\n    }\r\n}",
  "start_lineno" : "466",
  "methodName" : "onUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java",
  "task_id" : "simplenote-android/415",
  "prompt" : "import com.automattic.simplenote.utils.AccountVerificationWatcher\nimport com.automattic.simplenote.models.Account\n@Override\r\npublic void onUpdate(AccountVerificationWatcher.Status status) {\r\n    switch(status) {\r\n        case VERIFIED:\r\n            dismissReviewAccountDialog();\r\n            return;\r\n        case SENT_EMAIL:\r\n            showWaitingOnEmailConfirmation();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private boolean isAlreadyLocked = false;",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "        isAlreadyLocked = false;\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onActivityDestroyed(Activity activity) {\r\n    super.onActivityDestroyed(activity);\r\n    if (activity instanceof NoteWidgetLightConfigureActivity || activity instanceof NoteWidgetDarkConfigureActivity) {\r\n        isAlreadyLocked = false;\r\n    }\r\n}",
  "start_lineno" : "32",
  "methodName" : "onActivityDestroyed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SimplenoteAppLock.java",
  "task_id" : "simplenote-android/416",
  "prompt" : "import android.app.Activity\n@Override\r\npublic void onActivityDestroyed(Activity activity) {\r\n    super.onActivityDestroyed(activity);\r\n    if (activity instanceof NoteWidgetLightConfigureActivity || activity instanceof NoteWidgetDarkConfigureActivity) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private boolean isAlreadyLocked = false;",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "        isAlreadyLocked = true;\r\n    } else {\r\n        super.onActivityResumed(activity);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onActivityResumed(Activity activity) {\r\n    if ((activity instanceof NoteWidgetDarkConfigureActivity || activity instanceof NoteWidgetLightConfigureActivity) && isPasswordLocked() && !isAlreadyLocked) {\r\n        Intent i = new Intent(activity.getApplicationContext(), PasscodeUnlockActivity.class);\r\n        activity.startActivity(i);\r\n        isAlreadyLocked = true;\r\n    } else {\r\n        super.onActivityResumed(activity);\r\n    }\r\n}",
  "start_lineno" : "40",
  "methodName" : "onActivityResumed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SimplenoteAppLock.java",
  "task_id" : "simplenote-android/417",
  "prompt" : "import org.wordpress.passcodelock.PasscodeUnlockActivity\nimport android.content.Intent\nimport android.app.Application\nimport android.app.Activity\n@Override\r\npublic void onActivityResumed(Activity activity) {\r\n    if ((activity instanceof NoteWidgetDarkConfigureActivity || activity instanceof NoteWidgetLightConfigureActivity) && isPasswordLocked() && !isAlreadyLocked) {\r\n        Intent i = new Intent(activity.getApplicationContext(), PasscodeUnlockActivity.class);\r\n        activity.startActivity(i);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String EXTRA_SCROLL = \"EXTRA_SCROLL\";\nprivate LinearLayoutManager mLayoutManager;\nprivate boolean mIsPremium;\nprivate ArrayList<String> mStyles;\nprivate int mSelectedPosition;\nprivate ImageView mLocked;\nprivate TextView mContent;\nprivate TextView mTitle;\nprivate View mView;",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    startActivity(intent);\r\n    overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n    finish();\r\n}",
  "context" : "/**\r\n *  Overrides recreate to allow restoring the scroll position\r\n */\r\n@Override\r\npublic void recreate() {\r\n    Intent intent = new Intent(StyleActivity.this, StyleActivity.class);\r\n    intent.putExtra(EXTRA_SCROLL, mLayoutManager.onSaveInstanceState());\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    startActivity(intent);\r\n    overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n    finish();\r\n}",
  "start_lineno" : "81",
  "methodName" : "recreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\StyleActivity.java",
  "task_id" : "simplenote-android/418",
  "prompt" : "import android.content.Intent\n/**\r\n *  Overrides recreate to allow restoring the scroll position\r\n */\r\n@Override\r\npublic void recreate() {\r\n    Intent intent = new Intent(StyleActivity.this, StyleActivity.class);\r\n    intent.putExtra(EXTRA_SCROLL, mLayoutManager.onSaveInstanceState());\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String EXTRA_SCROLL = \"EXTRA_SCROLL\";\nprivate LinearLayoutManager mLayoutManager;\nprivate boolean mIsPremium;\nprivate ArrayList<String> mStyles;\nprivate int mSelectedPosition;\nprivate ImageView mLocked;\nprivate TextView mContent;\nprivate TextView mTitle;\nprivate View mView;",
  "app_type" : "notes",
  "end_lineno" : "106",
  "ground_truth" : "        BrowserUtils.launchBrowserOrShowError(StyleActivity.this, WEB_APP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(StyleActivity.this, R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(StyleActivity.this, WEB_APP_URL);\r\n    } catch (Exception e) {\r\n        Toast.makeText(StyleActivity.this, R.string.no_browser_available, Toast.LENGTH_LONG).show();\r\n    }\r\n}",
  "start_lineno" : "99",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\StyleActivity.java",
  "task_id" : "simplenote-android/419",
  "prompt" : "import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    try {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String EXTRA_SCROLL = \"EXTRA_SCROLL\";\nprivate LinearLayoutManager mLayoutManager;\nprivate boolean mIsPremium;\nprivate ArrayList<String> mStyles;\nprivate int mSelectedPosition;\nprivate ImageView mLocked;\nprivate TextView mContent;\nprivate TextView mTitle;\nprivate View mView;",
  "app_type" : "notes",
  "end_lineno" : "161",
  "ground_truth" : "        PrefUtils.setStyleIndex(StyleActivity.this, holder.getAdapterPosition());\r\n    } else if (holder.mLocked.getVisibility() == View.VISIBLE) {\r\n        showDialogLocked();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (mIsPremium) {\r\n        notifyItemChanged(mSelectedPosition);\r\n        mSelectedPosition = holder.getAdapterPosition();\r\n        notifyItemChanged(mSelectedPosition);\r\n        PrefUtils.setStyleIndex(StyleActivity.this, holder.getAdapterPosition());\r\n    } else if (holder.mLocked.getVisibility() == View.VISIBLE) {\r\n        showDialogLocked();\r\n    }\r\n}",
  "start_lineno" : "151",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\StyleActivity.java",
  "task_id" : "simplenote-android/420",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mIsPremium) {\r\n        notifyItemChanged(mSelectedPosition);\r\n        mSelectedPosition = holder.getAdapterPosition();\r\n        notifyItemChanged(mSelectedPosition);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        listener.onUpdate(entityId, getLastSyncTime(entityId), isSynced(entityId));\r\n    }\r\n}",
  "context" : "private void notifyUpdate(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r\n        listener.onUpdate(entityId, getLastSyncTime(entityId), isSynced(entityId));\r\n    }\r\n}",
  "start_lineno" : "41",
  "methodName" : "notifyUpdate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/421",
  "prompt" : "private void notifyUpdate(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        listener.onRemove(entityId);\r\n    }\r\n}",
  "context" : "private void notifyRemove(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r\n        listener.onRemove(entityId);\r\n    }\r\n}",
  "start_lineno" : "47",
  "methodName" : "notifyRemove",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/422",
  "prompt" : "private void notifyRemove(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "58",
  "ground_truth" : "    mSyncTimes.put(entityId, now);\r\n    Log.d(TAG, \"updateSyncTime: \" + entityId + \" (\" + now.getTime() + \")\");\r\n}",
  "context" : "private void updateSyncTime(String entityId) {\r\n    Calendar now = Calendar.getInstance();\r\n    mSyncTimes.put(entityId, now);\r\n    Log.d(TAG, \"updateSyncTime: \" + entityId + \" (\" + now.getTime() + \")\");\r\n}",
  "start_lineno" : "53",
  "methodName" : "updateSyncTime",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/423",
  "prompt" : "import java.util.Calendar\nprivate void updateSyncTime(String entityId) {\r\n    Calendar now = Calendar.getInstance();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "69",
  "ground_truth" : "    mSyncTimes.remove(object.getSimperiumKey());\r\n    notifyRemove(object.getSimperiumKey());\r\n}",
  "context" : "@Override\r\npublic void onDeleteObject(Bucket<T> bucket, T object) {\r\n    mSyncTimes.remove(object.getSimperiumKey());\r\n    notifyRemove(object.getSimperiumKey());\r\n}",
  "start_lineno" : "65",
  "methodName" : "onDeleteObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/424",
  "prompt" : "import com.simperium.client.Bucket\n@Override\r\npublic void onDeleteObject(Bucket<T> bucket, T object) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "109",
  "ground_truth" : "    } else {\r\n        updateSyncTime(entityId);\r\n        notifyUpdate(entityId);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n    if (entityId == null) {\r\n        return;\r\n    }\r\n    if (type == Bucket.ChangeType.REMOVE) {\r\n        mSyncTimes.remove(entityId);\r\n        notifyRemove(entityId);\r\n    } else {\r\n        updateSyncTime(entityId);\r\n        notifyUpdate(entityId);\r\n    }\r\n}",
  "start_lineno" : "96",
  "methodName" : "onNetworkChange",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/425",
  "prompt" : "import com.simperium.client.Bucket\n@Override\r\npublic void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n    if (entityId == null) {\r\n        return;\r\n    }\r\n    if (type == Bucket.ChangeType.REMOVE) {\r\n        mSyncTimes.remove(entityId);\r\n        notifyRemove(entityId);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final String TAG = SyncTimes.class.getSimpleName();\nprivate final HashMap<String, Calendar> mSyncTimes = new HashMap<>();\nprivate final HashSet<String> mUnsyncedKeys = new HashSet<>();\nprivate final Set<SyncTimeListener> mListeners = new HashSet<>();\npublic Bucket.Listener<T> bucketListener = new Bucket.Listener<T>() {\r\n\r\n    @Override\r\n    public void onBeforeUpdateObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteObject(Bucket<T> bucket, T object) {\r\n        mSyncTimes.remove(object.getSimperiumKey());\r\n        notifyRemove(object.getSimperiumKey());\r\n    }\r\n\r\n    @Override\r\n    public void onLocalQueueChange(Bucket<T> bucket, Set<String> entityIds) {\r\n        Set<String> changed = new HashSet<>();\r\n        for (String entityId : mUnsyncedKeys) {\r\n            if (!entityIds.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        for (String entityId : entityIds) {\r\n            if (!mUnsyncedKeys.contains(entityId)) {\r\n                changed.add(entityId);\r\n            }\r\n        }\r\n        mUnsyncedKeys.clear();\r\n        mUnsyncedKeys.addAll(entityIds);\r\n        for (String entityId : changed) {\r\n            Log.d(TAG, \"updateIsSynced: \" + entityId + \" (\" + isSynced(entityId) + \")\");\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n        if (entityId == null) {\r\n            return;\r\n        }\r\n        if (type == Bucket.ChangeType.REMOVE) {\r\n            mSyncTimes.remove(entityId);\r\n            notifyRemove(entityId);\r\n        } else {\r\n            updateSyncTime(entityId);\r\n            notifyUpdate(entityId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveObject(Bucket<T> bucket, T object) {\r\n    }\r\n\r\n    @Override\r\n    public void onSyncObject(Bucket<T> bucket, String noteId) {\r\n        updateSyncTime(noteId);\r\n        notifyUpdate(noteId);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "    updateSyncTime(noteId);\r\n    notifyUpdate(noteId);\r\n}",
  "context" : "@Override\r\npublic void onSyncObject(Bucket<T> bucket, String noteId) {\r\n    updateSyncTime(noteId);\r\n    notifyUpdate(noteId);\r\n}",
  "start_lineno" : "115",
  "methodName" : "onSyncObject",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java",
  "task_id" : "simplenote-android/426",
  "prompt" : "import com.simperium.client.Bucket\n@Override\r\npublic void onSyncObject(Bucket<T> bucket, String noteId) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagDialogViewModel\nvar _dialogEditTag AlertDialog?\nval dialogEditTag\nvar _binding EditTagBinding?\nval binding\nvar DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "42",
  "ground_truth" : "        _binding = null\r\n        _dialogEditTag = null\r\n    }",
  "context" : "override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n        _dialogEditTag = null\r\n    }",
  "start_lineno" : "38",
  "methodName" : "onDestroyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt",
  "task_id" : "simplenote-android/427",
  "prompt" : "import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagDialogViewModel\nvar _dialogEditTag AlertDialog?\nval dialogEditTag\nvar _binding EditTagBinding?\nval binding\nvar DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "        startUiState()\r\n        showDialogRenameTag()\r\n    }",
  "context" : "override fun onShow(dialog: DialogInterface) {\r\n        setObservers()\r\n        startUiState()\r\n        showDialogRenameTag()\r\n    }",
  "start_lineno" : "86",
  "methodName" : "onShow",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt",
  "task_id" : "simplenote-android/428",
  "prompt" : "import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onShow(dialog: DialogInterface) {\r\n        setObservers()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagDialogViewModel\nvar _dialogEditTag AlertDialog?\nval dialogEditTag\nvar _binding EditTagBinding?\nval binding\nvar DIALOG_TAG",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "        viewModel.start(tag)\r\n        binding.inputTagName.editText?.setText(tag.name)\r\n    }",
  "context" : "private fun startUiState() {\r\n        viewModel.start(tag)\r\n        binding.inputTagName.editText?.setText(tag.name)\r\n    }",
  "start_lineno" : "92",
  "methodName" : "startUiState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt",
  "task_id" : "simplenote-android/429",
  "prompt" : "private fun startUiState() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "        binding.setupViews()\r\n        binding.setObservers()\r\n\r\n        viewModel.start()\r\n    }",
  "context" : "public override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val binding = ActivityTagsBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.setupViews()\r\n        binding.setObservers()\r\n\r\n        viewModel.start()\r\n    }",
  "start_lineno" : "29",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/430",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nimport android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val binding = ActivityTagsBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "        }\r\n        toast(R.string.add_tag)\r\n    }",
  "context" : "private fun ActivityTagsBinding.showLongAddToast() {\r\n        if (buttonAdd.isHapticFeedbackEnabled) {\r\n            buttonAdd.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)\r\n        }\r\n        toast(R.string.add_tag)\r\n    }",
  "start_lineno" : "95",
  "methodName" : "showLongAddToast",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/431",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.showLongAddToast() {\r\n        if (buttonAdd.isHapticFeedbackEnabled) {\r\n            buttonAdd.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "108",
  "ground_truth" : "        if (v.isHapticFeedbackEnabled) {\r\n            v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)\r\n        }\r\n        toast(R.string.delete_tag)\r\n    }",
  "context" : "private fun showLongDeleteToast(event: LongDeleteTagEvent) {\r\n        val v = event.view\r\n        if (v.isHapticFeedbackEnabled) {\r\n            v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)\r\n        }\r\n        toast(R.string.delete_tag)\r\n    }",
  "start_lineno" : "102",
  "methodName" : "showLongDeleteToast",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/432",
  "prompt" : "import android.view\nprivate fun showLongDeleteToast(event: LongDeleteTagEvent) {\r\n        val v = event.view\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "117",
  "ground_truth" : "        alert.setMessage(getString(R.string.confirm_delete_tag))\r\n        alert.setNegativeButton(R.string.no, null)\r\n        alert.setPositiveButton(R.string.yes) { _: DialogInterface?, _: Int -> viewModel.deleteTag(event.tagItem) }\r\n        alert.show()\r\n    }",
  "context" : "private fun showDeleteDialog(event: DeleteTagEvent) {\r\n        val alert = AlertDialog.Builder(ContextThemeWrapper(this, R.style.Dialog))\r\n        alert.setTitle(R.string.delete_tag)\r\n        alert.setMessage(getString(R.string.confirm_delete_tag))\r\n        alert.setNegativeButton(R.string.no, null)\r\n        alert.setPositiveButton(R.string.yes) { _: DialogInterface?, _: Int -> viewModel.deleteTag(event.tagItem) }\r\n        alert.show()\r\n    }",
  "start_lineno" : "110",
  "methodName" : "showDeleteDialog",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/433",
  "prompt" : "import androidx.appcompat.view.ContextThemeWrapper\nimport androidx.appcompat.app.AlertDialog\nprivate fun showDeleteDialog(event: DeleteTagEvent) {\r\n        val alert = AlertDialog.Builder(ContextThemeWrapper(this, R.style.Dialog))\r\n        alert.setTitle(R.string.delete_tag)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "122",
  "ground_truth" : "        val dialog = TagDialogFragment(event.tagItem.tag)\r\n        dialog.show(supportFragmentManager.beginTransaction(), TagDialogFragment.DIALOG_TAG)\r\n    }",
  "context" : "private fun showTagDialogFragment(event: EditTagEvent) {\r\n        val dialog = TagDialogFragment(event.tagItem.tag)\r\n        dialog.show(supportFragmentManager.beginTransaction(), TagDialogFragment.DIALOG_TAG)\r\n    }",
  "start_lineno" : "119",
  "methodName" : "showTagDialogFragment",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/434",
  "prompt" : "private fun showTagDialogFragment(event: EditTagEvent) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "180",
  "ground_truth" : "        DisplayUtils.disableScreenshotsIfLocked(this)\r\n        viewModel.startListeningTagChanges()\r\n    }",
  "context" : "override fun onResume() {\r\n        super.onResume()\r\n        DisplayUtils.disableScreenshotsIfLocked(this)\r\n        viewModel.startListeningTagChanges()\r\n    }",
  "start_lineno" : "176",
  "methodName" : "onResume",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/435",
  "prompt" : "override fun onResume() {\r\n        super.onResume()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "185",
  "ground_truth" : "        super.onPause()\r\n        viewModel.stopListeningTagChanges()\r\n    }",
  "context" : "public override fun onPause() {\r\n        super.onPause()\r\n        viewModel.stopListeningTagChanges()\r\n    }",
  "start_lineno" : "182",
  "methodName" : "onPause",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/436",
  "prompt" : "public override fun onPause() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "193",
  "ground_truth" : "        }\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n    }",
  "context" : " @Suppress(\"DEPRECATION\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (resultCode == RESULT_OK && requestCode == REQUEST_ADD_TAG) {\r\n            viewModel.updateOnResult()\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n    }",
  "start_lineno" : "187",
  "methodName" : "onActivityResult",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/437",
  "prompt" : "import android.view\nimport android.content.Intent\n @Suppress(\"DEPRECATION\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (resultCode == RESULT_OK && requestCode == REQUEST_ADD_TAG) {\r\n            viewModel.updateOnResult()\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "198",
  "ground_truth" : "        setEmptyListImage(R.drawable.ic_tag_24dp)\r\n        setEmptyListMessage(getString(R.string.empty_tags))\r\n    }",
  "context" : "private fun ActivityTagsBinding.setLabelEmptyTagList() {\r\n        setEmptyListImage(R.drawable.ic_tag_24dp)\r\n        setEmptyListMessage(getString(R.string.empty_tags))\r\n    }",
  "start_lineno" : "195",
  "methodName" : "setLabelEmptyTagList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/438",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.setLabelEmptyTagList() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "209",
  "ground_truth" : "        } else {\r\n            setEmptyListImage(R.drawable.ic_search_24dp)\r\n        }\r\n        setEmptyListMessage(getString(R.string.empty_tags_search))\r\n    }",
  "context" : "private fun ActivityTagsBinding.setLabelEmptyTagListSearchResults() {\r\n        if (DisplayUtils.isLandscape(this@TagsActivity) &&\r\n            !DisplayUtils.isLargeScreen(this@TagsActivity)\r\n        ) {\r\n            setEmptyListImage(-1)\r\n        } else {\r\n            setEmptyListImage(R.drawable.ic_search_24dp)\r\n        }\r\n        setEmptyListMessage(getString(R.string.empty_tags_search))\r\n    }",
  "start_lineno" : "200",
  "methodName" : "setLabelEmptyTagListSearchResults",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/439",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.setLabelEmptyTagListSearchResults() {\r\n        if (DisplayUtils.isLandscape(this@TagsActivity) &&\r\n            !DisplayUtils.isLargeScreen(this@TagsActivity)\r\n        ) {\r\n            setEmptyListImage(-1)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "218",
  "ground_truth" : "            empty.image.setImageResource(image)\r\n        } else {\r\n            empty.image.visibility = View.GONE\r\n        }\r\n    }",
  "context" : "private fun ActivityTagsBinding.setEmptyListImage(@DrawableRes image: Int) {\r\n        if (image != -1) {\r\n            empty.image.visibility = View.VISIBLE\r\n            empty.image.setImageResource(image)\r\n        } else {\r\n            empty.image.visibility = View.GONE\r\n        }\r\n    }",
  "start_lineno" : "211",
  "methodName" : "setEmptyListImage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/440",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nimport androidx.annotation.DrawableRes\nprivate fun ActivityTagsBinding.setEmptyListImage(@DrawableRes image: Int) {\r\n        if (image != -1) {\r\n            empty.image.visibility = View.VISIBLE\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "224",
  "ground_truth" : "            empty.text.text = it\r\n        }\r\n    }",
  "context" : "private fun ActivityTagsBinding.setEmptyListMessage(message: String?) {\r\n        message?.let {\r\n            empty.text.text = it\r\n        }\r\n    }",
  "start_lineno" : "220",
  "methodName" : "setEmptyListMessage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/441",
  "prompt" : "import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.setEmptyListMessage(message: String?) {\r\n        message?.let {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val viewModel TagsViewModel\nval REQUEST_ADD_TAG",
  "app_type" : "notes",
  "end_lineno" : "232",
  "ground_truth" : "            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "context" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r\n            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }",
  "start_lineno" : "226",
  "methodName" : "onOptionsItemSelected",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt",
  "task_id" : "simplenote-android/442",
  "prompt" : "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Boolean mThemeChanged = false;",
  "app_type" : "notes",
  "end_lineno" : "28",
  "ground_truth" : "    setTheme(ThemeUtils.getStyle(this));\r\n    PreferenceManager.getDefaultSharedPreferences(this).registerOnSharedPreferenceChangeListener(this);\r\n}",
  "context" : "@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    ThemeUtils.setTheme(this);\r\n    super.onCreate(savedInstanceState);\r\n    setTheme(ThemeUtils.getStyle(this));\r\n    PreferenceManager.getDefaultSharedPreferences(this).registerOnSharedPreferenceChangeListener(this);\r\n}",
  "start_lineno" : "22",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java",
  "task_id" : "simplenote-android/443",
  "prompt" : "import com.automattic.simplenote.utils.ThemeUtils\nimport androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    ThemeUtils.setTheme(this);\r\n    super.onCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Boolean mThemeChanged = false;",
  "app_type" : "notes",
  "end_lineno" : "37",
  "ground_truth" : "    if (mThemeChanged) {\r\n        recreate();\r\n        mThemeChanged = false;\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onRestart() {\r\n    super.onRestart();\r\n    if (mThemeChanged) {\r\n        recreate();\r\n        mThemeChanged = false;\r\n    }\r\n}",
  "start_lineno" : "30",
  "methodName" : "onRestart",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java",
  "task_id" : "simplenote-android/444",
  "prompt" : "@Override\r\nprotected void onRestart() {\r\n    super.onRestart();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Boolean mThemeChanged = false;",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "        } else {\r\n            mThemeChanged = true;\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (key.equals(PrefUtils.PREF_THEME) || key.equals(PrefUtils.PREF_STYLE_INDEX)) {\r\n        if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\r\n            recreate();\r\n        } else {\r\n            mThemeChanged = true;\r\n        }\r\n    }\r\n}",
  "start_lineno" : "39",
  "methodName" : "onSharedPreferenceChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java",
  "task_id" : "simplenote-android/445",
  "prompt" : "import com.automattic.simplenote.utils.PrefUtils\nimport androidx.lifecycle.Lifecycle\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (key.equals(PrefUtils.PREF_THEME) || key.equals(PrefUtils.PREF_STYLE_INDEX)) {\r\n        if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\r\n            recreate();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Boolean mThemeChanged = false;",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "    }\r\n    startActivity(intent);\r\n    overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n    finish();\r\n}",
  "context" : "@Override\r\npublic void recreate() {\r\n    Intent intent = new Intent(this, getClass());\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    if (getIntent().getExtras() != null) {\r\n        intent.putExtras(getIntent().getExtras());\r\n    }\r\n    startActivity(intent);\r\n    overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\r\n    finish();\r\n}",
  "start_lineno" : "50",
  "methodName" : "recreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java",
  "task_id" : "simplenote-android/446",
  "prompt" : "import android.content.Intent\n@Override\r\npublic void recreate() {\r\n    Intent intent = new Intent(this, getClass());\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    if (getIntent().getExtras() != null) {\r\n        intent.putExtras(getIntent().getExtras());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Boolean mThemeChanged = false;",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "    super.onDestroy();\r\n    PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);\r\n}",
  "context" : "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);\r\n}",
  "start_lineno" : "62",
  "methodName" : "onDestroy",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java",
  "task_id" : "simplenote-android/447",
  "prompt" : "@Override\r\nprotected void onDestroy() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "20",
  "ground_truth" : "        return tagsRepository.allTags()\r\n            .filter { tagItem -> !collaboratorsRepository.isValidCollaborator(tagItem.tag.name) }\r\n    }",
  "context" : "suspend fun allTags(): List<TagItem> {\r\n        return tagsRepository.allTags()\r\n            .filter { tagItem -> !collaboratorsRepository.isValidCollaborator(tagItem.tag.name) }\r\n    }",
  "start_lineno" : "17",
  "methodName" : "allTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\usecases\\GetTagsUseCase.kt",
  "task_id" : "simplenote-android/448",
  "prompt" : "import com.automattic.simplenote.models.TagItem\nsuspend fun allTags(): List<TagItem> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "        return tagsRepository.searchTags(query)\r\n            .filter { tagItem -> !collaboratorsRepository.isValidCollaborator(tagItem.tag.name) }\r\n    }",
  "context" : "suspend fun searchTags(query: String): List<TagItem> {\r\n        return tagsRepository.searchTags(query)\r\n            .filter { tagItem -> !collaboratorsRepository.isValidCollaborator(tagItem.tag.name) }\r\n    }",
  "start_lineno" : "22",
  "methodName" : "searchTags",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\usecases\\GetTagsUseCase.kt",
  "task_id" : "simplenote-android/449",
  "prompt" : "import com.automattic.simplenote.models.TagItem\nsuspend fun searchTags(query: String): List<TagItem> {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "19",
  "ground_truth" : "        collaboratorsRepository.isValidCollaborator(tagName) -> TagValidationResult.TagIsCollaborator\r\n        !tagsRepository.isTagValid(tagName) -> TagValidationResult.TagTooLong\r\n        !tagsRepository.isTagMissing(tagName) -> TagValidationResult.TagExists\r\n        else -> TagValidationResult.TagValid\r\n    }",
  "context" : "fun isTagValid(tagName: String) = when {\r\n        tagName.isEmpty() -> TagValidationResult.TagEmpty\r\n        tagName.contains(SPACE_STRING) -> TagValidationResult.TagWithSpaces\r\n        collaboratorsRepository.isValidCollaborator(tagName) -> TagValidationResult.TagIsCollaborator\r\n        !tagsRepository.isTagValid(tagName) -> TagValidationResult.TagTooLong\r\n        !tagsRepository.isTagMissing(tagName) -> TagValidationResult.TagExists\r\n        else -> TagValidationResult.TagValid\r\n    }",
  "start_lineno" : "12",
  "methodName" : "isTagValid",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\usecases\\ValidateTagUseCase.kt",
  "task_id" : "simplenote-android/450",
  "prompt" : "import com.automattic.simplenote.utils.StrUtils.SPACE_STRING\nfun isTagValid(tagName: String) = when {\r\n        tagName.isEmpty() -> TagValidationResult.TagEmpty\r\n        tagName.contains(SPACE_STRING) -> TagValidationResult.TagWithSpaces\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final String SIMPLENOTE_SEND_VERIFICATION_EMAIL = \"verify-email/\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");",
  "app_type" : "notes",
  "end_lineno" : "78",
  "ground_truth" : "    String url = call.request().url().toString();\r\n    handler.onFailure(e, url);\r\n}",
  "context" : "@Override\r\npublic void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n    String url = call.request().url().toString();\r\n    handler.onFailure(e, url);\r\n}",
  "start_lineno" : "74",
  "methodName" : "onFailure",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountNetworkUtils.java",
  "task_id" : "simplenote-android/451",
  "prompt" : "import okhttp3.Call\nimport java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull IOException e) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final String SIMPLENOTE_SEND_VERIFICATION_EMAIL = \"verify-email/\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "        handler.onSuccess(url);\r\n    } else {\r\n        handler.onFailure(new Exception(\"Error code: \" + response.code()), url);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    String url = call.request().url().toString();\r\n    if (response.code() == 200) {\r\n        handler.onSuccess(url);\r\n    } else {\r\n        handler.onFailure(new Exception(\"Error code: \" + response.code()), url);\r\n    }\r\n}",
  "start_lineno" : "80",
  "methodName" : "onResponse",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountNetworkUtils.java",
  "task_id" : "simplenote-android/452",
  "prompt" : "import okhttp3.Response\nimport okhttp3.Call\nimport androidx.annotation.NonNull\n@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    String url = call.request().url().toString();\r\n    if (response.code() == 200) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TIMEOUT_SECS = 30;\nprivate static final String HTTP_SCHEME = \"https\";\nprivate static final String HTTP_HOST = \"app.simplenote.com\";\nprivate static final String ACCEPT_LANGUAGE = \"Accept-Language\";\nprivate static final String SIMPLENOTE_SEND_VERIFICATION_EMAIL = \"verify-email/\";\nprivate static final MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=utf-8\");",
  "app_type" : "notes",
  "end_lineno" : "134",
  "ground_truth" : "        return LocaleList.getDefault().toLanguageTags();\r\n    } else {\r\n        return Locale.getDefault().getLanguage();\r\n    }\r\n}",
  "context" : "private static String getLanguage() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        return LocaleList.getDefault().toLanguageTags();\r\n    } else {\r\n        return Locale.getDefault().getLanguage();\r\n    }\r\n}",
  "start_lineno" : "128",
  "methodName" : "getLanguage",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountNetworkUtils.java",
  "task_id" : "simplenote-android/453",
  "prompt" : "import android.os.Build\nprivate static String getLanguage() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Simplenote simplenote;\nprivate final VerificationStateListener listener;\nprivate Status currentState;",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "        listener.onUpdate(newState);\r\n    }\r\n}",
  "context" : "private void updateState(Status newState) {\r\n    if (newState != currentState) {\r\n        currentState = newState;\r\n        listener.onUpdate(newState);\r\n    }\r\n}",
  "start_lineno" : "39",
  "methodName" : "updateState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountVerificationWatcher.java",
  "task_id" : "simplenote-android/454",
  "prompt" : "private void updateState(Status newState) {\r\n    if (newState != currentState) {\r\n        currentState = newState;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "        animation.setAnimationListener(listener);\r\n    target.startAnimation(animation);\r\n    if (target.getVisibility() != View.VISIBLE)\r\n        target.setVisibility(View.VISIBLE);\r\n}",
  "context" : "public static void fadeIn(final View target, AnimationListener listener) {\r\n    if (target == null)\r\n        return;\r\n    Animation animation = AnimationUtils.loadAnimation(target.getContext(), android.R.anim.fade_in);\r\n    if (listener != null)\r\n        animation.setAnimationListener(listener);\r\n    target.startAnimation(animation);\r\n    if (target.getVisibility() != View.VISIBLE)\r\n        target.setVisibility(View.VISIBLE);\r\n}",
  "start_lineno" : "23",
  "methodName" : "fadeIn",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AniUtils.java",
  "task_id" : "simplenote-android/455",
  "prompt" : "import android.view.animation.AnimationUtils\nimport android.view.animation.Animation.AnimationListener\nimport android.view.animation.Animation\nimport android.view.View\npublic static void fadeIn(final View target, AnimationListener listener) {\r\n    if (target == null)\r\n        return;\r\n    Animation animation = AnimationUtils.loadAnimation(target.getContext(), android.R.anim.fade_in);\r\n    if (listener != null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "        animation.setAnimationListener(listener);\r\n    target.startAnimation(animation);\r\n    if (target.getVisibility() != endVisibility)\r\n        target.setVisibility(endVisibility);\r\n}",
  "context" : "public static void fadeOut(final View target, int endVisibility, AnimationListener listener) {\r\n    if (target == null)\r\n        return;\r\n    Animation animation = AnimationUtils.loadAnimation(target.getContext(), android.R.anim.fade_out);\r\n    if (listener != null)\r\n        animation.setAnimationListener(listener);\r\n    target.startAnimation(animation);\r\n    if (target.getVisibility() != endVisibility)\r\n        target.setVisibility(endVisibility);\r\n}",
  "start_lineno" : "41",
  "methodName" : "fadeOut",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AniUtils.java",
  "task_id" : "simplenote-android/456",
  "prompt" : "import android.view.animation.AnimationUtils\nimport android.view.animation.Animation.AnimationListener\nimport android.view.animation.Animation\nimport android.view.View\npublic static void fadeOut(final View target, int endVisibility, AnimationListener listener) {\r\n    if (target == null)\r\n        return;\r\n    Animation animation = AnimationUtils.loadAnimation(target.getContext(), android.R.anim.fade_out);\r\n    if (listener != null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "    textView.setText(newText);\r\n    textView.startAnimation(animationIn);\r\n}",
  "context" : "@Override\r\npublic void onAnimationEnd(Animation animation) {\r\n    Animation animationIn = AnimationUtils.loadAnimation(textView.getContext(), android.R.anim.fade_in);\r\n    textView.setText(newText);\r\n    textView.startAnimation(animationIn);\r\n}",
  "start_lineno" : "61",
  "methodName" : "onAnimationEnd",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AniUtils.java",
  "task_id" : "simplenote-android/457",
  "prompt" : "import android.view.animation.AnimationUtils\nimport android.view.animation.Animation\nimport android.view.View\n@Override\r\npublic void onAnimationEnd(Animation animation) {\r\n    Animation animationIn = AnimationUtils.loadAnimation(textView.getContext(), android.R.anim.fade_in);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int LOG_MAX = 100;\nprivate static final LinkedHashMap<Integer, String> mQueue = new LinkedHashMap<Integer, String>() {\r\n\r\n    @Override\r\n    protected boolean removeEldestEntry(Map.Entry<Integer, String> eldest) {\r\n        return this.size() > LOG_MAX;\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "        String timestamp = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\", Locale.US).format(new Date());\r\n        log = timestamp + \" - \" + type.toString() + \": \" + message + \"\\n\";\r\n    }\r\n    mQueue.put(mQueue.size(), log);\r\n}",
  "context" : "public static void add(Type type, String message) {\r\n    String log;\r\n    if (type == Type.ACCOUNT || type == Type.DEVICE) {\r\n        log = message + \"\\n\";\r\n    } else {\r\n        String timestamp = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\", Locale.US).format(new Date());\r\n        log = timestamp + \" - \" + type.toString() + \": \" + message + \"\\n\";\r\n    }\r\n    mQueue.put(mQueue.size(), log);\r\n}",
  "start_lineno" : "32",
  "methodName" : "add",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AppLog.java",
  "task_id" : "simplenote-android/458",
  "prompt" : "public static void add(Type type, String message) {\r\n    String log;\r\n    if (type == Type.ACCOUNT || type == Type.DEVICE) {\r\n        log = message + \"\\n\";\r\n    } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int LOG_MAX = 100;\nprivate static final LinkedHashMap<Integer, String> mQueue = new LinkedHashMap<Integer, String>() {\r\n\r\n    @Override\r\n    protected boolean removeEldestEntry(Map.Entry<Integer, String> eldest) {\r\n        return this.size() > LOG_MAX;\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "    for (Map.Entry<Integer, String> entry : mQueue.entrySet()) {\r\n        queue.append(entry.getValue());\r\n    }\r\n    return queue.toString();\r\n}",
  "context" : "public static String get() {\r\n    StringBuilder queue = new StringBuilder();\r\n    for (Map.Entry<Integer, String> entry : mQueue.entrySet()) {\r\n        queue.append(entry.getValue());\r\n    }\r\n    return queue.toString();\r\n}",
  "start_lineno" : "45",
  "methodName" : "get",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AppLog.java",
  "task_id" : "simplenote-android/459",
  "prompt" : "public static String get() {\r\n    StringBuilder queue = new StringBuilder();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "67",
  "ground_truth" : "    String spToken = uri.getQueryParameter(\"token\");\r\n    application.loginWithToken(userEmail, spToken);\r\n}",
  "context" : "public static void magicLinkLogin(Simplenote application, Uri uri) {\r\n    String userEmail = extractEmailFromMagicLink(uri);\r\n    String spToken = uri.getQueryParameter(\"token\");\r\n    application.loginWithToken(userEmail, spToken);\r\n}",
  "start_lineno" : "62",
  "methodName" : "magicLinkLogin",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AuthUtils.java",
  "task_id" : "simplenote-android/460",
  "prompt" : "import com.automattic.simplenote.Simplenote\nimport android.net.Uri\npublic static void magicLinkLogin(Simplenote application, Uri uri) {\r\n    String userEmail = extractEmailFromMagicLink(uri);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "72",
  "ground_truth" : "    String userEmailEncoded = uri.getQueryParameter(\"email\");\r\n    return new String(Base64.decode(userEmailEncoded, Base64.NO_WRAP), StandardCharsets.UTF_8);\r\n}",
  "context" : "public static String extractEmailFromMagicLink(Uri uri) {\r\n    String userEmailEncoded = uri.getQueryParameter(\"email\");\r\n    return new String(Base64.decode(userEmailEncoded, Base64.NO_WRAP), StandardCharsets.UTF_8);\r\n}",
  "start_lineno" : "69",
  "methodName" : "extractEmailFromMagicLink",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AuthUtils.java",
  "task_id" : "simplenote-android/461",
  "prompt" : "import android.net.Uri\npublic static String extractEmailFromMagicLink(Uri uri) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String PATTERN_BULLET = \"^([\\\\s]*)([-*+\" + CHAR_BULLET + CHAR_NO_BREAK_SPACE + \"])[\\\\s]+(.*)$\";\nprivate static final String STR_LINE_BREAK = System.getProperty(\"line.separator\");\nprivate static final String STR_SPACE = \" \";\nString bulletChar;\nString leadingWhitespace;\nboolean isBullet = false;\nboolean isEmptyBullet = false;",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "        metadata.bulletChar = matcher.group(2);\r\n        metadata.isEmptyBullet = matcher.group(3).trim().isEmpty();\r\n    }\r\n    return metadata;\r\n}",
  "context" : "private static BulletMetadata extractBulletMetadata(String input) {\r\n    BulletMetadata metadata = new BulletMetadata();\r\n    Pattern pattern = Pattern.compile(PATTERN_BULLET);\r\n    Matcher matcher = pattern.matcher(input);\r\n    if (matcher.find()) {\r\n        metadata.isBullet = true;\r\n        metadata.leadingWhitespace = matcher.group(1);\r\n        metadata.bulletChar = matcher.group(2);\r\n        metadata.isEmptyBullet = matcher.group(3).trim().isEmpty();\r\n    }\r\n    return metadata;\r\n}",
  "start_lineno" : "66",
  "methodName" : "extractBulletMetadata",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AutoBullet.java",
  "task_id" : "simplenote-android/462",
  "prompt" : "import java.util.regex.Pattern\nimport java.util.regex.Matcher\nprivate static BulletMetadata extractBulletMetadata(String input) {\r\n    BulletMetadata metadata = new BulletMetadata();\r\n    Pattern pattern = Pattern.compile(PATTERN_BULLET);\r\n    Matcher matcher = pattern.matcher(input);\r\n    if (matcher.find()) {\r\n        metadata.isBullet = true;\r\n        metadata.leadingWhitespace = matcher.group(1);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Cursor mCursor;\nprivate boolean mDataValid;\nprivate int mRowIDColumn;",
  "app_type" : "notes",
  "end_lineno" : "31",
  "ground_truth" : "    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to bind view holder\");\r\n    }\r\n    onBindViewHolder(holder, mCursor);\r\n}",
  "context" : "@Override\r\npublic void onBindViewHolder(@NonNull V holder, int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot bind view holder when cursor is in invalid state.\");\r\n    }\r\n    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to bind view holder\");\r\n    }\r\n    onBindViewHolder(holder, mCursor);\r\n}",
  "start_lineno" : "20",
  "methodName" : "onBindViewHolder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java",
  "task_id" : "simplenote-android/463",
  "prompt" : "import androidx.annotation.NonNull\n@Override\r\npublic void onBindViewHolder(@NonNull V holder, int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot bind view holder when cursor is in invalid state.\");\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Cursor mCursor;\nprivate boolean mDataValid;\nprivate int mRowIDColumn;",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "        return mCursor.getCount();\r\n    } else {\r\n        return 0;\r\n    }\r\n}",
  "context" : "@Override\r\npublic int getItemCount() {\r\n    if (mDataValid) {\r\n        return mCursor.getCount();\r\n    } else {\r\n        return 0;\r\n    }\r\n}",
  "start_lineno" : "33",
  "methodName" : "getItemCount",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java",
  "task_id" : "simplenote-android/464",
  "prompt" : "@Override\r\npublic int getItemCount() {\r\n    if (mDataValid) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Cursor mCursor;\nprivate boolean mDataValid;\nprivate int mRowIDColumn;",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to get an item id\");\r\n    }\r\n    return mCursor.getLong(mRowIDColumn);\r\n}",
  "context" : "@Override\r\npublic long getItemId(int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot lookup item id when cursor is in invalid state.\");\r\n    }\r\n    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to get an item id\");\r\n    }\r\n    return mCursor.getLong(mRowIDColumn);\r\n}",
  "start_lineno" : "42",
  "methodName" : "getItemId",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java",
  "task_id" : "simplenote-android/465",
  "prompt" : "@Override\r\npublic long getItemId(int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot lookup item id when cursor is in invalid state.\");\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Cursor mCursor;\nprivate boolean mDataValid;\nprivate int mRowIDColumn;",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to get an item id\");\r\n    }\r\n    return mCursor;\r\n}",
  "context" : "public Cursor getItem(int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot lookup item id when cursor is in invalid state.\");\r\n    }\r\n    if (!mCursor.moveToPosition(position)) {\r\n        throw new IllegalStateException(\"Could not move cursor to position \" + position + \" when trying to get an item id\");\r\n    }\r\n    return mCursor;\r\n}",
  "start_lineno" : "54",
  "methodName" : "getItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java",
  "task_id" : "simplenote-android/466",
  "prompt" : "import android.database.Cursor\npublic Cursor getItem(int position) {\r\n    if (!mDataValid) {\r\n        throw new IllegalStateException(\"Cannot lookup item id when cursor is in invalid state.\");\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Cursor mCursor;\nprivate boolean mDataValid;\nprivate int mRowIDColumn;",
  "app_type" : "notes",
  "end_lineno" : "84",
  "ground_truth" : "        mCursor = null;\r\n        mRowIDColumn = -1;\r\n        mDataValid = false;\r\n    }\r\n}",
  "context" : "public void swapCursor(Cursor newCursor) {\r\n    if (newCursor == mCursor) {\r\n        return;\r\n    }\r\n    if (newCursor != null) {\r\n        mCursor = newCursor;\r\n        mDataValid = true;\r\n        // notify the observers about the new cursor\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyItemRangeRemoved(0, getItemCount());\r\n        mCursor = null;\r\n        mRowIDColumn = -1;\r\n        mDataValid = false;\r\n    }\r\n}",
  "start_lineno" : "68",
  "methodName" : "swapCursor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java",
  "task_id" : "simplenote-android/467",
  "prompt" : "import android.database.Cursor\npublic void swapCursor(Cursor newCursor) {\r\n    if (newCursor == mCursor) {\r\n        return;\r\n    }\r\n    if (newCursor != null) {\r\n        mCursor = newCursor;\r\n        mDataValid = true;\r\n        // notify the observers about the new cursor\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyItemRangeRemoved(0, getItemCount());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "17",
  "ground_truth" : "    val hintHexColor = hintColor.toHexString().replace(\"ff\", \"\")\r\n    return \"#$hintHexColor\"\r\n}",
  "context" : "fun AppCompatActivity.getColorStr(@ColorRes color: Int): String {\r\n    val hintColor = ContextCompat.getColor(this, color)\r\n    val hintHexColor = hintColor.toHexString().replace(\"ff\", \"\")\r\n    return \"#$hintHexColor\"\r\n}",
  "start_lineno" : "13",
  "methodName" : "getColorStr",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseExt.kt",
  "task_id" : "simplenote-android/468",
  "prompt" : "import androidx.core.content.ContextCompat\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.ColorRes\nfun AppCompatActivity.getColorStr(@ColorRes color: Int): String {\r\n    val hintColor = ContextCompat.getColor(this, color)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String URL_WEB_VIEW = \"https://play.google.com/store/apps/details?id=com.google.android.webview\";",
  "app_type" : "notes",
  "end_lineno" : "24",
  "ground_truth" : "    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(context.getString(R.string.simperium_url)));\r\n    return (intent.resolveActivity(context.getPackageManager()) != null);\r\n}",
  "context" : "public static boolean isBrowserInstalled(Context context) {\r\n    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(context.getString(R.string.simperium_url)));\r\n    return (intent.resolveActivity(context.getPackageManager()) != null);\r\n}",
  "start_lineno" : "21",
  "methodName" : "isBrowserInstalled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java",
  "task_id" : "simplenote-android/469",
  "prompt" : "import android.content.Context\npublic static boolean isBrowserInstalled(Context context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String URL_WEB_VIEW = \"https://play.google.com/store/apps/details?id=com.google.android.webview\";",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "        return true;\r\n    } catch (Exception exception) {\r\n        return false;\r\n    }\r\n}",
  "context" : "public static boolean isWebViewInstalled(Context context) {\r\n    try {\r\n        new WebView(context);\r\n        return true;\r\n    } catch (Exception exception) {\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "26",
  "methodName" : "isWebViewInstalled",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java",
  "task_id" : "simplenote-android/470",
  "prompt" : "import android.webkit.WebView\nimport android.content.Context\npublic static boolean isWebViewInstalled(Context context) {\r\n    try {\r\n        new WebView(context);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String URL_WEB_VIEW = \"https://play.google.com/store/apps/details?id=com.google.android.webview\";",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\r\n    } else {\r\n        BrowserUtils.showDialogErrorBrowser(context, url);\r\n    }\r\n}",
  "context" : "public static void launchBrowserOrShowError(@NonNull Context context, String url) {\r\n    if (BrowserUtils.isBrowserInstalled(context)) {\r\n        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\r\n    } else {\r\n        BrowserUtils.showDialogErrorBrowser(context, url);\r\n    }\r\n}",
  "start_lineno" : "53",
  "methodName" : "launchBrowserOrShowError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java",
  "task_id" : "simplenote-android/471",
  "prompt" : "import androidx.annotation.NonNull\nimport android.content.Context\npublic static void launchBrowserOrShowError(@NonNull Context context, String url) {\r\n    if (BrowserUtils.isBrowserInstalled(context)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String URL_WEB_VIEW = \"https://play.google.com/store/apps/details?id=com.google.android.webview\";",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "        Toast.makeText(context, R.string.simperium_error_browser_copy_success, Toast.LENGTH_SHORT).show();\r\n    } else {\r\n        Toast.makeText(context, R.string.simperium_error_browser_copy_failure, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (copyToClipboard(context, url)) {\r\n        Toast.makeText(context, R.string.simperium_error_browser_copy_success, Toast.LENGTH_SHORT).show();\r\n    } else {\r\n        Toast.makeText(context, R.string.simperium_error_browser_copy_failure, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "start_lineno" : "68",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java",
  "task_id" : "simplenote-android/472",
  "prompt" : "import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (copyToClipboard(context, url)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String URL_WEB_VIEW = \"https://play.google.com/store/apps/details?id=com.google.android.webview\";",
  "app_type" : "notes",
  "end_lineno" : "96",
  "ground_truth" : "        Toast.makeText(context, R.string.dialog_browser_exception_toast_copy_success, Toast.LENGTH_SHORT).show();\r\n    } else {\r\n        Toast.makeText(context, R.string.dialog_browser_exception_toast_copy_failure, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (copyToClipboard(context, url)) {\r\n        Toast.makeText(context, R.string.dialog_browser_exception_toast_copy_success, Toast.LENGTH_SHORT).show();\r\n    } else {\r\n        Toast.makeText(context, R.string.dialog_browser_exception_toast_copy_failure, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "start_lineno" : "89",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java",
  "task_id" : "simplenote-android/473",
  "prompt" : "import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (copyToClipboard(context, url)) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val id Int\nval id\nval ITEM_VIEW_TYPE_HEADER\nval ITEM_VIEW_TYPE_ITEM\nval DIFF_CALLBACK",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "            is CollaboratorDataItem.CollaboratorItem -> ITEM_VIEW_TYPE_ITEM\r\n        }\r\n    }",
  "context" : "override fun getItemViewType(position: Int): Int {\r\n        return when (getItem(position)) {\r\n            is CollaboratorDataItem.HeaderItem -> ITEM_VIEW_TYPE_HEADER\r\n            is CollaboratorDataItem.CollaboratorItem -> ITEM_VIEW_TYPE_ITEM\r\n        }\r\n    }",
  "start_lineno" : "29",
  "methodName" : "getItemViewType",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\CollaboratorsAdapter.kt",
  "task_id" : "simplenote-android/474",
  "prompt" : "override fun getItemViewType(position: Int): Int {\r\n        return when (getItem(position)) {\r\n            is CollaboratorDataItem.HeaderItem -> ITEM_VIEW_TYPE_HEADER\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val id Int\nval id\nval ITEM_VIEW_TYPE_HEADER\nval ITEM_VIEW_TYPE_ITEM\nval DIFF_CALLBACK",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "            holder.bind(getItem(position) as CollaboratorDataItem.CollaboratorItem)\r\n        }\r\n    }",
  "context" : "override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if (holder is CollaboratorViewHolder) {\r\n            holder.bind(getItem(position) as CollaboratorDataItem.CollaboratorItem)\r\n        }\r\n    }",
  "start_lineno" : "36",
  "methodName" : "onBindViewHolder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\CollaboratorsAdapter.kt",
  "task_id" : "simplenote-android/475",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if (holder is CollaboratorViewHolder) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val id Int\nval id\nval ITEM_VIEW_TYPE_HEADER\nval ITEM_VIEW_TYPE_ITEM\nval DIFF_CALLBACK",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "            binding.collaboratorText.text = collaborator.email\r\n            binding.collaboratorRemoveButton.setOnClickListener { onDeleteClick(collaborator.email) }\r\n        }",
  "context" : "fun bind(collaborator: CollaboratorDataItem.CollaboratorItem) {\r\n            binding.collaboratorText.text = collaborator.email\r\n            binding.collaboratorRemoveButton.setOnClickListener { onDeleteClick(collaborator.email) }\r\n        }",
  "start_lineno" : "61",
  "methodName" : "bind",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\CollaboratorsAdapter.kt",
  "task_id" : "simplenote-android/476",
  "prompt" : "fun bind(collaborator: CollaboratorDataItem.CollaboratorItem) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val buildType\nval enableCrashLoggingLogs\nval sentryDSN String\nval locale Locale?\nval releaseName\nval DEBUG_RELEASE_NAME",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "            userID = app.simperium.user.userId.orEmpty(),\r\n            email = app.simperium.user.email.orEmpty(),\r\n            username = \"\"\r\n        )\r\n    }",
  "context" : "override fun userProvider(): CrashLoggingUser {\r\n        return CrashLoggingUser(\r\n            userID = app.simperium.user.userId.orEmpty(),\r\n            email = app.simperium.user.email.orEmpty(),\r\n            username = \"\"\r\n        )\r\n    }",
  "start_lineno" : "54",
  "methodName" : "userProvider",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\crashlogging\\SimplenoteCrashLoggingDataProvider.kt",
  "task_id" : "simplenote-android/477",
  "prompt" : "import com.automattic.android.tracks.crashlogging.CrashLoggingUser\noverride fun userProvider(): CrashLoggingUser {\r\n        return CrashLoggingUser(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "27",
  "ground_truth" : "        return \"\";\r\n    }\r\n    CharSequence dateText = DateUtils.getRelativeDateTimeString(context, calendar.getTimeInMillis(), Calendar.getInstance().getTimeInMillis(), 0L, DateUtils.FORMAT_ABBREV_ALL);\r\n    return dateText.toString();\r\n}",
  "context" : "public static String getDateText(Context context, Calendar calendar) {\r\n    if (calendar == null) {\r\n        return \"\";\r\n    }\r\n    CharSequence dateText = DateUtils.getRelativeDateTimeString(context, calendar.getTimeInMillis(), Calendar.getInstance().getTimeInMillis(), 0L, DateUtils.FORMAT_ABBREV_ALL);\r\n    return dateText.toString();\r\n}",
  "start_lineno" : "13",
  "methodName" : "getDateText",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DateTimeUtils.java",
  "task_id" : "simplenote-android/478",
  "prompt" : "import java.util.Calendar\nimport android.content.Context\npublic static String getDateText(Context context, Calendar calendar) {\r\n    if (calendar == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "    String pattern = DateFormat.getBestDateTimePattern(Locale.getDefault(), \"MM/dd/yyyy\");\r\n    return new SimpleDateFormat(pattern, Locale.getDefault()).format(date.getTime());\r\n}",
  "context" : "public static String getDateTextNumeric(Calendar date) {\r\n    String pattern = DateFormat.getBestDateTimePattern(Locale.getDefault(), \"MM/dd/yyyy\");\r\n    return new SimpleDateFormat(pattern, Locale.getDefault()).format(date.getTime());\r\n}",
  "start_lineno" : "29",
  "methodName" : "getDateTextNumeric",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DateTimeUtils.java",
  "task_id" : "simplenote-android/479",
  "prompt" : "import java.util.Calendar\npublic static String getDateTextNumeric(Calendar date) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "40",
  "ground_truth" : "    String pattern = DateFormat.getBestDateTimePattern(Locale.getDefault(), DateFormat.is24HourFormat(context) ? \"MMM dd, yyyy, H:mm\" : \"MMM dd, yyyy, h:mm\");\r\n    return new SimpleDateFormat(pattern, Locale.getDefault()).format(calendar.getTime());\r\n}",
  "context" : "public static String getDateTextString(Context context, Calendar calendar) {\r\n    String pattern = DateFormat.getBestDateTimePattern(Locale.getDefault(), DateFormat.is24HourFormat(context) ? \"MMM dd, yyyy, H:mm\" : \"MMM dd, yyyy, h:mm\");\r\n    return new SimpleDateFormat(pattern, Locale.getDefault()).format(calendar.getTime());\r\n}",
  "start_lineno" : "34",
  "methodName" : "getDateTextString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DateTimeUtils.java",
  "task_id" : "simplenote-android/480",
  "prompt" : "import java.util.Calendar\nimport android.content.Context\npublic static String getDateTextString(Context context, Calendar calendar) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "48",
  "ground_truth" : "    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, Locale.getDefault());\r\n    Calendar date = Calendar.getInstance();\r\n    date.setTime(dateFormat.parse(json));\r\n    return date;\r\n}",
  "context" : "public static Calendar getDateCalendar(String json) throws ParseException {\r\n    String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\r\n    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, Locale.getDefault());\r\n    Calendar date = Calendar.getInstance();\r\n    date.setTime(dateFormat.parse(json));\r\n    return date;\r\n}",
  "start_lineno" : "42",
  "methodName" : "getDateCalendar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DateTimeUtils.java",
  "task_id" : "simplenote-android/481",
  "prompt" : "import java.util.Calendar\nimport java.text.ParseException\npublic static Calendar getDateCalendar(String json) throws ParseException {\r\n    String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "    Display display = wm.getDefaultDisplay();\r\n    Point size = new Point();\r\n    display.getSize(size);\r\n    return size;\r\n}",
  "context" : "public static Point getDisplayPixelSize(Context context) {\r\n    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n    Display display = wm.getDefaultDisplay();\r\n    Point size = new Point();\r\n    display.getSize(size);\r\n    return size;\r\n}",
  "start_lineno" : "29",
  "methodName" : "getDisplayPixelSize",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/482",
  "prompt" : "import com.automattic.simplenote.R\nimport android.view.WindowManager\nimport android.view.Display\nimport android.graphics.Point\nimport android.content.Context\npublic static Point getDisplayPixelSize(Context context) {\r\n    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "        return \"Small, portrait\";\r\n    } else {\r\n        return \"Unknown\";\r\n    }\r\n}",
  "context" : "@SuppressWarnings(\"ConstantConditions\")\r\npublic static String getDisplaySizeAndOrientation(Context context) {\r\n    boolean isLarge = isLarge(context) || isXLarge(context);\r\n    boolean isLandscape = isLandscape(context);\r\n    if (isLarge && isLandscape) {\r\n        return \"Large, landscape\";\r\n    } else if (isLarge && !isLandscape) {\r\n        return \"Large, portrait\";\r\n    } else if (!isLarge && isLandscape) {\r\n        return \"Small, landscape\";\r\n    } else if (!isLarge && !isLandscape) {\r\n        return \"Small, portrait\";\r\n    } else {\r\n        return \"Unknown\";\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "getDisplaySizeAndOrientation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/483",
  "prompt" : "import android.view.Display\nimport android.content.Context\n@SuppressWarnings(\"ConstantConditions\")\r\npublic static String getDisplaySizeAndOrientation(Context context) {\r\n    boolean isLarge = isLarge(context) || isXLarge(context);\r\n    boolean isLandscape = isLandscape(context);\r\n    if (isLarge && isLandscape) {\r\n        return \"Large, landscape\";\r\n    } else if (isLarge && !isLandscape) {\r\n        return \"Large, portrait\";\r\n    } else if (!isLarge && isLandscape) {\r\n        return \"Small, landscape\";\r\n    } else if (!isLarge && !isLandscape) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "    float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\r\n    return (int) px;\r\n}",
  "context" : "public static int dpToPx(Context context, int dp) {\r\n    float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\r\n    return (int) px;\r\n}",
  "start_lineno" : "55",
  "methodName" : "dpToPx",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/484",
  "prompt" : "import android.content.Context\npublic static int dpToPx(Context context, int dp) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "96",
  "ground_truth" : "    }\r\n    // if we get this far, it's because the device doesn't support an ActionBar,\r\n    // so return the standard ActionBar height (48dp)\r\n    return dpToPx(context, 48);\r\n}",
  "context" : "/**\r\n * returns the height of the ActionBar if one is enabled - supports both the native ActionBar\r\n * and ActionBarSherlock - http://stackoverflow.com/a/15476793/1673548\r\n */\r\npublic static int getActionBarHeight(Context context) {\r\n    if (context == null) {\r\n        return 0;\r\n    }\r\n    TypedValue tv = new TypedValue();\r\n    if (context.getTheme() != null && context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)) {\r\n        return TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());\r\n    }\r\n    // if we get this far, it's because the device doesn't support an ActionBar,\r\n    // so return the standard ActionBar height (48dp)\r\n    return dpToPx(context, 48);\r\n}",
  "start_lineno" : "83",
  "methodName" : "getActionBarHeight",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/485",
  "prompt" : "import com.automattic.simplenote.R\nimport android.view.Display\nimport android.util.TypedValue\nimport android.content.Context\n/**\r\n * returns the height of the ActionBar if one is enabled - supports both the native ActionBar\r\n * and ActionBarSherlock - http://stackoverflow.com/a/15476793/1673548\r\n */\r\npublic static int getActionBarHeight(Context context) {\r\n    if (context == null) {\r\n        return 0;\r\n    }\r\n    TypedValue tv = new TypedValue();\r\n    if (context.getTheme() != null && context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)) {\r\n        return TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "110",
  "ground_truth" : "    int size = PrefUtils.getFontSize(context);\r\n    return DisplayUtils.dpToPx(context, isList ? size : size + extra);\r\n}",
  "context" : "/**\r\n * Get the size of the checkbox drawable.\r\n *\r\n * @param context   {@link Context} from which to determine size of font plus checkbox extra.\r\n * @param isList    {@link Boolean} if checkbox is in list to determine size.\r\n *\r\n * @return          {@link Integer} value of checkbox in pixels.\r\n */\r\npublic static int getChecklistIconSize(@NonNull Context context, boolean isList) {\r\n    int extra = context.getResources().getInteger(R.integer.default_font_size_checkbox_extra);\r\n    int size = PrefUtils.getFontSize(context);\r\n    return DisplayUtils.dpToPx(context, isList ? size : size + extra);\r\n}",
  "start_lineno" : "106",
  "methodName" : "getChecklistIconSize",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/486",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * Get the size of the checkbox drawable.\r\n *\r\n * @param context   {@link Context} from which to determine size of font plus checkbox extra.\r\n * @param isList    {@link Boolean} if checkbox is in list to determine size.\r\n *\r\n * @return          {@link Integer} value of checkbox in pixels.\r\n */\r\npublic static int getChecklistIconSize(@NonNull Context context, boolean isList) {\r\n    int extra = context.getResources().getInteger(R.integer.default_font_size_checkbox_extra);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    } else {\r\n        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}",
  "context" : "// Disable screenshots if app PIN lock is on\r\npublic static void disableScreenshotsIfLocked(Activity activity) {\r\n    if (AppLockManager.getInstance().getAppLock().isPasswordLocked()) {\r\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    } else {\r\n        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}",
  "start_lineno" : "113",
  "methodName" : "disableScreenshotsIfLocked",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/487",
  "prompt" : "import org.wordpress.passcodelock.AppLockManager\nimport android.app.Activity\n// Disable screenshots if app PIN lock is on\r\npublic static void disableScreenshotsIfLocked(Activity activity) {\r\n    if (AppLockManager.getInstance().getAppLock().isPasswordLocked()) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "135",
  "ground_truth" : "    InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\r\n    if (inputMethodManager != null) {\r\n        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n    }\r\n}",
  "context" : "/**\r\n * Hides the keyboard for the given {@link View}.  Since no {@link InputMethodManager} flag is\r\n * used, the keyboard is forcibly hidden regardless of the circumstances.\r\n */\r\npublic static void hideKeyboard(@Nullable final View view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r\n    InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\r\n    if (inputMethodManager != null) {\r\n        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n    }\r\n}",
  "start_lineno" : "125",
  "methodName" : "hideKeyboard",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/488",
  "prompt" : "import androidx.annotation.Nullable\nimport android.view.inputmethod.InputMethodManager\nimport android.view.View\n/**\r\n * Hides the keyboard for the given {@link View}.  Since no {@link InputMethodManager} flag is\r\n * used, the keyboard is forcibly hidden regardless of the circumstances.\r\n */\r\npublic static void hideKeyboard(@Nullable final View view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "151",
  "ground_truth" : "    InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\r\n    if (inputMethodManager != null) {\r\n        inputMethodManager.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);\r\n    }\r\n}",
  "context" : "/**\r\n * Shows the keyboard for the given {@link View}.  Since a {@link InputMethodManager} flag is\r\n * used, the keyboard is implicitly shown regardless of the user request.\r\n */\r\npublic static void showKeyboard(@Nullable final View view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r\n    InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\r\n    if (inputMethodManager != null) {\r\n        inputMethodManager.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);\r\n    }\r\n}",
  "start_lineno" : "141",
  "methodName" : "showKeyboard",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java",
  "task_id" : "simplenote-android/489",
  "prompt" : "import androidx.annotation.Nullable\nimport android.view.inputmethod.InputMethodManager\nimport android.view.View\n/**\r\n * Shows the keyboard for the given {@link View}.  Since a {@link InputMethodManager} flag is\r\n * used, the keyboard is implicitly shown regardless of the user request.\r\n */\r\npublic static void showKeyboard(@Nullable final View view) {\r\n    if (view == null) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "        drawable = DrawableCompat.wrap(drawable).mutate();\r\n        // 255 is 100% opacity.\r\n        drawable.setAlpha((int) (alpha * 255));\r\n    }\r\n}",
  "context" : "public static void setMenuItemAlpha(MenuItem menuItem, @FloatRange(from = 0, to = 1) double alpha) {\r\n    Drawable drawable = menuItem.getIcon();\r\n    if (drawable != null) {\r\n        drawable = DrawableCompat.wrap(drawable).mutate();\r\n        // 255 is 100% opacity.\r\n        drawable.setAlpha((int) (alpha * 255));\r\n    }\r\n}",
  "start_lineno" : "23",
  "methodName" : "setMenuItemAlpha",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/490",
  "prompt" : "import androidx.annotation.FloatRange\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.graphics.drawable.Drawable\npublic static void setMenuItemAlpha(MenuItem menuItem, @FloatRange(from = 0, to = 1) double alpha) {\r\n    Drawable drawable = menuItem.getIcon();\r\n    if (drawable != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "    int tint = ContextCompat.getColor(context, colorRes);\r\n    return tintDrawable(drawable, tint);\r\n}",
  "context" : "public static Drawable tintDrawableWithResource(Context context, Drawable drawable, @ColorRes int colorRes) {\r\n    @ColorInt\r\n    int tint = ContextCompat.getColor(context, colorRes);\r\n    return tintDrawable(drawable, tint);\r\n}",
  "start_lineno" : "40",
  "methodName" : "tintDrawableWithResource",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/491",
  "prompt" : "import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.graphics.drawable.Drawable\nimport android.content.Context\npublic static Drawable tintDrawableWithResource(Context context, Drawable drawable, @ColorRes int colorRes) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        drawable = DrawableCompat.wrap(drawable).mutate();\r\n        DrawableCompat.setTint(drawable, color);\r\n    }\r\n    return drawable;\r\n}",
  "context" : "public static Drawable tintDrawable(Drawable drawable, @ColorInt int color) {\r\n    if (drawable != null) {\r\n        drawable = DrawableCompat.wrap(drawable).mutate();\r\n        DrawableCompat.setTint(drawable, color);\r\n    }\r\n    return drawable;\r\n}",
  "start_lineno" : "45",
  "methodName" : "tintDrawable",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/492",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.graphics.drawable.Drawable\npublic static Drawable tintDrawable(Drawable drawable, @ColorInt int color) {\r\n    if (drawable != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "57",
  "ground_truth" : "    int color = getColor(context, tintColorAttribute);\r\n    return tintDrawable(context, drawableRes, color);\r\n}",
  "context" : "public static Drawable tintDrawableWithAttribute(Context context, @DrawableRes int drawableRes, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r\n    int color = getColor(context, tintColorAttribute);\r\n    return tintDrawable(context, drawableRes, color);\r\n}",
  "start_lineno" : "53",
  "methodName" : "tintDrawableWithAttribute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/493",
  "prompt" : "import androidx.annotation.DrawableRes\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.graphics.drawable.Drawable\nimport android.content.Context\npublic static Drawable tintDrawableWithAttribute(Context context, @DrawableRes int drawableRes, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "    theme.resolveAttribute(tintColorAttribute, typedValue, true);\r\n    return typedValue.data;\r\n}",
  "context" : "public static int getColor(Context context, @AttrRes int tintColorAttribute) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r\n    theme.resolveAttribute(tintColorAttribute, typedValue, true);\r\n    return typedValue.data;\r\n}",
  "start_lineno" : "59",
  "methodName" : "getColor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/494",
  "prompt" : "import androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.content.res.Resources\nimport android.content.Context\npublic static int getColor(Context context, @AttrRes int tintColorAttribute) {\r\n    TypedValue typedValue = new TypedValue();\r\n    Resources.Theme theme = context.getTheme();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "72",
  "ground_truth" : "        ((AnimatedVectorDrawable) drawable).start();\r\n    } else if (drawable instanceof AnimatedVectorDrawableCompat) {\r\n        ((AnimatedVectorDrawableCompat) drawable).start();\r\n    }\r\n}",
  "context" : "public static void startAnimatedVectorDrawable(Drawable drawable) {\r\n    if (drawable instanceof AnimatedVectorDrawable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        ((AnimatedVectorDrawable) drawable).start();\r\n    } else if (drawable instanceof AnimatedVectorDrawableCompat) {\r\n        ((AnimatedVectorDrawableCompat) drawable).start();\r\n    }\r\n}",
  "start_lineno" : "66",
  "methodName" : "startAnimatedVectorDrawable",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/495",
  "prompt" : "import android.os.Build\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.AnimatedVectorDrawable\npublic static void startAnimatedVectorDrawable(Drawable drawable) {\r\n    if (drawable instanceof AnimatedVectorDrawable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "77",
  "ground_truth" : "    int color = getColor(context, tintColorAttribute);\r\n    DrawableUtils.tintMenu(menu, color);\r\n}",
  "context" : "public static void tintMenuWithAttribute(Context context, Menu menu, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r\n    int color = getColor(context, tintColorAttribute);\r\n    DrawableUtils.tintMenu(menu, color);\r\n}",
  "start_lineno" : "74",
  "methodName" : "tintMenuWithAttribute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/496",
  "prompt" : "import androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuWithAttribute(Context context, Menu menu, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "84",
  "ground_truth" : "        DrawableUtils.tintMenuItem(item, color);\r\n    }\r\n}",
  "context" : "public static void tintMenu(Menu menu, @ColorInt int color) {\r\n    for (int i = 0; i < menu.size(); i++) {\r\n        MenuItem item = menu.getItem(i);\r\n        DrawableUtils.tintMenuItem(item, color);\r\n    }\r\n}",
  "start_lineno" : "79",
  "methodName" : "tintMenu",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/497",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\npublic static void tintMenu(Menu menu, @ColorInt int color) {\r\n    for (int i = 0; i < menu.size(); i++) {\r\n        MenuItem item = menu.getItem(i);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenu(menu, color);\r\n}",
  "context" : "public static void tintMenuWithResource(Context context, Menu menu, @ColorRes int colorRes) {\r\n    @ColorInt\r\n    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenu(menu, color);\r\n}",
  "start_lineno" : "86",
  "methodName" : "tintMenuWithResource",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/498",
  "prompt" : "import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuWithResource(Context context, Menu menu, @ColorRes int colorRes) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "94",
  "ground_truth" : "    Drawable tinted = DrawableUtils.tintDrawable(menuItem.getIcon(), color);\r\n    menuItem.setIcon(tinted);\r\n}",
  "context" : "public static void tintMenuItem(MenuItem menuItem, @ColorInt int color) {\r\n    Drawable tinted = DrawableUtils.tintDrawable(menuItem.getIcon(), color);\r\n    menuItem.setIcon(tinted);\r\n}",
  "start_lineno" : "91",
  "methodName" : "tintMenuItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/499",
  "prompt" : "import androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\npublic static void tintMenuItem(MenuItem menuItem, @ColorInt int color) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "99",
  "ground_truth" : "    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenuItem(menuItem, color);\r\n}",
  "context" : "public static void tintMenuItemWithResource(Context context, MenuItem menuItem, @ColorRes int colorRes) {\r\n    @ColorInt\r\n    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenuItem(menuItem, color);\r\n}",
  "start_lineno" : "96",
  "methodName" : "tintMenuItemWithResource",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/500",
  "prompt" : "import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuItemWithResource(Context context, MenuItem menuItem, @ColorRes int colorRes) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "104",
  "ground_truth" : "    int color = getColor(context, tintColorAttribute);\r\n    DrawableUtils.tintMenuItem(menuItem, color);\r\n}",
  "context" : "public static void tintMenuItemWithAttribute(Context context, MenuItem menuItem, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r\n    int color = getColor(context, tintColorAttribute);\r\n    DrawableUtils.tintMenuItem(menuItem, color);\r\n}",
  "start_lineno" : "101",
  "methodName" : "tintMenuItemWithAttribute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java",
  "task_id" : "simplenote-android/501",
  "prompt" : "import androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuItemWithAttribute(Context context, MenuItem menuItem, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "14",
  "ground_truth" : "            is Right -> fnR(r)\r\n        }\r\n    }",
  "context" : "fun <T> fold(fnL: (L) -> T, fnR: (R) -> T): T {\r\n        return when (this) {\r\n            is Left -> fnL(l)\r\n            is Right -> fnR(r)\r\n        }\r\n    }",
  "start_lineno" : "9",
  "methodName" : "fold",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\Either.kt",
  "task_id" : "simplenote-android/502",
  "prompt" : "fun <T> fold(fnL: (L) -> T, fnR: (R) -> T): T {\r\n        return when (this) {\r\n            is Left -> fnL(l)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "            is Right -> Right(fn(r))\r\n        }\r\n    }",
  "context" : "fun <R2> map(fn: (R) -> R2): Either<L, R2> {\r\n        return when (this) {\r\n            is Left -> this\r\n            is Right -> Right(fn(r))\r\n        }\r\n    }",
  "start_lineno" : "16",
  "methodName" : "map",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\Either.kt",
  "task_id" : "simplenote-android/503",
  "prompt" : "fun <R2> map(fn: (R) -> R2): Either<L, R2> {\r\n        return when (this) {\r\n            is Left -> this\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "        stringBuilder.append(\"\\n\");\r\n    }\r\n    inputStream.close();\r\n    return stringBuilder.toString();\r\n}",
  "context" : "public static String readFile(Context context, Uri uri) throws IOException {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    InputStream inputStream = context.getContentResolver().openInputStream(uri);\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        stringBuilder.append(line);\r\n        stringBuilder.append(\"\\n\");\r\n    }\r\n    inputStream.close();\r\n    return stringBuilder.toString();\r\n}",
  "start_lineno" : "14",
  "methodName" : "readFile",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\FileUtils.java",
  "task_id" : "simplenote-android/504",
  "prompt" : "import java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.BufferedReader\nimport android.net.Uri\nimport android.content.Context\npublic static String readFile(Context context, Uri uri) throws IOException {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    InputStream inputStream = context.getContentResolver().openInputStream(uri);\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        stringBuilder.append(line);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "15",
  "ground_truth" : "        return Html.fromHtml(source, Html.FROM_HTML_MODE_LEGACY);\r\n    } else {\r\n        return Html.fromHtml(source);\r\n    }\r\n}",
  "context" : "@SuppressWarnings(\"deprecation\")\r\npublic static Spanned fromHtml(String source) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        return Html.fromHtml(source, Html.FROM_HTML_MODE_LEGACY);\r\n    } else {\r\n        return Html.fromHtml(source);\r\n    }\r\n}",
  "start_lineno" : "8",
  "methodName" : "fromHtml",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\HtmlCompat.java",
  "task_id" : "simplenote-android/505",
  "prompt" : "import android.text.Spanned\nimport android.text.Html\nimport android.os.Build\n@SuppressWarnings(\"deprecation\")\r\npublic static Spanned fromHtml(String source) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Character CHARACTER_BRACKET_CLOSE = ']';\nprivate static final Character CHARACTER_BRACKET_OPEN = '[';",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "            i++;\r\n        }\r\n    }\r\n    return length;\r\n}",
  "context" : "@Override\r\npublic int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int length = text.length();\r\n    while (i < length) {\r\n        if (text.charAt(i) == CHARACTER_BRACKET_CLOSE) {\r\n            return i;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n    return length;\r\n}",
  "start_lineno" : "12",
  "methodName" : "findTokenEnd",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java",
  "task_id" : "simplenote-android/506",
  "prompt" : "@Override\r\npublic int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int length = text.length();\r\n    while (i < length) {\r\n        if (text.charAt(i) == CHARACTER_BRACKET_CLOSE) {\r\n            return i;\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Character CHARACTER_BRACKET_CLOSE = ']';\nprivate static final Character CHARACTER_BRACKET_OPEN = '[';",
  "app_type" : "notes",
  "end_lineno" : "41",
  "ground_truth" : "    if (i < 1 || text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        return cursor;\r\n    }\r\n    return i;\r\n}",
  "context" : "@Override\r\npublic int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        i--;\r\n    }\r\n    if (i < 1 || text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        return cursor;\r\n    }\r\n    return i;\r\n}",
  "start_lineno" : "28",
  "methodName" : "findTokenStart",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java",
  "task_id" : "simplenote-android/507",
  "prompt" : "@Override\r\npublic int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        i--;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Character CHARACTER_BRACKET_CLOSE = ']';\nprivate static final Character CHARACTER_BRACKET_OPEN = '[';",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "        return spannableString;\r\n    } else {\r\n        return text + CHARACTER_BRACKET_CLOSE.toString();\r\n    }\r\n}",
  "context" : "@Override\r\npublic CharSequence terminateToken(CharSequence text) {\r\n    if (text instanceof Spanned) {\r\n        SpannableString spannableString = new SpannableString(text + CHARACTER_BRACKET_CLOSE.toString());\r\n        TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, spannableString, 0);\r\n        return spannableString;\r\n    } else {\r\n        return text + CHARACTER_BRACKET_CLOSE.toString();\r\n    }\r\n}",
  "start_lineno" : "43",
  "methodName" : "terminateToken",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java",
  "task_id" : "simplenote-android/508",
  "prompt" : "import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\n@Override\r\npublic CharSequence terminateToken(CharSequence text) {\r\n    if (text instanceof Spanned) {\r\n        SpannableString spannableString = new SpannableString(text + CHARACTER_BRACKET_CLOSE.toString());\r\n        TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, spannableString, 0);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "54",
  "ground_truth" : "                return;\r\n            sListener.onMatch(factory, text, start, end);\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n    if (mTextView == null)\r\n        return;\r\n    Handler handler = mTextView.getHandler();\r\n    if (handler == null)\r\n        return;\r\n    handler.post(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mStopped)\r\n                return;\r\n            sListener.onMatch(factory, text, start, end);\r\n        }\r\n    });\r\n}",
  "start_lineno" : "37",
  "methodName" : "onMatch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/509",
  "prompt" : "import android.text.Spannable\nimport android.os.Handler\n@Override\r\npublic void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n    if (mTextView == null)\r\n        return;\r\n    Handler handler = mTextView.getHandler();\r\n    if (handler == null)\r\n        return;\r\n    handler.post(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mStopped)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        return;\r\n    sListener.onMatch(factory, text, start, end);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (mStopped)\r\n        return;\r\n    sListener.onMatch(factory, text, start, end);\r\n}",
  "start_lineno" : "47",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/510",
  "prompt" : "@Override\r\npublic void run() {\r\n    if (mStopped)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "138",
  "ground_truth" : "            return 0;\r\n        }\r\n    }\r\n    return 0;\r\n}",
  "context" : "// Returns the character location of the first match (3rd index, the 'start' value)\r\n// The data format for a match is 4 space-separated integers that represent the location\r\n// of the match: \"column token start length\" ex: \"1 0 42 7\"\r\npublic static int getFirstMatchLocation(Spannable content, String matches) {\r\n    if (TextUtils.isEmpty(matches)) {\r\n        return 0;\r\n    }\r\n    String[] values = matches.split(\"\\\\s+\", 4);\r\n    if (values.length > MATCH_INDEX_START) {\r\n        try {\r\n            int location = Integer.valueOf(values[MATCH_INDEX_START]);\r\n            return location + getByteOffset(content, 0, location);\r\n        } catch (NumberFormatException exception) {\r\n            return 0;\r\n        }\r\n    }\r\n    return 0;\r\n}",
  "start_lineno" : "121",
  "methodName" : "getFirstMatchLocation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/511",
  "prompt" : "import android.text.TextUtils\nimport android.text.Spannable\n// Returns the character location of the first match (3rd index, the 'start' value)\r\n// The data format for a match is 4 space-separated integers that represent the location\r\n// of the match: \"column token start length\" ex: \"1 0 42 7\"\r\npublic static int getFirstMatchLocation(Spannable content, String matches) {\r\n    if (TextUtils.isEmpty(matches)) {\r\n        return 0;\r\n    }\r\n    String[] values = matches.split(\"\\\\s+\", 4);\r\n    if (values.length > MATCH_INDEX_START) {\r\n        try {\r\n            int location = Integer.valueOf(values[MATCH_INDEX_START]);\r\n            return location + getByteOffset(content, 0, location);\r\n        } catch (NumberFormatException exception) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "185",
  "ground_truth" : "        return;\r\n    mThread = new Thread(this);\r\n    mStopped = false;\r\n    mThread.start();\r\n}",
  "context" : "public void start() {\r\n    // if there are no matches, we don't have to do anything\r\n    if (TextUtils.isEmpty(mMatches))\r\n        return;\r\n    mThread = new Thread(this);\r\n    mStopped = false;\r\n    mThread.start();\r\n}",
  "start_lineno" : "178",
  "methodName" : "start",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/512",
  "prompt" : "import android.text.TextUtils\npublic void start() {\r\n    // if there are no matches, we don't have to do anything\r\n    if (TextUtils.isEmpty(mMatches))\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "190",
  "ground_truth" : "    if (mThread != null)\r\n        mThread.interrupt();\r\n}",
  "context" : "public void stop() {\r\n    mStopped = true;\r\n    if (mThread != null)\r\n        mThread.interrupt();\r\n}",
  "start_lineno" : "187",
  "methodName" : "stop",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/513",
  "prompt" : "public void stop() {\r\n    mStopped = true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "201",
  "ground_truth" : "        mIndex = columnIndex;\r\n        mPlainText = mTextView.getPlainTextContent();\r\n        start();\r\n    }\r\n}",
  "context" : "public void highlightMatches(String matches, int columnIndex) {\r\n    synchronized (this) {\r\n        stop();\r\n        mSpannable = mTextView.getEditableText();\r\n        mMatches = matches;\r\n        mIndex = columnIndex;\r\n        mPlainText = mTextView.getPlainTextContent();\r\n        start();\r\n    }\r\n}",
  "start_lineno" : "192",
  "methodName" : "highlightMatches",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/514",
  "prompt" : "import android.text.Spannable\npublic void highlightMatches(String matches, int columnIndex) {\r\n    synchronized (this) {\r\n        stop();\r\n        mSpannable = mTextView.getEditableText();\r\n        mMatches = matches;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "211",
  "ground_truth" : "            mSpannable.removeSpan(span);\r\n        }\r\n        mMatchedSpans.clear();\r\n    }\r\n}",
  "context" : "public synchronized void removeMatches() {\r\n    stop();\r\n    if (mSpannable != null && mMatchedSpans != null) {\r\n        for (Object span : mMatchedSpans) {\r\n            mSpannable.removeSpan(span);\r\n        }\r\n        mMatchedSpans.clear();\r\n    }\r\n}",
  "start_lineno" : "203",
  "methodName" : "removeMatches",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/515",
  "prompt" : "import android.text.Spannable\npublic synchronized void removeMatches() {\r\n    stop();\r\n    if (mSpannable != null && mMatchedSpans != null) {\r\n        for (Object span : mMatchedSpans) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int MATCH_INDEX_COUNT = 4;\npublic static final int MATCH_INDEX_START = 2;\nprivate static final String CHARSET = \"UTF-8\";\nprotected static OnMatchListener sListener = new DefaultMatcher();\nprivate static List<Object> mMatchedSpans = Collections.synchronizedList(new ArrayList<>());\nprivate SpanFactory mFactory;\nprivate Thread mThread;\nprivate SimplenoteEditText mTextView;\nprivate String mMatches;\nprivate int mIndex;\nprivate Spannable mSpannable;\nprivate String mPlainText;\nprivate boolean mStopped = false;\nprivate OnMatchListener mListener = new OnMatchListener() {\r\n\r\n    @Override\r\n    public void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n        if (mTextView == null)\r\n            return;\r\n        Handler handler = mTextView.getHandler();\r\n        if (handler == null)\r\n            return;\r\n        handler.post(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                if (mStopped)\r\n                    return;\r\n                sListener.onMatch(factory, text, start, end);\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "234",
  "ground_truth" : "            content.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            mMatchedSpans.add(span);\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onMatch(SpanFactory factory, Spannable content, int start, int end) {\r\n    Object[] spans = factory.buildSpans();\r\n    for (Object span : spans) {\r\n        if (start >= 0 && end >= start && end <= content.length()) {\r\n            content.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            mMatchedSpans.add(span);\r\n        }\r\n    }\r\n}",
  "start_lineno" : "223",
  "methodName" : "onMatch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java",
  "task_id" : "simplenote-android/516",
  "prompt" : "import android.text.Spannable\n@Override\r\npublic void onMatch(SpanFactory factory, Spannable content, int start, int end) {\r\n    Object[] spans = factory.buildSpans();\r\n    for (Object span : spans) {\r\n        if (start >= 0 && end >= start && end <= content.length()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "26",
  "ground_truth" : "    }\r\n    String[] units = new String[] { \"Kbps\", \"Mbps\", \"Gbps\", \"Tbps\" };\r\n    int index = (int) (Math.log10(speed) / Math.log10(1024));\r\n    return new DecimalFormat(\"#,##0.00\").format(speed / Math.pow(1024, index)) + \" \" + units[index];\r\n}",
  "context" : "/**\r\n * @return {@link String} formatting speed of network in bps (e.g. 12.34 Kbps)\r\n */\r\nprivate static String formatSpeedFromKbps(int speed) {\r\n    if (speed <= 0) {\r\n        return \"0.00\";\r\n    }\r\n    String[] units = new String[] { \"Kbps\", \"Mbps\", \"Gbps\", \"Tbps\" };\r\n    int index = (int) (Math.log10(speed) / Math.log10(1024));\r\n    return new DecimalFormat(\"#,##0.00\").format(speed / Math.pow(1024, index)) + \" \" + units[index];\r\n}",
  "start_lineno" : "18",
  "methodName" : "formatSpeedFromKbps",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/517",
  "prompt" : "/**\r\n * @return {@link String} formatting speed of network in bps (e.g. 12.34 Kbps)\r\n */\r\nprivate static String formatSpeedFromKbps(int speed) {\r\n    if (speed <= 0) {\r\n        return \"0.00\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "39",
  "ground_truth" : "    }\r\n    String[] units = new String[] { \"Mbps\", \"Gbps\", \"Tbps\" };\r\n    int index = (int) (Math.log10(speed) / Math.log10(1024));\r\n    return new DecimalFormat(\"#,##0.00\").format(speed / Math.pow(1024, index)) + \" \" + units[index];\r\n}",
  "context" : "/**\r\n * @return {@link String} formatting speed of network in bps (e.g. 12.34 Mbps)\r\n */\r\nprivate static String formatSpeedFromMbps(int speed) {\r\n    if (speed <= 0) {\r\n        return \"0.00\";\r\n    }\r\n    String[] units = new String[] { \"Mbps\", \"Gbps\", \"Tbps\" };\r\n    int index = (int) (Math.log10(speed) / Math.log10(1024));\r\n    return new DecimalFormat(\"#,##0.00\").format(speed / Math.pow(1024, index)) + \" \" + units[index];\r\n}",
  "start_lineno" : "31",
  "methodName" : "formatSpeedFromMbps",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/518",
  "prompt" : "/**\r\n * @return {@link String} formatting speed of network in bps (e.g. 12.34 Mbps)\r\n */\r\nprivate static String formatSpeedFromMbps(int speed) {\r\n    if (speed <= 0) {\r\n        return \"0.00\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        return null;\r\n    }\r\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n    return cm != null ? cm.getActiveNetworkInfo() : null;\r\n}",
  "context" : "/**\r\n * @return {@link NetworkInfo} on the active network connection\r\n */\r\nprivate static NetworkInfo getActiveNetworkInfo(Context context) {\r\n    if (context == null) {\r\n        return null;\r\n    }\r\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n    return cm != null ? cm.getActiveNetworkInfo() : null;\r\n}",
  "start_lineno" : "44",
  "methodName" : "getActiveNetworkInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/519",
  "prompt" : "import android.net.NetworkInfo\nimport android.content.Context\n/**\r\n * @return {@link NetworkInfo} on the active network connection\r\n */\r\nprivate static NetworkInfo getActiveNetworkInfo(Context context) {\r\n    if (context == null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "            speed = \"?\";\r\n            break;\r\n    }\r\n    return type + \" (\" + speed + \")\";\r\n}",
  "context" : "/**\r\n * @return {@link String} type and speed of network (e.g. WIFI (123.45 Mbps))\r\n */\r\npublic static String getNetworkInfo(Context context) {\r\n    String type = getNetworkTypeString(context);\r\n    String speed;\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            speed = getNetworkSpeed(context);\r\n            break;\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            speed = getNetworkSpeedWifi(context);\r\n            break;\r\n        case TYPE_NONE:\r\n        case TYPE_NULL:\r\n        default:\r\n            speed = \"?\";\r\n            break;\r\n    }\r\n    return type + \" (\" + speed + \")\";\r\n}",
  "start_lineno" : "56",
  "methodName" : "getNetworkInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/520",
  "prompt" : "import android.net.NetworkInfo\nimport android.net.ConnectivityManager\nimport android.content.Context\n/**\r\n * @return {@link String} type and speed of network (e.g. WIFI (123.45 Mbps))\r\n */\r\npublic static String getNetworkInfo(Context context) {\r\n    String type = getNetworkTypeString(context);\r\n    String speed;\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            speed = getNetworkSpeed(context);\r\n            break;\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            speed = getNetworkSpeedWifi(context);\r\n            break;\r\n        case TYPE_NONE:\r\n        case TYPE_NULL:\r\n        default:\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "94",
  "ground_truth" : "    if (nc == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    return formatSpeedFromKbps(nc.getLinkDownstreamBandwidthKbps());\r\n}",
  "context" : "/**\r\n * @return {@link String} speed of network in Kbps (e.g. 12.34)\r\n */\r\npublic static String getNetworkSpeed(Context context) {\r\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n    if (cm == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    NetworkCapabilities nc = cm.getNetworkCapabilities(cm.getActiveNetwork());\r\n    if (nc == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    return formatSpeedFromKbps(nc.getLinkDownstreamBandwidthKbps());\r\n}",
  "start_lineno" : "80",
  "methodName" : "getNetworkSpeed",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/521",
  "prompt" : "import android.net.NetworkCapabilities\nimport android.net.ConnectivityManager\nimport android.content.Context\n/**\r\n * @return {@link String} speed of network in Kbps (e.g. 12.34)\r\n */\r\npublic static String getNetworkSpeed(Context context) {\r\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n    if (cm == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    NetworkCapabilities nc = cm.getNetworkCapabilities(cm.getActiveNetwork());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "107",
  "ground_truth" : "    if (wm == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    return formatSpeedFromMbps(wm.getConnectionInfo().getLinkSpeed());\r\n}",
  "context" : "/**\r\n * @return {@link String} speed of network in Mbps (e.g. 12.34)\r\n */\r\npublic static String getNetworkSpeedWifi(Context context) {\r\n    WifiManager wm = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);\r\n    if (wm == null) {\r\n        return \"Could not get network speed\";\r\n    }\r\n    return formatSpeedFromMbps(wm.getConnectionInfo().getLinkSpeed());\r\n}",
  "start_lineno" : "99",
  "methodName" : "getNetworkSpeedWifi",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/522",
  "prompt" : "import android.net.wifi.WifiManager\nimport android.content.Context\n/**\r\n * @return {@link String} speed of network in Mbps (e.g. 12.34)\r\n */\r\npublic static String getNetworkSpeedWifi(Context context) {\r\n    WifiManager wm = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "124",
  "ground_truth" : "    if (!info.isConnected()) {\r\n        return TYPE_NONE;\r\n    }\r\n    return info.getType();\r\n}",
  "context" : "/**\r\n * @return integer constant of the network type\r\n */\r\npublic static int getNetworkType(Context context) {\r\n    NetworkInfo info = getActiveNetworkInfo(context);\r\n    if (info == null) {\r\n        return TYPE_NULL;\r\n    }\r\n    if (!info.isConnected()) {\r\n        return TYPE_NONE;\r\n    }\r\n    return info.getType();\r\n}",
  "start_lineno" : "112",
  "methodName" : "getNetworkType",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/523",
  "prompt" : "import android.net.NetworkInfo\nimport android.content.Context\n/**\r\n * @return integer constant of the network type\r\n */\r\npublic static int getNetworkType(Context context) {\r\n    NetworkInfo info = getActiveNetworkInfo(context);\r\n    if (info == null) {\r\n        return TYPE_NULL;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "141",
  "ground_truth" : "        case TYPE_NULL:\r\n        default:\r\n            return \"Could not get network type\";\r\n    }\r\n}",
  "context" : "/**\r\n * @return {@link String} representation of the network type\r\n */\r\npublic static String getNetworkTypeString(Context context) {\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            return \"MOBILE\";\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            return \"WIFI\";\r\n        case TYPE_NONE:\r\n            return \"No network connection\";\r\n        case TYPE_NULL:\r\n        default:\r\n            return \"Could not get network type\";\r\n    }\r\n}",
  "start_lineno" : "129",
  "methodName" : "getNetworkTypeString",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/524",
  "prompt" : "import android.net.ConnectivityManager\nimport android.content.Context\n/**\r\n * @return {@link String} representation of the network type\r\n */\r\npublic static String getNetworkTypeString(Context context) {\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            return \"MOBILE\";\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            return \"WIFI\";\r\n        case TYPE_NONE:\r\n            return \"No network connection\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final int TYPE_NONE = -1;\nprivate static final int TYPE_NULL = -2;",
  "app_type" : "notes",
  "end_lineno" : "149",
  "ground_truth" : "    NetworkInfo info = getActiveNetworkInfo(context);\r\n    return info != null && info.isConnected();\r\n}",
  "context" : "/**\r\n * @return true if a network connection is available; false otherwise\r\n */\r\npublic static boolean isNetworkAvailable(Context context) {\r\n    NetworkInfo info = getActiveNetworkInfo(context);\r\n    return info != null && info.isConnected();\r\n}",
  "start_lineno" : "146",
  "methodName" : "isNetworkAvailable",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java",
  "task_id" : "simplenote-android/525",
  "prompt" : "import android.content.Context\n/**\r\n * @return true if a network connection is available; false otherwise\r\n */\r\npublic static boolean isNetworkAvailable(Context context) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "34",
  "ground_truth" : "        note.setModificationDate(Calendar.getInstance());\r\n        note.save();\r\n        AnalyticsTracker.track(isPinned ? AnalyticsTracker.Stat.EDITOR_NOTE_PINNED : AnalyticsTracker.Stat.EDITOR_NOTE_UNPINNED, AnalyticsTracker.CATEGORY_NOTE, \"pin_button\");\r\n    }\r\n}",
  "context" : "public static void setNotePin(Note note, boolean isPinned) {\r\n    if (note != null && isPinned != note.isPinned()) {\r\n        note.setPinned(isPinned);\r\n        note.setModificationDate(Calendar.getInstance());\r\n        note.save();\r\n        AnalyticsTracker.track(isPinned ? AnalyticsTracker.Stat.EDITOR_NOTE_PINNED : AnalyticsTracker.Stat.EDITOR_NOTE_UNPINNED, AnalyticsTracker.CATEGORY_NOTE, \"pin_button\");\r\n    }\r\n}",
  "start_lineno" : "21",
  "methodName" : "setNotePin",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NoteUtils.java",
  "task_id" : "simplenote-android/526",
  "prompt" : "import com.automattic.simplenote.models.Note\npublic static void setNotePin(Note note, boolean isPinned) {\r\n    if (note != null && isPinned != note.isPinned()) {\r\n        note.setPinned(isPinned);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "    int words = (content.trim().length() == 0) ? 0 : content.trim().split(\"([\\\\W]+)\").length;\r\n    return NumberFormat.getInstance().format(words);\r\n}",
  "context" : "public static String getWordCount(String content) {\r\n    int words = (content.trim().length() == 0) ? 0 : content.trim().split(\"([\\\\W]+)\").length;\r\n    return NumberFormat.getInstance().format(words);\r\n}",
  "start_lineno" : "59",
  "methodName" : "getWordCount",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NoteUtils.java",
  "task_id" : "simplenote-android/527",
  "prompt" : "public static String getWordCount(String content) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ALPHABETICAL_ASCENDING_LABEL = \"alphabetical_az\";\npublic static final String ALPHABETICAL_DESCENDING_LABEL = \"alphabetical_za\";\npublic static final String DATE_CREATED_ASCENDING_LABEL = \"created_oldest\";\npublic static final String DATE_CREATED_DESCENDING_LABEL = \"created_newest\";\npublic static final String DATE_MODIFIED_ASCENDING_LABEL = \"modified_oldest\";\npublic static final String DATE_MODIFIED_DESCENDING_LABEL = \"modified_newest\";\npublic static final int ALPHABETICAL_ASCENDING = 4;\npublic static final int ALPHABETICAL_DESCENDING = 5;\npublic static final int DATE_CREATED_ASCENDING = 3;\npublic static final int DATE_CREATED_DESCENDING = 2;\npublic static final int DATE_MODIFIED_ASCENDING = 1;\npublic static final int DATE_MODIFIED_DESCENDING = 0;",
  "app_type" : "notes",
  "end_lineno" : "128",
  "ground_truth" : "        return getPrefs(context).getString(prefKey, defaultValue);\r\n    } catch (ClassCastException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "context" : "public static String getStringPref(Context context, String prefKey, String defaultValue) {\r\n    try {\r\n        return getPrefs(context).getString(prefKey, defaultValue);\r\n    } catch (ClassCastException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "start_lineno" : "122",
  "methodName" : "getStringPref",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\PrefUtils.java",
  "task_id" : "simplenote-android/528",
  "prompt" : "import android.content.Context\npublic static String getStringPref(Context context, String prefKey, String defaultValue) {\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ALPHABETICAL_ASCENDING_LABEL = \"alphabetical_az\";\npublic static final String ALPHABETICAL_DESCENDING_LABEL = \"alphabetical_za\";\npublic static final String DATE_CREATED_ASCENDING_LABEL = \"created_oldest\";\npublic static final String DATE_CREATED_DESCENDING_LABEL = \"created_newest\";\npublic static final String DATE_MODIFIED_ASCENDING_LABEL = \"modified_oldest\";\npublic static final String DATE_MODIFIED_DESCENDING_LABEL = \"modified_newest\";\npublic static final int ALPHABETICAL_ASCENDING = 4;\npublic static final int ALPHABETICAL_DESCENDING = 5;\npublic static final int DATE_CREATED_ASCENDING = 3;\npublic static final int DATE_CREATED_DESCENDING = 2;\npublic static final int DATE_MODIFIED_ASCENDING = 1;\npublic static final int DATE_MODIFIED_DESCENDING = 0;",
  "app_type" : "notes",
  "end_lineno" : "138",
  "ground_truth" : "    String strPref = getStringPref(context, prefKey, Integer.toString(defaultValue));\r\n    return StrUtils.strToInt(strPref, defaultValue);\r\n}",
  "context" : "public static int getIntPref(Context context, String prefKey, int defaultValue) {\r\n    // read as string preference, then convert to int\r\n    String strPref = getStringPref(context, prefKey, Integer.toString(defaultValue));\r\n    return StrUtils.strToInt(strPref, defaultValue);\r\n}",
  "start_lineno" : "134",
  "methodName" : "getIntPref",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\PrefUtils.java",
  "task_id" : "simplenote-android/529",
  "prompt" : "import android.content.Context\npublic static int getIntPref(Context context, String prefKey, int defaultValue) {\r\n    // read as string preference, then convert to int\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ALPHABETICAL_ASCENDING_LABEL = \"alphabetical_az\";\npublic static final String ALPHABETICAL_DESCENDING_LABEL = \"alphabetical_za\";\npublic static final String DATE_CREATED_ASCENDING_LABEL = \"created_oldest\";\npublic static final String DATE_CREATED_DESCENDING_LABEL = \"created_newest\";\npublic static final String DATE_MODIFIED_ASCENDING_LABEL = \"modified_oldest\";\npublic static final String DATE_MODIFIED_DESCENDING_LABEL = \"modified_newest\";\npublic static final int ALPHABETICAL_ASCENDING = 4;\npublic static final int ALPHABETICAL_DESCENDING = 5;\npublic static final int DATE_CREATED_ASCENDING = 3;\npublic static final int DATE_CREATED_DESCENDING = 2;\npublic static final int DATE_MODIFIED_ASCENDING = 1;\npublic static final int DATE_MODIFIED_DESCENDING = 0;",
  "app_type" : "notes",
  "end_lineno" : "150",
  "ground_truth" : "        return getPrefs(context).getBoolean(prefKey, defaultValue);\r\n    } catch (ClassCastException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "context" : "public static boolean getBoolPref(Context context, String prefKey, boolean defaultValue) {\r\n    try {\r\n        return getPrefs(context).getBoolean(prefKey, defaultValue);\r\n    } catch (ClassCastException e) {\r\n        return defaultValue;\r\n    }\r\n}",
  "start_lineno" : "144",
  "methodName" : "getBoolPref",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\PrefUtils.java",
  "task_id" : "simplenote-android/530",
  "prompt" : "import android.content.Context\npublic static boolean getBoolPref(Context context, String prefKey, boolean defaultValue) {\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ALPHABETICAL_ASCENDING_LABEL = \"alphabetical_az\";\npublic static final String ALPHABETICAL_DESCENDING_LABEL = \"alphabetical_za\";\npublic static final String DATE_CREATED_ASCENDING_LABEL = \"created_oldest\";\npublic static final String DATE_CREATED_DESCENDING_LABEL = \"created_newest\";\npublic static final String DATE_MODIFIED_ASCENDING_LABEL = \"modified_oldest\";\npublic static final String DATE_MODIFIED_DESCENDING_LABEL = \"modified_newest\";\npublic static final int ALPHABETICAL_ASCENDING = 4;\npublic static final int ALPHABETICAL_DESCENDING = 5;\npublic static final int DATE_CREATED_ASCENDING = 3;\npublic static final int DATE_CREATED_DESCENDING = 2;\npublic static final int DATE_MODIFIED_ASCENDING = 1;\npublic static final int DATE_MODIFIED_DESCENDING = 0;",
  "app_type" : "notes",
  "end_lineno" : "168",
  "ground_truth" : "    } else {\r\n        version = BuildConfig.VERSION_NAME + \" (\" + BuildConfig.VERSION_CODE + \")\";\r\n    }\r\n    return version;\r\n}",
  "context" : "public static CharSequence versionInfo() {\r\n    String version;\r\n    if (BuildConfig.DEBUG) {\r\n        version = BuildConfig.VERSION_NAME + \" (\" + BuildConfig.VERSION_CODE + \") \" + BuildConfig.BUILD_TYPE + \" (\" + BuildConfig.BUILD_HASH + \")\";\r\n    } else {\r\n        version = BuildConfig.VERSION_NAME + \" (\" + BuildConfig.VERSION_CODE + \")\";\r\n    }\r\n    return version;\r\n}",
  "start_lineno" : "152",
  "methodName" : "versionInfo",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\PrefUtils.java",
  "task_id" : "simplenote-android/531",
  "prompt" : "import com.automattic.simplenote.R\nimport com.automattic.simplenote.BuildConfig\npublic static CharSequence versionInfo() {\r\n    String version;\r\n    if (BuildConfig.DEBUG) {\r\n        version = BuildConfig.VERSION_NAME + \" (\" + BuildConfig.VERSION_CODE + \") \" + BuildConfig.BUILD_TYPE + \" (\" + BuildConfig.BUILD_HASH + \")\";\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String ALPHABETICAL_ASCENDING_LABEL = \"alphabetical_az\";\npublic static final String ALPHABETICAL_DESCENDING_LABEL = \"alphabetical_za\";\npublic static final String DATE_CREATED_ASCENDING_LABEL = \"created_oldest\";\npublic static final String DATE_CREATED_DESCENDING_LABEL = \"created_newest\";\npublic static final String DATE_MODIFIED_ASCENDING_LABEL = \"modified_oldest\";\npublic static final String DATE_MODIFIED_DESCENDING_LABEL = \"modified_newest\";\npublic static final int ALPHABETICAL_ASCENDING = 4;\npublic static final int ALPHABETICAL_DESCENDING = 5;\npublic static final int DATE_CREATED_ASCENDING = 3;\npublic static final int DATE_CREATED_DESCENDING = 2;\npublic static final int DATE_MODIFIED_ASCENDING = 1;\npublic static final int DATE_MODIFIED_DESCENDING = 0;",
  "app_type" : "notes",
  "end_lineno" : "316",
  "ground_truth" : "    }\r\n    // Get default value for normal font size (differs based on screen/dpi size)\r\n    defaultFontSize = context.getResources().getInteger(R.integer.default_font_size);\r\n    return getIntPref(context, PREF_FONT_SIZE, defaultFontSize);\r\n}",
  "context" : "public static int getFontSize(Context context) {\r\n    int defaultFontSize = 16;\r\n    // Just in case\r\n    if (context == null) {\r\n        return defaultFontSize;\r\n    }\r\n    // Get default value for normal font size (differs based on screen/dpi size)\r\n    defaultFontSize = context.getResources().getInteger(R.integer.default_font_size);\r\n    return getIntPref(context, PREF_FONT_SIZE, defaultFontSize);\r\n}",
  "start_lineno" : "305",
  "methodName" : "getFontSize",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\PrefUtils.java",
  "task_id" : "simplenote-android/532",
  "prompt" : "import android.content.Context\npublic static int getFontSize(Context context) {\r\n    int defaultFontSize = 16;\r\n    // Just in case\r\n    if (context == null) {\r\n        return defaultFontSize;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<ShareButtonItem> mItems;\nprivate ItemListener mListener;\nprivate Drawable mDrawableRes;\nprivate CharSequence mTitle;\nprivate String mPackageName;\nprivate String mActivityName;\npublic TextView button;\npublic ShareButtonItem item;",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "    button.setCompoundDrawablesWithIntrinsicBounds(null, item.getDrawable(), null, null);\r\n    button.setText(item.getTitle());\r\n}",
  "context" : "public void setData(ShareButtonItem item) {\r\n    this.item = item;\r\n    button.setCompoundDrawablesWithIntrinsicBounds(null, item.getDrawable(), null, null);\r\n    button.setText(item.getTitle());\r\n}",
  "start_lineno" : "91",
  "methodName" : "setData",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ShareButtonAdapter.java",
  "task_id" : "simplenote-android/533",
  "prompt" : "public void setData(ShareButtonItem item) {\r\n    this.item = item;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private List<ShareButtonItem> mItems;\nprivate ItemListener mListener;\nprivate Drawable mDrawableRes;\nprivate CharSequence mTitle;\nprivate String mPackageName;\nprivate String mActivityName;\npublic TextView button;\npublic ShareButtonItem item;",
  "app_type" : "notes",
  "end_lineno" : "102",
  "ground_truth" : "        mListener.onItemClick(item);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (mListener != null) {\r\n        mListener.onItemClick(item);\r\n    }\r\n}",
  "start_lineno" : "97",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ShareButtonAdapter.java",
  "task_id" : "simplenote-android/534",
  "prompt" : "import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mListener != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static SimplenoteMovementMethod mInstance;",
  "app_type" : "notes",
  "end_lineno" : "21",
  "ground_truth" : "    }\r\n    return mInstance;\r\n}",
  "context" : "public static SimplenoteMovementMethod getInstance() {\r\n    if (mInstance == null) {\r\n        mInstance = new SimplenoteMovementMethod();\r\n    }\r\n    return mInstance;\r\n}",
  "start_lineno" : "15",
  "methodName" : "getInstance",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SimplenoteMovementMethod.java",
  "task_id" : "simplenote-android/535",
  "prompt" : "public static SimplenoteMovementMethod getInstance() {\r\n    if (mInstance == null) {\r\n        mInstance = new SimplenoteMovementMethod();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = com.simperium.android.ProgressDialogFragment.class.getSimpleName();\nprivate static final String KEY_MESSAGE = \"KEY_MESSAGE\";",
  "app_type" : "notes",
  "end_lineno" : "28",
  "ground_truth" : "    Bundle bundle = new Bundle();\r\n    bundle.putString(KEY_MESSAGE, message);\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "context" : "public static SimplenoteProgressDialogFragment newInstance(String message) {\r\n    SimplenoteProgressDialogFragment fragment = new SimplenoteProgressDialogFragment();\r\n    Bundle bundle = new Bundle();\r\n    bundle.putString(KEY_MESSAGE, message);\r\n    fragment.setArguments(bundle);\r\n    return fragment;\r\n}",
  "start_lineno" : "22",
  "methodName" : "newInstance",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SimplenoteProgressDialogFragment.java",
  "task_id" : "simplenote-android/536",
  "prompt" : "import androidx.fragment.app.DialogFragment\nimport android.app.Dialog\npublic static SimplenoteProgressDialogFragment newInstance(String message) {\r\n    SimplenoteProgressDialogFragment fragment = new SimplenoteProgressDialogFragment();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TAG = com.simperium.android.ProgressDialogFragment.class.getSimpleName();\nprivate static final String KEY_MESSAGE = \"KEY_MESSAGE\";",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "    setRetainInstance(true);\r\n    setCancelable(false);\r\n}",
  "context" : "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setRetainInstance(true);\r\n    setCancelable(false);\r\n}",
  "start_lineno" : "30",
  "methodName" : "onCreate",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SimplenoteProgressDialogFragment.java",
  "task_id" : "simplenote-android/537",
  "prompt" : "import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "23",
  "ground_truth" : "    while (i < cursor && text.charAt(i) == ' ') {\r\n        i++;\r\n    }\r\n    return i;\r\n}",
  "context" : "public int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != ' ') {\r\n        i--;\r\n    }\r\n    while (i < cursor && text.charAt(i) == ' ') {\r\n        i++;\r\n    }\r\n    return i;\r\n}",
  "start_lineno" : "12",
  "methodName" : "findTokenStart",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java",
  "task_id" : "simplenote-android/538",
  "prompt" : "public int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != ' ') {\r\n        i--;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            i++;\r\n        }\r\n    }\r\n    return len;\r\n}",
  "context" : "public int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int len = text.length();\r\n    while (i < len) {\r\n        if (text.charAt(i) == ' ') {\r\n            return i;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n    return len;\r\n}",
  "start_lineno" : "25",
  "methodName" : "findTokenEnd",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java",
  "task_id" : "simplenote-android/539",
  "prompt" : "public int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int len = text.length();\r\n    while (i < len) {\r\n        if (text.charAt(i) == ' ') {\r\n            return i;\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "        } else {\r\n            return text + \" \";\r\n        }\r\n    }\r\n}",
  "context" : "public CharSequence terminateToken(CharSequence text) {\r\n    int i = text.length();\r\n    while (i > 0 && text.charAt(i - 1) == ' ') {\r\n        i--;\r\n    }\r\n    if (i > 0 && text.charAt(i - 1) == ' ') {\r\n        return text;\r\n    } else {\r\n        if (text instanceof Spanned) {\r\n            SpannableString sp = new SpannableString(text + \" \");\r\n            TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, sp, 0);\r\n            return sp;\r\n        } else {\r\n            return text + \" \";\r\n        }\r\n    }\r\n}",
  "start_lineno" : "40",
  "methodName" : "terminateToken",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java",
  "task_id" : "simplenote-android/540",
  "prompt" : "import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\npublic CharSequence terminateToken(CharSequence text) {\r\n    int i = text.length();\r\n    while (i > 0 && text.charAt(i - 1) == ' ') {\r\n        i--;\r\n    }\r\n    if (i > 0 && text.charAt(i - 1) == ' ') {\r\n        return text;\r\n    } else {\r\n        if (text instanceof Spanned) {\r\n            SpannableString sp = new SpannableString(text + \" \");\r\n            TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, sp, 0);\r\n            return sp;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        return \"\";\r\n    return value;\r\n}",
  "context" : "// returns \"\" if the passed string is null, otherwise returns the passed string\r\npublic static String notNullStr(final String value) {\r\n    if (value == null)\r\n        return \"\";\r\n    return value;\r\n}",
  "start_lineno" : "41",
  "methodName" : "notNullStr",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/541",
  "prompt" : "// returns \"\" if the passed string is null, otherwise returns the passed string\r\npublic static String notNullStr(final String value) {\r\n    if (value == null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "        return Integer.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultInt;\r\n    }\r\n}",
  "context" : "public static int strToInt(String value, int defaultInt) {\r\n    if (value == null)\r\n        return defaultInt;\r\n    try {\r\n        return Integer.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultInt;\r\n    }\r\n}",
  "start_lineno" : "52",
  "methodName" : "strToInt",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/542",
  "prompt" : "public static int strToInt(String value, int defaultInt) {\r\n    if (value == null)\r\n        return defaultInt;\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "75",
  "ground_truth" : "        return Long.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultLong;\r\n    }\r\n}",
  "context" : "public static long strToLong(String value, long defaultLong) {\r\n    if (value == null)\r\n        return defaultLong;\r\n    try {\r\n        return Long.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultLong;\r\n    }\r\n}",
  "start_lineno" : "67",
  "methodName" : "strToLong",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/543",
  "prompt" : "public static long strToLong(String value, long defaultLong) {\r\n    if (value == null)\r\n        return defaultLong;\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "        return Float.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultFloat;\r\n    }\r\n}",
  "context" : "public static float strToFloat(String value, float defaultFloat) {\r\n    if (value == null)\r\n        return defaultFloat;\r\n    try {\r\n        return Float.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultFloat;\r\n    }\r\n}",
  "start_lineno" : "82",
  "methodName" : "strToFloat",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/544",
  "prompt" : "public static float strToFloat(String value, float defaultFloat) {\r\n    if (value == null)\r\n        return defaultFloat;\r\n    try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "99",
  "ground_truth" : "    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}",
  "context" : "public static String urlEncode(final String text) {\r\n    try {\r\n        return URLEncoder.encode(text, \"UTF-8\");\r\n    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}",
  "start_lineno" : "92",
  "methodName" : "urlEncode",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/545",
  "prompt" : "import java.net.URLEncoder\npublic static String urlEncode(final String text) {\r\n    try {\r\n        return URLEncoder.encode(text, \"UTF-8\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "108",
  "ground_truth" : "    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}",
  "context" : "public static String urlDecode(final String text) {\r\n    try {\r\n        return URLDecoder.decode(text, \"UTF-8\");\r\n    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}",
  "start_lineno" : "101",
  "methodName" : "urlDecode",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/546",
  "prompt" : "import java.net.URLDecoder\npublic static String urlDecode(final String text) {\r\n    try {\r\n        return URLDecoder.decode(text, \"UTF-8\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "        return (s1 == null && s2 == null);\r\n    return s1.equals(s2);\r\n}",
  "context" : "// returns true if passed strings are the same, handles null so caller can skip null check before comparison\r\npublic static boolean isSameStr(String s1, String s2) {\r\n    if (s1 == null || s2 == null)\r\n        return (s1 == null && s2 == null);\r\n    return s1.equals(s2);\r\n}",
  "start_lineno" : "111",
  "methodName" : "isSameStr",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/547",
  "prompt" : "// returns true if passed strings are the same, handles null so caller can skip null check before comparison\r\npublic static boolean isSameStr(String s1, String s2) {\r\n    if (s1 == null || s2 == null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "128",
  "ground_truth" : "    if (!html.contains(\"<\") && !html.contains(\"&\"))\r\n        return html;\r\n    // http://stackoverflow.com/a/7389663/1673548\r\n    return HtmlCompat.fromHtml(html).toString().trim();\r\n}",
  "context" : "// removes html from the passed string\r\npublic static String stripHtml(final String html) {\r\n    if (html == null)\r\n        return \"\";\r\n    // HtmlCompat.fromHtml().toString() is not high-performance, so skip whenever possible\r\n    if (!html.contains(\"<\") && !html.contains(\"&\"))\r\n        return html;\r\n    // http://stackoverflow.com/a/7389663/1673548\r\n    return HtmlCompat.fromHtml(html).toString().trim();\r\n}",
  "start_lineno" : "118",
  "methodName" : "stripHtml",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/548",
  "prompt" : "// removes html from the passed string\r\npublic static String stripHtml(final String html) {\r\n    if (html == null)\r\n        return \"\";\r\n    // HtmlCompat.fromHtml().toString() is not high-performance, so skip whenever possible\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String SPACE_STRING = \" \";",
  "app_type" : "notes",
  "end_lineno" : "136",
  "ground_truth" : "    }\r\n    return HtmlCompat.fromHtml(\"<strong>\" + originalString.toUpperCase() + \"</strong>\");\r\n}",
  "context" : "public static Spanned setTextToUpperCaseAndBold(String originalString) {\r\n    if (TextUtils.isEmpty(originalString)) {\r\n        return HtmlCompat.fromHtml(\"\");\r\n    }\r\n    return HtmlCompat.fromHtml(\"<strong>\" + originalString.toUpperCase() + \"</strong>\");\r\n}",
  "start_lineno" : "130",
  "methodName" : "setTextToUpperCaseAndBold",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java",
  "task_id" : "simplenote-android/549",
  "prompt" : "import android.text.TextUtils\nimport android.text.Spanned\npublic static Spanned setTextToUpperCaseAndBold(String originalString) {\r\n    if (TextUtils.isEmpty(originalString)) {\r\n        return HtmlCompat.fromHtml(\"\");\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mBucketNote;\nprivate final Bucket<Preferences> mBucketPreference;\nprivate final Bucket<Account> mBucketAccount;\nprivate final Bucket<Tag> mBucketTag;",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "    super.onStopped();\r\n    stopBuckets(\"onStopped\");\r\n}",
  "context" : "@Override\r\npublic void onStopped() {\r\n    super.onStopped();\r\n    stopBuckets(\"onStopped\");\r\n}",
  "start_lineno" : "40",
  "methodName" : "onStopped",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SyncWorker.java",
  "task_id" : "simplenote-android/550",
  "prompt" : "@Override\r\npublic void onStopped() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private final Bucket<Note> mBucketNote;\nprivate final Bucket<Preferences> mBucketPreference;\nprivate final Bucket<Account> mBucketAccount;\nprivate final Bucket<Tag> mBucketTag;",
  "app_type" : "notes",
  "end_lineno" : "84",
  "ground_truth" : "    stopBuckets(\"startWork\");\r\n    completer.set(Result.success());\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    stopBuckets(\"startWork\");\r\n    completer.set(Result.success());\r\n}",
  "start_lineno" : "80",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SyncWorker.java",
  "task_id" : "simplenote-android/551",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val DIFF_CALLBACK",
  "app_type" : "notes",
  "end_lineno" : "25",
  "ground_truth" : "                onEditClick,\r\n                onDeleteClick,\r\n                onLongDeleteClick\r\n        )\r\n    }",
  "context" : "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TagItemViewHolder {\r\n        val binding = TagsListRowBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        return TagItemViewHolder(\r\n                binding,\r\n                onEditClick,\r\n                onDeleteClick,\r\n                onLongDeleteClick\r\n        )\r\n    }",
  "start_lineno" : "17",
  "methodName" : "onCreateViewHolder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagItemAdapter.kt",
  "task_id" : "simplenote-android/552",
  "prompt" : "import com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.databinding.TagsListRowBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TagItemViewHolder {\r\n        val binding = TagsListRowBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        return TagItemViewHolder(\r\n                binding,\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "val DIFF_CALLBACK",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "        val currentTagItem = getItem(position)\r\n        holder.bind(currentTagItem)\r\n    }",
  "context" : "override fun onBindViewHolder(holder: TagItemViewHolder, position: Int) {\r\n        val currentTagItem = getItem(position)\r\n        holder.bind(currentTagItem)\r\n    }",
  "start_lineno" : "27",
  "methodName" : "onBindViewHolder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagItemAdapter.kt",
  "task_id" : "simplenote-android/553",
  "prompt" : "import com.automattic.simplenote.models.TagItem\nimport android.view.View\noverride fun onBindViewHolder(holder: TagItemViewHolder, position: Int) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final int DEFAULT_ITEM_POSITION = 0;\npublic static final int ALL_NOTES_ID = -1;\npublic static final int TRASH_ID = -2;\npublic static final int SETTINGS_ID = -3;\npublic static final int TAGS_ID = -4;\npublic static final int UNTAGGED_NOTES_ID = -5;\nprivate static final int mMinimumItemsPrimary = new int[] { R.string.all_notes, R.string.trash }.length;\nprivate static final int mMinimumItemsSecondary = new int[] { R.string.untagged_notes }.length;\nprivate Bucket<Note> mNotesBucket;\nprivate Context mContext;\nprivate List<Tag> tags;\nprivate TagMenuItem mAllNotesItem;\nprivate TagMenuItem mTrashItem;\nprivate TagMenuItem mUntaggedNotesItem;\npublic String name;\npublic long id;",
  "app_type" : "notes",
  "end_lineno" : "68",
  "ground_truth" : "    this.tags = tags;\r\n    notifyDataSetChanged();\r\n}",
  "context" : "public void submitList(List<Tag> tags) {\r\n    this.tags = tags;\r\n    notifyDataSetChanged();\r\n}",
  "start_lineno" : "65",
  "methodName" : "submitList",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java",
  "task_id" : "simplenote-android/554",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.models.Tag\npublic void submitList(List<Tag> tags) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int DEFAULT_ITEM_POSITION = 0;\npublic static final int ALL_NOTES_ID = -1;\npublic static final int TRASH_ID = -2;\npublic static final int SETTINGS_ID = -3;\npublic static final int TAGS_ID = -4;\npublic static final int UNTAGGED_NOTES_ID = -5;\nprivate static final int mMinimumItemsPrimary = new int[] { R.string.all_notes, R.string.trash }.length;\nprivate static final int mMinimumItemsSecondary = new int[] { R.string.untagged_notes }.length;\nprivate Bucket<Note> mNotesBucket;\nprivate Context mContext;\nprivate List<Tag> tags;\nprivate TagMenuItem mAllNotesItem;\nprivate TagMenuItem mTrashItem;\nprivate TagMenuItem mUntaggedNotesItem;\npublic String name;\npublic long id;",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "        return mUntaggedNotesItem;\r\n    } else {\r\n        return new TagMenuItem(i, tags.get(i - mMinimumItemsPrimary).getName());\r\n    }\r\n}",
  "context" : "@Override\r\npublic TagMenuItem getItem(int i) {\r\n    if (i == 0) {\r\n        return mAllNotesItem;\r\n    } else if (i == 1) {\r\n        return mTrashItem;\r\n    } else if (i == this.getCount() - 1) {\r\n        return mUntaggedNotesItem;\r\n    } else {\r\n        return new TagMenuItem(i, tags.get(i - mMinimumItemsPrimary).getName());\r\n    }\r\n}",
  "start_lineno" : "84",
  "methodName" : "getItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java",
  "task_id" : "simplenote-android/555",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\n@Override\r\npublic TagMenuItem getItem(int i) {\r\n    if (i == 0) {\r\n        return mAllNotesItem;\r\n    } else if (i == 1) {\r\n        return mTrashItem;\r\n    } else if (i == this.getCount() - 1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int DEFAULT_ITEM_POSITION = 0;\npublic static final int ALL_NOTES_ID = -1;\npublic static final int TRASH_ID = -2;\npublic static final int SETTINGS_ID = -3;\npublic static final int TAGS_ID = -4;\npublic static final int UNTAGGED_NOTES_ID = -5;\nprivate static final int mMinimumItemsPrimary = new int[] { R.string.all_notes, R.string.trash }.length;\nprivate static final int mMinimumItemsSecondary = new int[] { R.string.untagged_notes }.length;\nprivate Bucket<Note> mNotesBucket;\nprivate Context mContext;\nprivate List<Tag> tags;\nprivate TagMenuItem mAllNotesItem;\nprivate TagMenuItem mTrashItem;\nprivate TagMenuItem mUntaggedNotesItem;\npublic String name;\npublic long id;",
  "app_type" : "notes",
  "end_lineno" : "119",
  "ground_truth" : "            return i + mMinimumItemsPrimary;\r\n        }\r\n    }\r\n    return -1;\r\n}",
  "context" : "public int getPosition(TagMenuItem mSelectedTag) {\r\n    if (mSelectedTag.id == ALL_NOTES_ID)\r\n        return 0;\r\n    if (mSelectedTag.id == TRASH_ID)\r\n        return 1;\r\n    if (mSelectedTag.id == UNTAGGED_NOTES_ID)\r\n        return this.getCount() - 1;\r\n    if (tags == null)\r\n        return -1;\r\n    for (int i = 0; i < tags.size(); i++) {\r\n        if (i == mSelectedTag.id) {\r\n            return i + mMinimumItemsPrimary;\r\n        }\r\n    }\r\n    return -1;\r\n}",
  "start_lineno" : "107",
  "methodName" : "getPosition",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java",
  "task_id" : "simplenote-android/556",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.R\nimport android.view.MenuItem\npublic int getPosition(TagMenuItem mSelectedTag) {\r\n    if (mSelectedTag.id == ALL_NOTES_ID)\r\n        return 0;\r\n    if (mSelectedTag.id == TRASH_ID)\r\n        return 1;\r\n    if (mSelectedTag.id == UNTAGGED_NOTES_ID)\r\n        return this.getCount() - 1;\r\n    if (tags == null)\r\n        return -1;\r\n    for (int i = 0; i < tags.size(); i++) {\r\n        if (i == mSelectedTag.id) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int DEFAULT_ITEM_POSITION = 0;\npublic static final int ALL_NOTES_ID = -1;\npublic static final int TRASH_ID = -2;\npublic static final int SETTINGS_ID = -3;\npublic static final int TAGS_ID = -4;\npublic static final int UNTAGGED_NOTES_ID = -5;\nprivate static final int mMinimumItemsPrimary = new int[] { R.string.all_notes, R.string.trash }.length;\nprivate static final int mMinimumItemsSecondary = new int[] { R.string.untagged_notes }.length;\nprivate Bucket<Note> mNotesBucket;\nprivate Context mContext;\nprivate List<Tag> tags;\nprivate TagMenuItem mAllNotesItem;\nprivate TagMenuItem mTrashItem;\nprivate TagMenuItem mUntaggedNotesItem;\npublic String name;\npublic long id;",
  "app_type" : "notes",
  "end_lineno" : "135",
  "ground_truth" : "            return mUntaggedNotesItem;\r\n        default:\r\n            return new TagMenuItem(item.getItemId(), item.getTitle().toString());\r\n    }\r\n}",
  "context" : "public TagMenuItem getTagFromItem(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case ALL_NOTES_ID:\r\n            return mAllNotesItem;\r\n        case TRASH_ID:\r\n            return mTrashItem;\r\n        case UNTAGGED_NOTES_ID:\r\n            return mUntaggedNotesItem;\r\n        default:\r\n            return new TagMenuItem(item.getItemId(), item.getTitle().toString());\r\n    }\r\n}",
  "start_lineno" : "121",
  "methodName" : "getTagFromItem",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java",
  "task_id" : "simplenote-android/557",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.R\nimport android.view.MenuItem\npublic TagMenuItem getTagFromItem(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case ALL_NOTES_ID:\r\n            return mAllNotesItem;\r\n        case TRASH_ID:\r\n            return mTrashItem;\r\n        case UNTAGGED_NOTES_ID:\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "32",
  "ground_truth" : "        setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n    } else {\r\n        setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n    }\r\n}",
  "context" : "@Override\r\npublic void afterTextChanged(Editable s) {\r\n    if (s.length() > 0) {\r\n        setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n    } else {\r\n        setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n    }\r\n}",
  "start_lineno" : "25",
  "methodName" : "afterTextChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/558",
  "prompt" : "import android.text.Editable\n@Override\r\npublic void afterTextChanged(Editable s) {\r\n    if (s.length() > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "        saveTagOrShowError(s.toString());\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\r\n    if (count >= 1 && s.charAt(start) == SPACE) {\r\n        saveTagOrShowError(s.toString());\r\n    }\r\n}",
  "start_lineno" : "38",
  "methodName" : "onTextChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/559",
  "prompt" : "import com.automattic.simplenote.utils.SearchTokenizer.SPACE\n@Override\r\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\r\n    if (count >= 1 && s.charAt(start) == SPACE) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "        return true;\r\n    } else {\r\n        return super.dispatchKeyEvent(event);\r\n    }\r\n}",
  "context" : "@Override\r\npublic boolean dispatchKeyEvent(KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {\r\n        saveTagOrShowError(getText().toString());\r\n        return true;\r\n    } else {\r\n        return super.dispatchKeyEvent(event);\r\n    }\r\n}",
  "start_lineno" : "65",
  "methodName" : "dispatchKeyEvent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/560",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.R\nimport android.view.KeyEvent\n@Override\r\npublic boolean dispatchKeyEvent(KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {\r\n        saveTagOrShowError(getText().toString());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "83",
  "ground_truth" : "    setOnItemClickListener(this);\r\n    addTextChangedListener(mTextWatcher);\r\n}",
  "context" : "public void init() {\r\n    setOnItemClickListener(this);\r\n    addTextChangedListener(mTextWatcher);\r\n}",
  "start_lineno" : "80",
  "methodName" : "init",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/561",
  "prompt" : "public void init() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "89",
  "ground_truth" : "    String canonical = TagUtils.getCanonicalFromLexical(mBucketTag, lexical);\r\n    notifyTagsChanged(canonical);\r\n}",
  "context" : "public void notifyTagsChanged() {\r\n    String lexical = getText().toString().trim();\r\n    String canonical = TagUtils.getCanonicalFromLexical(mBucketTag, lexical);\r\n    notifyTagsChanged(canonical);\r\n}",
  "start_lineno" : "85",
  "methodName" : "notifyTagsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/562",
  "prompt" : "import com.automattic.simplenote.models.Tag\npublic void notifyTagsChanged() {\r\n    String lexical = getText().toString().trim();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "        mTagAddedListener.onTagAdded(tag);\r\n    }\r\n}",
  "context" : "public void notifyTagsChanged(String tag) {\r\n    if (mTagAddedListener != null) {\r\n        mTagAddedListener.onTagAdded(tag);\r\n    }\r\n}",
  "start_lineno" : "91",
  "methodName" : "notifyTagsChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/563",
  "prompt" : "import com.automattic.simplenote.models.Tag\npublic void notifyTagsChanged(String tag) {\r\n    if (mTagAddedListener != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Bucket<Tag> mBucketTag;\nprivate OnTagAddedListener mTagAddedListener;\nprivate TextWatcher mTextWatcher = new TextWatcher() {\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (s.length() > 0) {\r\n            setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\r\n        } else {\r\n            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (count >= 1 && s.charAt(start) == SPACE) {\r\n            saveTagOrShowError(s.toString());\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "111",
  "ground_truth" : "        addTextChangedListener(mTextWatcher);\r\n        Context context = getContext();\r\n        DialogUtils.showDialogWithEmail(context, context.getString(R.string.rename_tag_message_length));\r\n    }\r\n}",
  "context" : "private void saveTagOrShowError(String text) {\r\n    if (TagUtils.hashTagValid(text)) {\r\n        notifyTagsChanged();\r\n    } else {\r\n        removeTextChangedListener(mTextWatcher);\r\n        setText(getText().toString().trim());\r\n        setSelection(getText().length());\r\n        addTextChangedListener(mTextWatcher);\r\n        Context context = getContext();\r\n        DialogUtils.showDialogWithEmail(context, context.getString(R.string.rename_tag_message_length));\r\n    }\r\n}",
  "start_lineno" : "97",
  "methodName" : "saveTagOrShowError",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java",
  "task_id" : "simplenote-android/564",
  "prompt" : "import com.automattic.simplenote.models.Tag\nimport android.text.TextWatcher\nprivate void saveTagOrShowError(String text) {\r\n    if (TagUtils.hashTagValid(text)) {\r\n        notifyTagsChanged();\r\n    } else {\r\n        removeTextChangedListener(mTextWatcher);\r\n        setText(getText().toString().trim());\r\n        setSelection(getText().length());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "    } catch (BucketObjectNameInvalid e) {\r\n        Log.e(\"createTag\", \"Could not create tag \" + \"\\\"\" + name + \"\\\"\", e);\r\n        throw new BucketObjectNameInvalid(name);\r\n    }\r\n}",
  "context" : "/**\r\n * Create a tag with the @param key and @param name in the @param bucket.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use as tag name.\r\n * @param index     {@link int} to use as tag index.\r\n */\r\npublic static void createTag(Bucket<Tag> bucket, String name, int index) throws BucketObjectNameInvalid {\r\n    try {\r\n        Tag tag = bucket.newObject(hashTag(name));\r\n        tag.setName(name);\r\n        tag.setIndex(index);\r\n        tag.save();\r\n    } catch (BucketObjectNameInvalid e) {\r\n        Log.e(\"createTag\", \"Could not create tag \" + \"\\\"\" + name + \"\\\"\", e);\r\n        throw new BucketObjectNameInvalid(name);\r\n    }\r\n}",
  "start_lineno" : "28",
  "methodName" : "createTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/565",
  "prompt" : "import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Create a tag with the @param key and @param name in the @param bucket.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use as tag name.\r\n * @param index     {@link int} to use as tag index.\r\n */\r\npublic static void createTag(Bucket<Tag> bucket, String name, int index) throws BucketObjectNameInvalid {\r\n    try {\r\n        Tag tag = bucket.newObject(hashTag(name));\r\n        tag.setName(name);\r\n        tag.setIndex(index);\r\n        tag.save();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        createTag(bucket, name, bucket.count());\r\n    }\r\n}",
  "context" : "/**\r\n * Create a tag the @param key and @param name in the @param bucket if it does not exist.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use creating the tag.\r\n */\r\npublic static void createTagIfMissing(Bucket<Tag> bucket, String name) throws BucketObjectNameInvalid {\r\n    if (isTagMissing(bucket, name)) {\r\n        createTag(bucket, name, bucket.count());\r\n    }\r\n}",
  "start_lineno" : "46",
  "methodName" : "createTagIfMissing",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/566",
  "prompt" : "import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Create a tag the @param key and @param name in the @param bucket if it does not exist.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use creating the tag.\r\n */\r\npublic static void createTagIfMissing(Bucket<Tag> bucket, String name) throws BucketObjectNameInvalid {\r\n    if (isTagMissing(bucket, name)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "73",
  "ground_truth" : "            tagsMatched.add(tag);\r\n        }\r\n    }\r\n    return tagsMatched;\r\n}",
  "context" : "/**\r\n * Find the tags that match the canonical representation of tagSearch\r\n *\r\n * @param tags      {@link List<String>} list of tags where tagSearch is going to be matched.\r\n * @param tagSearch {@link String} tag to be searched.\r\n * @return          {@link List<String>} Sublist of tags that matched tagSearch's canonical\r\n *                  representation.\r\n */\r\npublic static List<String> findTagsMatch(List<String> tags, String tagSearch) {\r\n    List<String> tagsMatched = new ArrayList<>();\r\n    // Get the canonical hash of tag that is searched\r\n    String tagSearchHash = hashTag(tagSearch);\r\n    for (String tag : tags) {\r\n        String tagHash = hashTag(tag);\r\n        if (tagHash.equals(tagSearchHash)) {\r\n            tagsMatched.add(tag);\r\n        }\r\n    }\r\n    return tagsMatched;\r\n}",
  "start_lineno" : "60",
  "methodName" : "findTagsMatch",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/567",
  "prompt" : "import java.util.List\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Find the tags that match the canonical representation of tagSearch\r\n *\r\n * @param tags      {@link List<String>} list of tags where tagSearch is going to be matched.\r\n * @param tagSearch {@link String} tag to be searched.\r\n * @return          {@link List<String>} Sublist of tags that matched tagSearch's canonical\r\n *                  representation.\r\n */\r\npublic static List<String> findTagsMatch(List<String> tags, String tagSearch) {\r\n    List<String> tagsMatched = new ArrayList<>();\r\n    // Get the canonical hash of tag that is searched\r\n    String tagSearchHash = hashTag(tagSearch);\r\n    for (String tag : tags) {\r\n        String tagHash = hashTag(tag);\r\n        if (tagHash.equals(tagSearchHash)) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "94",
  "ground_truth" : "    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"getCanonicalFromLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does not exist\");\r\n        return lexical;\r\n    }\r\n}",
  "context" : "/**\r\n * Get the canonical representation of a tag from the hashed value of the lexical variation.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to get tag.\r\n * @param lexical   {@link String} lexical variation of tag.\r\n *\r\n * @return          {@link String} canonical of tag if exists; lexical variation otherwise.\r\n */\r\npublic static String getCanonicalFromLexical(Bucket<Tag> bucket, String lexical) {\r\n    String hashed = hashTag(lexical);\r\n    try {\r\n        Tag tag = bucket.getObject(hashed);\r\n        Log.d(\"getCanonicalFromLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does exist\");\r\n        return tag.getName();\r\n    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"getCanonicalFromLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does not exist\");\r\n        return lexical;\r\n    }\r\n}",
  "start_lineno" : "83",
  "methodName" : "getCanonicalFromLexical",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/568",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nimport android.util.Log\n/**\r\n * Get the canonical representation of a tag from the hashed value of the lexical variation.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to get tag.\r\n * @param lexical   {@link String} lexical variation of tag.\r\n *\r\n * @return          {@link String} canonical of tag if exists; lexical variation otherwise.\r\n */\r\npublic static String getCanonicalFromLexical(Bucket<Tag> bucket, String lexical) {\r\n    String hashed = hashTag(lexical);\r\n    try {\r\n        Tag tag = bucket.getObject(hashed);\r\n        Log.d(\"getCanonicalFromLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does exist\");\r\n        return tag.getName();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"hasCanonicalOfLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does not exist\");\r\n        return false;\r\n    }\r\n}",
  "context" : "/**\r\n * A canonical representation of a tag exists from the hashed value of the lexical variation.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to get tag.\r\n * @param lexical   {@link String} lexical variation of tag.\r\n *\r\n * @return          {@link Boolean} TRUE if canonical tag exists; FALSE otherwise.\r\n */\r\npublic static boolean hasCanonicalOfLexical(Bucket<Tag> bucket, String lexical) {\r\n    String hashed = hashTag(lexical);\r\n    try {\r\n        bucket.getObject(hashed);\r\n        Log.d(\"hasCanonicalOfLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does exist\");\r\n        return true;\r\n    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"hasCanonicalOfLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does not exist\");\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "104",
  "methodName" : "hasCanonicalOfLexical",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/569",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nimport android.util.Log\n/**\r\n * A canonical representation of a tag exists from the hashed value of the lexical variation.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to get tag.\r\n * @param lexical   {@link String} lexical variation of tag.\r\n *\r\n * @return          {@link Boolean} TRUE if canonical tag exists; FALSE otherwise.\r\n */\r\npublic static boolean hasCanonicalOfLexical(Bucket<Tag> bucket, String lexical) {\r\n    String hashed = hashTag(lexical);\r\n    try {\r\n        bucket.getObject(hashed);\r\n        Log.d(\"hasCanonicalOfLexical\", \"Tag \" + \"\\\"\" + hashed + \"\\\"\" + \" does exist\");\r\n        return true;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "134",
  "ground_truth" : "    } catch (UnsupportedEncodingException e) {\r\n        // TODO: Handle encoding exception with a custom UTF-8 encoder.\r\n        return name;\r\n    }\r\n}",
  "context" : "/**\r\n * Hash the tag @param name with normalizing, lowercasing, and encoding.\r\n *\r\n * @param name      {@link String} to hash as the tag kay.\r\n *\r\n * @return          {@link String} hashed to use as tag key.\r\n */\r\npublic static String hashTag(String name) {\r\n    try {\r\n        String normalized = Normalizer.normalize(name, Normalizer.Form.NFC);\r\n        String lowercased = normalized.toLowerCase(Locale.US);\r\n        String encoded = URLEncoder.encode(lowercased, StandardCharsets.UTF_8.name());\r\n        return replaceEncoded(encoded);\r\n    } catch (UnsupportedEncodingException e) {\r\n        // TODO: Handle encoding exception with a custom UTF-8 encoder.\r\n        return name;\r\n    }\r\n}",
  "start_lineno" : "124",
  "methodName" : "hashTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/570",
  "prompt" : "import java.util.Locale\nimport java.text.Normalizer\nimport java.nio.charset.StandardCharsets\nimport java.net.URLEncoder\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Hash the tag @param name with normalizing, lowercasing, and encoding.\r\n *\r\n * @param name      {@link String} to hash as the tag kay.\r\n *\r\n * @return          {@link String} hashed to use as tag key.\r\n */\r\npublic static String hashTag(String name) {\r\n    try {\r\n        String normalized = Normalizer.normalize(name, Normalizer.Form.NFC);\r\n        String lowercased = normalized.toLowerCase(Locale.US);\r\n        String encoded = URLEncoder.encode(lowercased, StandardCharsets.UTF_8.name());\r\n        return replaceEncoded(encoded);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "153",
  "ground_truth" : "    } catch (UnsupportedEncodingException e) {\r\n        // TODO: Handle encoding exception with a custom UTF-8 encoder.\r\n        return false;\r\n    }\r\n}",
  "context" : "/**\r\n * Determine if the hashed tag @param name is valid after normalizing, lowercasing, and encoding.\r\n *\r\n * @param name      {@link String} to hash as the tag kay.\r\n *\r\n * @return          {@link boolean} true if hashed value is valid; false otherwise.\r\n */\r\npublic static boolean hashTagValid(String name) {\r\n    try {\r\n        String normalized = Normalizer.normalize(name, Normalizer.Form.NFC);\r\n        String lowercased = normalized.toLowerCase(Locale.US);\r\n        String encoded = replaceEncoded(URLEncoder.encode(lowercased, StandardCharsets.UTF_8.name()));\r\n        return encoded.length() <= MAXIMUM_LENGTH_ENCODED_HASH;\r\n    } catch (UnsupportedEncodingException e) {\r\n        // TODO: Handle encoding exception with a custom UTF-8 encoder.\r\n        return false;\r\n    }\r\n}",
  "start_lineno" : "143",
  "methodName" : "hashTagValid",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/571",
  "prompt" : "import java.util.Locale\nimport java.text.Normalizer\nimport java.nio.charset.StandardCharsets\nimport java.net.URLEncoder\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Determine if the hashed tag @param name is valid after normalizing, lowercasing, and encoding.\r\n *\r\n * @param name      {@link String} to hash as the tag kay.\r\n *\r\n * @return          {@link boolean} true if hashed value is valid; false otherwise.\r\n */\r\npublic static boolean hashTagValid(String name) {\r\n    try {\r\n        String normalized = Normalizer.normalize(name, Normalizer.Form.NFC);\r\n        String lowercased = normalized.toLowerCase(Locale.US);\r\n        String encoded = replaceEncoded(URLEncoder.encode(lowercased, StandardCharsets.UTF_8.name()));\r\n        return encoded.length() <= MAXIMUM_LENGTH_ENCODED_HASH;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static int MAXIMUM_LENGTH_ENCODED_HASH = 256;",
  "app_type" : "notes",
  "end_lineno" : "172",
  "ground_truth" : "    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"isTagMissing\", \"Tag \" + \"\\\"\" + name + \"\\\"\" + \" does not exist\");\r\n        return true;\r\n    }\r\n}",
  "context" : "/**\r\n * Determine if the tag with @param name is missing from @param bucket or not.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use creating the tag.\r\n *\r\n * @return          {@link Boolean} true if tag is missing; false otherwise.\r\n */\r\npublic static boolean isTagMissing(Bucket<Tag> bucket, String name) {\r\n    try {\r\n        bucket.getObject(hashTag(name));\r\n        Log.d(\"isTagMissing\", \"Tag \" + \"\\\"\" + name + \"\\\"\" + \" already exists\");\r\n        return false;\r\n    } catch (BucketObjectMissingException e) {\r\n        Log.d(\"isTagMissing\", \"Tag \" + \"\\\"\" + name + \"\\\"\" + \" does not exist\");\r\n        return true;\r\n    }\r\n}",
  "start_lineno" : "163",
  "methodName" : "isTagMissing",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java",
  "task_id" : "simplenote-android/572",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nimport android.util.Log\n/**\r\n * Determine if the tag with @param name is missing from @param bucket or not.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use creating the tag.\r\n *\r\n * @return          {@link Boolean} true if tag is missing; false otherwise.\r\n */\r\npublic static boolean isTagMissing(Bucket<Tag> bucket, String name) {\r\n    try {\r\n        bucket.getObject(hashTag(name));\r\n        Log.d(\"isTagMissing\", \"Tag \" + \"\\\"\" + name + \"\\\"\" + \" already exists\");\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int STYLE_BLACK = 2;\npublic static final int STYLE_CLASSIC = 1;\npublic static final int STYLE_DEFAULT = 0;\npublic static final int STYLE_MONO = 4;\npublic static final int STYLE_PUBLICATION = 5;\npublic static final int STYLE_MATRIX = 3;\npublic static final int STYLE_SEPIA = 6;\npublic static final int[] STYLE_ARRAY = { STYLE_DEFAULT, STYLE_CLASSIC, STYLE_BLACK, STYLE_MATRIX, STYLE_MONO, STYLE_PUBLICATION, STYLE_SEPIA };\nprivate static final String PREFERENCES_URI_AUTHORITY = \"preferences\";\nprivate static final String URI_SEGMENT_THEME = \"theme\";\nprivate static final int THEME_AUTO = 2;\nprivate static final int THEME_DARK = 1;\nprivate static final int THEME_LIGHT = 0;\nprivate static final int THEME_SYSTEM = 3;",
  "app_type" : "notes",
  "end_lineno" : "103",
  "ground_truth" : "    int drawerWidth = Math.min(displaySize.x, displaySize.y) - appBarHeight;\r\n    int maxDp = (DisplayUtils.isXLarge(context) ? 400 : 320);\r\n    int maxPx = DisplayUtils.dpToPx(context, maxDp);\r\n    return Math.min(drawerWidth, maxPx);\r\n}",
  "context" : "/*\r\n     * returns the optimal pixel width to use for the menu drawer based on:\r\n     * http://www.google.com/design/spec/layout/structure.html#structure-side-nav\r\n     * http://www.google.com/design/spec/patterns/navigation-drawer.html\r\n     * http://android-developers.blogspot.co.uk/2014/10/material-design-on-android-checklist.html\r\n     * https://medium.com/sebs-top-tips/material-navigation-drawer-sizing-558aea1ad266\r\n     */\r\npublic static int getOptimalDrawerWidth(Context context) {\r\n    Point displaySize = DisplayUtils.getDisplayPixelSize(context);\r\n    int appBarHeight = DisplayUtils.getActionBarHeight(context);\r\n    int drawerWidth = Math.min(displaySize.x, displaySize.y) - appBarHeight;\r\n    int maxDp = (DisplayUtils.isXLarge(context) ? 400 : 320);\r\n    int maxPx = DisplayUtils.dpToPx(context, maxDp);\r\n    return Math.min(drawerWidth, maxPx);\r\n}",
  "start_lineno" : "96",
  "methodName" : "getOptimalDrawerWidth",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ThemeUtils.java",
  "task_id" : "simplenote-android/573",
  "prompt" : "import android.graphics.Point\nimport android.content.Context\n/*\r\n     * returns the optimal pixel width to use for the menu drawer based on:\r\n     * http://www.google.com/design/spec/layout/structure.html#structure-side-nav\r\n     * http://www.google.com/design/spec/patterns/navigation-drawer.html\r\n     * http://android-developers.blogspot.co.uk/2014/10/material-design-on-android-checklist.html\r\n     * https://medium.com/sebs-top-tips/material-navigation-drawer-sizing-558aea1ad266\r\n     */\r\npublic static int getOptimalDrawerWidth(Context context) {\r\n    Point displaySize = DisplayUtils.getDisplayPixelSize(context);\r\n    int appBarHeight = DisplayUtils.getActionBarHeight(context);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int STYLE_BLACK = 2;\npublic static final int STYLE_CLASSIC = 1;\npublic static final int STYLE_DEFAULT = 0;\npublic static final int STYLE_MONO = 4;\npublic static final int STYLE_PUBLICATION = 5;\npublic static final int STYLE_MATRIX = 3;\npublic static final int STYLE_SEPIA = 6;\npublic static final int[] STYLE_ARRAY = { STYLE_DEFAULT, STYLE_CLASSIC, STYLE_BLACK, STYLE_MATRIX, STYLE_MONO, STYLE_PUBLICATION, STYLE_SEPIA };\nprivate static final String PREFERENCES_URI_AUTHORITY = \"preferences\";\nprivate static final String URI_SEGMENT_THEME = \"theme\";\nprivate static final int THEME_AUTO = 2;\nprivate static final int THEME_DARK = 1;\nprivate static final int THEME_LIGHT = 0;\nprivate static final int THEME_SYSTEM = 3;",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "    TypedArray ta = context.obtainStyledAttributes(new int[] { R.attr.noteEditorTextColor });\r\n    int textColorId = ta.getResourceId(0, android.R.color.black);\r\n    ta.recycle();\r\n    return textColorId;\r\n}",
  "context" : "public static int getThemeTextColorId(Context context) {\r\n    if (context == null) {\r\n        return 0;\r\n    }\r\n    TypedArray ta = context.obtainStyledAttributes(new int[] { R.attr.noteEditorTextColor });\r\n    int textColorId = ta.getResourceId(0, android.R.color.black);\r\n    ta.recycle();\r\n    return textColorId;\r\n}",
  "start_lineno" : "105",
  "methodName" : "getThemeTextColorId",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ThemeUtils.java",
  "task_id" : "simplenote-android/574",
  "prompt" : "import android.content.Context\npublic static int getThemeTextColorId(Context context) {\r\n    if (context == null) {\r\n        return 0;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int STYLE_BLACK = 2;\npublic static final int STYLE_CLASSIC = 1;\npublic static final int STYLE_DEFAULT = 0;\npublic static final int STYLE_MONO = 4;\npublic static final int STYLE_PUBLICATION = 5;\npublic static final int STYLE_MATRIX = 3;\npublic static final int STYLE_SEPIA = 6;\npublic static final int[] STYLE_ARRAY = { STYLE_DEFAULT, STYLE_CLASSIC, STYLE_BLACK, STYLE_MATRIX, STYLE_MONO, STYLE_PUBLICATION, STYLE_SEPIA };\nprivate static final String PREFERENCES_URI_AUTHORITY = \"preferences\";\nprivate static final String URI_SEGMENT_THEME = \"theme\";\nprivate static final int THEME_AUTO = 2;\nprivate static final int THEME_DARK = 1;\nprivate static final int THEME_LIGHT = 0;\nprivate static final int THEME_SYSTEM = 3;",
  "app_type" : "notes",
  "end_lineno" : "126",
  "ground_truth" : "    typedArray.recycle();\r\n    return colorResId;\r\n}",
  "context" : "public static int getColorResourceFromAttribute(@NonNull Context context, @AttrRes int attribute) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(new int[] { attribute });\r\n    int colorResId = typedArray.getResourceId(0, android.R.color.black);\r\n    typedArray.recycle();\r\n    return colorResId;\r\n}",
  "start_lineno" : "121",
  "methodName" : "getColorResourceFromAttribute",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ThemeUtils.java",
  "task_id" : "simplenote-android/575",
  "prompt" : "import com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport androidx.annotation.AttrRes\nimport android.content.res.TypedArray\nimport android.content.Context\npublic static int getColorResourceFromAttribute(@NonNull Context context, @AttrRes int attribute) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(new int[] { attribute });\r\n    int colorResId = typedArray.getResourceId(0, android.R.color.black);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private UndoListener mUndoListener;\nprivate List<String> mDeletedNoteIds;\nprivate View.OnClickListener mOnUndoClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        if (mUndoListener != null) {\r\n            mUndoListener.onUndo();\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "        mUndoListener.onUndo();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View v) {\r\n    if (mUndoListener != null) {\r\n        mUndoListener.onUndo();\r\n    }\r\n}",
  "start_lineno" : "31",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\UndoBarController.java",
  "task_id" : "simplenote-android/576",
  "prompt" : "import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mUndoListener != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private UndoListener mUndoListener;\nprivate List<String> mDeletedNoteIds;\nprivate View.OnClickListener mOnUndoClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        if (mUndoListener != null) {\r\n            mUndoListener.onUndo();\r\n        }\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "        return;\r\n    Snackbar.make(view, message, Snackbar.LENGTH_LONG).setAction(R.string.undo, mOnUndoClickListener).show();\r\n}",
  "context" : "public void showUndoBar(View view, CharSequence message) {\r\n    if (view == null)\r\n        return;\r\n    Snackbar.make(view, message, Snackbar.LENGTH_LONG).setAction(R.string.undo, mOnUndoClickListener).show();\r\n}",
  "start_lineno" : "43",
  "methodName" : "showUndoBar",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\UndoBarController.java",
  "task_id" : "simplenote-android/577",
  "prompt" : "import android.view.View\npublic void showUndoBar(View view, CharSequence message) {\r\n    if (view == null)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static int OAUTH_ACTIVITY_CODE = 1001;\nprivate static String WP_API_URL = \"https://public-api.wordpress.com/rest/v1.1/\";\nprivate static String WPCOM_OAUTH_URL = \"https://public-api.wordpress.com/oauth2/\";\nprivate static String WPCOM_OAUTH_REDIRECT_URL = \"https://app.simplenote.com/wpcc\";",
  "app_type" : "notes",
  "end_lineno" : "43",
  "ground_truth" : "    }\r\n    return !TextUtils.isEmpty(PrefUtils.getStringPref(context, PrefUtils.PREF_WP_TOKEN));\r\n}",
  "context" : "// Returns true if a WordPress.com token exists in preferences\r\npublic static boolean hasWPToken(Context context) {\r\n    if (context == null) {\r\n        return false;\r\n    }\r\n    return !TextUtils.isEmpty(PrefUtils.getStringPref(context, PrefUtils.PREF_WP_TOKEN));\r\n}",
  "start_lineno" : "36",
  "methodName" : "hasWPToken",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\WordPressUtils.java",
  "task_id" : "simplenote-android/578",
  "prompt" : "import android.content.Context\n// Returns true if a WordPress.com token exists in preferences\r\npublic static boolean hasWPToken(Context context) {\r\n    if (context == null) {\r\n        return false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static int OAUTH_ACTIVITY_CODE = 1001;\nprivate static String WP_API_URL = \"https://public-api.wordpress.com/rest/v1.1/\";\nprivate static String WPCOM_OAUTH_URL = \"https://public-api.wordpress.com/oauth2/\";\nprivate static String WPCOM_OAUTH_REDIRECT_URL = \"https://app.simplenote.com/wpcc\";",
  "app_type" : "notes",
  "end_lineno" : "85",
  "ground_truth" : "    String wpToken = PrefUtils.getStringPref(context, PrefUtils.PREF_WP_TOKEN);\r\n    OkHttpClient client = new OkHttpClient().newBuilder().readTimeout(30, TimeUnit.SECONDS).build();\r\n    Request request = new Request.Builder().url(WP_API_URL + \"me/sites\").header(\"Authorization\", String.format(Locale.ENGLISH, \"BEARER %s\", wpToken)).get().build();\r\n    client.newCall(request).enqueue(callback);\r\n}",
  "context" : "// Returns a list of sites that a user has on WordPress.com\r\npublic static void getSites(Context context, Callback callback) {\r\n    if (!hasWPToken(context)) {\r\n        return;\r\n    }\r\n    String wpToken = PrefUtils.getStringPref(context, PrefUtils.PREF_WP_TOKEN);\r\n    OkHttpClient client = new OkHttpClient().newBuilder().readTimeout(30, TimeUnit.SECONDS).build();\r\n    Request request = new Request.Builder().url(WP_API_URL + \"me/sites\").header(\"Authorization\", String.format(Locale.ENGLISH, \"BEARER %s\", wpToken)).get().build();\r\n    client.newCall(request).enqueue(callback);\r\n}",
  "start_lineno" : "70",
  "methodName" : "getSites",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\WordPressUtils.java",
  "task_id" : "simplenote-android/579",
  "prompt" : "import okhttp3.Callback\nimport android.content.Context\n// Returns a list of sites that a user has on WordPress.com\r\npublic static void getSites(Context context, Callback callback) {\r\n    if (!hasWPToken(context)) {\r\n        return;\r\n    }\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static int OAUTH_ACTIVITY_CODE = 1001;\nprivate static String WP_API_URL = \"https://public-api.wordpress.com/rest/v1.1/\";\nprivate static String WPCOM_OAUTH_URL = \"https://public-api.wordpress.com/oauth2/\";\nprivate static String WPCOM_OAUTH_REDIRECT_URL = \"https://app.simplenote.com/wpcc\";",
  "app_type" : "notes",
  "end_lineno" : "100",
  "ground_truth" : "    Uri redirectUri = Uri.parse(WPCOM_OAUTH_REDIRECT_URL);\r\n    return new AuthorizationRequest.Builder(serviceConfig, BuildConfig.WPCOM_CLIENT_ID, ResponseTypeValues.CODE, redirectUri);\r\n}",
  "context" : "// Builds a new WordPress.com authorization request\r\npublic static AuthorizationRequest.Builder getWordPressAuthorizationRequestBuilder() {\r\n    AuthorizationServiceConfiguration serviceConfig = new AuthorizationServiceConfiguration(Uri.parse(WPCOM_OAUTH_URL + \"authorize?scope=global\"), Uri.parse(WPCOM_OAUTH_URL + \"token\"));\r\n    Uri redirectUri = Uri.parse(WPCOM_OAUTH_REDIRECT_URL);\r\n    return new AuthorizationRequest.Builder(serviceConfig, BuildConfig.WPCOM_CLIENT_ID, ResponseTypeValues.CODE, redirectUri);\r\n}",
  "start_lineno" : "88",
  "methodName" : "getWordPressAuthorizationRequestBuilder",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\WordPressUtils.java",
  "task_id" : "simplenote-android/580",
  "prompt" : "import okhttp3.Request\nimport net.openid.appauth.AuthorizationServiceConfiguration\nimport net.openid.appauth.AuthorizationRequest\nimport android.net.Uri\n// Builds a new WordPress.com authorization request\r\npublic static AuthorizationRequest.Builder getWordPressAuthorizationRequestBuilder() {\r\n    AuthorizationServiceConfiguration serviceConfig = new AuthorizationServiceConfiguration(Uri.parse(WPCOM_OAUTH_URL + \"authorize?scope=global\"), Uri.parse(WPCOM_OAUTH_URL + \"token\"));\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _event\nval event LiveData<Event>",
  "app_type" : "notes",
  "end_lineno" : "53",
  "ground_truth" : "            is UserSession.UnauthorizedUser -> false // This should not happen.\r\n        }\r\n    }",
  "context" : "private fun isCurrentUser(collaborator: String): Boolean {\r\n        return when (val currentUser = sessionManager.getCurrentUser()) {\r\n            is UserSession.AuthorizedUser -> currentUser.user.email == collaborator\r\n            is UserSession.UnauthorizedUser -> false // This should not happen.\r\n        }\r\n    }",
  "start_lineno" : "48",
  "methodName" : "isCurrentUser",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\AddCollaboratorViewModel.kt",
  "task_id" : "simplenote-android/581",
  "prompt" : "import com.automattic.simplenote.authentication.UserSession\nprivate fun isCurrentUser(collaborator: String): Boolean {\r\n        return when (val currentUser = sessionManager.getCurrentUser()) {\r\n            is UserSession.AuthorizedUser -> currentUser.user.email == collaborator\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<Event>",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "        _uiState.value = UiState(tagName)\r\n\r\n        val result = tagsRepository.saveTag(tagName)\r\n        _event.postValue(if (result) Event.FINISH else Event.SHOW_ERROR)\r\n    }",
  "context" : "fun saveTag() {\r\n        val tagName = _uiState.value?.tagName ?: \"\"\r\n        // Keyboard should be closed\r\n        _uiState.value = UiState(tagName)\r\n\r\n        val result = tagsRepository.saveTag(tagName)\r\n        _event.postValue(if (result) Event.FINISH else Event.SHOW_ERROR)\r\n    }",
  "start_lineno" : "38",
  "methodName" : "saveTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\AddTagViewModel.kt",
  "task_id" : "simplenote-android/582",
  "prompt" : "fun saveTag() {\r\n        val tagName = _uiState.value?.tagName ?: \"\"\r\n        // Keyboard should be closed\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<Event>",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        _uiState.value = UiState(\"\")\r\n        _event.postValue(Event.START)\r\n    }",
  "context" : "fun start() {\r\n        // Show keyboard at startup\r\n        _uiState.value = UiState(\"\")\r\n        _event.postValue(Event.START)\r\n    }",
  "start_lineno" : "47",
  "methodName" : "start",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\AddTagViewModel.kt",
  "task_id" : "simplenote-android/583",
  "prompt" : "fun start() {\r\n        // Show keyboard at startup\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<Event>\nvar noteId String\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "35",
  "ground_truth" : "            updateUiState(noteId)\r\n        }\r\n    }",
  "context" : "fun loadCollaborators(noteId: String) {\r\n        this.noteId = noteId\r\n        viewModelScope.launch {\r\n            updateUiState(noteId)\r\n        }\r\n    }",
  "start_lineno" : "30",
  "methodName" : "loadCollaborators",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\CollaboratorsViewModel.kt",
  "task_id" : "simplenote-android/584",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun loadCollaborators(noteId: String) {\r\n        this.noteId = noteId\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<Event>\nvar noteId String\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "55",
  "ground_truth" : "            collaboratorsRepository.collaboratorsChanged(noteId).collect {\r\n                updateUiState(noteId)\r\n            }\r\n        }\r\n    }",
  "context" : "fun startListeningChanges() {\r\n        jobTagsFlow = viewModelScope.launch {\r\n            collaboratorsRepository.collaboratorsChanged(noteId).collect {\r\n                updateUiState(noteId)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "49",
  "methodName" : "startListeningChanges",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\CollaboratorsViewModel.kt",
  "task_id" : "simplenote-android/585",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun startListeningChanges() {\r\n        jobTagsFlow = viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "82",
  "ground_truth" : "            return\r\n        }\r\n\r\n        isStarted = true\r\n    }",
  "context" : "fun start() {\r\n        if (isStarted) {\r\n            return\r\n        }\r\n\r\n        isStarted = true\r\n    }",
  "start_lineno" : "76",
  "methodName" : "start",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/586",
  "prompt" : "fun start() {\r\n        if (isStarted) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "96",
  "ground_truth" : "        _onPurchaseRequest.postValue(offerToken)\r\n        _plansBottomSheetVisibility.postValue(false)\r\n    }",
  "context" : "private fun onPlanSelected(offerToken: String, tracker: AnalyticsTracker.Stat) {\r\n        AnalyticsTracker.track(tracker)\r\n        _onPurchaseRequest.postValue(offerToken)\r\n        _plansBottomSheetVisibility.postValue(false)\r\n    }",
  "start_lineno" : "92",
  "methodName" : "onPlanSelected",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/587",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nprivate fun onPlanSelected(offerToken: String, tracker: AnalyticsTracker.Stat) {\r\n        AnalyticsTracker.track(tracker)\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "138",
  "ground_truth" : "            billingClient.startConnection(billingListener)\r\n        } catch (e: IllegalStateException) {\r\n            Log.e(TAG, \"Error starting billing connection: ${e.message}\")\r\n        }\r\n    }",
  "context" : "private suspend fun startBillingConnection() = withContext(ioDispatcher) {\r\n        try {\r\n            billingClient.startConnection(billingListener)\r\n        } catch (e: IllegalStateException) {\r\n            Log.e(TAG, \"Error starting billing connection: ${e.message}\")\r\n        }\r\n    }",
  "start_lineno" : "132",
  "methodName" : "startBillingConnection",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/588",
  "prompt" : "import kotlinx.coroutines.withContext\nprivate suspend fun startBillingConnection() = withContext(ioDispatcher) {\r\n        try {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "147",
  "ground_truth" : "        startBillingConnection()\r\n\r\n        reconnectMilliseconds =\r\n            min(reconnectMilliseconds * 2, RECONNECT_TIMER_MAX_TIME_MILLISECONDS)\r\n    }",
  "context" : "private suspend fun retryBillingServiceConnectionWithExponentialBackoff() {\r\n        Log.i(TAG, \"Retrying billing service connection after $reconnectMilliseconds MS delay\")\r\n        delay(reconnectMilliseconds)\r\n        startBillingConnection()\r\n\r\n        reconnectMilliseconds =\r\n            min(reconnectMilliseconds * 2, RECONNECT_TIMER_MAX_TIME_MILLISECONDS)\r\n    }",
  "start_lineno" : "140",
  "methodName" : "retryBillingServiceConnectionWithExponentialBackoff",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/589",
  "prompt" : "import kotlinx.coroutines.delay\nimport com.automattic.simplenote.R\nimport android.util.Log\nprivate suspend fun retryBillingServiceConnectionWithExponentialBackoff() {\r\n        Log.i(TAG, \"Retrying billing service connection after $reconnectMilliseconds MS delay\")\r\n        delay(reconnectMilliseconds)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "305",
  "ground_truth" : "        super.onCleared()\r\n        billingClient.endConnection()\r\n    }",
  "context" : "override fun onCleared() {\r\n        super.onCleared()\r\n        billingClient.endConnection()\r\n    }",
  "start_lineno" : "302",
  "methodName" : "onCleared",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/590",
  "prompt" : "override fun onCleared() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "316",
  "ground_truth" : "            \"P6M\" -> R.string.subscription_six_month\r\n            \"P1Y\" -> R.string.subscription_yearly_month\r\n            else -> R.string.subscription_unknown\r\n        }\r\n    }",
  "context" : "private fun periodCodeToResource(code: String): Int {\r\n        return when (code) {\r\n            \"P1W\" -> R.string.subscription_weekly\r\n            \"P1M\" -> R.string.subscription_monthly\r\n            \"P3M\" -> R.string.subscription_three_month\r\n            \"P6M\" -> R.string.subscription_six_month\r\n            \"P1Y\" -> R.string.subscription_yearly_month\r\n            else -> R.string.subscription_unknown\r\n        }\r\n    }",
  "start_lineno" : "307",
  "methodName" : "periodCodeToResource",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/591",
  "prompt" : "import com.automattic.simplenote.R\nprivate fun periodCodeToResource(code: String): Int {\r\n        return when (code) {\r\n            \"P1W\" -> R.string.subscription_weekly\r\n            \"P1M\" -> R.string.subscription_monthly\r\n            \"P3M\" -> R.string.subscription_three_month\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "324",
  "ground_truth" : "            \"P1M\" -> AnalyticsTracker.Stat.IAP_MONTHLY_BUTTON_TAPPED\r\n            \"P1Y\" -> AnalyticsTracker.Stat.IAP_YEARLY_BUTTON_TAPPED\r\n            else -> AnalyticsTracker.Stat.IAP_UNKNOWN_BUTTON_TAPPED\r\n        }\r\n    }",
  "context" : "private fun periodCodeToTracker(code: String): AnalyticsTracker.Stat {\r\n        return when (code) {\r\n            \"P1M\" -> AnalyticsTracker.Stat.IAP_MONTHLY_BUTTON_TAPPED\r\n            \"P1Y\" -> AnalyticsTracker.Stat.IAP_YEARLY_BUTTON_TAPPED\r\n            else -> AnalyticsTracker.Stat.IAP_UNKNOWN_BUTTON_TAPPED\r\n        }\r\n    }",
  "start_lineno" : "318",
  "methodName" : "periodCodeToTracker",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/592",
  "prompt" : "import com.automattic.simplenote.analytics.AnalyticsTracker\nprivate fun periodCodeToTracker(code: String): AnalyticsTracker.Stat {\r\n        return when (code) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "354",
  "ground_truth" : "            return currentSubscriptionPlatform == null\r\n                    || currentSubscriptionPlatform == Preferences.SubscriptionPlatform.ANDROID\r\n        }\r\n        return false\r\n    }",
  "context" : "private fun doesNotHaveSubscriptionOnOtherPlatforms(): Boolean {\r\n        val preferences = preferencesBucket.get(Preferences.PREFERENCES_OBJECT_KEY)\r\n\r\n        preferences?.let {\r\n            val currentSubscriptionPlatform = preferences.currentSubscriptionPlatform\r\n\r\n            return currentSubscriptionPlatform == null\r\n                    || currentSubscriptionPlatform == Preferences.SubscriptionPlatform.ANDROID\r\n        }\r\n        return false\r\n    }",
  "start_lineno" : "344",
  "methodName" : "doesNotHaveSubscriptionOnOtherPlatforms",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/593",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.R\nprivate fun doesNotHaveSubscriptionOnOtherPlatforms(): Boolean {\r\n        val preferences = preferencesBucket.get(Preferences.PREFERENCES_OBJECT_KEY)\r\n\r\n        preferences?.let {\r\n            val currentSubscriptionPlatform = preferences.currentSubscriptionPlatform\r\n\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "381",
  "ground_truth" : "            _iapBannerVisibility.postValue(true)\r\n        }\r\n    } catch (ignore: BucketObjectMissingException) {\r\n        _iapBannerVisibility.postValue(false)\r\n    }",
  "context" : "private fun updateIapBannerVisibility() = try {\r\n        val preferences: Preferences = preferencesBucket.get(Preferences.PREFERENCES_OBJECT_KEY)\r\n        if (preferences.currentSubscriptionPlatform != null) {\r\n            _iapBannerVisibility.postValue(false)\r\n        } else {\r\n            _iapBannerVisibility.postValue(true)\r\n        }\r\n    } catch (ignore: BucketObjectMissingException) {\r\n        _iapBannerVisibility.postValue(false)\r\n    }",
  "start_lineno" : "372",
  "methodName" : "updateIapBannerVisibility",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/594",
  "prompt" : "import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.R\nprivate fun updateIapBannerVisibility() = try {\r\n        val preferences: Preferences = preferencesBucket.get(Preferences.PREFERENCES_OBJECT_KEY)\r\n        if (preferences.currentSubscriptionPlatform != null) {\r\n            _iapBannerVisibility.postValue(false)\r\n        } else {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var reconnectMilliseconds\nval billingClient\nval _onPurchaseRequest\nval onPurchaseRequest LiveData<String>\nval _planOffers\nval planOffers LiveData<List<PlansListItem>?>\nval _plansBottomSheetVisibility\nval plansBottomSheetVisibility LiveData<Boolean>\nval _iapBannerVisibility\nval iapBannerVisibility LiveData<Boolean>\nval _snackbarMessage\nval snackbarMessage LiveData<IapSnackbarMessage>\nval preferencesBucket\nval productDetails\nvar isStarted Boolean\nval billingListener\nval TAG String\nval SUSTAINER_SUB_PRODUCT\nval LIST_OF_PRODUCTS",
  "app_type" : "notes",
  "end_lineno" : "406",
  "ground_truth" : "        BillingClient.BillingResponseCode.SERVICE_UNAVAILABLE -> true\r\n        else -> false\r\n    }",
  "context" : "private fun shouldRetryConnection(responseCode: Int) = when(responseCode) {\r\n        BillingClient.BillingResponseCode.SERVICE_TIMEOUT,\r\n        BillingClient.BillingResponseCode.SERVICE_DISCONNECTED,\r\n        BillingClient.BillingResponseCode.SERVICE_UNAVAILABLE -> true\r\n        else -> false\r\n    }",
  "start_lineno" : "401",
  "methodName" : "shouldRetryConnection",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt",
  "task_id" : "simplenote-android/595",
  "prompt" : "import com.automattic.simplenote.R\nprivate fun shouldRetryConnection(responseCode: Int) = when(responseCode) {\r\n        BillingClient.BillingResponseCode.SERVICE_TIMEOUT,\r\n        BillingClient.BillingResponseCode.SERVICE_DISCONNECTED,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _uiState\nval uiState LiveData<UiState>\nvar _event\nval event LiveData<NoteEditorEvent>",
  "app_type" : "notes",
  "end_lineno" : "29",
  "ground_truth" : "        val tags = getTagsUseCase.getTags(note)\r\n        _uiState.value = UiState(tags)\r\n    }",
  "context" : "fun update(note: Note) {\r\n        val tags = getTagsUseCase.getTags(note)\r\n        _uiState.value = UiState(tags)\r\n    }",
  "start_lineno" : "26",
  "methodName" : "update",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\NoteEditorViewModel.kt",
  "task_id" : "simplenote-android/596",
  "prompt" : "import com.automattic.simplenote.models.Note\nfun update(note: Note) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "var _uiState\nval uiState LiveData<UiState>\nvar _event\nval event LiveData<NoteEditorEvent>",
  "app_type" : "notes",
  "end_lineno" : "77",
  "ground_truth" : "            Stat.EDITOR_TAG_REMOVED,\r\n            AnalyticsTracker.CATEGORY_NOTE,\r\n            \"tag_removed_from_note\"\r\n        )\r\n    }",
  "context" : "fun removeTag(tagName: String, note: Note) {\r\n        note.removeTag(tagName)\r\n\r\n        update(note)\r\n\r\n        AnalyticsTracker.track(\r\n            Stat.EDITOR_TAG_REMOVED,\r\n            AnalyticsTracker.CATEGORY_NOTE,\r\n            \"tag_removed_from_note\"\r\n        )\r\n    }",
  "start_lineno" : "67",
  "methodName" : "removeTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\NoteEditorViewModel.kt",
  "task_id" : "simplenote-android/597",
  "prompt" : "import com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nfun removeTag(tagName: String, note: Note) {\r\n        note.removeTag(tagName)\r\n\r\n        update(note)\r\n\r\n        AnalyticsTracker.track(\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending\nval TAG",
  "app_type" : "notes",
  "end_lineno" : "38",
  "ground_truth" : "            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(t)\r\n            }\r\n        })\r\n    }",
  "context" : " @MainThread\r\n    override fun observe(@NonNull owner: LifecycleOwner, @NonNull observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Log.w(TAG, \"Multiple observers registered but only one will be notified of changes.\")\r\n        }\r\n\r\n        // Observe the internal MutableLiveData\r\n        super.observe(owner, { t ->\r\n            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(t)\r\n            }\r\n        })\r\n    }",
  "start_lineno" : "26",
  "methodName" : "observe",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt",
  "task_id" : "simplenote-android/598",
  "prompt" : "import androidx.lifecycle.Observer\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.annotation.NonNull\nimport androidx.annotation.MainThread\nimport android.util.Log\n @MainThread\r\n    override fun observe(@NonNull owner: LifecycleOwner, @NonNull observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Log.w(TAG, \"Multiple observers registered but only one will be notified of changes.\")\r\n        }\r\n\r\n        // Observe the internal MutableLiveData\r\n        super.observe(owner, { t ->\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending\nval TAG",
  "app_type" : "notes",
  "end_lineno" : "44",
  "ground_truth" : "        pending.set(true)\r\n        super.setValue(t)\r\n    }",
  "context" : " @MainThread\r\n    override fun setValue(t: T?) {\r\n        pending.set(true)\r\n        super.setValue(t)\r\n    }",
  "start_lineno" : "40",
  "methodName" : "setValue",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt",
  "task_id" : "simplenote-android/599",
  "prompt" : "import androidx.annotation.MainThread\n @MainThread\r\n    override fun setValue(t: T?) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending\nval TAG",
  "app_type" : "notes",
  "end_lineno" : "49",
  "ground_truth" : "        pending.set(true)\r\n        super.postValue(value)\r\n    }",
  "context" : "override fun postValue(value: T) {\r\n        pending.set(true)\r\n        super.postValue(value)\r\n    }",
  "start_lineno" : "46",
  "methodName" : "postValue",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt",
  "task_id" : "simplenote-android/600",
  "prompt" : "override fun postValue(value: T) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val pending\nval TAG",
  "app_type" : "notes",
  "end_lineno" : "62",
  "ground_truth" : "        pending.set(true)\r\n        super.postValue(null)\r\n    }",
  "context" : "fun asyncCall() {\r\n        pending.set(true)\r\n        super.postValue(null)\r\n    }",
  "start_lineno" : "59",
  "methodName" : "asyncCall",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt",
  "task_id" : "simplenote-android/601",
  "prompt" : "fun asyncCall() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "36",
  "ground_truth" : "            _uiState.value = UiState(tagItems)\r\n        }\r\n    }",
  "context" : "fun start() {\r\n        viewModelScope.launch {\r\n            val tagItems = getTagsUseCase.allTags()\r\n            _uiState.value = UiState(tagItems)\r\n        }\r\n    }",
  "start_lineno" : "31",
  "methodName" : "start",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/602",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun start() {\r\n        viewModelScope.launch {\r\n            val tagItems = getTagsUseCase.allTags()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "45",
  "ground_truth" : "                val searchQuery = _uiState.value?.searchQuery\r\n                updateUiState(searchQuery)\r\n            }\r\n        }\r\n    }",
  "context" : "fun startListeningTagChanges() {\r\n        jobTagsFlow = viewModelScope.launch {\r\n            tagsRepository.tagsChanged().collect {\r\n                val searchQuery = _uiState.value?.searchQuery\r\n                updateUiState(searchQuery)\r\n            }\r\n        }\r\n    }",
  "start_lineno" : "38",
  "methodName" : "startListeningTagChanges",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/603",
  "prompt" : "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.collect\nimport androidx.lifecycle.viewModelScope\nfun startListeningTagChanges() {\r\n        jobTagsFlow = viewModelScope.launch {\r\n            tagsRepository.tagsChanged().collect {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "52",
  "ground_truth" : "\r\n        _uiState.value = UiState(tagItems, searchUpdate, searchQuery)\r\n    }",
  "context" : "private suspend fun updateUiState(searchQuery: String?, searchUpdate: Boolean = false) {\r\n        val tagItems = if (searchQuery == null) getTagsUseCase.allTags()\r\n            else getTagsUseCase.searchTags(searchQuery)\r\n\r\n        _uiState.value = UiState(tagItems, searchUpdate, searchQuery)\r\n    }",
  "start_lineno" : "47",
  "methodName" : "updateUiState",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/604",
  "prompt" : "private suspend fun updateUiState(searchQuery: String?, searchUpdate: Boolean = false) {\r\n        val tagItems = if (searchQuery == null) getTagsUseCase.allTags()\r\n            else getTagsUseCase.searchTags(searchQuery)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "74",
  "ground_truth" : "            updateUiState(searchQuery, true)\r\n        }\r\n    }",
  "context" : "fun search(searchQuery: String) {\r\n        viewModelScope.launch {\r\n            updateUiState(searchQuery, true)\r\n        }\r\n    }",
  "start_lineno" : "70",
  "methodName" : "search",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/605",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun search(searchQuery: String) {\r\n        viewModelScope.launch {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "80",
  "ground_truth" : "        // This remove the listeners for the tags bucket\r\n        jobTagsFlow?.cancel()\r\n    }",
  "context" : "fun stopListeningTagChanges() {\r\n        // When the job for tagsFlow is cancelled, the awaitClose block is called\r\n        // This remove the listeners for the tags bucket\r\n        jobTagsFlow?.cancel()\r\n    }",
  "start_lineno" : "76",
  "methodName" : "stopListeningTagChanges",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/606",
  "prompt" : "fun stopListeningTagChanges() {\r\n        // When the job for tagsFlow is cancelled, the awaitClose block is called\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "87",
  "ground_truth" : "            updateUiState(searchQuery)\r\n        }\r\n    }",
  "context" : "fun updateOnResult() {\r\n        viewModelScope.launch {\r\n            val searchQuery = _uiState.value?.searchQuery\r\n            updateUiState(searchQuery)\r\n        }\r\n    }",
  "start_lineno" : "82",
  "methodName" : "updateOnResult",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/607",
  "prompt" : "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun updateOnResult() {\r\n        viewModelScope.launch {\r\n            val searchQuery = _uiState.value?.searchQuery\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "99",
  "ground_truth" : "            _event.postValue(TagsEvent.DeleteTagEvent(tagItem))\r\n        } else {\r\n            deleteTag(tagItem)\r\n        }\r\n    }",
  "context" : "fun clickDeleteTag(tagItem: TagItem) {\r\n        if (tagItem.noteCount > 0) {\r\n            _event.postValue(TagsEvent.DeleteTagEvent(tagItem))\r\n        } else {\r\n            deleteTag(tagItem)\r\n        }\r\n    }",
  "start_lineno" : "93",
  "methodName" : "clickDeleteTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/608",
  "prompt" : "import com.automattic.simplenote.models.TagItem\nfun clickDeleteTag(tagItem: TagItem) {\r\n        if (tagItem.noteCount > 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "val _uiState\nval uiState LiveData<UiState>\nval _event\nval event LiveData<TagsEvent>\nvar jobTagsFlow Job?",
  "app_type" : "notes",
  "end_lineno" : "114",
  "ground_truth" : "                    AnalyticsTracker.CATEGORY_TAG,\r\n                    \"list_trash_button\"\r\n            )\r\n        }\r\n    }",
  "context" : "fun deleteTag(tagItem: TagItem) {\r\n        viewModelScope.launch {\r\n            tagsRepository.deleteTag(tagItem.tag)\r\n            AnalyticsTracker.track(\r\n                    AnalyticsTracker.Stat.TAG_MENU_DELETED,\r\n                    AnalyticsTracker.CATEGORY_TAG,\r\n                    \"list_trash_button\"\r\n            )\r\n        }\r\n    }",
  "start_lineno" : "105",
  "methodName" : "deleteTag",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt",
  "task_id" : "simplenote-android/609",
  "prompt" : "import kotlinx.coroutines.launch\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.lifecycle.viewModelScope\nfun deleteTag(tagItem: TagItem) {\r\n        viewModelScope.launch {\r\n            tagsRepository.deleteTag(tagItem.tag)\r\n            AnalyticsTracker.track(\r\n                    AnalyticsTracker.Stat.TAG_MENU_DELETED,\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "    int transY = centerY - drHeight / 2;\r\n    canvas.translate(x, transY);\r\n    drawable.draw(canvas);\r\n    canvas.restore();\r\n}",
  "context" : "@Override\r\npublic void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n    Drawable drawable = getDrawable();\r\n    Rect rect = drawable.getBounds();\r\n    canvas.save();\r\n    Paint.FontMetricsInt fmPaint = paint.getFontMetricsInt();\r\n    int fontHeight = fmPaint.descent - fmPaint.ascent;\r\n    int centerY = y + fmPaint.descent - fontHeight / 2;\r\n    int drHeight = (rect.bottom - rect.top) + mIconOversizeAdjustment;\r\n    int transY = centerY - drHeight / 2;\r\n    canvas.translate(x, transY);\r\n    drawable.draw(canvas);\r\n    canvas.restore();\r\n}",
  "start_lineno" : "45",
  "methodName" : "draw",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\CenteredImageSpan.java",
  "task_id" : "simplenote-android/610",
  "prompt" : "import androidx.annotation.NonNull\nimport android.graphics.drawable.Drawable\nimport android.graphics.Rect\nimport android.graphics.Paint\nimport android.graphics.Canvas\n@Override\r\npublic void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n    Drawable drawable = getDrawable();\r\n    Rect rect = drawable.getBounds();\r\n    canvas.save();\r\n    Paint.FontMetricsInt fmPaint = paint.getFontMetricsInt();\r\n    int fontHeight = fmPaint.descent - fmPaint.ascent;\r\n    int centerY = y + fmPaint.descent - fontHeight / 2;\r\n    int drHeight = (rect.bottom - rect.top) + mIconOversizeAdjustment;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private boolean isChecked;",
  "app_type" : "notes",
  "end_lineno" : "30",
  "ground_truth" : "        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(@NonNull View view) {\r\n    setChecked(!isChecked);\r\n    if (view instanceof SimplenoteEditText) {\r\n        try {\r\n            ((SimplenoteEditText) view).toggleCheckbox(this);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}",
  "start_lineno" : "20",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\CheckableSpan.java",
  "task_id" : "simplenote-android/611",
  "prompt" : "import androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onClick(@NonNull View view) {\r\n    setChecked(!isChecked);\r\n    if (view instanceof SimplenoteEditText) {\r\n        try {\r\n            ((SimplenoteEditText) view).toggleCheckbox(this);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private View mEmptyView;\nprivate final AdapterDataObserver mObserver = new AdapterDataObserver() {\r\n\r\n    @Override\r\n    public void onChanged() {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeInserted(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "59",
  "ground_truth" : "    if (adapterNew != null) {\r\n        adapterNew.registerAdapterDataObserver(mObserver);\r\n    }\r\n    toggleEmptyView();\r\n}",
  "context" : "@Override\r\npublic void setAdapter(Adapter adapterNew) {\r\n    final RecyclerView.Adapter adapterOld = getAdapter();\r\n    if (adapterOld != null) {\r\n        adapterOld.unregisterAdapterDataObserver(mObserver);\r\n    }\r\n    super.setAdapter(adapterNew);\r\n    if (adapterNew != null) {\r\n        adapterNew.registerAdapterDataObserver(mObserver);\r\n    }\r\n    toggleEmptyView();\r\n}",
  "start_lineno" : "44",
  "methodName" : "setAdapter",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java",
  "task_id" : "simplenote-android/612",
  "prompt" : "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\n@Override\r\npublic void setAdapter(Adapter adapterNew) {\r\n    final RecyclerView.Adapter adapterOld = getAdapter();\r\n    if (adapterOld != null) {\r\n        adapterOld.unregisterAdapterDataObserver(mObserver);\r\n    }\r\n    super.setAdapter(adapterNew);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private View mEmptyView;\nprivate final AdapterDataObserver mObserver = new AdapterDataObserver() {\r\n\r\n    @Override\r\n    public void onChanged() {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeInserted(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "    mEmptyView = emptyView;\r\n    toggleEmptyView();\r\n}",
  "context" : "public void setEmptyView(View emptyView) {\r\n    mEmptyView = emptyView;\r\n    toggleEmptyView();\r\n}",
  "start_lineno" : "61",
  "methodName" : "setEmptyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java",
  "task_id" : "simplenote-android/613",
  "prompt" : "import android.view.View\npublic void setEmptyView(View emptyView) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private View mEmptyView;\nprivate final AdapterDataObserver mObserver = new AdapterDataObserver() {\r\n\r\n    @Override\r\n    public void onChanged() {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeInserted(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n\r\n    @Override\r\n    public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n        toggleEmptyView();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "        mEmptyView.setVisibility(empty ? VISIBLE : GONE);\r\n    }\r\n}",
  "context" : "private void toggleEmptyView() {\r\n    if (mEmptyView != null && getAdapter() != null) {\r\n        final boolean empty = getAdapter().getItemCount() == 0;\r\n        mEmptyView.setVisibility(empty ? VISIBLE : GONE);\r\n    }\r\n}",
  "start_lineno" : "66",
  "methodName" : "toggleEmptyView",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java",
  "task_id" : "simplenote-android/614",
  "prompt" : "import android.view.View\nprivate void toggleEmptyView() {\r\n    if (mEmptyView != null && getAdapter() != null) {\r\n        final boolean empty = getAdapter().getItemCount() == 0;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int DURATION = 300;\nprivate static final String PROPERTY_COLOR = \"color\";\nprivate static final String PROPERTY_RADIUS = \"radius\";\nprivate static final String[] TRANSITION_PROPERTIES = { PROPERTY_COLOR, PROPERTY_RADIUS };\nprivate static final int DURATION_HALF = 150;\n@ColorInt\r\nprivate int mColorEnd = Color.TRANSPARENT;\n@ColorInt\r\nprivate int mColorStart = Color.TRANSPARENT;\nprivate int mRadiusEnd;\nprivate int mRadiusStart;",
  "app_type" : "notes",
  "end_lineno" : "51",
  "ground_truth" : "        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorEnd);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd);\r\n}",
  "context" : "@Override\r\npublic void captureEndValues(TransitionValues transitionValues) {\r\n    super.captureEndValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r\n        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorEnd);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd);\r\n}",
  "start_lineno" : "40",
  "methodName" : "captureEndValues",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphCircleToRectangle.java",
  "task_id" : "simplenote-android/615",
  "prompt" : "import android.view.View\nimport android.transition.TransitionValues\n@Override\r\npublic void captureEndValues(TransitionValues transitionValues) {\r\n    super.captureEndValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final int DURATION = 300;\nprivate static final String PROPERTY_COLOR = \"color\";\nprivate static final String PROPERTY_RADIUS = \"radius\";\nprivate static final String[] TRANSITION_PROPERTIES = { PROPERTY_COLOR, PROPERTY_RADIUS };\nprivate static final int DURATION_HALF = 150;\n@ColorInt\r\nprivate int mColorEnd = Color.TRANSPARENT;\n@ColorInt\r\nprivate int mColorStart = Color.TRANSPARENT;\nprivate int mRadiusEnd;\nprivate int mRadiusStart;",
  "app_type" : "notes",
  "end_lineno" : "64",
  "ground_truth" : "        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorStart);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusStart >= 0 ? mRadiusStart : view.getHeight() / 2);\r\n}",
  "context" : "@Override\r\npublic void captureStartValues(TransitionValues transitionValues) {\r\n    super.captureStartValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r\n        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorStart);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusStart >= 0 ? mRadiusStart : view.getHeight() / 2);\r\n}",
  "start_lineno" : "53",
  "methodName" : "captureStartValues",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphCircleToRectangle.java",
  "task_id" : "simplenote-android/616",
  "prompt" : "import android.view.View\nimport android.transition.TransitionValues\n@Override\r\npublic void captureStartValues(TransitionValues transitionValues) {\r\n    super.captureStartValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Paint mPaint;\nprivate float mRadius;\npublic static final Property<MorphDrawable, Integer> COLOR = new AniUtils.IntProperty<MorphDrawable>(\"color\") {\r\n\r\n    @Override\r\n    public Integer get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, int value) {\r\n        morphDrawable.setColor(value);\r\n    }\r\n};\npublic static final Property<MorphDrawable, Float> RADIUS = new AniUtils.FloatProperty<MorphDrawable>(\"radius\") {\r\n\r\n    @Override\r\n    public Float get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, float value) {\r\n        morphDrawable.setRadius(value);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "71",
  "ground_truth" : "    mPaint.setAlpha(alpha);\r\n    invalidateSelf();\r\n}",
  "context" : "@Override\r\npublic void setAlpha(int alpha) {\r\n    mPaint.setAlpha(alpha);\r\n    invalidateSelf();\r\n}",
  "start_lineno" : "67",
  "methodName" : "setAlpha",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java",
  "task_id" : "simplenote-android/617",
  "prompt" : "@Override\r\npublic void setAlpha(int alpha) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Paint mPaint;\nprivate float mRadius;\npublic static final Property<MorphDrawable, Integer> COLOR = new AniUtils.IntProperty<MorphDrawable>(\"color\") {\r\n\r\n    @Override\r\n    public Integer get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, int value) {\r\n        morphDrawable.setColor(value);\r\n    }\r\n};\npublic static final Property<MorphDrawable, Float> RADIUS = new AniUtils.FloatProperty<MorphDrawable>(\"radius\") {\r\n\r\n    @Override\r\n    public Float get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, float value) {\r\n        morphDrawable.setRadius(value);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "77",
  "ground_truth" : "    mPaint.setColorFilter(cf);\r\n    invalidateSelf();\r\n}",
  "context" : "@Override\r\npublic void setColorFilter(ColorFilter cf) {\r\n    mPaint.setColorFilter(cf);\r\n    invalidateSelf();\r\n}",
  "start_lineno" : "73",
  "methodName" : "setColorFilter",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java",
  "task_id" : "simplenote-android/618",
  "prompt" : "import android.graphics.ColorFilter\n@Override\r\npublic void setColorFilter(ColorFilter cf) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Paint mPaint;\nprivate float mRadius;\npublic static final Property<MorphDrawable, Integer> COLOR = new AniUtils.IntProperty<MorphDrawable>(\"color\") {\r\n\r\n    @Override\r\n    public Integer get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, int value) {\r\n        morphDrawable.setColor(value);\r\n    }\r\n};\npublic static final Property<MorphDrawable, Float> RADIUS = new AniUtils.FloatProperty<MorphDrawable>(\"radius\") {\r\n\r\n    @Override\r\n    public Float get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, float value) {\r\n        morphDrawable.setRadius(value);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "90",
  "ground_truth" : "    mPaint.setColor(color);\r\n    invalidateSelf();\r\n}",
  "context" : "public void setColor(int color) {\r\n    mPaint.setColor(color);\r\n    invalidateSelf();\r\n}",
  "start_lineno" : "87",
  "methodName" : "setColor",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java",
  "task_id" : "simplenote-android/619",
  "prompt" : "public void setColor(int color) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private Paint mPaint;\nprivate float mRadius;\npublic static final Property<MorphDrawable, Integer> COLOR = new AniUtils.IntProperty<MorphDrawable>(\"color\") {\r\n\r\n    @Override\r\n    public Integer get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, int value) {\r\n        morphDrawable.setColor(value);\r\n    }\r\n};\npublic static final Property<MorphDrawable, Float> RADIUS = new AniUtils.FloatProperty<MorphDrawable>(\"radius\") {\r\n\r\n    @Override\r\n    public Float get(MorphDrawable morphDrawable) {\r\n        return morphDrawable.getRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setValue(MorphDrawable morphDrawable, float value) {\r\n        morphDrawable.setRadius(value);\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "95",
  "ground_truth" : "    mRadius = cornerRadius;\r\n    invalidateSelf();\r\n}",
  "context" : "public void setRadius(float cornerRadius) {\r\n    mRadius = cornerRadius;\r\n    invalidateSelf();\r\n}",
  "start_lineno" : "92",
  "methodName" : "setRadius",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java",
  "task_id" : "simplenote-android/620",
  "prompt" : "public void setRadius(float cornerRadius) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String PROPERTY_COLOR = \"color\";\nprivate static final String PROPERTY_RADIUS = \"radius\";\nprivate static final String[] TRANSITION_PROPERTIES = { PROPERTY_COLOR, PROPERTY_RADIUS };\nprivate static final int DURATION = 300;\n@ColorInt\r\nprivate int mColorEnd = Color.TRANSPARENT;\n@ColorInt\r\nprivate int mColorStart = Color.TRANSPARENT;\nprivate int mRadiusEnd = -1;",
  "app_type" : "notes",
  "end_lineno" : "47",
  "ground_truth" : "        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorEnd);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd >= 0 ? mRadiusEnd : view.getHeight() / 2);\r\n}",
  "context" : "@Override\r\npublic void captureEndValues(TransitionValues transitionValues) {\r\n    super.captureEndValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r\n        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorEnd);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd >= 0 ? mRadiusEnd : view.getHeight() / 2);\r\n}",
  "start_lineno" : "36",
  "methodName" : "captureEndValues",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphRectangleToCircle.java",
  "task_id" : "simplenote-android/621",
  "prompt" : "import android.view.View\nimport android.transition.TransitionValues\n@Override\r\npublic void captureEndValues(TransitionValues transitionValues) {\r\n    super.captureEndValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final String PROPERTY_COLOR = \"color\";\nprivate static final String PROPERTY_RADIUS = \"radius\";\nprivate static final String[] TRANSITION_PROPERTIES = { PROPERTY_COLOR, PROPERTY_RADIUS };\nprivate static final int DURATION = 300;\n@ColorInt\r\nprivate int mColorEnd = Color.TRANSPARENT;\n@ColorInt\r\nprivate int mColorStart = Color.TRANSPARENT;\nprivate int mRadiusEnd = -1;",
  "app_type" : "notes",
  "end_lineno" : "60",
  "ground_truth" : "        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorStart);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd);\r\n}",
  "context" : "@Override\r\npublic void captureStartValues(TransitionValues transitionValues) {\r\n    super.captureStartValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r\n        return;\r\n    }\r\n    transitionValues.values.put(PROPERTY_COLOR, mColorStart);\r\n    transitionValues.values.put(PROPERTY_RADIUS, mRadiusEnd);\r\n}",
  "start_lineno" : "49",
  "methodName" : "captureStartValues",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphRectangleToCircle.java",
  "task_id" : "simplenote-android/622",
  "prompt" : "import android.view.View\nimport android.transition.TransitionValues\n@Override\r\npublic void captureStartValues(TransitionValues transitionValues) {\r\n    super.captureStartValues(transitionValues);\r\n    final View view = transitionValues.view;\r\n    if (view.getWidth() <= 0 || view.getHeight() <= 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private boolean mIsEnabled;",
  "app_type" : "notes",
  "end_lineno" : "33",
  "ground_truth" : "    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n        performClick();\r\n    }\r\n    return super.onTouchEvent(event);\r\n}",
  "context" : "@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (!mIsEnabled) {\r\n        return false;\r\n    }\r\n    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n        performClick();\r\n    }\r\n    return super.onTouchEvent(event);\r\n}",
  "start_lineno" : "22",
  "methodName" : "onTouchEvent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\NoteEditorViewPager.java",
  "task_id" : "simplenote-android/623",
  "prompt" : "import android.view.MotionEvent\n@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (!mIsEnabled) {\r\n        return false;\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "66",
  "ground_truth" : "        if (mTextView.extractText(request, et)) {\r\n            return et\r\n        }\r\n        return null\r\n    }",
  "context" : "override fun getExtractedText(request: ExtractedTextRequest?, flags: Int): ExtractedText? {\r\n        val et = ExtractedText()\r\n        if (mTextView.extractText(request, et)) {\r\n            return et\r\n        }\r\n        return null\r\n    }",
  "start_lineno" : "60",
  "methodName" : "getExtractedText",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SamsungInputConnection.kt",
  "task_id" : "simplenote-android/624",
  "prompt" : "override fun getExtractedText(request: ExtractedTextRequest?, flags: Int): ExtractedText? {\r\n        val et = ExtractedText()\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "145",
  "ground_truth" : "            baseInputConnection.commitContent(inputContentInfo, flags, opts)\r\n        } else {\r\n            super.commitContent(inputContentInfo, flags, opts)\r\n        }\r\n    }",
  "context" : "override fun commitContent(inputContentInfo: InputContentInfo, flags: Int, opts: Bundle?): Boolean {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {\r\n            baseInputConnection.commitContent(inputContentInfo, flags, opts)\r\n        } else {\r\n            super.commitContent(inputContentInfo, flags, opts)\r\n        }\r\n    }",
  "start_lineno" : "139",
  "methodName" : "commitContent",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SamsungInputConnection.kt",
  "task_id" : "simplenote-android/625",
  "prompt" : "import android.os.Bundle\nimport android.os.Build\noverride fun commitContent(inputContentInfo: InputContentInfo, flags: Int, opts: Bundle?): Boolean {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "",
  "app_type" : "notes",
  "end_lineno" : "178",
  "ground_truth" : "        } else {\r\n            // We should not reach this code on Android < N, but just in case we do, we call the old method.\r\n            baseInputConnection.deleteSurroundingText(beforeLength, afterLength)\r\n        }\r\n    }",
  "context" : "override fun deleteSurroundingTextInCodePoints(beforeLength: Int, afterLength: Int): Boolean {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            baseInputConnection.deleteSurroundingTextInCodePoints(beforeLength, afterLength)\r\n        } else {\r\n            // We should not reach this code on Android < N, but just in case we do, we call the old method.\r\n            baseInputConnection.deleteSurroundingText(beforeLength, afterLength)\r\n        }\r\n    }",
  "start_lineno" : "171",
  "methodName" : "deleteSurroundingTextInCodePoints",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SamsungInputConnection.kt",
  "task_id" : "simplenote-android/626",
  "prompt" : "import android.os.Build\noverride fun deleteSurroundingTextInCodePoints(beforeLength: Int, afterLength: Int): Boolean {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            baseInputConnection.deleteSurroundingTextInCodePoints(beforeLength, afterLength)\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "111",
  "ground_truth" : "    setTokenizer(mTokenizer);\r\n    setThreshold(1);\r\n}",
  "context" : "private void setLinkTokenizer() {\r\n    mTokenizer = new LinkTokenizer();\r\n    setOnItemClickListener(this);\r\n    setTokenizer(mTokenizer);\r\n    setThreshold(1);\r\n}",
  "start_lineno" : "106",
  "methodName" : "setLinkTokenizer",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/627",
  "prompt" : "import java.util.List\nimport com.automattic.simplenote.utils.LinkTokenizer\nprivate void setLinkTokenizer() {\r\n    mTokenizer = new LinkTokenizer();\r\n    setOnItemClickListener(this);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "121",
  "ground_truth" : "    String currentKeyboard = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.DEFAULT_INPUT_METHOD);\r\n    return \"samsung\".equals(Build.MANUFACTURER.toLowerCase(Locale.US)) && Build.VERSION.SDK_INT >= 33 && (currentKeyboard != null && currentKeyboard.startsWith(\"com.samsung.android.honeyboard\"));\r\n}",
  "context" : "private boolean shouldOverridePredictiveTextBehavior() {\r\n    String currentKeyboard = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.DEFAULT_INPUT_METHOD);\r\n    return \"samsung\".equals(Build.MANUFACTURER.toLowerCase(Locale.US)) && Build.VERSION.SDK_INT >= 33 && (currentKeyboard != null && currentKeyboard.startsWith(\"com.samsung.android.honeyboard\"));\r\n}",
  "start_lineno" : "113",
  "methodName" : "shouldOverridePredictiveTextBehavior",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/628",
  "prompt" : "private boolean shouldOverridePredictiveTextBehavior() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "133",
  "ground_truth" : "        AppLog.add(AppLog.Type.EDITOR, \"Samsung keyboard detected, overriding predictive text behavior\");\r\n        return new SamsungInputConnection(this, baseInputConnection);\r\n    }\r\n    return baseInputConnection;\r\n}",
  "context" : "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection baseInputConnection = super.onCreateInputConnection(outAttrs);\r\n    if (shouldOverridePredictiveTextBehavior()) {\r\n        AppLog.add(AppLog.Type.EDITOR, \"Samsung keyboard detected, overriding predictive text behavior\");\r\n        return new SamsungInputConnection(this, baseInputConnection);\r\n    }\r\n    return baseInputConnection;\r\n}",
  "start_lineno" : "123",
  "methodName" : "onCreateInputConnection",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/629",
  "prompt" : "import android.view.inputmethod.InputConnection\nimport android.view.inputmethod.EditorInfo\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection baseInputConnection = super.onCreateInputConnection(outAttrs);\r\n    if (shouldOverridePredictiveTextBehavior()) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "158",
  "ground_truth" : "        for (OnSelectionChangedListener l : listeners) l.onSelectionChanged(selStart, selEnd);\r\n    }\r\n}",
  "context" : "@Override\r\nprotected void onSelectionChanged(int selStart, int selEnd) {\r\n    super.onSelectionChanged(selStart, selEnd);\r\n    if (listeners != null) {\r\n        for (OnSelectionChangedListener l : listeners) l.onSelectionChanged(selStart, selEnd);\r\n    }\r\n}",
  "start_lineno" : "151",
  "methodName" : "onSelectionChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/630",
  "prompt" : "@Override\r\nprotected void onSelectionChanged(int selStart, int selEnd) {\r\n    super.onSelectionChanged(selStart, selEnd);\r\n    if (listeners != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "167",
  "ground_truth" : "    }\r\n    return super.onKeyPreIme(keyCode, event);\r\n}",
  "context" : "@Override\r\npublic boolean onKeyPreIme(int keyCode, KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {\r\n        clearFocus();\r\n    }\r\n    return super.onKeyPreIme(keyCode, event);\r\n}",
  "start_lineno" : "160",
  "methodName" : "onKeyPreIme",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/631",
  "prompt" : "import android.view.KeyEvent\n@Override\r\npublic boolean onKeyPreIme(int keyCode, KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {\r\n        clearFocus();\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "176",
  "ground_truth" : "    }\r\n    super.onFocusChanged(focused, direction, previouslyFocusedRect);\r\n}",
  "context" : "@Override\r\nprotected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\r\n    if (focused) {\r\n        setCursorVisible(true);\r\n    }\r\n    super.onFocusChanged(focused, direction, previouslyFocusedRect);\r\n}",
  "start_lineno" : "169",
  "methodName" : "onFocusChanged",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/632",
  "prompt" : "import com.automattic.simplenote.R\nimport android.graphics.Rect\n@Override\r\nprotected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\r\n    if (focused) {\r\n        setCursorVisible(true);\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "232",
  "ground_truth" : "            return i + 1;\r\n        }\r\n    }\r\n    return 0;\r\n}",
  "context" : "private int findStartOfLineOfSelection() {\r\n    int position = getSelectionStart();\r\n    // getSelectionStart may return -1 if there is no selection nor cursor\r\n    if (position == -1) {\r\n        return 0;\r\n    }\r\n    Editable editable = getText();\r\n    for (int i = position - 1; i >= 0; i--) {\r\n        if (editable.charAt(i) == '\\n') {\r\n            return i + 1;\r\n        }\r\n    }\r\n    return 0;\r\n}",
  "start_lineno" : "219",
  "methodName" : "findStartOfLineOfSelection",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/633",
  "prompt" : "import android.text.Editable\nprivate int findStartOfLineOfSelection() {\r\n    int position = getSelectionStart();\r\n    // getSelectionStart may return -1 if there is no selection nor cursor\r\n    if (position == -1) {\r\n        return 0;\r\n    }\r\n    Editable editable = getText();\r\n    for (int i = position - 1; i >= 0; i--) {\r\n        if (editable.charAt(i) == '\\n') {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "327",
  "ground_truth" : "    if (selectionStart >= 0 && selectionEnd >= 0) {\r\n        return layout.getLineForOffset(selectionStart) == layout.getLineForOffset(selectionEnd);\r\n    }\r\n    return false;\r\n}",
  "context" : "// Returns true if the current editor selection is on the same line\r\nprivate boolean selectionIsOnSameLine() {\r\n    int selectionStart = getSelectionStart();\r\n    int selectionEnd = getSelectionEnd();\r\n    Layout layout = getLayout();\r\n    if (selectionStart >= 0 && selectionEnd >= 0) {\r\n        return layout.getLineForOffset(selectionStart) == layout.getLineForOffset(selectionEnd);\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "317",
  "methodName" : "selectionIsOnSameLine",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/634",
  "prompt" : "import com.automattic.simplenote.R\nimport android.text.Layout\n// Returns true if the current editor selection is on the same line\r\nprivate boolean selectionIsOnSameLine() {\r\n    int selectionStart = getSelectionStart();\r\n    int selectionEnd = getSelectionEnd();\r\n    Layout layout = getLayout();\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final Pattern INTERNOTE_LINK_PATTERN_EDIT = Pattern.compile(\"([^]]*)(]\\\\(\" + SIMPLENOTE_LINK_PREFIX + SIMPLENOTE_LINK_ID + \"\\\\))\");\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\nprivate LinkTokenizer mTokenizer;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;",
  "app_type" : "notes",
  "end_lineno" : "336",
  "ground_truth" : "    float lineSpacingExtra = getLineSpacingExtra();\r\n    float lineSpacingMultiplier = getLineSpacingMultiplier();\r\n    setLineSpacing(0.0f, 1.0f);\r\n    setLineSpacing(lineSpacingExtra, lineSpacingMultiplier);\r\n}",
  "context" : "public void fixLineSpacing() {\r\n    // Prevents line heights from compacting\r\n    // https://issuetracker.google.com/issues/37009353\r\n    float lineSpacingExtra = getLineSpacingExtra();\r\n    float lineSpacingMultiplier = getLineSpacingMultiplier();\r\n    setLineSpacing(0.0f, 1.0f);\r\n    setLineSpacing(lineSpacingExtra, lineSpacingMultiplier);\r\n}",
  "start_lineno" : "329",
  "methodName" : "fixLineSpacing",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java",
  "task_id" : "simplenote-android/635",
  "prompt" : "public void fixLineSpacing() {\r\n    // Prevents line heights from compacting\r\n    // https://issuetracker.google.com/issues/37009353\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final long LENGTH_ACCELERATE = 750;\nprivate static final long LENGTH_DECELERATE = 600;\nprivate static final long LENGTH_FULL_SPEED = 250;\nprivate static final long LENGTH_LONG_PRESS = 1000;\nprivate ObjectAnimator mAnimator;\nprivate SpeedListener mListener;\nprivate boolean mIsMaximumSpeed;\nprivate float mSlop;\nprivate final Runnable mLongPressCallback = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        startAccelerationSpin();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "108",
  "ground_truth" : "        mAnimator.removeAllListeners();\r\n        mAnimator.cancel();\r\n        mAnimator = null;\r\n    }\r\n}",
  "context" : "private void cancelAnimation() {\r\n    if (mAnimator != null) {\r\n        mAnimator.removeAllListeners();\r\n        mAnimator.cancel();\r\n        mAnimator = null;\r\n    }\r\n}",
  "start_lineno" : "102",
  "methodName" : "cancelAnimation",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java",
  "task_id" : "simplenote-android/636",
  "prompt" : "import android.view.animation.Animation\nimport android.animation.Animator\nprivate void cancelAnimation() {\r\n    if (mAnimator != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final long LENGTH_ACCELERATE = 750;\nprivate static final long LENGTH_DECELERATE = 600;\nprivate static final long LENGTH_FULL_SPEED = 250;\nprivate static final long LENGTH_LONG_PRESS = 1000;\nprivate ObjectAnimator mAnimator;\nprivate SpeedListener mListener;\nprivate boolean mIsMaximumSpeed;\nprivate float mSlop;\nprivate final Runnable mLongPressCallback = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        startAccelerationSpin();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "115",
  "ground_truth" : "    removeCallbacks(mLongPressCallback);\r\n    setRotation(0);\r\n}",
  "context" : "private void cancelLongClick() {\r\n    cancelAnimation();\r\n    mIsMaximumSpeed = false;\r\n    removeCallbacks(mLongPressCallback);\r\n    setRotation(0);\r\n}",
  "start_lineno" : "110",
  "methodName" : "cancelLongClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java",
  "task_id" : "simplenote-android/637",
  "prompt" : "import android.view.animation.Animation\nprivate void cancelLongClick() {\r\n    cancelAnimation();\r\n    mIsMaximumSpeed = false;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final long LENGTH_ACCELERATE = 750;\nprivate static final long LENGTH_DECELERATE = 600;\nprivate static final long LENGTH_FULL_SPEED = 250;\nprivate static final long LENGTH_LONG_PRESS = 1000;\nprivate ObjectAnimator mAnimator;\nprivate SpeedListener mListener;\nprivate boolean mIsMaximumSpeed;\nprivate float mSlop;\nprivate final Runnable mLongPressCallback = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        startAccelerationSpin();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "168",
  "ground_truth" : "    mAnimator.setInterpolator(AnimationUtils.loadInterpolator(getContext(), android.R.interpolator.linear));\r\n    mAnimator.setDuration(LENGTH_FULL_SPEED);\r\n    mAnimator.setRepeatCount(Animation.INFINITE);\r\n    mAnimator.start();\r\n}",
  "context" : "protected void startContinuousSpin() {\r\n    if (mListener != null) {\r\n        mListener.OnMaximumSpeed();\r\n    }\r\n    cancelAnimation();\r\n    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    mIsMaximumSpeed = true;\r\n    mAnimator = ObjectAnimator.ofFloat(this, View.ROTATION, 360, 0);\r\n    mAnimator.setInterpolator(AnimationUtils.loadInterpolator(getContext(), android.R.interpolator.linear));\r\n    mAnimator.setDuration(LENGTH_FULL_SPEED);\r\n    mAnimator.setRepeatCount(Animation.INFINITE);\r\n    mAnimator.start();\r\n}",
  "start_lineno" : "152",
  "methodName" : "startContinuousSpin",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java",
  "task_id" : "simplenote-android/638",
  "prompt" : "import android.view.animation.Animation\nimport android.view.View\nimport android.view.HapticFeedbackConstants\nimport android.animation.ObjectAnimator\nimport android.animation.Animator\nprotected void startContinuousSpin() {\r\n    if (mListener != null) {\r\n        mListener.OnMaximumSpeed();\r\n    }\r\n    cancelAnimation();\r\n    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n    mIsMaximumSpeed = true;\r\n    mAnimator = ObjectAnimator.ofFloat(this, View.ROTATION, 360, 0);\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "private static final long LENGTH_ACCELERATE = 750;\nprivate static final long LENGTH_DECELERATE = 600;\nprivate static final long LENGTH_FULL_SPEED = 250;\nprivate static final long LENGTH_LONG_PRESS = 1000;\nprivate ObjectAnimator mAnimator;\nprivate SpeedListener mListener;\nprivate boolean mIsMaximumSpeed;\nprivate float mSlop;\nprivate final Runnable mLongPressCallback = new Runnable() {\r\n\r\n    @Override\r\n    public void run() {\r\n        startAccelerationSpin();\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "187",
  "ground_truth" : "    cancelAnimation();\r\n    cancelLongClick();\r\n}",
  "context" : "@Override\r\npublic void onAnimationEnd(Animator animation) {\r\n    cancelAnimation();\r\n    cancelLongClick();\r\n}",
  "start_lineno" : "183",
  "methodName" : "onAnimationEnd",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java",
  "task_id" : "simplenote-android/639",
  "prompt" : "import android.view.animation.Animation\nimport android.animation.Animator\n@Override\r\npublic void onAnimationEnd(Animator animation) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public static final String TYPEFACE_NAME_ROBOTO_REGULAR = \"Roboto-Regular.ttf\";\npublic static final String TYPEFACE_NAME_ROBOTO_MEDIUM = \"Roboto-Medium.ttf\";\npublic static final String TYPEFACE_NAME_ROBOTO_LIGHT = \"Roboto-Light.ttf\";\nprivate static final Hashtable<String, Typeface> mTypefaceCache = new Hashtable<>();",
  "app_type" : "notes",
  "end_lineno" : "31",
  "ground_truth" : "            mTypefaceCache.put(typefaceName, typeface);\r\n        }\r\n    }\r\n    return mTypefaceCache.get(typefaceName);\r\n}",
  "context" : "public static Typeface getTypeface(Context context, String typefaceName) {\r\n    if (context == null || typefaceName == null) {\r\n        return null;\r\n    }\r\n    if (!mTypefaceCache.containsKey(typefaceName)) {\r\n        Typeface typeface = Typeface.createFromAsset(context.getApplicationContext().getAssets(), \"fonts/\" + typefaceName);\r\n        if (typeface != null) {\r\n            mTypefaceCache.put(typefaceName, typeface);\r\n        }\r\n    }\r\n    return mTypefaceCache.get(typefaceName);\r\n}",
  "start_lineno" : "17",
  "methodName" : "getTypeface",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\TypefaceCache.java",
  "task_id" : "simplenote-android/640",
  "prompt" : "import android.graphics.Typeface\nimport android.content.Context\npublic static Typeface getTypeface(Context context, String typefaceName) {\r\n    if (context == null || typefaceName == null) {\r\n        return null;\r\n    }\r\n    if (!mTypefaceCache.containsKey(typefaceName)) {\r\n        Typeface typeface = Typeface.createFromAsset(context.getApplicationContext().getAssets(), \"fonts/\" + typefaceName);\r\n        if (typeface != null) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public static final String TYPEFACE_NAME_ROBOTO_REGULAR = \"Roboto-Regular.ttf\";\npublic static final String TYPEFACE_NAME_ROBOTO_MEDIUM = \"Roboto-Medium.ttf\";\npublic static final String TYPEFACE_NAME_ROBOTO_LIGHT = \"Roboto-Light.ttf\";\nprivate static final Hashtable<String, Typeface> mTypefaceCache = new Hashtable<>();",
  "app_type" : "notes",
  "end_lineno" : "50",
  "ground_truth" : "    Typeface typeface = getTypeface(context, typefaceName);\r\n    if (typeface != null) {\r\n        view.setTypeface(typeface);\r\n    }\r\n}",
  "context" : "/*\r\n     * sets the typeface for a TextView (or TextView descendant such as EditText or Button) based on\r\n     * the passed attributes, defaults to normal typeface\r\n     */\r\nprotected static void setCustomTypeface(Context context, TextView view, String typefaceName) {\r\n    if (context == null || view == null || typefaceName == null) {\r\n        return;\r\n    }\r\n    // skip at design-time\r\n    if (view.isInEditMode())\r\n        return;\r\n    Typeface typeface = getTypeface(context, typefaceName);\r\n    if (typeface != null) {\r\n        view.setTypeface(typeface);\r\n    }\r\n}",
  "start_lineno" : "37",
  "methodName" : "setCustomTypeface",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\TypefaceCache.java",
  "task_id" : "simplenote-android/641",
  "prompt" : "import android.widget.TextView\nimport android.graphics.Typeface\nimport android.content.Context\n/*\r\n     * sets the typeface for a TextView (or TextView descendant such as EditText or Button) based on\r\n     * the passed attributes, defaults to normal typeface\r\n     */\r\nprotected static void setCustomTypeface(Context context, TextView view, String typefaceName) {\r\n    if (context == null || view == null || typefaceName == null) {\r\n        return;\r\n    }\r\n    // skip at design-time\r\n    if (view.isInEditMode())\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "110",
  "ground_truth" : "        ClipData clip = ClipData.newPlainText(\"Simplenote\", mPostUrl);\r\n        clipboard.setPrimaryClip(clip);\r\n        Toast.makeText(requireContext(), R.string.link_copied, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE);\r\n    if (clipboard != null) {\r\n        ClipData clip = ClipData.newPlainText(\"Simplenote\", mPostUrl);\r\n        clipboard.setPrimaryClip(clip);\r\n        Toast.makeText(requireContext(), R.string.link_copied, Toast.LENGTH_SHORT).show();\r\n    }\r\n}",
  "start_lineno" : "98",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/642",
  "prompt" : "import android.view.View\nimport android.content.Context\nimport android.content.ClipboardManager\n@Override\r\npublic void onClick(View view) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE);\r\n    if (clipboard != null) {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "125",
  "ground_truth" : "    Intent share = new Intent(android.content.Intent.ACTION_SEND);\r\n    share.setType(\"text/plain\");\r\n    share.putExtra(Intent.EXTRA_TEXT, mPostUrl);\r\n    startActivity(Intent.createChooser(share, getString(R.string.wordpress_post_link)));\r\n}",
  "context" : "@Override\r\npublic void onClick(View view) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    Intent share = new Intent(android.content.Intent.ACTION_SEND);\r\n    share.setType(\"text/plain\");\r\n    share.putExtra(Intent.EXTRA_TEXT, mPostUrl);\r\n    startActivity(Intent.createChooser(share, getString(R.string.wordpress_post_link)));\r\n}",
  "start_lineno" : "114",
  "methodName" : "onClick",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/643",
  "prompt" : "import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "181",
  "ground_truth" : "        mListView.setAdapter(sitesAdapter);\r\n        return;\r\n    }\r\n    fetchSitesFromAPI();\r\n}",
  "context" : "private void loadSites() {\r\n    if (getActivity() == null || !WordPressUtils.hasWPToken(getActivity())) {\r\n        return;\r\n    }\r\n    if (loadSitesFromPreferences()) {\r\n        SitesAdapter sitesAdapter = new SitesAdapter(getActivity());\r\n        mListView.setAdapter(sitesAdapter);\r\n        return;\r\n    }\r\n    fetchSitesFromAPI();\r\n}",
  "start_lineno" : "169",
  "methodName" : "loadSites",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/644",
  "prompt" : "import com.automattic.simplenote.utils.WordPressUtils\nprivate void loadSites() {\r\n    if (getActivity() == null || !WordPressUtils.hasWPToken(getActivity())) {\r\n        return;\r\n    }\r\n    if (loadSitesFromPreferences()) {\r\n        SitesAdapter sitesAdapter = new SitesAdapter(getActivity());\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "241",
  "ground_truth" : "    }\r\n    SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(getActivity()).edit();\r\n    editor.putString(PrefUtils.PREF_WORDPRESS_SITES, mSitesArray.toString());\r\n    editor.apply();\r\n}",
  "context" : "private void saveSitesToPreferences() {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(getActivity()).edit();\r\n    editor.putString(PrefUtils.PREF_WORDPRESS_SITES, mSitesArray.toString());\r\n    editor.apply();\r\n}",
  "start_lineno" : "233",
  "methodName" : "saveSitesToPreferences",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/645",
  "prompt" : "private void saveSitesToPreferences() {\r\n    if (getActivity() == null) {\r\n        return;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "259",
  "ground_truth" : "            return false;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "context" : "private boolean loadSitesFromPreferences() {\r\n    if (getActivity() == null) {\r\n        return false;\r\n    }\r\n    String savedSites = PrefUtils.getStringPref(getActivity(), PrefUtils.PREF_WORDPRESS_SITES);\r\n    if (!TextUtils.isEmpty(savedSites)) {\r\n        try {\r\n            mSitesArray = new JSONArray(savedSites);\r\n            return true;\r\n        } catch (JSONException e) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}",
  "start_lineno" : "243",
  "methodName" : "loadSitesFromPreferences",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/646",
  "prompt" : "import org.json.JSONException\nimport org.json.JSONArray\nimport com.automattic.simplenote.utils.PrefUtils\nimport android.text.TextUtils\nprivate boolean loadSitesFromPreferences() {\r\n    if (getActivity() == null) {\r\n        return false;\r\n    }\r\n    String savedSites = PrefUtils.getStringPref(getActivity(), PrefUtils.PREF_WORDPRESS_SITES);\r\n    if (!TextUtils.isEmpty(savedSites)) {\r\n        try {\r\n            mSitesArray = new JSONArray(savedSites);\r\n            return true;\r\n        } catch (JSONException e) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "400",
  "ground_truth" : "            Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n            setDialogStatus(DialogStatus.FIELDS);\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n            setDialogStatus(DialogStatus.FIELDS);\r\n        }\r\n    });\r\n}",
  "start_lineno" : "386",
  "methodName" : "onFailure",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/647",
  "prompt" : "import okhttp3.Call\nimport java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "397",
  "ground_truth" : "    Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n    setDialogStatus(DialogStatus.FIELDS);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n    setDialogStatus(DialogStatus.FIELDS);\r\n}",
  "start_lineno" : "393",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/648",
  "prompt" : "@Override\r\npublic void run() {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "464",
  "ground_truth" : "                setDialogStatus(DialogStatus.CONNECT);\r\n            }\r\n        }\r\n    });\r\n}",
  "context" : "@Override\r\npublic void onFailure(@NonNull final Call call, @NonNull IOException e) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mSitesArray.length() == 0) {\r\n                // Reset to connect state if we reached an error\r\n                setDialogStatus(DialogStatus.CONNECT);\r\n            }\r\n        }\r\n    });\r\n}",
  "start_lineno" : "449",
  "methodName" : "onFailure",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/649",
  "prompt" : "import okhttp3.Call\nimport java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final Call call, @NonNull IOException e) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mSitesArray.length() == 0) {\r\n                // Reset to connect state if we reached an error\r",
  "type" : "android",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "462",
  "ground_truth" : "        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (mSitesArray.length() == 0) {\r\n        // Reset to connect state if we reached an error\r\n        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}",
  "start_lineno" : "456",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/650",
  "prompt" : "@Override\r\npublic void run() {\r\n    if (mSitesArray.length() == 0) {\r\n        // Reset to connect state if we reached an error\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "504",
  "ground_truth" : "        saveSitesToPreferences();\r\n    }\r\n    SitesAdapter sitesAdapter = new SitesAdapter(getActivity());\r\n    mListView.setAdapter(sitesAdapter);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    if (newSitesArray.length() > 0) {\r\n        mSitesArray = newSitesArray;\r\n        saveSitesToPreferences();\r\n    }\r\n    SitesAdapter sitesAdapter = new SitesAdapter(getActivity());\r\n    mListView.setAdapter(sitesAdapter);\r\n}",
  "start_lineno" : "496",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/651",
  "prompt" : "@Override\r\npublic void run() {\r\n    if (newSitesArray.length() > 0) {\r\n        mSitesArray = newSitesArray;\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "515",
  "ground_truth" : "        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    // Reset to connect state if we reached an error\r\n    if (mSitesArray.length() == 0) {\r\n        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}",
  "start_lineno" : "509",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/652",
  "prompt" : "@Override\r\npublic void run() {\r\n    // Reset to connect state if we reached an error\r\n    if (mSitesArray.length() == 0) {\r",
  "type" : "java",
  "actions" : ""
}, {
  "variables" : "public final static String DIALOG_TAG = \"wordpress_dialog\";\nprivate final static String API_FIELD_URL = \"URL\";\nprivate final static String API_FIELD_NAME = \"name\";\nprivate final static String API_FIELD_SITES = \"sites\";\nprivate View mConnectSection, mPostingSection, mFieldsSection, mSuccessSection;\nprivate ListView mListView;\nprivate CheckBox mDraftCheckbox;\nprivate TextView mPostSuccessTextView;\nprivate Button mPostButton, mCancelButton;\nprivate String mPostUrl;\nprivate JSONArray mSitesArray = new JSONArray();\nprivate Note mNote;\nprivate String mAuthState;\nAppCompatCheckedTextView titleTextView;\nprivate final View.OnClickListener onPostClickListener = new View.OnClickListener() {\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        if (mNote == null || !isAdded()) {\r\n            return;\r\n        }\r\n        // Perform different actions depending on the state of the dialog\r\n        if (mSuccessSection.getVisibility() == View.VISIBLE) {\r\n            dismiss();\r\n            return;\r\n        } else if (mConnectSection.getVisibility() == View.VISIBLE) {\r\n            if (getActivity() == null) {\r\n                return;\r\n            }\r\n            AuthorizationRequest.Builder authBuilder = WordPressUtils.getWordPressAuthorizationRequestBuilder();\r\n            // Set a unique state value\r\n            mAuthState = \"app-\" + UUID.randomUUID();\r\n            authBuilder.setState(mAuthState);\r\n            AuthorizationRequest request = authBuilder.build();\r\n            AuthorizationService authService = new AuthorizationService(getActivity());\r\n            Intent authIntent = authService.getAuthorizationRequestIntent(request);\r\n            startActivityForResult(authIntent, WordPressUtils.OAUTH_ACTIVITY_CODE);\r\n            return;\r\n        }\r\n        int selectedListPosition = mListView.getCheckedItemPosition();\r\n        if (selectedListPosition < 0) {\r\n            Toast.makeText(getContext(), R.string.select_site, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        JSONObject site;\r\n        try {\r\n            site = mSitesArray.getJSONObject(selectedListPosition);\r\n        } catch (JSONException e) {\r\n            Toast.makeText(getContext(), R.string.could_not_access_site_data, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String noteContent = mNote.getContent();\r\n        if (TextUtils.isEmpty(noteContent)) {\r\n            Toast.makeText(getContext(), R.string.empty_note_post, Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        String postStatus = mDraftCheckbox.isChecked() ? \"draft\" : \"publish\";\r\n        String title = \"\";\r\n        String content = mNote.getContent();\r\n        if (!mNote.getTitle().equals(mNote.getContent())) {\r\n            title = mNote.getTitle();\r\n            content = content.substring(title.length());\r\n            // Get rid of the #'s in front of markdown note titles\r\n            if (mNote.isMarkdownEnabled()) {\r\n                title = title.replaceFirst(\"^(#{1,6}[\\\\s]?)\", \"\");\r\n            }\r\n        }\r\n        setDialogStatus(DialogStatus.POSTING);\r\n        WordPressUtils.publishPost(getContext(), site.optString(API_FIELD_URL, \"\"), title, content, postStatus, new Callback() {\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call call, @NonNull IOException e) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        Toast.makeText(getContext(), \"A network error was encountered. Please try again.\", Toast.LENGTH_SHORT).show();\r\n                        setDialogStatus(DialogStatus.FIELDS);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NonNull Call call, @NonNull final Response response) {\r\n                if (getActivity() == null) {\r\n                    return;\r\n                }\r\n                getActivity().runOnUiThread(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            if (response.body() == null) {\r\n                                return;\r\n                            }\r\n                            if (response.code() == 200) {\r\n                                String responseString = response.body().string();\r\n                                JSONObject postResult = new JSONObject(responseString);\r\n                                mPostUrl = postResult.getString(API_FIELD_URL);\r\n                                mPostSuccessTextView.setText(getString(R.string.success, mPostUrl));\r\n                                setDialogStatus(DialogStatus.SUCCESS);\r\n                                AnalyticsTracker.track(AnalyticsTracker.Stat.NOTE_SHARED_TO_WORDPRESS, AnalyticsTracker.CATEGORY_NOTE, \"wordpress_note_share_success\");\r\n                            } else if (response.code() == 403) {\r\n                                Toast.makeText(getContext(), R.string.reconnect_to_wordpress, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.CONNECT);\r\n                            } else {\r\n                                Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                                setDialogStatus(DialogStatus.FIELDS);\r\n                            }\r\n                        } catch (IOException | JSONException e) {\r\n                            Toast.makeText(getContext(), R.string.network_error_message, Toast.LENGTH_SHORT).show();\r\n                            setDialogStatus(DialogStatus.FIELDS);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};",
  "app_type" : "notes",
  "end_lineno" : "533",
  "ground_truth" : "    editor.remove(PrefUtils.PREF_WORDPRESS_SITES);\r\n    editor.apply();\r\n    // Reset to connect state if we reached an error\r\n    setDialogStatus(DialogStatus.CONNECT);\r\n}",
  "context" : "@Override\r\npublic void run() {\r\n    // Remove WordPress sites\r\n    SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(getActivity()).edit();\r\n    editor.remove(PrefUtils.PREF_WORDPRESS_SITES);\r\n    editor.apply();\r\n    // Reset to connect state if we reached an error\r\n    setDialogStatus(DialogStatus.CONNECT);\r\n}",
  "start_lineno" : "525",
  "methodName" : "run",
  "fpath" : "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java",
  "task_id" : "simplenote-android/653",
  "prompt" : "import androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\n@Override\r\npublic void run() {\r\n    // Remove WordPress sites\r\n    SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(getActivity()).edit();\r",
  "type" : "java",
  "actions" : ""
} ]