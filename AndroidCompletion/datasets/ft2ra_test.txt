{"input": "<s> public static float dp2px ( Resources resources , float dp ) {", "gt": "final float scale = resources . getDisplayMetrics ( ) . density ;", "repo": "RedReader", "task_id": "RedReader/0"}
{"input": "<s> public void setIndeterminate ( boolean value ) {", "gt": "indeterminate = value ;", "repo": "RedReader", "task_id": "RedReader/1"}
{"input": "<s> public void setProgress ( float progress ) { if ( Math . abs ( progress - this . progress ) > <NUM_LIT> ) { this . progress = progress ;", "gt": "invalidate ( ) ;", "repo": "RedReader", "task_id": "RedReader/2"}
{"input": "<s> private int measure ( int measureSpec ) { int result ; int mode = MeasureSpec . getMode ( measureSpec ) ; int size = MeasureSpec . getSize ( measureSpec ) ; if ( mode = = MeasureSpec . EXACTLY ) { result = size ; } else { result = min_size ; if ( mode = = MeasureSpec . AT_MOST ) {", "gt": "result = Math . min ( result , size ) ;", "repo": "RedReader", "task_id": "RedReader/3"}
{"input": "<s> public Bitmap getFrame ( int n ) { if ( frameCount < = 0 ) return null ;", "gt": "n = n % frameCount ;", "repo": "RedReader", "task_id": "RedReader/5"}
{"input": "<s> protected void init ( ) { status = STATUS_OK ;", "gt": "frameCount = 0 ;", "repo": "RedReader", "task_id": "RedReader/7"}
{"input": "<s> protected int read ( ) { int curByte = 0 ; try { curByte = in . read ( ) ;", "gt": "} catch ( Exception e ) {", "repo": "RedReader", "task_id": "RedReader/8"}
{"input": "<s> protected void readHeader ( ) { String id = \" \" ; for ( int i = 0 ; i < <NUM_LIT:6> ; i + + ) { id + = ( char ) read ( ) ; } if ( ! id . startsWith ( \" <STR_LIT> \" ) ) { status = STATUS_FORMAT_ERROR ; return ; } readLSD ( ) ;", "gt": "if ( gctFlag & & ! err ( ) ) {", "repo": "RedReader", "task_id": "RedReader/10"}
{"input": "<s> protected void resetFrame ( ) { lastDispose = dispose ; lrx = ix ; lry = iy ; lrw = iw ; lrh = ih ; lastBitmap = image ; lastBgColor = bgColor ;", "gt": "dispose = 0 ;", "repo": "RedReader", "task_id": "RedReader/14"}
{"input": "<s> @ Override public void onCreate ( final SQLiteDatabase db ) { final String queryString = String . format ( \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" , TABLE , FIELD_USERNAME , FIELD_REFRESH_TOKEN , FIELD_PRIORITY , FIELD_USES_NEW_CLIENT_ID , FIELD_CLIENT_ID ) ;", "gt": "db . execSQL ( queryString ) ;", "repo": "RedReader", "task_id": "RedReader/18"}
{"input": "<s> public synchronized ArrayList < RedditAccount > getAccounts ( ) { if ( accountsCache = = null ) { final SQLiteDatabase db = getReadableDatabase ( ) ;", "gt": "reloadAccounts ( db ) ;", "repo": "RedReader", "task_id": "RedReader/20"}
{"input": "<s> @ Nullable public RedditAccount getAccount ( @ NonNull final String username ) { if ( \" \" . equals ( username ) ) { return getAnon ( ) ; } final ArrayList < RedditAccount > accounts = getAccounts ( ) ; RedditAccount selectedAccount = null ; for ( final RedditAccount account : accounts ) { if ( ! account . isAnonymous ( ) & & account . username . equalsIgnoreCase ( username ) ) { selectedAccount = account ;", "gt": "break ;", "repo": "RedReader", "task_id": "RedReader/21"}
{"input": "<s> public synchronized RedditAccount getDefaultAccount ( ) { if ( defaultAccountCache = = null ) { final SQLiteDatabase db = getReadableDatabase ( ) ;", "gt": "reloadAccounts ( db ) ;", "repo": "RedReader", "task_id": "RedReader/22"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + error ) ;", "repo": "RedReader", "task_id": "RedReader/27"}
{"input": "<s> @ Override public void onSuccess ( final ImageInfo info ) { Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ;", "gt": "LinkHandler . onLinkClicked ( AlbumListingActivity . this , info . urlOriginal ) ;", "repo": "RedReader", "task_id": "RedReader/28"}
{"input": "<s> @ Override public void onNotAnImage ( ) {", "gt": "Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/29"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/30"}
{"input": "<s> private void revertToWeb ( ) { final Runnable r = ( ) - > { if ( ! mHaveReverted ) { mHaveReverted = true ; LinkHandler . onLinkClicked ( this , mUrl , true ) ; finish ( ) ; } } ; if ( General . isThisUIThread ( ) ) {", "gt": "r . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/31"}
{"input": "<s> @ Override public void setTitle ( final CharSequence text ) {", "gt": "super . setTitle ( text ) ;", "repo": "RedReader", "task_id": "RedReader/32"}
{"input": "<s> public void closeAllExceptMain ( ) {", "gt": "closingAll = true ;", "repo": "RedReader", "task_id": "RedReader/33"}
{"input": "<s> public void setBaseActivityListing ( @ NonNull final View view ) {", "gt": "mContentListing . removeAllViews ( ) ;", "repo": "RedReader", "task_id": "RedReader/36"}
{"input": "<s> public void setBaseActivityListing ( final int layoutRes ) {", "gt": "mContentListing . removeAllViews ( ) ;", "repo": "RedReader", "task_id": "RedReader/37"}
{"input": "<s> public void setBaseActivityOverlay ( @ NonNull final View view ) {", "gt": "mContentOverlay . removeAllViews ( ) ;", "repo": "RedReader", "task_id": "RedReader/38"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; setOrientationFromPrefs ( ) ;", "gt": "closeIfNecessary ( ) ;", "repo": "RedReader", "task_id": "RedReader/39"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "RedReader", "task_id": "RedReader/40"}
{"input": "<s> private void closeIfNecessary ( ) { if ( closingAll ) { if ( this instanceof MainActivity ) { closingAll = false ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/41"}
{"input": "<s> public final void startActivityForResultWithCallback ( @ NonNull final Intent intent , @ NonNull final ActivityResultCallback callback ) { final int requestCode = mRequestIdGenerator . incrementAndGet ( ) ;", "gt": "mActivityResultCallbacks . put ( requestCode , callback ) ;", "repo": "RedReader", "task_id": "RedReader/42"}
{"input": "<s> @ Override protected final void onActivityResult ( final int requestCode , final int resultCode , @ Nullable final Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; final ActivityResultCallback callback = mActivityResultCallbacks . remove ( requestCode ) ;", "gt": "if ( callback = = null ) {", "repo": "RedReader", "task_id": "RedReader/43"}
{"input": "<s> private static synchronized LinkedList < RRError > getErrors ( ) { final LinkedList < RRError > result = new LinkedList < > ( errors ) ;", "gt": "errors . clear ( ) ;", "repo": "RedReader", "task_id": "RedReader/47"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( CommentEditActivity . this , error ) ;", "repo": "RedReader", "task_id": "RedReader/52"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/53"}
{"input": "<s> @ Override protected void doRefresh ( final RefreshableFragment which , final boolean force , final Bundle savedInstanceState ) { mFragment = controller . get ( this , force , savedInstanceState ) ; mFragment . setBaseActivityContent ( this ) ;", "gt": "setTitle ( controller . getCommentListingUrl ( ) . humanReadableName ( this , false ) ) ;", "repo": "RedReader", "task_id": "RedReader/55"}
{"input": "<s> @ Override public void onRefreshComments ( ) {", "gt": "controller . setSession ( null ) ;", "repo": "RedReader", "task_id": "RedReader/56"}
{"input": "<s> @ Override public void onSortSelected ( final PostCommentSort order ) {", "gt": "controller . setSort ( order ) ;", "repo": "RedReader", "task_id": "RedReader/58"}
{"input": "<s> @ Override public void onSortSelected ( final UserCommentSort order ) {", "gt": "controller . setSort ( order ) ;", "repo": "RedReader", "task_id": "RedReader/59"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( mFragment ! = null ) { if ( mFragment . onOptionsItemSelected ( item ) ) {", "gt": "return true ;", "repo": "RedReader", "task_id": "RedReader/61"}
{"input": "<s> @ Override public void onSessionSelected ( final UUID session , final SessionChangeType type ) {", "gt": "controller . setSession ( session ) ;", "repo": "RedReader", "task_id": "RedReader/62"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/64"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( CommentReplyActivity . this , error ) ;", "repo": "RedReader", "task_id": "RedReader/69"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/71"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) & & ! webView . onBackButtonPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/72"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_image_info_failed ) ;", "repo": "RedReader", "task_id": "RedReader/74"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ;", "repo": "RedReader", "task_id": "RedReader/77"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/79"}
{"input": "<s> private void openInExternalBrowser ( ) { Log . i ( TAG , \" <STR_LIT> \" ) ; final Runnable r = ( ) - > { LinkHandler . openWebBrowser ( this , Uri . parse ( mUrl ) , false ) ; finish ( ) ; } ; if ( General . isThisUIThread ( ) ) {", "gt": "r . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/81"}
{"input": "<s> @ Override public void onPause ( ) { if ( mIsPaused ) { throw new RuntimeException ( ) ; } mIsPaused = true ;", "gt": "super . onPause ( ) ;", "repo": "RedReader", "task_id": "RedReader/82"}
{"input": "<s> @ Override public void onResume ( ) { if ( ! mIsPaused ) { throw new RuntimeException ( ) ; } mIsPaused = false ; super . onResume ( ) ; if ( surfaceView ! = null ) { surfaceView . onResume ( ) ; }", "gt": "for ( final Runnable runnable : mActionsOnResume ) {", "repo": "RedReader", "task_id": "RedReader/83"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ; mIsDestroyed = true ; cancelCacheRequests ( ) ; if ( gifThread ! = null ) { gifThread . stopPlaying ( ) ; }", "gt": "if ( mVideoPlayerWrapper ! = null ) {", "repo": "RedReader", "task_id": "RedReader/84"}
{"input": "<s> @ Override public void onHorizontalSwipeEnd ( ) { mSwipeCancelled = false ; if ( mSwipeOverlay ! = null ) {", "gt": "mSwipeOverlay . onSwipeEnd ( ) ;", "repo": "RedReader", "task_id": "RedReader/86"}
{"input": "<s> @ Override public void onImageViewDLMOutOfMemory ( ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_oom ) ;", "gt": "revertToWeb ( ) ;", "repo": "RedReader", "task_id": "RedReader/87"}
{"input": "<s> @ Override public void onImageViewDLMException ( final Throwable t ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_decode_failed ) ;", "gt": "revertToWeb ( ) ;", "repo": "RedReader", "task_id": "RedReader/88"}
{"input": "<s> @ Override public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mImageViewDisplayerManager ! = null ) {", "gt": "mImageViewDisplayerManager . resetTouchState ( ) ;", "repo": "RedReader", "task_id": "RedReader/89"}
{"input": "<s> @ Override public void onDataStreamAvailable ( @ NonNull final GenericFactory < SeekableInputStream , IOException > streamFactory , final TimestampUTC timestamp , @ NonNull final UUID session , final boolean fromCache , @ Nullable final String mimetype ) { synchronized ( resultLock ) { if ( audio . get ( ) ! = null | | audioUri = = null ) { onImageStreamReady ( ! fromCache , streamFactory , audio . get ( ) , mimetype , Uri . parse ( uri . toString ( ) ) ) ; } else {", "gt": "video . set ( streamFactory ) ;", "repo": "RedReader", "task_id": "RedReader/93"}
{"input": "<s> @ Override public void onDataStreamAvailable ( @ NonNull final GenericFactory < SeekableInputStream , IOException > streamFactory , final TimestampUTC timestamp , @ NonNull final UUID session , final boolean fromCache , @ Nullable final String mimetype ) { synchronized ( resultLock ) { if ( video . get ( ) ! = null ) { onImageStreamReady ( ! fromCache , video . get ( ) , streamFactory , videoMimetype . get ( ) , Uri . parse ( uri . toString ( ) ) ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/95"}
{"input": "<s> @ Override public void onOutOfMemory ( ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_oom ) ;", "repo": "RedReader", "task_id": "RedReader/98"}
{"input": "<s> @ Override public void onGifInvalid ( ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_invalid_gif ) ;", "repo": "RedReader", "task_id": "RedReader/99"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/101"}
{"input": "<s> public void cancel ( ) { if ( request ! = null ) {", "gt": "request . cancel ( ) ;", "repo": "RedReader", "task_id": "RedReader/103"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/105"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) { if ( inboxType = = InboxType . SENT ) { return false ; } menu . add ( 0 , OPTIONS_MENU_MARK_ALL_AS_READ , 0 , R . string . mark_all_as_read ) ; menu . add ( 0 , OPTIONS_MENU_SHOW_UNREAD_ONLY , 1 , R . string . inbox_unread_only ) ; menu . getItem ( 1 ) . setCheckable ( true ) ;", "gt": "if ( mOnlyShowUnread ) {", "repo": "RedReader", "task_id": "RedReader/106"}
{"input": "<s> private void recreateSubscriptionListener ( ) { final RedditSubredditSubscriptionManager . ListenerContext oldContext = mSubredditSubscriptionListenerContext . getAndSet ( RedditSubredditSubscriptionManager . getSingleton ( this , RedditAccountManager . getInstance ( this ) . getDefaultAccount ( ) ) . addListener ( this ) ) ; if ( oldContext ! = null ) {", "gt": "oldContext . removeListener ( ) ;", "repo": "RedReader", "task_id": "RedReader/107"}
{"input": "<s> @ Override public void onItemSelected ( @ Nullable final AdapterView < ? > adapterView , @ Nullable final View view , final int i , final long l ) { final String typeName = typeReturnValues [ destinationType . getSelectedItemPosition ( ) ] ; if ( \" <STR_LIT> \" . equals ( typeName ) ) {", "gt": "editText . setAdapter ( autocompleteAdapter ) ;", "repo": "RedReader", "task_id": "RedReader/109"}
{"input": "<s> @ Override public void onRedditAccountChanged ( ) { recreateSubscriptionListener ( ) ;", "gt": "postInvalidateOptionsMenu ( ) ;", "repo": "RedReader", "task_id": "RedReader/111"}
{"input": "<s> @ Override public void onRefreshComments ( ) {", "gt": "commentListingController . setSession ( null ) ;", "repo": "RedReader", "task_id": "RedReader/113"}
{"input": "<s> @ Override public void onSortSelected ( final PostCommentSort order ) {", "gt": "commentListingController . setSort ( order ) ;", "repo": "RedReader", "task_id": "RedReader/115"}
{"input": "<s> @ Override public void onSortSelected ( final UserCommentSort order ) {", "gt": "commentListingController . setSort ( order ) ;", "repo": "RedReader", "task_id": "RedReader/116"}
{"input": "<s> @ Override public void onRefreshPosts ( ) {", "gt": "postListingController . setSession ( null ) ;", "repo": "RedReader", "task_id": "RedReader/118"}
{"input": "<s> @ Override public void onSortSelected ( final PostSort order ) {", "gt": "postListingController . setSort ( order ) ;", "repo": "RedReader", "task_id": "RedReader/121"}
{"input": "<s> @ Override public void onSubscribe ( ) { if ( postListingFragment ! = null ) {", "gt": "postListingFragment . onSubscribe ( ) ;", "repo": "RedReader", "task_id": "RedReader/122"}
{"input": "<s> @ Override public void onUnsubscribe ( ) { if ( postListingFragment ! = null ) {", "gt": "postListingFragment . onUnsubscribe ( ) ;", "repo": "RedReader", "task_id": "RedReader/123"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; if ( mainMenuFragment ! = null ) {", "gt": "mainMenuFragment . onUpdateAnnouncement ( ) ;", "repo": "RedReader", "task_id": "RedReader/128"}
{"input": "<s> @ Override protected void doRefresh ( final RefreshableFragment which , final boolean force , final Bundle savedInstanceState ) { mFragment = new CommentListingFragment ( this , savedInstanceState , mUrls , null , mSearchString , force ) ;", "gt": "mFragment . setBaseActivityContent ( this ) ;", "repo": "RedReader", "task_id": "RedReader/137"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/140"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "final CookieManager cookieManager = CookieManager . getInstance ( ) ;", "repo": "RedReader", "task_id": "RedReader/141"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( PMSendActivity . this , error ) ;", "repo": "RedReader", "task_id": "RedReader/153"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/155"}
{"input": "<s> private void recreateSubscriptionListener ( ) { final RedditSubredditSubscriptionManager . ListenerContext oldContext = mSubredditSubscriptionListenerContext . getAndSet ( RedditSubredditSubscriptionManager . getSingleton ( this , RedditAccountManager . getInstance ( this ) . getDefaultAccount ( ) ) . addListener ( this ) ) ; if ( oldContext ! = null ) {", "gt": "oldContext . removeListener ( ) ;", "repo": "RedReader", "task_id": "RedReader/158"}
{"input": "<s> @ Override public void onRedditAccountChanged ( ) { recreateSubscriptionListener ( ) ;", "gt": "postInvalidateOptionsMenu ( ) ;", "repo": "RedReader", "task_id": "RedReader/159"}
{"input": "<s> @ Override public void onRefreshPosts ( ) {", "gt": "controller . setSession ( null ) ;", "repo": "RedReader", "task_id": "RedReader/161"}
{"input": "<s> @ Override public void onSortSelected ( final PostSort order ) { controller . setSort ( order ) ;", "gt": "requestRefresh ( RefreshableFragment . POSTS , false ) ;", "repo": "RedReader", "task_id": "RedReader/164"}
{"input": "<s> @ Override public void onSessionSelected ( final UUID session , final SessionChangeType type ) {", "gt": "controller . setSession ( session ) ;", "repo": "RedReader", "task_id": "RedReader/168"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/170"}
{"input": "<s> @ Override public void onNotLoggedIn ( ) {", "gt": "General . quickToast ( this , R . string . error_toast_notloggedin ) ;", "repo": "RedReader", "task_id": "RedReader/171"}
{"input": "<s> @ Override public void onContentFragmentFlairRequestError ( @ NonNull final RRError error ) {", "gt": "onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/175"}
{"input": "<s> @ Override protected void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "RedReader", "task_id": "RedReader/177"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; paused = false ; if ( ! refreshOnResume . isEmpty ( ) ) { for ( final RefreshableFragment f : refreshOnResume ) {", "gt": "doRefreshNow ( f , false ) ;", "repo": "RedReader", "task_id": "RedReader/178"}
{"input": "<s> @ Override public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) {", "gt": "invalidateOptionsMenu ( ) ;", "repo": "RedReader", "task_id": "RedReader/179"}
{"input": "<s> protected void doRefreshNow ( final RefreshableFragment which , final boolean force ) { if ( which = = RefreshableFragment . RESTART ) {", "gt": "General . recreateActivityNoAnimation ( this ) ;", "repo": "RedReader", "task_id": "RedReader/180"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final SubredditSearchQuickLinks quickLinks = ( SubredditSearchQuickLinks ) LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . subreddit_search_quick_links , viewGroup , false ) ; quickLinks . bind ( SubredditSearchActivity . this , queryEventListeners ) ;", "gt": "return new RecyclerView . ViewHolder ( quickLinks ) {", "repo": "RedReader", "task_id": "RedReader/182"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( final String query ) { handleQueryChanged ( query ) ; queryEventListeners . send ( query ) ;", "gt": "searchView . clearFocus ( ) ;", "repo": "RedReader", "task_id": "RedReader/183"}
{"input": "<s> @ Override public boolean onQueryTextChange ( final String newText ) { handleQueryChanged ( newText ) ;", "gt": "queryEventListeners . send ( newText ) ;", "repo": "RedReader", "task_id": "RedReader/184"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) & & ! webView . onBackButtonPressed ( ) ) {", "gt": "super . onBackPressed ( ) ;", "repo": "RedReader", "task_id": "RedReader/189"}
{"input": "<s> private fun launchLogin ( ) {", "gt": "val loginIntent = Intent ( context , OAuthLoginActivity : : class . java )", "repo": "RedReader", "task_id": "RedReader/194"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + imageInfo . urlBigSquare + \" <STR_LIT> \" + error , error . t ) ;", "repo": "RedReader", "task_id": "RedReader/196"}
{"input": "<s> public void addComments ( final Collection < RedditCommentListItem > comments ) { final Collection < GroupedRecyclerViewAdapter . Item < ? > > filteredComments = filter ( comments ) ;", "gt": "addItems ( filteredComments ) ;", "repo": "RedReader", "task_id": "RedReader/198"}
{"input": "<s> private int getItemPositionInternal ( final int groupId , final Item < ? > item ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = 0 ; i < group . size ( ) ; i + + ) { if ( group . get ( i ) = = item ) {", "gt": "return getItemPositionInternal ( groupId , i ) ;", "repo": "RedReader", "task_id": "RedReader/200"}
{"input": "<s> @ Override public int getItemViewType ( final int position ) { final Item < ? > item = getItemInternal ( position ) ; final Class < ? > viewTypeClass = item . getViewType ( ) ; Integer typeId = mItemViewTypeMap . get ( viewTypeClass ) ; if ( typeId = = null ) { typeId = mItemViewTypeMap . size ( ) ;", "gt": "mItemViewTypeMap . put ( viewTypeClass , typeId ) ;", "repo": "RedReader", "task_id": "RedReader/202"}
{"input": "<s> public void appendToGroup ( final int group , final Item < ? > item ) { final int position = getItemPositionInternal ( group + 1 , 0 ) ;", "gt": "mItems [ group ] . add ( item ) ;", "repo": "RedReader", "task_id": "RedReader/205"}
{"input": "<s> public void removeAllFromGroup ( final int groupId ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = group . size ( ) - 1 ; i > = 0 ; i - - ) { final Item < ? > item = group . get ( i ) ; final int position = getItemPositionInternal ( groupId , i ) ; group . remove ( i ) ;", "gt": "if ( ! item . mCurrentlyHidden ) {", "repo": "RedReader", "task_id": "RedReader/207"}
{"input": "<s> public void removeFromGroup ( final int groupId , final Item < ? > item ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = 0 ; i < group . size ( ) ; i + + ) { if ( group . get ( i ) = = item ) { final int position = getItemPositionInternal ( groupId , i ) ; group . remove ( i ) ; if ( ! item . mCurrentlyHidden ) { notifyItemRemoved ( position ) ; }", "gt": "return ;", "repo": "RedReader", "task_id": "RedReader/208"}
{"input": "<s> public void notifyItemChanged ( final int groupId , final Item < ? > item ) {", "gt": "final int position = getItemPositionInternal ( groupId , item ) ;", "repo": "RedReader", "task_id": "RedReader/209"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { General . setLayoutMatchWidthWrapHeight ( viewGroup ) ; final FrameLayout frameLayout = new FrameLayout ( viewGroup . getContext ( ) ) ;", "gt": "return new RecyclerView . ViewHolder ( frameLayout ) {", "repo": "RedReader", "task_id": "RedReader/210"}
{"input": "<s> public void bind ( @ NonNull final RRError error ) { final FrameLayout itemView = ( FrameLayout ) this . itemView ;", "gt": "itemView . removeAllViews ( ) ;", "repo": "RedReader", "task_id": "RedReader/212"}
{"input": "<s> private void hideMultiredditsHeader ( ) { General . checkThisIsUIThread ( ) ;", "gt": "mMultiredditHeaderItem = null ;", "repo": "RedReader", "task_id": "RedReader/217"}
{"input": "<s> public void addPosts ( final Collection < RedditPostListItem > posts ) {", "gt": "addItems ( Collections . unmodifiableCollection ( posts ) ) ;", "repo": "RedReader", "task_id": "RedReader/224"}
{"input": "<s> public void setLayoutManager ( final LinearLayoutManager layoutManager ) {", "gt": "General . checkThisIsUIThread ( ) ;", "repo": "RedReader", "task_id": "RedReader/225"}
{"input": "<s> private void doWorkaround ( ) { if ( ! mWorkaroundDone & & mLayoutManager ! = null ) { mLayoutManager . scrollToPositionWithOffset ( 0 , 0 ) ;", "gt": "mWorkaroundDone = true ;", "repo": "RedReader", "task_id": "RedReader/226"}
{"input": "<s> public void addPostHeader ( final RedditPostHeaderView view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_HEADER , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/228"}
{"input": "<s> public void addPostListingHeader ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_HEADER , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/229"}
{"input": "<s> public void addPostSelfText ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_POST_SELFTEXT , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/230"}
{"input": "<s> public void addNotification ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_NOTIFICATIONS , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/231"}
{"input": "<s> public void addItems ( final Collection < GroupedRecyclerViewAdapter . Item < ? > > items ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_ITEMS , items ) ;", "repo": "RedReader", "task_id": "RedReader/232"}
{"input": "<s> public void addViewToItems ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_ITEMS , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/233"}
{"input": "<s> public void addLoadMoreButton ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_LOAD_MORE_BUTTON , new GroupedRecyclerViewItemFrameLayout ( view ) ) ;", "repo": "RedReader", "task_id": "RedReader/234"}
{"input": "<s> public void removeLoadMoreButton ( ) {", "gt": "General . checkThisIsUIThread ( ) ;", "repo": "RedReader", "task_id": "RedReader/235"}
{"input": "<s> public void setLoadingVisible ( final boolean visible ) { General . checkThisIsUIThread ( ) ;", "gt": "mLoadingItem . setHidden ( ! visible ) ;", "repo": "RedReader", "task_id": "RedReader/236"}
{"input": "<s> public GroupedRecyclerViewAdapter getAdapter ( ) {", "gt": "General . checkThisIsUIThread ( ) ;", "repo": "RedReader", "task_id": "RedReader/237"}
{"input": "<s> public void updateHiddenStatus ( ) {", "gt": "General . checkThisIsUIThread ( ) ;", "repo": "RedReader", "task_id": "RedReader/238"}
{"input": "<s> @ NonNull public static CacheCompressionType fromDatabaseId ( final int databaseId ) { for ( final CacheCompressionType type : values ( ) ) { if ( type . databaseId = = databaseId ) {", "gt": "return type ;", "repo": "RedReader", "task_id": "RedReader/242"}
{"input": "<s> @ Override public boolean onCreate ( ) {", "gt": "mCacheManager = CacheManager . getInstance ( getContext ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/246"}
{"input": "<s> synchronized Optional < CacheEntry > selectById ( final long id ) { final SQLiteDatabase db = getReadableDatabase ( ) ; try ( Cursor cursor = db . query ( TABLE , CacheEntry . DB_FIELDS , String . format ( Locale . US , \" <STR_LIT> \" , FIELD_ID ) , new String [ ] { String . valueOf ( id ) } , null , null , FIELD_TIMESTAMP + \" <STR_LIT> \" ) ) { final List < CacheEntry > entries = readEntriesFromCursor ( cursor ) ; if ( entries . isEmpty ( ) ) { return Optional . empty ( ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/250"}
{"input": "<s> synchronized void setEntryDone ( final long id ) { final SQLiteDatabase db = this . getWritableDatabase ( ) ; final ContentValues row = new ContentValues ( ) ;", "gt": "row . put ( FIELD_STATUS , STATUS_DONE ) ;", "repo": "RedReader", "task_id": "RedReader/252"}
{"input": "<s> public synchronized HashMap < Long , Integer > getFilesToSize ( ) { final SQLiteDatabase db = this . getWritableDatabase ( ) ; final Cursor cursor = db . query ( TABLE , new String [ ] { FIELD_ID , FIELD_TYPE } , null , null , null , null , null , null ) ; final HashMap < Long , Integer > filesToCheck = new HashMap < > ( <NUM_LIT:32> ) ; while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( 0 ) ; final int type = cursor . getInt ( 1 ) ;", "gt": "filesToCheck . put ( id , type ) ;", "repo": "RedReader", "task_id": "RedReader/255"}
{"input": "<s> @ Override public void run ( ) {", "gt": "android . os . Process . setThreadPriority ( android . os . Process . THREAD_PRIORITY_BACKGROUND ) ;", "repo": "RedReader", "task_id": "RedReader/260"}
{"input": "<s> private void getCacheFileList ( final File dir , final HashSet < Long > currentFiles ) { final File [ ] list = dir . listFiles ( ) ; if ( list = = null ) { return ; } for ( final File file : list ) { if ( file . isDirectory ( ) ) { getCacheFileList ( file , currentFiles ) ; } else { final Long cacheFileId = isCacheFile ( file ) ; if ( cacheFileId ! = null ) {", "gt": "currentFiles . add ( cacheFileId ) ;", "repo": "RedReader", "task_id": "RedReader/263"}
{"input": "<s> private static void pruneTemp ( final File dir ) { final String [ ] list = dir . list ( ) ; if ( list = = null ) { return ; } for ( final String file : list ) {", "gt": "if ( file . endsWith ( tempExt ) ) {", "repo": "RedReader", "task_id": "RedReader/264"}
{"input": "<s> @ NonNull public static ArrayList < File > getCacheDirs ( final Context context ) { final ArrayList < File > dirs = new ArrayList < > ( ) ; dirs . add ( context . getCacheDir ( ) ) ; if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . KITKAT ) { for ( final File dir : context . getExternalCacheDirs ( ) ) { if ( dir ! = null ) { dirs . add ( dir ) ; } } } else { final File extDir = context . getExternalCacheDir ( ) ; if ( extDir ! = null ) {", "gt": "dirs . add ( extDir ) ;", "repo": "RedReader", "task_id": "RedReader/265"}
{"input": "<s> public void pruneTemp ( ) { final List < File > dirs = getCacheDirs ( context ) ; for ( final File dir : dirs ) {", "gt": "pruneTemp ( dir ) ;", "repo": "RedReader", "task_id": "RedReader/266"}
{"input": "<s> public File writeExternally ( ) throws IOException { mWriteExternally = true ;", "gt": "mOutStream . close ( ) ;", "repo": "RedReader", "task_id": "RedReader/267"}
{"input": "<s> @ NonNull public Optional < String > lookupMimetype ( ) { final Optional < CacheEntry > result = dbManager . selectById ( mId ) ; if ( result . isPresent ( ) ) {", "gt": "return Optional . of ( result . get ( ) . mimetype ) ;", "repo": "RedReader", "task_id": "RedReader/271"}
{"input": "<s> @ Nullable private File getExistingCacheFile ( final long id ) { final List < File > dirs = getCacheDirs ( context ) ; for ( final File dir : dirs ) { final File f = new File ( getSubdirForCacheFile ( dir , id ) , id + ext ) ; if ( f . exists ( ) ) { return f ; } } for ( final File dir : dirs ) { final File f = new File ( dir , id + ext ) ; if ( f . exists ( ) ) {", "gt": "return f ;", "repo": "RedReader", "task_id": "RedReader/272"}
{"input": "<s> private CacheEntry mostRecentFromList ( final List < CacheEntry > list ) { CacheEntry entry = null ; for ( final CacheEntry e : list ) { if ( entry = = null | | entry . timestamp . isLessThan ( e . timestamp ) ) {", "gt": "entry = e ;", "repo": "RedReader", "task_id": "RedReader/275"}
{"input": "<s> synchronized boolean setDownload ( final CacheDownload download ) { if ( cancelled ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/277"}
{"input": "<s> private void onCallbackException ( @ NonNull final Throwable t ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" , t ) ;", "repo": "RedReader", "task_id": "RedReader/279"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( ! mNotifiedFailure . getAndSet ( true ) ) {", "gt": "mListener . onFailure ( error ) ;", "repo": "RedReader", "task_id": "RedReader/283"}
{"input": "<s> @ Override public void close ( ) throws IOException {", "gt": "super . close ( ) ;", "repo": "RedReader", "task_id": "RedReader/286"}
{"input": "<s> @ Override public void run ( ) { while ( true ) { synchronized ( this ) { final CacheDownload download = getNextRedditInQueue ( ) ; new CacheDownloadThread ( download , true , \" <STR_LIT> \" ) ; } try { sleep ( <NUM_LIT> ) ;", "gt": "} catch ( final InterruptedException e ) {", "repo": "RedReader", "task_id": "RedReader/288"}
{"input": "<s> public static void onBoot ( final Context context ) { for ( final Alarm alarm : Alarm . values ( ) ) {", "gt": "if ( alarm . startOnBoot ( ) ) {", "repo": "RedReader", "task_id": "RedReader/290"}
{"input": "<s> @ JvmStatic fun setAutoCompleteTextViewItemsNoFilter ( view : MaterialAutoCompleteTextView , items : List < String > ) {", "gt": "view . setSimpleItems ( items . toTypedArray ( ) )", "repo": "RedReader", "task_id": "RedReader/294"}
{"input": "<s> @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ;", "repo": "RedReader", "task_id": "RedReader/298"}
{"input": "<s> public synchronized void remove ( final K key , final V value ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . remove ( value ) ;", "repo": "RedReader", "task_id": "RedReader/303"}
{"input": "<s> public synchronized void map ( final K key , final WeakReferenceListManager . Operator < V > operator ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . map ( operator ) ;", "repo": "RedReader", "task_id": "RedReader/304"}
{"input": "<s> public synchronized < A > void map ( final K key , final WeakReferenceListManager . ArgOperator < V , A > operator , final A arg ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . map ( operator , arg ) ;", "repo": "RedReader", "task_id": "RedReader/305"}
{"input": "<s> public synchronized void clean ( ) { final Iterator < Map . Entry < K , WeakReferenceListManager < V > > > iterator = mData . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { final Map . Entry < K , WeakReferenceListManager < V > > entry = iterator . next ( ) ; final WeakReferenceListManager < V > list = entry . getValue ( ) ; list . clean ( ) ;", "gt": "if ( list . isEmpty ( ) ) {", "repo": "RedReader", "task_id": "RedReader/306"}
{"input": "<s> public synchronized void map ( final Operator < E > operator ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) { final E object = iterator . next ( ) . get ( ) ; if ( object = = null ) { iterator . remove ( ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/307"}
{"input": "<s> public synchronized < A > void map ( final ArgOperator < E , A > operator , final A arg ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) { final E object = iterator . next ( ) . get ( ) ; if ( object = = null ) { iterator . remove ( ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/308"}
{"input": "<s> private void ensureCapacity ( final int desiredCapacity ) { if ( desiredCapacity < = mData . length ) { return ; } if ( desiredCapacity > ( mData . length * <NUM_LIT:2> ) ) {", "gt": "realloc ( desiredCapacity + ( desiredCapacity / <NUM_LIT:2> ) ) ;", "repo": "RedReader", "task_id": "RedReader/313"}
{"input": "<s> public int size ( ) { synchronized ( mLock ) {", "gt": "return mSize ;", "repo": "RedReader", "task_id": "RedReader/315"}
{"input": "<s> public void writeBytes ( @ NonNull final byte [ ] data , final int offset , final int length ) { synchronized ( mLock ) { ensureCapacity ( mSize + length ) ;", "gt": "System . arraycopy ( data , offset , mData , mSize , length ) ;", "repo": "RedReader", "task_id": "RedReader/316"}
{"input": "<s> public void setComplete ( ) { synchronized ( mLock ) { mComplete = true ;", "gt": "mLock . notifyAll ( ) ;", "repo": "RedReader", "task_id": "RedReader/317"}
{"input": "<s> public void setFailed ( @ NonNull final IOException e ) { synchronized ( mLock ) { mFailed = e ;", "gt": "mLock . notifyAll ( ) ;", "repo": "RedReader", "task_id": "RedReader/318"}
{"input": "<s> public void getUnderlyingByteArrayWhenComplete ( @ NonNull final ByteArrayCallback callback ) throws IOException { synchronized ( mLock ) { while ( ! mComplete & & mFailed = = null ) { try { mLock . wait ( ) ; } catch ( final InterruptedException e ) { throw new RuntimeException ( e ) ; } } if ( mFailed ! = null ) {", "gt": "throw mFailed ;", "repo": "RedReader", "task_id": "RedReader/319"}
{"input": "<s> @ Override public long skip ( final long offset ) { final int bytesToSkip = ( int ) Math . min ( offset , Math . max ( 0 , mStream . size ( ) - mPosition ) ) ;", "gt": "mPosition + = bytesToSkip ;", "repo": "RedReader", "task_id": "RedReader/323"}
{"input": "<s> @ Override public void seek ( final long position ) throws IOException {", "gt": "mFile . seek ( position ) ;", "repo": "RedReader", "task_id": "RedReader/324"}
{"input": "<s> @ Override public void readRemainingAsBytes ( @ NonNull final ByteArrayCallback callback ) throws IOException {", "gt": "final byte [ ] result = General . readWholeStream ( this ) ;", "repo": "RedReader", "task_id": "RedReader/325"}
{"input": "<s> @ Override public int read ( final byte [ ] buf , final int off , final int len ) throws IOException { if ( len = = 0 ) { throw new IOException ( \" <STR_LIT> \" ) ; } final int result = mFile . read ( buf , off , len ) ;", "gt": "if ( result > 0 ) {", "repo": "RedReader", "task_id": "RedReader/327"}
{"input": "<s> @ Override public long skip ( final long n ) throws IOException { final long bytesToSkip = Math . min ( n , available ( ) ) ;", "gt": "seek ( ( int ) ( mPosition + bytesToSkip ) ) ;", "repo": "RedReader", "task_id": "RedReader/328"}
{"input": "<s> private static void performSearch ( final EditText editText , final OnSearchListener listener ) { final String query = editText . getText ( ) . toString ( ) . trim ( ) ; if ( StringUtils . isEmpty ( query ) ) {", "gt": "listener . onSearch ( null ) ;", "repo": "RedReader", "task_id": "RedReader/329"}
{"input": "<s> public void send ( final E event ) { mMostRecentEvent = event ; for ( final Listener < E > listener : mListeners . get ( ) ) {", "gt": "listener . onEvent ( event ) ;", "repo": "RedReader", "task_id": "RedReader/334"}
{"input": "<s> public E register ( final Listener < E > listener ) {", "gt": "mListeners . get ( ) . add ( listener ) ;", "repo": "RedReader", "task_id": "RedReader/335"}
{"input": "<s> public static void handleFirstInstall ( @ NonNull final SharedPrefsWrapper sharedPrefs ) { for ( final FeatureFlag flag : FeatureFlag . values ( ) ) {", "gt": "setFeatureFlag ( sharedPrefs , flag ) ;", "repo": "RedReader", "task_id": "RedReader/337"}
{"input": "<s> public static void copyFile ( final File src , final File dst ) throws IOException { try ( FileInputStream fis = new FileInputStream ( src ) ) {", "gt": "copyFile ( fis , dst ) ;", "repo": "RedReader", "task_id": "RedReader/340"}
{"input": "<s> public static void copyFile ( final InputStream fis , final File dst ) throws IOException { try ( FileOutputStream fos = new FileOutputStream ( dst ) ) { General . copyStream ( fis , fos ) ;", "gt": "fos . flush ( ) ;", "repo": "RedReader", "task_id": "RedReader/341"}
{"input": "<s> @ Override public void writeTo ( @ NonNull final OutputStream outputStream ) throws IOException { try ( InputStream inputStream = mCacheFile . getInputStream ( ) ) { General . copyStream ( inputStream , outputStream ) ;", "gt": "outputStream . flush ( ) ;", "repo": "RedReader", "task_id": "RedReader/344"}
{"input": "<s> @ NonNull public static File buildPath ( @ NonNull final File base , @ NonNull final String . . . components ) { File result = base ;", "gt": "for ( final String component : components ) {", "repo": "RedReader", "task_id": "RedReader/347"}
{"input": "<s> @ NonNull public static Typeface getVeraMonoOrAlternative ( ) { final Typeface result = sVeraMono . get ( ) ; if ( result = = null ) {", "gt": "return Typeface . MONOSPACE ;", "repo": "RedReader", "task_id": "RedReader/349"}
{"input": "<s> @ NonNull public static Typeface getRobotoLightOrAlternative ( ) { final Typeface result = sRobotoLight . get ( ) ; if ( result = = null ) {", "gt": "return Typeface . DEFAULT ;", "repo": "RedReader", "task_id": "RedReader/350"}
{"input": "<s> @ JvmStatic fun onBackPressed ( ) : Boolean { if ( lastBackPress < SystemClock . uptimeMillis ( ) - <NUM_LIT> ) {", "gt": "lastBackPress = SystemClock . uptimeMillis ( )", "repo": "RedReader", "task_id": "RedReader/351"}
{"input": "<s> @ JvmStatic fun filenameFromString ( url : String ? ) : String { val uri = uriFromString ( url ) var filename = uri ! ! . path . replace ( File . separator , \" \" ) val parts = filename . substring ( 1 ) . split ( \" <STR_LIT:\\\\> <STR_LIT:.> \" . toRegex ( ) , limit = <NUM_LIT:2> ) . toTypedArray ( ) if ( parts . size < <NUM_LIT:2> ) { filename + = if ( \" <STR_LIT> \" = = uri . host ) { \" <STR_LIT> \" } else {", "gt": "\" <STR_LIT> \"", "repo": "RedReader", "task_id": "RedReader/362"}
{"input": "<s> fun toHex ( bytes : ByteArray ) : String { val result = StringBuilder ( bytes . size * <NUM_LIT:2> )", "gt": "for ( b in bytes ) {", "repo": "RedReader", "task_id": "RedReader/363"}
{"input": "<s> @ JvmStatic @ SafeVarargs fun < E > hashsetFromArray ( vararg data : E ) : Set < E > { val result = HashSet < E > ( data . size )", "gt": "Collections . addAll ( result , * data )", "repo": "RedReader", "task_id": "RedReader/383"}
{"input": "<s> @ JvmStatic @ SafeVarargs fun < E > listFromArray ( vararg data : E ) : ArrayList < E > { val result = ArrayList < E > ( data . size )", "gt": "Collections . addAll ( result , * data )", "repo": "RedReader", "task_id": "RedReader/384"}
{"input": "<s> @ NonNull public Out get ( @ NonNull final In in ) { final String uniqueId = in . getUniqueId ( ) ; Out result = mThisGen . get ( uniqueId ) ; if ( result ! = null ) { return result ; } result = mPreviousGen . get ( uniqueId ) ; if ( result = = null ) { result = mCreator . apply ( in ) ;", "gt": "mThisGen . put ( uniqueId , result ) ;", "repo": "RedReader", "task_id": "RedReader/387"}
{"input": "<s> public void nextGeneration ( ) {", "gt": "mPreviousGen = mThisGen ;", "repo": "RedReader", "task_id": "RedReader/388"}
{"input": "<s> override fun uncaughtException ( t : Thread , e : Throwable ) { Log . e ( TAG , \" <STR_LIT> \" , e ) try { PrintWriter ( FileWriter ( mFile , true ) ) . use { writer - > writer . println ( \" <STR_LIT> \" ) e . printStackTrace ( writer ) writer . println ( \" <STR_LIT> \" ) writer . flush ( ) } } catch ( e2 : Exception ) { Log . e ( TAG , \" <STR_LIT> \" , e2 ) }", "gt": "if ( mNextHandler ! = null ) {", "repo": "RedReader", "task_id": "RedReader/389"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/398"}
{"input": "<s> public void reset ( ) {", "gt": "x = 0 ;", "repo": "RedReader", "task_id": "RedReader/401"}
{"input": "<s> public void set ( final MotionEvent event , final int pointerIndex ) {", "gt": "x = event . getX ( pointerIndex ) ;", "repo": "RedReader", "task_id": "RedReader/402"}
{"input": "<s> public void set ( final MutableFloatPoint2D other ) {", "gt": "x = other . x ;", "repo": "RedReader", "task_id": "RedReader/403"}
{"input": "<s> public void set ( final float x , final float y ) {", "gt": "this . x = x ;", "repo": "RedReader", "task_id": "RedReader/404"}
{"input": "<s> public void add ( final MutableFloatPoint2D rhs , final MutableFloatPoint2D result ) {", "gt": "result . x = x + rhs . x ;", "repo": "RedReader", "task_id": "RedReader/405"}
{"input": "<s> public void sub ( final MutableFloatPoint2D rhs , final MutableFloatPoint2D result ) {", "gt": "result . x = x - rhs . x ;", "repo": "RedReader", "task_id": "RedReader/406"}
{"input": "<s> public void scale ( final double factor ) {", "gt": "x * = factor ;", "repo": "RedReader", "task_id": "RedReader/407"}
{"input": "<s> public double euclideanDistanceTo ( final MutableFloatPoint2D other ) { final float xDistance = x - other . x ;", "gt": "final float yDistance = y - other . y ;", "repo": "RedReader", "task_id": "RedReader/408"}
{"input": "<s> @ NonNull public E orElse ( @ NonNull final E alternative ) { if ( mValue = = null ) {", "gt": "return alternative ;", "repo": "RedReader", "task_id": "RedReader/412"}
{"input": "<s> @ NonNull public Optional < E > orElse ( @ NonNull final Optional < E > alternative ) { if ( mValue = = null ) {", "gt": "return alternative ;", "repo": "RedReader", "task_id": "RedReader/413"}
{"input": "<s> @ NonNull public < R > Optional < R > map ( @ NonNull final FunctionOneArgWithReturn < E , R > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ;", "repo": "RedReader", "task_id": "RedReader/415"}
{"input": "<s> @ NonNull public < R > Optional < R > flatMap ( @ NonNull final FunctionOneArgWithReturn < E , Optional < R > > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ;", "repo": "RedReader", "task_id": "RedReader/416"}
{"input": "<s> public void apply ( @ NonNull final FunctionOneArgNoReturn < E > function ) { if ( mValue ! = null ) {", "gt": "function . apply ( mValue ) ;", "repo": "RedReader", "task_id": "RedReader/417"}
{"input": "<s> @ NonNull public < R > Optional < R > filter ( @ NonNull final FunctionOneArgWithReturn < E , Optional < R > > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ;", "repo": "RedReader", "task_id": "RedReader/418"}
{"input": "<s> public void ifPresent ( @ NonNull final Consumer < E > consumer ) { if ( mValue ! = null ) {", "gt": "consumer . consume ( mValue ) ;", "repo": "RedReader", "task_id": "RedReader/419"}
{"input": "<s> @ Override public int hashCode ( ) { if ( mValue = = null ) {", "gt": "return <NUM_LIT> ;", "repo": "RedReader", "task_id": "RedReader/420"}
{"input": "<s> @ NonNull @ Override public String toString ( ) { if ( mValue = = null ) {", "gt": "return \" <STR_LIT> \" ;", "repo": "RedReader", "task_id": "RedReader/422"}
{"input": "<s> public static String readNullableString ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) {", "repo": "RedReader", "task_id": "RedReader/423"}
{"input": "<s> @ Nullable public static ImageInfo . MediaType readNullableImageInfoMediaType ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) {", "repo": "RedReader", "task_id": "RedReader/424"}
{"input": "<s> public static void writeNullableEnum ( final Parcel parcel , @ Nullable final Enum value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/425"}
{"input": "<s> public static Integer readNullableInt ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) {", "repo": "RedReader", "task_id": "RedReader/426"}
{"input": "<s> public static Long readNullableLong ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) {", "repo": "RedReader", "task_id": "RedReader/427"}
{"input": "<s> public static Boolean readNullableBoolean ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) {", "repo": "RedReader", "task_id": "RedReader/428"}
{"input": "<s> public static void writeNullableString ( final Parcel parcel , final String value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/429"}
{"input": "<s> public static void writeNullableLong ( final Parcel parcel , final Long value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/430"}
{"input": "<s> public static void writeNullableBoolean ( final Parcel parcel , final Boolean value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/431"}
{"input": "<s> public static void writeNullableBoolean ( @ NonNull final Parcel parcel , @ Nullable final Boolean value ) { if ( value = = null ) { parcel . writeInt ( 0 ) ; } else if ( value ) {", "gt": "parcel . writeInt ( 1 ) ;", "repo": "RedReader", "task_id": "RedReader/432"}
{"input": "<s> public static void writeNullableInt ( @ NonNull final Parcel parcel , @ Nullable final Integer value ) { if ( value = = null ) { parcel . writeInt ( 0 ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/434"}
{"input": "<s> @ Nullable public static Integer readNullableInt ( @ NonNull final Parcel parcel ) { final int present = parcel . readInt ( ) ; if ( present = = 1 ) {", "gt": "return parcel . readInt ( ) ;", "repo": "RedReader", "task_id": "RedReader/435"}
{"input": "<s> public static void writeNullableLong ( @ NonNull final Parcel parcel , @ Nullable final Long value ) { if ( value = = null ) { parcel . writeLong ( 0 ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/436"}
{"input": "<s> @ Nullable public static Long readNullableLong ( @ NonNull final Parcel parcel ) { final long present = parcel . readLong ( ) ; if ( present = = 1 ) {", "gt": "return parcel . readLong ( ) ;", "repo": "RedReader", "task_id": "RedReader/437"}
{"input": "<s> public static void init ( final Context context ) { ConfigProviders . register ( ( ) - > \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" ) ; sharedPrefs = General . getSharedPrefs ( context ) ;", "gt": "mRes = Objects . requireNonNull ( context . getResources ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/444"}
{"input": "<s> public static void applySettingsTheme ( @ NonNull final Activity activity ) {", "gt": "activity . setTheme ( R . style . RR_Settings ) ;", "repo": "RedReader", "task_id": "RedReader/446"}
{"input": "<s> private static void setLocaleOnConfiguration ( @ NonNull final android . content . res . Configuration conf , @ NonNull final Locale locale ) { Locale . setDefault ( locale ) ; if ( Build . VERSION . SDK_INT > = <NUM_LIT> ) { conf . setLocale ( locale ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/447"}
{"input": "<s> public static NeverAlwaysOrWifiOnly appearance_thumbnails_show_old ( ) { if ( ! getBoolean ( R . string . pref_appearance_thumbnails_show_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_appearance_thumbnails_wifionly_key , false ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ;", "repo": "RedReader", "task_id": "RedReader/448"}
{"input": "<s> public static NeverAlwaysOrWifiOnly cache_precache_images_old ( ) { if ( network_tor ( ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } if ( ! getBoolean ( R . string . pref_cache_precache_images_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_cache_precache_images_wifionly_key , true ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ;", "repo": "RedReader", "task_id": "RedReader/469"}
{"input": "<s> public static NeverAlwaysOrWifiOnly cache_precache_comments_old ( ) { if ( ! getBoolean ( R . string . pref_cache_precache_comments_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_cache_precache_comments_wifionly_key , false ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ;", "repo": "RedReader", "task_id": "RedReader/470"}
{"input": "<s> public static List < SubredditCanonicalId > pref_subreddits_list ( final int prefId ) { final String value = getString ( prefId , \" \" ) ; final ArrayList < String > list = WritableHashSet . escapedStringToList ( value ) ; final ArrayList < SubredditCanonicalId > result = new ArrayList < > ( list . size ( ) ) ; try { for ( final String str : list ) { result . add ( new SubredditCanonicalId ( str ) ) ; }", "gt": "} catch ( final InvalidSubredditNameException e ) {", "repo": "RedReader", "task_id": "RedReader/483"}
{"input": "<s> @ Nullable public static String pref_reddit_client_id_override ( ) { final String value = getString ( R . string . pref_reddit_client_id_override_key , null ) ; if ( value = = null ) { return null ; } final String valueTrimmed = value . trim ( ) ;", "gt": "if ( valueTrimmed . isEmpty ( ) ) {", "repo": "RedReader", "task_id": "RedReader/485"}
{"input": "<s> public final boolean isHigherPriorityThan ( @ NonNull final Priority other ) { if ( primary ! = other . primary ) {", "gt": "return primary < other . primary ;", "repo": "RedReader", "task_id": "RedReader/487"}
{"input": "<s> @ Override public final void run ( ) { if ( ! mAlreadyRun . getAndSet ( true ) ) {", "gt": "mRunnable . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/488"}
{"input": "<s> public static String getAccessibilityString ( @ NonNull final Context context , @ StringRes final int res ) { if ( ! Locale . getDefault ( ) . getLanguage ( ) . equals ( LANGUAGE_CODE_EN ) ) { return context . getString ( res ) ; } if ( res = = R . string . accessibility_post_already_read_withperiod ) {", "gt": "return \" <STR_LIT> \" ;", "repo": "RedReader", "task_id": "RedReader/489"}
{"input": "<s> public Editor putString ( @ NonNull final String key , @ Nullable final String value ) {", "gt": "mEditor . putString ( key , value ) ;", "repo": "RedReader", "task_id": "RedReader/493"}
{"input": "<s> public Editor putInt ( @ NonNull final String key , final int value ) {", "gt": "mEditor . putInt ( key , value ) ;", "repo": "RedReader", "task_id": "RedReader/494"}
{"input": "<s> public Editor putLong ( @ NonNull final String key , final long value ) {", "gt": "mEditor . putLong ( key , value ) ;", "repo": "RedReader", "task_id": "RedReader/495"}
{"input": "<s> public Editor putBoolean ( @ NonNull final String key , final boolean value ) {", "gt": "mEditor . putBoolean ( key , value ) ;", "repo": "RedReader", "task_id": "RedReader/496"}
{"input": "<s> public Editor putStringSet ( @ NonNull final String key , @ Nullable final Set < String > value ) {", "gt": "mEditor . putStringSet ( key , value ) ;", "repo": "RedReader", "task_id": "RedReader/497"}
{"input": "<s> public void apply ( ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "mEditor . apply ( ) ;", "repo": "RedReader", "task_id": "RedReader/498"}
{"input": "<s> public void registerOnSharedPreferenceChangeListener ( final OnSharedPreferenceChangeListener listener ) { final SharedPreferences . OnSharedPreferenceChangeListener spListener = ( sharedPreferences , key ) - > listener . onSharedPreferenceChanged ( this , key ) ;", "gt": "mPrefs . registerOnSharedPreferenceChangeListener ( spListener ) ;", "repo": "RedReader", "task_id": "RedReader/499"}
{"input": "<s> public void unregisterOnSharedPreferenceChangeListener ( final OnSharedPreferenceChangeListener listener ) { final SharedPreferences . OnSharedPreferenceChangeListener spListener = mListenerWrappers . remove ( listener ) ; if ( spListener ! = null ) {", "gt": "mPrefs . unregisterOnSharedPreferenceChangeListener ( spListener ) ;", "repo": "RedReader", "task_id": "RedReader/500"}
{"input": "<s> public boolean contains ( @ NonNull final String key ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . contains ( key ) ;", "repo": "RedReader", "task_id": "RedReader/501"}
{"input": "<s> @ NonNull public Map < String , ? > getAllClone ( ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return new HashMap < > ( mPrefs . getAll ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/502"}
{"input": "<s> @ Nullable public String getString ( @ NonNull final String key , @ Nullable final String defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getString ( key , defValue ) ;", "repo": "RedReader", "task_id": "RedReader/503"}
{"input": "<s> public int getInt ( @ NonNull final String key , final int defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getInt ( key , defValue ) ;", "repo": "RedReader", "task_id": "RedReader/504"}
{"input": "<s> public long getLong ( @ NonNull final String key , final long defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getLong ( key , defValue ) ;", "repo": "RedReader", "task_id": "RedReader/505"}
{"input": "<s> @ Nullable public Set < String > getStringSet ( @ NonNull final String key , @ Nullable final Set < String > defValues ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getStringSet ( key , defValues ) ;", "repo": "RedReader", "task_id": "RedReader/506"}
{"input": "<s> public boolean getBoolean ( @ NonNull final String key , final boolean defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getBoolean ( key , defValue ) ;", "repo": "RedReader", "task_id": "RedReader/507"}
{"input": "<s> @ Override public E next ( ) { final E result = mNext ;", "gt": "moveToNext ( ) ;", "repo": "RedReader", "task_id": "RedReader/510"}
{"input": "<s> default void forEach ( @ NonNull final Consumer < E > consumer ) { while ( hasNext ( ) ) {", "gt": "consumer . consume ( next ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/511"}
{"input": "<s> @ NonNull public static Optional < String > removePrefix ( @ NonNull final String input , @ NonNull final String prefix ) { if ( input . startsWith ( prefix ) ) {", "gt": "return Optional . of ( input . substring ( prefix . length ( ) ) ) ;", "repo": "RedReader", "task_id": "RedReader/512"}
{"input": "<s> @ NonNull public static String asciiUppercase ( @ NonNull final String input ) { final char [ ] chars = input . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { if ( chars [ i ] > = <CHAR_LIT:a> & & chars [ i ] < = <CHAR_LIT> ) { chars [ i ] - = <CHAR_LIT:a> ;", "gt": "chars [ i ] + = <CHAR_LIT:A> ;", "repo": "RedReader", "task_id": "RedReader/513"}
{"input": "<s> @ NonNull public static String asciiLowercase ( @ NonNull final String input ) { final char [ ] chars = input . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { if ( chars [ i ] > = <CHAR_LIT:A> & & chars [ i ] < = <CHAR_LIT:Z> ) { chars [ i ] - = <CHAR_LIT:A> ;", "gt": "chars [ i ] + = <CHAR_LIT:a> ;", "repo": "RedReader", "task_id": "RedReader/514"}
{"input": "<s> @ NonNull public static String join ( @ NonNull final Collection < ? > elements , @ NonNull final CharSequence separator ) { final StringBuilder result = new StringBuilder ( ) ; boolean first = true ; for ( final Object element : elements ) { if ( ! first ) { result . append ( separator ) ; }", "gt": "result . append ( element . toString ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/515"}
{"input": "<s> public synchronized void trigger ( ) { if ( thread = = null ) { thread = new InternalTriggerableThread ( ) ;", "gt": "thread . start ( ) ;", "repo": "RedReader", "task_id": "RedReader/520"}
{"input": "<s> private synchronized boolean shouldThreadContinue ( ) { if ( shouldRetrigger ) { shouldRetrigger = false ; return true ; } else {", "gt": "thread = null ;", "repo": "RedReader", "task_id": "RedReader/521"}
{"input": "<s> public void triggerOne ( ) {", "gt": "mThreads [ mNextThreadToTrigger ] . trigger ( ) ;", "repo": "RedReader", "task_id": "RedReader/523"}
{"input": "<s> @ UiThread public void startTimer ( ) { General . checkThisIsUIThread ( ) ;", "gt": "mShouldTimerRun = true ;", "repo": "RedReader", "task_id": "RedReader/524"}
{"input": "<s> @ UiThread public void stopTimer ( ) {", "gt": "General . checkThisIsUIThread ( ) ;", "repo": "RedReader", "task_id": "RedReader/525"}
{"input": "<s> public synchronized void enqueue ( final E object ) { if ( set . add ( object ) ) {", "gt": "queue . addLast ( object ) ;", "repo": "RedReader", "task_id": "RedReader/527"}
{"input": "<s> public synchronized void updateAllListeners ( ) { final Iterator < WeakReference < E > > iter = listeners . iterator ( ) ; while ( iter . hasNext ( ) ) { final E listener = iter . next ( ) . get ( ) ; if ( listener = = null ) { iter . remove ( ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/529"}
{"input": "<s> @ Override public void onActivityResult ( final int requestCode , final int resultCode , final Intent data ) { if ( requestCode = = <NUM_LIT> & & requestCode = = resultCode & & data . hasExtra ( \" <STR_LIT> \" ) ) { final Uri uri = Uri . parse ( data . getStringExtra ( \" <STR_LIT> \" ) ) ;", "gt": "RedditOAuth . completeLogin ( mActivity , uri , RunnableOnce . DO_NOTHING ) ;", "repo": "RedReader", "task_id": "RedReader/530"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ;", "repo": "RedReader", "task_id": "RedReader/533"}
{"input": "<s> public static ImageInfoDialog newInstance ( final ImageInfo info ) { final ImageInfoDialog pp = new ImageInfoDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ;", "repo": "RedReader", "task_id": "RedReader/540"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashSet < String > result , final TimestampUTC timeCached ) {", "gt": "multiredditSubscriptionManager . addListener ( MainMenuFragment . this ) ;", "repo": "RedReader", "task_id": "RedReader/541"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashSet < SubredditCanonicalId > result , final TimestampUTC timeCached ) {", "gt": "subredditSubscriptionManager . addListener ( MainMenuFragment . this ) ;", "repo": "RedReader", "task_id": "RedReader/542"}
{"input": "<s> @ Override public Bundle onSaveInstanceState ( ) { final Bundle bundle = new Bundle ( ) ; final LinearLayoutManager layoutManager = ( LinearLayoutManager ) mRecyclerView . getLayoutManager ( ) ;", "gt": "bundle . putInt ( SAVEDSTATE_FIRST_VISIBLE_POS , layoutManager . findFirstVisibleItemPosition ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/546"}
{"input": "<s> public void cancel ( ) { if ( mRequest ! = null ) {", "gt": "mRequest . cancel ( ) ;", "repo": "RedReader", "task_id": "RedReader/547"}
{"input": "<s> public synchronized void restackRefreshCount ( ) { while ( mPostRefreshCount . get ( ) < = 0 ) {", "gt": "mPostRefreshCount . addAndGet ( mPostCountLimit ) ;", "repo": "RedReader", "task_id": "RedReader/548"}
{"input": "<s> @ Override public void onPostSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostSelected ( post ) ; new Thread ( ) { @ Override", "gt": "public void run ( ) {", "repo": "RedReader", "task_id": "RedReader/549"}
{"input": "<s> @ Override public void onPostCommentsSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostCommentsSelected ( post ) ; new Thread ( ) { @ Override", "gt": "public void run ( ) {", "repo": "RedReader", "task_id": "RedReader/550"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" + url + \" <STR_LIT> \" + error + \" <STR_LIT:)> \" ) ;", "repo": "RedReader", "task_id": "RedReader/556"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , String . format ( Locale . US , \" <STR_LIT> \" , url , error ) ) ;", "repo": "RedReader", "task_id": "RedReader/557"}
{"input": "<s> public static PostPropertiesDialog newInstance ( final RedditPost post ) { final PostPropertiesDialog pp = new PostPropertiesDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ;", "repo": "RedReader", "task_id": "RedReader/558"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull final Menu menu , @ NonNull final MenuInflater inflater ) { final MenuItem send = menu . add ( R . string . comment_reply_send ) ; send . setIcon ( R . drawable . ic_action_send_dark ) ;", "gt": "send . setShowAsAction ( MenuItem . SHOW_AS_ACTION_ALWAYS ) ;", "repo": "RedReader", "task_id": "RedReader/567"}
{"input": "<s> private void resetDraft ( ) { mDraftReset = true ; lastType = null ; lastTitle = null ;", "gt": "lastText = null ;", "repo": "RedReader", "task_id": "RedReader/571"}
{"input": "<s> private void ifActivityNotNull ( @ NonNull final Consumer < Listener > action ) { final FragmentActivity activity = getActivity ( ) ; if ( activity ! = null ) {", "gt": "action . consume ( ( Listener ) activity ) ;", "repo": "RedReader", "task_id": "RedReader/572"}
{"input": "<s> @ NonNull @ Override public VH1Text onCreateViewHolder ( @ NonNull final ViewGroup viewGroup , final int i ) { final View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . list_item_1_text , viewGroup , false ) ; final VH1Text result = new VH1Text ( view ) ;", "gt": "view . setOnClickListener ( v - > mSubredditBox . setText ( result . text . getText ( ) ) ) ;", "repo": "RedReader", "task_id": "RedReader/574"}
{"input": "<s> @ NonNull public final View createCombinedListingAndOverlayView ( ) { final FrameLayout outer = new FrameLayout ( mParent ) ; { final View view = getListingView ( ) ; outer . addView ( view ) ; General . setLayoutMatchParent ( view ) ; } { final View overlayView = getOverlayView ( ) ; if ( overlayView ! = null ) { outer . addView ( overlayView ) ;", "gt": "General . setLayoutMatchParent ( overlayView ) ;", "repo": "RedReader", "task_id": "RedReader/577"}
{"input": "<s> @ Override public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; context = getContext ( ) ;", "gt": "packageManager = getActivity ( ) . getPackageManager ( ) ;", "repo": "RedReader", "task_id": "RedReader/582"}
{"input": "<s> public static UserPropertiesDialog newInstance ( final RedditUser user ) { final UserPropertiesDialog pp = new UserPropertiesDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ;", "repo": "RedReader", "task_id": "RedReader/585"}
{"input": "<s> public static WebViewFragment newInstance ( final String url , final RedditPost post ) { final WebViewFragment f = new WebViewFragment ( ) ; final Bundle bundle = new Bundle ( 1 ) ; bundle . putString ( \" <STR_LIT> \" , url ) ; if ( post ! = null ) {", "gt": "bundle . putParcelable ( \" <STR_LIT> \" , post ) ;", "repo": "RedReader", "task_id": "RedReader/586"}
{"input": "<s> public static WebViewFragment newInstanceHtml ( final String html ) { final WebViewFragment f = new WebViewFragment ( ) ;", "gt": "final Bundle bundle = new Bundle ( 1 ) ;", "repo": "RedReader", "task_id": "RedReader/587"}
{"input": "<s> @ Override public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "mUrl = getArguments ( ) . getString ( \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/588"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ;", "repo": "RedReader", "task_id": "RedReader/594"}
{"input": "<s> public boolean onBackButtonPressed ( ) { if ( webView . canGoBack ( ) ) { goingBack = true ; lastBackDepthAttempt = - 1 ;", "gt": "webView . goBack ( ) ;", "repo": "RedReader", "task_id": "RedReader/596"}
{"input": "<s> @ Override public void onPause ( ) { super . onPause ( ) ;", "gt": "webView . onPause ( ) ;", "repo": "RedReader", "task_id": "RedReader/597"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "webView . resumeTimers ( ) ;", "repo": "RedReader", "task_id": "RedReader/598"}
{"input": "<s> @ NonNull public HTTPRequestBodyMultipart addPart ( @ NonNull final Part part ) {", "gt": "mParts . add ( part ) ;", "repo": "RedReader", "task_id": "RedReader/599"}
{"input": "<s> public void forEachPart ( @ NonNull final Consumer < Part > consumer ) { for ( final Part part : mParts ) {", "gt": "consumer . consume ( part ) ;", "repo": "RedReader", "task_id": "RedReader/600"}
{"input": "<s> @ NonNull public HTTPRequestBodyPostFields addField ( @ NonNull final PostField field ) {", "gt": "mPostFields . add ( field ) ;", "repo": "RedReader", "task_id": "RedReader/601"}
{"input": "<s> @ NonNull @ Override public synchronized String toString ( ) { if ( ! mString . isPresent ( ) ) { if ( mBytes . isPresent ( ) ) { mString = Optional . of ( new String ( mBytes . get ( ) , General . CHARSET_UTF8 ) ) ; } else if ( mJson . isPresent ( ) ) { mString = Optional . of ( mJson . toString ( ) ) ; } else {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/604"}
{"input": "<s> @ NonNull @ Override public List < Cookie > loadForRequest ( final HttpUrl url ) { if ( url . toString ( ) . contains ( \" <STR_LIT> \" ) ) {", "gt": "return list ;", "repo": "RedReader", "task_id": "RedReader/608"}
{"input": "<s> @ NonNull @ Override public Void visitPart ( @ NonNull final PartFormData part ) {", "gt": "builder . addFormDataPart ( part . name , part . value ) ;", "repo": "RedReader", "task_id": "RedReader/610"}
{"input": "<s> @ Override public void cancel ( ) { cancelled . set ( true ) ;", "gt": "final Call call = callRef . getAndSet ( null ) ;", "repo": "RedReader", "task_id": "RedReader/612"}
{"input": "<s> @ Override public void handleMessage ( @ NonNull final Message msg ) { if ( playing & & view ! = null ) {", "gt": "view . setImageBitmap ( ( Bitmap ) msg . obj ) ;", "repo": "RedReader", "task_id": "RedReader/617"}
{"input": "<s> @ Override public void run ( ) { try { decoder . read ( is ) ; loaded . set ( true ) ;", "gt": "} catch ( final Throwable t ) {", "repo": "RedReader", "task_id": "RedReader/619"}
{"input": "<s> @ NonNull public static HasAudio fromBoolean ( @ Nullable final Boolean value ) { if ( value = = null ) { return MAYBE_AUDIO ; } if ( value ) {", "gt": "return HAS_AUDIO ;", "repo": "RedReader", "task_id": "RedReader/620"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( ! mNotifiedFailure . getAndSet ( true ) ) {", "gt": "listener . onFailure ( error ) ;", "repo": "RedReader", "task_id": "RedReader/626"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/629"}
{"input": "<s> private static Bitmap scaleAndCrop ( final Bitmap src , final int w , final int h , final int newWidth ) { final float scaleFactor = ( float ) newWidth / ( float ) w ; final Bitmap scaled = Bitmap . createScaledBitmap ( src , Math . round ( scaleFactor * src . getWidth ( ) ) , Math . round ( scaleFactor * src . getHeight ( ) ) , true ) ; final Bitmap result = Bitmap . createBitmap ( scaled , 0 , 0 , newWidth , Math . round ( ( float ) h * scaleFactor ) ) ;", "gt": "if ( result ! = scaled ) {", "repo": "RedReader", "task_id": "RedReader/631"}
{"input": "<s> public void writeNullableBoolean ( @ Nullable final Boolean value ) throws IOException { if ( value = = null ) { writeBoolean ( false ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/634"}
{"input": "<s> private String getFieldTypeString ( final Class < ? > fieldType ) { if ( fieldType = = Integer . class | | fieldType = = Long . class | | fieldType = = Integer . TYPE | | fieldType = = Long . TYPE ) { return \" <STR_LIT> \" ; } else if ( fieldType = = Boolean . class | | fieldType = = Boolean . TYPE ) {", "gt": "return \" <STR_LIT> \" ;", "repo": "RedReader", "task_id": "RedReader/641"}
{"input": "<s> public synchronized Collection < E > getAll ( ) { try ( SQLiteDatabase db = getReadableDatabase ( ) ) { try ( Cursor cursor = db . query ( TABLE_NAME , fieldNames , null , null , null , null , null ) ) { final LinkedList < E > result = new LinkedList < > ( ) ; while ( cursor . moveToNext ( ) ) { result . add ( readFromCursor ( cursor ) ) ; } return result ;", "gt": "} catch ( final Exception e ) {", "repo": "RedReader", "task_id": "RedReader/642"}
{"input": "<s> public synchronized E getById ( final K id ) { final ArrayList < E > queryResult = getByField ( FIELD_ID , id . toString ( ) ) ; if ( queryResult . size ( ) ! = 1 ) {", "gt": "return null ;", "repo": "RedReader", "task_id": "RedReader/643"}
{"input": "<s> public synchronized void put ( final E object ) { final SQLiteDatabase db = getWritableDatabase ( ) ; try { final ContentValues values = new ContentValues ( fields . length + 1 ) ; final long result = db . insertOrThrow ( TABLE_NAME , null , toContentValues ( object , values ) ) ; if ( result < 0 ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } } catch ( final IllegalAccessException e ) {", "gt": "throw new RuntimeException ( e ) ;", "repo": "RedReader", "task_id": "RedReader/644"}
{"input": "<s> @ NonNull public static synchronized RedditChangeDataIO getInstance ( final Context context ) { if ( INSTANCE = = null ) { INSTANCE = new RedditChangeDataIO ( context . getApplicationContext ( ) ) ; if ( STATIC_UPDATE_PENDING ) {", "gt": "INSTANCE . notifyUpdate ( ) ;", "repo": "RedReader", "task_id": "RedReader/645"}
{"input": "<s> public static synchronized void notifyUpdateStatic ( ) { if ( INSTANCE ! = null ) {", "gt": "INSTANCE . notifyUpdate ( ) ;", "repo": "RedReader", "task_id": "RedReader/646"}
{"input": "<s> private void notifyUpdate ( ) { synchronized ( mLock ) { if ( mIsInitialReadComplete ) { triggerUpdate ( ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/647"}
{"input": "<s> private void notifyInitialReadComplete ( ) { synchronized ( mLock ) { mIsInitialReadComplete = true ; if ( mUpdatePending ) {", "gt": "triggerUpdate ( ) ;", "repo": "RedReader", "task_id": "RedReader/648"}
{"input": "<s> private void doWrite ( ) { synchronized ( ioLock ) { final ArrayList < V > values ; synchronized ( toWrite ) { values = new ArrayList < > ( toWrite . values ( ) ) ;", "gt": "toWrite . clear ( ) ;", "repo": "RedReader", "task_id": "RedReader/649"}
{"input": "<s> @ Override public void performRequest ( final K key , final TimestampBound timestampBound , final RequestResponseHandler < V , F > handler ) {", "gt": "toRead . offer ( new SingleReadOperation ( timestampBound , handler , key ) ) ;", "repo": "RedReader", "task_id": "RedReader/651"}
{"input": "<s> @ Override public void performRequest ( final Collection < K > keys , final TimestampBound timestampBound , final RequestResponseHandler < HashMap < K , V > , F > handler ) {", "gt": "toRead . offer ( new BulkReadOperation ( timestampBound , handler , keys ) ) ;", "repo": "RedReader", "task_id": "RedReader/652"}
{"input": "<s> @ Override public void performWrite ( final Collection < V > values ) { synchronized ( toWrite ) { for ( final V value : values ) {", "gt": "toWrite . put ( value . getKey ( ) , value ) ;", "repo": "RedReader", "task_id": "RedReader/654"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashMap < K , V > result , final TimestampUTC timeCached ) { final TimestampUTC timestamp = outerOldestTimestamp = = null ? timeCached : TimestampUTC . oldest ( outerOldestTimestamp , timeCached ) ; performWrite ( result . values ( ) ) ;", "gt": "existingResult . putAll ( result ) ;", "repo": "RedReader", "task_id": "RedReader/655"}
{"input": "<s> @ Override public void onRequestSuccess ( final V result , final TimestampUTC timeCached ) {", "gt": "performWrite ( result ) ;", "repo": "RedReader", "task_id": "RedReader/656"}
{"input": "<s> @ Override protected void prettyPrint ( final int indent , final StringBuilder sb ) { sb . append ( <CHAR_LIT:[> ) ; for ( int item = 0 ; item < mContents . size ( ) ; item + + ) { if ( item ! = 0 ) { sb . append ( <CHAR_LIT:U+002C> ) ; } sb . append ( <STR_LIT:\\n> ) ; for ( int i = 0 ; i < indent + 1 ; i + + ) { sb . append ( \" \" ) ; } mContents . get ( item ) . prettyPrint ( indent + 1 , sb ) ; } sb . append ( <STR_LIT:\\n> ) ;", "gt": "for ( int i = 0 ; i < indent ; i + + ) {", "repo": "RedReader", "task_id": "RedReader/664"}
{"input": "<s> public void forEachObject ( final Consumer < JsonObject > consumer ) { for ( final JsonValue value : mContents ) {", "gt": "consumer . consume ( value . asObject ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/665"}
{"input": "<s> @ NonNull @ Override protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) { if ( offset = = keys . length ) { return Optional . of ( this ) ; } if ( ! ( keys [ offset ] instanceof Integer ) ) { return Optional . empty ( ) ; } final int key = ( Integer ) keys [ offset ] ; if ( key < 0 | | key > = mContents . size ( ) ) { return Optional . empty ( ) ; } final JsonValue next = mContents . get ( key ) ;", "gt": "if ( next = = null ) {", "repo": "RedReader", "task_id": "RedReader/666"}
{"input": "<s> @ NonNull @ Override public < E extends JsonDeserializable > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final E obj = clazz . getConstructor ( ) . newInstance ( ) ;", "gt": "populateObject ( obj ) ;", "repo": "RedReader", "task_id": "RedReader/667"}
{"input": "<s> @ Nullable public < E extends JsonDeserializable > E getObject ( @ NonNull final String id , final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) {", "repo": "RedReader", "task_id": "RedReader/673"}
{"input": "<s> @ NonNull @ Override protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) { if ( offset = = keys . length ) { return Optional . of ( this ) ; } final JsonValue next = properties . get ( keys [ offset ] . toString ( ) ) ;", "gt": "if ( next = = null ) {", "repo": "RedReader", "task_id": "RedReader/675"}
{"input": "<s> @ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( ) ;", "gt": "prettyPrint ( 0 , sb ) ;", "repo": "RedReader", "task_id": "RedReader/686"}
{"input": "<s> @ NonNull protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) {", "gt": "if ( offset = = keys . length ) {", "repo": "RedReader", "task_id": "RedReader/690"}
{"input": "<s> public void setSort ( final PostCommentSort s ) { if ( mUrl . pathType ( ) = = RedditURLParser . POST_COMMENT_LISTING_URL ) {", "gt": "mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ;", "repo": "RedReader", "task_id": "RedReader/691"}
{"input": "<s> public void setSort ( final UserCommentSort s ) { if ( mUrl . pathType ( ) = = RedditURLParser . USER_COMMENT_LISTING_URL ) {", "gt": "mUrl = mUrl . asUserCommentListURL ( ) . order ( s ) ;", "repo": "RedReader", "task_id": "RedReader/692"}
{"input": "<s> @ NonNull private static byte [ ] sign ( @ NonNull final PrivateKey privateKey , @ NonNull final byte [ ] message ) throws NoSuchAlgorithmException , InvalidKeyException , SignatureException { final Signature signer = Signature . getInstance ( SIGNATURE_ALG ) ; signer . initSign ( privateKey ) ;", "gt": "signer . update ( message ) ;", "repo": "RedReader", "task_id": "RedReader/701"}
{"input": "<s> private static void verify ( @ NonNull final PublicKey publicKey , @ NonNull final byte [ ] message , @ NonNull final byte [ ] signature ) throws NoSuchAlgorithmException , InvalidKeyException , SignatureException , SignatureInvalidException { final Signature signer = Signature . getInstance ( SIGNATURE_ALG ) ; signer . initVerify ( publicKey ) ;", "gt": "signer . update ( message ) ;", "repo": "RedReader", "task_id": "RedReader/702"}
{"input": "<s> @ Override public void onReceive ( final Context context , final Intent intent ) {", "gt": "checkForNewMessages ( context ) ;", "repo": "RedReader", "task_id": "RedReader/704"}
{"input": "<s> @ Override public void run ( ) {", "gt": "RedditChangeDataManager . pruneAllUsersDefaultMaxAge ( ) ;", "repo": "RedReader", "task_id": "RedReader/706"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "revertOnFailure ( ) ;", "repo": "RedReader", "task_id": "RedReader/707"}
{"input": "<s> @ Override protected void onSuccess ( ) { if ( action = = RedditAPI . ACTION_DELETE ) {", "gt": "General . quickToast ( context , R . string . delete_success ) ;", "repo": "RedReader", "task_id": "RedReader/708"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { synchronized ( result ) { if ( stillOkay . get ( ) ) {", "gt": "stillOkay . set ( false ) ;", "repo": "RedReader", "task_id": "RedReader/709"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( handler ! = null ) {", "gt": "handler . onRequestFailed ( failureReason ) ;", "repo": "RedReader", "task_id": "RedReader/715"}
{"input": "<s> public void removeListener ( ) { synchronized ( RedditSubredditSubscriptionManager . this ) {", "gt": "listeners . remove ( mListener ) ;", "repo": "RedReader", "task_id": "RedReader/718"}
{"input": "<s> public synchronized ListenerContext addListener ( final SubredditSubscriptionStateChangeListener listener ) {", "gt": "listeners . add ( listener ) ;", "repo": "RedReader", "task_id": "RedReader/720"}
{"input": "<s> private synchronized void onSubscriptionAttempt ( final SubredditCanonicalId id ) {", "gt": "pendingSubscriptions . add ( id ) ;", "repo": "RedReader", "task_id": "RedReader/722"}
{"input": "<s> private synchronized void onUnsubscriptionAttempt ( final SubredditCanonicalId id ) {", "gt": "pendingUnsubscriptions . add ( id ) ;", "repo": "RedReader", "task_id": "RedReader/723"}
{"input": "<s> private synchronized void onSubscriptionChangeAttemptFailed ( final SubredditCanonicalId id ) { pendingUnsubscriptions . remove ( id ) ;", "gt": "pendingSubscriptions . remove ( id ) ;", "repo": "RedReader", "task_id": "RedReader/724"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( onFailure ! = null ) {", "gt": "onFailure . apply ( failureReason ) ;", "repo": "RedReader", "task_id": "RedReader/728"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( handler ! = null ) {", "gt": "handler . onRequestFailed ( failureReason ) ;", "repo": "RedReader", "task_id": "RedReader/729"}
{"input": "<s> fun getMoreUrls ( commentListingURL : RedditURL ) : List < PostCommentListingURL > { val urls = ArrayList < PostCommentListingURL > ( <NUM_LIT:16> ) if ( commentListingURL . pathType ( ) = = RedditURLParser . POST_COMMENT_LISTING_URL ) { if ( count > 0 ) { for ( child in children ) { urls . add ( commentListingURL . asPostCommentListURL ( ) . commentId ( child ) ) } } else {", "gt": "urls . add ( commentListingURL . asPostCommentListURL ( ) . commentId ( parent_id ) )", "repo": "RedReader", "task_id": "RedReader/747"}
{"input": "<s> @ Nullable @ Override protected View . OnLongClickListener generateOnLongClickListener ( @ NonNull final BaseActivity activity , @ Nullable final Integer textColor , @ Nullable final Float textSize , final boolean showLinkButtons ) { return ( button ) - > { LinkHandler . onLinkLongClicked ( activity , mDetails . url ) ;", "gt": "return true ;", "repo": "RedReader", "task_id": "RedReader/752"}
{"input": "<s> @ NonNull public final String getButtonTitle ( ) { if ( name = = null | | name . isEmpty ( ) ) {", "gt": "return url ;", "repo": "RedReader", "task_id": "RedReader/755"}
{"input": "<s> @ Nullable public final String getButtonSubtitle ( ) { if ( name = = null | | name . isEmpty ( ) ) {", "gt": "return null ;", "repo": "RedReader", "task_id": "RedReader/756"}
{"input": "<s> @ NonNull public final String getPlainText ( ) { final StringBuilder sb = new StringBuilder ( ) ;", "gt": "getPlainText ( sb ) ;", "repo": "RedReader", "task_id": "RedReader/757"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/758"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/760"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/763"}
{"input": "<s> public static HtmlRawElementStyledText create ( @ NonNull final String text ) { final ArrayList < CharacterStyle > spans = new ArrayList < > ( ) ; spans . add ( new BackgroundColorSpan ( Color . RED ) ) ;", "gt": "spans . add ( new ForegroundColorSpan ( Color . WHITE ) ) ;", "repo": "RedReader", "task_id": "RedReader/764"}
{"input": "<s> @ NonNull public static HtmlRawElementTagPassthrough appendError ( @ NonNull final String text , @ NonNull final HtmlRawElement element ) { final ArrayList < HtmlRawElement > children = new ArrayList < > ( ) ; children . add ( element ) ;", "gt": "children . add ( HtmlRawElementInlineErrorMessage . create ( text ) ) ;", "repo": "RedReader", "task_id": "RedReader/765"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/766"}
{"input": "<s> @ Override public void generate ( @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < BodyElement > destination ) { final ArrayList < BodyElement > elements = new ArrayList < > ( ) ;", "gt": "mChild . generate ( activity , elements ) ;", "repo": "RedReader", "task_id": "RedReader/769"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/772"}
{"input": "<s> @ Override public void generate ( @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < BodyElement > destination ) { final ArrayList < BodyElement > elements = new ArrayList < > ( ) ;", "gt": "mChild . generate ( activity , elements ) ;", "repo": "RedReader", "task_id": "RedReader/775"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/776"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ;", "repo": "RedReader", "task_id": "RedReader/780"}
{"input": "<s> @ Override public final void reduce ( @ NonNull final HtmlTextAttributes activeAttributes , @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < HtmlRawElement > destination , @ NonNull final ArrayList < LinkButtonDetails > linkButtons ) { onStart ( activeAttributes ) ; try { for ( final HtmlRawElement child : mChildren ) { child . reduce ( activeAttributes , activity , destination , linkButtons ) ; }", "gt": "} finally {", "repo": "RedReader", "task_id": "RedReader/781"}
{"input": "<s> public HtmlReader . Token advance ( ) throws MalformedHtmlException {", "gt": "mNext = mHtmlReader . readNext ( ) ;", "repo": "RedReader", "task_id": "RedReader/792"}
{"input": "<s> private static int indexOfLinebreak ( final char [ ] raw , final int startPos ) { for ( int i = startPos ; i < raw . length ; i + + ) { if ( raw [ i ] = = <STR_LIT:\\n> ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/795"}
{"input": "<s> public int countSpacesAtStart ( ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + i ] ! = <CHAR_LIT> ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/796"}
{"input": "<s> public int countSpacesAtEnd ( ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + length - 1 - i ] ! = <CHAR_LIT> ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/797"}
{"input": "<s> public int countPrefixLengthIgnoringSpaces ( final char c ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + i ] ! = <CHAR_LIT> & & arr [ start + i ] ! = c ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/798"}
{"input": "<s> public boolean isRepeatingChar ( final char c , final int start , final int len ) { for ( int i = 0 ; i < len ; i + + ) { if ( arr [ i + start + this . start ] ! = c ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/801"}
{"input": "<s> public boolean equalAt ( final int position , final String needle ) { if ( length < position + needle . length ( ) ) { return false ; } for ( int i = 0 ; i < needle . length ( ) ; i + + ) { if ( needle . charAt ( i ) ! = arr [ start + position + i ] ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/802"}
{"input": "<s> public void replaceUnicodeSpaces ( ) { for ( int i = 0 ; i < length ; i + + ) {", "gt": "if ( MarkdownTokenizer . isUnicodeWhitespace ( arr [ start + i ] ) ) {", "repo": "RedReader", "task_id": "RedReader/803"}
{"input": "<s> public void append ( final int [ ] arr ) {", "gt": "System . arraycopy ( arr , 0 , data , pos , arr . length ) ;", "repo": "RedReader", "task_id": "RedReader/804"}
{"input": "<s> public int [ ] substringAsArray ( final int start ) { final int [ ] result = new int [ pos - start ] ;", "gt": "System . arraycopy ( data , start , result , 0 , result . length ) ;", "repo": "RedReader", "task_id": "RedReader/806"}
{"input": "<s> private static int indexOf ( final int [ ] haystack , final int needle , final int startPos ) { for ( int i = startPos ; i < haystack . length ; i + + ) { if ( haystack [ i ] = = needle ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/809"}
{"input": "<s> public static IntArrayLengthPair tokenize ( final CharArrSubstring input ) { final IntArrayLengthPair tmp1 = new IntArrayLengthPair ( input . length * <NUM_LIT:3> ) ; final IntArrayLengthPair tmp2 = new IntArrayLengthPair ( input . length * <NUM_LIT:3> ) ; tmp1 . pos = input . length ; for ( int i = 0 ; i < input . length ; i + + ) { tmp1 . data [ i ] = input . charAt ( i ) ; } naiveTokenize ( tmp1 , tmp2 ) ;", "gt": "clean ( tmp2 , tmp1 ) ;", "repo": "RedReader", "task_id": "RedReader/811"}
{"input": "<s> private static int indexOfIgnoreEscaped ( final IntArrayLengthPair haystack , final int needle , final int startPos ) { for ( int i = startPos ; i < haystack . pos ; i + + ) { if ( haystack . data [ i ] = = <STR_LIT:\\\\> ) { i + + ; } else if ( haystack . data [ i ] = = needle ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/813"}
{"input": "<s> private static int indexOf ( final int [ ] haystack , final int needle , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] = = needle ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/814"}
{"input": "<s> public static int findCloseWellBracketed ( final int [ ] haystack , final int openBracket , final int closeBracket , final int startInclusive , final int endExclusive ) { if ( haystack [ startInclusive ] ! = openBracket ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } int b = 1 ; for ( int i = startInclusive + 1 ; i < endExclusive ; i + + ) { if ( haystack [ i ] = = openBracket ) { b + + ; } else if ( haystack [ i ] = = closeBracket ) { b - - ; } if ( b = = 0 ) {", "gt": "return i ;", "repo": "RedReader", "task_id": "RedReader/815"}
{"input": "<s> private static boolean isSpaces ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] ! = <CHAR_LIT> ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/816"}
{"input": "<s> private static boolean isDigits ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] < <CHAR_LIT:0> | | haystack [ i ] > <CHAR_LIT:9> ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/817"}
{"input": "<s> private static boolean isHexDigits ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { final int c = haystack [ i ] ; if ( ( c < <CHAR_LIT:0> | | c > <CHAR_LIT:9> ) & & ( c < <CHAR_LIT:a> | | c > <CHAR_LIT> ) & & ( c < <CHAR_LIT:A> | | c > <CHAR_LIT> ) ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/818"}
{"input": "<s> private static int getDecimal ( final int [ ] chars , final int startInclusive , final int endExclusive ) { int result = 0 ; for ( int i = startInclusive ; i < endExclusive ; i + + ) {", "gt": "result * = <NUM_LIT:10> ;", "repo": "RedReader", "task_id": "RedReader/819"}
{"input": "<s> private static int getHex ( final int [ ] chars , final int startInclusive , final int endExclusive ) { int result = 0 ; for ( int i = startInclusive ; i < endExclusive ; i + + ) {", "gt": "result * = <NUM_LIT:16> ;", "repo": "RedReader", "task_id": "RedReader/821"}
{"input": "<s> private static boolean equals ( final int [ ] haystack , final char [ ] needle , final int startInclusive ) { for ( int i = 0 ; i < needle . length ; i + + ) { if ( haystack [ startInclusive + i ] ! = needle [ i ] ) {", "gt": "return false ;", "repo": "RedReader", "task_id": "RedReader/822"}
{"input": "<s> private static int getLinkStartType ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { final int maxLen = endExclusive - startInclusive ; for ( int type = 0 ; type < linkPrefixes . length ; type + + ) { if ( linkPrefixes [ type ] . length < = maxLen & & equals ( haystack , linkPrefixes [ type ] , startInclusive ) ) {", "gt": "return type ;", "repo": "RedReader", "task_id": "RedReader/823"}
{"input": "<s> private static int getRedditLinkStartType ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { final int maxLen = endExclusive - startInclusive ; for ( int type = 0 ; type < linkPrefixes_reddit . length ; type + + ) { if ( linkPrefixes_reddit [ type ] . length < = maxLen & & equals ( haystack , linkPrefixes_reddit [ type ] , startInclusive ) ) {", "gt": "return type ;", "repo": "RedReader", "task_id": "RedReader/824"}
{"input": "<s> @ NonNull public static RedditChangeDataManager getInstance ( final RedditAccount user ) { synchronized ( INSTANCE_MAP ) { RedditChangeDataManager result = INSTANCE_MAP . get ( user ) ; if ( result = = null ) { result = new RedditChangeDataManager ( ) ;", "gt": "INSTANCE_MAP . put ( user , result ) ;", "repo": "RedReader", "task_id": "RedReader/825"}
{"input": "<s> private static HashMap < RedditAccount , HashMap < RedditIdAndType , Entry > > snapshotAllUsers ( ) { final HashMap < RedditAccount , HashMap < RedditIdAndType , Entry > > result = new HashMap < > ( ) ; synchronized ( INSTANCE_MAP ) { for ( final RedditAccount account : INSTANCE_MAP . keySet ( ) ) {", "gt": "result . put ( account , getInstance ( account ) . snapshot ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/826"}
{"input": "<s> private Entry get ( final RedditIdAndType thing ) { final Entry entry = mEntries . get ( thing ) ; if ( entry = = null ) {", "gt": "return Entry . CLEAR_ENTRY ;", "repo": "RedReader", "task_id": "RedReader/831"}
{"input": "<s> public boolean isUpvoted ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isUpvoted ( ) ;", "repo": "RedReader", "task_id": "RedReader/841"}
{"input": "<s> public boolean isDownvoted ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isDownvoted ( ) ;", "repo": "RedReader", "task_id": "RedReader/842"}
{"input": "<s> public boolean isRead ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isRead ( ) ;", "repo": "RedReader", "task_id": "RedReader/843"}
{"input": "<s> public boolean isSaved ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isSaved ( ) ;", "repo": "RedReader", "task_id": "RedReader/844"}
{"input": "<s> public Boolean isHidden ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isHidden ( ) ;", "repo": "RedReader", "task_id": "RedReader/845"}
{"input": "<s> private HashMap < RedditIdAndType , Entry > snapshot ( ) { synchronized ( mLock ) {", "gt": "return new HashMap < > ( mEntries ) ;", "repo": "RedReader", "task_id": "RedReader/846"}
{"input": "<s> public int computeScore ( ) { int score = src . getScoreExcludingOwnVote ( ) ; if ( isUpvoted ( ) ) { score + + ;", "gt": "} else if ( isDownvoted ( ) ) {", "repo": "RedReader", "task_id": "RedReader/849"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" + uriStr + \" <STR_LIT> \" + error , error . t ) ;", "repo": "RedReader", "task_id": "RedReader/851"}
{"input": "<s> public Bitmap getThumbnail ( final ThumbnailLoadedCallback callback , final int usageId ) { this . thumbnailCallback = callback ;", "gt": "this . usageId = usageId ;", "repo": "RedReader", "task_id": "RedReader/852"}
{"input": "<s> public void bind ( final RedditPostView boundView ) {", "gt": "mBoundView = boundView ;", "repo": "RedReader", "task_id": "RedReader/853"}
{"input": "<s> public void unbind ( final RedditPostView boundView ) { if ( mBoundView = = boundView ) { mBoundView = null ;", "gt": "mChangeDataManager . removeListener ( src . getIdAndType ( ) , this ) ;", "repo": "RedReader", "task_id": "RedReader/854"}
{"input": "<s> private int computeScore ( final RedditChangeDataManager changeDataManager ) { final RedditComment rawComment = mComment . getRawComment ( ) ; int score = rawComment . getUps ( ) - rawComment . getDowns ( ) ; if ( Boolean . TRUE . equals ( rawComment . getLikes ( ) ) ) { score - - ; } if ( Boolean . FALSE . equals ( rawComment . getLikes ( ) ) ) { score + + ; } if ( changeDataManager . isUpvoted ( getIdAndType ( ) ) ) { score + + ;", "gt": "} else if ( changeDataManager . isDownvoted ( getIdAndType ( ) ) ) {", "repo": "RedReader", "task_id": "RedReader/857"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( error . httpStatus ! = null & & error . httpStatus = = <NUM_LIT> ) { responseHandler . onSubredditDoesNotExist ( ) ; } else if ( error . httpStatus ! = null & & error . httpStatus = = <NUM_LIT> ) {", "gt": "responseHandler . onSubredditPermissionDenied ( ) ;", "repo": "RedReader", "task_id": "RedReader/862"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final Context context = viewGroup . getContext ( ) ; final View view ; if ( isComment ( ) ) { view = new RedditCommentView ( mActivity , new RRThemeAttributes ( context ) , mFragment , mFragment ) ; } else if ( isLoadMore ( ) ) { view = new LoadMoreCommentsView ( context , mCommentListingUrl ) ; } else {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/877"}
{"input": "<s> @ Override public void writeToParcel ( final Parcel dest , final int flags ) {", "gt": "dest . writeString ( text ) ;", "repo": "RedReader", "task_id": "RedReader/881"}
{"input": "<s> @ Override public RedditFlairChoice createFromParcel ( final Parcel in ) { final String text = in . readString ( ) ;", "gt": "final String templateId = in . readString ( ) ;", "repo": "RedReader", "task_id": "RedReader/882"}
{"input": "<s> public static synchronized ArrayList < SubredditCanonicalId > getSubredditsSorted ( final RedditAccount account ) { final ArrayList < SubredditCanonicalId > result = new ArrayList < > ( getForAccount ( account ) ) ;", "gt": "Collections . sort ( result ) ;", "repo": "RedReader", "task_id": "RedReader/886"}
{"input": "<s> public static synchronized RedditSubredditManager getInstance ( final Context context , final RedditAccount user ) { if ( singleton = = null | | ! user . equals ( singletonUser ) ) {", "gt": "singletonUser = user ;", "repo": "RedReader", "task_id": "RedReader/887"}
{"input": "<s> public static String stripRPrefix ( final String name ) throws InvalidSubredditNameException { final Matcher matcher = NAME_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) {", "gt": "return matcher . group ( <NUM_LIT:3> ) ;", "repo": "RedReader", "task_id": "RedReader/891"}
{"input": "<s> public static String stripUserPrefix ( final String name ) { final Matcher matcher = USER_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) {", "gt": "return matcher . group ( <NUM_LIT:2> ) ;", "repo": "RedReader", "task_id": "RedReader/892"}
{"input": "<s> @ Nullable public String getIconUrl ( ) { if ( icon_img = = null ) {", "gt": "return null ;", "repo": "RedReader", "task_id": "RedReader/896"}
{"input": "<s> @ Override public String humanReadableName ( final Context context , final boolean shorter ) { if ( username = = null ) {", "gt": "return name ;", "repo": "RedReader", "task_id": "RedReader/902"}
{"input": "<s> public Uri generateNonJsonUri ( ) { final Uri . Builder builder = new Uri . Builder ( ) ; builder . scheme ( Constants . Reddit . getScheme ( ) ) . authority ( Constants . Reddit . getHumanReadableDomain ( ) ) ;", "gt": "internalGenerateCommon ( builder ) ;", "repo": "RedReader", "task_id": "RedReader/905"}
{"input": "<s> public String humanReadablePath ( ) { final Uri src = generateJsonUri ( ) ; final StringBuilder builder = new StringBuilder ( ) ; for ( final String pathElement : src . getPathSegments ( ) ) { if ( ! pathElement . equals ( \" <STR_LIT> \" ) ) { builder . append ( \" <STR_LIT:/> \" ) ;", "gt": "builder . append ( pathElement ) ;", "repo": "RedReader", "task_id": "RedReader/908"}
{"input": "<s> @ Override public Uri generateJsonUri ( ) { if ( uri . getPath ( ) . endsWith ( \" <STR_LIT> \" ) ) {", "gt": "return uri ;", "repo": "RedReader", "task_id": "RedReader/913"}
{"input": "<s> @ Override public Uri generateJsonUri ( ) { if ( uri . getPath ( ) . endsWith ( \" <STR_LIT> \" ) ) {", "gt": "return uri ;", "repo": "RedReader", "task_id": "RedReader/914"}
{"input": "<s> @ Override public String humanReadableName ( final Context context , final boolean shorter ) { final String name = context . getString ( R . string . user_comments ) ; if ( shorter ) {", "gt": "return name ;", "repo": "RedReader", "task_id": "RedReader/915"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "final FragmentActivity activity = getActivity ( ) ;", "repo": "RedReader", "task_id": "RedReader/918"}
{"input": "<s> @ Override public void run ( ) { cacheManager . pruneCache ( cachesToClear . get ( CacheType . LISTINGS ) , cachesToClear . get ( CacheType . THUMBNAILS ) , cachesToClear . get ( CacheType . IMAGES ) ) ; if ( Objects . requireNonNull ( cachesToClear . get ( CacheType . FLAGS ) ) ) {", "gt": "RedditChangeDataManager . pruneAllUsersWhereOlderThan ( TimeDuration . ms ( 0 ) ) ;", "repo": "RedReader", "task_id": "RedReader/921"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouchEvent ( final MotionEvent event ) { final int action = event . getAction ( ) & MotionEvent . ACTION_MASK ; if ( action = = MotionEvent . ACTION_DOWN ) { if ( event . getX ( ) < mSwipeZonePixels ) { return listener . onSwipe ( LEFT ) ; } else if ( event . getX ( ) > getWidth ( ) - mSwipeZonePixels ) { return listener . onSwipe ( RIGHT ) ; } else {", "gt": "return listener . onTap ( ) ;", "repo": "RedReader", "task_id": "RedReader/926"}
{"input": "<s> public void setContents ( final View contents ) { this . contents = contents ; if ( shownPosition ! = null ) {", "gt": "show ( shownPosition ) ;", "repo": "RedReader", "task_id": "RedReader/927"}
{"input": "<s> public void hide ( ) {", "gt": "shownPosition = null ;", "repo": "RedReader", "task_id": "RedReader/929"}
{"input": "<s> public void setFlingingEnabled ( final boolean flingingEnabled ) {", "gt": "mFlingHintOuter . setVisibility ( flingingEnabled ? VISIBLE : GONE ) ;", "repo": "RedReader", "task_id": "RedReader/930"}
{"input": "<s> @ Override protected void onUpdatedPosition ( final float position ) {", "gt": "mFlingHintYPos = position ;", "repo": "RedReader", "task_id": "RedReader/931"}
{"input": "<s> @ Override protected void onEndPosition ( final float endPosition ) { mFlingHintYPos = endPosition ;", "gt": "updateFlingHintPosition ( ) ;", "repo": "RedReader", "task_id": "RedReader/932"}
{"input": "<s> public final void startRender ( final RRGLMatrixStack stack , final long time ) { if ( mVisible ) {", "gt": "renderInternal ( stack , time ) ;", "repo": "RedReader", "task_id": "RedReader/936"}
{"input": "<s> @ Override protected void preRender ( final RRGLMatrixStack stack , final long time ) {", "gt": "GLES20 . glEnable ( GLES20 . GL_BLEND ) ;", "repo": "RedReader", "task_id": "RedReader/937"}
{"input": "<s> public void setColour ( final float r , final float g , final float b , final float a ) { mRed = r ; mGreen = g ;", "gt": "mBlue = b ;", "repo": "RedReader", "task_id": "RedReader/938"}
{"input": "<s> public final void add ( final RRGLRenderable child ) { mChildren . add ( child ) ; if ( isAdded ( ) ) {", "gt": "child . onAdded ( ) ;", "repo": "RedReader", "task_id": "RedReader/940"}
{"input": "<s> @ Override public void onAdded ( ) { if ( ! isAdded ( ) ) { for ( final RRGLRenderable entity : mChildren ) {", "gt": "entity . onAdded ( ) ;", "repo": "RedReader", "task_id": "RedReader/942"}
{"input": "<s> @ Override protected void renderInternal ( final RRGLMatrixStack matrixStack , final long time ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ;", "gt": "entity . startRender ( matrixStack , time ) ;", "repo": "RedReader", "task_id": "RedReader/943"}
{"input": "<s> @ Override public boolean isAnimating ( ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ; if ( entity . isAnimating ( ) ) {", "gt": "return true ;", "repo": "RedReader", "task_id": "RedReader/945"}
{"input": "<s> @ Override public void setOverallAlpha ( final float alpha ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ;", "gt": "entity . setOverallAlpha ( alpha ) ;", "repo": "RedReader", "task_id": "RedReader/946"}
{"input": "<s> @ Override protected void renderInternal ( final RRGLMatrixStack stack , final long time ) { preRender ( stack , time ) ;", "gt": "mEntity . startRender ( stack , time ) ;", "repo": "RedReader", "task_id": "RedReader/947"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "mEntity . onAdded ( ) ;", "repo": "RedReader", "task_id": "RedReader/948"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "super . onRemoved ( ) ;", "repo": "RedReader", "task_id": "RedReader/949"}
{"input": "<s> public void setScale ( final float x , final float y ) {", "gt": "mScaleX = x ;", "repo": "RedReader", "task_id": "RedReader/950"}
{"input": "<s> public void setTexture ( final RRGLTexture newTexture ) { if ( isAdded ( ) ) { mTexture . releaseReference ( ) ; }", "gt": "mTexture = newTexture ;", "repo": "RedReader", "task_id": "RedReader/951"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "super . onAdded ( ) ;", "repo": "RedReader", "task_id": "RedReader/952"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "mTexture . releaseReference ( ) ;", "repo": "RedReader", "task_id": "RedReader/953"}
{"input": "<s> public void setPosition ( final float x , final float y ) {", "gt": "mPositionX = x ;", "repo": "RedReader", "task_id": "RedReader/955"}
{"input": "<s> public void setPosition ( final MutableFloatPoint2D mPositionOffset ) {", "gt": "mPositionX = mPositionOffset . x ;", "repo": "RedReader", "task_id": "RedReader/956"}
{"input": "<s> public void activateProgramColour ( ) { if ( mProgramCurrent ! = mProgramColour ) {", "gt": "activateProgram ( mProgramColour ) ;", "repo": "RedReader", "task_id": "RedReader/957"}
{"input": "<s> public void activateProgramTexture ( ) { if ( mProgramCurrent ! = mProgramTexture ) {", "gt": "activateProgram ( mProgramTexture ) ;", "repo": "RedReader", "task_id": "RedReader/958"}
{"input": "<s> public int pop ( ) {", "gt": "mTopMatrixPos - = <NUM_LIT:16> ;", "repo": "RedReader", "task_id": "RedReader/963"}
{"input": "<s> @ Override public void onActivated ( ) {", "gt": "super . onActivated ( ) ;", "repo": "RedReader", "task_id": "RedReader/964"}
{"input": "<s> @ Override public void onDeactivated ( ) {", "gt": "super . onDeactivated ( ) ;", "repo": "RedReader", "task_id": "RedReader/965"}
{"input": "<s> public void activateTextureByHandle ( final int textureHandle ) {", "gt": "GLES20 . glBindTexture ( GLES20 . GL_TEXTURE_2D , textureHandle ) ;", "repo": "RedReader", "task_id": "RedReader/966"}
{"input": "<s> @ Override public void onActivated ( ) { super . onActivated ( ) ;", "gt": "GLES20 . glEnableVertexAttribArray ( mUVDataHandle ) ;", "repo": "RedReader", "task_id": "RedReader/967"}
{"input": "<s> @ Override public void onDeactivated ( ) { super . onDeactivated ( ) ;", "gt": "GLES20 . glDisableVertexAttribArray ( mUVDataHandle ) ;", "repo": "RedReader", "task_id": "RedReader/968"}
{"input": "<s> public void releaseReference ( ) { mRefCount - - ; if ( mRefCount = = 0 ) {", "gt": "deleteTexture ( mTextureHandle ) ;", "repo": "RedReader", "task_id": "RedReader/969"}
{"input": "<s> private static void deleteTexture ( final int handle ) {", "gt": "final int [ ] handles = { handle } ;", "repo": "RedReader", "task_id": "RedReader/970"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouchEvent ( final MotionEvent event ) { mFingerTracker . onTouchEvent ( event ) ;", "gt": "requestRender ( ) ;", "repo": "RedReader", "task_id": "RedReader/971"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) {", "gt": "super . onAttachedToWindow ( ) ;", "repo": "RedReader", "task_id": "RedReader/972"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) {", "gt": "super . onDetachedFromWindow ( ) ;", "repo": "RedReader", "task_id": "RedReader/973"}
{"input": "<s> private void setIconResource ( final int resource ) { if ( resource ! = mCurrentIconResource ) { mCurrentIconResource = resource ;", "gt": "mIcon . setImageResource ( resource ) ;", "repo": "RedReader", "task_id": "RedReader/974"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouch ( final View v , final MotionEvent event ) {", "gt": "mFingerTracker . onTouchEvent ( event ) ;", "repo": "RedReader", "task_id": "RedReader/976"}
{"input": "<s> @ Override public void onFingerDown ( final FingerTracker . Finger finger ) { mCurrentFingerCount + + ; if ( mCurrentFingerCount > 1 ) {", "gt": "mFirstFinger = null ;", "repo": "RedReader", "task_id": "RedReader/977"}
{"input": "<s> @ Override public void onFingersMoved ( ) { if ( mFirstFinger ! = null ) {", "gt": "mListener . onHorizontalSwipe ( mFirstFinger . mTotalPosDifference . x ) ;", "repo": "RedReader", "task_id": "RedReader/978"}
{"input": "<s> @ Override public void onFingerUp ( final FingerTracker . Finger finger ) { mCurrentFingerCount - - ; if ( mFirstFinger ! = null ) { mListener . onHorizontalSwipeEnd ( ) ; if ( mFirstFinger . mDownDuration < <NUM_LIT> & & mFirstFinger . mPosDifference . x < <NUM_LIT:20> & & mFirstFinger . mPosDifference . y < <NUM_LIT:20> ) {", "gt": "mListener . onSingleTap ( ) ;", "repo": "RedReader", "task_id": "RedReader/979"}
{"input": "<s> public void convertScreenToScene ( final MutableFloatPoint2D screenPos , final MutableFloatPoint2D output ) {", "gt": "output . x = ( screenPos . x - mPositionOffset . x ) / mScale ;", "repo": "RedReader", "task_id": "RedReader/980"}
{"input": "<s> public void convertSceneToScreen ( final MutableFloatPoint2D scenePos , final MutableFloatPoint2D output ) {", "gt": "output . x = scenePos . x * mScale + mPositionOffset . x ;", "repo": "RedReader", "task_id": "RedReader/981"}
{"input": "<s> public void translateScreen ( final MutableFloatPoint2D oldScreenPos , final MutableFloatPoint2D newScreenPos ) {", "gt": "mPositionOffset . add ( newScreenPos ) ;", "repo": "RedReader", "task_id": "RedReader/983"}
{"input": "<s> @ Override public synchronized void onGLSceneResolutionChange ( final RRGLDisplayList scene , final RRGLContext context , final int width , final int height ) { mResolutionX = width ; mResolutionY = height ; final boolean setInitialScale = ( mBoundsHelper = = null ) ; mBoundsHelper = new BoundsHelper ( width , height , mImageTileSource . getWidth ( ) , mImageTileSource . getHeight ( ) , mCoordinateHelper ) ; if ( setInitialScale ) {", "gt": "mBoundsHelper . applyMinScale ( ) ;", "repo": "RedReader", "task_id": "RedReader/987"}
{"input": "<s> public synchronized void setResolution ( final int x , final int y ) {", "gt": "mResX = x ;", "repo": "RedReader", "task_id": "RedReader/990"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "super . onAdded ( ) ;", "repo": "RedReader", "task_id": "RedReader/991"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "mRenderable . onRemoved ( ) ;", "repo": "RedReader", "task_id": "RedReader/992"}
{"input": "<s> public synchronized void showBars ( ) { mShowUntil = System . currentTimeMillis ( ) + <NUM_LIT> ;", "gt": "mIsVisible = true ;", "repo": "RedReader", "task_id": "RedReader/993"}
{"input": "<s> public Bitmap get ( ) { synchronized ( mLock ) { if ( ! mWanted ) {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/996"}
{"input": "<s> public void enqueue ( final ImageViewTileLoader tile ) { synchronized ( mQueue ) { mQueue . addLast ( tile ) ;", "gt": "mThreads . triggerOne ( ) ;", "repo": "RedReader", "task_id": "RedReader/998"}
{"input": "<s> @ Override public void run ( ) { while ( true ) { final ImageViewTileLoader tile ; synchronized ( mQueue ) { if ( mQueue . isEmpty ( ) ) { return ; }", "gt": "tile = mQueue . removeFirst ( ) ;", "repo": "RedReader", "task_id": "RedReader/999"}
{"input": "<s> public void markAsWanted ( final int desiredScaleIndex ) { if ( desiredScaleIndex = = mDesiredScaleIndex ) { return ; } mDesiredScaleIndex = desiredScaleIndex ; synchronized ( mLock ) { mTileLoaders [ desiredScaleIndex ] . markAsWanted ( ) ; for ( int s = 0 ; s < mTileLoaders . length ; s + + ) { if ( s ! = desiredScaleIndex ) {", "gt": "mTileLoaders [ s ] . markAsUnwanted ( ) ;", "repo": "RedReader", "task_id": "RedReader/1000"}
{"input": "<s> public void setIndentation ( final int indent ) { getLayoutParams ( ) . width = ( mPixelsPerIndent * indent ) ; mIndent = indent ; if ( mPrefDrawLines ) {", "gt": "mLineBuffer = new float [ mIndent * <NUM_LIT:4> ] ;", "repo": "RedReader", "task_id": "RedReader/1002"}
{"input": "<s> @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ;", "repo": "RedReader", "task_id": "RedReader/1006"}
{"input": "<s> @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ;", "repo": "RedReader", "task_id": "RedReader/1007"}
{"input": "<s> private void sendMessage ( final String text , final int what ) { final Message msg = Message . obtain ( ) ; msg . obj = text ;", "gt": "msg . what = what ;", "repo": "RedReader", "task_id": "RedReader/1009"}
{"input": "<s> public void hideNoAnim ( ) { setVisibility ( GONE ) ; removeAllViews ( ) ;", "gt": "contents = null ;", "repo": "RedReader", "task_id": "RedReader/1011"}
{"input": "<s> public void calculateStep ( ) { mVelocity - = mParams . stepLengthSeconds * ( ( mPosition - mParams . endPosition ) * mParams . accelerationCoefficient ) ; mVelocity * = mParams . velocityDamping ;", "gt": "mPosition + = mVelocity * mParams . stepLengthSeconds ;", "repo": "RedReader", "task_id": "RedReader/1012"}
{"input": "<s> public boolean isEndThresholdReached ( ) { if ( mStep > = mParams . thresholdMaxSteps ) { return true ; } if ( Math . abs ( mPosition ) > mParams . thresholdPositionDifference ) { return false ; }", "gt": "if ( Math . abs ( mVelocity ) > mParams . thresholdVelocity ) {", "repo": "RedReader", "task_id": "RedReader/1013"}
{"input": "<s> public void handleInboxClick ( final BaseActivity activity ) { if ( currentItem ! = null ) {", "gt": "currentItem . handleInboxClick ( activity ) ;", "repo": "RedReader", "task_id": "RedReader/1021"}
{"input": "<s> public void handleInboxLongClick ( final BaseActivity activity ) { if ( currentItem ! = null ) {", "gt": "currentItem . handleInboxLongClick ( activity ) ;", "repo": "RedReader", "task_id": "RedReader/1022"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mChangeListenerAddTask ! = null ) {", "gt": "mChangeListenerAddTask . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/1023"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) { super . onDetachedFromWindow ( ) ; if ( mChangeListenerRemoveTask ! = null ) {", "gt": "mChangeListenerRemoveTask . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/1024"}
{"input": "<s> @ NonNull @ Override protected String getFlingLeftText ( ) { mLeftFlingAction = RedditPostActions . ActionDescriptionPair . from ( mPost , mLeftFlingPref ) ; if ( mLeftFlingAction ! = null ) {", "gt": "return mActivity . getString ( mLeftFlingAction . getDescriptionRes ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/1025"}
{"input": "<s> @ NonNull @ Override protected String getFlingRightText ( ) { mRightFlingAction = RedditPostActions . ActionDescriptionPair . from ( mPost , mRightFlingPref ) ; if ( mRightFlingAction ! = null ) {", "gt": "return mActivity . getString ( mRightFlingAction . getDescriptionRes ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/1026"}
{"input": "<s> @ Override public void betterThumbnailAvailable ( final Bitmap thumbnail , final int callbackUsageId ) { final Message msg = Message . obtain ( ) ; msg . obj = thumbnail ;", "gt": "msg . what = callbackUsageId ;", "repo": "RedReader", "task_id": "RedReader/1028"}
{"input": "<s> private void setBottomMargin ( final boolean enabled ) { final MarginLayoutParams layoutParams = ( MarginLayoutParams ) mOuterView . getLayoutParams ( ) ; if ( enabled ) { layoutParams . bottomMargin = General . dpToPixels ( mActivity , <NUM_LIT:6> ) ;", "gt": "} else {", "repo": "RedReader", "task_id": "RedReader/1029"}
{"input": "<s> public final void stop ( ) { if ( ! mStarted ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; }", "gt": "if ( mStopped ) {", "repo": "RedReader", "task_id": "RedReader/1032"}
{"input": "<s> @ Override protected boolean handleFrame ( final long nanosSinceAnimationStart ) { mLayoutParams . height = ( int ) ( mStartHeight * interpolateSine ( <NUM_LIT:1.0> - ( double ) nanosSinceAnimationStart / ( double ) DURATION_NANOS ) ) ; mTarget . setLayoutParams ( mLayoutParams ) ; final boolean finished = nanosSinceAnimationStart > DURATION_NANOS ;", "gt": "if ( finished ) {", "repo": "RedReader", "task_id": "RedReader/1034"}
{"input": "<s> public void enablePullToRefresh ( @ NonNull final SwipeRefreshLayout . OnRefreshListener listener ) {", "gt": "mSwipeRefreshLayout . setOnRefreshListener ( listener ) ;", "repo": "RedReader", "task_id": "RedReader/1041"}
{"input": "<s> private void showScrollbar ( ) {", "gt": "mScrollbar . animate ( ) . cancel ( ) ;", "repo": "RedReader", "task_id": "RedReader/1042"}
{"input": "<s> public void bind ( @ NonNull final AppCompatActivity activity , @ NonNull final EventListenerSet < String > querySource ) { mActivity = activity ; if ( mBinding ! = null ) {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ;", "repo": "RedReader", "task_id": "RedReader/1044"}
{"input": "<s> private void doBind ( ) { if ( mBinding ! = null ) { mBindingListener = this : : update ;", "gt": "update ( mBinding . register ( mBindingListener ) ) ;", "repo": "RedReader", "task_id": "RedReader/1045"}
{"input": "<s> private void doUnbind ( ) { if ( mBinding ! = null & & mBindingListener ! = null ) { mBinding . unregister ( mBindingListener ) ;", "gt": "mBindingListener = null ;", "repo": "RedReader", "task_id": "RedReader/1046"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) {", "gt": "super . onAttachedToWindow ( ) ;", "repo": "RedReader", "task_id": "RedReader/1047"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) {", "gt": "super . onDetachedFromWindow ( ) ;", "repo": "RedReader", "task_id": "RedReader/1048"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mRunnableOnAttach ! = null ) {", "gt": "mRunnableOnAttach . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/1050"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) { super . onDetachedFromWindow ( ) ; if ( mRunnableOnDetach ! = null ) {", "gt": "mRunnableOnDetach . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/1051"}
{"input": "<s> @ Override public void onSubredditSubscriptionListUpdated ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ;", "repo": "RedReader", "task_id": "RedReader/1052"}
{"input": "<s> @ Override public void onSubredditSubscriptionAttempted ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ;", "repo": "RedReader", "task_id": "RedReader/1053"}
{"input": "<s> @ Override public void onSubredditUnsubscriptionAttempted ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ;", "repo": "RedReader", "task_id": "RedReader/1054"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( @ NonNull final SharedPrefsWrapper sharedPreferences , @ NonNull final String key ) { if ( mRunnableOnPinnedChange ! = null & & key . equals ( mContext . getString ( R . string . pref_pinned_subreddits_key ) ) ) {", "gt": "mRunnableOnPinnedChange . run ( ) ;", "repo": "RedReader", "task_id": "RedReader/1055"}
{"input": "<s> protected void resetSwipeState ( ) { mSwipeHistory . clear ( ) ; mSwipeStart = null ; mSwipeStartPointerId = - 1 ; mSwipeInProgress = false ;", "gt": "mCurrentSwipeDelta = 0 ;", "repo": "RedReader", "task_id": "RedReader/1056"}
{"input": "<s> private void onFingerSwipeMove ( ) {", "gt": "mSwipeHistory . add ( mCurrentSwipeDelta , System . currentTimeMillis ( ) ) ;", "repo": "RedReader", "task_id": "RedReader/1059"}
{"input": "<s> private void onSwipeCancelled ( ) { mVelocity = 0 ; mOverallSwipeDelta + = mCurrentSwipeDelta ;", "gt": "mCurrentSwipeDelta = 0 ;", "repo": "RedReader", "task_id": "RedReader/1061"}
{"input": "<s> private void startSwipeAnimation ( final SwipeAnimation animation ) { if ( mCurrentSwipeAnimation ! = null ) {", "gt": "mCurrentSwipeAnimation . stop ( ) ;", "repo": "RedReader", "task_id": "RedReader/1063"}
{"input": "<s> private void cancelSwipeAnimation ( ) { if ( mCurrentSwipeAnimation ! = null ) { mCurrentSwipeAnimation . stop ( ) ;", "gt": "mCurrentSwipeAnimation = null ;", "repo": "RedReader", "task_id": "RedReader/1064"}
{"input": "<s> @ Override protected void onUpdatedPosition ( final float position ) {", "gt": "mOverallSwipeDelta = position ;", "repo": "RedReader", "task_id": "RedReader/1065"}
{"input": "<s> @ Override protected void onEndPosition ( final float endPosition ) { mOverallSwipeDelta = endPosition ;", "gt": "updateOffset ( ) ;", "repo": "RedReader", "task_id": "RedReader/1066"}
{"input": "<s> public float getAtTimeAgoMs ( final long timeAgo ) { final long timestamp = timestamps [ getNthMostRecentIndex ( 0 ) ] - timeAgo ; float result = getMostRecent ( ) ; for ( int i = 0 ; i < len ; i + + ) { final int index = getNthMostRecentIndex ( i ) ; if ( timestamp > timestamps [ index ] ) { return result ; } else {", "gt": "result = positions [ index ] ;", "repo": "RedReader", "task_id": "RedReader/1069"}
{"input": "<s> public void clear ( ) {", "gt": "len = 0 ;", "repo": "RedReader", "task_id": "RedReader/1071"}
{"input": "<s> @ Override public int read ( final byte [ ] buffer , final int offset , final int readLength ) throws IOException { if ( readLength = = 0 ) { return 0 ; } final int result = Objects . requireNonNull ( mCurrentStream ) . read ( buffer , offset , readLength ) ; if ( result < 0 ) {", "gt": "return C . RESULT_END_OF_INPUT ;", "repo": "RedReader", "task_id": "RedReader/1073"}
{"input": "<s> @ Override public void close ( ) throws IOException { if ( mCurrentStream ! = null ) {", "gt": "mCurrentStream . close ( ) ;", "repo": "RedReader", "task_id": "RedReader/1074"}
{"input": "<s> @ Override public void run ( ) { updateProgress ( ) ; if ( ! mReleased ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . postDelayed ( this , <NUM_LIT> ) ;", "repo": "RedReader", "task_id": "RedReader/1075"}
{"input": "<s> @ Override public void onPlayerError ( @ NonNull final PlaybackException error ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" , error ) ;", "repo": "RedReader", "task_id": "RedReader/1076"}
{"input": "<s> public void handleTap ( ) { if ( mControlView = = null ) { return ; } if ( mControlView . getVisibility ( ) ! = VISIBLE ) {", "gt": "mControlView . setVisibility ( VISIBLE ) ;", "repo": "RedReader", "task_id": "RedReader/1077"}
{"input": "<s> public void release ( ) { if ( ! mReleased ) {", "gt": "removeAllViews ( ) ;", "repo": "RedReader", "task_id": "RedReader/1078"}
{"input": "<s> @ Override public View getVideoLoadingProgressView ( ) { if ( loadingView ! = null ) { loadingView . setVisibility ( View . VISIBLE ) ;", "gt": "return loadingView ;", "repo": "RedReader", "task_id": "RedReader/1082"}
{"input": "<s> @ Override public void onPrepared ( final MediaPlayer mp ) { if ( loadingView ! = null ) {", "gt": "loadingView . setVisibility ( View . GONE ) ;", "repo": "RedReader", "task_id": "RedReader/1083"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) public boolean onBackPressed ( ) { if ( isVideoFullscreen ) { onHideCustomView ( ) ;", "gt": "return true ;", "repo": "RedReader", "task_id": "RedReader/1085"}
{"input": "<s> @ Override public void loadData ( final String data , final String mimeType , final String encoding ) {", "gt": "addJavascriptInterface ( ) ;", "repo": "RedReader", "task_id": "RedReader/1088"}
{"input": "<s> @ Override public void loadDataWithBaseURL ( final String baseUrl , final String data , final String mimeType , final String encoding , final String historyUrl ) {", "gt": "addJavascriptInterface ( ) ;", "repo": "RedReader", "task_id": "RedReader/1089"}
{"input": "<s> @ Override public void loadUrl ( final String url ) {", "gt": "addJavascriptInterface ( ) ;", "repo": "RedReader", "task_id": "RedReader/1091"}
{"input": "<s> @ Override public void loadUrl ( final String url , final Map < String , String > additionalHttpHeaders ) {", "gt": "addJavascriptInterface ( ) ;", "repo": "RedReader", "task_id": "RedReader/1092"}
{"input": "<s> public void clearBrowser ( ) { this . clearCache ( true ) ; this . clearFormData ( ) ;", "gt": "this . clearHistory ( ) ;", "repo": "RedReader", "task_id": "RedReader/1095"}
{"input": "<s> private void setUsername ( String name ) { Context context = username . getContext ( ) ; String format = context . getString ( R . string . post_username_format ) ;", "gt": "String usernameText = String . format ( format , name ) ;", "repo": "Tusky", "task_id": "Tusky/16"}
{"input": "<s> void setupButtons ( final NotificationActionListener listener , final String accountId , final String notificationId ) { this . notificationActionListener = listener ;", "gt": "this . accountId = accountId ;", "repo": "Tusky", "task_id": "Tusky/18"}
{"input": "<s> fun getSelected ( ) : List < Int > {", "gt": "return pollOptions . filter { it . selected }", "repo": "Tusky", "task_id": "Tusky/23"}
{"input": "<s> protected void setUsername ( @ Nullable String name ) { Context context = username . getContext ( ) ;", "gt": "String usernameText = context . getString ( R . string . post_username_format , name ) ;", "repo": "Tusky", "task_id": "Tusky/30"}
{"input": "<s> private void hidePoll ( ) { pollButton . setVisibility ( View . GONE ) ;", "gt": "pollDescription . setVisibility ( View . GONE ) ;", "repo": "Tusky", "task_id": "Tusky/33"}
{"input": "<s> protected void hideSensitiveMediaWarning ( ) {", "gt": "sensitiveMediaWarning . setVisibility ( View . GONE ) ;", "repo": "Tusky", "task_id": "Tusky/37"}
{"input": "<s> protected static boolean hasPreviewableAttachment ( @ NonNull List < Attachment > attachments ) { for ( Attachment attachment : attachments ) { if ( attachment . getType ( ) = = Attachment . Type . AUDIO | | attachment . getType ( ) = = Attachment . Type . UNKNOWN ) {", "gt": "return false ;", "repo": "Tusky", "task_id": "Tusky/38"}
{"input": "<s> private void hideQuantitativeStats ( ) { reblogs . setVisibility ( View . GONE ) ;", "gt": "favourites . setVisibility ( View . GONE ) ;", "repo": "Tusky", "task_id": "Tusky/44"}
{"input": "<s> public void showStatusContent ( boolean show ) {", "gt": "super . showStatusContent ( show ) ;", "repo": "Tusky", "task_id": "Tusky/47"}
{"input": "<s> public void startActivityWithSlideInAnimation ( @ NonNull Intent intent ) {", "gt": "super . startActivity ( intent ) ;", "repo": "Tusky", "task_id": "Tusky/53"}
{"input": "<s> @ Override public void finish ( ) {", "gt": "super . finish ( ) ;", "repo": "Tusky", "task_id": "Tusky/55"}
{"input": "<s> public void openAsAccount ( @ NonNull String url , @ NonNull AccountEntity account ) { accountManager . setActiveAccount ( account . getId ( ) ) ; Intent intent = MainActivity . redirectIntent ( this , account . getId ( ) , url ) ;", "gt": "startActivity ( intent ) ;", "repo": "Tusky", "task_id": "Tusky/58"}
{"input": "<s> fun viewAccount ( id : String ) {", "gt": "val intent = AccountActivity . getIntent ( this , id )", "repo": "Tusky", "task_id": "Tusky/61"}
{"input": "<s> @ VisibleForTesting fun onBeginSearch ( url : String ) {", "gt": "searchUrl = url", "repo": "Tusky", "task_id": "Tusky/63"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( this , tag )", "repo": "Tusky", "task_id": "Tusky/80"}
{"input": "<s> override fun onViewAccount ( id : String ) { val intent = Intent ( this , AccountActivity : : class . java )", "gt": "intent . putExtra ( \" <STR_LIT> \" , id )", "repo": "Tusky", "task_id": "Tusky/81"}
{"input": "<s> fun revealAttachment ( viewData : AttachmentViewData ) { val position = attachmentData . indexOfFirst { oldViewData - > oldViewData . id = = viewData . id }", "gt": "attachmentData [ position ] = viewData . copy ( isRevealed = true )", "repo": "Tusky", "task_id": "Tusky/107"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "type = requireArguments ( ) . getSerializable ( ARG_TYPE ) as Type", "repo": "Tusky", "task_id": "Tusky/110"}
{"input": "<s> override fun onViewTag ( tag : String ) { ( activity as BaseActivity ? ) ? . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag )", "repo": "Tusky", "task_id": "Tusky/111"}
{"input": "<s> override fun onMute ( mute : Boolean , id : String , position : Int , notifications : Boolean ) { viewLifecycleOwner . lifecycleScope . launch { try { if ( ! mute ) { api . unmuteAccount ( id ) } else { api . muteAccount ( id , notifications ) } onMuteSuccess ( mute , id , position , notifications )", "gt": "} catch ( _ : Throwable ) {", "repo": "Tusky", "task_id": "Tusky/113"}
{"input": "<s> override fun onBlock ( block : Boolean , id : String , position : Int ) { viewLifecycleOwner . lifecycleScope . launch { try { if ( ! block ) { api . unblockAccount ( id ) } else { api . blockAccount ( id ) } onBlockSuccess ( block , id , position )", "gt": "} catch ( _ : Throwable ) {", "repo": "Tusky", "task_id": "Tusky/115"}
{"input": "<s> fun updateMutingNotifications ( id : String , mutingNotifications : Boolean , position : Int ) {", "gt": "mutingNotificationsMap [ id ] = mutingNotifications", "repo": "Tusky", "task_id": "Tusky/138"}
{"input": "<s> override fun openReactionPicker ( announcementId : String , target : View ) {", "gt": "currentAnnouncementId = announcementId", "repo": "Tusky", "task_id": "Tusky/145"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( this , tag )", "repo": "Tusky", "task_id": "Tusky/147"}
{"input": "<s> private fun removePoll ( ) {", "gt": "viewModel . poll . value = null", "repo": "Tusky", "task_id": "Tusky/154"}
{"input": "<s> private fun onContentWarningChanged ( ) { val showWarning = binding . composeContentWarningBar . isGone", "gt": "viewModel . contentWarningChanged ( showWarning )", "repo": "Tusky", "task_id": "Tusky/157"}
{"input": "<s> private fun sanitizePickMediaDescription ( description : String ? ) : String ? { if ( description = = null ) { return null } if ( \" <STR_LIT> \" in description ) {", "gt": "return null", "repo": "Tusky", "task_id": "Tusky/161"}
{"input": "<s> fun contentWarningChanged ( value : Boolean ) {", "gt": "showContentWarning . value = value", "repo": "Tusky", "task_id": "Tusky/178"}
{"input": "<s> fun updateScheduledAt ( newScheduledAt : String ? ) { if ( newScheduledAt ! = scheduledAt . value ) {", "gt": "hasScheduledTimeChanged = true", "repo": "Tusky", "task_id": "Tusky/184"}
{"input": "<s> fun resetSchedule ( ) {", "gt": "scheduleDateTimeUtc = null", "repo": "Tusky", "task_id": "Tusky/199"}
{"input": "<s> fun getDateTime ( scheduledAt : String ? ) : Date ? { scheduledAt ? . let { try { return iso8601 . parse ( it )", "gt": "} catch ( _ : ParseException ) {", "repo": "Tusky", "task_id": "Tusky/201"}
{"input": "<s> override fun onViewAccount ( id : String ) {", "gt": "val intent = AccountActivity . getIntent ( requireContext ( ) , id )", "repo": "Tusky", "task_id": "Tusky/240"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( requireContext ( ) , tag )", "repo": "Tusky", "task_id": "Tusky/241"}
{"input": "<s> private void setAvatars ( List < ConversationAccountEntity > accounts ) { for ( int i = 0 ; i < avatars . length ; i + + ) { ImageView avatarView = avatars [ i ] ; if ( i < accounts . size ( ) ) { ImageLoadingHelper . loadAvatar ( accounts . get ( i ) . getAvatar ( ) , avatarView , avatarRadius48dp , statusDisplayOptions . animateAvatars ( ) , null ) ; avatarView . setVisibility ( View . VISIBLE ) ;", "gt": "} else {", "repo": "Tusky", "task_id": "Tusky/252"}
{"input": "<s> fun addContext ( context : Filter . Kind ) { if ( ! contexts . value . contains ( context ) ) {", "gt": "contexts . value + = context", "repo": "Tusky", "task_id": "Tusky/275"}
{"input": "<s> public static void deleteNotificationChannelsForAccount ( @ NonNull AccountEntity account , @ NonNull Context context ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . O ) { NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ;", "gt": "notificationManager . deleteNotificationChannelGroup ( account . getIdentifier ( ) ) ;", "repo": "Tusky", "task_id": "Tusky/304"}
{"input": "<s> fun disableUnifiedPushNotificationsForAccount ( context : Context , account : AccountEntity ) { if ( ! isUnifiedPushNotificationEnabledForAccount ( account ) ) { return </s", "gt": "fun disableUnifiedPushNotificationsForAccount ( context : Context , account : AccountEntity ) { if ( ! isUnifiedPushNotificationEnabledForAccount ( account ) ) { return", "repo": "Tusky", "task_id": "Tusky/310"}
{"input": "<s> override fun onPause ( ) { super . onPause ( )", "gt": "if ( pendingRestart ) {", "repo": "Tusky", "task_id": "Tusky/330"}
{"input": "<s> fun newSearch ( newSearchRequest : String ) {", "gt": "this . searchRequest = newSearchRequest", "repo": "Tusky", "task_id": "Tusky/379"}
{"input": "<s> private fun openReportPage ( accountId : String , accountUsername : String , statusId : String ) { startActivity (", "gt": "ReportActivity . getIntent ( requireContext ( ) , accountId , accountUsername , statusId )", "repo": "Tusky", "task_id": "Tusky/409"}
{"input": "<s> private fun updateStatus ( newStatus : Status ) { val statusViewData = loadedStatuses . find { it . id = = newStatus . id } if ( statusViewData ! = null ) {", "gt": "updateStatusViewData ( statusViewData . copy ( status = newStatus ) )", "repo": "Tusky", "task_id": "Tusky/430"}
{"input": "<s> override fun onViewAccount ( id : String ) { if ( ( viewModel . kind = = TimelineViewModel . Kind . USER | | viewModel . kind = = TimelineViewModel . Kind . USER_WITH_REPLIES ) & & viewModel . id = = id ) { </s", "gt": "override fun onViewAccount ( id : String ) { if ( ( viewModel . kind = = TimelineViewModel . Kind . USER | | viewModel . kind = = TimelineViewModel . Kind . USER_WITH_REPLIES ) & & viewModel . id = = id ) {", "repo": "Tusky", "task_id": "Tusky/452"}
{"input": "<s> override fun changeExpanded ( expanded : Boolean , status : StatusViewData . Concrete ) { viewModelScope . launch {", "gt": "db . timelineDao ( ) . setExpanded ( accountManager . activeAccount ! ! . id , status . id , expanded )", "repo": "Tusky", "task_id": "Tusky/464"}
{"input": "<s> override fun updatePoll ( newPoll : Poll , status : StatusViewData . Concrete ) { status . copy (", "gt": "status = status . status . copy ( poll = newPoll )", "repo": "Tusky", "task_id": "Tusky/475"}
{"input": "<s> override fun fullReload ( ) { nextKey = statusData . firstOrNull { it is StatusViewData . Concrete } ? . asStatusOrNull ( ) ? . id", "gt": "statusData . clear ( )", "repo": "Tusky", "task_id": "Tusky/484"}
{"input": "<s> override fun clearWarning ( status : StatusViewData . Concrete ) { updateActionableStatusById ( status . id ) {", "gt": "it . copy ( filtered = null )", "repo": "Tusky", "task_id": "Tusky/485"}
{"input": "<s> fun onViewTag ( tag : String ) { ( requireActivity ( ) as BaseActivity ) . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag )", "repo": "Tusky", "task_id": "Tusky/500"}
{"input": "<s> override fun updateDrawState ( tp : TextPaint ) {", "gt": "tp . bgColor = bgColor", "repo": "Tusky", "task_id": "Tusky/507"}
{"input": "<s> override fun updateDrawState ( tp : TextPaint ) {", "gt": "tp . bgColor = bgColor", "repo": "Tusky", "task_id": "Tusky/508"}
{"input": "<s> override fun onReblog ( reblog : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ]", "repo": "Tusky", "task_id": "Tusky/523"}
{"input": "<s> override fun onFavourite ( favourite : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ]", "repo": "Tusky", "task_id": "Tusky/524"}
{"input": "<s> override fun onBookmark ( bookmark : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ]", "repo": "Tusky", "task_id": "Tusky/525"}
{"input": "<s> override fun onViewUrl ( url : String ) { val status : StatusViewData . Concrete ? = viewModel . detailedStatus ( ) if ( status ! = null & & status . status . url = = url ) { requireContext ( ) . openLink ( url ) </s", "gt": "override fun onViewUrl ( url : String ) { val status : StatusViewData . Concrete ? = viewModel . detailedStatus ( ) if ( status ! = null & & status . status . url = = url ) { requireContext ( ) . openLink ( url )", "repo": "Tusky", "task_id": "Tusky/528"}
{"input": "<s> override fun onVoteInPoll ( position : Int , choices : List < Int > ) {", "gt": "val status = adapter . currentList [ position ]", "repo": "Tusky", "task_id": "Tusky/532"}
{"input": "<s> fun changeContentShowing ( isShowing : Boolean , status : StatusViewData . Concrete ) { updateStatusViewData ( status . id ) { viewData - >", "gt": "viewData . copy ( isShowingContent = isShowing )", "repo": "Tusky", "task_id": "Tusky/542"}
{"input": "<s> fun changeContentCollapsed ( isCollapsed : Boolean , status : StatusViewData . Concrete ) { updateStatusViewData ( status . id ) { viewData - >", "gt": "viewData . copy ( isCollapsed = isCollapsed )", "repo": "Tusky", "task_id": "Tusky/543"}
{"input": "<s> fun clearWarning ( viewData : StatusViewData . Concrete ) { updateStatus ( viewData . id ) { status - >", "gt": "status . copy ( filtered = null )", "repo": "Tusky", "task_id": "Tusky/555"}
{"input": "<s> fun setActiveAccount ( accountId : Long ) { val newActiveAccount = accounts . find { ( id ) - > id = = accountId } ? : return activeAccount ? . let { Log . d ( TAG , \" <STR_LIT> \" + it . id ) it . isActive = false saveAccount ( it ) } activeAccount = newActiveAccount", "gt": "activeAccount ? . let {", "repo": "Tusky", "task_id": "Tusky/560"}
{"input": "<s> fun shouldDisplaySelfUsername ( context : Context ) : Boolean { val sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) val showUsernamePreference = sharedPreferences . getString ( PrefKeys . SHOW_SELF_USERNAME , \" <STR_LIT> \" ) if ( showUsernamePreference = = \" <STR_LIT> \" ) { return true } if ( showUsernamePreference = = \" <STR_LIT> \" ) {", "gt": "return false", "repo": "Tusky", "task_id": "Tusky/564"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) { database . execSQL ( \" <STR_LIT> \" ) ; database . execSQL ( \" <STR_LIT> \" ) ;", "gt": "database . execSQL ( \" <STR_LIT> \" ) ;", "repo": "Tusky", "task_id": "Tusky/565"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) {", "gt": "MIGRATION_11_12 . migrate ( database ) ;", "repo": "Tusky", "task_id": "Tusky/569"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) {", "gt": "database . execSQL ( \" <STR_LIT> \" ) ;", "repo": "Tusky", "task_id": "Tusky/576"}
{"input": "<s> public static NotificationsFragment newInstance ( ) { NotificationsFragment fragment = new NotificationsFragment ( ) ; Bundle arguments = new Bundle ( ) ;", "gt": "fragment . setArguments ( arguments ) ;", "repo": "Tusky", "task_id": "Tusky/611"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "Tusky", "task_id": "Tusky/612"}
{"input": "<s> @ Override public boolean onMenuItemSelected ( @ NonNull MenuItem menuItem ) { if ( menuItem . getItemId ( ) = = R . id . action_refresh ) { binding . swipeRefreshLayout . setRefreshing ( true ) ; onRefresh ( ) ; return true ; } else if ( menuItem . getItemId ( ) = = R . id . action_edit_notification_filter ) { showFilterMenu ( ) ; return true ; } else if ( menuItem . getItemId ( ) = = R . id . action_clear_notifications ) {", "gt": "confirmClearNotifications ( ) ;", "repo": "Tusky", "task_id": "Tusky/613"}
{"input": "<s> @ Override public void onRefresh ( ) { binding . statusView . setVisibility ( View . GONE ) ; this . showingError = false ; Either < Placeholder , Notification > first = CollectionsKt . firstOrNull ( this . notifications ) ; String topId ; if ( first ! = null & & first . isRight ( ) ) { topId = first . asRight ( ) . getId ( ) ;", "gt": "} else {", "repo": "Tusky", "task_id": "Tusky/614"}
{"input": "<s> @ Override public void removeItem ( int position ) {", "gt": "notifications . remove ( position ) ;", "repo": "Tusky", "task_id": "Tusky/627"}
{"input": "<s> private fun hideToolbarAfterDelay ( delayMilliseconds : Int ) {", "gt": "pendingHideToolbar = true", "repo": "Tusky", "task_id": "Tusky/655"}
{"input": "<s> private fun onListSelected ( list : MastoList ) { startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newListIntent ( this , list . id , list . title )", "repo": "Tusky", "task_id": "Tusky/665"}
{"input": "<s> private fun filterToRegexToken ( filter : FilterV1 ) : String ? { val phrase = filter . phrase val quotedPhrase = Pattern . quote ( phrase ) return if ( filter . wholeWord & & ALPHANUMERIC . matcher ( phrase ) . matches ( ) ) {", "gt": "String . format ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> \" , quotedPhrase )", "repo": "Tusky", "task_id": "Tusky/687"}
{"input": "<s> override fun onTransitionEnd ( position : Int ) {", "gt": "this . didTransition = true", "repo": "Tusky", "task_id": "Tusky/690"}
{"input": "<s> < A > PreferenceParent . emojiPreference ( activity : A , builder : EmojiPickerPreference . ( ) - > Unit ) : EmojiPickerPreference where A : Context , A : ActivityResultRegistryOwner , A : LifecycleOwner { val pref = EmojiPickerPreference . get ( activity ) builder ( pref )", "gt": "addPref ( pref )", "repo": "Tusky", "task_id": "Tusky/709"}
{"input": "<s> override fun onChipClicked ( tab : TabData , tabPosition : Int , chipPosition : Int ) { val newArguments = tab . arguments . filterIndexed { i , _ - > i ! = chipPosition } val newTab = tab . copy ( arguments = newArguments )", "gt": "currentTabs [ tabPosition ] = newTab", "repo": "Tusky", "task_id": "Tusky/725"}
{"input": "<s> private fun formatDuration ( durationInSeconds : Double ) : String { val seconds = durationInSeconds . roundToInt ( ) % <NUM_LIT> val minutes = durationInSeconds . toInt ( ) % <NUM_LIT> / <NUM_LIT>", "gt": "val hours = durationInSeconds . toInt ( ) / <NUM_LIT>", "repo": "Tusky", "task_id": "Tusky/750"}
{"input": "<s> private fun decodeDc ( colorEnc : Int ) : FloatArray { val r = colorEnc shr <NUM_LIT:16> val g = ( colorEnc shr <NUM_LIT:8> ) and <NUM_LIT:255>", "gt": "val b = colorEnc and <NUM_LIT:255>", "repo": "Tusky", "task_id": "Tusky/753"}
{"input": "<s> private fun secureRandomBytes ( len : Int ) : ByteArray { val ret = ByteArray ( len )", "gt": "SecureRandom . getInstance ( \" <STR_LIT> \" ) . nextBytes ( ret )", "repo": "Tusky", "task_id": "Tusky/759"}
{"input": "<s> fun calculateScaling ( viewWidth : Float , viewHeight : Float , imageWidth : Float , imageHeight : Float ) : Float { return if ( isVerticalCrop ( viewWidth , viewHeight , imageWidth , imageHeight ) ) {", "gt": "viewWidth / imageWidth", "repo": "Tusky", "task_id": "Tusky/764"}
{"input": "<s> @ VisibleForTesting fun getTagName ( text : CharSequence , tags : List < HashTag > ? ) : String ? { val scrapedName = normalizeToASCII ( text . subSequence ( 1 , text . length ) ) . toString ( ) return when ( tags ) {", "gt": "null - > scrapedName", "repo": "Tusky", "task_id": "Tusky/772"}
{"input": "<s> private fun getCustomSpanForTag ( text : CharSequence , tags : List < HashTag > ? , span : URLSpan , listener : LinkListener ) : ClickableSpan ? { return getTagName ( text , tags ) ? . let { object : NoUnderlineURLSpan ( span . url ) {", "gt": "override fun onClick ( view : View ) = listener . onViewTag ( it )", "repo": "Tusky", "task_id": "Tusky/773"}
{"input": "<s> < T > List < T > . withoutFirstWhich ( predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( ) </s", "gt": "< T > List < T > . withoutFirstWhich ( predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( )", "repo": "Tusky", "task_id": "Tusky/782"}
{"input": "<s> < T > List < T > . replacedFirstWhich ( replacement : T , predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( ) </s", "gt": "< T > List < T > . replacedFirstWhich ( replacement : T , predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( )", "repo": "Tusky", "task_id": "Tusky/783"}
{"input": "<s> fun getMediaSize ( contentResolver : ContentResolver , uri : Uri ? ) : Long { if ( uri = = null ) { return MEDIA_SIZE_UNKNOWN } var mediaSize = MEDIA_SIZE_UNKNOWN val cursor : Cursor ? try { cursor = contentResolver . query ( uri , null , null , null , null ) } catch ( e : SecurityException ) { return MEDIA_SIZE_UNKNOWN } if ( cursor ! = null ) { val sizeIndex = cursor . getColumnIndex ( OpenableColumns . SIZE ) cursor . moveToFirst ( )", "gt": "mediaSize = cursor . getLong ( sizeIndex )", "repo": "Tusky", "task_id": "Tusky/790"}
{"input": "<s> protected fun < T > getLast ( text : Spanned , kind : Class < T > ) : Any ? {", "gt": "val spans = text . getSpans ( 0 , text . length , kind )", "repo": "Tusky", "task_id": "Tusky/810"}
{"input": "<s> fun getDimension ( context : Context , @ AttrRes attribute : Int ) : Int { return context . obtainStyledAttributes ( intArrayOf ( attribute ) ) . use { array - >", "gt": "array . getDimensionPixelSize ( 0 , - 1 )", "repo": "Tusky", "task_id": "Tusky/818"}
{"input": "<s> override fun onValueChange ( slider : Slider , value : Float , fromUser : Boolean ) {", "gt": "if ( ! fromUser ) return", "repo": "Tusky", "task_id": "Tusky/848"}
{"input": "<s> @ Override public boolean deepEquals ( NotificationViewData other ) { if ( ! ( other instanceof Placeholder ) ) return false ;", "gt": "Placeholder that = ( Placeholder ) other ;", "repo": "Tusky", "task_id": "Tusky/851"}
{"input": "<s> fun buildDescription ( title : String , percent : Int , voted : Boolean , context : Context ) : Spanned { val builder = SpannableStringBuilder ( context . getString ( R . string . poll_percent_format , percent ) . parseAsHtml ( ) ) if ( voted ) { builder . append ( \" <STR_LIT> \" )", "gt": "} else {", "repo": "Tusky", "task_id": "Tusky/853"}
{"input": "<s> private fun onOpenStatus ( ) { val attach = attachments ! ! [ binding . viewPager . currentItem ] startActivityWithSlideInAnimation (", "gt": "ViewThreadActivity . startIntent ( this , attach . statusId , attach . statusUrl )", "repo": "Tusky", "task_id": "Tusky/860"}
{"input": "<s> @ Override public void addListener ( PlaylistEventListener listener ) {", "gt": "checkNotNull ( listener ) ;", "repo": "Xtra", "task_id": "Xtra/17"}
{"input": "<s> private boolean isVariantUrl ( Uri playlistUrl ) { List < Variant > variants = multivariantPlaylist . variants ; for ( int i = 0 ; i < variants . size ( ) ; i + + ) { if ( playlistUrl . equals ( variants . get ( i ) . url ) ) {", "gt": "return true ;", "repo": "Xtra", "task_id": "Xtra/22"}
{"input": "<s> public void maybeThrowPlaylistRefreshError ( ) throws IOException { mediaPlaylistLoader . maybeThrowError ( ) ; if ( playlistError ! = null ) {", "gt": "throw playlistError ;", "repo": "Xtra", "task_id": "Xtra/27"}
{"input": "<s> @ Nullable private static Variant getVariantWithAudioGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . audioGroupId ) ) {", "gt": "return variant ;", "repo": "Xtra", "task_id": "Xtra/32"}
{"input": "<s> @ Nullable private static Variant getVariantWithVideoGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . videoGroupId ) ) {", "gt": "return variant ;", "repo": "Xtra", "task_id": "Xtra/33"}
{"input": "<s> @ Nullable private static Variant getVariantWithSubtitleGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . subtitleGroupId ) ) {", "gt": "return variant ;", "repo": "Xtra", "task_id": "Xtra/34"}
{"input": "<s> @ EnsuresNonNullIf ( expression = \" <STR_LIT> \" , result = true ) public boolean hasNext ( ) throws IOException { if ( next ! = null ) { return true ; } if ( ! extraLines . isEmpty ( ) ) { next = checkNotNull ( extraLines . poll ( ) ) ; return true ; } while ( ( next = reader . readLine ( ) ) ! = null ) { next = next . trim ( ) ; if ( ! next . isEmpty ( ) ) {", "gt": "return true ;", "repo": "Xtra", "task_id": "Xtra/45"}
{"input": "<s> public String next ( ) throws IOException { if ( hasNext ( ) ) { String result = next ; next = null ;", "gt": "return result ;", "repo": "Xtra", "task_id": "Xtra/46"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) { super . onConfigurationChanged ( newConfig ) if ( newConfig . orientation = = Configuration . ORIENTATION_LANDSCAPE ) {", "gt": "binding . appBar . setExpanded ( false , false )", "repo": "Xtra", "task_id": "Xtra/100"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/101"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/102"}
{"input": "<s> override fun onRaidClicked ( ) {", "gt": "raidAutoSwitch = false", "repo": "Xtra", "task_id": "Xtra/118"}
{"input": "<s> override fun onRaidClose ( ) {", "gt": "raidAutoSwitch = false", "repo": "Xtra", "task_id": "Xtra/119"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( ) if ( enableNetworkCheck ) {", "gt": "isInitialized = false", "repo": "Xtra", "task_id": "Xtra/139"}
{"input": "<s> private fun init ( ) { initialize ( )", "gt": "isInitialized = true", "repo": "Xtra", "task_id": "Xtra/141"}
{"input": "<s> fun newInstance ( clip : Clip , qualities : Map < String , String > ? = null ) : ClipDownloadDialog { return ClipDownloadDialog ( ) . apply {", "gt": "arguments = bundleOf ( KEY_CLIP to clip , KEY_QUALITIES to qualities )", "repo": "Xtra", "task_id": "Xtra/151"}
{"input": "<s> fun setVideoInfo ( videoInfo : VideoDownloadInfo ) { if ( _videoInfo . value ! = videoInfo ) {", "gt": "_videoInfo . value = videoInfo", "repo": "Xtra", "task_id": "Xtra/159"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = FollowedChannelsAdapter ( this )", "repo": "Xtra", "task_id": "Xtra/162"}
{"input": "<s> fun newInstance ( sort : FollowSortEnum , order : FollowOrderEnum , saveDefault : Boolean = false ) : FollowedChannelsSortDialog { return FollowedChannelsSortDialog ( ) . apply {", "gt": "arguments = bundleOf ( SORT to sort , ORDER to order , SAVE_DEFAULT to saveDefault )", "repo": "Xtra", "task_id": "Xtra/166"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem )", "repo": "Xtra", "task_id": "Xtra/173"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/174"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/175"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/180"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/181"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = FollowedGamesAdapter ( this )", "repo": "Xtra", "task_id": "Xtra/185"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem )", "repo": "Xtra", "task_id": "Xtra/191"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/192"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/193"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/199"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/200"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/206"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "binding . webView . loadUrl ( \" <STR_LIT> \" )", "repo": "Xtra", "task_id": "Xtra/208"}
{"input": "<s> override fun onDismiss ( dialog : DialogInterface ) {", "gt": "binding . webView . loadUrl ( \" <STR_LIT> \" )", "repo": "Xtra", "task_id": "Xtra/209"}
{"input": "<s> override fun onDestroy ( ) { unregisterReceiver ( networkReceiver )", "gt": "if ( isFinishing ) {", "repo": "Xtra", "task_id": "Xtra/213"}
{"input": "<s> fun onPlayerStarted ( ) {", "gt": "isPlayerOpened = true", "repo": "Xtra", "task_id": "Xtra/217"}
{"input": "<s> fun onPlayerClosed ( ) {", "gt": "isPlayerOpened = false", "repo": "Xtra", "task_id": "Xtra/218"}
{"input": "<s> fun setResizeMode ( ) { resizeMode = ( resizeMode + 1 ) . let { if ( it < <NUM_LIT:5> ) it else 0 }", "gt": "playerView . resizeMode = resizeMode", "repo": "Xtra", "task_id": "Xtra/227"}
{"input": "<s> fun newInstance ( login : String , repository : ApiRepository ) : PlayerViewerListDialog { return PlayerViewerListDialog ( repository ) . apply {", "gt": "arguments = bundleOf ( LOGIN to login )", "repo": "Xtra", "task_id": "Xtra/262"}
{"input": "<s> override fun onBindViewHolder ( holder : ViewHolder , position : Int ) {", "gt": "val item = mData [ position ]", "repo": "Xtra", "task_id": "Xtra/266"}
{"input": "<s> fun checkBookmark ( id : String ) { viewModelScope . launch {", "gt": "bookmarkItem . postValue ( bookmarksRepository . getBookmarkByVideoId ( id ) )", "repo": "Xtra", "task_id": "Xtra/295"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem )", "repo": "Xtra", "task_id": "Xtra/308"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/309"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/310"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/315"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/316"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = ChannelSearchAdapter ( this )", "repo": "Xtra", "task_id": "Xtra/320"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = GamesAdapter ( this )", "repo": "Xtra", "task_id": "Xtra/324"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem )", "repo": "Xtra", "task_id": "Xtra/376"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( )", "repo": "Xtra", "task_id": "Xtra/377"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true )", "repo": "Xtra", "task_id": "Xtra/378"}
{"input": "<s> fun toggleEmoteMenu ( enable : Boolean ) { if ( enable ) { binding . emoteMenu . visible ( )", "gt": "} else {", "repo": "Xtra", "task_id": "Xtra/412"}
{"input": "<s> override fun onDetachedFromWindow ( ) {", "gt": "binding . recyclerView . adapter = null", "repo": "Xtra", "task_id": "Xtra/415"}
{"input": "<s> override fun onFinishInflate ( ) { super . onFinishInflate ( ) dragView = getChildAt ( 0 )", "gt": "secondView = getChildAt ( 1 )", "repo": "Xtra", "task_id": "Xtra/431"}
{"input": "<s> private fun animate ( scaleX : Float , scaleY : Float ) { val sclX = PropertyValuesHolder . ofFloat ( \" <STR_LIT:X> \" , scaleX ) val sclY = PropertyValuesHolder . ofFloat ( \" <STR_LIT:Y> \" , scaleY ) ObjectAnimator . ofPropertyValuesHolder ( this , sclX , sclY ) . apply {", "gt": "duration = ANIMATION_DURATION", "repo": "Xtra", "task_id": "Xtra/439"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false", "repo": "Xtra", "task_id": "Xtra/453"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false", "repo": "Xtra", "task_id": "Xtra/464"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false", "repo": "Xtra", "task_id": "Xtra/472"}
{"input": "<s> fun getTimestamp ( input : Long , timestampFormat : String ? ) : String ? { val pattern = when ( timestampFormat ) { \" <STR_LIT:0> \" - > \" <STR_LIT> \" \" <STR_LIT:1> \" - > \" <STR_LIT> \" \" <STR_LIT:2> \" - > \" <STR_LIT> \" \" <STR_LIT:3> \" - > \" <STR_LIT> \" \" <STR_LIT:4> \" - > \" <STR_LIT> \" \" <STR_LIT:5> \" - > \" <STR_LIT> \" \" <STR_LIT:6> \" - > \" <STR_LIT> \" else - > \" <STR_LIT> \" } val format = SimpleDateFormat ( pattern , Locale . getDefault ( ) ) return try {", "gt": "format . format ( Date ( input ) )", "repo": "Xtra", "task_id": "Xtra/495"}
{"input": "<s> fun clearBackgroundDrawableForDate ( date : Date ) {", "gt": "val dateTime = CalendarHelper . convertDateToDateTime ( date )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/6"}
{"input": "<s> fun clearTextColorForDate ( date : Date ) {", "gt": "val dateTime = CalendarHelper . convertDateToDateTime ( date )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/10"}
{"input": "<s> fun restoreStatesFromKey ( savedInstanceState : Bundle ? , key : String ) { if ( savedInstanceState ! = null & & savedInstanceState . containsKey ( key ) ) { val caldroidSavedState = savedInstanceState . getBundle ( key )", "gt": "arguments = caldroidSavedState", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/11"}
{"input": "<s> fun setCurrentDateTime ( dateTime : DateTime ) {", "gt": "this . currentDateTime = dateTime", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/27"}
{"input": "<s> fun setPickPhotoSize ( photoSize : Int ) : Builder {", "gt": "pickModel . pickPhotoSize = photoSize", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/32"}
{"input": "<s> fun setHasPhotoSize ( hasSize : Int ) : Builder {", "gt": "pickModel . hasPhotoSize = hasSize", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/33"}
{"input": "<s> fun setAllPhotoSize ( allSize : Int ) : Builder {", "gt": "pickModel . allPhotoSize = allSize", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/34"}
{"input": "<s> fun setSpanCount ( spanCount : Int ) : Builder {", "gt": "pickModel . spanCount = spanCount", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/35"}
{"input": "<s> fun setShowCamera ( showCamera : Boolean ) : Builder {", "gt": "pickModel . isShowCamera = showCamera", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/36"}
{"input": "<s> fun setClickSelectable ( clickSelectable : Boolean ) : Builder {", "gt": "pickModel . isClickSelectable = clickSelectable", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/37"}
{"input": "<s> fun setToolbarColor ( toolbarColor : Int ) : Builder {", "gt": "pickModel . toolbarColor = toolbarColor", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/38"}
{"input": "<s> fun setStatusBarColor ( statusBarColor : Int ) : Builder {", "gt": "pickModel . statusBarColor = statusBarColor", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/39"}
{"input": "<s> fun setToolbarTextColor ( toolbarTextColor : Int ) : Builder {", "gt": "pickModel . toolbarTextColor = toolbarTextColor", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/40"}
{"input": "<s> fun setSelectIconColor ( selectIconColor : Int ) : Builder {", "gt": "pickModel . selectIconColor = selectIconColor", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/41"}
{"input": "<s> fun setLightStatusBar ( lightStatusBar : Boolean ) : Builder {", "gt": "pickModel . lightStatusBar = lightStatusBar", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/42"}
{"input": "<s> fun setShowGif ( showGif : Boolean ) : Builder {", "gt": "pickModel . isShowGif = showGif", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/43"}
{"input": "<s> private fun create ( ) : PickPhotoViewEx {", "gt": "GlobalData . model = pickModel", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/44"}
{"input": "<s> fun getCurrentDateTime ( pattern : String ) : String { val date = Date ( )", "gt": "val dateFormat = SimpleDateFormat ( pattern )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/57"}
{"input": "<s> fun timeMillisToDateTime ( timeMillis : Long , pattern : String ) : String { val date = Date ( timeMillis )", "gt": "val dateFormat = SimpleDateFormat ( pattern )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/58"}
{"input": "<s> fun convDateToTimeMillis ( field : Int , amount : Int , isZeroHour : Boolean = true , isZeroMinute : Boolean = true , isZeroSecond : Boolean = true , isZeroMilliSecond : Boolean = true ) : Long { val calendar = Calendar . getInstance ( Locale . getDefault ( ) ) if ( isZeroHour ) calendar . set ( Calendar . HOUR_OF_DAY , 0 ) if ( isZeroMinute ) calendar . set ( Calendar . MINUTE , 0 ) if ( isZeroSecond ) calendar . set ( Calendar . SECOND , 0 ) if ( isZeroMilliSecond ) calendar . set ( Calendar . MILLISECOND , 0 )", "gt": "if ( amount ! = 0 ) {", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/63"}
{"input": "<s> private fun makeDirectory ( path : String ) {", "gt": "val workingDirectory = File ( path )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/69"}
{"input": "<s> fun initLegacyWorkingDirectory ( context : Context ) { if ( context . checkPermission ( EXTERNAL_STORAGE_PERMISSIONS ) ) {", "gt": "makeDirectory ( getExternalStorageDirectory ( ) . absolutePath + BACKUP_EXCEL_DIRECTORY )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/70"}
{"input": "<s> fun hashMapToJsonString ( map : HashMap < String , Any > ) : String {", "gt": "val gson = GsonBuilder ( ) . setPrettyPrinting ( ) . create ( )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/82"}
{"input": "<s> fun checkFontSetting ( activity : Activity ) { activity . run { if ( ! Locale . getDefault ( ) . language . matches ( CUSTOM_FONTS_SUPPORT_LANGUAGE . toRegex ( ) ) ) { initDefaultFontSetting ( this )", "gt": "} else {", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/91"}
{"input": "<s> private fun setCurrentBackgroundColor ( color : Int ) {", "gt": "curBackgroundColor = color", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/136"}
{"input": "<s> private fun setCurrentScreenBackgroundColor ( color : Int ) {", "gt": "curScreenBackgroundColor = color", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/137"}
{"input": "<s> private fun initDummyData ( ) { if ( ! config . isInitDummyData ) { initSampleData ( )", "gt": "config . isInitDummyData = true", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/154"}
{"input": "<s> private fun setupMotionSensor ( ) { val sensorManager = getSystemService ( SENSOR_SERVICE ) as SensorManager", "gt": "val sd = ShakeDetector ( this )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/155"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "useDynamicTheme = ! isNightMode ( )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/178"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( config . previousActivity = = PREVIOUS_ACTIVITY_CREATE ) { refreshList ( ) moveListViewScrollToBottom ( )", "gt": "config . previousActivity = - 1", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/213"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { return when ( dDayItems . size = = position . plus ( 1 ) ) { true - > ( holder as DDayAddViewHolder ) . bindTo ( dDayItems [ position ] )", "gt": "false - > ( holder as DDayViewHolder ) . bindTo ( dDayItems [ position ] )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/225"}
{"input": "<s> private fun hsv2hsl ( hsv : FloatArray ) : FloatArray { val hue = hsv [ 0 ] val sat = hsv [ 1 ] val value = hsv [ <NUM_LIT:2> ] val newHue = ( <NUM_LIT> - sat ) * value var newSat = sat * value / if ( newHue < <NUM_LIT> ) newHue else <NUM_LIT> - newHue", "gt": "if ( newSat > <NUM_LIT> )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/304"}
{"input": "<s> private fun exportRealmFile ( showDialog : Boolean = true ) {", "gt": "requireActivity ( ) . exportRealmFile ( )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/335"}
{"input": "<s> private fun setupLauncher ( taskFlag : Int , callback : ( ) - > Unit ) {", "gt": "mTaskFlag = taskFlag", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/341"}
{"input": "<s> private fun getProperDayDrawable ( selected : Boolean ) : Drawable { val drawableId = if ( selected ) R . drawable . bg_circle_filled else R . drawable . bg_circle_stroke val drawable = ContextCompat . getDrawable ( mActivity , drawableId )", "gt": "drawable ! ! . applyColorFilter ( mActivity . config . textColor )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/351"}
{"input": "<s> override fun onCreate ( ) { super . onCreate ( )", "gt": "Realm . init ( this )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/377"}
{"input": "<s> fun findDiaryBy ( sequence : Int , realmInstance : Realm = getInstance ( ) ) : Diary ? {", "gt": "return realmInstance . where ( Diary : : class . java )", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/384"}
{"input": "<s> fun determineFiles ( targetDirectoryName : String ) {", "gt": "this . mRootDirectoryName = targetDirectoryName", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/403"}
{"input": "<s> fun closeOutputStream ( ) { try { zipOutputStream . close ( )", "gt": "} catch ( e : IOException ) {", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/407"}
{"input": "<s> fun setCustomTabView ( layoutResId : Int , textViewId : Int ) {", "gt": "mTabViewLayoutId = layoutResId", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/422"}
{"input": "<s> private fun initUser ( ) { viewModelScope . launch { environment . getUser ( )", "gt": ". collect { setState { copy ( user = it ) } }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/0"}
{"input": "<s> private fun initTheme ( ) { viewModelScope . launch { environment . getTheme ( )", "gt": ". collect { setState { copy ( theme = it ) } }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/3"}
{"input": "<s> @ Composable private fun LanguageScreen ( items : List < LanguageItem > , clickItem : ( LanguageItem ) - > Unit , onClickBack : ( ) - > Unit ) { PgModalLayout ( title = { PgModalBackHeader ( text = stringResource ( R . string . setting_language ) , onClickBack = onClickBack ) } , content = { items ( items ) { item - > LanguageItem ( onClick = { clickItem ( item ) } , item = item )", "gt": "Spacer ( Modifier . height ( <NUM_LIT> p ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/4"}
{"input": "<s> < LanguageItem > . select ( language : Language ) : List < LanguageItem > { return map {", "gt": "it . copy ( applied = it . language = = language )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/8"}
{"input": "<s> fun logout ( ) {", "gt": "credentialProvider . setCredential ( Credential ( token = \" \" ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/15"}
{"input": "<s> private fun initUser ( ) { viewModelScope . launch { environment . getUser ( )", "gt": ". collect { setState { copy ( user = it ) } }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/18"}
{"input": "<s> < ThemeItem > . select ( theme : Theme ) : List < ThemeItem > { return map {", "gt": "it . copy ( applied = it . theme = = theme )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/24"}
{"input": "<s> < ToDoList > . toItemAllState ( ) : List < ItemAllState > { val data = mutableListOf < ItemAllState > ( ) forEach { data . add ( ItemAllState . List ( it ) )", "gt": "data . addAll ( it . tasks . toItemListAllState ( it ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/26"}
{"input": "<s> < ToDoRepeatItem > . select ( repeat : ToDoRepeat ) : List < ToDoRepeatItem > { return map {", "gt": "it . copy ( applied = it . repeat = = repeat )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/36"}
{"input": "<s> < ColorItem > . select ( color : Color ) : List < ColorItem > { return map {", "gt": "it . copy ( applied = it . color = = color )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/37"}
{"input": "<s> < ToDoGroup > . toItemGroup ( selectedItemState : SelectedItemState ) : List < ItemMainState > { val data = mutableListOf < ItemMainState > ( ) forEach { if ( it . id ! = ToDoGroupDb . DEFAULT_ID ) { data . add ( ItemMainState . ItemGroup ( it ) ) }", "gt": "data . addAll ( it . lists . toItemListMainState ( selectedItemState ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/54"}
{"input": "<s> fun updateTaskNote ( note : String , taskId : String ) {", "gt": "val currentDate = dateTimeProvider . now ( )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/63"}
{"input": "<s> @ Composable private fun StepTitle ( onClickBack : ( ) - > Unit ) { Box ( modifier = Modifier . height ( <NUM_LIT> p ) . fillMaxWidth ( ) ) { Box ( modifier = Modifier . padding ( start = <NUM_LIT> p ) . align ( Alignment . CenterStart ) ) { PgIconButton ( onClick = onClickBack , color = Color . Transparent ) {", "gt": "PgIcon ( imageVector = Icons . Rounded . ChevronLeft )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/64"}
{"input": "<s> fun dismiss ( task : ToDoTask ) {", "gt": "val id = task . createdAt . toMillis ( ) . toInt ( )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/75"}
{"input": "<s> < ToDoGroupWithList > . groupWithListToGroup ( ) : List < ToDoGroup > { return map {", "gt": "it . group . toGroup ( it . listWithTasks . toDoListWithTasksToToDoList ( ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/87"}
{"input": "<s> fun getGroup ( ) : Flow < List < ToDoGroup > > { return toDoGroupReadDao . getGroup ( ) . filterNotNull ( )", "gt": ". map { it . toGroup ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/96"}
{"input": "<s> fun getGroup ( groupId : String ) : Flow < ToDoGroup > { return toDoGroupReadDao . getGroup ( groupId ) . filterNotNull ( )", "gt": ". map { it . toGroup ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/97"}
{"input": "<s> fun getGroupWithList ( ) : Flow < List < ToDoGroup > > { return toDoGroupReadDao . getGroupWithList ( ) . filterNotNull ( )", "gt": ". map { it . groupWithListToGroup ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/98"}
{"input": "<s> fun getListWithTasks ( ) : Flow < List < ToDoList > > { return toDoListReadDao . getListWithTasks ( ) . filterNotNull ( )", "gt": ". map { it . toDoListWithTasksToToDoList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/103"}
{"input": "<s> fun getList ( ) : Flow < List < ToDoList > > { return toDoListReadDao . getList ( ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/104"}
{"input": "<s> fun getListById ( listId : String ) : Flow < ToDoList > { return toDoListReadDao . getListById ( listId ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/105"}
{"input": "<s> fun getListByGroupId ( groupId : String ) : Flow < List < ToDoList > > { return toDoListReadDao . getListByGroupId ( groupId ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/106"}
{"input": "<s> fun getListWithTasksById ( listId : String ) : Flow < ToDoList > { return toDoListReadDao . getListWithTasksById ( listId )", "gt": ". map { it . toToDoList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/107"}
{"input": "<s> fun getListWithUnGroupList ( groupId : String ) : Flow < List < GroupIdWithList > > { return toDoListReadDao . getListWithUnGroupList ( groupId ) . filterNotNull ( )", "gt": ". map { it . toGroupIdWithList ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/108"}
{"input": "<s> fun getTaskWithStepsById ( taskId : String ) : Flow < ToDoTask > { return toDoTaskReadDao . getTaskWithStepsById ( taskId ) . filterNotNull ( )", "gt": ". map { it . toTask ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/120"}
{"input": "<s> fun getTaskWithListById ( taskId : String ) : Flow < TaskWithList > { return toDoTaskReadDao . getTaskWithListById ( taskId ) . filterNotNull ( )", "gt": ". map { TaskWithList ( it . list . toToDoList ( ) , it . task . toTask ( ) ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/121"}
{"input": "<s> fun getScheduledTasks ( ) : Flow < List < ToDoTask > > { return toDoTaskReadDao . getScheduledTasks ( )", "gt": ". map { it . toTask ( ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/123"}
{"input": "<s> fun getInstance ( context : Context ) : ToDoDatabase { return INSTANCE ? : synchronized ( this ) {", "gt": "INSTANCE ? : buildDatabase ( context ) . also { INSTANCE = it }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/132"}
{"input": "<s> fun getCredential ( ) : Flow < Credential > { return credentialDataStore . data . map { Credential ( it . token ) }", "gt": ". catch { emit ( Credential ( token = \" \" ) ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/138"}
{"input": "<s> suspend fun setCredential ( data : Credential ) { withContext ( dispatcher ) {", "gt": "credentialDataStore . updateData {", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/139"}
{"input": "<s> fun getLanguage ( ) : Flow < Language > { return languageDataStore . data . map { it . toLanguage ( ) }", "gt": ". catch { emit ( Language . ENGLISH ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/140"}
{"input": "<s> suspend fun setLanguage ( data : Language ) { withContext ( dispatcher ) {", "gt": "languageDataStore . updateData {", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/141"}
{"input": "<s> fun getTheme ( ) : Flow < Theme > { return themeDataStore . data . map { it . toTheme ( ) }", "gt": ". catch { emit ( Theme . SYSTEM ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/142"}
{"input": "<s> suspend fun setTheme ( data : Theme ) { withContext ( dispatcher ) {", "gt": "themeDataStore . updateData {", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/143"}
{"input": "<s> fun getUser ( ) : Flow < User > { return userDataStore . data . map { User ( it . email ) }", "gt": ". catch { emit ( User ( email = \" \" ) ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/144"}
{"input": "<s> suspend fun setUser ( data : User ) { withContext ( dispatcher ) {", "gt": "userDataStore . updateData {", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/145"}
{"input": "<s> < T > . joinTo ( buffer : A , separator : ( Int ) - > CharSequence ) : A { val limit = - 1 var count = 0 for ( element in this ) { if ( + + count > 1 ) buffer . append ( separator ( count - 1 ) ) if ( limit < 0 | | count < = limit ) {", "gt": "buffer . append ( element . toString ( ) )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/158"}
{"input": "<s> private fun resolveName ( name : String , names : Flow < List < String > > , updateNameWithNewName : OnResolveDuplicateName , ) : Flow < Any > { return names . map { name . resolveDuplicate ( it ) } </s", "gt": "private fun resolveName ( name : String , names : Flow < List < String > > , updateNameWithNewName : OnResolveDuplicateName , ) : Flow < Any > { return names . map { name . resolveDuplicate ( it ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/164"}
{"input": "<s> fun String . ellipsisAt ( n : Int ) : String { require ( n > = 0 ) { \" <STR_LIT> \" } </s", "gt": "fun String . ellipsisAt ( n : Int ) : String { require ( n > = 0 ) { \" <STR_LIT> \" }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/173"}
{"input": "<s> private fun getLocale ( configuration : Configuration ) : Locale { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) {", "gt": "configuration . locales . get ( 0 )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/180"}
{"input": "<s> @ Composable fun NavPg ( ) { val navController = rememberNavController ( ) NavHost ( navController = navController , startDestination = \" <STR_LIT> \" ) {", "gt": "composable ( route = \" <STR_LIT> \" ) {", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/189"}
{"input": "<s> @ Composable @ ReadOnlyComposable fun boolResource ( @ BoolRes id : Int ) : Boolean {", "gt": "val resources = resources ( )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/219"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/1"}
{"input": "<s> @ Override public boolean onSupportNavigateUp ( ) {", "gt": "onBackPressed ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/2"}
{"input": "<s> @ Override public void run ( ) { if ( dialog . isShowing ( ) ) {", "gt": "dialog . dismiss ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/11"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( )", "gt": "_binding = null", "repo": "simplenote-android", "task_id": "simplenote-android/12"}
{"input": "<s> public static void registerTracker ( Tracker tracker ) { if ( tracker ! = null ) {", "gt": "TRACKERS . add ( tracker ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/16"}
{"input": "<s> private String generateNewAnonID ( ) { String uuid = UUID . randomUUID ( ) . toString ( ) ; SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; final SharedPreferences . Editor editor = preferences . edit ( ) ;", "gt": "editor . putString ( TRACKS_ANON_ID , uuid ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/25"}
{"input": "<s> @ Override public void refreshMetadata ( String username ) { if ( mNosaraClient = = null ) { return ; } if ( ! TextUtils . isEmpty ( username ) ) { mUserName = username ; if ( getAnonID ( ) ! = null ) { mNosaraClient . trackAliasUser ( mUserName , getAnonID ( ) , TracksClient . NosaraUserType . SIMPLENOTE ) ; clearAnonID ( ) ; } } else { mUserName = null ;", "gt": "if ( getAnonID ( ) = = null ) {", "repo": "simplenote-android", "task_id": "simplenote-android/26"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_confirmation , container , false ) ;", "gt": "initUi ( view ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/29"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_signup , container , false ) ;", "gt": "initUi ( view ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/34"}
{"input": "<s> private void initUi ( View view ) {", "gt": "initFooter ( ( TextView ) view . findViewById ( com . simperium . R . id . text_footer ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/35"}
{"input": "<s> @ Override public void afterTextChanged ( Editable s ) { setButtonState ( signupButton , s ) ; } </s", "gt": "@ Override public void afterTextChanged ( Editable s ) { setButtonState ( signupButton , s ) ; }", "repo": "simplenote-android", "task_id": "simplenote-android/37"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( NetworkUtils . isNetworkAvailable ( requireContext ( ) ) ) { showProgressDialog ( ) ; signupUser ( emailEditText . getText ( ) . toString ( ) ) ; } else {", "gt": "showDialogError ( getString ( R . string . simperium_dialog_message_network ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/38"}
{"input": "<s> private void hideDialogProgress ( ) { if ( progressDialogFragment ! = null & & ! progressDialogFragment . isHidden ( ) ) { progressDialogFragment . dismiss ( ) ;", "gt": "progressDialogFragment = null ;", "repo": "simplenote-android", "task_id": "simplenote-android/41"}
{"input": "<s> @ Override public void run ( ) { showDialogError ( getString ( R . string . dialog_message_signup_error ) ) ; AppLog . add ( AppLog . Type . ACCOUNT , \" <STR_LIT> \" + error . getMessage ( ) ) ;", "gt": "Logger . log ( error . getMessage ( ) , error ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/44"}
{"input": "<s> @ Override public void run ( ) { showDialogError ( getString ( R . string . dialog_message_signup_error ) ) ;", "gt": "AppLog . add ( AppLog . Type . ACCOUNT , \" <STR_LIT> \" + error . getMessage ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/45"}
{"input": "<s> @ Override public void run ( ) { hideDialogProgress ( ) ; DisplayUtils . hideKeyboard ( getView ( ) ) ;", "gt": "showConfirmationScreen ( email ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/46"}
{"input": "<s> @ Override public void run ( ) { hideDialogProgress ( ) ;", "gt": "DisplayUtils . hideKeyboard ( getView ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/47"}
{"input": "<s> @ Override public void onLoginSheetEmailClicked ( ) { Intent intent = new Intent ( SimplenoteAuthenticationActivity . this , SimplenoteCredentialsActivity . class ) ; intent . putExtra ( EXTRA_IS_LOGIN , true ) ;", "gt": "startActivity ( intent ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/52"}
{"input": "<s> @ Override protected void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "outState . putString ( STATE_AUTH_STATE , mAuthState ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/53"}
{"input": "<s> @ Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onRestoreInstanceState ( savedInstanceState ) ; if ( savedInstanceState . containsKey ( STATE_AUTH_STATE ) ) {", "gt": "mAuthState = savedInstanceState . getString ( STATE_AUTH_STATE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/54"}
{"input": "<s> @ Override public void onBackPressed ( ) {", "gt": "startActivity ( new Intent ( SimplenoteCredentialsActivity . this , SimplenoteAuthenticationActivity . class ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/56"}
{"input": "<s> @ Override protected void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_signup ) ;", "gt": "initContainer ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/57"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { onBackPressed ( ) ;", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/60"}
{"input": "<s> override fun onBindViewHolder ( holder : PlanListItemViewHolder , position : Int ) {", "gt": "val uiState = getItem ( position )", "repo": "simplenote-android", "task_id": "simplenote-android/62"}
{"input": "<s> @ NonNull @ Override public Dialog onCreateDialog ( Bundle savedInstanceState ) {", "gt": "setRetainInstance ( true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/64"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { initBuilderArguments ( ) ; if ( mHideActivityBar ) { hideActivityBar ( ) ; } ViewGroup view = ( ViewGroup ) inflater . inflate ( R . layout . fragment_full_screen_dialog , container , false ) ; initToolbar ( view ) ;", "gt": "setThemeBackground ( view ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/81"}
{"input": "<s> @ Override public void dismiss ( ) { if ( isStateSaved ( ) ) { return ; } if ( mOnDismissListener ! = null ) { mOnDismissListener . onDismiss ( ) ; }", "gt": "if ( mHideActivityBar ) {", "repo": "simplenote-android", "task_id": "simplenote-android/82"}
{"input": "<s> @ Override public boolean onMenuItemClick ( MenuItem item ) { if ( item . getItemId ( ) = = ID_ACTION ) { onConfirmClicked ( ) ;", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/87"}
{"input": "<s> public void onBackPressed ( ) { if ( isAdded ( ) ) {", "gt": "onDismissClicked ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/88"}
{"input": "<s> protected void onConfirmClicked ( ) { boolean isConsumed = ( ( FullScreenDialogContent ) mFragment ) . onConfirmClicked ( mController ) ; if ( ! isConsumed ) {", "gt": "mController . confirm ( null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/89"}
{"input": "<s> protected void onDismissClicked ( ) { boolean isConsumed = ( ( FullScreenDialogContent ) mFragment ) . onDismissClicked ( mController ) ; if ( ! isConsumed ) {", "gt": "mController . dismiss ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/90"}
{"input": "<s> public void setSubtitle ( @ NonNull String text ) {", "gt": "mSubtitle = text ;", "repo": "simplenote-android", "task_id": "simplenote-android/91"}
{"input": "<s> public void setSubtitle ( @ StringRes int textId ) {", "gt": "mSubtitle = requireContext ( ) . getString ( textId ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/92"}
{"input": "<s> public Builder setAction ( @ NonNull String text ) {", "gt": "mAction = text ;", "repo": "simplenote-android", "task_id": "simplenote-android/94"}
{"input": "<s> public Builder setHideActivityBar ( boolean hide ) {", "gt": "mHideActivityBar = hide ;", "repo": "simplenote-android", "task_id": "simplenote-android/96"}
{"input": "<s> public Builder setSubtitle ( @ NonNull String text ) {", "gt": "mSubtitle = text ;", "repo": "simplenote-android", "task_id": "simplenote-android/97"}
{"input": "<s> public Builder setSubtitle ( @ StringRes int textId ) {", "gt": "mSubtitle = mContext . getString ( textId ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/98"}
{"input": "<s> public Builder setTitle ( @ NonNull String text ) {", "gt": "mTitle = text ;", "repo": "simplenote-android", "task_id": "simplenote-android/99"}
{"input": "<s> public Builder setTitle ( @ StringRes int textId ) {", "gt": "mTitle = mContext . getString ( textId ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/100"}
{"input": "<s> public Builder setToolbarElevation ( float elevation ) {", "gt": "mElevation = elevation ;", "repo": "simplenote-android", "task_id": "simplenote-android/101"}
{"input": "<s> public Builder setToolbarElevation ( @ DimenRes int dimension ) { if ( dimension = = 0 ) { return setToolbarElevation ( Float . valueOf ( dimension ) ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/102"}
{"input": "<s> public Builder setOnConfirmListener ( @ Nullable OnConfirmListener listener ) {", "gt": "mOnConfirmListener = listener ;", "repo": "simplenote-android", "task_id": "simplenote-android/103"}
{"input": "<s> public Builder setOnDismissListener ( @ Nullable OnDismissListener listener ) {", "gt": "mOnDismissListener = listener ;", "repo": "simplenote-android", "task_id": "simplenote-android/104"}
{"input": "<s> public Builder setViewContainer ( @ IdRes int container ) {", "gt": "mContainer = container ;", "repo": "simplenote-android", "task_id": "simplenote-android/105"}
{"input": "<s> @ Override", "gt": "public void run ( ) {", "repo": "simplenote-android", "task_id": "simplenote-android/106"}
{"input": "<s> @ Override public void run ( ) {", "gt": "mProgressBar . setVisibility ( View . GONE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/108"}
{"input": "<s> @ Override public void onClick ( View v ) {", "gt": "mDidTapButton = true ;", "repo": "simplenote-android", "task_id": "simplenote-android/109"}
{"input": "<s> @ Override public void onClick ( View v ) {", "gt": "mDidTapButton = true ;", "repo": "simplenote-android", "task_id": "simplenote-android/110"}
{"input": "<s> @ Override public void onDismiss ( DialogInterface dialog ) {", "gt": "mListener . onHistoryDismissed ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/111"}
{"input": "<s> public void show ( FragmentManager manager , Note note ) { if ( mFragment . isAdded ( ) ) { showNow ( manager , TAG ) ;", "gt": "mNote = note ;", "repo": "simplenote-android", "task_id": "simplenote-android/113"}
{"input": "<s> public void updateProgressBar ( ) { if ( getDialog ( ) ! = null & & getDialog ( ) . isShowing ( ) ) {", "gt": "setProgressBar ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/114"}
{"input": "<s> private void importMarkdown ( String content ) { Note note = Note . fromContent ( mNotesBucket , content ) ;", "gt": "note . enableMarkdown ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/117"}
{"input": "<s> private void addNote ( Note note ) { for ( String tagName : note . getTags ( ) ) { try { TagUtils . createTagIfMissing ( mTagsBucket , tagName ) ; } catch ( BucketObjectNameInvalid e ) {", "gt": "note . removeTag ( tagName ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/118"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) public static String dateString ( Number time , boolean useShortFormat , Context context ) {", "gt": "Calendar c = numberToDate ( time ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/123"}
{"input": "<s> private static int getReferenceCount ( String key , String content ) { Pattern pattern = Pattern . compile ( SIMPLENOTE_LINK_PREFIX + key ) ; Matcher matcher = pattern . matcher ( content ) ; int count = 0 ;", "gt": "while ( matcher . find ( ) ) {", "repo": "simplenote-android", "task_id": "simplenote-android/124"}
{"input": "<s> public void setContent ( String content ) { mTitle = null ;", "gt": "mContentPreview = null ;", "repo": "simplenote-android", "task_id": "simplenote-android/129"}
{"input": "<s> public boolean hasTag ( String tag ) { List < String > tags = getTags ( ) ; String tagLower = tag . toLowerCase ( ) ; for ( String tagName : tags ) {", "gt": "if ( tagLower . equals ( tagName . toLowerCase ( ) ) )", "repo": "simplenote-android", "task_id": "simplenote-android/132"}
{"input": "<s> public List < String > getTags ( ) { JSONArray tags = ( JSONArray ) getProperty ( TAGS_PROPERTY ) ; if ( tags = = null ) { tags = new JSONArray ( ) ; setProperty ( TAGS_PROPERTY , \" \" ) ; } int length = tags . length ( ) ; List < String > tagList = new ArrayList < > ( length ) ; if ( length = = 0 ) return tagList ; for ( int i = 0 ; i < length ; i + + ) { String tag = tags . optString ( i ) ;", "gt": "if ( ! tag . equals ( \" \" ) )", "repo": "simplenote-android", "task_id": "simplenote-android/133"}
{"input": "<s> public void removeTag ( String tagName ) { List < String > tags = getTags ( ) ; List < String > tagsMatched = TagUtils . findTagsMatch ( tags , tagName ) ;", "gt": "tags . removeAll ( tagsMatched ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/135"}
{"input": "<s> public JSONArray getSystemTags ( ) { JSONArray tags = ( JSONArray ) getProperty ( SYSTEM_TAGS_PROPERTY ) ; if ( tags = = null ) {", "gt": "tags = new JSONArray ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/137"}
{"input": "<s> public void setMarkdownEnabled ( boolean isMarkdownEnabled ) { if ( isMarkdownEnabled ) {", "gt": "addSystemTag ( MARKDOWN_TAG ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/139"}
{"input": "<s> public boolean hasCollaborators ( ) { for ( String tag : getTags ( ) ) { if ( StrUtils . isEmail ( tag ) ) {", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/140"}
{"input": "<s> public void setPinned ( boolean isPinned ) { if ( isPinned ) {", "gt": "addSystemTag ( PINNED_TAG ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/141"}
{"input": "<s> public void setPreviewEnabled ( boolean isPreviewEnabled ) { if ( isPreviewEnabled ) {", "gt": "addSystemTag ( PREVIEW_TAG ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/142"}
{"input": "<s> public void setPublished ( boolean isPublished ) { if ( isPublished ) {", "gt": "addSystemTag ( PUBLISHED_TAG ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/143"}
{"input": "<s> private boolean hasSystemTag ( String tag ) { if ( TextUtils . isEmpty ( tag ) ) return false ; JSONArray tags = getSystemTags ( ) ; int length = tags . length ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( tags . optString ( i ) . equals ( tag ) ) {", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/144"}
{"input": "<s> public void update ( Note note , JSONObject properties ) { note . setProperties ( properties ) ;", "gt": "note . mTitle = null ;", "repo": "simplenote-android", "task_id": "simplenote-android/147"}
{"input": "<s> @ Override public List < Index > index ( Tag tag ) { List < Index > indexes = new ArrayList < > ( 1 ) ; int count = Note . allInTag ( mNotesBucket , tag . getSimperiumKey ( ) ) . count ( ) ;", "gt": "indexes . add ( new Index ( Tag . NOTE_COUNT_INDEX_NAME , count ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/148"}
{"input": "<s> @ Override public Map < String , String > index ( String [ ] keys , Note note ) { Map < String , String > values = new HashMap < > ( keys . length ) ; values . put ( INDEXES [ 0 ] , note . getTitle ( ) ) ;", "gt": "values . put ( INDEXES [ 1 ] , note . getContent ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/149"}
{"input": "<s> public void setActiveSubscription ( long purchaseTime ) { setSubscriptionPlatform ( Preferences . SubscriptionPlatform . ANDROID ) ; setSubscriptionLevel ( Preferences . SubscriptionLevel . SUSTAINER ) ;", "gt": "setSubscriptionDate ( purchaseTime ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/155"}
{"input": "<s> public void removeActiveSubscription ( ) { setSubscriptionPlatform ( SubscriptionPlatform . NONE ) ; setSubscriptionLevel ( SubscriptionLevel . NONE ) ;", "gt": "setSubscriptionDate ( null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/156"}
{"input": "<s> public SubscriptionPlatform getCurrentSubscriptionPlatform ( ) { Object subscriptionPlatform = getProperty ( SUBSCRIPTION_PLATFORM_KEY ) ; if ( subscriptionPlatform = = null ) { return null ; } if ( subscriptionPlatform instanceof String ) {", "gt": "return SubscriptionPlatform . fromString ( ( String ) subscriptionPlatform ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/157"}
{"input": "<s> public void setIndex ( Integer tagIndex ) { if ( tagIndex = = null ) {", "gt": "getProperties ( ) . remove ( \" <STR_LIT> \" ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/163"}
{"input": "<s> public void hideTabs ( ) {", "gt": "mTabLayout . setVisibility ( View . GONE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/166"}
{"input": "<s> public void showTabs ( ) {", "gt": "mTabLayout . setVisibility ( View . VISIBLE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/167"}
{"input": "<s> public void setSearchMatchBarVisible ( boolean isVisible ) { if ( mSearchMatchBar ! = null ) {", "gt": "mSearchMatchBar . setVisibility ( isVisible ? View . VISIBLE : View . GONE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/168"}
{"input": "<s> void addFragment ( Fragment fragment , String title ) { mFragments . add ( fragment ) ;", "gt": "mTitles . add ( title ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/172"}
{"input": "<s> @ Override public View newView ( Context context , Cursor cursor , ViewGroup parent ) { Activity activity = ( Activity ) context ; if ( activity = = null )", "gt": "return null ;", "repo": "simplenote-android", "task_id": "simplenote-android/177"}
{"input": "<s> @ Override public void bindView ( View view , Context context , Cursor cursor ) {", "gt": "TextView textView = ( TextView ) view ;", "repo": "simplenote-android", "task_id": "simplenote-android/178"}
{"input": "<s> @ Override public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { String url = request . getUrl ( ) . toString ( ) ; if ( url . startsWith ( SimplenoteLinkify . SIMPLENOTE_LINK_PREFIX ) ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . INTERNOTE_LINK_TAPPED , AnalyticsTracker . CATEGORY_LINK , \" <STR_LIT> \" ) ; SimplenoteLinkify . openNote ( requireActivity ( ) , url . replace ( SIMPLENOTE_LINK_PREFIX , \" \" ) ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/180"}
{"input": "<s> @ Override public boolean onPreDraw ( ) { if ( mContentEditText . getLayout ( ) ! = null ) {", "gt": "setScroll ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/181"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ; checkWebView ( ) ; mIsPaused = false ; mNotesBucket . addListener ( this ) ; AppLog . add ( Type . SYNC , \" <STR_LIT> \" ) ; mTagInput . setOnTagAddedListener ( this ) ; if ( mContentEditText ! = null ) { mContentEditText . setTextSize ( TypedValue . COMPLEX_UNIT_SP , PrefUtils . getFontSize ( requireContext ( ) ) ) ;", "gt": "if ( mContentEditText . hasFocus ( ) ) {", "repo": "simplenote-android", "task_id": "simplenote-android/184"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( DisplayUtils . isLargeScreenLandscape ( getActivity ( ) ) & & mNote ! = null ) {", "gt": "outState . putString ( STATE_NOTE_ID , mNote . getSimperiumKey ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/188"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull Menu menu , @ NonNull MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; if ( ! isAdded ( ) | | ( ! mIsFromWidget & & DisplayUtils . isLargeScreenLandscape ( getActivity ( ) ) & & mNoteMarkdownFragment = = null ) ) {", "gt": "return ;", "repo": "simplenote-android", "task_id": "simplenote-android/189"}
{"input": "<s> private void deleteNote ( ) {", "gt": "NoteUtils . deleteNote ( mNote , getActivity ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/193"}
{"input": "<s> protected void clearMarkdown ( ) { if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( \" <STR_LIT> \" , mCss + \" \" , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/194"}
{"input": "<s> protected void hideMarkdown ( ) { if ( BrowserUtils . isWebViewInstalled ( requireContext ( ) ) & & mMarkdown ! = null ) {", "gt": "mMarkdown . setVisibility ( View . INVISIBLE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/195"}
{"input": "<s> public void showInfo ( ) { DrawableUtils . startAnimatedVectorDrawable ( mInformationMenuItem . getIcon ( ) ) ; if ( mNote ! = null ) {", "gt": "mContentEditText . clearFocus ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/199"}
{"input": "<s> private void setMarkdownEnabled ( boolean enabled ) { mIsMarkdownEnabled = enabled ; if ( mIsMarkdownEnabled ) {", "gt": "loadMarkdownData ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/201"}
{"input": "<s> private void loadMarkdownData ( ) { String formattedContent = NoteMarkdownFragment . getMarkdownFormattedContent ( mCss , mContentEditText . getPreviewTextContent ( ) ) ; if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( null , formattedContent , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/202"}
{"input": "<s> private void updateNote ( Note updatedNote ) {", "gt": "mNote = updatedNote ;", "repo": "simplenote-android", "task_id": "simplenote-android/204"}
{"input": "<s> private void updateTagList ( List < String > tags ) {", "gt": "setChips ( tags ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/205"}
{"input": "<s> @ Override public void onTagAdded ( String tag ) {", "gt": "if ( mNote = = null | | ! isAdded ( ) | | TextUtils . isEmpty ( tag ) ) {", "repo": "simplenote-android", "task_id": "simplenote-android/206"}
{"input": "<s> @ Override public void afterTextChanged ( Editable editable ) { attemptAutoList ( editable ) ;", "gt": "setTitleSpan ( editable ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/207"}
{"input": "<s> public boolean isPlaceholderVisible ( ) { if ( mPlaceholderView ! = null ) {", "gt": "return mPlaceholderView . getVisibility ( ) = = View . VISIBLE ;", "repo": "simplenote-android", "task_id": "simplenote-android/210"}
{"input": "<s> @ Override public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { String tag = mTagInput . getText ( ) . toString ( ) . trim ( ) ; if ( tag . length ( ) > 0 & & mNote ! = null ) {", "gt": "viewModel . addTag ( tag , mNote ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/212"}
{"input": "<s> private String getNoteContentString ( ) { if ( mContentEditText = = null | | mContentEditText . getText ( ) = = null ) {", "gt": "return \" \" ;", "repo": "simplenote-android", "task_id": "simplenote-android/213"}
{"input": "<s> @ Override public void onSharePublishClicked ( ) { publishNote ( ) ; if ( mShareBottomSheet ! = null ) {", "gt": "mShareBottomSheet . dismiss ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/214"}
{"input": "<s> @ Override public void onShareUnpublishClicked ( ) { unpublishNote ( ) ; if ( mShareBottomSheet ! = null ) {", "gt": "mShareBottomSheet . dismiss ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/215"}
{"input": "<s> @ Override public void onHistoryCancelClicked ( ) { mContentEditText . setText ( mNote . getContent ( ) ) ; if ( mHistoryBottomSheet ! = null ) {", "gt": "mHistoryBottomSheet . dismiss ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/216"}
{"input": "<s> private void showShareSheet ( ) { if ( isAdded ( ) & & mShareBottomSheet ! = null & & ! mShareBottomSheet . isAdded ( ) ) {", "gt": "mShareBottomSheet . show ( requireFragmentManager ( ) , mNote ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/222"}
{"input": "<s> private void showInfoSheet ( ) { if ( isAdded ( ) & & mInfoBottomSheet ! = null & & ! mInfoBottomSheet . isAdded ( ) ) {", "gt": "mInfoBottomSheet . show ( requireFragmentManager ( ) , mNote ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/223"}
{"input": "<s> public List < Integer > getSelectedNotesPositions ( ) { SparseBooleanArray checkedPositions = getListView ( ) . getCheckedItemPositions ( ) ; ArrayList < Integer > positions = new ArrayList < > ( ) ; for ( int i = 0 ; i < checkedPositions . size ( ) ; i + + ) { if ( checkedPositions . valueAt ( i ) ) {", "gt": "positions . add ( checkedPositions . keyAt ( i ) - mList . getHeaderViewsCount ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/235"}
{"input": "<s> protected void getPrefs ( ) { mIsCondensedNoteList = PrefUtils . getBoolPref ( getActivity ( ) , PrefUtils . PREF_CONDENSED_LIST , false ) ;", "gt": "mTitleFontSize = PrefUtils . getFontSize ( getActivity ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/238"}
{"input": "<s> public void setEmptyListButton ( String message ) { if ( mEmptyViewButton ! = null ) { if ( ! message . isEmpty ( ) ) { mEmptyViewButton . setVisibility ( View . VISIBLE ) ; mEmptyViewButton . setText ( message ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/245"}
{"input": "<s> public void setEmptyListImage ( @ DrawableRes int image ) { if ( mEmptyViewImage ! = null ) { if ( image ! = - 1 ) { mEmptyViewImage . setVisibility ( View . VISIBLE ) ; mEmptyViewImage . setImageResource ( image ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/246"}
{"input": "<s> public void setEmptyListMessage ( String message ) { if ( mEmptyViewText ! = null & & message ! = null ) {", "gt": "mEmptyViewText . setText ( message ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/247"}
{"input": "<s> public void setActivatedPosition ( int position ) { if ( getListView ( ) ! = null ) { if ( position = = ListView . INVALID_POSITION ) { getListView ( ) . setItemChecked ( mActivatedPosition , false ) ; } else {", "gt": "getListView ( ) . setItemChecked ( position , true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/252"}
{"input": "<s> public void setFloatingActionButtonVisible ( boolean visible ) { if ( mFloatingActionButton = = null ) return ; if ( visible ) {", "gt": "mFloatingActionButton . show ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/253"}
{"input": "<s> public void searchNotes ( String searchString , boolean isSubmit ) { mIsSearching = true ; mSuggestionLayout . setVisibility ( View . VISIBLE ) ; if ( ! searchString . equals ( mSearchString ) ) { mSearchString = searchString ; } if ( searchString . isEmpty ( ) ) { getSearchItems ( ) ; } else { getTagSuggestions ( searchString ) ; }", "gt": "if ( isSubmit ) {", "repo": "simplenote-android", "task_id": "simplenote-android/257"}
{"input": "<s> public void clearSearch ( ) { mIsSearching = false ; mSuggestionLayout . setVisibility ( View . GONE ) ; refreshList ( ) ;", "gt": "if ( mSearchString ! = null & & ! mSearchString . equals ( \" \" ) ) {", "repo": "simplenote-android", "task_id": "simplenote-android/258"}
{"input": "<s> private void deleteSearchItem ( String item ) { Preferences preferences = getPreferences ( ) ; if ( preferences ! = null ) { List < String > recents = preferences . getRecentSearches ( ) ; mDeletedItemIndex = recents . indexOf ( item ) ; recents . remove ( item ) ; preferences . setRecentSearches ( recents ) ;", "gt": "preferences . save ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/259"}
{"input": "<s> public void changeCursor ( ObjectCursor < Note > cursor ) {", "gt": "mCursor = cursor ;", "repo": "simplenote-android", "task_id": "simplenote-android/262"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position - mList . getHeaderViewsCount ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/263"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouch ( View view , MotionEvent event ) { if ( event . getButtonState ( ) = = MotionEvent . BUTTON_SECONDARY & & event . getAction ( ) = = MotionEvent . ACTION_DOWN ) {", "gt": "showPopupMenuAtPosition ( view , position ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/264"}
{"input": "<s> @ Override public void run ( ) {", "gt": "getSearchItems ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/265"}
{"input": "<s> @ Override public void run ( ) {", "gt": "getSearchItems ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/266"}
{"input": "<s> @ Override public void run ( ) {", "gt": "getSearchItems ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/267"}
{"input": "<s> @ Override", "gt": "public void onClick ( View view ) {", "repo": "simplenote-android", "task_id": "simplenote-android/268"}
{"input": "<s> private void updateItems ( List < Suggestion > suggestions ) { DiffUtil . DiffResult diffResult = DiffUtil . calculateDiff ( new SuggestionDiffCallback ( mSuggestions , suggestions ) ) ; mSuggestions . clear ( ) ;", "gt": "mSuggestions . addAll ( suggestions ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/271"}
{"input": "<s> @ Override public boolean areContentsTheSame ( int itemPositionOld , int itemPositionNew ) { Suggestion itemOld = mListOld . get ( itemPositionOld ) ;", "gt": "Suggestion itemNew = mListNew . get ( itemPositionNew ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/272"}
{"input": "<s> @ Override public boolean areItemsTheSame ( int itemPositionOld , int itemPositionNew ) { Suggestion itemOld = mListOld . get ( itemPositionOld ) ;", "gt": "Suggestion itemNew = mListNew . get ( itemPositionNew ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/273"}
{"input": "<s> @ Override protected ObjectCursor < Note > doInBackground ( Boolean . . . args ) { NoteListFragment fragment = mNoteListFragmentReference . get ( ) ;", "gt": "mIsFromNavSelect = args [ 0 ] ;", "repo": "simplenote-android", "task_id": "simplenote-android/276"}
{"input": "<s> @ Override protected ObjectCursor < Note > doInBackground ( Void . . . args ) {", "gt": "NoteListFragment fragment = mNoteListFragmentReference . get ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/277"}
{"input": "<s> @ Override protected void onPostExecute ( Void aVoid ) { NoteListFragment fragment = mNoteListFragmentReference . get ( ) ;", "gt": "fragment . mActionMode . finish ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/279"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/284"}
{"input": "<s> @ Override public void onDestroy ( ) { if ( mCursor ! = null ) {", "gt": "mCursor . close ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/286"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/289"}
{"input": "<s> @ Override public void run ( ) { if ( mNote ! = null & & mNote . getSimperiumKey ( ) ! = null ) {", "gt": "( ( NestedScrollView ) layout ) . smoothScrollTo ( 0 , mPreferences . getInt ( mNote . getSimperiumKey ( ) , 0 ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/291"}
{"input": "<s> @ Override public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { String url = request . getUrl ( ) . toString ( ) ; if ( url . startsWith ( SimplenoteLinkify . SIMPLENOTE_LINK_PREFIX ) ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . INTERNOTE_LINK_TAPPED , AnalyticsTracker . CATEGORY_LINK , \" <STR_LIT> \" ) ; SimplenoteLinkify . openNote ( requireActivity ( ) , url . replace ( SIMPLENOTE_LINK_PREFIX , \" \" ) ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/292"}
{"input": "<s> private void deleteNote ( ) {", "gt": "NoteUtils . deleteNote ( mNote , getActivity ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/294"}
{"input": "<s> public void updateMarkdown ( String text ) { if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( null , getMarkdownFormattedContent ( mCss , text ) , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/298"}
{"input": "<s> @ Override protected void onPreExecute ( ) {", "gt": "NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference . get ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/299"}
{"input": "<s> @ Override protected void onPostExecute ( Void nada ) { NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference . get ( ) ;", "gt": "fragment . mIsLoadingNote = false ;", "repo": "simplenote-android", "task_id": "simplenote-android/300"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) {", "gt": "super . onNewIntent ( intent ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/302"}
{"input": "<s> @ Override public void onClick ( DialogInterface dialog , int which ) {", "gt": "AuthUtils . logOut ( ( Simplenote ) getApplication ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/303"}
{"input": "<s> @ Override public void setTitle ( CharSequence title ) { if ( getSupportActionBar ( ) ! = null ) {", "gt": "getSupportActionBar ( ) . setTitle ( title ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/306"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( mDrawerLayout ! = null & & mDrawerLayout . isDrawerOpen ( GravityCompat . START ) ) {", "gt": "mDrawerLayout . closeDrawer ( GravityCompat . START ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/307"}
{"input": "<s> @ Override public void onActionModeDestroyed ( ) { if ( mSearchMenuItem ! = null & & ! mSearchMenuItem . isActionViewExpanded ( ) ) {", "gt": "mDrawerLayout . setDrawerLockMode ( DrawerLayout . LOCK_MODE_UNLOCKED ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/308"}
{"input": "<s> private List < Tag > getTagsFromCursor ( Bucket . ObjectCursor < Tag > tagCursor ) { List < Tag > tags = new ArrayList < > ( ) ; for ( int i = 0 ; i < tagCursor . getCount ( ) ; i + + ) { tagCursor . moveToNext ( ) ; Tag tag = tagCursor . getObject ( ) ; if ( ! collaboratorsRepository . isValidCollaborator ( tag . getName ( ) ) ) {", "gt": "tags . add ( tag ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/311"}
{"input": "<s> private void setSelectedTagActive ( ) { if ( mSelectedTag = = null ) { mSelectedTag = mTagsAdapter . getDefaultItem ( ) ; } MenuItem selectedMenuItem = mNavigationMenu . findItem ( ( int ) mSelectedTag . id ) ; if ( selectedMenuItem ! = null ) { selectedMenuItem . setChecked ( true ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/313"}
{"input": "<s> public void updateTrashMenuItem ( boolean shouldWaitForAnimation ) { if ( shouldWaitForAnimation ) { new Handler ( ) . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { updateTrashMenuItem ( ) ; }", "gt": "} , getResources ( ) . getInteger ( R . integer . time_animation ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/316"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( String queryText ) { getNoteListFragment ( ) . searchNotes ( queryText , true ) ; getNoteListFragment ( ) . addSearchItem ( queryText , 0 ) ;", "gt": "checkEmptyListText ( true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/320"}
{"input": "<s> @ Override public void run ( ) { item . setIcon ( drawable ) ;", "gt": "item . setTitle ( string ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/324"}
{"input": "<s> public void submitSearch ( String selection ) { if ( mSearchView ! = null ) { String query = mSearchView . getQuery ( ) . toString ( ) ; if ( query . endsWith ( TAG_PREFIX ) ) { mSearchView . setQuery ( query . substring ( 0 , query . lastIndexOf ( TAG_PREFIX ) ) + selection , true ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/325"}
{"input": "<s> @ Override public void run ( ) { if ( ! mNotesBucket . hasChangeVersion ( ) ) {", "gt": "setToolbarProgressVisibility ( true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/328"}
{"input": "<s> @ Override public void run ( ) {", "gt": "AppLog . add ( Type . ACCOUNT , \" <STR_LIT> \" ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/329"}
{"input": "<s> private void setToolbarProgressVisibility ( boolean isVisible ) { if ( getSupportActionBar ( ) ! = null ) {", "gt": "getSupportActionBar ( ) . setDisplayShowCustomEnabled ( isVisible ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/330"}
{"input": "<s> private void togglePreview ( MenuItem item ) { if ( mIsShowingMarkdown ) { setIconAfterAnimation ( item , R . drawable . av_visibility_on_off_24dp , R . string . markdown_show ) ; setMarkdownShowing ( false ) ; mCurrentNote . setPreviewEnabled ( false ) ; } else { setIconAfterAnimation ( item , R . drawable . av_visibility_off_on_24dp , R . string . markdown_hide ) ;", "gt": "setMarkdownShowing ( true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/337"}
{"input": "<s> @ Override protected Void doInBackground ( Void . . . voids ) { NotesActivity activity = mNotesActivityReference . get ( ) ; if ( activity . mNotesBucket = = null ) { return null ; } Query < Note > query = Note . allDeleted ( activity . mNotesBucket ) ; Bucket . ObjectCursor cursor = query . execute ( ) ;", "gt": "while ( cursor . moveToNext ( ) ) {", "repo": "simplenote-android", "task_id": "simplenote-android/342"}
{"input": "<s> @ Override protected void onPostExecute ( Void nada ) { NotesActivity activity = mNotesActivityReference . get ( ) ; if ( activity ! = null ) {", "gt": "activity . showDetailPlaceholder ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/343"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/345"}
{"input": "<s> @ Override public void onAppWidgetOptionsChanged ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , Bundle newOptions ) { RemoteViews views = new RemoteViews ( context . getPackageName ( ) , PrefUtils . getLayoutWidget ( context , false ) ) ;", "gt": "resizeWidget ( newOptions , views ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/346"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/347"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/349"}
{"input": "<s> @ Override public void onAppWidgetOptionsChanged ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , Bundle newOptions ) { RemoteViews views = new RemoteViews ( context . getPackageName ( ) , PrefUtils . getLayoutWidget ( context , true ) ) ;", "gt": "resizeWidget ( newOptions , views ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/350"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/351"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/353"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { if ( ! isAdded ( ) ) { return false ; } Simplenote currentApp = ( Simplenote ) getActivity ( ) . getApplication ( ) ; if ( currentApp . getSimperium ( ) . needsAuthorization ( ) ) { Intent loginIntent = new Intent ( getActivity ( ) , SimplenoteAuthenticationActivity . class ) ; startActivityForResult ( loginIntent , Simperium . SIGNUP_SIGNIN_REQUEST ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/355"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . USER_ACCOUNT_DELETE_REQUESTED , AnalyticsTracker . CATEGORY_USER , \" <STR_LIT> \" ) ;", "gt": "showDeleteAccountDialog ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/356"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { try { BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , \" <STR_LIT> \" ) ;", "gt": "} catch ( Exception e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/357"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { try { BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , \" <STR_LIT> \" ) ;", "gt": "} catch ( Exception e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/358"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "startActivity ( new Intent ( getActivity ( ) , AboutActivity . class ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/359"}
{"input": "<s> @ Override public boolean onPreferenceChange ( Preference preference , Object newValue ) {", "gt": "updateTheme ( requireActivity ( ) , Integer . parseInt ( newValue . toString ( ) ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/362"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "startActivity ( new Intent ( requireContext ( ) , StyleActivity . class ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/364"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "( ( PreferencesActivity ) requireActivity ( ) ) . openBrowserForMembership ( getView ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/365"}
{"input": "<s> @ Override public boolean onPreferenceChange ( Preference preference , Object newValue ) { try { boolean isChecked = ( boolean ) newValue ; Preferences prefs = mPreferencesBucket . get ( PREFERENCES_OBJECT_KEY ) ; prefs . setAnalyticsEnabled ( isChecked ) ; prefs . save ( ) ;", "gt": "} catch ( BucketObjectMissingException e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/367"}
{"input": "<s> private void closeProgressDialogDeleteAccount ( ) { if ( mProgressDialogFragment ! = null & & ! mProgressDialogFragment . isHidden ( ) ) { mProgressDialogFragment . dismiss ( ) ;", "gt": "mProgressDialogFragment = null ;", "repo": "simplenote-android", "task_id": "simplenote-android/370"}
{"input": "<s> private boolean hasUnsyncedNotes ( ) { Simplenote application = ( Simplenote ) getActivity ( ) . getApplication ( ) ; Bucket < Note > notesBucket = application . getNotesBucket ( ) ; Bucket . ObjectCursor < Note > notesCursor = notesBucket . allObjects ( ) ; while ( notesCursor . moveToNext ( ) ) { Note note = notesCursor . getObject ( ) ; if ( note . isNew ( ) | | note . isModified ( ) ) {", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/373"}
{"input": "<s> private void logOut ( ) { AppLog . add ( Type . ACTION , \" <STR_LIT> \" ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . USER_SIGNED_OUT , AnalyticsTracker . CATEGORY_USER , \" <STR_LIT> \" ) ;", "gt": "AuthUtils . logOut ( ( Simplenote ) requireActivity ( ) . getApplication ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/374"}
{"input": "<s> @ Override public void run ( ) {", "gt": "fragment . closeProgressDialogDeleteAccount ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/378"}
{"input": "<s> @ Override public void run ( ) {", "gt": "fragment . closeProgressDialogDeleteAccount ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/379"}
{"input": "<s> @ Override public boolean onConfirmClicked ( FullScreenDialogController controller ) { if ( ! NetworkUtils . isNetworkAvailable ( requireContext ( ) ) ) { Toast . makeText ( requireContext ( ) , R . string . error_network_required , Toast . LENGTH_LONG ) . show ( ) ; return false ; } if ( mHasSentEmail ) { Toast . makeText ( requireContext ( ) , R . string . toast_email_sent , Toast . LENGTH_SHORT ) . show ( ) ; } else {", "gt": "showVerifyEmail ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/392"}
{"input": "<s> public static Bundle newBundle ( boolean hasSentEmail ) { Bundle bundle = new Bundle ( ) ;", "gt": "bundle . putBoolean ( EXTRA_SENT_EMAIL , hasSentEmail ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/398"}
{"input": "<s> public boolean isLoggedIn ( ) {", "gt": "User user = mSimperium . getUser ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/411"}
{"input": "<s> public String getUserEmail ( ) {", "gt": "User user = mSimperium . getUser ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/412"}
{"input": "<s> @ Override public void onUpdate ( String entityId , Calendar lastSyncTime , boolean isSynced ) { if ( lastSyncTime ! = null ) {", "gt": "mPreferences . edit ( ) . putLong ( entityId , lastSyncTime . getTimeInMillis ( ) ) . apply ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/414"}
{"input": "<s> @ Override public void onActivityDestroyed ( Activity activity ) { super . onActivityDestroyed ( activity ) ; if ( activity instanceof NoteWidgetLightConfigureActivity | | activity instanceof NoteWidgetDarkConfigureActivity ) {", "gt": "isAlreadyLocked = false ;", "repo": "simplenote-android", "task_id": "simplenote-android/416"}
{"input": "<s> @ Override public void onActivityResumed ( Activity activity ) { if ( ( activity instanceof NoteWidgetDarkConfigureActivity | | activity instanceof NoteWidgetLightConfigureActivity ) & & isPasswordLocked ( ) & & ! isAlreadyLocked ) { Intent i = new Intent ( activity . getApplicationContext ( ) , PasscodeUnlockActivity . class ) ; activity . startActivity ( i ) ;", "gt": "isAlreadyLocked = true ;", "repo": "simplenote-android", "task_id": "simplenote-android/417"}
{"input": "<s> private void notifyUpdate ( String entityId ) { for ( SyncTimeListener listener : mListeners ) {", "gt": "listener . onUpdate ( entityId , getLastSyncTime ( entityId ) , isSynced ( entityId ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/421"}
{"input": "<s> private void notifyRemove ( String entityId ) { for ( SyncTimeListener listener : mListeners ) {", "gt": "listener . onRemove ( entityId ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/422"}
{"input": "<s> private void updateSyncTime ( String entityId ) { Calendar now = Calendar . getInstance ( ) ;", "gt": "mSyncTimes . put ( entityId , now ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/423"}
{"input": "<s> @ Override public void onDeleteObject ( Bucket < T > bucket , T object ) {", "gt": "mSyncTimes . remove ( object . getSimperiumKey ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/424"}
{"input": "<s> @ Override public void onNetworkChange ( Bucket < T > bucket , Bucket . ChangeType type , String entityId ) { if ( entityId = = null ) { return ; } if ( type = = Bucket . ChangeType . REMOVE ) { mSyncTimes . remove ( entityId ) ; notifyRemove ( entityId ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/425"}
{"input": "<s> @ Override public void onSyncObject ( Bucket < T > bucket , String noteId ) {", "gt": "updateSyncTime ( noteId ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/426"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( )", "gt": "_binding = null", "repo": "simplenote-android", "task_id": "simplenote-android/427"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "DisplayUtils . disableScreenshotsIfLocked ( this )", "repo": "simplenote-android", "task_id": "simplenote-android/435"}
{"input": "<s> private fun ActivityTagsBinding . setEmptyListMessage ( message : String ? ) { message ? . let {", "gt": "empty . text . text = it", "repo": "simplenote-android", "task_id": "simplenote-android/441"}
{"input": "<s> @ Override protected void onRestart ( ) { super . onRestart ( ) ;", "gt": "if ( mThemeChanged ) {", "repo": "simplenote-android", "task_id": "simplenote-android/444"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( key . equals ( PrefUtils . PREF_THEME ) | | key . equals ( PrefUtils . PREF_STYLE_INDEX ) ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) { recreate ( ) ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/445"}
{"input": "<s> @ Override public void onFailure ( @ NonNull Call call , @ NonNull IOException e ) {", "gt": "String url = call . request ( ) . url ( ) . toString ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/451"}
{"input": "<s> private void updateState ( Status newState ) { if ( newState ! = currentState ) { currentState = newState ;", "gt": "listener . onUpdate ( newState ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/454"}
{"input": "<s> @ Override public void onAnimationEnd ( Animation animation ) { Animation animationIn = AnimationUtils . loadAnimation ( textView . getContext ( ) , android . R . anim . fade_in ) ;", "gt": "textView . setText ( newText ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/457"}
{"input": "<s> public static void magicLinkLogin ( Simplenote application , Uri uri ) { String userEmail = extractEmailFromMagicLink ( uri ) ;", "gt": "String spToken = uri . getQueryParameter ( \" <STR_LIT> \" ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/460"}
{"input": "<s> public void swapCursor ( Cursor newCursor ) { if ( newCursor = = mCursor ) { return ; } if ( newCursor ! = null ) { mCursor = newCursor ; mDataValid = true ; notifyDataSetChanged ( ) ; } else { notifyItemRangeRemoved ( 0 , getItemCount ( ) ) ;", "gt": "mCursor = null ;", "repo": "simplenote-android", "task_id": "simplenote-android/467"}
{"input": "<s> public static Point getDisplayPixelSize ( Context context ) { WindowManager wm = ( WindowManager ) context . getSystemService ( Context . WINDOW_SERVICE ) ;", "gt": "Display display = wm . getDefaultDisplay ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/482"}
{"input": "<s> public static int getChecklistIconSize ( @ NonNull Context context , boolean isList ) { int extra = context . getResources ( ) . getInteger ( R . integer . default_font_size_checkbox_extra ) ;", "gt": "int size = PrefUtils . getFontSize ( context ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/486"}
{"input": "<s> public static Drawable tintDrawableWithResource ( Context context , Drawable drawable , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int tint = ContextCompat . getColor ( context , colorRes ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/491"}
{"input": "<s> public static Drawable tintDrawableWithAttribute ( Context context , @ DrawableRes int drawableRes , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/493"}
{"input": "<s> public static int getColor ( Context context , @ AttrRes int tintColorAttribute ) { TypedValue typedValue = new TypedValue ( ) ; Resources . Theme theme = context . getTheme ( ) ;", "gt": "theme . resolveAttribute ( tintColorAttribute , typedValue , true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/494"}
{"input": "<s> public static void tintMenuWithAttribute ( Context context , Menu menu , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/496"}
{"input": "<s> public static void tintMenu ( Menu menu , @ ColorInt int color ) { for ( int i = 0 ; i < menu . size ( ) ; i + + ) { MenuItem item = menu . getItem ( i ) ;", "gt": "DrawableUtils . tintMenuItem ( item , color ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/497"}
{"input": "<s> public static void tintMenuWithResource ( Context context , Menu menu , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int color = ContextCompat . getColor ( context , colorRes ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/498"}
{"input": "<s> public static void tintMenuItem ( MenuItem menuItem , @ ColorInt int color ) {", "gt": "Drawable tinted = DrawableUtils . tintDrawable ( menuItem . getIcon ( ) , color ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/499"}
{"input": "<s> public static void tintMenuItemWithResource ( Context context , MenuItem menuItem , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int color = ContextCompat . getColor ( context , colorRes ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/500"}
{"input": "<s> public static void tintMenuItemWithAttribute ( Context context , MenuItem menuItem , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/501"}
{"input": "<s> public static String readFile ( Context context , Uri uri ) throws IOException { StringBuilder stringBuilder = new StringBuilder ( ) ; InputStream inputStream = context . getContentResolver ( ) . openInputStream ( uri ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; String line ; while ( ( line = reader . readLine ( ) ) ! = null ) { stringBuilder . append ( line ) ;", "gt": "stringBuilder . append ( \" <STR_LIT> <STR_LIT> \" ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/504"}
{"input": "<s> @ Override public int findTokenStart ( CharSequence text , int cursor ) { int i = cursor ; while ( i > 0 & & text . charAt ( i - 1 ) ! = CHARACTER_BRACKET_OPEN ) { i - - ; }", "gt": "if ( i < 1 | | text . charAt ( i - 1 ) ! = CHARACTER_BRACKET_OPEN ) {", "repo": "simplenote-android", "task_id": "simplenote-android/507"}
{"input": "<s> @ Override public CharSequence terminateToken ( CharSequence text ) { if ( text instanceof Spanned ) { SpannableString spannableString = new SpannableString ( text + CHARACTER_BRACKET_CLOSE . toString ( ) ) ; TextUtils . copySpansFrom ( ( Spanned ) text , 0 , text . length ( ) , Object . class , spannableString , 0 ) ;", "gt": "return spannableString ;", "repo": "simplenote-android", "task_id": "simplenote-android/508"}
{"input": "<s> @ Override public void run ( ) { if ( mStopped )", "gt": "return ;", "repo": "simplenote-android", "task_id": "simplenote-android/510"}
{"input": "<s> public static int getFirstMatchLocation ( Spannable content , String matches ) { if ( TextUtils . isEmpty ( matches ) ) { return 0 ; } String [ ] values = matches . split ( \" <STR_LIT:\\\\> <STR_LIT:+> \" , <NUM_LIT:4> ) ; if ( values . length > MATCH_INDEX_START ) { try { int location = Integer . valueOf ( values [ MATCH_INDEX_START ] ) ; return location + getByteOffset ( content , 0 , location ) ; } catch ( NumberFormatException exception ) {", "gt": "return 0 ;", "repo": "simplenote-android", "task_id": "simplenote-android/511"}
{"input": "<s> public void start ( ) { if ( TextUtils . isEmpty ( mMatches ) )", "gt": "return ;", "repo": "simplenote-android", "task_id": "simplenote-android/512"}
{"input": "<s> public void stop ( ) { mStopped = true ;", "gt": "if ( mThread ! = null )", "repo": "simplenote-android", "task_id": "simplenote-android/513"}
{"input": "<s> public void highlightMatches ( String matches , int columnIndex ) { synchronized ( this ) { stop ( ) ; mSpannable = mTextView . getEditableText ( ) ; mMatches = matches ;", "gt": "mIndex = columnIndex ;", "repo": "simplenote-android", "task_id": "simplenote-android/514"}
{"input": "<s> public synchronized void removeMatches ( ) { stop ( ) ; if ( mSpannable ! = null & & mMatchedSpans ! = null ) { for ( Object span : mMatchedSpans ) {", "gt": "mSpannable . removeSpan ( span ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/515"}
{"input": "<s> public static boolean isNetworkAvailable ( Context context ) {", "gt": "NetworkInfo info = getActiveNetworkInfo ( context ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/525"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( mListener ! = null ) {", "gt": "mListener . onItemClick ( item ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/534"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "setRetainInstance ( true ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/537"}
{"input": "<s> public CharSequence terminateToken ( CharSequence text ) { int i = text . length ( ) ; while ( i > 0 & & text . charAt ( i - 1 ) = = <CHAR_LIT> ) { i - - ; } if ( i > 0 & & text . charAt ( i - 1 ) = = <CHAR_LIT> ) { return text ; } else { if ( text instanceof Spanned ) { SpannableString sp = new SpannableString ( text + \" \" ) ; TextUtils . copySpansFrom ( ( Spanned ) text , 0 , text . length ( ) , Object . class , sp , 0 ) ; return sp ;", "gt": "} else {", "repo": "simplenote-android", "task_id": "simplenote-android/540"}
{"input": "<s> public static String notNullStr ( final String value ) { if ( value = = null )", "gt": "return \" \" ;", "repo": "simplenote-android", "task_id": "simplenote-android/541"}
{"input": "<s> public static String urlEncode ( final String text ) { try { return URLEncoder . encode ( text , \" <STR_LIT:UTF-8> \" ) ;", "gt": "} catch ( UnsupportedEncodingException e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/545"}
{"input": "<s> public static String urlDecode ( final String text ) { try { return URLDecoder . decode ( text , \" <STR_LIT:UTF-8> \" ) ;", "gt": "} catch ( UnsupportedEncodingException e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/546"}
{"input": "<s> public static boolean isSameStr ( String s1 , String s2 ) { if ( s1 = = null | | s2 = = null )", "gt": "return ( s1 = = null & & s2 = = null ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/547"}
{"input": "<s> @ Override public void onStopped ( ) {", "gt": "super . onStopped ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/550"}
{"input": "<s> @ Override public void run ( ) {", "gt": "stopBuckets ( \" <STR_LIT> \" ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/551"}
{"input": "<s> override fun onBindViewHolder ( holder : TagItemViewHolder , position : Int ) {", "gt": "val currentTagItem = getItem ( position )", "repo": "simplenote-android", "task_id": "simplenote-android/553"}
{"input": "<s> public void submitList ( List < Tag > tags ) {", "gt": "this . tags = tags ;", "repo": "simplenote-android", "task_id": "simplenote-android/554"}
{"input": "<s> public int getPosition ( TagMenuItem mSelectedTag ) { if ( mSelectedTag . id = = ALL_NOTES_ID ) return 0 ; if ( mSelectedTag . id = = TRASH_ID ) return 1 ; if ( mSelectedTag . id = = UNTAGGED_NOTES_ID ) return this . getCount ( ) - 1 ; if ( tags = = null ) return - 1 ; for ( int i = 0 ; i < tags . size ( ) ; i + + ) { if ( i = = mSelectedTag . id ) {", "gt": "return i + mMinimumItemsPrimary ;", "repo": "simplenote-android", "task_id": "simplenote-android/556"}
{"input": "<s> @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( count > = 1 & & s . charAt ( start ) = = SPACE ) {", "gt": "saveTagOrShowError ( s . toString ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/559"}
{"input": "<s> @ Override public boolean dispatchKeyEvent ( KeyEvent event ) { if ( event . getKeyCode ( ) = = KeyEvent . KEYCODE_ENTER ) { saveTagOrShowError ( getText ( ) . toString ( ) ) ;", "gt": "return true ;", "repo": "simplenote-android", "task_id": "simplenote-android/560"}
{"input": "<s> public void init ( ) {", "gt": "setOnItemClickListener ( this ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/561"}
{"input": "<s> public void notifyTagsChanged ( ) { String lexical = getText ( ) . toString ( ) . trim ( ) ;", "gt": "String canonical = TagUtils . getCanonicalFromLexical ( mBucketTag , lexical ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/562"}
{"input": "<s> public void notifyTagsChanged ( String tag ) { if ( mTagAddedListener ! = null ) {", "gt": "mTagAddedListener . onTagAdded ( tag ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/563"}
{"input": "<s> public static void createTagIfMissing ( Bucket < Tag > bucket , String name ) throws BucketObjectNameInvalid { if ( isTagMissing ( bucket , name ) ) {", "gt": "createTag ( bucket , name , bucket . count ( ) ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/566"}
{"input": "<s> public static List < String > findTagsMatch ( List < String > tags , String tagSearch ) { List < String > tagsMatched = new ArrayList < > ( ) ; String tagSearchHash = hashTag ( tagSearch ) ; for ( String tag : tags ) { String tagHash = hashTag ( tag ) ; if ( tagHash . equals ( tagSearchHash ) ) {", "gt": "tagsMatched . add ( tag ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/567"}
{"input": "<s> public static int getColorResourceFromAttribute ( @ NonNull Context context , @ AttrRes int attribute ) { TypedArray typedArray = context . obtainStyledAttributes ( new int [ ] { attribute } ) ; int colorResId = typedArray . getResourceId ( 0 , android . R . color . black ) ;", "gt": "typedArray . recycle ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/575"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( mUndoListener ! = null ) {", "gt": "mUndoListener . onUndo ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/576"}
{"input": "<s> fun start ( ) {", "gt": "_uiState . value = UiState ( \" \" )", "repo": "simplenote-android", "task_id": "simplenote-android/583"}
{"input": "<s> fun update ( note : Note ) {", "gt": "val tags = getTagsUseCase . getTags ( note )", "repo": "simplenote-android", "task_id": "simplenote-android/596"}
{"input": "<s> @ MainThread override fun setValue ( t : T ? ) {", "gt": "pending . set ( true )", "repo": "simplenote-android", "task_id": "simplenote-android/599"}
{"input": "<s> fun start ( ) { viewModelScope . launch { val tagItems = getTagsUseCase . allTags ( )", "gt": "_uiState . value = UiState ( tagItems )", "repo": "simplenote-android", "task_id": "simplenote-android/602"}
{"input": "<s> @ Override public void onClick ( @ NonNull View view ) { setChecked ( ! isChecked ) ; if ( view instanceof SimplenoteEditText ) { try { ( ( SimplenoteEditText ) view ) . toggleCheckbox ( this ) ;", "gt": "} catch ( Exception e ) {", "repo": "simplenote-android", "task_id": "simplenote-android/611"}
{"input": "<s> @ Override public void setAdapter ( Adapter adapterNew ) { final RecyclerView . Adapter adapterOld = getAdapter ( ) ; if ( adapterOld ! = null ) { adapterOld . unregisterAdapterDataObserver ( mObserver ) ; } super . setAdapter ( adapterNew ) ;", "gt": "if ( adapterNew ! = null ) {", "repo": "simplenote-android", "task_id": "simplenote-android/612"}
{"input": "<s> public void setEmptyView ( View emptyView ) {", "gt": "mEmptyView = emptyView ;", "repo": "simplenote-android", "task_id": "simplenote-android/613"}
{"input": "<s> private void toggleEmptyView ( ) { if ( mEmptyView ! = null & & getAdapter ( ) ! = null ) { final boolean empty = getAdapter ( ) . getItemCount ( ) = = 0 ;", "gt": "mEmptyView . setVisibility ( empty ? VISIBLE : GONE ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/614"}
{"input": "<s> @ Override public void setAlpha ( int alpha ) {", "gt": "mPaint . setAlpha ( alpha ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/617"}
{"input": "<s> @ Override public void setColorFilter ( ColorFilter cf ) {", "gt": "mPaint . setColorFilter ( cf ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/618"}
{"input": "<s> public void setColor ( int color ) {", "gt": "mPaint . setColor ( color ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/619"}
{"input": "<s> public void setRadius ( float cornerRadius ) {", "gt": "mRadius = cornerRadius ;", "repo": "simplenote-android", "task_id": "simplenote-android/620"}
{"input": "<s> private void setLinkTokenizer ( ) { mTokenizer = new LinkTokenizer ( ) ; setOnItemClickListener ( this ) ;", "gt": "setTokenizer ( mTokenizer ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/627"}
{"input": "<s> @ Override protected void onSelectionChanged ( int selStart , int selEnd ) { super . onSelectionChanged ( selStart , selEnd ) ; if ( listeners ! = null ) {", "gt": "for ( OnSelectionChangedListener l : listeners ) l . onSelectionChanged ( selStart , selEnd ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/630"}
{"input": "<s> private int findStartOfLineOfSelection ( ) { int position = getSelectionStart ( ) ; if ( position = = - 1 ) { return 0 ; } Editable editable = getText ( ) ; for ( int i = position - 1 ; i > = 0 ; i - - ) { if ( editable . charAt ( i ) = = <STR_LIT:\\n> ) {", "gt": "return i + 1 ;", "repo": "simplenote-android", "task_id": "simplenote-android/633"}
{"input": "<s> private void cancelAnimation ( ) { if ( mAnimator ! = null ) {", "gt": "mAnimator . removeAllListeners ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/636"}
{"input": "<s> private void cancelLongClick ( ) { cancelAnimation ( ) ; mIsMaximumSpeed = false ;", "gt": "removeCallbacks ( mLongPressCallback ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/637"}
{"input": "<s> @ Override public void onAnimationEnd ( Animator animation ) {", "gt": "cancelAnimation ( ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/639"}
{"input": "<s> public static Typeface getTypeface ( Context context , String typefaceName ) { if ( context = = null | | typefaceName = = null ) { return null ; } if ( ! mTypefaceCache . containsKey ( typefaceName ) ) { Typeface typeface = Typeface . createFromAsset ( context . getApplicationContext ( ) . getAssets ( ) , \" <STR_LIT:/> \" + typefaceName ) ; if ( typeface ! = null ) {", "gt": "mTypefaceCache . put ( typefaceName , typeface ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/640"}
{"input": "<s> private void loadSites ( ) { if ( getActivity ( ) = = null | | ! WordPressUtils . hasWPToken ( getActivity ( ) ) ) { return ; } if ( loadSitesFromPreferences ( ) ) { SitesAdapter sitesAdapter = new SitesAdapter ( getActivity ( ) ) ;", "gt": "mListView . setAdapter ( sitesAdapter ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/644"}
{"input": "<s> private boolean loadSitesFromPreferences ( ) { if ( getActivity ( ) = = null ) { return false ; } String savedSites = PrefUtils . getStringPref ( getActivity ( ) , PrefUtils . PREF_WORDPRESS_SITES ) ; if ( ! TextUtils . isEmpty ( savedSites ) ) { try { mSitesArray = new JSONArray ( savedSites ) ; return true ; } catch ( JSONException e ) {", "gt": "return false ;", "repo": "simplenote-android", "task_id": "simplenote-android/646"}
{"input": "<s> @ Override public void run ( ) { if ( mSitesArray . length ( ) = = 0 ) {", "gt": "setDialogStatus ( DialogStatus . CONNECT ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/650"}
{"input": "<s> @ Override public void run ( ) { if ( mSitesArray . length ( ) = = 0 ) {", "gt": "setDialogStatus ( DialogStatus . CONNECT ) ;", "repo": "simplenote-android", "task_id": "simplenote-android/652"}
{"input": "<s> fun showToast ( @ StringRes message : Int , duration : Int ? = null ) { val act = activity ? : return act . runOnUiThread {", "gt": "showToast ( act , act . getString ( message ) , duration )", "repo": "cloudstream", "task_id": "cloudstream/2"}
{"input": "<s> fun showToast ( message : String ? , duration : Int ? = null ) { val act = activity ? : return act . runOnUiThread {", "gt": "showToast ( act , message , duration )", "repo": "cloudstream", "task_id": "cloudstream/3"}
{"input": "<s> @ MainThread fun showToast ( act : Activity ? , @ StringRes message : Int , duration : Int ? = null ) {", "gt": "if ( act = = null ) return", "repo": "cloudstream", "task_id": "cloudstream/6"}
{"input": "<s> private fun cdaUggc ( a : String ) : String { val decoded = rot13 ( a )", "gt": "return if ( decoded . endsWith ( \" <STR_LIT> \" ) ) decoded . replace ( \" <STR_LIT> \" , \" <STR_LIT> \" )", "repo": "cloudstream", "task_id": "cloudstream/17"}
{"input": "<s> < reified T > decryptMapped ( input : String , key : String ) : T ? {", "gt": "val decrypt = decrypt ( input , key )", "repo": "cloudstream", "task_id": "cloudstream/39"}
{"input": "<s> private fun splitInput ( input : String ) : List < String > { var counter = 0 val array = ArrayList < String > ( ) var buffer = \" \" for ( c in input ) { when ( c ) { <CHAR_LIT:(> - > counter + + <CHAR_LIT:)> - > counter - - else - > { } } </s", "gt": "private fun splitInput ( input : String ) : List < String > { var counter = 0 val array = ArrayList < String > ( ) var buffer = \" \" for ( c in input ) { when ( c ) { <CHAR_LIT:(> - > counter + + <CHAR_LIT:)> - > counter - - else - > { } }", "repo": "cloudstream", "task_id": "cloudstream/46"}
{"input": "<s> private fun digestPad ( string : String ) : List < BigInteger > { val empList = mutableListOf < BigInteger > ( ) val length = string . length val extra = big15 - ( length . toBigInteger ( ) % big16 ) empList . add ( extra ) for ( i in 0 until length ) { empList . add ( string [ i ] . code . toBigInteger ( ) ) } </s", "gt": "private fun digestPad ( string : String ) : List < BigInteger > { val empList = mutableListOf < BigInteger > ( ) val length = string . length val extra = big15 - ( length . toBigInteger ( ) % big16 ) empList . add ( extra ) for ( i in 0 until length ) { empList . add ( string [ i ] . code . toBigInteger ( ) ) }", "repo": "cloudstream", "task_id": "cloudstream/50"}
{"input": "<s> private fun dashify ( id : String , dashTable : String ) : String { val table = dashTable . split ( \" \" ) return id . mapIndexedNotNull { i , c - >", "gt": "table . getOrNull ( ( baseTable . indexOf ( c ) * <NUM_LIT:16> ) + ( i % <NUM_LIT:16> ) )", "repo": "cloudstream", "task_id": "cloudstream/62"}
{"input": "<s> override fun onPause ( ) { super . onPause ( ) if ( ApkInstaller . delayedInstaller ? . startInstallation ( ) = = true ) { Toast . makeText ( this , R . string . update_started , Toast . LENGTH_LONG ) . show ( ) } </s", "gt": "override fun onPause ( ) { super . onPause ( ) if ( ApkInstaller . delayedInstaller ? . startInstallation ( ) = = true ) { Toast . makeText ( this , R . string . update_started , Toast . LENGTH_LONG ) . show ( ) }", "repo": "cloudstream", "task_id": "cloudstream/68"}
{"input": "<s> private fun handleAppIntent ( intent : Intent ? ) { if ( intent = = null ) return val str = intent . dataString", "gt": "loadCache ( )", "repo": "cloudstream", "task_id": "cloudstream/75"}
{"input": "<s> private fun hidePreviewPopupDialog ( ) { bottomPreviewPopup . dismissSafe ( this )", "gt": "bottomPreviewPopup = null", "repo": "cloudstream", "task_id": "cloudstream/77"}
{"input": "<s> fun newHomePageResponse ( name : String , list : List < SearchResponse > , hasNext : Boolean ? = null , ) : HomePageResponse { return HomePageResponse ( listOf ( HomePageList ( name , list ) ) ,", "gt": "hasNext = hasNext ? : list . isNotEmpty ( )", "repo": "cloudstream", "task_id": "cloudstream/90"}
{"input": "<s> fun newHomePageResponse ( data : MainPageRequest , list : List < SearchResponse > , hasNext : Boolean ? = null , ) : HomePageResponse { return HomePageResponse ( listOf ( HomePageList ( data . name , list , data . horizontalImages ) ) ,", "gt": "hasNext = hasNext ? : list . isNotEmpty ( )", "repo": "cloudstream", "task_id": "cloudstream/91"}
{"input": "<s> fun imdbUrlToIdNullable ( url : String ? ) : String ? {", "gt": "if ( url = = null ) return null", "repo": "cloudstream", "task_id": "cloudstream/102"}
{"input": "<s> fun AnimeSearchResponse . addDub ( episodes : Int ? ) {", "gt": "if ( episodes = = null | | episodes < = 0 ) return", "repo": "cloudstream", "task_id": "cloudstream/109"}
{"input": "<s> fun AnimeSearchResponse . addSub ( episodes : Int ? ) {", "gt": "if ( episodes = = null | | episodes < = 0 ) return", "repo": "cloudstream", "task_id": "cloudstream/110"}
{"input": "<s> fun AnimeLoadResponse . addEpisodes ( status : DubStatus , episodes : List < Episode > ? ) {", "gt": "if ( episodes . isNullOrEmpty ( ) ) return", "repo": "cloudstream", "task_id": "cloudstream/127"}
{"input": "<s> < T > MainAPI . newMovieLoadResponse ( name : String , url : String , type : TvType , data : T ? , initializer : suspend MovieLoadResponse . ( ) - > Unit = { } ) : MovieLoadResponse { if ( data is String ) </s", "gt": "< T > MainAPI . newMovieLoadResponse ( name : String , url : String , type : TvType , data : T ? , initializer : suspend MovieLoadResponse . ( ) - > Unit = { } ) : MovieLoadResponse { if ( data is String )", "repo": "cloudstream", "task_id": "cloudstream/129"}
{"input": "<s> inline fun debugException ( message : ( ) - > String ) { if ( BuildConfig . DEBUG ) {", "gt": "throw DebugException ( message . invoke ( ) )", "repo": "cloudstream", "task_id": "cloudstream/146"}
{"input": "<s> inline fun debugAssert ( assert : ( ) - > Boolean , message : ( ) - > String ) { if ( BuildConfig . DEBUG & & assert . invoke ( ) ) {", "gt": "throw DebugException ( message . invoke ( ) )", "repo": "cloudstream", "task_id": "cloudstream/149"}
{"input": "<s> inline fun debugWarning ( assert : ( ) - > Boolean , message : ( ) - > String ) { if ( BuildConfig . DEBUG & & assert . invoke ( ) ) {", "gt": "logError ( DebugException ( message . invoke ( ) ) )", "repo": "cloudstream", "task_id": "cloudstream/150"}
{"input": "<s> < T > suspendSafeApiCall ( apiCall : suspend ( ) - > T ) : T ? { return try { apiCall . invoke ( )", "gt": "} catch ( throwable : Throwable ) {", "repo": "cloudstream", "task_id": "cloudstream/153"}
{"input": "<s> fun < T > safeFail ( throwable : Throwable ) : Resource < T > {", "gt": "val stackTraceMsg = throwable . getStackTracePretty ( )", "repo": "cloudstream", "task_id": "cloudstream/155"}
{"input": "<s> < K , V , R > Map < out K , V > . amap ( f : suspend ( Map . Entry < K , V > ) - > R ) : List < R > =", "gt": "with ( CoroutineScope ( GlobalScope . coroutineContext ) ) {", "repo": "cloudstream", "task_id": "cloudstream/175"}
{"input": "<s> < A , B > List < A > . amap ( f : suspend ( A ) - > B ) : List < B > =", "gt": "with ( CoroutineScope ( GlobalScope . coroutineContext ) ) {", "repo": "cloudstream", "task_id": "cloudstream/176"}
{"input": "<s> fun checkSafeModeFile ( ) : Boolean { return normalSafeApiCall { val folder = File ( CLOUD_STREAM_FOLDER ) if ( ! folder . exists ( ) ) return @ normalSafeApiCall false val files = folder . listFiles { _ , name - >", "gt": "name . equals ( \" <STR_LIT> \" , ignoreCase = true )", "repo": "cloudstream", "task_id": "cloudstream/190"}
{"input": "<s> fun canVote ( pluginUrl : String ) : Boolean {", "gt": "if ( ! PluginManager . urlPlugins . contains ( pluginUrl ) ) return false", "repo": "cloudstream", "task_id": "cloudstream/207"}
{"input": "<s> protected fun switchToNewAccount ( ) { val accounts = getAccounts ( )", "gt": "lastAccountIndex = accountIndex", "repo": "cloudstream", "task_id": "cloudstream/214"}
{"input": "<s> fun changeAccount ( index : Int ) {", "gt": "accountIndex = index", "repo": "cloudstream", "task_id": "cloudstream/216"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true", "repo": "cloudstream", "task_id": "cloudstream/219"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true", "repo": "cloudstream", "task_id": "cloudstream/236"}
{"input": "<s> private fun setAuthKey ( data : SubtitleOAuthEntity ? ) { if ( data = = null ) removeKey ( accountId , OPEN_SUBTITLES_USER_KEY )", "gt": "currentSession = data", "repo": "cloudstream", "task_id": "cloudstream/255"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true", "repo": "cloudstream", "task_id": "cloudstream/279"}
{"input": "<s> private fun getNextViewPos ( fromPos : Int , direction : Int ) : Int { val offset = calcOffsetToNextView ( direction ) if ( hitBorder ( fromPos , offset ) ) {", "gt": "return fromPos", "repo": "cloudstream", "task_id": "cloudstream/298"}
{"input": "<s> override fun resetView ( ) { setStatus ( null ) currentMetaData = DownloadMetadata ( 0 , 0 , 0 , null )", "gt": "isZeroBytes = true", "repo": "cloudstream", "task_id": "cloudstream/310"}
{"input": "<s> override fun getItemOffsets ( outRect : Rect , view : View , parent : RecyclerView , state : RecyclerView . State ) { if ( parent . getChildAdapterPosition ( view ) = = 0 ) { customView . measure ( View . MeasureSpec . makeMeasureSpec ( parent . measuredWidth , View . MeasureSpec . AT_MOST ) , View . MeasureSpec . makeMeasureSpec ( parent . measuredHeight , View . MeasureSpec . AT_MOST ) )", "gt": "outRect . set ( 0 , customView . measuredHeight , 0 , 0 )", "repo": "cloudstream", "task_id": "cloudstream/324"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) { is HeaderViewHolder - > { }", "gt": "else - > super . onBindViewHolder ( holder , position - headItems )", "repo": "cloudstream", "task_id": "cloudstream/336"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/344"}
{"input": "<s> override fun onCleared ( ) {", "gt": "MainActivity . reloadLibraryEvent - = : : reloadPages", "repo": "cloudstream", "task_id": "cloudstream/351"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "currentColor = 0", "repo": "cloudstream", "task_id": "cloudstream/358"}
{"input": "<s> private fun requestAudioFocus ( ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . O ) {", "gt": "activity ? . requestLocalAudioFocus ( AppUtils . getFocusRequest ( ) )", "repo": "cloudstream", "task_id": "cloudstream/360"}
{"input": "<s> override fun setSubtitleOffset ( offset : Long ) {", "gt": "currentSubtitleOffset = offset", "repo": "cloudstream", "task_id": "cloudstream/375"}
{"input": "<s> override fun onResume ( context : Context ) {", "gt": "if ( exoPlayer = = null )", "repo": "cloudstream", "task_id": "cloudstream/382"}
{"input": "<s> private fun ExoPlayer . seekTime ( time : Long , source : PlayerEventSource ) {", "gt": "updatedTime ( currentPosition + time , source )", "repo": "cloudstream", "task_id": "cloudstream/390"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "playerBinding = null", "repo": "cloudstream", "task_id": "cloudstream/407"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/449"}
{"input": "<s> public void setFinalStreamEndPositionUs ( long streamEndPositionUs ) {", "gt": "checkState ( isCurrentStreamFinal ( ) ) ;", "repo": "cloudstream", "task_id": "cloudstream/452"}
{"input": "<s> @ Override protected void onStreamChanged ( Format [ ] formats , long startPositionUs , long offsetUs ) { streamFormat = formats [ 0 ] ; if ( decoder ! = null ) {", "gt": "decoderReplacementState = REPLACEMENT_STATE_SIGNAL_END_OF_STREAM ;", "repo": "cloudstream", "task_id": "cloudstream/453"}
{"input": "<s> @ Override protected void onPositionReset ( long positionUs , boolean joining ) { clearOutput ( ) ; inputStreamEnded = false ; outputStreamEnded = false ; finalStreamEndPositionUs = C . TIME_UNSET ; if ( decoderReplacementState ! = REPLACEMENT_STATE_NONE ) { replaceDecoder ( ) ;", "gt": "} else {", "repo": "cloudstream", "task_id": "cloudstream/454"}
{"input": "<s> @ Override protected void onDisabled ( ) { streamFormat = null ; finalStreamEndPositionUs = C . TIME_UNSET ;", "gt": "clearOutput ( ) ;", "repo": "cloudstream", "task_id": "cloudstream/455"}
{"input": "<s> private void releaseBuffers ( ) { nextInputBuffer = null ; nextSubtitleEventIndex = C . INDEX_UNSET ; if ( subtitle ! = null ) { subtitle . release ( ) ; subtitle = null ; }", "gt": "if ( nextSubtitle ! = null ) {", "repo": "cloudstream", "task_id": "cloudstream/457"}
{"input": "<s> private void releaseDecoder ( ) { releaseBuffers ( ) ; checkNotNull ( decoder ) . release ( ) ;", "gt": "decoder = null ;", "repo": "cloudstream", "task_id": "cloudstream/458"}
{"input": "<s> private void initDecoder ( ) {", "gt": "waitingForKeyFrame = true ;", "repo": "cloudstream", "task_id": "cloudstream/459"}
{"input": "<s> private void replaceDecoder ( ) {", "gt": "releaseDecoder ( ) ;", "repo": "cloudstream", "task_id": "cloudstream/460"}
{"input": "<s> private void handleDecoderError ( SubtitleDecoderException e ) { Log . e ( TAG , \" <STR_LIT> \" + streamFormat , e ) ;", "gt": "clearOutput ( ) ;", "repo": "cloudstream", "task_id": "cloudstream/464"}
{"input": "<s> fun loadLinksPrev ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( generator ? . hasPrev ( ) = = true ) {", "repo": "cloudstream", "task_id": "cloudstream/466"}
{"input": "<s> fun loadLinksNext ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( generator ? . hasNext ( ) = = true ) {", "repo": "cloudstream", "task_id": "cloudstream/467"}
{"input": "<s> override fun release ( ) { lastGenerator . release ( ) currentGenerator . release ( )", "gt": "lastGenerator = NoPreviewGenerator ( )", "repo": "cloudstream", "task_id": "cloudstream/482"}
{"input": "<s> override fun next ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( hasNext ( ) )", "repo": "cloudstream", "task_id": "cloudstream/491"}
{"input": "<s> override fun prev ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( hasPrev ( ) )", "repo": "cloudstream", "task_id": "cloudstream/492"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is ProfilesViewHolder - > holder . bind ( items [ position ] , position )", "repo": "cloudstream", "task_id": "cloudstream/497"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/505"}
{"input": "<s> override fun onStop ( ) {", "gt": "afterPluginsLoadedEvent - = : : reloadViewModel", "repo": "cloudstream", "task_id": "cloudstream/533"}
{"input": "<s> override fun onDestroyView ( ) { binding = null", "gt": "updateUIEvent - = : : updateUI", "repo": "cloudstream", "task_id": "cloudstream/536"}
{"input": "<s> private fun RecyclerView ? . update ( data : List < SelectData > ) {", "gt": "( this ? . adapter as ? SelectAdaptor ? ) ? . updateSelectionList ( data )", "repo": "cloudstream", "task_id": "cloudstream/539"}
{"input": "<s> override fun onStop ( ) {", "gt": "afterPluginsLoadedEvent - = : : reloadViewModel", "repo": "cloudstream", "task_id": "cloudstream/544"}
{"input": "<s> override fun playerDimensionsLoaded ( width : Int , height : Int ) {", "gt": "playerWidthHeight = width to height", "repo": "cloudstream", "task_id": "cloudstream/547"}
{"input": "<s> fun clear ( ) {", "gt": "currentResponse = null", "repo": "cloudstream", "task_id": "cloudstream/554"}
{"input": "<s> private fun postFavorites ( loadResponse : LoadResponse ) { val id = loadResponse . getId ( )", "gt": "val isFavorite = getFavoritesData ( id ) ! = null", "repo": "cloudstream", "task_id": "cloudstream/575"}
{"input": "<s> fun clear ( ) { syncs . clear ( ) _metaResponse . postValue ( null )", "gt": "_currentSynced . postValue ( getMissing ( ) )", "repo": "cloudstream", "task_id": "cloudstream/596"}
{"input": "<s> @ JvmName ( \" <STR_LIT> \" ) fun img ( url : String ? , headers : Map < String , String > ? = null , @ DrawableRes errorDrawable : Int ? = null ) : UiImage ? {", "gt": "if ( url . isNullOrBlank ( ) ) return null", "repo": "cloudstream", "task_id": "cloudstream/602"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/627"}
{"input": "<s> fun loadRepositories ( ) {", "gt": "val urls = repos ( )", "repo": "cloudstream", "task_id": "cloudstream/633"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/641"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/644"}
{"input": "<s> fun PreferenceFragmentCompat ? . getPref ( id : Int ) : Preference ? { if ( this = = null ) return null return try { findPreference ( getString ( id ) )", "gt": "} catch ( e : Exception ) {", "repo": "cloudstream", "task_id": "cloudstream/659"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/670"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/678"}
{"input": "<s> private fun updateProgress ( ) {", "gt": "_providerProgress . postValue ( TestProgress ( passed , failed , total ) )", "repo": "cloudstream", "task_id": "cloudstream/683"}
{"input": "<s> fun init ( ) {", "gt": "total = synchronized ( APIHolder . allProviders ) { APIHolder . allProviders . size }", "repo": "cloudstream", "task_id": "cloudstream/687"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/691"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/695"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/697"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/699"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/701"}
{"input": "<s> fun push ( activity : Activity ? , hide : Boolean = true ) { activity . navigate ( R . id . global_to_navigation_chrome_subtitles , Bundle ( ) . apply {", "gt": "putBoolean ( \" <STR_LIT> \" , hide )", "repo": "cloudstream", "task_id": "cloudstream/703"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/711"}
{"input": "<s> fun push ( activity : Activity ? , hide : Boolean = true ) { activity . navigate ( R . id . global_to_navigation_subtitles , Bundle ( ) . apply {", "gt": "putBoolean ( \" <STR_LIT> \" , hide )", "repo": "cloudstream", "task_id": "cloudstream/713"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "cloudstream", "task_id": "cloudstream/721"}
{"input": "<s> private fun getHtmlText ( text : String ) : Spanned { return try { HtmlCompat . fromHtml ( text , HtmlCompat . FROM_HTML_MODE_LEGACY )", "gt": "} catch ( e : Exception ) {", "repo": "cloudstream", "task_id": "cloudstream/729"}
{"input": "<s> fun Activity ? . loadCache ( ) { try { cacheClass ( \" <STR_LIT> \" . load ( ) )", "gt": "} catch ( _ : Exception ) {", "repo": "cloudstream", "task_id": "cloudstream/739"}
{"input": "<s> fun getAccounts ( context : Context ) : List < Account > { return accounts . toMutableList ( ) . apply {", "gt": "val item = getDefaultAccount ( context )", "repo": "cloudstream", "task_id": "cloudstream/765"}
{"input": "<s> fun deleteAllResumeStateIds ( ) {", "gt": "val folder = \" <STR_LIT> \"", "repo": "cloudstream", "task_id": "cloudstream/771"}
{"input": "<s> fun getBookmarkedData ( id : Int ? ) : BookmarkedData ? {", "gt": "if ( id = = null ) return null", "repo": "cloudstream", "task_id": "cloudstream/781"}
{"input": "<s> fun getViewPos ( id : Int ? ) : PosDur ? {", "gt": "if ( id = = null ) return null", "repo": "cloudstream", "task_id": "cloudstream/793"}
{"input": "<s> fun getVideoWatchState ( id : Int ? ) : VideoWatchState ? {", "gt": "if ( id = = null ) return null", "repo": "cloudstream", "task_id": "cloudstream/794"}
{"input": "<s> fun getAndUnpack ( string : String ) : String {", "gt": "val packedText = getPacked ( string )", "repo": "cloudstream", "task_id": "cloudstream/805"}
{"input": "<s> fun detect ( ) : Boolean { val p = Pattern . compile ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT:)> \" )", "gt": "val searchResults = p . matcher ( hunterJS )", "repo": "cloudstream", "task_id": "cloudstream/818"}
{"input": "<s> private fun hunter ( h : String , n : String , t : Int , e : Int ) : String { var result = \" \" var i = 0 while ( i < h . length ) { var j = 0 var s = \" \" while ( h [ i ] ! = n [ e ] ) { s + = h [ i ] i + + } while ( j < n . length ) { s = s . replace ( n [ j ] , j . digitToChar ( ) ) j + + }", "gt": "result + = ( duf ( s , e ) - t ) . toChar ( )", "repo": "cloudstream", "task_id": "cloudstream/819"}
{"input": "<s> fun detect ( ) : Boolean { val js = packedJS ! ! . replace ( \" \" , \" \" ) val p = Pattern . compile ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> \" )", "gt": "val m = p . matcher ( js )", "repo": "cloudstream", "task_id": "cloudstream/820"}
{"input": "<s> suspend fun resolveLinkSafe ( index : Int , tries : Int = <NUM_LIT:3> , failDelay : Long = <NUM_LIT> ) : ByteArray ? { for ( i in 0 until tries ) { try { return resolveLink ( index ) } catch ( e : IllegalArgumentException ) { return null } catch ( e : CancellationException ) { return null } catch ( t : Throwable ) {", "gt": "delay ( failDelay )", "repo": "cloudstream", "task_id": "cloudstream/829"}
{"input": "<s> fun getIntent ( context : Context , url : String , ) : Intent {", "gt": "return Intent ( context , PackageInstallerService : : class . java )", "repo": "cloudstream", "task_id": "cloudstream/834"}
{"input": "<s> fun setDownloadFileInfoTemplate ( template : DownloadedFileInfo ) {", "gt": "downloadFileInfoTemplate = template", "repo": "cloudstream", "task_id": "cloudstream/882"}
{"input": "<s> < String , V > . appendAndDontOverride ( rhs : Map < String , V > ) : Map < String , V > { val out = this . toMutableMap ( ) </s", "gt": "< String , V > . appendAndDontOverride ( rhs : Map < String , V > ) : Map < String , V > { val out = this . toMutableMap ( )", "repo": "cloudstream", "task_id": "cloudstream/890"}
{"input": "<s> fun deleteFileAndUpdateSettings ( context : Context , id : Int ) : Boolean { val success = deleteFile ( context , id )", "gt": "if ( success ) context . removeKey ( KEY_DOWNLOAD_INFO , id . toString ( ) )", "repo": "cloudstream", "task_id": "cloudstream/897"}
{"input": "<s> fun setOnSizeListener ( listener : ( Int ) - > Unit ) {", "gt": "lastViewIndex = null", "repo": "cloudstream", "task_id": "cloudstream/905"}
{"input": "<s> fun snap ( snap : Int ? = null , callback : ( Int ) - > Unit ) {", "gt": "waitForSnap = callback", "repo": "cloudstream", "task_id": "cloudstream/907"}
{"input": "<s> private fun loadDrawCanvas ( ) { binding . defaultImageView . beGone ( ) binding . cropImageView . beGone ( ) binding . editorDrawCanvas . beVisible ( ) if ( ! wasDrawCanvasPositioned ) { wasDrawCanvasPositioned = true binding . editorDrawCanvas . onGlobalLayout { ensureBackgroundThread {", "gt": "fillCanvasBackground ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/4"}
{"input": "<s> private fun editWith ( ) {", "gt": "openEditor ( uri . toString ( ) , true )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/18"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/37"}
{"input": "<s> private fun showAllMedia ( ) { config . showAll = true Intent ( this , MediaActivity : : class . java ) . apply { putExtra ( DIRECTORY , \" \" ) if ( mIsThirdPartyIntent ) { handleMediaIntent ( this ) } else { hideKeyboard ( )", "gt": "startActivity ( this )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/44"}
{"input": "<s> private fun tryToggleTemporarilyShowHidden ( ) { if ( config . temporarilyShowHidden ) { toggleTemporarilyShowHidden ( false ) } else { if ( isRPlus ( ) & & ! isExternalStorageManager ( ) ) { GrantAllFilesDialog ( this ) } else { handleHiddenFolderPasswordProtection {", "gt": "toggleTemporarilyShowHidden ( true )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/46"}
{"input": "<s> private fun setAsDefaultFolder ( ) {", "gt": "config . defaultFolder = \" \"", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/59"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/71"}
{"input": "<s> private fun switchToFolderView ( ) { hideKeyboard ( ) config . showAll = false", "gt": "startActivity ( Intent ( this , MainActivity : : class . java ) )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/79"}
{"input": "<s> private fun createNewFolder ( ) { CreateNewFolderDialog ( this , mPath ) {", "gt": "config . tempFolderPath = it", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/84"}
{"input": "<s> private fun tryToggleTemporarilyShowHidden ( ) { if ( config . temporarilyShowHidden ) { toggleTemporarilyShowHidden ( false ) } else { if ( isRPlus ( ) & & ! isExternalStorageManager ( ) ) { GrantAllFilesDialog ( this ) } else { handleHiddenFolderPasswordProtection {", "gt": "toggleTemporarilyShowHidden ( true )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/85"}
{"input": "<s> private fun setAsDefaultFolder ( ) {", "gt": "config . defaultFolder = mPath", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/94"}
{"input": "<s> private fun unsetAsDefaultFolder ( ) {", "gt": "config . defaultFolder = \" \"", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/95"}
{"input": "<s> private fun handleClick ( ) { isFullscreen = ! isFullscreen toggleButtonVisibility ( ) if ( isFullscreen ) {", "gt": "hideSystemUI ( false )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/102"}
{"input": "<s> private fun handleClick ( ) { mIsFullscreen = ! mIsFullscreen toggleButtonVisibility ( ) if ( mIsFullscreen ) {", "gt": "hideSystemUI ( false )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/114"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "mIsVideo = false", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/118"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/128"}
{"input": "<s> private fun setupListLayoutManager ( ) { val layoutManager = binding . searchGrid . layoutManager as MyGridLayoutManager", "gt": "layoutManager . spanCount = 1", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/132"}
{"input": "<s> private fun setupChangeDateTimeFormat ( ) { binding . settingsChangeDateTimeFormatHolder . setOnClickListener {", "gt": "ChangeDateTimeFormatDialog ( this ) { }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/141"}
{"input": "<s> private fun changeAspectRatio ( ) {", "gt": "aspectRatio = + + aspectRatio % ( RATIO_SQUARE + 1 )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/191"}
{"input": "<s> protected fun unregisterFileUpdateListener ( ) { try { contentResolver . unregisterContentObserver ( observer )", "gt": "} catch ( ignored : Exception ) {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/194"}
{"input": "<s> private fun launchActivity ( ) {", "gt": "startActivity ( Intent ( this , MainActivity : : class . java ) )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/196"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "mIsVideo = true", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/197"}
{"input": "<s> private fun slideshowEnded ( forward : Boolean ) { if ( config . loopSlideshow ) { if ( forward ) { binding . viewPager . setCurrentItem ( 0 , false ) } else { binding . viewPager . setCurrentItem ( binding . viewPager . adapter ! ! . count - 1 , false ) }", "gt": "} else {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/229"}
{"input": "<s> private fun rotateBy ( degrees : Int ) {", "gt": "getCurrentPhotoFragment ( ) ? . rotateImageViewBy ( degrees )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/236"}
{"input": "<s> private fun toggleFavorite ( ) { val medium = getCurrentMedium ( ) ? : return medium . isFavorite = ! medium . isFavorite ensureBackgroundThread { updateFavorite ( medium . path , medium . isFavorite ) if ( medium . isFavorite ) { mFavoritePaths . add ( medium . path ) } </s", "gt": "private fun toggleFavorite ( ) { val medium = getCurrentMedium ( ) ? : return medium . isFavorite = ! medium . isFavorite ensureBackgroundThread { updateFavorite ( medium . path , medium . isFavorite ) if ( medium . isFavorite ) { mFavoritePaths . add ( medium . path ) }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/241"}
{"input": "<s> private fun resizeImage ( ) {", "gt": "val oldPath = getCurrentPath ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/243"}
{"input": "<s> private fun refreshUI ( media : ArrayList < Medium > , refetchViewPagerPosition : Boolean ) { mPrevHashcode = media . hashCode ( ) </s", "gt": "private fun refreshUI ( media : ArrayList < Medium > , refetchViewPagerPosition : Boolean ) { mPrevHashcode = media . hashCode ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/247"}
{"input": "<s> override fun fragmentClicked ( ) { mIsFullScreen = ! mIsFullScreen", "gt": "checkSystemUI ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/248"}
{"input": "<s> override fun goToPrevItem ( ) {", "gt": "binding . viewPager . setCurrentItem ( binding . viewPager . currentItem - 1 , false )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/250"}
{"input": "<s> override fun goToNextItem ( ) {", "gt": "binding . viewPager . setCurrentItem ( binding . viewPager . currentItem + 1 , false )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/251"}
{"input": "<s> private fun checkSystemUI ( ) { if ( mIsFullScreen ) { hideSystemUI ( true )", "gt": "} else {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/252"}
{"input": "<s> private fun requestWidgetUpdate ( ) { Intent ( AppWidgetManager . ACTION_APPWIDGET_UPDATE , null , this , MyWidgetProvider : : class . java ) . apply { putExtra ( AppWidgetManager . EXTRA_APPWIDGET_IDS , intArrayOf ( mWidgetId ) )", "gt": "sendBroadcast ( this )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/258"}
{"input": "<s> override fun onActionModeDestroyed ( ) { if ( isDragAndDropping ) { notifyDataSetChanged ( ) val reorderedFoldersList = dirs . map { it . path } config . customFoldersOrder = TextUtils . join ( \" <STR_LIT> \" , reorderedFoldersList )", "gt": "config . directorySorting = SORT_BY_CUSTOM", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/267"}
{"input": "<s> override fun onViewRecycled ( holder : ViewHolder ) { super . onViewRecycled ( holder ) if ( ! activity . isDestroyed ) {", "gt": "Glide . with ( activity ) . clear ( bindItem ( holder . itemView ) . dirThumbnail )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/268"}
{"input": "<s> private fun tryLockFolder ( ) { if ( config . wasFolderLockingNoticeShown ) { lockFolder ( ) } else {", "gt": "FolderLockingNoticeDialog ( activity ) {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/278"}
{"input": "<s> fun updateAnimateGifs ( animateGifs : Boolean ) {", "gt": "this . animateGifs = animateGifs", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/291"}
{"input": "<s> fun updateCropThumbnails ( cropThumbnails : Boolean ) {", "gt": "this . cropThumbnails = cropThumbnails", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/292"}
{"input": "<s> private fun checkDeleteConfirmation ( ) { activity . handleMediaManagementPrompt { if ( config . isDeletePasswordProtectionOn ) { activity . handleDeletePasswordProtection { deleteFiles ( config . tempSkipRecycleBin ) } } else if ( config . tempSkipDeleteConfirmation | | config . skipDeleteConfirmation ) { deleteFiles ( config . tempSkipRecycleBin )", "gt": "} else {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/323"}
{"input": "<s> fun updateAnimateGifs ( animateGifs : Boolean ) {", "gt": "this . animateGifs = animateGifs", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/326"}
{"input": "<s> fun updateCropThumbnails ( cropThumbnails : Boolean ) {", "gt": "this . cropThumbnails = cropThumbnails", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/327"}
{"input": "<s> fun updateShowFileTypes ( showFileTypes : Boolean ) {", "gt": "this . showFileTypes = showFileTypes", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/328"}
{"input": "<s> private fun setupSection ( view : View , section : ThumbnailSection ) { ThumbnailSectionBinding . bind ( view ) . apply { thumbnailSection . text = section . title", "gt": "thumbnailSection . setTextColor ( textColor )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/330"}
{"input": "<s> fun stopFetching ( ) {", "gt": "mediaFetcher . shouldStop = true", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/341"}
{"input": "<s> private fun MySearchMenu . setSearchViewListeners ( ) { onSearchOpenListener = { updateSearchViewLeftIcon ( com . simplemobiletools . commons . R . drawable . ic_cross_vector ) } </s", "gt": "private fun MySearchMenu . setSearchViewListeners ( ) { onSearchOpenListener = { updateSearchViewLeftIcon ( com . simplemobiletools . commons . R . drawable . ic_cross_vector ) }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/357"}
{"input": "<s> @ TargetApi ( Build . VERSION_CODES . N ) fun Activity . showFileOnMap ( path : String ) { val exif = try { if ( path . startsWith ( \" <STR_LIT> \" ) & & isNougatPlus ( ) ) { ExifInterface ( contentResolver . openInputStream ( Uri . parse ( path ) ) ! ! ) } else { ExifInterface ( path ) } } catch ( e : Exception ) { showErrorToast ( e ) return } val latLon = FloatArray ( <NUM_LIT:2> ) if ( exif . getLatLong ( latLon ) ) {", "gt": "showLocationOnMap ( \" <STR_LIT> \" )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/384"}
{"input": "<s> < String > , noMediaFolders : ArrayList < String > ) : String { val dirName = getFolderNameFromPath ( path ) val folderNoMediaStatuses = HashMap < String , Boolean > ( ) noMediaFolders . forEach { folder - > folderNoMediaStatuses [ \" <STR_LIT> \" ] = true } </s", "gt": "< String > , noMediaFolders : ArrayList < String > ) : String { val dirName = getFolderNameFromPath ( path ) val folderNoMediaStatuses = HashMap < String , Boolean > ( ) noMediaFolders . forEach { folder - > folderNoMediaStatuses [ \" <STR_LIT> \" ] = true }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/392"}
{"input": "<s>", "gt": "for ( i in 0 until fakeItemsCnt ) {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/424"}
{"input": "<s> private fun openPanorama ( ) { Intent ( context , PanoramaPhotoActivity : : class . java ) . apply { putExtra ( PATH , mMedium . path )", "gt": "startActivity ( this )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/427"}
{"input": "<s> private fun openPanorama ( ) { Intent ( context , PanoramaVideoActivity : : class . java ) . apply { putExtra ( PATH , mMedium . path )", "gt": "startActivity ( this )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/446"}
{"input": "<s> private fun getLatLonAltitude ( path : String ) : String { var result = \" \" val exif = try { ExifInterface ( path ) } catch ( e : Exception ) { return \" \" } val latLon = FloatArray ( <NUM_LIT:2> ) if ( exif . getLatLong ( latLon ) ) { result = \" <STR_LIT> \" } val altitude = exif . getAltitude ( <NUM_LIT:0.0> ) if ( altitude ! = <NUM_LIT:0.0> ) {", "gt": "result + = \" <STR_LIT> \"", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/460"}
{"input": "<s> private fun getDirectoryColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { DIR_HORIZONTAL_COLUMN_CNT } </s", "gt": "private fun getDirectoryColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { DIR_HORIZONTAL_COLUMN_CNT }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/471"}
{"input": "<s> private fun getMediaColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { MEDIA_HORIZONTAL_COLUMN_CNT } </s", "gt": "private fun getMediaColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { MEDIA_HORIZONTAL_COLUMN_CNT }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/473"}
{"input": "<s> override fun transformPage ( view : View , position : Float ) { view . translationX = view . width * - position view . alpha = if ( position < = - <NUM_LIT> | | position > = <NUM_LIT> ) { <NUM_LIT> } </s", "gt": "override fun transformPage ( view : View , position : Float ) { view . translationX = view . width * - position view . alpha = if ( position < = - <NUM_LIT> | | position > = <NUM_LIT> ) { <NUM_LIT> }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/478"}
{"input": "<s> fun clearThumbs ( ) {", "gt": "filterThumbnails = ArrayList ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/480"}
{"input": "<s> private fun addFolder ( curFolders : HashSet < String > , folder : String ) { curFolders . add ( folder ) val files = File ( folder ) . listFiles ( ) ? : return for ( file in files ) {", "gt": "if ( file . isDirectory ) {", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/483"}
{"input": "<s> private fun formatDate ( timestamp : String , showDay : Boolean ) : String { return if ( timestamp . areDigitsOnly ( ) ) { val cal = Calendar . getInstance ( Locale . ENGLISH ) cal . timeInMillis = timestamp . toLong ( ) val format = if ( showDay ) context . config . dateFormat else \" <STR_LIT> \"", "gt": "DateFormat . format ( format , cal ) . toString ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/485"}
{"input": "<s> private fun actionDown ( x : Float , y : Float ) { mPath . reset ( ) mPath . moveTo ( x , y )", "gt": "mCurX = x", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/506"}
{"input": "<s> private fun actionMove ( x : Float , y : Float ) { mPath . quadTo ( mCurX , mCurY , ( x + mCurX ) / <NUM_LIT:2> , ( y + mCurY ) / <NUM_LIT:2> )", "gt": "mCurX = x", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/507"}
{"input": "<s> fun updateBackgroundBitmap ( bitmap : Bitmap ) {", "gt": "backgroundBitmap = bitmap", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/510"}
{"input": "<s> fun getBitmap ( ) : Bitmap { val bitmap = Bitmap . createBitmap ( width , height , Bitmap . Config . ARGB_8888 )", "gt": "val canvas = Canvas ( bitmap )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/511"}
{"input": "<s> private fun showValue ( percent : Int ) { slideInfoView . apply { text = \" <STR_LIT> <STR_LIT> <STR_LIT> \"", "gt": "alpha = <NUM_LIT>", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/518"}
{"input": "<s> public void setCustomTabView ( int layoutResId , int textViewId ) {", "gt": "mTabViewLayoutId = layoutResId ;", "repo": "vanilla", "task_id": "vanilla/0"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mViewPager ! = null ) {", "gt": "scrollToTab ( mViewPager . getCurrentItem ( ) , 0 ) ;", "repo": "vanilla", "task_id": "vanilla/2"}
{"input": "<s> @ Override public void onPageScrollStateChanged ( int state ) { mScrollState = state ; if ( mViewPagerPageChangeListener ! = null ) {", "gt": "mViewPagerPageChangeListener . onPageScrollStateChanged ( state ) ;", "repo": "vanilla", "task_id": "vanilla/3"}
{"input": "<s> @ Override public void onClick ( View v ) { for ( int i = 0 ; i < mTabStrip . getChildCount ( ) ; i + + ) { if ( v = = mTabStrip . getChildAt ( i ) ) {", "gt": "mViewPager . setCurrentItem ( i ) ;", "repo": "vanilla", "task_id": "vanilla/5"}
{"input": "<s> void setCustomTabColorizer ( SlidingTabLayout . TabColorizer customTabColorizer ) {", "gt": "mCustomTabColorizer = customTabColorizer ;", "repo": "vanilla", "task_id": "vanilla/6"}
{"input": "<s> void setSelectedIndicatorColors ( int . . . colors ) { mCustomTabColorizer = null ;", "gt": "mDefaultTabColorizer . setIndicatorColors ( colors ) ;", "repo": "vanilla", "task_id": "vanilla/7"}
{"input": "<s> void onViewPagerPageChanged ( int position , float positionOffset ) { mSelectedPosition = position ;", "gt": "mSelectionOffset = positionOffset ;", "repo": "vanilla", "task_id": "vanilla/8"}
{"input": "<s> @ Override protected TextView createDefaultTabView ( Context context ) { TextView view = super . createDefaultTabView ( context ) ; view . setTextColor ( getResources ( ) . getColorStateList ( ch . blinkenlights . android . vanilla . R . color . tab_text_selector ) ) ; view . setBackgroundResource ( ch . blinkenlights . android . vanilla . R . drawable . unbound_ripple_light ) ;", "gt": "view . setMaxLines ( 1 ) ;", "repo": "vanilla", "task_id": "vanilla/10"}
{"input": "<s> public static void startLibraryScan ( Context context , boolean forceFull , boolean drop ) { MediaLibraryBackend backend = getBackend ( context ) ; if ( drop ) { sScanner . flushDatabase ( ) ; } if ( forceFull ) {", "gt": "sScanner . startFullScan ( ) ;", "repo": "vanilla", "task_id": "vanilla/13"}
{"input": "<s> public static void abortLibraryScan ( Context context ) {", "gt": "MediaLibraryBackend backend = getBackend ( context ) ;", "repo": "vanilla", "task_id": "vanilla/14"}
{"input": "<s> public static MediaLibrary . ScanProgress describeScanProgress ( Context context ) {", "gt": "MediaLibraryBackend backend = getBackend ( context ) ;", "repo": "vanilla", "task_id": "vanilla/15"}
{"input": "<s> public static void registerLibraryObserver ( LibraryObserver observer ) { if ( sLibraryObservers . contains ( observer ) )", "gt": "throw new IllegalStateException ( \" <STR_LIT> \" ) ;", "repo": "vanilla", "task_id": "vanilla/16"}
{"input": "<s> public static void unregisterLibraryObserver ( LibraryObserver observer ) { boolean removed = sLibraryObservers . remove ( observer ) ;", "gt": "if ( ! removed )", "repo": "vanilla", "task_id": "vanilla/17"}
{"input": "<s> public static int getLibrarySize ( Context context ) { int count = 0 ; Cursor cursor = queryLibrary ( context , TABLE_SONGS , new String [ ] { \" <STR_LIT> \" } , null , null , null ) ;", "gt": "if ( cursor . moveToFirst ( ) )", "repo": "vanilla", "task_id": "vanilla/23"}
{"input": "<s> long getColumnFromSongId ( String column , long id ) { long mtime = 0 ; Cursor cursor = query ( false , MediaLibrary . TABLE_SONGS , new String [ ] { column } , MediaLibrary . SongColumns . _ID + \" <STR_LIT:=> \" + Long . toString ( id ) , null , null , null , null , \" <STR_LIT:1> \" ) ;", "gt": "if ( cursor . moveToFirst ( ) )", "repo": "vanilla", "task_id": "vanilla/25"}
{"input": "<s> int delete ( String table , String whereClause , String [ ] whereArgs ) {", "gt": "SQLiteDatabase dbh = getWritableDatabase ( ) ;", "repo": "vanilla", "task_id": "vanilla/26"}
{"input": "<s> int update ( String table , ContentValues values , String whereClause , String [ ] whereArgs ) {", "gt": "SQLiteDatabase dbh = getWritableDatabase ( ) ;", "repo": "vanilla", "task_id": "vanilla/27"}
{"input": "<s> long insert ( String table , String nullColumnHack , ContentValues values ) { long result = - 1 ; try { result = getWritableDatabase ( ) . insertOrThrow ( table , nullColumnHack , values ) ;", "gt": "} catch ( Exception e ) {", "repo": "vanilla", "task_id": "vanilla/28"}
{"input": "<s> public String getFirst ( String key ) { String result = null ; if ( containsKey ( key ) )", "gt": "result = get ( key ) . get ( 0 ) ;", "repo": "vanilla", "task_id": "vanilla/30"}
{"input": "<s> public void startQuickScan ( int delay ) { if ( ! mHandler . hasMessages ( MSG_GUESS_QUICKSCAN ) & & ! mHandler . hasMessages ( MSG_SCAN_RPC ) ) {", "gt": "mHandler . sendMessageDelayed ( mHandler . obtainMessage ( MSG_GUESS_QUICKSCAN , 0 , 0 ) , delay ) ;", "repo": "vanilla", "task_id": "vanilla/36"}
{"input": "<s> public void abortScan ( ) { mHandler . removeMessages ( MSG_SCAN_RPC ) ;", "gt": "mScanPlan . clear ( ) ;", "repo": "vanilla", "task_id": "vanilla/37"}
{"input": "<s> public void flushDatabase ( ) { mBackend . setPendingDeletion ( ) ;", "gt": "mPendingCleanup = true ;", "repo": "vanilla", "task_id": "vanilla/38"}
{"input": "<s> private void setNativeLastMtime ( int mtime ) { MediaLibrary . Preferences prefs = MediaLibrary . getPreferences ( mContext ) ;", "gt": "prefs . _nativeLastMtime = mtime ;", "repo": "vanilla", "task_id": "vanilla/40"}
{"input": "<s> void reset ( ) { this . seen = 0 ;", "gt": "this . changed = 0 ;", "repo": "vanilla", "task_id": "vanilla/42"}
{"input": "<s> void clear ( ) {", "gt": "mSteps . clear ( ) ;", "repo": "vanilla", "task_id": "vanilla/44"}
{"input": "<s> MediaScanPlan addNextStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_NORMAL ) ) ;", "repo": "vanilla", "task_id": "vanilla/45"}
{"input": "<s> MediaScanPlan addOptionalStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_OPTIONAL ) ) ;", "repo": "vanilla", "task_id": "vanilla/46"}
{"input": "<s> MediaScanPlan addChainedStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_CHAINED ) ) ;", "repo": "vanilla", "task_id": "vanilla/47"}
{"input": "<s> public GainValues getReplayGainValues ( String path ) { if ( path = = null ) { path = \" <STR_LIT> <STR_LIT:\\\\> \" ; } GainValues cached = rgCache . get ( path ) ; if ( cached = = null ) {", "gt": "cached = getReplayGainValuesFromFile ( path ) ;", "repo": "vanilla", "task_id": "vanilla/50"}
{"input": "<s> @ Override public Parcelable onSaveInstanceState ( ) {", "gt": "showSearch ( false ) ;", "repo": "vanilla", "task_id": "vanilla/54"}
{"input": "<s> public void setOnClickListener ( View . OnClickListener listener ) {", "gt": "mParentClickConsumer = listener ;", "repo": "vanilla", "task_id": "vanilla/55"}
{"input": "<s> public void openMenu ( ) { if ( mPopupMenu = = null | | mParentMenuConsumer = = null ) return ;", "gt": "mParentMenuConsumer . onPrepareOptionsMenu ( mPopupMenu . getMenu ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/56"}
{"input": "<s> private ImageButton getImageButton ( Drawable drawable ) { ImageButton button = new ImageButton ( mContext ) ; button . setImageDrawable ( drawable ) ;", "gt": "button . setBackgroundResource ( R . drawable . unbound_ripple_light ) ;", "repo": "vanilla", "task_id": "vanilla/59"}
{"input": "<s> private void styleSearchView ( View view , int color ) { if ( view ! = null ) { if ( view instanceof TextView ) { ( ( TextView ) view ) . setTextColor ( color ) ; } else if ( view instanceof ImageView ) { ( ( ImageView ) view ) . setColorFilter ( color ) ; } else if ( view instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) view ; for ( int i = 0 ; i < group . getChildCount ( ) ; i + + ) {", "gt": "styleSearchView ( group . getChildAt ( i ) , color ) ;", "repo": "vanilla", "task_id": "vanilla/60"}
{"input": "<s> public Bitmap getCoverFromSong ( Context ctx , Song song , int size ) { CoverKey key = new CoverCache . CoverKey ( MediaUtils . TYPE_ALBUM , song . albumId , size ) ; Bitmap cover = getStoredCover ( key ) ; if ( cover = = null ) { cover = sBitmapDiskCache . createBitmap ( ctx , song , size * size ) ; if ( cover ! = null ) { storeCover ( key , cover ) ;", "gt": "cover = getStoredCover ( key ) ;", "repo": "vanilla", "task_id": "vanilla/65"}
{"input": "<s> public static void evictAll ( ) { if ( sBitmapDiskCache ! = null ) {", "gt": "sBitmapDiskCache . evictAll ( ) ;", "repo": "vanilla", "task_id": "vanilla/66"}
{"input": "<s> private long getUsedSpace ( ) { long usedSpace = - 1 ; SQLiteDatabase dbh = getWritableDatabase ( ) ; Cursor cursor = dbh . query ( TABLE_NAME , new String [ ] { \" <STR_LIT> \" } , null , null , null , null , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "usedSpace = cursor . getLong ( 0 ) ;", "repo": "vanilla", "task_id": "vanilla/70"}
{"input": "<s> public void setup ( Looper looper , Callback callback , int style ) { mUiHandler = new Handler ( this ) ; mHandler = new Handler ( looper , this ) ;", "gt": "mCallback = callback ;", "repo": "vanilla", "task_id": "vanilla/72"}
{"input": "<s> public void querySongs ( ) {", "gt": "mHandler . removeMessages ( MSG_QUERY_SONGS ) ;", "repo": "vanilla", "task_id": "vanilla/73"}
{"input": "<s> @ Override protected void onSizeChanged ( int width , int height , int oldWidth , int oldHeight ) { if ( mPendingQuery & & width ! = 0 & & height ! = 0 ) { mPendingQuery = false ;", "gt": "querySongs ( ) ;", "repo": "vanilla", "task_id": "vanilla/76"}
{"input": "<s> public void setSongBitmap ( int i , Song song , Bitmap bitmap ) {", "gt": "mCacheSongs [ i ] = song ;", "repo": "vanilla", "task_id": "vanilla/78"}
{"input": "<s> public Bitmap grepBitmap ( Song song ) { final int len = mCacheSongs . length ; for ( int i = 0 ; i < len ; i + + ) { if ( song ! = null & & song . equals ( mCacheSongs [ i ] ) ) {", "gt": "return mCacheBitmaps [ i ] ;", "repo": "vanilla", "task_id": "vanilla/79"}
{"input": "<s> public void abortScroll ( ) { System . arraycopy ( mSnapshotBitmaps , 0 , mCacheBitmaps , 0 , <NUM_LIT:3> ) ;", "gt": "System . arraycopy ( mSnapshotSongs , 0 , mCacheSongs , 0 , <NUM_LIT:3> ) ;", "repo": "vanilla", "task_id": "vanilla/80"}
{"input": "<s> public void finalizeScroll ( ) { for ( int i = 0 ; i < = <NUM_LIT:2> ; i + + ) { mSnapshotBitmaps [ i ] = null ;", "gt": "mSnapshotSongs [ i ] = null ;", "repo": "vanilla", "task_id": "vanilla/81"}
{"input": "<s> @ Override public void abortAnimation ( ) {", "gt": "mCoverIntent = 0 ;", "repo": "vanilla", "task_id": "vanilla/82"}
{"input": "<s> @ Override public void setChecked ( boolean checked ) {", "gt": "mChecked = checked ;", "repo": "vanilla", "task_id": "vanilla/85"}
{"input": "<s> public void showDragger ( boolean state ) {", "gt": "mDragger . setVisibility ( state ? View . VISIBLE : View . GONE ) ;", "repo": "vanilla", "task_id": "vanilla/86"}
{"input": "<s> public void showDuration ( boolean state ) {", "gt": "mDurationView . setVisibility ( state ? View . VISIBLE : View . GONE ) ;", "repo": "vanilla", "task_id": "vanilla/87"}
{"input": "<s> public void setDraggerOnClickListener ( View . OnClickListener listener ) { TypedValue v = new TypedValue ( ) ; getContext ( ) . getTheme ( ) . resolveAttribute ( android . R . attr . selectableItemBackground , v , true ) ;", "gt": "mDragger . setBackgroundResource ( v . resourceId ) ;", "repo": "vanilla", "task_id": "vanilla/88"}
{"input": "<s> public void registerForOnItemLongClickListener ( ListView view ) {", "gt": "view . setOnItemLongClickListener ( this ) ;", "repo": "vanilla", "task_id": "vanilla/92"}
{"input": "<s> @ Override public void onFolderPicked ( File directory , ArrayList < String > a , ArrayList < String > b ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( this ) . edit ( ) ; editor . putString ( PrefKeys . FILESYSTEM_BROWSE_START , directory . getAbsolutePath ( ) ) ;", "gt": "editor . apply ( ) ;", "repo": "vanilla", "task_id": "vanilla/95"}
{"input": "<s> @ Override public boolean accept ( File dir , String filename ) { if ( filename . charAt ( 0 ) = = <CHAR_LIT:.> ) return false ; if ( mFilter ! = null ) { filename = filename . toLowerCase ( ) ; for ( String term : mFilter ) { if ( ! filename . contains ( term ) )", "gt": "return false ;", "repo": "vanilla", "task_id": "vanilla/96"}
{"input": "<s> @ Override public void commitQuery ( Object data ) {", "gt": "mFiles = ( File [ ] ) data ;", "repo": "vanilla", "task_id": "vanilla/97"}
{"input": "<s> @ Override public void clear ( ) {", "gt": "mFiles = null ;", "repo": "vanilla", "task_id": "vanilla/98"}
{"input": "<s> @ Override public int getCount ( ) { if ( mFiles = = null )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/99"}
{"input": "<s> @ Override public Limiter buildLimiter ( long id ) { for ( int i = 0 ; i < mFiles . length ; i + + ) { if ( id = = getItemId ( i ) ) {", "gt": "return buildLimiter ( mFiles [ i ] ) ;", "repo": "vanilla", "task_id": "vanilla/104"}
{"input": "<s> @ Override public void onEvent ( int event , String path ) { if (", "gt": "path ! = null )", "repo": "vanilla", "task_id": "vanilla/105"}
{"input": "<s> @ Override public QueryTask buildSongQuery ( String [ ] projection ) {", "gt": "File path = getLimiterPath ( ) ;", "repo": "vanilla", "task_id": "vanilla/106"}
{"input": "<s> public void onItemClicked ( Intent intent ) { boolean isFolder = intent . getBooleanExtra ( LibraryAdapter . DATA_EXPANDABLE , false ) ; boolean isHeader = intent . getLongExtra ( LibraryAdapter . DATA_ID , LibraryAdapter . INVALID_ID ) = = LibraryAdapter . HEADER_ID ; if ( ! isHeader & & FileUtils . canDispatchIntent ( intent ) & & FileUtils . dispatchIntent ( mActivity , intent ) ) return ; if ( isFolder ) {", "gt": "mActivity . onItemExpanded ( intent ) ;", "repo": "vanilla", "task_id": "vanilla/107"}
{"input": "<s> public static String normalizeDirectorySeparators ( String path ) { final StringBuilder sb = new StringBuilder ( path ) ; for ( int i = 0 ; i < sb . length ( ) ; i + + ) { final char originalChar = sb . charAt ( i ) ; if ( originalChar = = <CHAR_LIT:/> | | originalChar = = <STR_LIT:\\\\> ) {", "gt": "sb . setCharAt ( i , File . separatorChar ) ;", "repo": "vanilla", "task_id": "vanilla/109"}
{"input": "<s> private static String traversePathUpwards ( String path , int traversalCount ) { if ( traversalCount < 0 ) throw new IllegalArgumentException ( \" <STR_LIT> \" ) ; if ( traversalCount = = 0 ) return path ; StringBuilder sb = new StringBuilder ( ( FileUtils . NAME_PARENT_FOLDER . length ( ) + 1 ) * traversalCount + path . length ( ) ) ; for ( int i = 0 ; i < traversalCount ; i + + ) { sb . append ( FileUtils . NAME_PARENT_FOLDER ) ;", "gt": "sb . append ( File . separatorChar ) ;", "repo": "vanilla", "task_id": "vanilla/110"}
{"input": "<s> public static boolean dispatchIntent ( LibraryActivity activity , Intent intent ) { boolean handled = true ; String path = intent . getStringExtra ( LibraryAdapter . DATA_FILE ) ; String mimeGuess = URLConnection . guessContentTypeFromName ( path ) ; File file = new File ( path ) ; Uri uri = Uri . fromFile ( file ) ; Intent extView = new Intent ( Intent . ACTION_VIEW ) ; extView . setDataAndType ( uri , mimeGuess ) ; try { activity . startActivity ( extView ) ;", "gt": "} catch ( Exception ActivityNotFoundException ) {", "repo": "vanilla", "task_id": "vanilla/111"}
{"input": "<s> public static String getFileExtension ( String filename ) {", "gt": "int index = filename . lastIndexOf ( <CHAR_LIT:.> ) ;", "repo": "vanilla", "task_id": "vanilla/113"}
{"input": "<s> @ Override public void afterTextChanged ( Editable s ) {", "gt": "final File dir = new File ( s . toString ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/115"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ;", "repo": "vanilla", "task_id": "vanilla/118"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > parent , View view , int pos , long id ) { FolderPickerAdapter . Item item = mListAdapter . getItem ( pos ) ; File curPath = mListAdapter . getCurrentDir ( ) ; File newPath = null ; if ( item . file = = null ) { newPath = curPath . getParentFile ( ) ; } else {", "gt": "newPath = new File ( curPath , item . name ) ;", "repo": "vanilla", "task_id": "vanilla/120"}
{"input": "<s> public void setCurrentDir ( File dir ) {", "gt": "mCurrentDir = dir ;", "repo": "vanilla", "task_id": "vanilla/122"}
{"input": "<s> public void setIncludedDirs ( ArrayList < String > list ) {", "gt": "mIncludedDirs = verifyDirs ( list ) ;", "repo": "vanilla", "task_id": "vanilla/123"}
{"input": "<s> public void setExcludedDirs ( ArrayList < String > list ) {", "gt": "mExcludedDirs = verifyDirs ( list ) ;", "repo": "vanilla", "task_id": "vanilla/124"}
{"input": "<s> private ArrayList < String > verifyDirs ( ArrayList < String > list ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( String path : list ) { File file = new File ( path ) ;", "gt": "if ( file . isDirectory ( ) )", "repo": "vanilla", "task_id": "vanilla/125"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/126"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/127"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/128"}
{"input": "<s> private void hideMessageOverlay ( ) {", "gt": "if ( mOverlayText ! = null )", "repo": "vanilla", "task_id": "vanilla/129"}
{"input": "<s> @ Override public void onPositionInfoChanged ( ) {", "gt": "if ( mQueuePosView ! = null )", "repo": "vanilla", "task_id": "vanilla/130"}
{"input": "<s> @ Override public boolean onSearchRequested ( ) {", "gt": "openLibrary ( null , - 1 ) ;", "repo": "vanilla", "task_id": "vanilla/132"}
{"input": "<s> private void setControlsVisible ( boolean visible ) { int mode = visible ? View . VISIBLE : View . GONE ; mSlidingView . setVisibility ( mode ) ;", "gt": "mControlsVisible = visible ;", "repo": "vanilla", "task_id": "vanilla/134"}
{"input": "<s> @ Override public void onClick ( View view ) { if ( view = = mOverlayText & & ( mState & PlaybackService . FLAG_EMPTY_QUEUE ) ! = 0 ) { setState ( PlaybackService . get ( this ) . setFinishAction ( SongTimeline . FINISH_RANDOM ) ) ; } else if ( view = = mCoverView ) { performAction ( mCoverPressAction ) ; } else if ( view . getId ( ) = = R . id . info_table ) {", "gt": "openLibrary ( mCurrentSong , MediaUtils . TYPE_ALBUM ) ;", "repo": "vanilla", "task_id": "vanilla/136"}
{"input": "<s> @ Override protected void onDialogClosed ( boolean positiveResult ) { if ( positiveResult & & shouldPersist ( ) ) { persistInt ( mValue ) ;", "gt": "notifyChanged ( ) ;", "repo": "vanilla", "task_id": "vanilla/140"}
{"input": "<s> @ Override public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) { float value = seekBar . getProgress ( ) / <NUM_LIT> ; value * = value ;", "gt": "value * = value ;", "repo": "vanilla", "task_id": "vanilla/141"}
{"input": "<s> public boolean drawFromCache ( CoverCache . CoverKey key , boolean fadeIn ) { boolean cacheHit = true ; Bitmap bitmap = sBitmapLruCache . get ( key ) ; if ( bitmap = = null ) { cacheHit = false ; } if ( fadeIn ) { TransitionDrawable td = new TransitionDrawable ( new Drawable [ ] { getDrawable ( ) , ( new BitmapDrawable ( getResources ( ) , bitmap ) ) } ) ; setImageDrawable ( td ) ; td . startTransition ( <NUM_LIT> ) ;", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/145"}
{"input": "<s> @ Override public void onStart ( ) { super . onStart ( ) ; loadPreferences ( ) ;", "gt": "loadTabOrder ( ) ;", "repo": "vanilla", "task_id": "vanilla/146"}
{"input": "<s> private void loadTabOrder ( ) { if ( mPagerAdapter . loadTabOrder ( ) ) {", "gt": "mVanillaTabLayout . setViewPager ( mViewPager ) ;", "repo": "vanilla", "task_id": "vanilla/148"}
{"input": "<s> private void checkForLaunch ( Intent intent ) { SharedPreferences settings = SharedPrefHelper . getSettings ( this ) ; if ( settings . getBoolean ( PrefKeys . PLAYBACK_ON_STARTUP , PrefDefaults . PLAYBACK_ON_STARTUP ) & & Intent . ACTION_MAIN . equals ( intent . getAction ( ) ) ) {", "gt": "startActivity ( new Intent ( this , FullPlaybackActivity . class ) ) ;", "repo": "vanilla", "task_id": "vanilla/149"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { if ( intent = = null ) return ;", "gt": "checkForLaunch ( intent ) ;", "repo": "vanilla", "task_id": "vanilla/150"}
{"input": "<s> @ Override public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( keyCode = = KeyEvent . KEYCODE_DEL | | keyCode = = KeyEvent . KEYCODE_FORWARD_DEL )", "gt": "return true ;", "repo": "vanilla", "task_id": "vanilla/151"}
{"input": "<s> public void openPlaybackActivity ( ) { if ( mSlidingView . isShrinkable ( ) )", "gt": "mSlidingView . hideSlideDelayed ( ) ;", "repo": "vanilla", "task_id": "vanilla/154"}
{"input": "<s> public void onItemExpanded ( Intent rowData ) { int type = rowData . getIntExtra ( LibraryAdapter . DATA_TYPE , MediaUtils . TYPE_INVALID ) ;", "gt": "if ( type = = MediaUtils . TYPE_PLAYLIST )", "repo": "vanilla", "task_id": "vanilla/155"}
{"input": "<s> @ Override", "gt": "public void run ( ) {", "repo": "vanilla", "task_id": "vanilla/156"}
{"input": "<s> private void editPlaylist ( Intent rowData ) { Intent launch = new Intent ( this , PlaylistActivity . class ) ; launch . putExtra ( \" <STR_LIT> \" , rowData . getLongExtra ( LibraryAdapter . DATA_ID , LibraryAdapter . INVALID_ID ) ) ;", "gt": "launch . putExtra ( \" <STR_LIT> \" , rowData . getStringExtra ( LibraryAdapter . DATA_TITLE ) ) ;", "repo": "vanilla", "task_id": "vanilla/157"}
{"input": "<s> @ Override public boolean onQueryTextChange ( String newText ) {", "gt": "mPagerAdapter . setFilter ( newText ) ;", "repo": "vanilla", "task_id": "vanilla/161"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( String query ) {", "gt": "mPagerAdapter . setFilter ( query ) ;", "repo": "vanilla", "task_id": "vanilla/162"}
{"input": "<s> @ Override public void onMediaChange ( ) {", "gt": "if ( mPagerAdapter ! = null )", "repo": "vanilla", "task_id": "vanilla/163"}
{"input": "<s> @ Override protected void onStateChange ( int state , int toggled ) { super . onStateChange ( state , toggled ) ;", "gt": "if ( ( state & PlaybackService . FLAG_EMPTY_QUEUE ) ! = 0 )", "repo": "vanilla", "task_id": "vanilla/164"}
{"input": "<s> @ Override public void onDismiss ( DialogInterface dialog ) { ListView list = ( ( AlertDialog ) dialog ) . getListView ( ) ; int which = list . getCheckedItemPosition ( ) ; CheckBox reverseSort = ( CheckBox ) list . findViewById ( R . id . reverse_sort ) ;", "gt": "if ( reverseSort . isChecked ( ) ) {", "repo": "vanilla", "task_id": "vanilla/166"}
{"input": "<s> @ Override public int getItemPosition ( Object item ) { int type = ( Integer ) ( ( ListView ) item ) . getTag ( ) ;", "gt": "int pos = getMediaTypePosition ( type ) ;", "repo": "vanilla", "task_id": "vanilla/167"}
{"input": "<s> private void restorePosition ( int index ) { Integer curPos = sLruAdapterPos . popPosition ( mAdapters [ index ] ) ;", "gt": "if ( curPos ! = null & & curPos < mLists [ index ] . getCount ( ) )", "repo": "vanilla", "task_id": "vanilla/171"}
{"input": "<s> public Limiter getCurrentLimiter ( ) { LibraryAdapter current = mCurrentAdapter ; if ( current = = null )", "gt": "return null ;", "repo": "vanilla", "task_id": "vanilla/172"}
{"input": "<s> public int getMediaTypePosition ( int type ) { int [ ] order = mTabOrder ; for ( int i = mTabCount ; - - i ! = - 1 ; ) {", "gt": "if ( order [ i ] = = type )", "repo": "vanilla", "task_id": "vanilla/173"}
{"input": "<s> public void postRequestRequery ( LibraryAdapter adapter ) {", "gt": "Handler handler = mUiHandler ;", "repo": "vanilla", "task_id": "vanilla/175"}
{"input": "<s> private void postRunQuery ( LibraryAdapter adapter ) { mRequeryNeeded [ adapter . getMediaType ( ) ] = false ; Handler handler = mWorkerHandler ;", "gt": "handler . removeMessages ( MSG_RUN_QUERY , adapter ) ;", "repo": "vanilla", "task_id": "vanilla/176"}
{"input": "<s> private void requeryIfNeeded ( int type ) { LibraryAdapter adapter = mAdapters [ type ] ; if ( adapter ! = null & & mRequeryNeeded [ type ] ) {", "gt": "postRunQuery ( adapter ) ;", "repo": "vanilla", "task_id": "vanilla/177"}
{"input": "<s> public void invalidateData ( ) { for ( LibraryAdapter adapter : mAdapters ) {", "gt": "if ( adapter ! = null ) {", "repo": "vanilla", "task_id": "vanilla/178"}
{"input": "<s> public void loadSortOrder ( SortableAdapter adapter ) { String key = adapter . getSortSettingsKey ( ) ; int def = adapter . getDefaultSortMode ( ) ;", "gt": "int sort = SharedPrefHelper . getSettings ( mActivity ) . getInt ( key , def ) ;", "repo": "vanilla", "task_id": "vanilla/179"}
{"input": "<s> public void setFilter ( String text ) { if ( text . length ( ) = = 0 ) text = null ; mFilter = text ; for ( LibraryAdapter adapter : mAdapters ) { if ( adapter ! = null ) {", "gt": "adapter . setFilter ( text ) ;", "repo": "vanilla", "task_id": "vanilla/181"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Intent intent = id = = LibraryAdapter . HEADER_ID ? createHeaderIntent ( view ) : mCurrentAdapter . createData ( view ) ; int type = ( Integer ) ( ( View ) view . getParent ( ) ) . getTag ( ) ; if ( type = = MediaUtils . TYPE_FILE ) {", "gt": "mFilesAdapter . onItemClicked ( intent ) ;", "repo": "vanilla", "task_id": "vanilla/185"}
{"input": "<s> private String _k ( LibraryAdapter adapter ) { String result = adapter . getMediaType ( ) + \" <STR_LIT> \" ; Limiter limiter = adapter . getLimiter ( ) ; if ( limiter ! = null ) { for ( String entry : limiter . names ) {", "gt": "result = result + entry + \" <STR_LIT:/> \" ;", "repo": "vanilla", "task_id": "vanilla/186"}
{"input": "<s> @ Override protected void onDialogClosed ( boolean positiveResult ) { super . onDialogClosed ( positiveResult ) ;", "gt": "notifyDependencyChange ( shouldDisableDependents ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/187"}
{"input": "<s> public void setExpandable ( boolean expandable ) { if ( expandable ! = mExpandable ) { mExpandable = expandable ;", "gt": "notifyDataSetChanged ( ) ;", "repo": "vanilla", "task_id": "vanilla/189"}
{"input": "<s> @ Override public QueryTask buildSongQuery ( String [ ] projection ) { QueryTask query = buildQuery ( projection , true ) ;", "gt": "query . type = mType ;", "repo": "vanilla", "task_id": "vanilla/190"}
{"input": "<s> public int getLimiterType ( ) { Limiter limiter = mLimiter ; if ( limiter ! = null )", "gt": "return limiter . type ;", "repo": "vanilla", "task_id": "vanilla/192"}
{"input": "<s> @ Override public int getCount ( ) { Cursor cursor = mCursor ; if ( cursor = = null )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/196"}
{"input": "<s> @ Override public int getSectionForPosition ( int position ) { for ( int i = 0 ; i < mAlphabet . size ( ) ; + + i ) {", "gt": "if ( mAlphabet . get ( i ) . position > position )", "repo": "vanilla", "task_id": "vanilla/199"}
{"input": "<s> public void release ( ) {", "gt": "mMediaSession . setActive ( false ) ;", "repo": "vanilla", "task_id": "vanilla/206"}
{"input": "<s> public static Random getRandom ( ) { if ( sRandom = = null )", "gt": "sRandom = new Random ( ) ;", "repo": "vanilla", "task_id": "vanilla/207"}
{"input": "<s> public static long queryGenreForSong ( Context context , long id ) { String [ ] projection = { MediaLibrary . GenreSongColumns . _GENRE_ID } ; String query = MediaLibrary . GenreSongColumns . SONG_ID + \" <STR_LIT> \" ; String [ ] queryArgs = new String [ ] { Long . toString ( id ) } ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_GENRES_SONGS , projection , query , queryArgs , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "return cursor . getLong ( 0 ) ;", "repo": "vanilla", "task_id": "vanilla/210"}
{"input": "<s> private static ArrayList < Song > getAllSongs ( Context context ) { QueryTask query = new QueryTask ( MediaLibrary . VIEW_SONGS_ALBUMS_ARTISTS , Song . FILLED_PROJECTION , null , null , null ) ; Cursor cursor = query . runQuery ( context ) ; ArrayList < Song > list = new ArrayList < Song > ( ) ; if ( cursor = = null ) return list ; while ( cursor . moveToNext ( ) ) { Song song = new Song ( - 1 ) ; song . populate ( cursor ) ;", "gt": "list . add ( song ) ;", "repo": "vanilla", "task_id": "vanilla/212"}
{"input": "<s> public static void onMediaChange ( ) {", "gt": "sSongCount = - 1 ;", "repo": "vanilla", "task_id": "vanilla/213"}
{"input": "<s> public static boolean deleteFile ( File file ) { File [ ] children = file . listFiles ( ) ; if ( children ! = null ) { for ( File child : children ) {", "gt": "deleteFile ( child ) ;", "repo": "vanilla", "task_id": "vanilla/215"}
{"input": "<s> private static String addDirEndSlash ( String path ) { if ( path . length ( ) > 0 & & path . charAt ( path . length ( ) - 1 ) ! = <CHAR_LIT:/> ) { if ( ( new File ( path ) ) . isDirectory ( ) ) {", "gt": "path + = \" <STR_LIT:/> \" ;", "repo": "vanilla", "task_id": "vanilla/216"}
{"input": "<s> public static Cursor getCursorForFileQuery ( String path ) { MatrixCursor matrixCursor = new MatrixCursor ( Song . FILLED_PROJECTION ) ; File directory = new File ( path ) ; if ( directory . isDirectory ( ) ) { addDirectoryToCursor ( directory , matrixCursor ) ;", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/217"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/221"}
{"input": "<s> public static boolean havePermissions ( Context context ) { for ( String permission : getNeededPermissions ( ) ) { if ( context . checkSelfPermission ( permission ) ! = PackageManager . PERMISSION_GRANTED ) {", "gt": "return false ;", "repo": "vanilla", "task_id": "vanilla/225"}
{"input": "<s> @ Override public void onDestroy ( ) { PlaybackService . removeTimelineCallback ( this ) ;", "gt": "mLooper . quit ( ) ;", "repo": "vanilla", "task_id": "vanilla/229"}
{"input": "<s> public void setState ( long uptime , int state ) { if ( uptime > mLastStateEvent ) { setState ( state ) ;", "gt": "mLastStateEvent = uptime ;", "repo": "vanilla", "task_id": "vanilla/236"}
{"input": "<s> protected void onServiceReady ( ) { PlaybackService service = PlaybackService . get ( this ) ;", "gt": "setSong ( service . getSong ( 0 ) ) ;", "repo": "vanilla", "task_id": "vanilla/237"}
{"input": "<s> protected void onSongChange ( Song song ) {", "gt": "if ( mCoverView ! = null )", "repo": "vanilla", "task_id": "vanilla/238"}
{"input": "<s> public void setSong ( long uptime , Song song ) { if ( uptime > mLastSongEvent ) { setSong ( song ) ;", "gt": "mLastSongEvent = uptime ;", "repo": "vanilla", "task_id": "vanilla/240"}
{"input": "<s> public void replaceSong ( int delta , Song song ) {", "gt": "if ( mCoverView ! = null )", "repo": "vanilla", "task_id": "vanilla/241"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "menu . add ( 0 , MENU_PREFS , <NUM_LIT:10> , R . string . settings ) . setIcon ( R . drawable . ic_menu_preferences ) ;", "repo": "vanilla", "task_id": "vanilla/242"}
{"input": "<s> public void prepareMediaPlayer ( VanillaMediaPlayer mp , String path ) throws IOException { mp . setDataSource ( path ) ;", "gt": "mp . prepare ( ) ;", "repo": "vanilla", "task_id": "vanilla/247"}
{"input": "<s> private void triggerReadAhead ( ) { Song song = mCurrentSong ; if ( ( mState & FLAG_PLAYING ) ! = 0 & & song ! = null ) {", "gt": "mReadahead . setSong ( song ) ;", "repo": "vanilla", "task_id": "vanilla/251"}
{"input": "<s> public void setFlag ( int flag ) { synchronized ( mStateLock ) {", "gt": "updateState ( mState | flag ) ;", "repo": "vanilla", "task_id": "vanilla/253"}
{"input": "<s> public void unsetFlag ( int flag ) { synchronized ( mStateLock ) {", "gt": "updateState ( mState & ~ flag ) ;", "repo": "vanilla", "task_id": "vanilla/254"}
{"input": "<s> public int play ( ) { synchronized ( mStateLock ) { if ( ( mState & FLAG_EMPTY_QUEUE ) ! = 0 ) { setFinishAction ( SongTimeline . FINISH_RANDOM ) ; showToast ( R . string . random_enabling , Toast . LENGTH_SHORT ) ; }", "gt": "int state = updateState ( mState | FLAG_PLAYING ) ;", "repo": "vanilla", "task_id": "vanilla/258"}
{"input": "<s> public int playPause ( boolean forceNotification ) { synchronized ( mStateLock ) { mForceNotificationVisible = forceNotification ; if ( ( mState & FLAG_PLAYING ) ! = 0 )", "gt": "return pause ( ) ;", "repo": "vanilla", "task_id": "vanilla/260"}
{"input": "<s> public int setFinishAction ( int action ) { synchronized ( mStateLock ) {", "gt": "return updateState ( mState & ~ MASK_FINISH | action < < SHIFT_FINISH ) ;", "repo": "vanilla", "task_id": "vanilla/261"}
{"input": "<s> public int setShuffleMode ( int mode ) { synchronized ( mStateLock ) {", "gt": "return updateState ( mState & ~ MASK_SHUFFLE | mode < < SHIFT_SHUFFLE ) ;", "repo": "vanilla", "task_id": "vanilla/263"}
{"input": "<s> @ Override public boolean onError ( MediaPlayer player , int what , int extra ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + what + <CHAR_LIT> + extra ) ;", "repo": "vanilla", "task_id": "vanilla/265"}
{"input": "<s> public Song getSong ( int delta ) { if ( mTimeline = = null )", "gt": "return null ;", "repo": "vanilla", "task_id": "vanilla/266"}
{"input": "<s> public int getState ( ) { synchronized ( mStateLock ) {", "gt": "return mState ;", "repo": "vanilla", "task_id": "vanilla/269"}
{"input": "<s> public int getPosition ( ) { if ( ! mMediaPlayerInitialized )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/270"}
{"input": "<s> public int getDuration ( ) { if ( ! mMediaPlayerInitialized )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/271"}
{"input": "<s> public void seekToProgress ( int progress ) { if ( ! mMediaPlayerInitialized ) return ;", "gt": "long position = ( long ) mMediaPlayer . getDuration ( ) * progress / <NUM_LIT:1000> ;", "repo": "vanilla", "task_id": "vanilla/273"}
{"input": "<s> @ Override public void activeSongReplaced ( int delta , Song song ) { ArrayList < TimelineCallback > list = sCallbacks ; for ( int i = list . size ( ) ; - - i ! = - 1 ; ) list . get ( i ) . replaceSong ( delta , song ) ;", "gt": "if ( delta = = 0 )", "repo": "vanilla", "task_id": "vanilla/275"}
{"input": "<s> public Song shiftCurrentSong ( int delta ) { preparePlayCountsUpdate ( delta ) ; Song song = setCurrentSong ( delta ) ;", "gt": "userActionTriggered ( ) ;", "repo": "vanilla", "task_id": "vanilla/276"}
{"input": "<s> public void emptyQueue ( ) { pause ( ) ;", "gt": "setFlag ( FLAG_EMPTY_QUEUE ) ;", "repo": "vanilla", "task_id": "vanilla/279"}
{"input": "<s> @ Override public void onChange ( LibraryObserver . Type type , long id , boolean ongoing ) { if ( type ! = LibraryObserver . Type . SONG & & type ! = LibraryObserver . Type . PLAYLIST ) return ;", "gt": "MediaUtils . onMediaChange ( ) ;", "repo": "vanilla", "task_id": "vanilla/281"}
{"input": "<s> public void jumpToQueuePosition ( int pos ) {", "gt": "mTimeline . setCurrentQueuePosition ( pos ) ;", "repo": "vanilla", "task_id": "vanilla/284"}
{"input": "<s> public static void countSong ( Context context , Song song , boolean played ) {", "gt": "final long id = Song . getId ( song ) ;", "repo": "vanilla", "task_id": "vanilla/285"}
{"input": "<s> public static long getPlaylist ( Context context , String name ) { long id = - 1 ; final String [ ] projection = { MediaLibrary . PlaylistColumns . _ID } ; final String selection = MediaLibrary . PlaylistColumns . NAME + \" <STR_LIT> \" ; final String [ ] selectionArgs = { name } ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_PLAYLISTS , projection , selection , selectionArgs , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "id = cursor . getLong ( 0 ) ;", "repo": "vanilla", "task_id": "vanilla/288"}
{"input": "<s> public static int addToPlaylist ( Context context , long playlistId , QueryTask query ) { ArrayList < Long > result = new ArrayList < Long > ( ) ; Cursor cursor = query . runQuery ( context ) ; if ( cursor ! = null ) { while ( cursor . moveToNext ( ) ) {", "gt": "result . add ( cursor . getLong ( 0 ) ) ;", "repo": "vanilla", "task_id": "vanilla/290"}
{"input": "<s> public static int addToPlaylist ( Context context , long playlistId , ArrayList < Long > audioIds ) { if ( playlistId = = - 1 )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/291"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "mLooper . quit ( ) ;", "repo": "vanilla", "task_id": "vanilla/295"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { long id = intent . getLongExtra ( \" <STR_LIT> \" , 0 ) ; String title = intent . getStringExtra ( \" <STR_LIT> \" ) ;", "gt": "mAdapter . setPlaylistId ( id ) ;", "repo": "vanilla", "task_id": "vanilla/296"}
{"input": "<s> @ Override public void onClick ( DialogInterface dialog , int which ) { if ( which = = DialogInterface . BUTTON_POSITIVE ) {", "gt": "Playlist . deletePlaylist ( this , mPlaylistId ) ;", "repo": "vanilla", "task_id": "vanilla/299"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ;", "repo": "vanilla", "task_id": "vanilla/300"}
{"input": "<s> public void setPlaylistId ( long id ) {", "gt": "mPlaylistId = id ;", "repo": "vanilla", "task_id": "vanilla/301"}
{"input": "<s> public void setEditable ( boolean editable ) {", "gt": "mEditable = editable ;", "repo": "vanilla", "task_id": "vanilla/302"}
{"input": "<s> private Cursor runQuery ( ) {", "gt": "QueryTask query = MediaUtils . buildPlaylistQuery ( mPlaylistId , PROJECTION ) ;", "repo": "vanilla", "task_id": "vanilla/304"}
{"input": "<s> public static PlaylistDialog newInstance ( Callback callback , Intent intent , LibraryAdapter allSource , Song currentSong ) { PlaylistDialog pd = new PlaylistDialog ( ) ; pd . mCallback = callback ; pd . mData = pd . new Data ( ) ;", "gt": "pd . mData . sourceIntent = intent ;", "repo": "vanilla", "task_id": "vanilla/307"}
{"input": "<s> @ Override public void onSuccess ( String input ) { mData . id = - 1 ;", "gt": "mData . name = input ;", "repo": "vanilla", "task_id": "vanilla/308"}
{"input": "<s> public static PlaylistInputDialog newInstance ( Callback callback , String initialText , int actionRes ) { PlaylistInputDialog pid = new PlaylistInputDialog ( ) ;", "gt": "pid . mCallback = callback ;", "repo": "vanilla", "task_id": "vanilla/309"}
{"input": "<s> public void onStart ( ) { super . onStart ( ) ; mDialog . getButton ( DialogInterface . BUTTON_POSITIVE ) . setEnabled ( false ) ;", "gt": "mEditText . setText ( mInitialText ) ;", "repo": "vanilla", "task_id": "vanilla/310"}
{"input": "<s> public void unregister ( ) { MediaLibrary . unregisterLibraryObserver ( mLibraryObserver ) ;", "gt": "mFileObserver . stopWatching ( ) ;", "repo": "vanilla", "task_id": "vanilla/313"}
{"input": "<s> private void dumpAllAsM3uPlaylist ( ) { XT ( \" <STR_LIT> \" ) ; Cursor cursor = Playlist . queryPlaylists ( mContext ) ; if ( cursor ! = null ) { while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( 0 ) ; XT ( \" <STR_LIT> \" + id ) ;", "gt": "sendUniqueMessage ( MSG_DUMP_M3U , id ) ;", "repo": "vanilla", "task_id": "vanilla/316"}
{"input": "<s> private File getFileForName ( File parent , String name ) { name = name . replaceAll ( \" <STR_LIT:/> \" , \" <STR_LIT:_> \" ) ;", "gt": "File f = new File ( parent , name ) ;", "repo": "vanilla", "task_id": "vanilla/318"}
{"input": "<s> private long getHash ( File f ) { long hash = - 1 ; byte [ ] buff = new byte [ <NUM_LIT> ] ; try ( FileInputStream fis = new FileInputStream ( f ) ) { CRC32 crc = new CRC32 ( ) ; while ( fis . read ( buff ) ! = - 1 ) { crc . update ( buff ) ; } hash = crc . getValue ( ) ; if ( hash < 0 ) hash = hash * - 1 ;", "gt": "} catch ( IOException e ) {", "repo": "vanilla", "task_id": "vanilla/323"}
{"input": "<s> private void XT ( String s ) { if ( DEBUG ) { try ( PrintWriter pw = new PrintWriter ( new FileOutputStream ( new File ( \" <STR_LIT> \" ) , true ) ) ) { pw . println ( System . currentTimeMillis ( ) / <NUM_LIT:1000> + \" <STR_LIT> \" + s ) ;", "gt": "Log . v ( \" <STR_LIT> \" , \" <STR_LIT> \" + s ) ;", "repo": "vanilla", "task_id": "vanilla/324"}
{"input": "<s> @ Override public void onFolderPicked ( File directory , ArrayList < String > a , ArrayList < String > b ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( this ) . edit ( ) ; editor . putString ( PrefKeys . PLAYLIST_SYNC_FOLDER , directory . getAbsolutePath ( ) ) ;", "gt": "editor . apply ( ) ;", "repo": "vanilla", "task_id": "vanilla/326"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "vanilla", "task_id": "vanilla/330"}
{"input": "<s> @ Override public void onBuildHeaders ( List < Header > target ) { ArrayList < Header > tmp = new ArrayList < Header > ( ) ;", "gt": "loadHeadersFromResource ( R . xml . preference_headers , tmp ) ;", "repo": "vanilla", "task_id": "vanilla/331"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/333"}
{"input": "<s> public boolean onPreferenceClick ( Preference preference ) {", "gt": "updateConfigWidgets ( ) ;", "repo": "vanilla", "task_id": "vanilla/334"}
{"input": "<s> private void updateConfigWidgets ( ) { boolean rgOn = ( cbTrackReplayGain . isChecked ( ) | | cbAlbumReplayGain . isChecked ( ) ) ;", "gt": "sbGainBump . setEnabled ( rgOn ) ;", "repo": "vanilla", "task_id": "vanilla/335"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/336"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/337"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/338"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/339"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/340"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/341"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;", "repo": "vanilla", "task_id": "vanilla/342"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Activity activity = getActivity ( ) ; Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \" <STR_LIT> \" ) ) ;", "gt": "if ( intent ! = null ) {", "repo": "vanilla", "task_id": "vanilla/343"}
{"input": "<s> public void onClick ( DialogInterface dialog , int id ) {", "gt": "mFullScanPending = true ;", "repo": "vanilla", "task_id": "vanilla/349"}
{"input": "<s> private void startMediaFoldersSelection ( ) {", "gt": "mIsEditingDirectories = true ;", "repo": "vanilla", "task_id": "vanilla/353"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference pref ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( mContext ) . edit ( ) ; editor . putString ( PrefKeys . SELECTED_THEME , pref . getKey ( ) ) ;", "gt": "editor . apply ( ) ;", "repo": "vanilla", "task_id": "vanilla/354"}
{"input": "<s> private int [ ] decodeValue ( String v ) { String [ ] parts = v . split ( \" <STR_LIT:U+002C> \" ) ; int [ ] values = new int [ parts . length ] ; for ( int i = 0 ; i < parts . length ; i + + ) {", "gt": "long parsedLong = ( long ) Long . decode ( parts [ i ] ) ;", "repo": "vanilla", "task_id": "vanilla/355"}
{"input": "<s> public void pause ( ) {", "gt": "mHandler . removeMessages ( MSG_SET_SONG ) ;", "repo": "vanilla", "task_id": "vanilla/356"}
{"input": "<s> public void setSong ( final Song song ) {", "gt": "pause ( ) ;", "repo": "vanilla", "task_id": "vanilla/357"}
{"input": "<s> @ Override public boolean onStopJob ( JobParameters params ) {", "gt": "finalizeScan ( ) ;", "repo": "vanilla", "task_id": "vanilla/359"}
{"input": "<s> private void finalizeScan ( ) { MediaLibrary . unregisterLibraryObserver ( mObserver ) ;", "gt": "MediaLibrary . abortLibraryScan ( this ) ;", "repo": "vanilla", "task_id": "vanilla/360"}
{"input": "<s> @ Override public void onChange ( LibraryObserver . Type type , long id , boolean ongoing ) { if ( type = = LibraryObserver . Type . SONG & & ! ongoing ) { jobFinished ( mJobParams , false ) ;", "gt": "finalizeScan ( ) ;", "repo": "vanilla", "task_id": "vanilla/361"}
{"input": "<s> @ Override public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) {", "gt": "progress = ( progress / mSteps ) * mSteps ;", "repo": "vanilla", "task_id": "vanilla/364"}
{"input": "<s> private void setValue ( int value ) { mValue = value ;", "gt": "mValueText . setText ( getSummary ( value ) ) ;", "repo": "vanilla", "task_id": "vanilla/365"}
{"input": "<s> private void saveCheckBoxPreference ( boolean enabled ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( mContext ) . edit ( ) ;", "gt": "editor . putBoolean ( mCheckBoxKey , enabled ) ;", "repo": "vanilla", "task_id": "vanilla/366"}
{"input": "<s> public static SharedPreferences getSettings ( Context context ) { if ( sSettings = = null )", "gt": "sSettings = PreferenceManager . getDefaultSharedPreferences ( context ) ;", "repo": "vanilla", "task_id": "vanilla/368"}
{"input": "<s> public void setData ( PlaybackService service , int pos ) { mService = service ; mHighlightRow = pos ;", "gt": "mSongCount = service . getTimelineLength ( ) ;", "repo": "vanilla", "task_id": "vanilla/370"}
{"input": "<s> @ Override public Song getItem ( int pos ) {", "gt": "Song item = mService . getSongByQueuePosition ( pos ) ;", "repo": "vanilla", "task_id": "vanilla/371"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "PlaybackService . removeTimelineCallback ( this ) ;", "repo": "vanilla", "task_id": "vanilla/372"}
{"input": "<s> @ Override public void drop ( int from , int to ) { if ( from ! = to ) {", "gt": "playbackService ( ) . moveSongPosition ( from , to ) ;", "repo": "vanilla", "task_id": "vanilla/374"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) private void scrollToCurrentSong ( int currentSongPosition ) {", "gt": "mListView . setSelectionFromTop ( currentSongPosition , 0 ) ;", "repo": "vanilla", "task_id": "vanilla/376"}
{"input": "<s> public void onTimelineChanged ( ) { if ( PlaybackService . hasInstance ( ) ) {", "gt": "refreshSongQueueList ( false ) ;", "repo": "vanilla", "task_id": "vanilla/378"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "mPaused = false ;", "repo": "vanilla", "task_id": "vanilla/380"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "vanilla", "task_id": "vanilla/381"}
{"input": "<s> @ Override protected void onSongChange ( Song song ) { setDuration ( song = = null ? 0 : song . duration ) ;", "gt": "updateElapsedTime ( ) ;", "repo": "vanilla", "task_id": "vanilla/382"}
{"input": "<s> @ Override protected void onStateChange ( int state , int toggled ) {", "gt": "updateElapsedTime ( ) ;", "repo": "vanilla", "task_id": "vanilla/383"}
{"input": "<s> private void setDuration ( long duration ) {", "gt": "mDuration = duration ;", "repo": "vanilla", "task_id": "vanilla/385"}
{"input": "<s> @ Override public void onPositionSubmit ( int position ) {", "gt": "PlaybackService . get ( this ) . seekToPosition ( position ) ;", "repo": "vanilla", "task_id": "vanilla/387"}
{"input": "<s> public void hideSlide ( ) {", "gt": "setSlaveViewStage ( 0 ) ;", "repo": "vanilla", "task_id": "vanilla/388"}
{"input": "<s> @ Override protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; View handle = findViewById ( mSliderHandleId ) ; if ( handle ! = null ) { if ( handle instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) handle ; for ( int i = 0 ; i < group . getChildCount ( ) ; i + + ) { group . getChildAt ( i ) . setOnTouchListener ( this ) ; }", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/391"}
{"input": "<s> @ Override protected void onWindowVisibilityChanged ( int state ) { super . onWindowVisibilityChanged ( state ) ; if ( state = = View . GONE & & mDelayedHide ) {", "gt": "hideSlide ( ) ;", "repo": "vanilla", "task_id": "vanilla/392"}
{"input": "<s> @ Override public boolean onFling ( MotionEvent event1 , MotionEvent event2 , float velocityX , float velocityY ) {", "gt": "mFlingVelocity = velocityY ;", "repo": "vanilla", "task_id": "vanilla/393"}
{"input": "<s> public static long getId ( Song song ) { if ( song = = null )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/395"}
{"input": "<s> @ Override public int compare ( Song a , Song b ) { if ( a . id = = b . id )", "gt": "return 0 ;", "repo": "vanilla", "task_id": "vanilla/400"}
{"input": "<s> private void reshuffleTimeline ( ) { synchronized ( this ) { saveActiveSongs ( ) ; ArrayList < Song > songs = getShuffledTimeline ( false ) ; int newPosition = songs . indexOf ( mSavedCurrent ) ; Collections . swap ( songs , newPosition , mCurrentPos ) ;", "gt": "mSongs = songs ;", "repo": "vanilla", "task_id": "vanilla/403"}
{"input": "<s> public Song setCurrentQueuePosition ( int pos ) { synchronized ( this ) { saveActiveSongs ( ) ; mCurrentPos = pos ;", "gt": "broadcastChangedSongs ( ) ;", "repo": "vanilla", "task_id": "vanilla/405"}
{"input": "<s> public Song getSongByQueuePosition ( int pos ) { Song song = null ; synchronized ( this ) {", "gt": "if ( mSongs . size ( ) > pos )", "repo": "vanilla", "task_id": "vanilla/406"}
{"input": "<s> public int getQueuePositionForSongId ( long id ) { synchronized ( this ) { for ( int pos = 0 ; pos < mSongs . size ( ) ; pos + + ) { Song current = mSongs . get ( pos ) ; if ( current . id = = id )", "gt": "return pos ;", "repo": "vanilla", "task_id": "vanilla/407"}
{"input": "<s> public void clearQueue ( ) { synchronized ( this ) { saveActiveSongs ( ) ; if ( mCurrentPos + 1 < mSongs . size ( ) )", "gt": "mSongs . subList ( mCurrentPos + 1 , mSongs . size ( ) ) . clear ( ) ;", "repo": "vanilla", "task_id": "vanilla/409"}
{"input": "<s> public void emptyQueue ( ) { synchronized ( this ) { saveActiveSongs ( ) ; mSongs . clear ( ) ;", "gt": "mCurrentPos = 0 ;", "repo": "vanilla", "task_id": "vanilla/410"}
{"input": "<s> public void removeSongPosition ( int pos ) { synchronized ( this ) { ArrayList < Song > songs = mSongs ; if ( songs . size ( ) < = pos ) return ; saveActiveSongs ( ) ; songs . remove ( pos ) ; if ( pos < mCurrentPos ) mCurrentPos - - ; if ( getSong ( 1 ) = = null )", "gt": "mCurrentPos = 0 ;", "repo": "vanilla", "task_id": "vanilla/412"}
{"input": "<s> public boolean isEndOfQueue ( ) { synchronized ( this ) {", "gt": "return mFinishAction = = FINISH_STOP & & mCurrentPos = = mSongs . size ( ) - 1 ;", "repo": "vanilla", "task_id": "vanilla/414"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ;", "repo": "vanilla", "task_id": "vanilla/418"}
{"input": "<s> public void setTabIds ( int [ ] ids ) {", "gt": "mTabIds = ids ;", "repo": "vanilla", "task_id": "vanilla/423"}
{"input": "<s> final private static boolean usesDarkTheme ( Context context ) { final int idx = getSelectedThemeIndex ( context ) ; final String [ ] variants = context . getResources ( ) . getStringArray ( R . array . theme_variant ) ;", "gt": "boolean useDark = variants [ idx ] . equals ( \" <STR_LIT> \" ) ;", "repo": "vanilla", "task_id": "vanilla/425"}
{"input": "<s> final private static int getSelectedThemeIndex ( Context context ) { SharedPreferences settings = SharedPrefHelper . getSettings ( context ) ; String prefValue = settings . getString ( PrefKeys . SELECTED_THEME , PrefDefaults . SELECTED_THEME ) ; final String [ ] ids = context . getResources ( ) . getStringArray ( R . array . theme_ids ) ; for ( int i = 0 ; i < ids . length ; i + + ) { if ( ids [ i ] . equals ( prefValue ) )", "gt": "return i ;", "repo": "vanilla", "task_id": "vanilla/426"}
{"input": "<s> final public static int fetchThemeColor ( Context context , int resId ) { TypedArray a = context . obtainStyledAttributes ( new int [ ] { resId } ) ; int color = a . getColor ( 0 , 0 ) ;", "gt": "a . recycle ( ) ;", "repo": "vanilla", "task_id": "vanilla/427"}
{"input": "<s> final public static int [ ] getDefaultCoverColors ( Context context ) { int bg = fetchThemeColor ( context , android . R . attr . colorBackground ) ;", "gt": "int diff = <NUM_LIT> * ( bg > <NUM_LIT> ? - 1 : 1 ) ;", "repo": "vanilla", "task_id": "vanilla/428"}
{"input": "<s> public static TrackDetailsDialog newInstance ( long songId ) { TrackDetailsDialog dialog = new TrackDetailsDialog ( ) ;", "gt": "Bundle args = new Bundle ( ) ;", "repo": "vanilla", "task_id": "vanilla/429"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mHandlerThread = new HandlerThread ( getClass ( ) . getName ( ) ) ;", "gt": "mHandlerThread . start ( ) ;", "repo": "vanilla", "task_id": "vanilla/430"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "vanilla", "task_id": "vanilla/432"}
{"input": "<s> public void setColors ( int colA , int colB ) { PaintDrawable bg = new PaintDrawable ( colB ) ;", "gt": "setBackgroundDrawable ( bg ) ;", "repo": "vanilla", "task_id": "vanilla/433"}
{"input": "<s> private FancyMenuItem addInternal ( int id , int order , int icon , CharSequence text , boolean spacer ) { FancyMenuItem item = new FancyMenuItem ( mContext , id ) . setIcon ( icon ) . setTitle ( text ) . setIsSpacer ( spacer ) ; while ( order > = mItems . size ( ) ) {", "gt": "mItems . add ( new ArrayList < FancyMenuItem > ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/435"}
{"input": "<s> private Adapter assembleAdapter ( ArrayList < ArrayList < FancyMenuItem > > items ) { final Adapter adapter = new Adapter ( mContext , 0 ) ; for ( ArrayList < FancyMenuItem > sub : items ) { for ( FancyMenuItem item : sub ) {", "gt": "adapter . add ( item ) ;", "repo": "vanilla", "task_id": "vanilla/436"}
{"input": "<s> public FancyMenuItem setIsSpacer ( boolean spacer ) {", "gt": "mSpacer = spacer ;", "repo": "vanilla", "task_id": "vanilla/438"}
{"input": "<s> @ Override public Drawable getIcon ( ) { if ( mIconRes ! = 0 )", "gt": "return mContext . getResources ( ) . getDrawable ( mIconRes ) ;", "repo": "vanilla", "task_id": "vanilla/439"}
{"input": "<s> @ Override public FancyMenuItem setIcon ( Drawable drawable ) {", "gt": "mIcon = drawable ;", "repo": "vanilla", "task_id": "vanilla/440"}
{"input": "<s> @ Override public FancyMenuItem setIcon ( int res ) {", "gt": "mIconRes = res ;", "repo": "vanilla", "task_id": "vanilla/441"}
{"input": "<s> @ Override public FancyMenuItem setIntent ( Intent intent ) {", "gt": "mIntent = intent ;", "repo": "vanilla", "task_id": "vanilla/442"}
{"input": "<s> @ Override public FancyMenuItem setTitle ( CharSequence title ) {", "gt": "mTitle = title ;", "repo": "vanilla", "task_id": "vanilla/443"}
{"input": "<s> @ Override public void setImageResource ( int resId ) {", "gt": "super . setImageResource ( resId ) ;", "repo": "vanilla", "task_id": "vanilla/444"}
{"input": "<s> public void reset ( ) { mDataSource = null ;", "gt": "mHasNextMediaPlayer = false ;", "repo": "vanilla", "task_id": "vanilla/447"}
{"input": "<s> public void release ( ) { mDataSource = null ;", "gt": "mHasNextMediaPlayer = false ;", "repo": "vanilla", "task_id": "vanilla/448"}
{"input": "<s> @ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) public void setNextMediaPlayer ( VanillaMediaPlayer next ) {", "gt": "super . setNextMediaPlayer ( next ) ;", "repo": "vanilla", "task_id": "vanilla/449"}
{"input": "<s> public void openAudioFx ( ) { Intent i = new Intent ( AudioEffect . ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION ) ; i . putExtra ( AudioEffect . EXTRA_AUDIO_SESSION , this . getAudioSessionId ( ) ) ;", "gt": "i . putExtra ( AudioEffect . EXTRA_PACKAGE_NAME , mContext . getPackageName ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/450"}
{"input": "<s> public void closeAudioFx ( ) { Intent i = new Intent ( AudioEffect . ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION ) ; i . putExtra ( AudioEffect . EXTRA_AUDIO_SESSION , this . getAudioSessionId ( ) ) ;", "gt": "i . putExtra ( AudioEffect . EXTRA_PACKAGE_NAME , mContext . getPackageName ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/451"}
{"input": "<s> public void setReplayGain ( float replayGain ) {", "gt": "mReplayGain = replayGain ;", "repo": "vanilla", "task_id": "vanilla/452"}
{"input": "<s> public void setIsDucking ( boolean isDucking ) {", "gt": "mIsDucking = isDucking ;", "repo": "vanilla", "task_id": "vanilla/453"}
{"input": "<s> public void setDuckingFactor ( float duckingFactor ) {", "gt": "mDuckingFactor = duckingFactor ;", "repo": "vanilla", "task_id": "vanilla/454"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/456"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ;", "repo": "vanilla", "task_id": "vanilla/457"}
{"input": "<s> public HashMap getTags ( String fname ) { HashMap tags = new HashMap ( ) ; try { RandomAccessFile ra = new RandomAccessFile ( fname , \" <STR_LIT> \" ) ; tags = getTags ( ra ) ; ra . close ( ) ;", "gt": "} catch ( Exception e ) {", "repo": "vanilla", "task_id": "vanilla/458"}
{"input": "<s> private void inheritTag ( String key , HashMap from , HashMap to ) { if ( ! to . containsKey ( key ) & & from . containsKey ( key ) ) {", "gt": "to . put ( key , from . get ( key ) ) ;", "repo": "vanilla", "task_id": "vanilla/459"}
{"input": "<s> public int raf2le32 ( RandomAccessFile fh , long off ) throws IOException { byte [ ] scratch = new byte [ <NUM_LIT:4> ] ; fh . seek ( off ) ;", "gt": "fh . read ( scratch ) ;", "repo": "vanilla", "task_id": "vanilla/461"}
{"input": "<s> public void addTagEntry ( HashMap tags , String key , String value ) { if ( tags . containsKey ( key ) ) { ( ( ArrayList ) tags . get ( key ) ) . add ( value ) ; } else {", "gt": "ArrayList l = new ArrayList < String > ( ) ;", "repo": "vanilla", "task_id": "vanilla/462"}
{"input": "<s> private int calculateFrameLength ( byte [ ] frame , int offset , int v3major ) { if ( v3major < <NUM_LIT:3> ) { return ( frame [ offset ] < < <NUM_LIT:16> ) + ( frame [ offset + 1 ] < < <NUM_LIT:8> ) + frame [ offset + <NUM_LIT:2> ] ; } int rawlen = b2be32 ( frame , offset ) ;", "gt": "if ( v3major < <NUM_LIT:4> ) {", "repo": "vanilla", "task_id": "vanilla/464"}
{"input": "<s> public HashMap getTags ( RandomAccessFile s ) throws IOException { HashMap rgain = parseLameHeader ( s , 0 ) ; HashMap tags = parseV1Header ( s , s . length ( ) - <NUM_LIT> ) ; for ( String k : Arrays . asList ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ) {", "gt": "if ( rgain . containsKey ( k ) )", "repo": "vanilla", "task_id": "vanilla/465"}
{"input": "<s> private byte [ ] readIntoBuffer ( RandomAccessFile s , int dataSize ) throws IOException { int bufferSize = Math . min ( dataSize , MAX_BUFFER_SIZE ) ; byte [ ] buffer = new byte [ bufferSize ] ; s . read ( buffer , 0 , buffer . length ) ;", "gt": "if ( dataSize > bufferSize ) {", "repo": "vanilla", "task_id": "vanilla/466"}
{"input": "<s> public HashMap getTags ( RandomAccessFile s ) throws IOException {", "gt": "HashMap tags = new HashMap ( ) ;", "repo": "vanilla", "task_id": "vanilla/471"}
{"input": "<s> @ Override public void onDragFloatView ( View floatView , Point position , Point touch ) { if ( mRemoveEnabled & & mIsRemoving ) {", "gt": "mPositionX = position . x ;", "repo": "vanilla", "task_id": "vanilla/473"}
{"input": "<s> @ Override public boolean onDown ( MotionEvent ev ) { if ( mRemoveEnabled & & mRemoveMode = = CLICK_REMOVE ) { mClickRemoveHitPos = viewIdHitPosition ( ev , mClickRemoveId ) ; } mHitPos = startDragPosition ( ev ) ; if ( mHitPos ! = MISS & & mDragInitMode = = ON_DOWN ) { startDrag ( mHitPos , ( int ) ev . getX ( ) - mItemX , ( int ) ev . getY ( ) - mItemY ) ; } mIsRemoving = false ;", "gt": "mCanDrag = true ;", "repo": "vanilla", "task_id": "vanilla/474"}
{"input": "<s> @ Override public boolean onSingleTapUp ( MotionEvent ev ) { if ( mRemoveEnabled & & mRemoveMode = = CLICK_REMOVE ) { if ( mClickRemoveHitPos ! = MISS ) {", "gt": "mDslv . removeItem ( mClickRemoveHitPos - mDslv . getHeaderViewsCount ( ) ) ;", "repo": "vanilla", "task_id": "vanilla/476"}
{"input": "<s> @ Override public Cursor swapCursor ( Cursor newCursor ) { Cursor old = super . swapCursor ( newCursor ) ;", "gt": "resetMappings ( ) ;", "repo": "vanilla", "task_id": "vanilla/477"}
{"input": "<s> @ Override public void changeCursor ( Cursor cursor ) {", "gt": "super . changeCursor ( cursor ) ;", "repo": "vanilla", "task_id": "vanilla/478"}
{"input": "<s> public void reset ( ) {", "gt": "resetMappings ( ) ;", "repo": "vanilla", "task_id": "vanilla/479"}
{"input": "<s> private void resetMappings ( ) {", "gt": "mListMapping . clear ( ) ;", "repo": "vanilla", "task_id": "vanilla/480"}
{"input": "<s> private void cleanMapping ( ) { ArrayList < Integer > toRemove = new ArrayList < Integer > ( ) ; int size = mListMapping . size ( ) ; for ( int i = 0 ; i < size ; + + i ) { if ( mListMapping . keyAt ( i ) = = mListMapping . valueAt ( i ) ) { toRemove . add ( mListMapping . keyAt ( i ) ) ; } }", "gt": "size = toRemove . size ( ) ;", "repo": "vanilla", "task_id": "vanilla/482"}
{"input": "<s> public int getListPosition ( int cursorPosition ) { if ( mRemovedCursorPositions . contains ( cursorPosition ) ) { return REMOVED ; } int index = mListMapping . indexOfValue ( cursorPosition ) ; if ( index < 0 ) {", "gt": "return cursorPosition ;", "repo": "vanilla", "task_id": "vanilla/484"}
{"input": "<s> @ Override public boolean isChecked ( ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable )", "repo": "vanilla", "task_id": "vanilla/486"}
{"input": "<s> @ Override public void setChecked ( boolean checked ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable )", "repo": "vanilla", "task_id": "vanilla/487"}
{"input": "<s> @ Override public void toggle ( ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable )", "repo": "vanilla", "task_id": "vanilla/488"}
{"input": "<s> private void cancel ( ) { if ( mDragState = = DRAGGING ) {", "gt": "cancelDrag ( ) ;", "repo": "vanilla", "task_id": "vanilla/489"}
{"input": "<s> @ Override public void setOnTouchListener ( View . OnTouchListener l ) { if ( mFloatViewManager ! = null ) {", "gt": "mFloatViewManager . setSecondaryOnTouchListener ( l ) ;", "repo": "vanilla", "task_id": "vanilla/490"}
{"input": "<s> public ListAdapter getInputAdapter ( ) { if ( mAdapterWrapper = = null ) {", "gt": "return null ;", "repo": "vanilla", "task_id": "vanilla/491"}
{"input": "<s> public void clear ( ) {", "gt": "mMap . clear ( ) ;", "repo": "vanilla", "task_id": "vanilla/494"}
{"input": "<s> @ Override protected void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; if ( mTrackDragSort ) {", "gt": "mDragSortTracker . appendState ( ) ;", "repo": "vanilla", "task_id": "vanilla/495"}
{"input": "<s> public float transform ( float frac ) { if ( frac < mAlpha ) { return mA * frac * frac ; } else if ( frac < <NUM_LIT> - mAlpha ) {", "gt": "return mB + mC * frac ;", "repo": "vanilla", "task_id": "vanilla/496"}
{"input": "<s> public void start ( ) { mStartTime = SystemClock . uptimeMillis ( ) ; mCanceled = false ;", "gt": "onStart ( ) ;", "repo": "vanilla", "task_id": "vanilla/497"}
{"input": "<s> @ Override public void run ( ) { if ( mCanceled ) { return ; } float fraction = ( ( float ) ( SystemClock . uptimeMillis ( ) - mStartTime ) ) / mDurationF ; if ( fraction > = <NUM_LIT> ) { onUpdate ( <NUM_LIT> , <NUM_LIT> ) ; onStop ( ) ;", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/498"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "mInitDragDeltaY = mDragDeltaY ;", "repo": "vanilla", "task_id": "vanilla/499"}
{"input": "<s> public void removeItem ( int which ) {", "gt": "mUseRemoveVelocity = false ;", "repo": "vanilla", "task_id": "vanilla/503"}
{"input": "<s> public void cancelDrag ( ) { if ( mDragState = = DRAGGING ) { mDragScroller . stopScrolling ( true ) ; destroyFloatView ( ) ; clearPositions ( ) ; adjustAllItems ( ) ; if ( mInTouchEvent ) { mDragState = STOPPED ;", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/505"}
{"input": "<s> private void clearPositions ( ) { mSrcPos = - 1 ; mFirstExpPos = - 1 ;", "gt": "mSecondExpPos = - 1 ;", "repo": "vanilla", "task_id": "vanilla/506"}
{"input": "<s> private void doRemoveItem ( int which ) { mDragState = REMOVING ; if ( mRemoveListener ! = null ) { mRemoveListener . remove ( which ) ; } destroyFloatView ( ) ; adjustOnReorder ( ) ; clearPositions ( ) ; if ( mInTouchEvent ) {", "gt": "mDragState = STOPPED ;", "repo": "vanilla", "task_id": "vanilla/507"}
{"input": "<s> public boolean stopDrag ( boolean remove ) {", "gt": "mUseRemoveVelocity = false ;", "repo": "vanilla", "task_id": "vanilla/508"}
{"input": "<s> public boolean stopDragWithVelocity ( boolean remove , float velocityX ) {", "gt": "mUseRemoveVelocity = true ;", "repo": "vanilla", "task_id": "vanilla/509"}
{"input": "<s> private void saveTouchCoords ( MotionEvent ev ) { int action = ev . getAction ( ) & MotionEvent . ACTION_MASK ; if ( action ! = MotionEvent . ACTION_DOWN ) { mLastX = mX ; mLastY = mY ; } mX = ( int ) ev . getX ( ) ; mY = ( int ) ev . getY ( ) ; if ( action = = MotionEvent . ACTION_DOWN ) { mLastX = mX ;", "gt": "mLastY = mY ;", "repo": "vanilla", "task_id": "vanilla/511"}
{"input": "<s> @ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) {", "gt": "super . onSizeChanged ( w , h , oldw , oldh ) ;", "repo": "vanilla", "task_id": "vanilla/513"}
{"input": "<s> private void adjustAllItems ( ) { final int first = getFirstVisiblePosition ( ) ; final int last = getLastVisiblePosition ( ) ; int begin = Math . max ( 0 , getHeaderViewsCount ( ) - first ) ; int end = Math . min ( last - first , getCount ( ) - 1 - getFooterViewsCount ( ) - first ) ; for ( int i = begin ; i < = end ; + + i ) { View v = getChildAt ( i ) ;", "gt": "if ( v ! = null ) {", "repo": "vanilla", "task_id": "vanilla/514"}
{"input": "<s> private void adjustItem ( int position ) { View v = getChildAt ( position - getFirstVisiblePosition ( ) ) ; if ( v ! = null ) {", "gt": "adjustItem ( position , v , false ) ;", "repo": "vanilla", "task_id": "vanilla/515"}
{"input": "<s> @ Override public void requestLayout ( ) { if ( ! mBlockLayoutRequests ) {", "gt": "super . requestLayout ( ) ;", "repo": "vanilla", "task_id": "vanilla/516"}
{"input": "<s> public boolean startDrag ( int position , int dragFlags , int deltaX , int deltaY ) { if ( ! mInTouchEvent | | mFloatViewManager = = null ) { return false ; } View v = mFloatViewManager . onCreateFloatView ( position ) ; if ( v = = null ) {", "gt": "return false ;", "repo": "vanilla", "task_id": "vanilla/519"}
{"input": "<s> public void setDragSortListener ( DragSortListener l ) { setDropListener ( l ) ;", "gt": "setDragListener ( l ) ;", "repo": "vanilla", "task_id": "vanilla/522"}
{"input": "<s> public void setDragScrollProfile ( DragScrollProfile ssp ) { if ( ssp ! = null ) {", "gt": "mScrollProfile = ssp ;", "repo": "vanilla", "task_id": "vanilla/523"}
{"input": "<s> private static int rotate ( int value , int offset , int lowerBound , int upperBound ) { int windowSize = upperBound - lowerBound ; value + = offset ; if ( value < lowerBound ) { value + = windowSize ;", "gt": "} else if ( value > = upperBound ) {", "repo": "vanilla", "task_id": "vanilla/524"}
{"input": "<s> public void startScrolling ( int dir ) { if ( ! mScrolling ) { mAbort = false ; mScrolling = true ; tStart = SystemClock . uptimeMillis ( ) ;", "gt": "mPrevTime = tStart ;", "repo": "vanilla", "task_id": "vanilla/527"}
{"input": "<s> public void stopScrolling ( boolean now ) { if ( now ) { DragSortListView . this . removeCallbacks ( this ) ; mScrolling = false ;", "gt": "} else {", "repo": "vanilla", "task_id": "vanilla/528"}
{"input": "<s> public void startTracking ( ) { mBuilder . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) ;", "gt": "mNumFlushes = 0 ;", "repo": "vanilla", "task_id": "vanilla/529"}
{"input": "<s> public void stopTracking ( ) { if ( mTracking ) {", "gt": "mBuilder . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) ;", "repo": "vanilla", "task_id": "vanilla/531"}
{"input": "<s> @ Override public void onDestroyFloatView ( View floatView ) { ( ( ImageView ) floatView ) . setImageDrawable ( null ) ;", "gt": "mFloatBitmap . recycle ( ) ;", "repo": "vanilla", "task_id": "vanilla/537"}
{"input": "<s> protected View getRootView ( ) {", "gt": "viewBinding = AboutBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/0"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/1"}
{"input": "<s> @ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "setVolumeControlStream ( TTSManager . AUDIO_STREAM ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/2"}
{"input": "<s> @ Override public boolean onSupportNavigateUp ( ) {", "gt": "getOnBackPressedDispatcher ( ) . onBackPressed ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/3"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { viewBinding = ChartBinding . inflate ( inflater , container , false ) ;", "gt": "viewBinding . chartView . setChartByDistance ( chartByDistance ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/8"}
{"input": "<s> @ Override public void onPause ( ) { super . onPause ( ) ;", "gt": "pauseTrackDataHub ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/10"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/11"}
{"input": "<s> public void onSampledInTrackPoint ( @ NonNull TrackPoint trackPoint , @ NonNull TrackStatistics trackStatistics ) { if ( isResumed ( ) ) { ChartPoint point = ChartPoint . create ( trackStatistics , trackPoint , trackPoint . getSpeed ( ) , chartByDistance , viewBinding . chartView . getUnitSystem ( ) ) ;", "gt": "pendingPoints . add ( point ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/14"}
{"input": "<s> @ Override public void clearMarkers ( ) { if ( isResumed ( ) ) {", "gt": "viewBinding . chartView . clearMarker ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/16"}
{"input": "<s> @ Override public void onNewMarker ( @ NonNull Marker marker ) { if ( isResumed ( ) ) {", "gt": "viewBinding . chartView . addMarker ( marker ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/17"}
{"input": "<s> @ Override public void onNewMarkersDone ( ) { if ( isResumed ( ) ) {", "gt": "runOnUiThread ( updateChart ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/18"}
{"input": "<s> private void checkChartSettings ( ) { boolean needUpdate = viewBinding . chartView . applyReportSpeed ( ) ; if ( needUpdate ) {", "gt": "viewBinding . chartView . postInvalidate ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/19"}
{"input": "<s> private synchronized void pauseTrackDataHub ( ) {", "gt": "trackDataHub . unregisterTrackDataListener ( this ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/21"}
{"input": "<s> private void runOnUiThread ( Runnable runnable ) { Activity fragmentActivity = getActivity ( ) ; if ( fragmentActivity ! = null ) {", "gt": "fragmentActivity . runOnUiThread ( runnable ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/22"}
{"input": "<s> void update ( ChartPoint chartPoint ) { if ( isChartPointValid ( chartPoint ) ) {", "gt": "extremityMonitor . update ( extractDataFromChartPoint ( chartPoint ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/23"}
{"input": "<s> int getTitleId ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > metricTitleId ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "imperialTitleId ;", "repo": "OpenTracks", "task_id": "OpenTracks/28"}
{"input": "<s> @ Override public boolean onScroll ( MotionEvent e1 , MotionEvent e2 , float distanceX , float distanceY ) { if ( Math . abs ( distanceX ) > 0 ) { int availableToScroll = effectiveWidth * ( zoomLevel - 1 ) - getScrollX ( ) ; if ( availableToScroll > 0 ) {", "gt": "scrollBy ( Math . min ( availableToScroll , ( int ) distanceX ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/31"}
{"input": "<s> @ Override public boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) {", "gt": "fling ( ( int ) - velocityX ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/32"}
{"input": "<s> @ Override public boolean onScale ( ScaleGestureDetector detector ) { float scaleFactor = detector . getScaleFactor ( ) ; if ( scaleFactor > = <NUM_LIT> ) { zoomIn ( ) ; return true ; } else if ( scaleFactor < = <NUM_LIT> ) {", "gt": "zoomOut ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/33"}
{"input": "<s> public boolean applyReportSpeed ( ) { if ( reportSpeed ) { if ( ! speedSeries . isEnabled ( ) ) { speedSeries . setEnabled ( true ) ; paceSeries . setEnabled ( false ) ; return true ; } } else { if ( ! paceSeries . isEnabled ( ) ) { speedSeries . setEnabled ( false ) ; paceSeries . setEnabled ( true ) ;", "gt": "return true ;", "repo": "OpenTracks", "task_id": "OpenTracks/34"}
{"input": "<s> public void reset ( ) { synchronized ( chartPoints ) { chartPoints . clear ( ) ;", "gt": "xExtremityMonitor . reset ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/36"}
{"input": "<s> public void addMarker ( Marker marker ) { synchronized ( markers ) {", "gt": "markers . add ( marker ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/37"}
{"input": "<s> public void clearMarker ( ) { synchronized ( markers ) {", "gt": "markers . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/38"}
{"input": "<s> private void fling ( int velocityX ) { int maxWidth = effectiveWidth * ( zoomLevel - 1 ) ;", "gt": "scroller . fling ( getScrollX ( ) , 0 , velocityX , 0 , 0 , maxWidth , 0 , 0 ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/41"}
{"input": "<s> private void requestDisallowInterceptTouchEventInParent ( boolean disallow ) { ViewParent parent = getParent ( ) ; if ( parent ! = null ) {", "gt": "parent . requestDisallowInterceptTouchEvent ( disallow ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/42"}
{"input": "<s> private void scrollBy ( int deltaX ) { int scrollX = getScrollX ( ) + deltaX ; if ( scrollX < = 0 ) { scrollX = 0 ; } int maxWidth = effectiveWidth * ( zoomLevel - 1 ) ;", "gt": "if ( scrollX > = maxWidth ) {", "repo": "OpenTracks", "task_id": "OpenTracks/43"}
{"input": "<s> @ Override public void computeScroll ( ) { if ( scroller . computeScrollOffset ( ) ) { int oldX = getScrollX ( ) ; int x = scroller . getCurrX ( ) ; scrollTo ( x , 0 ) ; if ( oldX ! = x ) {", "gt": "onScrollChanged ( x , 0 , oldX , 0 ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/44"}
{"input": "<s> @ Override protected void onDraw ( Canvas canvas ) { synchronized ( chartPoints ) { canvas . save ( ) ; canvas . drawColor ( backgroundColor ) ; canvas . save ( ) ; clipToGraphArea ( canvas ) ; drawDataSeries ( canvas ) ; drawMarker ( canvas ) ; drawGrid ( canvas ) ; canvas . restore ( ) ; drawSeriesTitles ( canvas ) ; drawXAxis ( canvas ) ; drawYAxis ( canvas ) ; canvas . restore ( ) ;", "gt": "if ( showPointer ) {", "repo": "OpenTracks", "task_id": "OpenTracks/47"}
{"input": "<s> private void clipToGraphArea ( Canvas canvas ) { int x = getScrollX ( ) + leftBorder ;", "gt": "int y = topBorder ;", "repo": "OpenTracks", "task_id": "OpenTracks/48"}
{"input": "<s> private double getXAxisInterval ( ) { double interval = maxX / zoomLevel / TARGET_X_AXIS_INTERVALS ; if ( interval < 1 ) { interval = <NUM_LIT> ; } else if ( interval < <NUM_LIT:5> ) { interval = <NUM_LIT:2> ; } else if ( interval < <NUM_LIT:10> ) { interval = <NUM_LIT:5> ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/52"}
{"input": "<s> private List < Double > getXAxisMarkerPositions ( double interval ) { List < Double > markers = new ArrayList < > ( ) ; markers . add ( <NUM_LIT> ) ; for ( int i = 1 ; i * interval < maxX ; i + + ) { markers . add ( i * interval ) ; }", "gt": "if ( markers . size ( ) < <NUM_LIT:2> ) {", "repo": "OpenTracks", "task_id": "OpenTracks/53"}
{"input": "<s> private void updateSeries ( ) { synchronized ( chartPoints ) {", "gt": "seriesList . stream ( ) . forEach ( this : : updateSerie ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/56"}
{"input": "<s> private void updateEffectiveDimensionsIfChanged ( int newWidth , int newHeight ) { if ( width ! = newWidth | | height ! = newHeight ) { width = newWidth ;", "gt": "height = newHeight ;", "repo": "OpenTracks", "task_id": "OpenTracks/58"}
{"input": "<s> private Rect getRect ( Paint paint , String string ) { Rect rect = new Rect ( ) ;", "gt": "paint . getTextBounds ( string , 0 , string . length ( ) , rect ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/62"}
{"input": "<s> @ VisibleForTesting public List < Track > getTracks ( ) { ArrayList < Track > tracks = new ArrayList < > ( ) ; try ( Cursor cursor = getTrackCursor ( null , null , TracksColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) { tracks . ensureCapacity ( cursor . getCount ( ) ) ; do { tracks . add ( createTrack ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/67"}
{"input": "<s> public List < Track > getTracks ( ContentProviderSelectionInterface selection ) { SelectionData selectionData = selection . buildSelection ( ) ; ArrayList < Track > tracks = new ArrayList < > ( ) ; try ( Cursor cursor = getTrackCursor ( selectionData . selection ( ) , selectionData . selectionArgs ( ) , TracksColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) { tracks . ensureCapacity ( cursor . getCount ( ) ) ; do { tracks . add ( createTrack ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/68"}
{"input": "<s> public Track getTrack ( @ NonNull Track . Id trackId ) { try ( Cursor cursor = getTrackCursor ( TracksColumns . _ID + \" <STR_LIT> \" , new String [ ] { Long . toString ( trackId . id ( ) ) } , null ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrack ( cursor ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/69"}
{"input": "<s> public Track getTrack ( @ NonNull UUID trackUUID ) { String trackUUIDsearch = UUIDUtils . toHex ( trackUUID ) ; try ( Cursor cursor = getTrackCursor ( \" <STR_LIT:(> \" + TracksColumns . UUID + \" <STR_LIT> \" , new String [ ] { trackUUIDsearch } , null ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrack ( cursor ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/70"}
{"input": "<s> public Integer getNextMarkerNumber ( @ NonNull Track . Id trackId ) { String [ ] projection = { MarkerColumns . _ID } ; String selection = MarkerColumns . TRACKID + \" <STR_LIT> \" ; String [ ] selectionArgs = new String [ ] { Long . toString ( trackId . id ( ) ) } ; try ( Cursor cursor = getMarkerCursor ( projection , selection , selectionArgs , MarkerColumns . _ID , - 1 ) ) { if ( cursor ! = null ) {", "gt": "return cursor . getCount ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/73"}
{"input": "<s> public Marker getMarker ( @ NonNull Marker . Id markerId ) { try ( Cursor cursor = getMarkerCursor ( null , MarkerColumns . _ID + \" <STR_LIT> \" , new String [ ] { Long . toString ( markerId . id ( ) ) } , MarkerColumns . _ID , 1 ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) {", "gt": "return createMarker ( cursor ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/74"}
{"input": "<s> @ Deprecated @ VisibleForTesting public List < Marker > getMarkers ( Track . Id trackId ) { ArrayList < Marker > markers = new ArrayList < > ( ) ; try ( Cursor cursor = getMarkerCursor ( trackId , null , - 1 ) ) { if ( cursor . moveToFirst ( ) ) { do { markers . add ( createMarker ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/75"}
{"input": "<s> public Uri insertMarker ( @ NonNull Marker marker ) {", "gt": "marker . setId ( null ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/76"}
{"input": "<s> @ Deprecated private TrackPoint findTrackPointBy ( String selection , String [ ] selectionArgs ) { try ( Cursor cursor = getTrackPointCursor ( null , selection , selectionArgs , TrackPointsColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrackPoint ( cursor ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/83"}
{"input": "<s> private int getTotalChanges ( ) { int totalCount ; try ( Cursor cursor = db . rawQuery ( \" <STR_LIT> \" , null ) ) {", "gt": "cursor . moveToNext ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/87"}
{"input": "<s> private void upgradeFrom26to27 ( SQLiteDatabase db ) { db . beginTransaction ( ) ; db . execSQL ( \" <STR_LIT> \" ) ;", "gt": "db . setTransactionSuccessful ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/97"}
{"input": "<s> private void upgradeFrom33to34 ( SQLiteDatabase db ) { db . beginTransaction ( ) ; db . execSQL ( \" <STR_LIT> \" ) ;", "gt": "db . setTransactionSuccessful ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/100"}
{"input": "<s> public static Distance of ( Double distance_m ) { if ( distance_m = = null ) {", "gt": "return Distance . of ( Double . NaN ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/102"}
{"input": "<s> public static Distance one ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > Distance . ofKilometer ( 1 ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "Distance . ofMile ( 1 ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/104"}
{"input": "<s> public double toKM_Miles ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > toKM ( ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "toMI ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/105"}
{"input": "<s> public double toM_FT ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC , IMPERIAL_METER - >", "gt": "toM ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/106"}
{"input": "<s> public Builder setDecimalCount ( int decimalCount ) {", "gt": "this . decimalCount = decimalCount ;", "repo": "OpenTracks", "task_id": "OpenTracks/108"}
{"input": "<s> public Builder setUnit ( @ Nullable UnitSystem unitSystem ) {", "gt": "this . unitSystem = unitSystem ;", "repo": "OpenTracks", "task_id": "OpenTracks/109"}
{"input": "<s> public Builder setThreshold ( double threshold ) {", "gt": "this . threshold = threshold ;", "repo": "OpenTracks", "task_id": "OpenTracks/110"}
{"input": "<s> public Location getLocation ( ) { Location location = new Location ( \" \" ) ; location . setTime ( time . toEpochMilli ( ) ) ; if ( hasLocation ( ) ) { location . setLatitude ( latitude ) ; location . setLongitude ( longitude ) ; } if ( hasBearing ( ) ) { location . setBearing ( bearing ) ; } if ( hasAccuracy ( ) ) { location . setAccuracy ( ( float ) accuracy . toM ( ) ) ; }", "gt": "if ( hasAltitude ( ) ) {", "repo": "OpenTracks", "task_id": "OpenTracks/112"}
{"input": "<s> public double to ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > toKMH ( ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "toMPH ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/116"}
{"input": "<s> public Builder setDecimalCount ( int decimalCount ) {", "gt": "this . decimalCount = decimalCount ;", "repo": "OpenTracks", "task_id": "OpenTracks/118"}
{"input": "<s> public Builder setUnit ( @ NonNull UnitSystem unitSystem ) {", "gt": "this . unitSystem = unitSystem ;", "repo": "OpenTracks", "task_id": "OpenTracks/119"}
{"input": "<s> public Builder setReportSpeedOrPace ( boolean reportSpeedOrPace ) {", "gt": "this . reportSpeedOrPace = reportSpeedOrPace ;", "repo": "OpenTracks", "task_id": "OpenTracks/120"}
{"input": "<s> public static Type getById ( int id ) { for ( Type e : values ( ) ) {", "gt": "if ( e . type_db = = id )", "repo": "OpenTracks", "task_id": "OpenTracks/122"}
{"input": "<s> public TrackPoint setType ( @ NonNull Type type ) {", "gt": "this . type = type ;", "repo": "OpenTracks", "task_id": "OpenTracks/123"}
{"input": "<s> public TrackPoint setLatitude ( double latitude ) {", "gt": "this . latitude = latitude ;", "repo": "OpenTracks", "task_id": "OpenTracks/124"}
{"input": "<s> public TrackPoint setLongitude ( double longitude ) {", "gt": "this . longitude = longitude ;", "repo": "OpenTracks", "task_id": "OpenTracks/125"}
{"input": "<s> public TrackPoint setAltitudeGain ( Float altitudeGain_m ) {", "gt": "this . altitudeGain_m = altitudeGain_m ;", "repo": "OpenTracks", "task_id": "OpenTracks/126"}
{"input": "<s> public TrackPoint setAltitudeLoss ( Float altitudeLoss_m ) {", "gt": "this . altitudeLoss_m = altitudeLoss_m ;", "repo": "OpenTracks", "task_id": "OpenTracks/127"}
{"input": "<s> @ VisibleForTesting public TrackPoint setAltitude ( double altitude_m ) {", "gt": "this . altitude = Altitude . WGS84 . of ( altitude_m ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/128"}
{"input": "<s> public TrackPoint setAltitude ( Altitude altitude ) {", "gt": "this . altitude = altitude ;", "repo": "OpenTracks", "task_id": "OpenTracks/129"}
{"input": "<s> public TrackPoint setSpeed ( Speed speed ) {", "gt": "this . speed = speed ;", "repo": "OpenTracks", "task_id": "OpenTracks/130"}
{"input": "<s> public TrackPoint setBearing ( Float bearing ) {", "gt": "this . bearing = bearing ;", "repo": "OpenTracks", "task_id": "OpenTracks/131"}
{"input": "<s> public TrackPoint setHorizontalAccuracy ( Distance horizontalAccuracy ) {", "gt": "this . horizontalAccuracy = horizontalAccuracy ;", "repo": "OpenTracks", "task_id": "OpenTracks/132"}
{"input": "<s> public TrackPoint setVerticalAccuracy ( Distance horizontalAccuracy ) {", "gt": "this . verticalAccuracy = horizontalAccuracy ;", "repo": "OpenTracks", "task_id": "OpenTracks/133"}
{"input": "<s> public TrackPoint setSensorDistance ( Distance distance_m ) {", "gt": "this . sensorDistance = distance_m ;", "repo": "OpenTracks", "task_id": "OpenTracks/136"}
{"input": "<s> public TrackPoint setHeartRate ( HeartRate heartRate ) {", "gt": "this . heartRate = heartRate ;", "repo": "OpenTracks", "task_id": "OpenTracks/138"}
{"input": "<s> public TrackPoint setCadence ( Cadence cadence ) {", "gt": "this . cadence = cadence ;", "repo": "OpenTracks", "task_id": "OpenTracks/139"}
{"input": "<s> public TrackPoint setPower ( Power power ) {", "gt": "this . power = power ;", "repo": "OpenTracks", "task_id": "OpenTracks/140"}
{"input": "<s> private void resetSamplingState ( ) { numLoadedPoints = 0 ; firstSeenTrackPointId = null ;", "gt": "lastSeenTrackPointId = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/149"}
{"input": "<s> @ Override public void close ( ) { if ( cursor ! = null ) { cursor . close ( ) ;", "gt": "cursor = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/152"}
{"input": "<s> public TrackSelection addDateRange ( Instant from , Instant to ) { this . from = from ;", "gt": "this . to = to ;", "repo": "OpenTracks", "task_id": "OpenTracks/153"}
{"input": "<s> public static UUID fromBytes ( byte [ ] bytes ) { ByteBuffer byteBuffer = ByteBuffer . wrap ( bytes ) ; long mostSignificant = byteBuffer . getLong ( ) ;", "gt": "long lestSignificant = byteBuffer . getLong ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/156"}
{"input": "<s> public static byte [ ] toBytes ( @ NonNull UUID uuid ) { ByteBuffer byteBuffer = ByteBuffer . allocate ( <NUM_LIT:16> ) ; byteBuffer . putLong ( uuid . getMostSignificantBits ( ) ) ;", "gt": "byteBuffer . putLong ( uuid . getLeastSignificantBits ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/157"}
{"input": "<s> @ NonNull @ Override public Dialog onCreateDialog ( Bundle savedInstanceState ) { Dialog dialog = super . onCreateDialog ( savedInstanceState ) ;", "gt": "dialog . setTitle ( R . string . track_edit_activity_type_hint ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/161"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/163"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long id ) {", "gt": "chooseActivityTypeCaller . onChooseActivityTypeDone ( activityTypes . get ( position ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/164"}
{"input": "<s> public void setSelected ( int position ) {", "gt": "selected = position ;", "repo": "OpenTracks", "task_id": "OpenTracks/165"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = StatisticsRecordedBinding . inflate ( inflater , container , false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/168"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/169"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/170"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/171"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = StatisticsRecordingBinding . inflate ( inflater , container , false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/174"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/176"}
{"input": "<s> @ Override public void onStop ( ) {", "gt": "super . onStop ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/177"}
{"input": "<s> @ Override public void onDestroyView ( ) { super . onDestroyView ( ) ;", "gt": "viewHolders . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/178"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/179"}
{"input": "<s> private void updateDataOnUI ( ) { if ( isResumed ( ) ) {", "gt": "viewHolders . forEach ( i - > i . onChanged ( unitSystem , recordingData ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/181"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "helpBinding = HelpBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/183"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = IntroductionBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/184"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/185"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = OsmDashboardBinding . inflate ( inflater , container , false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/187"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/188"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = WelcomeBinding . inflate ( inflater , container , false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/189"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/190"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ;", "gt": "outState . putString ( EXTRA_TITLE , title ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/193"}
{"input": "<s> public void close ( ) {", "gt": "printWriter . flush ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/196"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "conflictsQueue . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/199"}
{"input": "<s> private void nextExport ( @ Nullable ExportTask exportTask ) { exportTasks . remove ( exportTask ) ; setProgress ( ) ; if ( exportTasks . isEmpty ( ) ) {", "gt": "onExportEnded ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/204"}
{"input": "<s> @ Override public void onExportSuccess ( ExportTask exportTask ) { if ( exportFileExists ( exportTask ) ) { trackExportOverwrittenCount + + ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/205"}
{"input": "<s> public void overwrite ( ) { export ( exportTask , ConflictResolutionStrategy . CONFLICT_OVERWRITE ) ; if ( viewBinding . exportProgressApplyToAll . isChecked ( ) ) {", "gt": "autoConflict = ConflictResolutionStrategy . CONFLICT_OVERWRITE ;", "repo": "OpenTracks", "task_id": "OpenTracks/208"}
{"input": "<s> public void skip ( ) { export ( exportTask , ConflictResolutionStrategy . CONFLICT_SKIP ) ; if ( viewBinding . exportProgressApplyToAll . isChecked ( ) ) {", "gt": "autoConflict = ConflictResolutionStrategy . CONFLICT_SKIP ;", "repo": "OpenTracks", "task_id": "OpenTracks/209"}
{"input": "<s> @ Override public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( filename ) ;", "gt": "dest . writeString ( trackFileFormat . name ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/213"}
{"input": "<s> @ Override public boolean writeTrack ( List < Track > tracks , @ NonNull OutputStream outputStream ) { try { prepare ( outputStream ) ; writeHeader ( ) ; for ( Track track : tracks ) { writeMarkers ( track ) ; } for ( Track track : tracks ) { writeTrackPoints ( track ) ; } writeFooter ( ) ; close ( ) ; return true ;", "gt": "} catch ( InterruptedException e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/214"}
{"input": "<s> public void close ( ) {", "gt": "printWriter . flush ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/215"}
{"input": "<s> @ VisibleForTesting void close ( ) {", "gt": "printWriter . flush ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/216"}
{"input": "<s> private void writeFooter ( ) {", "gt": "printWriter . println ( \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/217"}
{"input": "<s> private void writeEndTrack ( ) {", "gt": "printWriter . println ( \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/221"}
{"input": "<s> @ VisibleForTesting void writeOpenSegment ( ) { printWriter . println ( \" <STR_LIT> \" ) ; trackpointTypeList . clear ( ) ; speedList . clear ( ) ; distanceList . clear ( ) ; powerList . clear ( ) ; cadenceList . clear ( ) ; heartRateList . clear ( ) ;", "gt": "altitudeGainList . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/222"}
{"input": "<s> private float getHeading ( Track . Id trackId , Location location ) { TrackPoint . Id trackPointId = contentProviderUtils . getTrackPointId ( trackId , location ) ; if ( trackPointId = = null ) { return location . getBearing ( ) ; } TrackPoint viewLocation = contentProviderUtils . getLastValidTrackPoint ( trackId ) ;", "gt": "if ( viewLocation ! = null ) {", "repo": "OpenTracks", "task_id": "OpenTracks/225"}
{"input": "<s> private void writePlacemarkerStyle ( ) { printWriter . println ( \" <STR_LIT> <STR_LIT:\\\"> \" + KMLTrackExporter . MARKER_STYLE + \" <STR_LIT:\\\"> <STR_LIT> \" ) ;", "gt": "printWriter . println ( \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/230"}
{"input": "<s> protected DocumentFile configureDirectoryChooserIntent ( Intent intent ) {", "gt": "intent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/235"}
{"input": "<s> @ Override protected Intent createNextActivityIntent ( Uri directoryUri ) { Intent intent = IntentUtils . newIntent ( this , ImportActivity . class ) ;", "gt": "intent . putExtra ( ImportActivity . EXTRA_DIRECTORY_URI_KEY , directoryUri ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/236"}
{"input": "<s> private void onTrackPointStart ( Attributes attributes ) { latitude = attributes . getValue ( ATTRIBUTE_LAT ) ; longitude = attributes . getValue ( ATTRIBUTE_LON ) ; altitude = null ; time = null ; speed = null ; gain = null ; loss = null ; sensorDistance = null ; accuracyHorizontal = null ;", "gt": "accuracyVertical = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/245"}
{"input": "<s> private void onMarkerStart ( Attributes attributes ) { name = null ; description = null ; photoUrl = null ; latitude = attributes . getValue ( ATTRIBUTE_LAT ) ;", "gt": "longitude = attributes . getValue ( ATTRIBUTE_LON ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/246"}
{"input": "<s> private void onFileEnd ( ) {", "gt": "trackImporter . addMarkers ( markers ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/247"}
{"input": "<s> public static void enqueue ( Context context , ImportServiceResultReceiver receiver , Uri uri ) { Intent intent = new Intent ( context , JobService . class ) ; intent . putExtra ( EXTRA_RECEIVER , receiver ) ;", "gt": "intent . putExtra ( EXTRA_URI , uri ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/251"}
{"input": "<s> @ Override protected void onHandleWork ( @ NonNull Intent intent ) { resultReceiver = intent . getParcelableExtra ( EXTRA_RECEIVER ) ;", "gt": "Uri uri = intent . getParcelableExtra ( EXTRA_URI ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/252"}
{"input": "<s> LiveData < Summary > getImportData ( List < DocumentFile > documentFiles ) { if ( importData = = null ) {", "gt": "importData = new MutableLiveData < > ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/254"}
{"input": "<s> private void onMarkerStart ( ) { name = null ; description = null ; activityTypeLocalized = null ; photoUrl = null ;", "gt": "latitude = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/257"}
{"input": "<s> private void onMarkerLocationEnd ( ) { if ( content ! = null ) { String [ ] parts = content . trim ( ) . split ( \" <STR_LIT:U+002C> \" ) ; if ( parts . length ! = <NUM_LIT:2> & & parts . length ! = <NUM_LIT:3> ) { return ; }", "gt": "longitude = parts [ 0 ] ;", "repo": "OpenTracks", "task_id": "OpenTracks/258"}
{"input": "<s> private void onTrackSegmentStart ( ) { locationList . clear ( ) ; whenList . clear ( ) ; trackpointTypeList . clear ( ) ; sensorSpeedList . clear ( ) ; sensorDistanceList . clear ( ) ; sensorHeartRateList . clear ( ) ; sensorCadenceList . clear ( ) ; sensorPowerList . clear ( ) ;", "gt": "altitudeGainList . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/259"}
{"input": "<s> private void onFileEnd ( ) {", "gt": "trackImporter . addMarkers ( markers ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/261"}
{"input": "<s> @ NonNull public List < Track . Id > importFile ( Uri fileUri ) throws IOException { List < Track . Id > trackIds = findAndParseKmlFile ( fileUri ) ; List < Track . Id > trackIdsWithImages = new ArrayList < > ( ) ; for ( Track . Id trackId : trackIds ) { if ( copyKmzImages ( fileUri , trackId ) ) { trackIdsWithImages . add ( trackId ) ; deleteOrphanImages ( trackId ) ; } else {", "gt": "return new ArrayList < > ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/262"}
{"input": "<s> void finish ( ) { if ( track ! = null ) {", "gt": "finishTrack ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/266"}
{"input": "<s> private String getInternalPhotoUrl ( @ NonNull Track . Id trackId , @ NonNull String externalPhotoUrl ) { String importFileName = KmzTrackImporter . importNameForFilename ( externalPhotoUrl ) ; File file = MarkerUtils . buildInternalPhotoFile ( context , trackId , Uri . parse ( importFileName ) ) ; if ( file ! = null ) {", "gt": "Uri photoUri = FileUtils . getUriForFile ( context , file ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/267"}
{"input": "<s> @ NonNull public List < Track . Id > importFile ( Context context , Uri uri ) throws ImportParserException , ImportAlreadyExistsException , IOException { try ( InputStream inputStream = context . getContentResolver ( ) . openInputStream ( uri ) ) {", "gt": "return importFile ( inputStream ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/268"}
{"input": "<s> protected void execute ( TrackRecordingService service ) { RecordingData recordingData = service . getRecordingDataObservable ( ) . getValue ( ) ; Track . Id trackId = null ; if ( recordingData ! = null & & recordingData . track ( ) ! = null ) { trackId = recordingData . track ( ) . getId ( ) ; }", "gt": "service . endCurrentTrack ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/277"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { AtmosphericPressure value = parseEnvironmentalSensing ( characteristic ) ; if ( value = = null )", "gt": "return ;", "repo": "OpenTracks", "task_id": "OpenTracks/280"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { Pair < WheelData , BluetoothHandlerCyclingCadence . CrankData > data = parseCyclingCrankAndWheel ( address , sensorName , characteristic ) ; if ( data . first ! = null ) {", "gt": "observer . onChange ( new Raw < > ( data . first ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/282"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { Data cyclingPower = parseCyclingPower ( characteristic ) ; if ( cyclingPower ! = null ) {", "gt": "observer . onChange ( new Raw < > ( cyclingPower ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/283"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { HeartRate heartRate = parseHeartRate ( characteristic ) ; if ( heartRate ! = null ) {", "gt": "observer . onChange ( new Raw < > ( heartRate ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/284"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) {", "gt": "Data data = parseRunningSpeedAndCadence ( sensorName , characteristic ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/285"}
{"input": "<s> public static BluetoothAdapter getAdapter ( Context context ) { BluetoothManager bluetoothManager = ( BluetoothManager ) context . getSystemService ( Context . BLUETOOTH_SERVICE ) ; if ( bluetoothManager = = null ) { Log . i ( TAG , \" <STR_LIT> \" ) ;", "gt": "return null ;", "repo": "OpenTracks", "task_id": "OpenTracks/288"}
{"input": "<s> public void start ( Context context , Handler handler ) { this . context = context ;", "gt": "this . handler = handler ;", "repo": "OpenTracks", "task_id": "OpenTracks/292"}
{"input": "<s> private void onDisconnect ( ) { if ( driver = = null ) return ;", "gt": "driver . disconnect ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/294"}
{"input": "<s> public final void add ( Raw < Input > current ) {", "gt": "computeValue ( current ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/296"}
{"input": "<s> @ Override public void reset ( ) { if ( value ! = null ) {", "gt": "value = new Data ( value . distance , Distance . of ( 0 ) , value . speed ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/299"}
{"input": "<s> @ Override public void reset ( ) { if ( value ! = null ) {", "gt": "value = new Data ( value . speed , value . cadence , Distance . of ( 0 ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/302"}
{"input": "<s> @ Override public void onConnect ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . add ( aggregator ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/308"}
{"input": "<s> @ Override public void onChange ( Raw < ? > data ) {", "gt": "sensorDataSet . update ( data ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/309"}
{"input": "<s> @ Override public void onDisconnect ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . add ( aggregator ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/310"}
{"input": "<s> @ Override public void onRemove ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . remove ( aggregator ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/311"}
{"input": "<s> public void stop ( Context context ) { bluetoothSensorManager . stop ( context ) ; bluetoothSensorManager = null ; altitudeSumManager . stop ( context ) ;", "gt": "altitudeSumManager = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/312"}
{"input": "<s> public SensorDataSet fill ( TrackPoint trackPoint ) {", "gt": "sensorDataSet . fillTrackPoint ( trackPoint ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/313"}
{"input": "<s> public void reset ( ) { if ( bluetoothSensorManager = = null | | altitudeSumManager = = null ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/314"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , @ Nullable String key ) { if ( gpsManager ! = null ) { gpsManager . onSharedPreferenceChanged ( sharedPreferences , key ) ;", "gt": "bluetoothSensorManager . onSharedPreferenceChanged ( sharedPreferences , key ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/315"}
{"input": "<s> public static long diff ( long a , long b , final long UINT_MAX ) { if ( a < 0 | | b < 0 ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } if ( a > UINT_MAX | | b > UINT_MAX ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; }", "gt": "if ( a > = b ) {", "repo": "OpenTracks", "task_id": "OpenTracks/316"}
{"input": "<s> @ Override public void onStart ( String utteranceId ) { int result = audioManager . requestAudioFocus ( audioFocusChangeListener , AUDIO_STREAM , AudioManager . AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK ) ; if ( result = = AudioManager . AUDIOFOCUS_REQUEST_FAILED ) {", "gt": "Log . w ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/318"}
{"input": "<s> @ Override public void onDone ( String utteranceId ) { int result = audioManager . abandonAudioFocus ( audioFocusChangeListener ) ; if ( result = = AudioManager . AUDIOFOCUS_REQUEST_FAILED ) {", "gt": "Log . w ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/319"}
{"input": "<s> public void start ( @ Nullable TrackStatistics trackStatistics ) { voiceAnnouncement = new TTSManager ( context ) ;", "gt": "voiceAnnouncement . start ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/321"}
{"input": "<s> void update ( @ Nullable TrackStatistics trackStatistics ) { this . trackStatistics = trackStatistics ;", "gt": "updateNextDuration ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/322"}
{"input": "<s> private boolean shouldNotAnnounce ( ) { if ( voiceAnnouncement = = null ) { Log . e ( TAG , \" <STR_LIT> \" ) ; return true ; } if ( ! PreferencesUtils . shouldVoiceAnnouncementOnDeviceSpeaker ( ) & & MediaRouter . getInstance ( context ) . getSelectedRoute ( ) . isDeviceSpeaker ( ) ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/323"}
{"input": "<s> public void stop ( ) { if ( voiceAnnouncement ! = null ) { voiceAnnouncement . stop ( ) ;", "gt": "voiceAnnouncement = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/325"}
{"input": "<s> public void setFrequency ( Duration frequency ) {", "gt": "this . totalTimeFrequency = frequency ;", "repo": "OpenTracks", "task_id": "OpenTracks/326"}
{"input": "<s> public void setFrequency ( Distance frequency ) {", "gt": "this . distanceFrequency = frequency ;", "repo": "OpenTracks", "task_id": "OpenTracks/327"}
{"input": "<s> @ SuppressWarnings ( { \" <STR_LIT> \" } ) public void stop ( Context context ) { if ( isStarted ( ) ) { LocationManagerCompat . removeUpdates ( locationManager , this ) ; } locationManager = null ; this . context = null ;", "gt": "handler = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/333"}
{"input": "<s> public void stop ( ) { stopTimer ( ) ; client . onGpsStatusChanged ( GpsStatusValue . GPS_NONE ) ;", "gt": "client = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/334"}
{"input": "<s> public void onNewTrackPoint ( @ NonNull final TrackPoint trackPoint ) {", "gt": "lastTrackPoint = trackPoint ;", "repo": "OpenTracks", "task_id": "OpenTracks/336"}
{"input": "<s> public void onGpsEnabled ( ) { if ( gpsStatus = = GpsStatusValue . GPS_ENABLED ) { return ; } LocationManager locationManager = ( LocationManager ) context . getSystemService ( Context . LOCATION_SERVICE ) ; if ( locationManager ! = null & & locationManager . isProviderEnabled ( LocationManager . GPS_PROVIDER ) ) { setGpsStatus ( GpsStatusValue . GPS_ENABLED ) ;", "gt": "scheduleTimer ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/338"}
{"input": "<s> private void setGpsStatus ( GpsStatusValue current ) { gpsStatus = current ; if ( client ! = null ) {", "gt": "client . onGpsStatusChanged ( current ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/340"}
{"input": "<s> private void scheduleTimer ( ) {", "gt": "handler . removeCallbacks ( gpsStatusTimer ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/341"}
{"input": "<s> public synchronized void start ( @ NonNull Context context , @ NonNull Handler handler ) {", "gt": "this . context = context ;", "repo": "OpenTracks", "task_id": "OpenTracks/343"}
{"input": "<s> public void stop ( ) {", "gt": "sensorManager . stop ( context ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/345"}
{"input": "<s> public synchronized TrackPoint createSegmentEnd ( ) { TrackPoint segmentEnd = TrackPoint . createSegmentEndWithTime ( createNow ( ) ) ; addSensorData ( segmentEnd ) ;", "gt": "reset ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/347"}
{"input": "<s> public synchronized TrackPoint createIdle ( ) { TrackPoint idle = new TrackPoint ( TrackPoint . Type . IDLE , createNow ( ) ) ; addSensorData ( idle ) ;", "gt": "reset ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/348"}
{"input": "<s> void endCurrentTrack ( ) { TrackPoint segmentEnd = trackPointCreator . createSegmentEnd ( ) ;", "gt": "insertTrackPoint ( segmentEnd , true ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/355"}
{"input": "<s> @ VisibleForTesting ( otherwise = VisibleForTesting . PACKAGE_PRIVATE ) public void onIdle ( ) { Log . d ( TAG , \" <STR_LIT> \" ) ;", "gt": "onNewTrackPoint ( trackPointCreator . createIdle ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/356"}
{"input": "<s> private void startRecording ( ) { handler . postDelayed ( updateRecordingData , RECORDING_DATA_UPDATE_INTERVAL . toMillis ( ) ) ;", "gt": "startSensors ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/362"}
{"input": "<s> public void tryStartSensors ( ) { if ( isSensorStarted ( ) ) return ;", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/363"}
{"input": "<s> private void updateRecordingStatus ( RecordingStatus status ) { Log . i ( TAG , \" <STR_LIT> \" + recordingStatus + \" <STR_LIT> \" + status ) ;", "gt": "recordingStatus = status ;", "repo": "OpenTracks", "task_id": "OpenTracks/369"}
{"input": "<s> @ Override public void onServiceDisconnected ( ComponentName className ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/372"}
{"input": "<s> public void unbindAndStop ( Context context ) {", "gt": "unbind ( context ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/375"}
{"input": "<s> private void setTrackRecordingService ( TrackRecordingService value ) { trackRecordingService = value ; if ( value ! = null ) {", "gt": "callback . onConnected ( value , this ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/376"}
{"input": "<s> public void stopRecording ( @ NonNull Context context ) { if ( trackRecordingService = = null ) { Log . e ( TAG , \" <STR_LIT> \" ) ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/377"}
{"input": "<s> void updateContent ( String content ) {", "gt": "notificationBuilder . setSubText ( content ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/379"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( PreferencesUtils . isKey ( R . string . stats_units_key , key ) ) {", "gt": "setUnitSystem ( PreferencesUtils . getUnitSystem ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/380"}
{"input": "<s> public void updateUI ( ActivityType activityType ) { updateIcon ( activityType ) ;", "gt": "textView . setText ( getActivity ( ) . getString ( activityType . getLocalizedStringId ( ) ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/385"}
{"input": "<s> private void setValue ( String value ) { final boolean changed = ! TextUtils . equals ( this . value , value ) ; if ( changed | | ! valueSet ) { this . value = value ; valueSet = true ; persistString ( value ) ;", "gt": "if ( changed ) {", "repo": "OpenTracks", "task_id": "OpenTracks/392"}
{"input": "<s> @ Override public void onScanResult ( int callbackType , ScanResult result ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" + result . getDevice ( ) . getName ( ) + \" \" + result ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/393"}
{"input": "<s> @ Override public void onScanFailed ( int errorCode ) { super . onScanFailed ( errorCode ) ; Log . e ( TAG , \" <STR_LIT> \" + errorCode ) ;", "gt": "Toast . makeText ( getContext ( ) , R . string . sensor_could_not_scan , Toast . LENGTH_LONG ) . show ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/394"}
{"input": "<s> @ Override public void onDialogClosed ( boolean positiveResult ) { if ( scanner ! = null ) { scanner . stopScan ( scanCallback ) ; } if ( positiveResult & & selectedEntryIndex > = 0 ) { String value = listAdapter . get ( selectedEntryIndex ) . getAddress ( ) ; BluetoothLeSensorPreference preference = ( BluetoothLeSensorPreference ) getPreference ( ) ;", "gt": "if ( preference . callChangeListener ( value ) ) {", "repo": "OpenTracks", "task_id": "OpenTracks/397"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "bluetoothIcon = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/398"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/400"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/401"}
{"input": "<s> @ Override public void onChooseActivityTypeDone ( ActivityType activityType ) { if ( activityPreferenceDialog ! = null ) {", "gt": "activityPreferenceDialog . updateUI ( activityType ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/402"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "super . onStart ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/403"}
{"input": "<s> public static void invalidatePreference ( @ NonNull Preference preference ) { boolean isEnabled = preference . isEnabled ( ) ;", "gt": "preference . setVisible ( ! isEnabled ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/404"}
{"input": "<s> @ Override public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { addPreferencesFromResource ( R . xml . settings_import_export ) ; setExportTrackFileFormatOptions ( ) ;", "gt": "setExportDirectorySummary ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/405"}
{"input": "<s> void check ( ) { int lastVersion = PreferencesUtils . getInt ( R . string . prefs_last_version_key , 0 ) ; if ( version > lastVersion ) {", "gt": "onUpgrade ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/409"}
{"input": "<s> private void upgradeFrom0to1 ( ) { String preferenceValue = PreferencesUtils . getString ( R . string . stats_custom_layouts_key , \" \" ) ; if ( preferenceValue . isEmpty ( ) ) {", "gt": "PreferencesUtils . setString ( R . string . stats_custom_layouts_key , PreferencesUtils . buildDefaultLayout ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/411"}
{"input": "<s> public static boolean isKey ( int [ ] keyIds , String key ) { for ( int keyId : keyIds ) { if ( isKey ( keyId , key ) ) {", "gt": "return true ;", "repo": "OpenTracks", "task_id": "OpenTracks/414"}
{"input": "<s> @ VisibleForTesting public static void setString ( int keyId , String value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putString ( getKey ( keyId ) , value ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/417"}
{"input": "<s> @ VisibleForTesting public static void setBoolean ( int keyId , Boolean value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putBoolean ( getKey ( keyId ) , value ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/418"}
{"input": "<s> static void setInt ( int keyId , int value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putInt ( getKey ( keyId ) , value ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/419"}
{"input": "<s> public static void applyDefaultUnit ( ) { if ( getString ( R . string . stats_units_key , \" \" ) . equals ( \" \" ) ) { if ( ! Locale . US . equals ( Locale . getDefault ( ) ) ) { setUnit ( UnitSystem . METRIC ) ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/421"}
{"input": "<s> public static Duration getVoiceAnnouncementFrequency ( ) { final int DEFAULT = Integer . parseInt ( resources . getString ( R . string . voice_announcement_frequency_default ) ) ;", "gt": "int value = getInt ( R . string . voice_announcement_frequency_key , DEFAULT ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/431"}
{"input": "<s> public static Duration getIdleDurationTimeout ( ) { final int DEFAULT = Integer . parseInt ( resources . getString ( R . string . idle_duration_default ) ) ;", "gt": "int value = getInt ( R . string . idle_duration_key , DEFAULT ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/437"}
{"input": "<s> public static TrackFilenameGenerator getTrackFileformatGenerator ( ) { String DEFAULT = resources . getString ( R . string . export_filename_format_default ) ; TrackFilenameGenerator generator = new TrackFilenameGenerator ( getString ( R . string . export_filename_format_key , DEFAULT ) ) ; if ( generator . isValid ( ) ) {", "gt": "return generator ;", "repo": "OpenTracks", "task_id": "OpenTracks/439"}
{"input": "<s> public static int getDefaultNightMode ( ) { final String defaultValue = getKey ( R . string . night_mode_default ) ;", "gt": "final String value = getString ( R . string . night_mode_key , defaultValue ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/442"}
{"input": "<s> @ Override public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) {", "gt": "addPreferencesFromResource ( R . xml . settings_sensors ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/453"}
{"input": "<s> @ Override protected void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( fragment ! = null & & fragment . isAdded ( ) ) {", "gt": "getSupportFragmentManager ( ) . putFragment ( outState , FRAGMENT_KEY , fragment ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/456"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = SettingsBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/457"}
{"input": "<s> @ Override public boolean onMove ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder , @ NonNull RecyclerView . ViewHolder target ) { int fromPosition = viewHolder . getAdapterPosition ( ) ; int toPosition = target . getAdapterPosition ( ) ;", "gt": "recordingLayoutFieldsVisible = adapterFieldsVisible . move ( fromPosition , toPosition ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/461"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/463"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = ActivitySettingsCustomLayoutBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/464"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/466"}
{"input": "<s> @ Override protected View getRootView ( ) { PreferencesUtils . getCustomLayout ( ) ;", "gt": "viewBinding = ActivitySettingsCustomLayoutListBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/467"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . custom_layout_edit , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/468"}
{"input": "<s> @ Override public void onSettingsCustomLayoutProfileClicked ( @ NonNull RecordingLayout recordingLayout ) { Intent intent = new Intent ( this , SettingsCustomLayoutEditActivity . class ) ;", "gt": "intent . putExtra ( SettingsCustomLayoutEditActivity . EXTRA_LAYOUT , recordingLayout ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/470"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "super . onStart ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/472"}
{"input": "<s> @ Override public void onResume ( ) {", "gt": "super . onResume ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/473"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/474"}
{"input": "<s> @ VisibleForTesting void writeDistance ( Distance distance , StringBuilder builder , int resId , String lineBreak ) { double distanceInKm = distance . toKM ( ) ; double distanceInMi = distance . toMI ( ) ;", "gt": "builder . append ( context . getString ( resId , distanceInKm , distanceInMi ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/477"}
{"input": "<s> @ VisibleForTesting void writeTime ( Duration time , StringBuilder builder , int resId , String lineBreak ) {", "gt": "builder . append ( context . getString ( resId , StringUtils . formatElapsedTime ( time ) ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/478"}
{"input": "<s> @ VisibleForTesting void writeSpeed ( Speed speed , StringBuilder builder , int resId , String lineBreak ) {", "gt": "builder . append ( context . getString ( resId , speed . toKMH ( ) , speed . toMPH ( ) ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/479"}
{"input": "<s> @ VisibleForTesting void writeAltitude ( double altitude_m , StringBuilder builder , int resId , String lineBreak ) { long altitudeInM = Math . round ( altitude_m ) ; long altitudeInFt = Math . round ( Distance . of ( altitude_m ) . toFT ( ) ) ;", "gt": "builder . append ( context . getString ( resId , altitudeInM , altitudeInFt ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/480"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = ActivityShowErrorBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/482"}
{"input": "<s> private void reportBug ( ) { Uri uriUrl ; try { uriUrl = Uri . parse ( String . format ( getString ( R . string . report_issue_link ) , URLEncoder . encode ( viewBinding . textViewError . getText ( ) . toString ( ) , StandardCharsets . UTF_8 . toString ( ) ) ) ) ; } catch ( final UnsupportedEncodingException ignored ) {", "gt": "return ;", "repo": "OpenTracks", "task_id": "OpenTracks/483"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . show_error , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/484"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( final MenuItem item ) { if ( item . getItemId ( ) = = R . id . error_share ) { onClickedShare ( ) ; return true ; } else if ( item . getItemId ( ) = = R . id . error_report ) {", "gt": "reportBug ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/485"}
{"input": "<s> public void reset ( ) {", "gt": "min = Double . POSITIVE_INFINITY ;", "repo": "OpenTracks", "task_id": "OpenTracks/488"}
{"input": "<s> public boolean update ( double value ) { boolean changed = false ; if ( value < min ) { min = value ; changed = true ; } if ( value > max ) {", "gt": "max = value ;", "repo": "OpenTracks", "task_id": "OpenTracks/489"}
{"input": "<s> public void set ( double min , double max ) {", "gt": "this . min = min ;", "repo": "OpenTracks", "task_id": "OpenTracks/490"}
{"input": "<s> public void reset ( ) { startTime = null ; stopTime = null ; setTotalDistance ( Distance . of ( 0 ) ) ; setTotalTime ( Duration . ofSeconds ( 0 ) ) ; setMovingTime ( Duration . ofSeconds ( 0 ) ) ;", "gt": "setMaxSpeed ( Speed . zero ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/491"}
{"input": "<s> public void reset ( Instant startTime ) {", "gt": "reset ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/492"}
{"input": "<s> public void setStartTime ( Instant startTime ) {", "gt": "this . startTime = startTime ;", "repo": "OpenTracks", "task_id": "OpenTracks/493"}
{"input": "<s> public void updateAltitudeExtremities ( Altitude altitude ) { if ( altitude ! = null ) {", "gt": "altitudeExtremities . update ( altitude . toM ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/497"}
{"input": "<s> public void setAverageHeartRate ( HeartRate heartRate ) { if ( heartRate ! = null ) {", "gt": "avgHeartRate = heartRate ;", "repo": "OpenTracks", "task_id": "OpenTracks/498"}
{"input": "<s> public TrackStatistics getTrackStatistics ( ) { TrackStatistics stats = new TrackStatistics ( trackStatistics ) ;", "gt": "stats . merge ( currentSegment ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/502"}
{"input": "<s> private void resetAverageHeartRate ( ) {", "gt": "averageHeartRateBPM = <NUM_LIT:0.0f> ;", "repo": "OpenTracks", "task_id": "OpenTracks/504"}
{"input": "<s> private void updateSpeed ( @ NonNull TrackPoint trackPoint ) { Speed currentSpeed = trackPoint . getSpeed ( ) ; if ( currentSpeed . greaterThan ( currentSegment . getMaxSpeed ( ) ) ) {", "gt": "currentSegment . setMaxSpeed ( currentSpeed ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/505"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/506"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackEditBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/507"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "viewBinding . trackListFabAction . setVisibility ( View . VISIBLE ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/511"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ;", "gt": "this . invalidateOptionsMenu ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/513"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; viewBinding = null ;", "gt": "recordingStatusConnection = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/515"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackListBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/516"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . track_list , menu ) ; searchMenuItem = menu . findItem ( R . id . track_list_search ) ;", "gt": "ActivityUtils . configureSearchWidget ( this , searchMenuItem ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/517"}
{"input": "<s> @ Override public void onBackPressed ( ) { SearchView searchView = ( SearchView ) searchMenuItem . getActionView ( ) ; if ( ! searchView . isIconified ( ) ) { searchView . setIconified ( true ) ; } if ( searchQuery ! = null ) { searchQuery = null ;", "gt": "loadData ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/520"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ; if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) {", "gt": "searchQuery = intent . getStringExtra ( SearchManager . QUERY ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/521"}
{"input": "<s> public void onGpsStatusChanged ( GpsStatusValue newStatus ) {", "gt": "gpsStatusValue = newStatus ;", "repo": "OpenTracks", "task_id": "OpenTracks/523"}
{"input": "<s> private void onRecordingStatusChanged ( RecordingStatus status ) { recordingStatus = status ;", "gt": "setFloatButton ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/525"}
{"input": "<s> @ Override protected void onStart ( ) {", "gt": "super . onStart ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/526"}
{"input": "<s> @ Override protected void onStop ( ) { super . onStop ( ) ;", "gt": "trackRecordingServiceConnection . unbind ( this ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/528"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackRecordedBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/530"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ;", "gt": "setIntent ( intent ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/531"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . track_detail , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/532"}
{"input": "<s> public void startPostponedEnterTransitionWith ( View viewIcon ) {", "gt": "ViewCompat . setTransitionName ( viewIcon , TrackRecordedActivity . VIEW_TRACK_ICON ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/537"}
{"input": "<s> @ Override public void onAttachedToWindow ( ) { setLockscreenPolicy ( ) ; setScreenOnPolicy ( ) ;", "gt": "setFullscreenPolicy ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/538"}
{"input": "<s> @ Override protected void onStart ( ) { super . onStart ( ) ; PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "gt": "trackRecordingServiceConnection . bind ( this ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/541"}
{"input": "<s> @ Override protected void onStop ( ) { super . onStop ( ) ; PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "gt": "trackRecordingServiceConnection . unbind ( this ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/544"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "viewBinding = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/545"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackRecordingBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/546"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . track_record , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/547"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackStoppedBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/553"}
{"input": "<s> void add ( TrackStatistics statistics ) {", "gt": "trackStatistics . merge ( statistics ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/558"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/560"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = AggregatedStatsBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/561"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { ViewHolder viewHolder = ( ViewHolder ) holder ; AggregatedStatistics . AggregatedStatistic aggregatedStatistic = aggregatedStatistics . getItem ( position ) ; String type = aggregatedStatistic . getActivityTypeLocalized ( ) ; if ( ActivityType . findByLocalizedString ( context , type ) . isShowSpeedPreferred ( ) ) {", "gt": "viewHolder . setSpeed ( aggregatedStatistic ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/565"}
{"input": "<s> public void swapData ( AggregatedStatistics aggregatedStatistics ) {", "gt": "this . aggregatedStatistics = aggregatedStatistics ;", "repo": "OpenTracks", "task_id": "OpenTracks/567"}
{"input": "<s> @ Override public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( id ) ;", "gt": "dest . writeString ( value ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/577"}
{"input": "<s> private static boolean isInt ( String value ) { if ( value = = null | | value . isEmpty ( ) ) { return false ; } try { Integer . parseInt ( value ) ;", "gt": "} catch ( NumberFormatException nfe ) {", "repo": "OpenTracks", "task_id": "OpenTracks/580"}
{"input": "<s> @ Override public void writeToParcel ( Parcel parcel , int i ) { parcel . writeString ( key ) ; parcel . writeByte ( ( byte ) ( isVisible ? 1 : 0 ) ) ;", "gt": "parcel . writeByte ( ( byte ) ( isPrimary ? 1 : 0 ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/581"}
{"input": "<s> public void replaceAllFields ( List < DataField > newFields ) {", "gt": "dataFields . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/583"}
{"input": "<s> public void moveField ( int from , int to ) {", "gt": "DataField dataFieldToMove = dataFields . remove ( from ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/585"}
{"input": "<s> @ Override public void writeToParcel ( Parcel parcel , int i ) { parcel . writeString ( name ) ;", "gt": "parcel . writeInt ( columnsPerRow ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/587"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( recordingLayout = = null ) {", "gt": "return 0 ;", "repo": "OpenTracks", "task_id": "OpenTracks/591"}
{"input": "<s> public void swapValues ( RecordingLayout data ) { this . recordingLayout = data ; if ( this . recordingLayout ! = null ) {", "gt": "this . notifyDataSetChanged ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/592"}
{"input": "<s> public RecordingLayout move ( int fromPosition , int toPosition ) { recordingLayout . moveField ( fromPosition , toPosition ) ;", "gt": "notifyItemMoved ( fromPosition , toPosition ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/593"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { SettingsCustomLayoutListAdapter . ViewHolder viewHolder = ( SettingsCustomLayoutListAdapter . ViewHolder ) holder ; RecordingLayout recordingLayout = recordingLayoutList . get ( position ) ;", "gt": "viewHolder . itemView . setTag ( recordingLayout . getName ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/596"}
{"input": "<s> public void reloadLayouts ( ) {", "gt": "recordingLayoutList = PreferencesUtils . getAllCustomLayouts ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/598"}
{"input": "<s> public void removeLayout ( int position ) { recordingLayoutList . remove ( position ) ;", "gt": "PreferencesUtils . updateCustomLayouts ( recordingLayoutList ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/599"}
{"input": "<s> public void restoreItem ( RecordingLayout recordingLayout , int position ) { recordingLayoutList . add ( position , recordingLayout ) ;", "gt": "PreferencesUtils . updateCustomLayouts ( recordingLayoutList ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/600"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/604"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = IntervalListViewBinding . inflate ( inflater , container , false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/605"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/609"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "adapter = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/610"}
{"input": "<s> public Interval getLastInterval ( ) { if ( intervalList . size ( ) = = 1 & & intervalList . get ( 0 ) . getDistance ( ) . lessThan ( distanceInterval ) ) { return null ; } for ( int i = intervalList . size ( ) - 1 ; i > = 0 ; i - - ) { if ( intervalList . get ( i ) . getDistance ( ) . greaterOrEqualThan ( distanceInterval ) ) {", "gt": "return this . intervalList . get ( i ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/614"}
{"input": "<s> public List < IntervalStatistics . Interval > swapData ( List < IntervalStatistics . Interval > data , UnitSystem unitSystem , boolean isReportSpeed ) { this . unitSystem = unitSystem ; this . isReportSpeed = isReportSpeed ; intervalList = data ;", "gt": "if ( data ! = null ) {", "repo": "OpenTracks", "task_id": "OpenTracks/617"}
{"input": "<s> @ Override protected void onCleared ( ) { super . onCleared ( ) ; if ( trackPointsTableObserver ! = null ) { contentResolver . unregisterContentObserver ( trackPointsTableObserver ) ; trackPointsTableObserver = null ; } if ( handlerThread ! = null ) {", "gt": "handlerThread . getLooper ( ) . quit ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/618"}
{"input": "<s> public void onPause ( ) { if ( trackPointsTableObserver ! = null ) {", "gt": "contentResolver . unregisterContentObserver ( trackPointsTableObserver ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/620"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerDetailActivityBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/625"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/630"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/631"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "markerId = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/632"}
{"input": "<s> @ Override public void setMenuVisibility ( boolean menuVisible ) { super . setMenuVisibility ( menuVisible ) ; if ( isResumed ( ) ) { if ( menuVisible ) { updateUi ( ) ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/633"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . marker_detail , menu ) ; shareMarkerImageMenuItem = menu . findItem ( R . id . marker_detail_share ) ;", "gt": "updateMarker ( false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/634"}
{"input": "<s> private void updateMenuItems ( ) {", "gt": "if ( shareMarkerImageMenuItem ! = null )", "repo": "OpenTracks", "task_id": "OpenTracks/635"}
{"input": "<s> private void updateMarker ( boolean refresh ) { if ( refresh | | marker = = null ) { marker = contentProviderUtils . getMarker ( markerId ) ; if ( marker = = null ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/636"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerEditBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/638"}
{"input": "<s> private Marker . Id createNewMarker ( TrackRecordingService trackRecordingService ) { try { Marker . Id marker = trackRecordingService . insertMarker ( \" \" , \" \" , \" \" , null ) ; if ( marker = = null ) { Toast . makeText ( this , R . string . marker_add_error , Toast . LENGTH_LONG ) . show ( ) ; return null ; } return marker ;", "gt": "} catch ( IllegalStateException e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/639"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; trackId = null ;", "gt": "viewBinding = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/640"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( item . getItemId ( ) = = R . id . marker_edit_insert_photo ) { createMarkerWithPicture ( ) ; return true ; } if ( item . getItemId ( ) = = R . id . marker_edit_insert_gallery_img ) {", "gt": "createMarkerWithGalleryImage ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/643"}
{"input": "<s> private void deletePhoto ( Marker marker ) { if ( marker . hasPhoto ( ) ) {", "gt": "deletePhoto ( marker . getPhotoURI ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/651"}
{"input": "<s> @ Override protected void onStart ( ) {", "gt": "super . onStart ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/655"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; trackRecordingServiceConnection . bind ( this ) ;", "gt": "this . invalidateOptionsMenu ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/656"}
{"input": "<s> @ Override protected void onStop ( ) {", "gt": "super . onStop ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/657"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; viewBinding = null ;", "gt": "adapter = null ;", "repo": "OpenTracks", "task_id": "OpenTracks/658"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerListBinding . inflate ( getLayoutInflater ( ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/659"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( trackId ! = null & & item . getItemId ( ) = = R . id . marker_list_insert_marker ) { Intent intent = IntentUtils . newIntent ( this , MarkerEditActivity . class ) . putExtra ( MarkerEditActivity . EXTRA_TRACK_ID , trackId ) ;", "gt": "startActivity ( intent ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/662"}
{"input": "<s> @ Override public void onBackPressed ( ) { SearchView searchView = ( SearchView ) searchMenuItem . getActionView ( ) ; if ( ! searchView . isIconified ( ) ) { searchView . setIconified ( true ) ; } if ( searchQuery ! = null ) { searchQuery = null ;", "gt": "loadData ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/663"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ; if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) {", "gt": "searchQuery = intent . getStringExtra ( SearchManager . QUERY ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/664"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) {", "gt": "ViewHolder viewHolder = ( ViewHolder ) holder ;", "repo": "OpenTracks", "task_id": "OpenTracks/666"}
{"input": "<s> public void swapData ( List < Marker > markers ) {", "gt": "this . markers = markers ;", "repo": "OpenTracks", "task_id": "OpenTracks/668"}
{"input": "<s> @ Override public boolean onCreateActionMode ( ActionMode actionMode , Menu menu ) {", "gt": "actionMode . getMenuInflater ( ) . inflate ( R . menu . list_context_menu , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/669"}
{"input": "<s> @ Override public boolean onPrepareActionMode ( ActionMode actionMode , Menu menu ) { selectionMode = true ;", "gt": "actionModeCallback . onPrepare ( menu , null , getCheckedIds ( ) , true ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/670"}
{"input": "<s> @ Override public void onDestroyActionMode ( ActionMode actionMode ) { selectionMode = false ;", "gt": "setAllSelected ( false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/672"}
{"input": "<s> private long [ ] getCheckedIds ( ) { List < Long > ids = new ArrayList < > ( ) ; for ( int i = 0 ; i < selection . size ( ) ; i + + ) { if ( selection . valueAt ( i ) ) {", "gt": "ids . add ( ( long ) selection . keyAt ( i ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/674"}
{"input": "<s> public void setSelected ( boolean isSelected ) {", "gt": "selection . put ( ( int ) getId ( ) , isSelected ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/675"}
{"input": "<s> @ Override public boolean onLongClick ( View view ) { setSelected ( ! view . isActivated ( ) ) ; if ( ! selectionMode ) { actionMode = context . startSupportActionMode ( MarkerListAdapter . this ) ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/677"}
{"input": "<s> public static File getPhotoFileIfExists ( Context context , Track . Id trackId , Uri uri ) { if ( uri = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } String filename = uri . getLastPathSegment ( ) ; if ( filename = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } File dir = FileUtils . getPhotoDir ( context , trackId ) ; File file = new File ( dir , filename ) ;", "gt": "if ( ! file . exists ( ) ) {", "repo": "OpenTracks", "task_id": "OpenTracks/679"}
{"input": "<s> @ Nullable public static File buildInternalPhotoFile ( Context context , Track . Id trackId , @ NonNull Uri fileNameUri ) { if ( fileNameUri = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } String filename = fileNameUri . getLastPathSegment ( ) ; if ( filename = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ;", "gt": "return null ;", "repo": "OpenTracks", "task_id": "OpenTracks/680"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { ViewHolder viewHolder = ( ViewHolder ) holder ;", "gt": "cursor . moveToPosition ( position ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/682"}
{"input": "<s> public void swapData ( Cursor cursor ) {", "gt": "this . cursor = cursor ;", "repo": "OpenTracks", "task_id": "OpenTracks/684"}
{"input": "<s> @ Override public boolean onCreateActionMode ( ActionMode mode , Menu menu ) {", "gt": "mode . getMenuInflater ( ) . inflate ( R . menu . list_context_menu , menu ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/685"}
{"input": "<s> @ Override public boolean onPrepareActionMode ( ActionMode mode , Menu menu ) { selectionMode = true ;", "gt": "actionModeCallback . onPrepare ( menu , null , getCheckedIds ( ) , true ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/686"}
{"input": "<s> @ Override public void onDestroyActionMode ( ActionMode mode ) { selectionMode = false ;", "gt": "setAllSelected ( false ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/688"}
{"input": "<s> private long [ ] getCheckedIds ( ) { List < Long > ids = new ArrayList < > ( ) ; for ( int i = 0 ; i < selection . size ( ) ; i + + ) { if ( selection . valueAt ( i ) ) {", "gt": "ids . add ( ( long ) selection . keyAt ( i ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/689"}
{"input": "<s> public void setSelected ( boolean isSelected ) {", "gt": "selection . put ( ( int ) getId ( ) , isSelected ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/690"}
{"input": "<s> @ Override public boolean onLongClick ( View v ) { setSelected ( ! view . isActivated ( ) ) ; if ( ! selectionMode ) { actionMode = context . startSupportActionMode ( TrackListAdapter . this ) ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/691"}
{"input": "<s> protected void publishResults ( CharSequence constraint , FilterResults results ) { if ( ArrayAdapterFilterDisabled . this . getCount ( ) > 0 ) {", "gt": "notifyDataSetChanged ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/693"}
{"input": "<s> public void shutdown ( ) {", "gt": "enqueueObjects . clear ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/694"}
{"input": "<s> private boolean preExecute ( T object ) { synchronized ( enqueueObjects ) { if ( ! enqueueObjects . contains ( object ) ) { enqueueObjects . add ( object ) ; return true ;", "gt": "} else {", "repo": "OpenTracks", "task_id": "OpenTracks/696"}
{"input": "<s> private void postExecute ( T object ) { synchronized ( enqueueObjects ) {", "gt": "enqueueObjects . remove ( object ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/697"}
{"input": "<s> public static int dpToPx ( Context context , int dp ) {", "gt": "float density = context . getResources ( ) . getDisplayMetrics ( ) . density ;", "repo": "OpenTracks", "task_id": "OpenTracks/701"}
{"input": "<s> @ Override public void onScrollStateChanged ( AbsListView view , int scrollState ) { if ( scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_IDLE | | scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_FLING | | scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_TOUCH_SCROLL ) { if ( from > = 0 & & to > = 0 ) { for ( int i = from ; i < to ; i + + ) { View viewChild = view . getChildAt ( i - from ) ;", "gt": "visibleViewsListener . onViewVisible ( viewChild , i ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/702"}
{"input": "<s> @ Override public void onScroll ( AbsListView view , int firstVisibleItem , int visibleItemCount , int totalItemCount ) {", "gt": "from = firstVisibleItem ;", "repo": "OpenTracks", "task_id": "OpenTracks/703"}
{"input": "<s> public static int getFontSizeSmallInPx ( Context context ) { TypedArray typedArray = context . obtainStyledAttributes ( com . google . android . material . R . style . TextAppearance_MaterialComponents_Body2 , new int [ ] { android . R . attr . textSize } ) ; int fontSize = typedArray . getDimensionPixelSize ( 0 , <NUM_LIT:12> ) ;", "gt": "typedArray . recycle ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/707"}
{"input": "<s> public static int getFontSizeMediumInPx ( Context context ) { TypedArray typedArray = context . obtainStyledAttributes ( com . google . android . material . R . style . TextAppearance_MaterialComponents_Body1 , new int [ ] { android . R . attr . textSize } ) ; int fontSize = typedArray . getDimensionPixelSize ( 0 , <NUM_LIT:15> ) ;", "gt": "typedArray . recycle ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/708"}
{"input": "<s> public static EGM2008Correction createCorrection ( Context context , Location location ) throws IOException { Indices indices = getIndices ( location ) ; try ( DataInputStream dataInputStream = new DataInputStream ( context . getResources ( ) . openRawResource ( EGM2008_5_DATA ) ) ) {", "gt": "return new EGM2008Correction ( indices , dataInputStream ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/711"}
{"input": "<s> @ VisibleForTesting static int getUndulationRaw ( DataInputStream dataInputStream , Indices indices ) throws IOException { dataInputStream . reset ( ) ;", "gt": "int absoluteIndex = indices . getAbsoluteIndex ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/712"}
{"input": "<s> @ Override public void onExportError ( ExportTask unused , String errorMessage ) { Intent intent = new Intent ( context , SettingsActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ;", "gt": "intent . putExtra ( SettingsActivity . EXTRAS_EXPORT_ERROR_MESSAGE , errorMessage ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/715"}
{"input": "<s> private static Uri getExportDocumentFileUri ( Context context , String exportFileName , TrackFileFormat trackFileFormat , DocumentFile directory ) { Uri exportDocumentFileUri = findFile ( context , directory . getUri ( ) , exportFileName ) ; if ( exportDocumentFileUri = = null ) { final DocumentFile file = directory . createFile ( trackFileFormat . getMimeType ( ) , exportFileName ) ; if ( file ! = null ) {", "gt": "exportDocumentFileUri = file . getUri ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/717"}
{"input": "<s> public static File getPhotoDir ( Context context , Track . Id trackId ) { File photoDirectory = new File ( getPhotoDir ( context ) , \" \" + trackId . id ( ) ) ;", "gt": "photoDirectory . mkdirs ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/718"}
{"input": "<s> public static void copy ( FileDescriptor src , File dst ) { try ( FileChannel in = new FileInputStream ( src ) . getChannel ( ) ; FileChannel out = new FileOutputStream ( dst ) . getChannel ( ) ) { in . transferTo ( 0 , in . size ( ) , out ) ;", "gt": "} catch ( Exception e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/723"}
{"input": "<s> public static void deleteDirectoryRecurse ( File file ) { if ( file ! = null & & file . exists ( ) & & file . isDirectory ( ) ) { for ( File child : file . listFiles ( ) ) { deleteDirectoryRecurse ( child ) ; }", "gt": "file . delete ( ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/724"}
{"input": "<s> public static ArrayList < DocumentFile > getFiles ( DocumentFile file ) { ArrayList < DocumentFile > files = new ArrayList < > ( ) ; if ( ! file . isDirectory ( ) ) { files . add ( file ) ; return files ; } for ( DocumentFile candidate : file . listFiles ( ) ) { if ( ! candidate . isDirectory ( ) ) { files . add ( candidate ) ; } else {", "gt": "files . addAll ( getFiles ( candidate ) ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/725"}
{"input": "<s> public static DocumentFile toDocumentFile ( Context context , Uri directoryUri ) { if ( directoryUri = = null ) { return null ; } try { return DocumentFile . fromTreeUri ( context . getApplicationContext ( ) , directoryUri ) ;", "gt": "} catch ( Exception e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/730"}
{"input": "<s> public void requestPermissionsIfNeeded ( Context context , ActivityResultCaller caller , @ Nullable Runnable onGranted , @ Nullable RejectedCallback onRejected ) { if ( ! hasPermission ( context ) ) {", "gt": "requestPermission ( caller , onGranted , onRejected ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/731"}
{"input": "<s> public static String formatElapsedTimeWithHour ( @ NonNull Duration time ) {", "gt": "String value = formatElapsedTime ( time ) ;", "repo": "OpenTracks", "task_id": "OpenTracks/733"}
{"input": "<s> public static OffsetDateTime parseTime ( String xmlDateTime ) { try { TemporalAccessor t = DateTimeFormatter . ISO_DATE_TIME . parseBest ( xmlDateTime , ZonedDateTime : : from , LocalDateTime : : from ) ; if ( t instanceof LocalDateTime localDateTime ) { Log . w ( TAG , \" <STR_LIT> \" ) ; t = localDateTime . atZone ( ZoneOffset . UTC ) ; } return OffsetDateTime . from ( t ) ;", "gt": "} catch ( Exception e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/740"}
{"input": "<s> public static String getAppVersionName ( Context context ) { try { PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( BuildConfig . APPLICATION_ID , PackageManager . GET_META_DATA ) ; return pi . versionName + \" <STR_LIT:/> \" + BuildConfig . VERSION_NAME_FULL ;", "gt": "} catch ( NameNotFoundException e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/743"}
{"input": "<s> public static Long getAppVersionCode ( Context context ) { try { PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( BuildConfig . APPLICATION_ID , PackageManager . GET_META_DATA ) ; return PackageInfoCompat . getLongVersionCode ( pi ) ;", "gt": "} catch ( NameNotFoundException e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/744"}
{"input": "<s> public void initialize ( Context context , LayoutInflater inflater ) {", "gt": "this . context = context ;", "repo": "OpenTracks", "task_id": "OpenTracks/761"}
{"input": "<s> fun preProcess ( ) { items = photoRepository . getAll ( ) elementsToProcess = items . size", "gt": "openZipFile ( )", "repo": "Photok", "task_id": "Photok/1"}
{"input": "<s> private fun openZipFile ( ) {", "gt": "val out = app . contentResolver . openOutputStream ( uri )", "repo": "Photok", "task_id": "Photok/4"}
{"input": "<s> private fun writeZipEntry ( fileName : String , inputStream : InputStream ? ) : Boolean { inputStream ? : return false return try { val entry = ZipEntry ( fileName ) zipOutputStream . putNextEntry ( entry ) inputStream . copyTo ( zipOutputStream ) zipOutputStream . closeEntry ( ) true", "gt": "} catch ( e : IOException ) {", "repo": "Photok", "task_id": "Photok/5"}
{"input": "<s> override fun bind ( binding : DialogRestoreBackupBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/7"}
{"input": "<s> private fun createStream ( uri : Uri ) : ZipInputStream ? { val inputStream = try { app . contentResolver . openInputStream ( uri ) } catch ( e : IOException ) { Timber . d ( \" <STR_LIT> \" ) null } return if ( inputStream ! = null ) {", "gt": "ZipInputStream ( BufferedInputStream ( inputStream ) )", "repo": "Photok", "task_id": "Photok/10"}
{"input": "<s> fun onUnlock ( ) { binding . unlockBackupWrongPasswordWarning . hide ( ) viewModel . verifyPassword ( backupPassword ) { if ( it ) { dismiss ( ) onUnlockSuccess ( viewModel . password )", "gt": "} else {", "repo": "Photok", "task_id": "Photok/12"}
{"input": "<s> override fun bind ( binding : DialogBackupUnlockBinding ) { super . bind ( binding )", "gt": "binding . viewModel = viewModel", "repo": "Photok", "task_id": "Photok/13"}
{"input": "<s> fun millisToFormattedDateConverter ( millis : Long ) : String ? {", "gt": "val date = Date ( millis )", "repo": "Photok", "task_id": "Photok/18"}
{"input": "<s> @ Composable fun GalleryScreen ( viewModel : GalleryViewModel ) { val uiState by viewModel . uiState . collectAsState ( ) MaterialTheme { when ( uiState ) { is GalleryUiState . Empty - > GalleryPlaceholder { viewModel . handleUiEvent ( it ) } is GalleryUiState . Content - > GalleryContent ( uiState as GalleryUiState . Content ,", "gt": "handleUiEvent = { viewModel . handleUiEvent ( it ) }", "repo": "Photok", "task_id": "Photok/28"}
{"input": "<s> @ Preview @ Composable private fun ImportButtonPreview ( ) { ImportButton (", "gt": "onClick = { }", "repo": "Photok", "task_id": "Photok/30"}
{"input": "<s> private fun resolveUrisFromIntent ( data : Intent ) : MutableList < Uri > { val uris = mutableListOf < Uri > ( ) if ( data . clipData ! = null ) { val count = data . clipData ! ! . itemCount for ( i in 0 until count ) { val uri = data . clipData ! ! . getItemAt ( i ) . uri uris . add ( uri ) } } </s", "gt": "private fun resolveUrisFromIntent ( data : Intent ) : MutableList < Uri > { val uris = mutableListOf < Uri > ( ) if ( data . clipData ! = null ) { val count = data . clipData ! ! . itemCount for ( i in 0 until count ) { val uri = data . clipData ! ! . getItemAt ( i ) . uri uris . add ( uri ) } }", "repo": "Photok", "task_id": "Photok/48"}
{"input": "<s> fun processItem ( item : Uri ) { val success = photoRepository . safeImportPhoto ( item ) if ( ! success ) {", "gt": "failuresOccurred = true", "repo": "Photok", "task_id": "Photok/50"}
{"input": "<s> fun processItem ( item : Photo ) { val result = photoRepository . exportPhoto ( item ) if ( ! result ) {", "gt": "failuresOccurred = true", "repo": "Photok", "task_id": "Photok/52"}
{"input": "<s> override fun bind ( binding : FragmentImageViewerBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/63"}
{"input": "<s> fun consumeSharedUris ( ) {", "gt": "consumedUrisFromStore . value = sharedUrisStore . getUris ( )", "repo": "Photok", "task_id": "Photok/75"}
{"input": "<s> private fun internalRenameFile ( currentFileName : String , newFileName : String ) : Boolean { val currentFile = app . getFileStreamPath ( currentFileName )", "gt": "val newFile = app . getFileStreamPath ( newFileName )", "repo": "Photok", "task_id": "Photok/82"}
{"input": "<s> fun openChangelog ( ) {", "gt": "val url = getString ( R . string . news_changelog_url )", "repo": "Photok", "task_id": "Photok/97"}
{"input": "<s> @ MainThread override fun observe ( owner : LifecycleOwner , observer : Observer < in T > ) { if ( hasActiveObservers ( ) ) { Timber . w ( \" <STR_LIT> \" ) } super . observe ( owner ) {", "gt": "if ( pending . compareAndSet ( true , false ) ) {", "repo": "Photok", "task_id": "Photok/108"}
{"input": "<s> @ MainThread override fun setValue ( value : T ? ) {", "gt": "pending . set ( true )", "repo": "Photok", "task_id": "Photok/109"}
{"input": "<s> fun getFileSize ( contentResolver : ContentResolver , uri : Uri ) : Long { contentResolver . openFileDescriptor ( uri , \" <STR_LIT> \" ) ? . use {", "gt": "return it . statSize", "repo": "Photok", "task_id": "Photok/111"}
{"input": "<s> private fun genSecKey ( password : String ) : SecretKeySpec { val md = MessageDigest . getInstance ( SHA_256 )", "gt": "val bytes = md . digest ( password . toByteArray ( StandardCharsets . UTF_8 ) )", "repo": "Photok", "task_id": "Photok/132"}
{"input": "<s> fun storePassword ( password : String ) {", "gt": "val hashedPw = BCrypt . hashpw ( password , BCrypt . gensalt ( ) )", "repo": "Photok", "task_id": "Photok/134"}
{"input": "<s> private fun getIntFromString ( key : String , default : Int ) : Int {", "gt": "val stringValue = preferences . getString ( key , default . toString ( ) )", "repo": "Photok", "task_id": "Photok/135"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { view . systemBarsPadding ( ) super . onViewCreated ( view , savedInstanceState ) setHasOptionsMenu ( true ) setToolbar ( binding . aboutToolbar )", "gt": "binding . aboutToolbar . setNavigationOnClickListener {", "repo": "Photok", "task_id": "Photok/140"}
{"input": "<s> override fun bind ( binding : DialogChangePasswordBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/145"}
{"input": "<s> private fun loadIconCredits ( ) : Spanned { val bytes = context . assets . open ( ICON_CREDITS_FILE ) . readBytes ( )", "gt": "val rawText = String ( bytes )", "repo": "Photok", "task_id": "Photok/152"}
{"input": "<s> override fun bind ( binding : DialogToggleAppVisibilityBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/159"}
{"input": "<s> private fun setupSecurityCategory ( ) { addActionTo ( KEY_ACTION_CHANGE_PASSWORD ) { ChangePasswordDialog ( ) . show ( childFragmentManager ) } addActionTo ( KEY_ACTION_HIDE_APP ) {", "gt": "ToggleAppVisibilityDialog ( ) . show ( childFragmentManager )", "repo": "Photok", "task_id": "Photok/165"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) binding . root . systemBarsPadding ( ) binding . ossToolbar . setNavigationOnClickListener {", "gt": "findNavController ( ) . navigateUp ( )", "repo": "Photok", "task_id": "Photok/171"}
{"input": "<s> override fun bind ( binding : DialogBottomSheetProcessBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/187"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "binding = DataBindingUtil . setContentView ( this , layout )", "repo": "Photok", "task_id": "Photok/194"}
{"input": "<s> fun message ( message : String ) : Builder {", "gt": "chooser . message = message", "repo": "Photok", "task_id": "Photok/200"}
{"input": "<s> fun mimeType ( mimeType : String ) : Builder {", "gt": "chooser . mimeType = mimeType", "repo": "Photok", "task_id": "Photok/201"}
{"input": "<s> fun requestCode ( requestCode : Int ) : Builder {", "gt": "chooser . requestCode = requestCode", "repo": "Photok", "task_id": "Photok/202"}
{"input": "<s> fun permissionCode ( permissionCode : Int ) : Builder {", "gt": "chooser . permissionRequestCode = permissionCode", "repo": "Photok", "task_id": "Photok/203"}
{"input": "<s> fun permission ( permission : String ) : Builder {", "gt": "chooser . permission = permission", "repo": "Photok", "task_id": "Photok/204"}
{"input": "<s> fun allowMultiple ( ) : Builder {", "gt": "chooser . allowMultiple = true", "repo": "Photok", "task_id": "Photok/205"}
{"input": "<s> override fun bind ( binding : FragmentUnlockBinding ) { super . bind ( binding )", "gt": "binding . context = this", "repo": "Photok", "task_id": "Photok/215"}
{"input": "<s> override fun updateServerUrl ( newAddress : String ? ) { if ( newAddress ! = null ) { hostConfig . address = newAddress", "gt": "buildRetrofit ( )", "repo": "habitica-android", "task_id": "habitica-android/2"}
{"input": "<s> fun retrieveUser ( withTasks : Boolean ) : User ? { val user = process { apiService . getUser ( ) } val tasks = getTasks ( )", "gt": "user ? . tasks = tasks", "repo": "habitica-android", "task_id": "habitica-android/7"}
{"input": "<s> fun changeClass ( className : String ? ) : User ? { return process { if ( className ! = null ) { apiService . changeClass ( className )", "gt": "} else {", "repo": "habitica-android", "task_id": "habitica-android/15"}
{"input": "<s> fun validatePurchase ( request : PurchaseValidationRequest ) : PurchaseValidationResult ? { return if ( lastPurchaseValidation = = null | | Date ( ) . time - lastPurchaseValidation . time > <NUM_LIT> ) {", "gt": "return process { apiService . validatePurchase ( request ) }", "repo": "habitica-android", "task_id": "habitica-android/16"}
{"input": "<s> fun retrieveChallenge ( challengeID : String ) : Challenge ? { val challenge = apiClient . getChallenge ( challengeID ) ? : return null", "gt": "localRepository . save ( challenge )", "repo": "habitica-android", "task_id": "habitica-android/28"}
{"input": "<s> private suspend fun addChallengeTasks ( challenge : Challenge , addedTaskList : List < Task > ) { when { addedTaskList . count ( ) = = 1 - > apiClient . createChallengeTask ( challenge . id ? : \" \" , addedTaskList [ 0 ] )", "gt": "addedTaskList . count ( ) > 1 - > apiClient . createChallengeTasks ( challenge . id ? : \" \" , addedTaskList )", "repo": "habitica-android", "task_id": "habitica-android/30"}
{"input": "<s> fun feedPet ( pet : Pet , food : Food ) : FeedResponse ? { val feedResponse = apiClient . feedPet ( pet . key , food . key ) ? : return null", "gt": "localRepository . feedPet ( food . key , pet . key , feedResponse . value ? : 0 , currentUserID )", "repo": "habitica-android", "task_id": "habitica-android/41"}
{"input": "<s> fun inviteToQuest ( quest : QuestContent ) : Quest ? { val newQuest = apiClient . inviteToQuest ( \" <STR_LIT> \" , quest . key )", "gt": "localRepository . changeOwnedCount ( \" <STR_LIT> \" , quest . key , currentUserID , - 1 )", "repo": "habitica-android", "task_id": "habitica-android/43"}
{"input": "<s> fun transferGroupOwnership ( groupID : String , userID : String ) : Group ? { val group = localRepository . getGroup ( groupID ) . first ( ) ? . let { localRepository . getUnmanagedCopy ( it ) }", "gt": "group ? . leaderID = userID", "repo": "habitica-android", "task_id": "habitica-android/47"}
{"input": "<s> fun retrieveGroupChat ( groupId : String ) : List < ChatMessage > ? { val messages = apiClient . listGroupChat ( groupId )", "gt": "messages ? . forEach { it . groupId = groupId }", "repo": "habitica-android", "task_id": "habitica-android/49"}
{"input": "<s> fun retrieveInboxConversations ( ) : List < InboxConversation > ? { val conversations = apiClient . retrieveInboxConversations ( ) ? : return null", "gt": "localRepository . saveInboxConversations ( currentUserID , conversations )", "repo": "habitica-android", "task_id": "habitica-android/61"}
{"input": "<s> fun postPrivateMessage ( recipientId : String , messageObject : HashMap < String , String > ) : List < ChatMessage > ? {", "gt": "apiClient . postPrivateMessage ( messageObject )", "repo": "habitica-android", "task_id": "habitica-android/62"}
{"input": "<s> fun retrievePartyMembers ( id : String , includeAllPublicFields : Boolean ) : List < Member > ? { val members = apiClient . getGroupMembers ( id , includeAllPublicFields )", "gt": "members ? . let { localRepository . savePartyMembers ( id , it ) }", "repo": "habitica-android", "task_id": "habitica-android/64"}
{"input": "<s> fun retrieveTasks ( userId : String , tasksOrder : TasksOrder ) : TaskList ? { val tasks = apiClient . getTasks ( ) ? : return null", "gt": "this . localRepository . saveTasks ( userId , tasksOrder , tasks )", "repo": "habitica-android", "task_id": "habitica-android/80"}
{"input": "<s> fun retrieveTasks ( userId : String , tasksOrder : TasksOrder , dueDate : Date ) : TaskList ? { val formatter = SimpleDateFormat ( \" <STR_LIT> \" , Locale . US ) val taskList = this . apiClient . getTasks ( \" <STR_LIT> \" , formatter . format ( dueDate ) ) ? : return null", "gt": "this . localRepository . saveTasks ( userId , tasksOrder , taskList )", "repo": "habitica-android", "task_id": "habitica-android/82"}
{"input": "<s> fun updateTaskPosition ( taskType : TaskType , taskID : String , newPosition : Int ) : List < String > ? { val positions = apiClient . postTaskNewPosition ( taskID , newPosition ) ? : return null", "gt": "localRepository . updateTaskPositions ( positions )", "repo": "habitica-android", "task_id": "habitica-android/87"}
{"input": "<s> fun updateLanguage ( languageCode : String ) : User ? { val user = updateUser ( \" <STR_LIT> \" , languageCode )", "gt": "apiClient . languageCode = languageCode", "repo": "habitica-android", "task_id": "habitica-android/100"}
{"input": "<s> fun retrieveAchievements ( ) : List < Achievement > ? { val achievements = apiClient . getMemberAchievements ( currentUserID ) ? : return null", "gt": "localRepository . save ( achievements )", "repo": "habitica-android", "task_id": "habitica-android/102"}
{"input": "<s> fun retrieveTeamPlans ( ) : List < TeamPlan > ? { val teams = apiClient . getTeamPlans ( ) ? : return null teams . forEach { it . userID = currentUserID }", "gt": "localRepository . save ( teams )", "repo": "habitica-android", "task_id": "habitica-android/103"}
{"input": "<s> override fun getTeamPlan ( teamID : String ) : Flow < Group ? > { return localRepository . getTeamPlan ( teamID ) . map {", "gt": "it ? : retrieveTeamPlan ( teamID )", "repo": "habitica-android", "task_id": "habitica-android/104"}
{"input": "<s> < T : BaseObject > getUnmanagedCopy ( managedObject : T ) : T { return if ( managedObject is RealmObject & & managedObject . isManaged & & managedObject . isValid ) {", "gt": "realm . copyFromRealm ( managedObject )", "repo": "habitica-android", "task_id": "habitica-android/107"}
{"input": "<s> < T : BaseObject > getUnmanagedCopy ( list : List < T > ) : List < T > {", "gt": "if ( isClosed ) { return emptyList ( ) }", "repo": "habitica-android", "task_id": "habitica-android/108"}
{"input": "<s> private fun < T : RealmModel > copy ( realm : Realm , obj : T ) { try { realm . insertOrUpdate ( obj )", "gt": "} catch ( _ : java . lang . IllegalArgumentException ) {", "repo": "habitica-android", "task_id": "habitica-android/109"}
{"input": "<s> < Item > > {", "gt": "return realm . where ( itemClass ) . findAll ( ) . toFlow ( )", "repo": "habitica-android", "task_id": "habitica-android/131"}
{"input": "<s> < Item > > {", "gt": "return realm . where ( itemClass ) . ` in ` ( \" <STR_LIT> \" , keys ) . findAll ( ) . toFlow ( )", "repo": "habitica-android", "task_id": "habitica-android/132"}
{"input": "<s> override fun save ( items : Items , userID : String ) { val user = realm . where ( User : : class . java ) . equalTo ( \" <STR_LIT> \" , userID ) . findFirst ( ) ? : return", "gt": "items . setItemTypes ( )", "repo": "habitica-android", "task_id": "habitica-android/144"}
{"input": "<s> override fun removeQuest ( partyId : String ) { val party = realm . where ( Group : : class . java ) . equalTo ( \" <STR_LIT> \" , partyId ) . findFirst ( ) if ( party ! = null ) {", "gt": "executeTransaction { party . quest = null }", "repo": "habitica-android", "task_id": "habitica-android/158"}
{"input": "<s> private fun removeCompletedTodos ( userID : String , onlineTaskList : MutableCollection < Task > ) { val localTasks = realm . where ( Task : : class . java ) . equalTo ( \" <STR_LIT:ID> \" , userID ) . equalTo ( \" <STR_LIT> \" , TaskType . TODO . value ) . equalTo ( \" <STR_LIT> \" , true ) . findAll ( ) . createSnapshot ( ) val tasksToDelete = localTasks . filterNot { onlineTaskList . contains ( it ) } executeTransaction {", "gt": "for ( localTask in tasksToDelete ) {", "repo": "habitica-android", "task_id": "habitica-android/171"}
{"input": "<s> private fun invertFools ( ) { / * AvatarView . postProcessors [ AvatarView . LayerType . PET ] = { if ( Date ( ) . after ( eventEnd ) ) { null", "gt": "} else {", "repo": "habitica-android", "task_id": "habitica-android/229"}
{"input": "<s> override fun configureMainIntent ( intent : Intent ) { super . configureMainIntent ( intent )", "gt": "intent . putExtra ( \" <STR_LIT> \" , data ? . get ( \" <STR_LIT> \" ) )", "repo": "habitica-android", "task_id": "habitica-android/235"}
{"input": "<s> override fun configureMainIntent ( intent : Intent ) { super . configureMainIntent ( intent )", "gt": "intent . putExtra ( \" <STR_LIT> \" , data ? . get ( \" <STR_LIT> \" ) )", "repo": "habitica-android", "task_id": "habitica-android/237"}
{"input": "<s> private fun processedPurchase ( purchase : Purchase ) { MainScope ( ) . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userViewModel . userRepository . retrieveUser ( false , true )", "repo": "habitica-android", "task_id": "habitica-android/253"}
{"input": "<s> fun addGift ( sku : String , userID : String , username : String ) {", "gt": "pendingGifts [ sku ] = Triple ( Date ( ) , userID , username )", "repo": "habitica-android", "task_id": "habitica-android/256"}
{"input": "<s> private fun withOrdinal ( day : Int ) : String { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) { val formatter = MessageFormat ( \" <STR_LIT> \" , Locale . getDefault ( ) )", "gt": "formatter . format ( arrayOf ( day ) )", "repo": "habitica-android", "task_id": "habitica-android/266"}
{"input": "<s> fun hasGifImage ( ) : Boolean {", "gt": "val gifImageKeys = listOf ( \" <STR_LIT> \" )", "repo": "habitica-android", "task_id": "habitica-android/283"}
{"input": "<s> fun parseMarkdown ( ) {", "gt": "parsedText = MarkdownParser . parseMarkdown ( text )", "repo": "habitica-android", "task_id": "habitica-android/325"}
{"input": "<s> private fun openActivity ( event : MessageEvent , activityClass : Class < * > ) { val intent = Intent ( this , activityClass ) intent . flags = Intent . FLAG_ACTIVITY_NEW_TASK", "gt": "startActivity ( intent )", "repo": "habitica-android", "task_id": "habitica-android/345"}
{"input": "<s> private fun showToast ( text : Spannable ) {", "gt": "val toast = Toast . makeText ( context , text , Toast . LENGTH_LONG )", "repo": "habitica-android", "task_id": "habitica-android/349"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "isActivityVisible = true", "repo": "habitica-android", "task_id": "habitica-android/362"}
{"input": "<s> override fun onPause ( ) {", "gt": "isActivityVisible = false", "repo": "habitica-android", "task_id": "habitica-android/363"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "destroyed = true", "repo": "habitica-android", "task_id": "habitica-android/366"}
{"input": "<s> private suspend fun purchaseWithGems ( ) { inventoryRepository . purchaseItem ( \" <STR_LIT> \" , \" <STR_LIT> \" , 1 )", "gt": "userRepository . retrieveUser ( false , true )", "repo": "habitica-android", "task_id": "habitica-android/370"}
{"input": "<s> private fun createTask ( taskName : String ) : Task { val t = Task ( )", "gt": "t . id = \" <STR_LIT> \"", "repo": "habitica-android", "task_id": "habitica-android/381"}
{"input": "<s> private fun getFloorValueString ( ` val ` : Float , roundDown : Boolean ) : String { return if ( roundDown ) { floor ( ` val ` . toDouble ( ) ) . toString ( ) } else { if ( ` val ` . toDouble ( ) = = <NUM_LIT:0.0> ) { \" <STR_LIT:0> \"", "gt": "} else {", "repo": "habitica-android", "task_id": "habitica-android/402"}
{"input": "<s> override fun onSupportNavigateUp ( ) : Boolean { finish ( )", "gt": "dismissKeyboard ( )", "repo": "habitica-android", "task_id": "habitica-android/421"}
{"input": "<s> private fun storeSelectedTaskId ( selectedTaskId : String ? ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit {", "gt": "putString ( \" <STR_LIT> \" , selectedTaskId )", "repo": "habitica-android", "task_id": "habitica-android/431"}
{"input": "<s> private fun toggleRegistering ( ) {", "gt": "this . isRegistering = ( ! this . isRegistering )", "repo": "habitica-android", "task_id": "habitica-android/443"}
{"input": "<s> override fun onSupportNavigateUp ( ) : Boolean { hideKeyboard ( )", "gt": "onBackPressed ( )", "repo": "habitica-android", "task_id": "habitica-android/454"}
{"input": "<s> private fun setupBottomnavigationLayoutListener ( ) { binding . content . bottomNavigation . viewTreeObserver . addOnGlobalLayoutListener { if ( binding . content . bottomNavigation . visibility = = View . VISIBLE ) { snackbarContainer . setPadding ( 0 , 0 , 0 , binding . content . bottomNavigation . barHeight + <NUM_LIT> pToPx ( this ) )", "gt": "} else {", "repo": "habitica-android", "task_id": "habitica-android/456"}
{"input": "<s> override fun startActivity ( intent : Intent ? ) {", "gt": "resumeFromActivity = true", "repo": "habitica-android", "task_id": "habitica-android/462"}
{"input": "<s> override fun startActivity ( intent : Intent ? , options : Bundle ? ) {", "gt": "resumeFromActivity = true", "repo": "habitica-android", "task_id": "habitica-android/463"}
{"input": "<s> private fun updateWidgets ( ) { updateWidget ( AvatarStatsWidgetProvider : : class . java ) updateWidget ( TodoListWidgetProvider : : class . java )", "gt": "updateWidget ( DailiesWidgetProvider : : class . java )", "repo": "habitica-android", "task_id": "habitica-android/464"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "setupToolbar ( findViewById ( R . id . toolbar ) )", "repo": "habitica-android", "task_id": "habitica-android/506"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "setupToolbar ( findViewById ( R . id . toolbar ) )", "repo": "habitica-android", "task_id": "habitica-android/507"}
{"input": "<s> private fun disableEditingForUneditableFieldsInChallengeTask ( ) { binding . textEditText . isEnabled = false binding . taskDifficultyButtons . isEnabled = false", "gt": "binding . taskSchedulingControls . isEnabled = false", "repo": "habitica-android", "task_id": "habitica-android/518"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets", "repo": "habitica-android", "task_id": "habitica-android/544"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts", "repo": "habitica-android", "task_id": "habitica-android/548"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts", "repo": "habitica-android", "task_id": "habitica-android/553"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets", "repo": "habitica-android", "task_id": "habitica-android/554"}
{"input": "<s> private fun getGearItemCount ( ) : Int { return if ( selectedGearCategory = = \" \" ) { 0 } else { val selectedCategory : ShopCategory ? = getSelectedShopCategory ( ) if ( selectedCategory ! = null ) { if ( selectedCategory . items . size = = 0 ) { <NUM_LIT:2> } else { selectedCategory . items . size + 1 }", "gt": "} else {", "repo": "habitica-android", "task_id": "habitica-android/558"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets", "repo": "habitica-android", "task_id": "habitica-android/563"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts", "repo": "habitica-android", "task_id": "habitica-android/564"}
{"input": "<s> fun setEggs ( eggs : Map < String , Egg > ) {", "gt": "this . eggs = eggs", "repo": "habitica-android", "task_id": "habitica-android/568"}
{"input": "<s> fun updateItem ( item : HabiticaDrawerItem ) { val position = getItemPosition ( item . identifier )", "gt": "items [ position ] = item", "repo": "habitica-android", "task_id": "habitica-android/570"}
{"input": "<s> override fun onClick ( v : View ) { val position = this . bindingAdapterPosition", "gt": "checkedList [ position ] = ! checkedList [ position ]", "repo": "habitica-android", "task_id": "habitica-android/576"}
{"input": "<s> override fun bind ( data : Task , position : Int , displayMode : String ) {", "gt": "this . newTask = data", "repo": "habitica-android", "task_id": "habitica-android/594"}
{"input": "<s> override fun onBindViewHolder ( holder : GroupMemberViewHolder , position : Int ) { holder . bind ( data [ position ] , leaderID , null ) holder . onClickEvent = {", "gt": "onUserClicked ? . invoke ( data [ position ] . id )", "repo": "habitica-android", "task_id": "habitica-android/604"}
{"input": "<s> private fun openGooglePlay ( ) { val intent = Intent ( Intent . ACTION_VIEW )", "gt": "intent . data = \" <STR_LIT> \" . toUri ( )", "repo": "habitica-android", "task_id": "habitica-android/620"}
{"input": "<s> private fun openBrowserLink ( url : String ) { val uriUrl = url . toUri ( )", "gt": "val launchBrowser = Intent ( Intent . ACTION_VIEW , uriUrl )", "repo": "habitica-android", "task_id": "habitica-android/622"}
{"input": "<s>", "gt": "onRefresh ( )", "repo": "habitica-android", "task_id": "habitica-android/623"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putBoolean ( \" <STR_LIT> \" , useGridLayout )", "repo": "habitica-android", "task_id": "habitica-android/625"}
{"input": "<s> override fun onCreateView ( inflater : LayoutInflater , container : ViewGroup ? , savedInstanceState : Bundle ? ) : View ? { Analytics . sendNavigationEvent ( this . javaClass . simpleName )", "gt": "binding = createBinding ( inflater , container )", "repo": "habitica-android", "task_id": "habitica-android/628"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "habitica-android", "task_id": "habitica-android/630"}
{"input": "<s> override fun onDestroy ( ) { try { tutorialRepository . close ( )", "gt": "} catch ( exception : UninitializedPropertyAccessException ) { }", "repo": "habitica-android", "task_id": "habitica-android/631"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null", "repo": "habitica-android", "task_id": "habitica-android/634"}
{"input": "<s> override fun onDestroy ( ) { try { tutorialRepository . close ( )", "gt": "} catch ( exception : UninitializedPropertyAccessException ) { }", "repo": "habitica-android", "task_id": "habitica-android/635"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/649"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/653"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "showCustomization = false", "repo": "habitica-android", "task_id": "habitica-android/657"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/659"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( false , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/694"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( false , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/700"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/707"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . updateUser ( \" <STR_LIT> \" , false )", "repo": "habitica-android", "task_id": "habitica-android/721"}
{"input": "<s> override fun onPause ( ) {", "gt": "preferenceManager . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this )", "repo": "habitica-android", "task_id": "habitica-android/724"}
{"input": "<s> override fun onPause ( ) {", "gt": "preferenceManager . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this )", "repo": "habitica-android", "task_id": "habitica-android/744"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "val promo = configManager . activePromo ( )", "repo": "habitica-android", "task_id": "habitica-android/755"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "binding ? . giftButton ? . setOnClickListener { sendGift ( ) }", "repo": "habitica-android", "task_id": "habitica-android/767"}
{"input": "<s> private fun refresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . retrieveUser ( false , true )", "repo": "habitica-android", "task_id": "habitica-android/773"}
{"input": "<s> fun setUser ( newUser : User ) { user = newUser", "gt": "this . updateSubscriptionInfo ( )", "repo": "habitica-android", "task_id": "habitica-android/778"}
{"input": "<s> private fun refresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( withTasks = false , forced = true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/781"}
{"input": "<s> fun setUser ( newUser : User ) { user = newUser", "gt": "this . updateSubscriptionInfo ( )", "repo": "habitica-android", "task_id": "habitica-android/786"}
{"input": "<s> fun setTitleImage ( image : Drawable ? ) {", "gt": "this . titleImage = image", "repo": "habitica-android", "task_id": "habitica-android/796"}
{"input": "<s> fun setSubtitle ( text : String ? ) {", "gt": "this . subtitle = text", "repo": "habitica-android", "task_id": "habitica-android/797"}
{"input": "<s> fun setTitle ( text : String ? ) {", "gt": "this . title = text", "repo": "habitica-android", "task_id": "habitica-android/798"}
{"input": "<s> fun setDescription ( text : String ? ) {", "gt": "this . description = text", "repo": "habitica-android", "task_id": "habitica-android/799"}
{"input": "<s> fun setBackgroundColor ( color : Int ) {", "gt": "this . backgroundColor = color", "repo": "habitica-android", "task_id": "habitica-android/800"}
{"input": "<s> override fun onRefresh ( ) { nextPageToLoad = 0", "gt": "loadedAllData = false", "repo": "habitica-android", "task_id": "habitica-android/819"}
{"input": "<s> private fun changeFilter ( challengeFilterOptions : ChallengeFilterOptions ) {", "gt": "filterOptions = challengeFilterOptions", "repo": "habitica-android", "task_id": "habitica-android/821"}
{"input": "<s> fun setNavigatedToFragment ( ) {", "gt": "navigatedOnceToFragment = true", "repo": "habitica-android", "task_id": "habitica-android/830"}
{"input": "<s> private fun sendChatMessage ( chatText : String ) { viewModel . postGroupChat ( chatText ,", "gt": "{ binding ? . recyclerView ? . scrollToPosition ( 0 ) }", "repo": "habitica-android", "task_id": "habitica-android/834"}
{"input": "<s> private fun retrieveMessages ( ) { lifecycleScope . launchCatching { socialRepository . retrieveInboxConversations ( )", "gt": "binding ? . inboxRefreshLayout ? . isRefreshing = false", "repo": "habitica-android", "task_id": "habitica-android/857"}
{"input": "<s> override fun onRefresh ( ) {", "gt": "binding ? . inboxRefreshLayout ? . isRefreshing = true", "repo": "habitica-android", "task_id": "habitica-android/858"}
{"input": "<s> private fun onQuestAccept ( ) {", "gt": "HapticFeedbackManager . tap ( requireView ( ) )", "repo": "habitica-android", "task_id": "habitica-android/866"}
{"input": "<s> private fun onQuestReject ( ) {", "gt": "HapticFeedbackManager . tap ( requireView ( ) )", "repo": "habitica-android", "task_id": "habitica-android/867"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "context ? . let { recyclerAdapter ? . taskDisplayMode = configManager . taskDisplayMode ( it ) }", "repo": "habitica-android", "task_id": "habitica-android/908"}
{"input": "<s> private fun endChangeAnimation ( infoList : MutableList < ChangeInfo > , item : RecyclerView . ViewHolder ) { for ( i in infoList . indices . reversed ( ) ) { val changeInfo = infoList [ i ] if ( endChangeAnimationIfNecessary ( changeInfo , item ) ) { if ( changeInfo . oldHolder = = null & & changeInfo . newHolder = = null ) {", "gt": "infoList . remove ( changeInfo )", "repo": "habitica-android", "task_id": "habitica-android/928"}
{"input": "<s> private fun onPlusButtonClicked ( ) {", "gt": "if ( task ? . up ! = true ) return", "repo": "habitica-android", "task_id": "habitica-android/963"}
{"input": "<s> private fun onMinusButtonClicked ( ) {", "gt": "if ( task ? . down ! = true ) return", "repo": "habitica-android", "task_id": "habitica-android/964"}
{"input": "<s> fun updateRecipientID ( newID : String ? ) {", "gt": "recipientID = newID", "repo": "habitica-android", "task_id": "habitica-android/981"}
{"input": "<s> @ Composable fun BuffIcon ( buffed : Boolean ? , modifier : Modifier = Modifier ) { if ( buffed = = true ) {", "gt": "Image ( HabiticaIconsHelper . imageOfBuffIcon ( ) . asImageBitmap ( ) , null , modifier = modifier )", "repo": "habitica-android", "task_id": "habitica-android/1023"}
{"input": "<s> override fun show ( ) { super . show ( ) if ( ! hasAllItems ) {", "gt": "Analytics . sendNavigationEvent ( \" <STR_LIT> \" )", "repo": "habitica-android", "task_id": "habitica-android/1050"}
{"input": "<s> fun setTotalOffset ( offset : Int ) {", "gt": "totalDragOffset = offset", "repo": "habitica-android", "task_id": "habitica-android/1058"}
{"input": "<s> fun removeViewDraggable ( child : View ) { if ( this = = = child . parent ) { draggableChildren . remove ( indexOfChild ( child ) )", "gt": "draggableChildren . put ( indexOfChild ( child ) , DraggableChild ( ) )", "repo": "habitica-android", "task_id": "habitica-android/1062"}
{"input": "<s> private fun onTouchEnd ( ) {", "gt": "downY = - 1", "repo": "habitica-android", "task_id": "habitica-android/1068"}
{"input": "<s> private static float [ ] ColorToHSV ( int originalColor ) { float [ ] hsv = new float [ <NUM_LIT:3> ] ;", "gt": "RGBToHSV ( red ( originalColor ) , green ( originalColor ) , blue ( originalColor ) , hsv ) ;", "repo": "habitica-android", "task_id": "habitica-android/1077"}
{"input": "<s> PaintCodeShadow get ( int color ) { this . color = color ; this . dx = ( float ) <NUM_LIT:0.0> ; this . dy = ( float ) <NUM_LIT:1.0> ; if ( this . radius ! = ( float ) <NUM_LIT:1.0> ) {", "gt": "this . blurMaskFilter = null ;", "repo": "habitica-android", "task_id": "habitica-android/1078"}
{"input": "<s> fun setBackgroundResource ( resourceId : Int ) : HabiticaSnackbar { binding . snackbarView . setBackgroundResource ( resourceId )", "gt": "view . setBackgroundColor ( ContextCompat . getColor ( context , R . color . transparent ) )", "repo": "habitica-android", "task_id": "habitica-android/1139"}
{"input": "<s> fun setMount ( key : String ) {", "gt": "bodyView . loadImage ( \" <STR_LIT> \" )", "repo": "habitica-android", "task_id": "habitica-android/1197"}
{"input": "<s> private fun setTags ( tags : List < Tag > ) {", "gt": "this . tags = repository . getUnmanagedCopy ( tags ) . toMutableList ( )", "repo": "habitica-android", "task_id": "habitica-android/1220"}
{"input": "<s> private fun showDialog ( activity : Activity , userRepository : UserRepository , taskRepository : TaskRepository , tasks : List < Task > ) : YesterdailyDialog { val dialog = YesterdailyDialog ( activity , userRepository , taskRepository , tasks ) dialog . setCancelable ( false ) dialog . setCanceledOnTouchOutside ( false )", "gt": "if ( ! activity . isFinishing ) {", "repo": "habitica-android", "task_id": "habitica-android/1234"}
{"input": "<s> private fun addFormat ( s : String ) { val dateFormat = SimpleDateFormat ( s , Locale . US )", "gt": "dateFormat . timeZone = TimeZone . getTimeZone ( \" <STR_LIT> \" )", "repo": "habitica-android", "task_id": "habitica-android/1239"}
{"input": "<s> private fun getIntListFromJsonArray ( jsonArray : JsonArray ) : List < Int > { val intList = ArrayList < Int > ( ) for ( i in 0 until jsonArray . size ( ) ) {", "gt": "intList . add ( jsonArray . get ( i ) . asInt )", "repo": "habitica-android", "task_id": "habitica-android/1248"}
