{"input": "<s> public static float dp2px ( Resources resources , float dp ) {", "gt": "final float scale = resources . getDisplayMetrics ( ) . density ; \n return dp * scale + <NUM_LIT> ; \n }", "repo": "RedReader", "task_id": "RedReader/0"}
{"input": "<s> public void setIndeterminate ( boolean value ) {", "gt": "indeterminate = value ; \n invalidate ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1"}
{"input": "<s> public void setProgress ( float progress ) { if ( Math . abs ( progress - this . progress ) > <NUM_LIT> ) { this . progress = progress ;", "gt": "invalidate ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/2"}
{"input": "<s> private int measure ( int measureSpec ) { int result ; int mode = MeasureSpec . getMode ( measureSpec ) ; int size = MeasureSpec . getSize ( measureSpec ) ; if ( mode = = MeasureSpec . EXACTLY ) { result = size ; } else { result = min_size ; if ( mode = = MeasureSpec . AT_MOST ) {", "gt": "result = Math . min ( result , size ) ; \n } \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/3"}
{"input": "<s> public int getDelay ( int n ) { delay = - 1 ;", "gt": "if ( ( n > = 0 ) & & ( n < frameCount ) ) { \n delay = frames . elementAt ( n ) . delay ; \n }", "repo": "RedReader", "task_id": "RedReader/4"}
{"input": "<s> public Bitmap getFrame ( int n ) { if ( frameCount < = 0 ) return null ;", "gt": "n = n % frameCount ; \n return frames . elementAt ( n ) . image ; \n }", "repo": "RedReader", "task_id": "RedReader/5"}
{"input": "<s> public int read ( InputStream is ) { init ( ) ; if ( is ! = null ) { in = is ; readHeader ( ) ; if ( ! err ( ) ) { readContents ( ) ; if ( frameCount < 0 ) { status = STATUS_FORMAT_ERROR ; } } } else { status = STATUS_OPEN_ERROR ; } try {", "gt": "is . close ( ) ; \n } catch ( Exception e ) { \n } \n return status ; \n }", "repo": "RedReader", "task_id": "RedReader/6"}
{"input": "<s> protected void init ( ) { status = STATUS_OK ;", "gt": "frameCount = 0 ; \n frames = new Vector < > ( ) ; \n gct = null ; \n lct = null ; \n }", "repo": "RedReader", "task_id": "RedReader/7"}
{"input": "<s> protected int read ( ) { int curByte = 0 ; try { curByte = in . read ( ) ;", "gt": "} catch ( Exception e ) { \n status = STATUS_FORMAT_ERROR ; \n } \n return curByte ; \n }", "repo": "RedReader", "task_id": "RedReader/8"}
{"input": "<s> protected void readHeader ( ) { String id = \" \" ; for ( int i = 0 ; i < <NUM_LIT:6> ; i + + ) { id + = ( char ) read ( ) ; } if ( ! id . startsWith ( \" <STR_LIT> \" ) ) { status = STATUS_FORMAT_ERROR ; return ; } readLSD ( ) ;", "gt": "if ( gctFlag & & ! err ( ) ) { \n gct = readColorTable ( gctSize ) ; \n bgColor = gct [ bgIndex ] ; \n }", "repo": "RedReader", "task_id": "RedReader/10"}
{"input": "<s> protected void resetFrame ( ) { lastDispose = dispose ; lrx = ix ; lry = iy ; lrw = iw ; lrh = ih ; lastBitmap = image ; lastBgColor = bgColor ;", "gt": "dispose = 0 ; \n transparency = false ; \n delay = 0 ; \n lct = null ; \n }", "repo": "RedReader", "task_id": "RedReader/14"}
{"input": "<s> protected void skip ( ) { do {", "gt": "readBlock ( ) ; \n } while ( ( blockSize > 0 ) & & ! err ( ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/15"}
{"input": "<s> public static synchronized RedditAccountManager getInstance ( final Context context ) { if ( singleton = = null ) { singleton = new RedditAccountManager ( context . getApplicationContext ( ) ) ;", "gt": "} \n return singleton ; \n }", "repo": "RedReader", "task_id": "RedReader/17"}
{"input": "<s> @ Override public void onCreate ( final SQLiteDatabase db ) { final String queryString = String . format ( \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" , TABLE , FIELD_USERNAME , FIELD_REFRESH_TOKEN , FIELD_PRIORITY , FIELD_USES_NEW_CLIENT_ID , FIELD_CLIENT_ID ) ;", "gt": "db . execSQL ( queryString ) ; \n addAccount ( getAnon ( ) , db ) ; \n }", "repo": "RedReader", "task_id": "RedReader/18"}
{"input": "<s> public synchronized ArrayList < RedditAccount > getAccounts ( ) { if ( accountsCache = = null ) { final SQLiteDatabase db = getReadableDatabase ( ) ;", "gt": "reloadAccounts ( db ) ; \n db . close ( ) ; \n } \n return new ArrayList < > ( accountsCache ) ; \n }", "repo": "RedReader", "task_id": "RedReader/20"}
{"input": "<s> @ Nullable public RedditAccount getAccount ( @ NonNull final String username ) { if ( \" \" . equals ( username ) ) { return getAnon ( ) ; } final ArrayList < RedditAccount > accounts = getAccounts ( ) ; RedditAccount selectedAccount = null ; for ( final RedditAccount account : accounts ) { if ( ! account . isAnonymous ( ) & & account . username . equalsIgnoreCase ( username ) ) { selectedAccount = account ;", "gt": "break ; \n } \n } \n return selectedAccount ; \n }", "repo": "RedReader", "task_id": "RedReader/21"}
{"input": "<s> public synchronized RedditAccount getDefaultAccount ( ) { if ( defaultAccountCache = = null ) { final SQLiteDatabase db = getReadableDatabase ( ) ;", "gt": "reloadAccounts ( db ) ; \n db . close ( ) ; \n } \n return defaultAccountCache ; \n }", "repo": "RedReader", "task_id": "RedReader/22"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + error ) ; \n revertToWeb ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/27"}
{"input": "<s> @ Override public void onSuccess ( final ImageInfo info ) { Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ;", "gt": "LinkHandler . onLinkClicked ( AlbumListingActivity . this , info . urlOriginal ) ; \n finish ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/28"}
{"input": "<s> @ Override public void onNotAnImage ( ) {", "gt": "Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ; \n revertToWeb ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/29"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/30"}
{"input": "<s> private void revertToWeb ( ) { final Runnable r = ( ) - > { if ( ! mHaveReverted ) { mHaveReverted = true ; LinkHandler . onLinkClicked ( this , mUrl , true ) ; finish ( ) ; } } ; if ( General . isThisUIThread ( ) ) {", "gt": "r . run ( ) ; \n } else { \n AndroidCommon . UI_THREAD_HANDLER . post ( r ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/31"}
{"input": "<s> @ Override public void setTitle ( final CharSequence text ) {", "gt": "super . setTitle ( text ) ; \n mActionbarTitleTextView . apply ( titleView - > titleView . setText ( text ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/32"}
{"input": "<s> public void closeAllExceptMain ( ) {", "gt": "closingAll = true ; \n closeIfNecessary ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/33"}
{"input": "<s> @ NonNull public final ActionBar getSupportActionBarOrThrow ( ) { final ActionBar result = getSupportActionBar ( ) ;", "gt": "if ( result = = null ) { \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/34"}
{"input": "<s> public void setBaseActivityListing ( @ NonNull final View view ) {", "gt": "mContentListing . removeAllViews ( ) ; \n mContentListing . addView ( view ) ; \n }", "repo": "RedReader", "task_id": "RedReader/36"}
{"input": "<s> public void setBaseActivityListing ( final int layoutRes ) {", "gt": "mContentListing . removeAllViews ( ) ; \n getLayoutInflater ( ) . inflate ( layoutRes , mContentListing , true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/37"}
{"input": "<s> public void setBaseActivityOverlay ( @ NonNull final View view ) {", "gt": "mContentOverlay . removeAllViews ( ) ; \n mContentOverlay . addView ( view ) ; \n }", "repo": "RedReader", "task_id": "RedReader/38"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; setOrientationFromPrefs ( ) ;", "gt": "closeIfNecessary ( ) ; \n TorCommon . updateTorStatus ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/39"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n mSharedPreferences . unregisterOnSharedPreferenceChangeListener ( this ) ; \n }", "repo": "RedReader", "task_id": "RedReader/40"}
{"input": "<s> private void closeIfNecessary ( ) { if ( closingAll ) { if ( this instanceof MainActivity ) { closingAll = false ;", "gt": "} else { \n finish ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/41"}
{"input": "<s> public final void startActivityForResultWithCallback ( @ NonNull final Intent intent , @ NonNull final ActivityResultCallback callback ) { final int requestCode = mRequestIdGenerator . incrementAndGet ( ) ;", "gt": "mActivityResultCallbacks . put ( requestCode , callback ) ; \n startActivityForResult ( intent , requestCode ) ; \n }", "repo": "RedReader", "task_id": "RedReader/42"}
{"input": "<s> @ Override protected final void onActivityResult ( final int requestCode , final int resultCode , @ Nullable final Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; final ActivityResultCallback callback = mActivityResultCallbacks . remove ( requestCode ) ;", "gt": "if ( callback = = null ) { \n return ; \n }", "repo": "RedReader", "task_id": "RedReader/43"}
{"input": "<s> public static synchronized void handleGlobalError ( final Context context , final Throwable t ) { if ( t ! = null ) { Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" , t ) ;", "gt": "} \n handleGlobalError ( context , new RRError ( null , null , true , t ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/45"}
{"input": "<s> private static synchronized LinkedList < RRError > getErrors ( ) { final LinkedList < RRError > result = new LinkedList < > ( errors ) ;", "gt": "errors . clear ( ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/47"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : finish ( ) ;", "gt": "return true ; \n default : \n return false ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/48"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( CommentEditActivity . this , error ) ; \n General . safeDismissDialog ( progressDialog ) ; \n }", "repo": "RedReader", "task_id": "RedReader/52"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/53"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) { OptionsMenuUtility . prepare ( this , menu , false , false , true , false , false , controller . isUserCommentListing ( ) , false , controller . isSortable ( ) , false , null , false , true , null , null ) ;", "gt": "if ( mFragment ! = null ) { \n mFragment . onCreateOptionsMenu ( menu ) ; \n }", "repo": "RedReader", "task_id": "RedReader/54"}
{"input": "<s> @ Override protected void doRefresh ( final RefreshableFragment which , final boolean force , final Bundle savedInstanceState ) { mFragment = controller . get ( this , force , savedInstanceState ) ; mFragment . setBaseActivityContent ( this ) ;", "gt": "setTitle ( controller . getCommentListingUrl ( ) . humanReadableName ( this , false ) ) ; \n invalidateOptionsMenu ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/55"}
{"input": "<s> @ Override public void onRefreshComments ( ) {", "gt": "controller . setSession ( null ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/56"}
{"input": "<s> @ Override public void onSortSelected ( final PostCommentSort order ) {", "gt": "controller . setSort ( order ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/58"}
{"input": "<s> @ Override public void onSortSelected ( final UserCommentSort order ) {", "gt": "controller . setSort ( order ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/59"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( mFragment ! = null ) { if ( mFragment . onOptionsItemSelected ( item ) ) {", "gt": "return true ; \n } \n } \n return super . onOptionsItemSelected ( item ) ; \n }", "repo": "RedReader", "task_id": "RedReader/61"}
{"input": "<s> @ Override public void onSessionSelected ( final UUID session , final SessionChangeType type ) {", "gt": "controller . setSession ( session ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/62"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/64"}
{"input": "<s> @ Override public PostCommentSort getSuggestedCommentSort ( ) { if ( mFragment = = null | | mFragment . getPost ( ) = = null ) { return null ;", "gt": "} \n return mFragment . getPost ( ) . src . getSuggestedCommentSort ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/65"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( CommentReplyActivity . this , error ) ; \n General . safeDismissDialog ( progressDialog ) ; \n }", "repo": "RedReader", "task_id": "RedReader/69"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/71"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) & & ! webView . onBackButtonPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/72"}
{"input": "<s> @ Override public void onSuccess ( @ NonNull final AlbumInfo info ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) - > { mAlbumInfo = info ;", "gt": "mAlbumImageIndex = intent . getIntExtra ( \" <STR_LIT> \" , 0 ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/73"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_image_info_failed ) ; \n revertToWeb ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/74"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/77"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/79"}
{"input": "<s> private void openInExternalBrowser ( ) { Log . i ( TAG , \" <STR_LIT> \" ) ; final Runnable r = ( ) - > { LinkHandler . openWebBrowser ( this , Uri . parse ( mUrl ) , false ) ; finish ( ) ; } ; if ( General . isThisUIThread ( ) ) {", "gt": "r . run ( ) ; \n } else { \n AndroidCommon . UI_THREAD_HANDLER . post ( r ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/81"}
{"input": "<s> @ Override public void onPause ( ) { if ( mIsPaused ) { throw new RuntimeException ( ) ; } mIsPaused = true ;", "gt": "super . onPause ( ) ; \n if ( surfaceView ! = null ) { \n surfaceView . onPause ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/82"}
{"input": "<s> @ Override public void onResume ( ) { if ( ! mIsPaused ) { throw new RuntimeException ( ) ; } mIsPaused = false ; super . onResume ( ) ; if ( surfaceView ! = null ) { surfaceView . onResume ( ) ; }", "gt": "for ( final Runnable runnable : mActionsOnResume ) { \n runnable . run ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/83"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ; mIsDestroyed = true ; cancelCacheRequests ( ) ; if ( gifThread ! = null ) { gifThread . stopPlaying ( ) ; }", "gt": "if ( mVideoPlayerWrapper ! = null ) { \n mVideoPlayerWrapper . release ( ) ; \n mVideoPlayerWrapper = null ; \n }", "repo": "RedReader", "task_id": "RedReader/84"}
{"input": "<s> private void cancelCacheRequests ( ) { if ( mImageOrVideoRequest ! = null ) { mImageOrVideoRequest . cancel ( ) ;", "gt": "} \n if ( mAudioRequest ! = null ) { \n mAudioRequest . cancel ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/85"}
{"input": "<s> @ Override public void onHorizontalSwipeEnd ( ) { mSwipeCancelled = false ; if ( mSwipeOverlay ! = null ) {", "gt": "mSwipeOverlay . onSwipeEnd ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/86"}
{"input": "<s> @ Override public void onImageViewDLMOutOfMemory ( ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_oom ) ;", "gt": "revertToWeb ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/87"}
{"input": "<s> @ Override public void onImageViewDLMException ( final Throwable t ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_decode_failed ) ;", "gt": "revertToWeb ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/88"}
{"input": "<s> @ Override public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mImageViewDisplayerManager ! = null ) {", "gt": "mImageViewDisplayerManager . resetTouchState ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/89"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { synchronized ( resultLock ) { if ( ! failed . getAndSet ( true ) ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) - > { final LinearLayout layout = new LinearLayout ( ImageViewActivity . this ) ; final ErrorView errorView = new ErrorView ( ImageViewActivity . this , error ) ; layout . addView ( errorView ) ; General . setLayoutMatchWidthWrapHeight ( errorView ) ;", "gt": "setMainView ( layout ) ; \n } ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/90"}
{"input": "<s> @ Override public void onDataStreamAvailable ( @ NonNull final GenericFactory < SeekableInputStream , IOException > streamFactory , final TimestampUTC timestamp , @ NonNull final UUID session , final boolean fromCache , @ Nullable final String mimetype ) { synchronized ( resultLock ) { if ( audio . get ( ) ! = null | | audioUri = = null ) { onImageStreamReady ( ! fromCache , streamFactory , audio . get ( ) , mimetype , Uri . parse ( uri . toString ( ) ) ) ; } else {", "gt": "video . set ( streamFactory ) ; \n videoMimetype . set ( mimetype ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/93"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { synchronized ( resultLock ) { if ( ! failed . getAndSet ( true ) ) { AndroidCommon . runOnUiThread ( ( ) - > { final LinearLayout layout = new LinearLayout ( ImageViewActivity . this ) ; final ErrorView errorView = new ErrorView ( ImageViewActivity . this , error ) ; layout . addView ( errorView ) ; General . setLayoutMatchWidthWrapHeight ( errorView ) ;", "gt": "setMainView ( layout ) ; \n } ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/94"}
{"input": "<s> @ Override public void onDataStreamAvailable ( @ NonNull final GenericFactory < SeekableInputStream , IOException > streamFactory , final TimestampUTC timestamp , @ NonNull final UUID session , final boolean fromCache , @ Nullable final String mimetype ) { synchronized ( resultLock ) { if ( video . get ( ) ! = null ) { onImageStreamReady ( ! fromCache , video . get ( ) , streamFactory , videoMimetype . get ( ) , Uri . parse ( uri . toString ( ) ) ) ;", "gt": "} else { \n audio . set ( streamFactory ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/95"}
{"input": "<s> @ Override public void onOutOfMemory ( ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_oom ) ; \n revertToWeb ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/98"}
{"input": "<s> @ Override public void onGifInvalid ( ) {", "gt": "General . quickToast ( ImageViewActivity . this , R . string . imageview_invalid_gif ) ; \n revertToWeb ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/99"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/101"}
{"input": "<s> public void cancel ( ) { if ( request ! = null ) {", "gt": "request . cancel ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/103"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/105"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) { if ( inboxType = = InboxType . SENT ) { return false ; } menu . add ( 0 , OPTIONS_MENU_MARK_ALL_AS_READ , 0 , R . string . mark_all_as_read ) ; menu . add ( 0 , OPTIONS_MENU_SHOW_UNREAD_ONLY , 1 , R . string . inbox_unread_only ) ; menu . getItem ( 1 ) . setCheckable ( true ) ;", "gt": "if ( mOnlyShowUnread ) { \n menu . getItem ( 1 ) . setChecked ( true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/106"}
{"input": "<s> private void recreateSubscriptionListener ( ) { final RedditSubredditSubscriptionManager . ListenerContext oldContext = mSubredditSubscriptionListenerContext . getAndSet ( RedditSubredditSubscriptionManager . getSingleton ( this , RedditAccountManager . getInstance ( this ) . getDefaultAccount ( ) ) . addListener ( this ) ) ; if ( oldContext ! = null ) {", "gt": "oldContext . removeListener ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/107"}
{"input": "<s> @ Override public void onItemSelected ( @ Nullable final AdapterView < ? > adapterView , @ Nullable final View view , final int i , final long l ) { final String typeName = typeReturnValues [ destinationType . getSelectedItemPosition ( ) ] ; if ( \" <STR_LIT> \" . equals ( typeName ) ) {", "gt": "editText . setAdapter ( autocompleteAdapter ) ; \n } else { \n editText . setAdapter ( null ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/109"}
{"input": "<s> @ Override public void onRedditAccountChanged ( ) { recreateSubscriptionListener ( ) ;", "gt": "postInvalidateOptionsMenu ( ) ; \n requestRefresh ( RefreshableFragment . ALL , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/111"}
{"input": "<s> @ Override public void onRefreshComments ( ) {", "gt": "commentListingController . setSession ( null ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/113"}
{"input": "<s> @ Override public void onSortSelected ( final PostCommentSort order ) {", "gt": "commentListingController . setSort ( order ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/115"}
{"input": "<s> @ Override public void onSortSelected ( final UserCommentSort order ) {", "gt": "commentListingController . setSort ( order ) ; \n requestRefresh ( RefreshableFragment . COMMENTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/116"}
{"input": "<s> @ Override public void onRefreshPosts ( ) {", "gt": "postListingController . setSession ( null ) ; \n requestRefresh ( RefreshableFragment . POSTS , true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/118"}
{"input": "<s> @ Override public void onSortSelected ( final PostSort order ) {", "gt": "postListingController . setSort ( order ) ; \n requestRefresh ( RefreshableFragment . POSTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/121"}
{"input": "<s> @ Override public void onSubscribe ( ) { if ( postListingFragment ! = null ) {", "gt": "postListingFragment . onSubscribe ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/122"}
{"input": "<s> @ Override public void onUnsubscribe ( ) { if ( postListingFragment ! = null ) {", "gt": "postListingFragment . onUnsubscribe ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/123"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; if ( mainMenuFragment ! = null ) {", "gt": "mainMenuFragment . onUpdateAnnouncement ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/128"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( commentListingFragment ! = null ) { if ( commentListingFragment . onOptionsItemSelected ( item ) ) { return true ; } } switch ( item . getItemId ( ) ) { case android . R . id . home : onBackPressed ( ) ;", "gt": "return true ; \n default : \n return super . onOptionsItemSelected ( item ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/129"}
{"input": "<s> @ Override public void onSessionRefreshSelected ( final SessionChangeType type ) { switch ( type ) { case POSTS : onRefreshPosts ( ) ; break ;", "gt": "case COMMENTS : \n onRefreshComments ( ) ; \n break ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/131"}
{"input": "<s> @ Override public PostSort getPostSort ( ) { if ( postListingController = = null ) { return null ;", "gt": "} \n return postListingController . getSort ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/133"}
{"input": "<s> @ Override public OptionsMenuUtility . Sort getCommentSort ( ) { if ( commentListingController = = null ) { return null ;", "gt": "} \n return commentListingController . getSort ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/134"}
{"input": "<s> @ Override public PostCommentSort getSuggestedCommentSort ( ) { if ( commentListingFragment = = null | | commentListingFragment . getPost ( ) = = null ) { return null ;", "gt": "} \n return commentListingFragment . getPost ( ) . src . getSuggestedCommentSort ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/135"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) { OptionsMenuUtility . prepare ( this , menu , false , false , true , false , false , false , false , false , false , null , false , false , null , null ) ;", "gt": "if ( mFragment ! = null ) { \n mFragment . onCreateOptionsMenu ( menu ) ; \n }", "repo": "RedReader", "task_id": "RedReader/136"}
{"input": "<s> @ Override protected void doRefresh ( final RefreshableFragment which , final boolean force , final Bundle savedInstanceState ) { mFragment = new CommentListingFragment ( this , savedInstanceState , mUrls , null , mSearchString , force ) ;", "gt": "mFragment . setBaseActivityContent ( this ) ; \n setTitle ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/137"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( mFragment ! = null & & mFragment . onOptionsItemSelected ( item ) ) { return true ;", "gt": "} \n return super . onOptionsItemSelected ( item ) ; \n }", "repo": "RedReader", "task_id": "RedReader/139"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/140"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "final CookieManager cookieManager = CookieManager . getInstance ( ) ; \n cookieManager . removeAllCookie ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/141"}
{"input": "<s> @ Override protected void onPause ( ) { super . onPause ( ) ;", "gt": "if ( mWebView ! = null ) { \n mWebView . onPause ( ) ; \n mWebView . pauseTimers ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/143"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ;", "gt": "if ( mWebView ! = null ) { \n mWebView . resumeTimers ( ) ; \n mWebView . onResume ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/144"}
{"input": "<s> public static int handleShowAsActionIfRoom ( final int showAsAction ) { if ( showAsAction = = MenuItem . SHOW_AS_ACTION_IF_ROOM ) { return MenuItem . SHOW_AS_ACTION_ALWAYS ;", "gt": "} \n return showAsAction ; \n }", "repo": "RedReader", "task_id": "RedReader/148"}
{"input": "<s> public static int getOrThrow ( final Map < AppbarItemsPref , Integer > appbarItemsPref , final AppbarItemsPref key ) { final Integer value = appbarItemsPref . get ( key ) ;", "gt": "if ( value = = null ) { \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/149"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "General . showResultDialog ( PMSendActivity . this , error ) ; \n General . safeDismissDialog ( progressDialog ) ; \n }", "repo": "RedReader", "task_id": "RedReader/153"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/155"}
{"input": "<s> @ Override protected void onSaveInstanceState ( @ NonNull final Bundle outState ) { super . onSaveInstanceState ( outState ) ; final UUID session = controller . getSession ( ) ; if ( session ! = null ) { outState . putString ( SAVEDSTATE_SESSION , session . toString ( ) ) ; } final PostSort sort = controller . getSort ( ) ; if ( sort ! = null ) { outState . putString ( SAVEDSTATE_SORT , sort . name ( ) ) ;", "gt": "} \n if ( fragment ! = null ) { \n outState . putBundle ( SAVEDSTATE_FRAGMENT , fragment . onSaveInstanceState ( ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/156"}
{"input": "<s> private void recreateSubscriptionListener ( ) { final RedditSubredditSubscriptionManager . ListenerContext oldContext = mSubredditSubscriptionListenerContext . getAndSet ( RedditSubredditSubscriptionManager . getSingleton ( this , RedditAccountManager . getInstance ( this ) . getDefaultAccount ( ) ) . addListener ( this ) ) ; if ( oldContext ! = null ) {", "gt": "oldContext . removeListener ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/158"}
{"input": "<s> @ Override public void onRedditAccountChanged ( ) { recreateSubscriptionListener ( ) ;", "gt": "postInvalidateOptionsMenu ( ) ; \n requestRefresh ( RefreshableFragment . ALL , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/159"}
{"input": "<s> @ Override public void onRefreshPosts ( ) {", "gt": "controller . setSession ( null ) ; \n requestRefresh ( RefreshableFragment . POSTS , true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/161"}
{"input": "<s> @ Override public void onSortSelected ( final PostSort order ) { controller . setSort ( order ) ;", "gt": "requestRefresh ( RefreshableFragment . POSTS , false ) ; \n invalidateOptionsMenu ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/164"}
{"input": "<s> @ Override public void onSessionSelected ( final UUID session , final SessionChangeType type ) {", "gt": "controller . setSession ( session ) ; \n requestRefresh ( RefreshableFragment . POSTS , false ) ; \n }", "repo": "RedReader", "task_id": "RedReader/168"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/170"}
{"input": "<s> @ Override public void onNotLoggedIn ( ) {", "gt": "General . quickToast ( this , R . string . error_toast_notloggedin ) ; \n finish ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/171"}
{"input": "<s> @ Override public void onContentFragmentSubmissionSuccess ( @ Nullable final String redirectUrl ) { if ( redirectUrl ! = null ) { LinkHandler . onLinkClicked ( this , redirectUrl ) ;", "gt": "} \n finish ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/172"}
{"input": "<s> @ Override public void onContentFragmentFlairRequestError ( @ NonNull final RRError error ) {", "gt": "onBackPressed ( ) ; \n General . showResultDialog ( this , error ) ; \n }", "repo": "RedReader", "task_id": "RedReader/175"}
{"input": "<s> @ JvmStatic fun launch ( activity : AppCompatActivity , launchMainOnClose : Boolean ) { val intent = Intent ( activity , RedditTermsActivity : : class . java )", "gt": "intent . putExtra ( extraLaunchMain , launchMainOnClose ) \n activity . startActivity ( intent ) \n }", "repo": "RedReader", "task_id": "RedReader/176"}
{"input": "<s> @ Override protected void onPause ( ) {", "gt": "super . onPause ( ) ; \n paused = true ; \n }", "repo": "RedReader", "task_id": "RedReader/177"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; paused = false ; if ( ! refreshOnResume . isEmpty ( ) ) { for ( final RefreshableFragment f : refreshOnResume ) {", "gt": "doRefreshNow ( f , false ) ; \n } \n refreshOnResume . clear ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/178"}
{"input": "<s> @ Override public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) {", "gt": "invalidateOptionsMenu ( ) ; \n super . onConfigurationChanged ( newConfig ) ; \n }", "repo": "RedReader", "task_id": "RedReader/179"}
{"input": "<s> protected void doRefreshNow ( final RefreshableFragment which , final boolean force ) { if ( which = = RefreshableFragment . RESTART ) {", "gt": "General . recreateActivityNoAnimation ( this ) ; \n } else { \n doRefresh ( which , force , null ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/180"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final SubredditSearchQuickLinks quickLinks = ( SubredditSearchQuickLinks ) LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . subreddit_search_quick_links , viewGroup , false ) ; quickLinks . bind ( SubredditSearchActivity . this , queryEventListeners ) ;", "gt": "return new RecyclerView . ViewHolder ( quickLinks ) { \n }", "repo": "RedReader", "task_id": "RedReader/182"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( final String query ) { handleQueryChanged ( query ) ; queryEventListeners . send ( query ) ;", "gt": "searchView . clearFocus ( ) ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/183"}
{"input": "<s> @ Override public boolean onQueryTextChange ( final String newText ) { handleQueryChanged ( newText ) ;", "gt": "queryEventListeners . send ( newText ) ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/184"}
{"input": "<s> @ Override protected void onSuccess ( @ NonNull final RedditAPI . SubredditListResponse value ) { Log . i ( TAG , \" <STR_LIT> \" ) ; final ArrayList < SubredditDetails > results = new CollectionStream < > ( value . subreddits ) . map ( SubredditDetails : : newWithRuntimeException ) . collect ( new ArrayList < > ( ) ) ; AndroidCommon . runOnUiThread ( ( ) - > {", "gt": "mQueryResults . get ( ) . put ( text , results ) ; \n mQueriesPending . get ( ) . remove ( text ) ; \n updateList ( ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/185"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( General . onBackPressed ( ) & & ! webView . onBackButtonPressed ( ) ) {", "gt": "super . onBackPressed ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/189"}
{"input": "<s> private fun launchLogin ( ) {", "gt": "val loginIntent = Intent ( context , OAuthLoginActivity : : class . java ) \n fragment . startActivityForResult ( loginIntent , <NUM_LIT> ) \n }", "repo": "RedReader", "task_id": "RedReader/194"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + imageInfo . urlBigSquare + \" <STR_LIT> \" + error , error . t ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/196"}
{"input": "<s> public void addComments ( final Collection < RedditCommentListItem > comments ) { final Collection < GroupedRecyclerViewAdapter . Item < ? > > filteredComments = filter ( comments ) ;", "gt": "addItems ( filteredComments ) ; \n mCommentCount + = filteredComments . size ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/198"}
{"input": "<s> private int getItemPositionInternal ( final int groupId , final Item < ? > item ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = 0 ; i < group . size ( ) ; i + + ) { if ( group . get ( i ) = = item ) {", "gt": "return getItemPositionInternal ( groupId , i ) ; \n } \n } \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/200"}
{"input": "<s> private int getItemPositionInternal ( final int group , final int positionInGroup ) { int result = 0 ; for ( int i = 0 ; i < group ; i + + ) { result + = getGroupUnhiddenCount ( i ) ; } for ( int i = 0 ; i < positionInGroup ; i + + ) { if ( ! mItems [ group ] . get ( i ) . mCurrentlyHidden ) {", "gt": "result + + ; \n } \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/201"}
{"input": "<s> @ Override public int getItemViewType ( final int position ) { final Item < ? > item = getItemInternal ( position ) ; final Class < ? > viewTypeClass = item . getViewType ( ) ; Integer typeId = mItemViewTypeMap . get ( viewTypeClass ) ; if ( typeId = = null ) { typeId = mItemViewTypeMap . size ( ) ;", "gt": "mItemViewTypeMap . put ( viewTypeClass , typeId ) ; \n mViewTypeItemMap . put ( typeId , item ) ; \n } \n return typeId ; \n }", "repo": "RedReader", "task_id": "RedReader/202"}
{"input": "<s> private int getGroupUnhiddenCount ( final int groupId ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; int result = 0 ; for ( int i = 0 ; i < group . size ( ) ; i + + ) { if ( ! group . get ( i ) . mCurrentlyHidden ) {", "gt": "result + + ; \n } \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/203"}
{"input": "<s> @ Override public int getItemCount ( ) { int count = 0 ;", "gt": "for ( int i = 0 ; i < mItems . length ; i + + ) { \n count + = getGroupUnhiddenCount ( i ) ; \n }", "repo": "RedReader", "task_id": "RedReader/204"}
{"input": "<s> public void appendToGroup ( final int group , final Item < ? > item ) { final int position = getItemPositionInternal ( group + 1 , 0 ) ;", "gt": "mItems [ group ] . add ( item ) ; \n if ( ! item . mCurrentlyHidden ) { \n notifyItemInserted ( position ) ; \n }", "repo": "RedReader", "task_id": "RedReader/205"}
{"input": "<s> public void removeAllFromGroup ( final int groupId ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = group . size ( ) - 1 ; i > = 0 ; i - - ) { final Item < ? > item = group . get ( i ) ; final int position = getItemPositionInternal ( groupId , i ) ; group . remove ( i ) ;", "gt": "if ( ! item . mCurrentlyHidden ) { \n notifyItemRemoved ( position ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/207"}
{"input": "<s> public void removeFromGroup ( final int groupId , final Item < ? > item ) { final ArrayList < Item < ? > > group = mItems [ groupId ] ; for ( int i = 0 ; i < group . size ( ) ; i + + ) { if ( group . get ( i ) = = item ) { final int position = getItemPositionInternal ( groupId , i ) ; group . remove ( i ) ; if ( ! item . mCurrentlyHidden ) { notifyItemRemoved ( position ) ; }", "gt": "return ; \n } \n } \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/208"}
{"input": "<s> public void notifyItemChanged ( final int groupId , final Item < ? > item ) {", "gt": "final int position = getItemPositionInternal ( groupId , item ) ; \n notifyItemChanged ( position ) ; \n }", "repo": "RedReader", "task_id": "RedReader/209"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { General . setLayoutMatchWidthWrapHeight ( viewGroup ) ; final FrameLayout frameLayout = new FrameLayout ( viewGroup . getContext ( ) ) ;", "gt": "return new RecyclerView . ViewHolder ( frameLayout ) { \n }", "repo": "RedReader", "task_id": "RedReader/210"}
{"input": "<s> @ Override public void onBindViewHolder ( final RecyclerView . ViewHolder viewHolder ) { final FrameLayout view = ( FrameLayout ) viewHolder . itemView ; view . removeAllViews ( ) ; if ( mParent ! = null & & mChildView . getParent ( ) = = mParent ) { mParent . removeAllViews ( ) ;", "gt": "} \n mParent = view ; \n view . addView ( mChildView ) ; \n General . setLayoutMatchWidthWrapHeight ( mChildView ) ; \n }", "repo": "RedReader", "task_id": "RedReader/211"}
{"input": "<s> public void bind ( @ NonNull final RRError error ) { final FrameLayout itemView = ( FrameLayout ) this . itemView ;", "gt": "itemView . removeAllViews ( ) ; \n itemView . addView ( new ErrorView ( mActivity , error ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/212"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final View view = mFactory . apply ( viewGroup ) ;", "gt": "return new RecyclerView . ViewHolder ( view ) { \n }", "repo": "RedReader", "task_id": "RedReader/213"}
{"input": "<s> private void hideMultiredditsHeader ( ) { General . checkThisIsUIThread ( ) ;", "gt": "mMultiredditHeaderItem = null ; \n mAdapter . removeAllFromGroup ( GROUP_MULTIREDDITS_HEADER ) ; \n }", "repo": "RedReader", "task_id": "RedReader/217"}
{"input": "<s> public void setMultiredditsError ( final ErrorView errorView ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) - > { mAdapter . removeAllFromGroup ( GROUP_MULTIREDDITS_ITEMS ) ;", "gt": "mAdapter . appendToGroup ( GROUP_MULTIREDDITS_ITEMS , new GroupedRecyclerViewItemFrameLayout ( errorView ) ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/218"}
{"input": "<s> public void setSubredditsError ( final ErrorView errorView ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) - > { mAdapter . removeAllFromGroup ( GROUP_SUBREDDITS_ITEMS ) ;", "gt": "mAdapter . appendToGroup ( GROUP_SUBREDDITS_ITEMS , new GroupedRecyclerViewItemFrameLayout ( errorView ) ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/219"}
{"input": "<s> public void addPosts ( final Collection < RedditPostListItem > posts ) {", "gt": "addItems ( Collections . unmodifiableCollection ( posts ) ) ; \n mPostCount + = posts . size ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/224"}
{"input": "<s> public void setLayoutManager ( final LinearLayoutManager layoutManager ) {", "gt": "General . checkThisIsUIThread ( ) ; \n mLayoutManager = layoutManager ; \n }", "repo": "RedReader", "task_id": "RedReader/225"}
{"input": "<s> private void doWorkaround ( ) { if ( ! mWorkaroundDone & & mLayoutManager ! = null ) { mLayoutManager . scrollToPositionWithOffset ( 0 , 0 ) ;", "gt": "mWorkaroundDone = true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/226"}
{"input": "<s> public void addPostHeader ( final RedditPostHeaderView view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_HEADER , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/228"}
{"input": "<s> public void addPostListingHeader ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_HEADER , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/229"}
{"input": "<s> public void addPostSelfText ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_POST_SELFTEXT , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/230"}
{"input": "<s> public void addNotification ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_NOTIFICATIONS , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/231"}
{"input": "<s> public void addItems ( final Collection < GroupedRecyclerViewAdapter . Item < ? > > items ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_ITEMS , items ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/232"}
{"input": "<s> public void addViewToItems ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_ITEMS , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/233"}
{"input": "<s> public void addLoadMoreButton ( final View view ) { General . checkThisIsUIThread ( ) ;", "gt": "mAdapter . appendToGroup ( GROUP_LOAD_MORE_BUTTON , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; \n doWorkaround ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/234"}
{"input": "<s> public void removeLoadMoreButton ( ) {", "gt": "General . checkThisIsUIThread ( ) ; \n mAdapter . removeAllFromGroup ( GROUP_LOAD_MORE_BUTTON ) ; \n }", "repo": "RedReader", "task_id": "RedReader/235"}
{"input": "<s> public void setLoadingVisible ( final boolean visible ) { General . checkThisIsUIThread ( ) ;", "gt": "mLoadingItem . setHidden ( ! visible ) ; \n mAdapter . updateHiddenStatus ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/236"}
{"input": "<s> public GroupedRecyclerViewAdapter getAdapter ( ) {", "gt": "General . checkThisIsUIThread ( ) ; \n return mAdapter ; \n }", "repo": "RedReader", "task_id": "RedReader/237"}
{"input": "<s> public void updateHiddenStatus ( ) {", "gt": "General . checkThisIsUIThread ( ) ; \n mAdapter . updateHiddenStatus ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/238"}
{"input": "<s> @ NonNull public static CacheCompressionType fromDatabaseId ( final int databaseId ) { for ( final CacheCompressionType type : values ( ) ) { if ( type . databaseId = = databaseId ) {", "gt": "return type ; \n } \n } \n throw new RuntimeException ( \" <STR_LIT> \" + databaseId ) ; \n }", "repo": "RedReader", "task_id": "RedReader/242"}
{"input": "<s> @ Override public boolean onCreate ( ) {", "gt": "mCacheManager = CacheManager . getInstance ( getContext ( ) ) ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/246"}
{"input": "<s> synchronized Optional < CacheEntry > selectById ( final long id ) { final SQLiteDatabase db = getReadableDatabase ( ) ; try ( Cursor cursor = db . query ( TABLE , CacheEntry . DB_FIELDS , String . format ( Locale . US , \" <STR_LIT> \" , FIELD_ID ) , new String [ ] { String . valueOf ( id ) } , null , null , FIELD_TIMESTAMP + \" <STR_LIT> \" ) ) { final List < CacheEntry > entries = readEntriesFromCursor ( cursor ) ; if ( entries . isEmpty ( ) ) { return Optional . empty ( ) ;", "gt": "} else { \n return Optional . of ( entries . get ( 0 ) ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/250"}
{"input": "<s> @ NonNull private List < CacheEntry > readEntriesFromCursor ( @ NonNull final Cursor cursor ) { final ArrayList < CacheEntry > result = new ArrayList < > ( ) ;", "gt": "while ( cursor . moveToNext ( ) ) { \n result . add ( new CacheEntry ( cursor ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/251"}
{"input": "<s> synchronized void setEntryDone ( final long id ) { final SQLiteDatabase db = this . getWritableDatabase ( ) ; final ContentValues row = new ContentValues ( ) ;", "gt": "row . put ( FIELD_STATUS , STATUS_DONE ) ; \n db . update ( TABLE , row , FIELD_ID + \" <STR_LIT> \" , new String [ ] { String . valueOf ( id ) } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/252"}
{"input": "<s> public synchronized HashMap < Long , Integer > getFilesToSize ( ) { final SQLiteDatabase db = this . getWritableDatabase ( ) ; final Cursor cursor = db . query ( TABLE , new String [ ] { FIELD_ID , FIELD_TYPE } , null , null , null , null , null , null ) ; final HashMap < Long , Integer > filesToCheck = new HashMap < > ( <NUM_LIT:32> ) ; while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( 0 ) ; final int type = cursor . getInt ( 1 ) ;", "gt": "filesToCheck . put ( id , type ) ; \n } \n cursor . close ( ) ; \n return filesToCheck ; \n }", "repo": "RedReader", "task_id": "RedReader/255"}
{"input": "<s> @ Override public void run ( ) {", "gt": "android . os . Process . setThreadPriority ( android . os . Process . THREAD_PRIORITY_BACKGROUND ) ; \n singleDownload . doDownload ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/260"}
{"input": "<s> public static synchronized CacheManager getInstance ( @ NonNull final Context context ) { if ( singleton = = null ) { singleton = new CacheManager ( context . getApplicationContext ( ) ) ;", "gt": "} \n return singleton ; \n }", "repo": "RedReader", "task_id": "RedReader/261"}
{"input": "<s> @ Nullable private Long isCacheFile ( @ NonNull final File file ) { final String name = file . getName ( ) ; if ( ! name . endsWith ( ext ) ) { return null ; } final String [ ] nameSplit = name . split ( \" <STR_LIT:\\\\> <STR_LIT:.> \" ) ; if ( nameSplit . length ! = <NUM_LIT:2> ) { return null ; } try {", "gt": "return Long . parseLong ( nameSplit [ 0 ] ) ; \n } catch ( final Exception e ) { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/262"}
{"input": "<s> private void getCacheFileList ( final File dir , final HashSet < Long > currentFiles ) { final File [ ] list = dir . listFiles ( ) ; if ( list = = null ) { return ; } for ( final File file : list ) { if ( file . isDirectory ( ) ) { getCacheFileList ( file , currentFiles ) ; } else { final Long cacheFileId = isCacheFile ( file ) ; if ( cacheFileId ! = null ) {", "gt": "currentFiles . add ( cacheFileId ) ; \n } \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/263"}
{"input": "<s> private static void pruneTemp ( final File dir ) { final String [ ] list = dir . list ( ) ; if ( list = = null ) { return ; } for ( final String file : list ) {", "gt": "if ( file . endsWith ( tempExt ) ) { \n new File ( dir , file ) . delete ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/264"}
{"input": "<s> @ NonNull public static ArrayList < File > getCacheDirs ( final Context context ) { final ArrayList < File > dirs = new ArrayList < > ( ) ; dirs . add ( context . getCacheDir ( ) ) ; if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . KITKAT ) { for ( final File dir : context . getExternalCacheDirs ( ) ) { if ( dir ! = null ) { dirs . add ( dir ) ; } } } else { final File extDir = context . getExternalCacheDir ( ) ; if ( extDir ! = null ) {", "gt": "dirs . add ( extDir ) ; \n } \n } \n return dirs ; \n }", "repo": "RedReader", "task_id": "RedReader/265"}
{"input": "<s> public void pruneTemp ( ) { final List < File > dirs = getCacheDirs ( context ) ; for ( final File dir : dirs ) {", "gt": "pruneTemp ( dir ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/266"}
{"input": "<s> public File writeExternally ( ) throws IOException { mWriteExternally = true ;", "gt": "mOutStream . close ( ) ; \n return mTmpFile ; \n }", "repo": "RedReader", "task_id": "RedReader/267"}
{"input": "<s> @ Nullable public Uri getUri ( ) { if ( mCachedUri = = null ) { mCachedUri = getCacheFileUri ( mId ) ;", "gt": "} \n return mCachedUri ; \n }", "repo": "RedReader", "task_id": "RedReader/270"}
{"input": "<s> @ NonNull public Optional < String > lookupMimetype ( ) { final Optional < CacheEntry > result = dbManager . selectById ( mId ) ; if ( result . isPresent ( ) ) {", "gt": "return Optional . of ( result . get ( ) . mimetype ) ; \n } else { \n return Optional . empty ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/271"}
{"input": "<s> @ Nullable private File getExistingCacheFile ( final long id ) { final List < File > dirs = getCacheDirs ( context ) ; for ( final File dir : dirs ) { final File f = new File ( getSubdirForCacheFile ( dir , id ) , id + ext ) ; if ( f . exists ( ) ) { return f ; } } for ( final File dir : dirs ) { final File f = new File ( dir , id + ext ) ; if ( f . exists ( ) ) {", "gt": "return f ; \n } \n } \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/272"}
{"input": "<s> @ Nullable private Uri getCacheFileUri ( final long id ) { final File cacheFile = getExistingCacheFile ( id ) ;", "gt": "if ( cacheFile = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/273"}
{"input": "<s> private CacheEntry mostRecentFromList ( final List < CacheEntry > list ) { CacheEntry entry = null ; for ( final CacheEntry e : list ) { if ( entry = = null | | entry . timestamp . isLessThan ( e . timestamp ) ) {", "gt": "entry = e ; \n } \n } \n return entry ; \n }", "repo": "RedReader", "task_id": "RedReader/275"}
{"input": "<s> synchronized boolean setDownload ( final CacheDownload download ) { if ( cancelled ) {", "gt": "return false ; \n } \n this . download = download ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/277"}
{"input": "<s> public synchronized void cancel ( ) { cancelled = true ;", "gt": "if ( download ! = null ) { \n download . cancel ( ) ; \n download = null ; \n }", "repo": "RedReader", "task_id": "RedReader/278"}
{"input": "<s> private void onCallbackException ( @ NonNull final Throwable t ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" , t ) ; \n BugReportActivity . handleGlobalError ( context , t ) ; \n }", "repo": "RedReader", "task_id": "RedReader/279"}
{"input": "<s> public void notifyFailure ( @ NonNull final RRError error ) { try {", "gt": "mCallbacks . onFailure ( error ) ; \n } catch ( final Throwable t1 ) { \n onCallbackException ( t1 ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/280"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( ! mNotifiedFailure . getAndSet ( true ) ) {", "gt": "mListener . onFailure ( error ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/283"}
{"input": "<s> @ Override public void close ( ) throws IOException {", "gt": "super . close ( ) ; \n listener . onClose ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/286"}
{"input": "<s> private synchronized CacheDownload getNextRedditInQueue ( ) { while ( redditDownloadsQueued . isEmpty ( ) ) { try { wait ( ) ; } catch ( final InterruptedException e ) { throw new RuntimeException ( e ) ; } } CacheDownload next = null ; for ( final CacheDownload entry : redditDownloadsQueued ) { if ( next = = null | | entry . getPriority ( ) . isHigherPriorityThan ( next . getPriority ( ) ) ) { next = entry ;", "gt": "} \n } \n redditDownloadsQueued . remove ( next ) ; \n return next ; \n }", "repo": "RedReader", "task_id": "RedReader/287"}
{"input": "<s> @ Override public void run ( ) { while ( true ) { synchronized ( this ) { final CacheDownload download = getNextRedditInQueue ( ) ; new CacheDownloadThread ( download , true , \" <STR_LIT> \" ) ; } try { sleep ( <NUM_LIT> ) ;", "gt": "} catch ( final InterruptedException e ) { \n throw new RuntimeException ( e ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/288"}
{"input": "<s> public static void onBoot ( final Context context ) { for ( final Alarm alarm : Alarm . values ( ) ) {", "gt": "if ( alarm . startOnBoot ( ) ) { \n startAlarm ( alarm , context ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/290"}
{"input": "<s> @ JvmStatic fun runOnUiThread ( runnable : Runnable ) { if ( General . isThisUIThread ) {", "gt": "runnable . run ( ) \n } else { \n UI_THREAD_HANDLER . post ( runnable ) \n } \n }", "repo": "RedReader", "task_id": "RedReader/291"}
{"input": "<s> @ JvmStatic fun setAutoCompleteTextViewItemsNoFilter ( view : MaterialAutoCompleteTextView , items : List < String > ) {", "gt": "view . setSimpleItems ( items . toTypedArray ( ) ) \n view . setAdapter ( NoFilterAdapter ( view . adapter as ListAdapter , items ) ) \n }", "repo": "RedReader", "task_id": "RedReader/294"}
{"input": "<s> @ JvmStatic fun removeClickListeners ( view : View ) { view . apply { setOnClickListener ( null )", "gt": "setOnLongClickListener ( null ) \n isClickable = false \n isLongClickable = false \n } \n }", "repo": "RedReader", "task_id": "RedReader/295"}
{"input": "<s> @ NonNull public E get ( ) { final long timeNow = SystemClock . uptimeMillis ( ) ; final CacheEntry < E > entry = mEntry . get ( ) ; if ( entry ! = null & & timeNow - entry . getLastUpdateMs ( ) < mMaxAgeMs ) { return entry . getValue ( ) ;", "gt": "} \n final E newValue = mFactory . create ( ) ; \n mEntry . set ( new CacheEntry < > ( newValue , timeNow ) ) ; \n return newValue ; \n }", "repo": "RedReader", "task_id": "RedReader/297"}
{"input": "<s> @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ; \n info . setHeading ( true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/298"}
{"input": "<s> @ Nullable public E peek ( ) { if ( isEmpty ( ) ) { return null ;", "gt": "} \n return mData . get ( mData . size ( ) - 1 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/300"}
{"input": "<s> public final < Output extends Collection < ? super Type > > Output collect ( final Output output ) { while ( hasNext ( ) ) { output . add ( take ( ) ) ;", "gt": "} \n return output ; \n }", "repo": "RedReader", "task_id": "RedReader/301"}
{"input": "<s> public synchronized void remove ( final K key , final V value ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . remove ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/303"}
{"input": "<s> public synchronized void map ( final K key , final WeakReferenceListManager . Operator < V > operator ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . map ( operator ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/304"}
{"input": "<s> public synchronized < A > void map ( final K key , final WeakReferenceListManager . ArgOperator < V , A > operator , final A arg ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list ! = null ) {", "gt": "list . map ( operator , arg ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/305"}
{"input": "<s> public synchronized void clean ( ) { final Iterator < Map . Entry < K , WeakReferenceListManager < V > > > iterator = mData . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { final Map . Entry < K , WeakReferenceListManager < V > > entry = iterator . next ( ) ; final WeakReferenceListManager < V > list = entry . getValue ( ) ; list . clean ( ) ;", "gt": "if ( list . isEmpty ( ) ) { \n iterator . remove ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/306"}
{"input": "<s> public synchronized void map ( final Operator < E > operator ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) { final E object = iterator . next ( ) . get ( ) ; if ( object = = null ) { iterator . remove ( ) ;", "gt": "} else { \n operator . operate ( object ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/307"}
{"input": "<s> public synchronized < A > void map ( final ArgOperator < E , A > operator , final A arg ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) { final E object = iterator . next ( ) . get ( ) ; if ( object = = null ) { iterator . remove ( ) ;", "gt": "} else { \n operator . operate ( object , arg ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/308"}
{"input": "<s> public synchronized void remove ( final E object ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) {", "gt": "if ( iterator . next ( ) . get ( ) = = object ) { \n iterator . remove ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/309"}
{"input": "<s> public synchronized void clean ( ) { final Iterator < WeakReference < E > > iterator = data . iterator ( ) ; while ( iterator . hasNext ( ) ) { final E object = iterator . next ( ) . get ( ) ;", "gt": "if ( object = = null ) { \n iterator . remove ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/310"}
{"input": "<s> private void ensureCapacity ( final int desiredCapacity ) { if ( desiredCapacity < = mData . length ) { return ; } if ( desiredCapacity > ( mData . length * <NUM_LIT:2> ) ) {", "gt": "realloc ( desiredCapacity + ( desiredCapacity / <NUM_LIT:2> ) ) ; \n } else { \n realloc ( mData . length * <NUM_LIT:2> ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/313"}
{"input": "<s> private void realloc ( final int newCapacity ) { if ( newCapacity < mSize ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n mData = Arrays . copyOf ( mData , newCapacity ) ; \n }", "repo": "RedReader", "task_id": "RedReader/314"}
{"input": "<s> public int size ( ) { synchronized ( mLock ) {", "gt": "return mSize ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/315"}
{"input": "<s> public void writeBytes ( @ NonNull final byte [ ] data , final int offset , final int length ) { synchronized ( mLock ) { ensureCapacity ( mSize + length ) ;", "gt": "System . arraycopy ( data , offset , mData , mSize , length ) ; \n mSize + = length ; \n mLock . notifyAll ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/316"}
{"input": "<s> public void setComplete ( ) { synchronized ( mLock ) { mComplete = true ;", "gt": "mLock . notifyAll ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/317"}
{"input": "<s> public void setFailed ( @ NonNull final IOException e ) { synchronized ( mLock ) { mFailed = e ;", "gt": "mLock . notifyAll ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/318"}
{"input": "<s> public void getUnderlyingByteArrayWhenComplete ( @ NonNull final ByteArrayCallback callback ) throws IOException { synchronized ( mLock ) { while ( ! mComplete & & mFailed = = null ) { try { mLock . wait ( ) ; } catch ( final InterruptedException e ) { throw new RuntimeException ( e ) ; } } if ( mFailed ! = null ) {", "gt": "throw mFailed ; \n } \n } \n callback . onByteArray ( mData , 0 , mSize ) ; \n }", "repo": "RedReader", "task_id": "RedReader/319"}
{"input": "<s> @ Override public int read ( ) throws IOException { final int result = mStream . blockingReadOneByte ( mPosition ) ;", "gt": "if ( result > = 0 ) { \n mPosition + + ; \n }", "repo": "RedReader", "task_id": "RedReader/320"}
{"input": "<s> @ Override public int read ( final byte [ ] buf , final int off , final int len ) throws IOException { final int bytesRead = mStream . blockingRead ( mPosition , buf , off , len ) ;", "gt": "if ( bytesRead > 0 ) { \n mPosition + = bytesRead ; \n }", "repo": "RedReader", "task_id": "RedReader/321"}
{"input": "<s> @ Override public void seek ( final long position ) throws IOException { if ( position < 0 ) { throw new IOException ( \" <STR_LIT> \" ) ;", "gt": "} \n mPosition = ( int ) position ; \n }", "repo": "RedReader", "task_id": "RedReader/322"}
{"input": "<s> @ Override public long skip ( final long offset ) { final int bytesToSkip = ( int ) Math . min ( offset , Math . max ( 0 , mStream . size ( ) - mPosition ) ) ;", "gt": "mPosition + = bytesToSkip ; \n return bytesToSkip ; \n }", "repo": "RedReader", "task_id": "RedReader/323"}
{"input": "<s> @ Override public void seek ( final long position ) throws IOException {", "gt": "mFile . seek ( position ) ; \n mPosition = position ; \n }", "repo": "RedReader", "task_id": "RedReader/324"}
{"input": "<s> @ Override public void readRemainingAsBytes ( @ NonNull final ByteArrayCallback callback ) throws IOException {", "gt": "final byte [ ] result = General . readWholeStream ( this ) ; \n callback . onByteArray ( result , 0 , result . length ) ; \n }", "repo": "RedReader", "task_id": "RedReader/325"}
{"input": "<s> @ Override public int read ( ) throws IOException { final int result = mFile . read ( ) ;", "gt": "if ( result > = 0 ) { \n mPosition + + ; \n }", "repo": "RedReader", "task_id": "RedReader/326"}
{"input": "<s> @ Override public int read ( final byte [ ] buf , final int off , final int len ) throws IOException { if ( len = = 0 ) { throw new IOException ( \" <STR_LIT> \" ) ; } final int result = mFile . read ( buf , off , len ) ;", "gt": "if ( result > 0 ) { \n mPosition + = result ; \n }", "repo": "RedReader", "task_id": "RedReader/327"}
{"input": "<s> @ Override public long skip ( final long n ) throws IOException { final long bytesToSkip = Math . min ( n , available ( ) ) ;", "gt": "seek ( ( int ) ( mPosition + bytesToSkip ) ) ; \n return bytesToSkip ; \n }", "repo": "RedReader", "task_id": "RedReader/328"}
{"input": "<s> private static void performSearch ( final EditText editText , final OnSearchListener listener ) { final String query = editText . getText ( ) . toString ( ) . trim ( ) ; if ( StringUtils . isEmpty ( query ) ) {", "gt": "listener . onSearch ( null ) ; \n } else { \n listener . onSearch ( query ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/329"}
{"input": "<s> public static void showDialog ( @ NonNull final Activity activity , @ NonNull final String title , @ NonNull final String message ) { AndroidCommon . runOnUiThread ( ( ) - > { new MaterialAlertDialogBuilder ( activity ) . setTitle ( title ) . setMessage ( message ) . setNeutralButton ( R . string . dialog_close , ( dialog , which ) - > {", "gt": "} ) . create ( ) . show ( ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/331"}
{"input": "<s> public static void showDialog ( @ NonNull final Activity activity , @ StringRes final int title , @ StringRes final int message ) { AndroidCommon . runOnUiThread ( ( ) - > { new MaterialAlertDialogBuilder ( activity ) . setTitle ( title ) . setMessage ( message ) . setNeutralButton ( R . string . dialog_close , ( dialog , which ) - > {", "gt": "} ) . create ( ) . show ( ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/332"}
{"input": "<s> public void send ( final E event ) { mMostRecentEvent = event ; for ( final Listener < E > listener : mListeners . get ( ) ) {", "gt": "listener . onEvent ( event ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/334"}
{"input": "<s> public E register ( final Listener < E > listener ) {", "gt": "mListeners . get ( ) . add ( listener ) ; \n return mMostRecentEvent ; \n }", "repo": "RedReader", "task_id": "RedReader/335"}
{"input": "<s> public static void handleFirstInstall ( @ NonNull final SharedPrefsWrapper sharedPrefs ) { for ( final FeatureFlag flag : FeatureFlag . values ( ) ) {", "gt": "setFeatureFlag ( sharedPrefs , flag ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/337"}
{"input": "<s> public static void moveFile ( final File src , final File dst ) throws IOException { if ( ! src . renameTo ( dst ) ) { copyFile ( src , dst ) ;", "gt": "if ( ! src . delete ( ) ) { \n src . deleteOnExit ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/339"}
{"input": "<s> public static void copyFile ( final File src , final File dst ) throws IOException { try ( FileInputStream fis = new FileInputStream ( src ) ) {", "gt": "copyFile ( fis , dst ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/340"}
{"input": "<s> public static void copyFile ( final InputStream fis , final File dst ) throws IOException { try ( FileOutputStream fos = new FileOutputStream ( dst ) ) { General . copyStream ( fis , fos ) ;", "gt": "fos . flush ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/341"}
{"input": "<s> @ Override public void writeTo ( @ NonNull final OutputStream outputStream ) throws IOException { try ( InputStream inputStream = mCacheFile . getInputStream ( ) ) { General . copyStream ( inputStream , outputStream ) ;", "gt": "outputStream . flush ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/344"}
{"input": "<s> @ NonNull public static File buildPath ( @ NonNull final File base , @ NonNull final String . . . components ) { File result = base ;", "gt": "for ( final String component : components ) { \n result = new File ( result , component ) ; \n }", "repo": "RedReader", "task_id": "RedReader/347"}
{"input": "<s> @ NonNull public static Typeface getVeraMonoOrAlternative ( ) { final Typeface result = sVeraMono . get ( ) ; if ( result = = null ) {", "gt": "return Typeface . MONOSPACE ; \n } else { \n return result ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/349"}
{"input": "<s> @ NonNull public static Typeface getRobotoLightOrAlternative ( ) { final Typeface result = sRobotoLight . get ( ) ; if ( result = = null ) {", "gt": "return Typeface . DEFAULT ; \n } else { \n return result ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/350"}
{"input": "<s> @ JvmStatic fun onBackPressed ( ) : Boolean { if ( lastBackPress < SystemClock . uptimeMillis ( ) - <NUM_LIT> ) {", "gt": "lastBackPress = SystemClock . uptimeMillis ( ) \n return true \n } \n return false \n }", "repo": "RedReader", "task_id": "RedReader/351"}
{"input": "<s> @ JvmStatic fun getSharedPrefs ( context : Context ) : SharedPrefsWrapper { var prefs = mPrefs . get ( ) if ( prefs = = null ) { prefs = SharedPrefsWrapper ( context . getSharedPreferences ( context . packageName + \" <STR_LIT> \" , Context . MODE_PRIVATE ) ) if ( ! mPrefs . compareAndSet ( null , prefs ) ) {", "gt": "prefs = mPrefs . get ( ) \n } \n } \n return prefs \n }", "repo": "RedReader", "task_id": "RedReader/352"}
{"input": "<s> @ JvmStatic fun handlerMessage ( what : Int , obj : Any ? ) : Message { val msg = Message . obtain ( ) msg . what = what", "gt": "msg . obj = obj \n return msg \n }", "repo": "RedReader", "task_id": "RedReader/353"}
{"input": "<s> @ Suppress ( \" <STR_LIT> \" ) @ JvmStatic fun isConnectionWifi ( context : Context ) : Boolean { val cm = context . getSystemService ( Context . CONNECTIVITY_SERVICE ) as ConnectivityManager val info = cm . getNetworkInfo ( ConnectivityManager . TYPE_WIFI )", "gt": "return ( info ! = null \n & & info . detailedState = = NetworkInfo . DetailedState . CONNECTED ) \n }", "repo": "RedReader", "task_id": "RedReader/359"}
{"input": "<s> @ JvmStatic fun filenameFromString ( url : String ? ) : String { val uri = uriFromString ( url ) var filename = uri ! ! . path . replace ( File . separator , \" \" ) val parts = filename . substring ( 1 ) . split ( \" <STR_LIT:\\\\> <STR_LIT:.> \" . toRegex ( ) , limit = <NUM_LIT:2> ) . toTypedArray ( ) if ( parts . size < <NUM_LIT:2> ) { filename + = if ( \" <STR_LIT> \" = = uri . host ) { \" <STR_LIT> \" } else {", "gt": "\" <STR_LIT> \" \n } \n } \n return filename \n }", "repo": "RedReader", "task_id": "RedReader/362"}
{"input": "<s> fun toHex ( bytes : ByteArray ) : String { val result = StringBuilder ( bytes . size * <NUM_LIT:2> )", "gt": "for ( b in bytes ) { \n result . append ( String . format ( Locale . US , \" <STR_LIT> \" , b ) ) \n }", "repo": "RedReader", "task_id": "RedReader/363"}
{"input": "<s> @ JvmStatic fun sha256 ( plaintext : String ) : String { val digest : MessageDigest = try { MessageDigest . getInstance ( \" <STR_LIT> \" )", "gt": "} catch ( e : Exception ) { \n throw RuntimeException ( e ) \n } \n return toHex ( digest . digest ( plaintext . encodeToByteArray ( ) ) ) \n }", "repo": "RedReader", "task_id": "RedReader/364"}
{"input": "<s> @ JvmStatic fun sha1 ( plaintext : ByteArray ) : String { val digest : MessageDigest = try { MessageDigest . getInstance ( \" <STR_LIT> \" )", "gt": "} catch ( e : Exception ) { \n throw RuntimeException ( e ) \n } \n return toHex ( digest . digest ( plaintext ) ) \n }", "repo": "RedReader", "task_id": "RedReader/365"}
{"input": "<s> @ JvmStatic fun checkThisIsUIThread ( ) { if ( ! isThisUIThread ) {", "gt": "throw RuntimeException ( \" <STR_LIT> \" ) \n } \n }", "repo": "RedReader", "task_id": "RedReader/367"}
{"input": "<s> @ JvmStatic fun < E > listOfOne ( obj : E ) : ArrayList < E > { val result = ArrayList < E > ( 1 )", "gt": "result . add ( obj ) \n return result \n }", "repo": "RedReader", "task_id": "RedReader/368"}
{"input": "<s> @ JvmStatic @ Throws ( IOException : : class ) fun readWholeStream ( inStr : InputStream ) : ByteArray { val out = ByteArrayOutputStream ( )", "gt": "copyStream ( inStr , out ) \n return out . toByteArray ( ) \n }", "repo": "RedReader", "task_id": "RedReader/370"}
{"input": "<s> @ JvmStatic fun showMustReloginDialog ( activity : AppCompatActivity ) { MaterialAlertDialogBuilder ( activity ) . setTitle ( R . string . reddit_relogin_error_title ) . setMessage ( R . string . reddit_relogin_error_message ) . setPositiveButton ( R . string . options_accounts ) { _ : DialogInterface ? , _ : Int - >", "gt": "AccountListDialog . show ( activity ) \n } \n . setNegativeButton ( R . string . dialog_close , null ) \n . show ( ) \n }", "repo": "RedReader", "task_id": "RedReader/381"}
{"input": "<s> @ JvmStatic fun < T : View ? > findViewById ( view : View , id : Int ) : T ? { if ( view . id = = id ) { @ Suppress ( \" <STR_LIT> \" ) return view as T } if ( view is ViewGroup ) { for ( i in 0 until view . childCount ) { val result = findViewById < T > ( view . getChildAt ( i ) , id ) if ( result ! = null ) { return result", "gt": "} \n } \n } \n return null \n }", "repo": "RedReader", "task_id": "RedReader/382"}
{"input": "<s> @ JvmStatic @ SafeVarargs fun < E > hashsetFromArray ( vararg data : E ) : Set < E > { val result = HashSet < E > ( data . size )", "gt": "Collections . addAll ( result , * data ) \n return result \n }", "repo": "RedReader", "task_id": "RedReader/383"}
{"input": "<s> @ JvmStatic @ SafeVarargs fun < E > listFromArray ( vararg data : E ) : ArrayList < E > { val result = ArrayList < E > ( data . size )", "gt": "Collections . addAll ( result , * data ) \n return result \n }", "repo": "RedReader", "task_id": "RedReader/384"}
{"input": "<s> @ JvmStatic @ SafeVarargs fun < E > nullAlternative ( vararg values : E ) : E { for ( value in values ) { if ( value ! = null ) {", "gt": "return value \n } \n } \n return values [ values . size - 1 ] \n }", "repo": "RedReader", "task_id": "RedReader/385"}
{"input": "<s> @ JvmStatic fun < E > ignoreIOException ( factory : GenericFactory < E , IOException ? > ) : Optional < E > { return try {", "gt": "Optional . of ( factory . create ( ) ) \n } catch ( e : IOException ) { \n Optional . empty ( ) \n }", "repo": "RedReader", "task_id": "RedReader/386"}
{"input": "<s> @ NonNull public Out get ( @ NonNull final In in ) { final String uniqueId = in . getUniqueId ( ) ; Out result = mThisGen . get ( uniqueId ) ; if ( result ! = null ) { return result ; } result = mPreviousGen . get ( uniqueId ) ; if ( result = = null ) { result = mCreator . apply ( in ) ;", "gt": "mThisGen . put ( uniqueId , result ) ; \n } \n mThisGen . put ( uniqueId , result ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/387"}
{"input": "<s> public void nextGeneration ( ) {", "gt": "mPreviousGen = mThisGen ; \n mThisGen = new HashMap < > ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/388"}
{"input": "<s> override fun uncaughtException ( t : Thread , e : Throwable ) { Log . e ( TAG , \" <STR_LIT> \" , e ) try { PrintWriter ( FileWriter ( mFile , true ) ) . use { writer - > writer . println ( \" <STR_LIT> \" ) e . printStackTrace ( writer ) writer . println ( \" <STR_LIT> \" ) writer . flush ( ) } } catch ( e2 : Exception ) { Log . e ( TAG , \" <STR_LIT> \" , e2 ) }", "gt": "if ( mNextHandler ! = null ) { \n Log . e ( TAG , \" <STR_LIT> \" ) \n mNextHandler . uncaughtException ( t , e ) \n }", "repo": "RedReader", "task_id": "RedReader/389"}
{"input": "<s> private int getNextId ( ) { mNextId + + ;", "gt": "while ( mTimers . get ( mNextId , false ) | | mNextId = = 0 ) { \n mNextId + + ; \n }", "repo": "RedReader", "task_id": "RedReader/390"}
{"input": "<s> @ UiThread public int setTimer ( final long delayMs , final Runnable runnable ) { final int id = getNextId ( ) ; mTimers . put ( id , true ) ; mHandler . postDelayed ( ( ) - > { if ( ! mTimers . get ( id , false ) ) { return ; }", "gt": "mTimers . delete ( id ) ; \n runnable . run ( ) ; \n } , delayMs ) ; \n return id ; \n }", "repo": "RedReader", "task_id": "RedReader/391"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ; \n listener . onFailure ( firstError ) ; \n }", "repo": "RedReader", "task_id": "RedReader/398"}
{"input": "<s> @ Nullable public static < E > E getLast ( @ NonNull final List < E > list ) { if ( list . isEmpty ( ) ) { return null ;", "gt": "} \n return list . get ( list . size ( ) - 1 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/400"}
{"input": "<s> public void reset ( ) {", "gt": "x = 0 ; \n y = 0 ; \n }", "repo": "RedReader", "task_id": "RedReader/401"}
{"input": "<s> public void set ( final MotionEvent event , final int pointerIndex ) {", "gt": "x = event . getX ( pointerIndex ) ; \n y = event . getY ( pointerIndex ) ; \n }", "repo": "RedReader", "task_id": "RedReader/402"}
{"input": "<s> public void set ( final MutableFloatPoint2D other ) {", "gt": "x = other . x ; \n y = other . y ; \n }", "repo": "RedReader", "task_id": "RedReader/403"}
{"input": "<s> public void set ( final float x , final float y ) {", "gt": "this . x = x ; \n this . y = y ; \n }", "repo": "RedReader", "task_id": "RedReader/404"}
{"input": "<s> public void add ( final MutableFloatPoint2D rhs , final MutableFloatPoint2D result ) {", "gt": "result . x = x + rhs . x ; \n result . y = y + rhs . y ; \n }", "repo": "RedReader", "task_id": "RedReader/405"}
{"input": "<s> public void sub ( final MutableFloatPoint2D rhs , final MutableFloatPoint2D result ) {", "gt": "result . x = x - rhs . x ; \n result . y = y - rhs . y ; \n }", "repo": "RedReader", "task_id": "RedReader/406"}
{"input": "<s> public void scale ( final double factor ) {", "gt": "x * = factor ; \n y * = factor ; \n }", "repo": "RedReader", "task_id": "RedReader/407"}
{"input": "<s> public double euclideanDistanceTo ( final MutableFloatPoint2D other ) { final float xDistance = x - other . x ;", "gt": "final float yDistance = y - other . y ; \n return Math . sqrt ( xDistance * xDistance + yDistance * yDistance ) ; \n }", "repo": "RedReader", "task_id": "RedReader/408"}
{"input": "<s> @ NonNull public static < E > Optional < E > ofNullable ( @ Nullable final E value ) { if ( value = = null ) { return empty ( ) ;", "gt": "} \n return new Optional < > ( value ) ; \n }", "repo": "RedReader", "task_id": "RedReader/410"}
{"input": "<s> @ NonNull public E get ( ) { if ( mValue = = null ) { throw new OptionalHasNoValueException ( ) ;", "gt": "} \n return mValue ; \n }", "repo": "RedReader", "task_id": "RedReader/411"}
{"input": "<s> @ NonNull public E orElse ( @ NonNull final E alternative ) { if ( mValue = = null ) {", "gt": "return alternative ; \n } else { \n return mValue ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/412"}
{"input": "<s> @ NonNull public Optional < E > orElse ( @ NonNull final Optional < E > alternative ) { if ( mValue = = null ) {", "gt": "return alternative ; \n } else { \n return Optional . of ( mValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/413"}
{"input": "<s> @ NonNull public < T extends Exception > E orThrow ( @ NonNull final GenericFactory < T , RuntimeException > factory ) throws T { if ( mValue = = null ) { throw factory . create ( ) ;", "gt": "} \n return mValue ; \n }", "repo": "RedReader", "task_id": "RedReader/414"}
{"input": "<s> @ NonNull public < R > Optional < R > map ( @ NonNull final FunctionOneArgWithReturn < E , R > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ; \n } else { \n return Optional . of ( function . apply ( mValue ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/415"}
{"input": "<s> @ NonNull public < R > Optional < R > flatMap ( @ NonNull final FunctionOneArgWithReturn < E , Optional < R > > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ; \n } else { \n return function . apply ( mValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/416"}
{"input": "<s> public void apply ( @ NonNull final FunctionOneArgNoReturn < E > function ) { if ( mValue ! = null ) {", "gt": "function . apply ( mValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/417"}
{"input": "<s> @ NonNull public < R > Optional < R > filter ( @ NonNull final FunctionOneArgWithReturn < E , Optional < R > > function ) { if ( mValue = = null ) {", "gt": "return Optional . empty ( ) ; \n } else { \n return function . apply ( mValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/418"}
{"input": "<s> public void ifPresent ( @ NonNull final Consumer < E > consumer ) { if ( mValue ! = null ) {", "gt": "consumer . consume ( mValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/419"}
{"input": "<s> @ Override public int hashCode ( ) { if ( mValue = = null ) {", "gt": "return <NUM_LIT> ; \n } else { \n return mValue . hashCode ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/420"}
{"input": "<s> @ NonNull @ Override public String toString ( ) { if ( mValue = = null ) {", "gt": "return \" <STR_LIT> \" ; \n } else { \n return mValue . toString ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/422"}
{"input": "<s> public static String readNullableString ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/423"}
{"input": "<s> @ Nullable public static ImageInfo . MediaType readNullableImageInfoMediaType ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/424"}
{"input": "<s> public static void writeNullableEnum ( final Parcel parcel , @ Nullable final Enum value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else { \n writeBoolean ( parcel , true ) ; \n parcel . writeString ( value . name ( ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/425"}
{"input": "<s> public static Integer readNullableInt ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/426"}
{"input": "<s> public static Long readNullableLong ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/427"}
{"input": "<s> public static Boolean readNullableBoolean ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ;", "gt": "if ( isNull ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/428"}
{"input": "<s> public static void writeNullableString ( final Parcel parcel , final String value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else { \n writeBoolean ( parcel , true ) ; \n parcel . writeString ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/429"}
{"input": "<s> public static void writeNullableLong ( final Parcel parcel , final Long value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else { \n writeBoolean ( parcel , true ) ; \n parcel . writeLong ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/430"}
{"input": "<s> public static void writeNullableBoolean ( final Parcel parcel , final Boolean value ) { if ( value = = null ) { writeBoolean ( parcel , false ) ;", "gt": "} else { \n writeBoolean ( parcel , true ) ; \n writeBoolean ( parcel , value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/431"}
{"input": "<s> public static void writeNullableBoolean ( @ NonNull final Parcel parcel , @ Nullable final Boolean value ) { if ( value = = null ) { parcel . writeInt ( 0 ) ; } else if ( value ) {", "gt": "parcel . writeInt ( 1 ) ; \n } else { \n parcel . writeInt ( - 1 ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/432"}
{"input": "<s> @ Nullable public static Boolean readNullableBoolean ( @ NonNull final Parcel parcel ) { final int value = parcel . readInt ( ) ; switch ( value ) { case - 1 : return false ; case 0 : return null ;", "gt": "case 1 : \n return true ; \n } \n throw new RuntimeException ( \" <STR_LIT> \" + value ) ; \n }", "repo": "RedReader", "task_id": "RedReader/433"}
{"input": "<s> public static void writeNullableInt ( @ NonNull final Parcel parcel , @ Nullable final Integer value ) { if ( value = = null ) { parcel . writeInt ( 0 ) ;", "gt": "} else { \n parcel . writeInt ( 1 ) ; \n parcel . writeInt ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/434"}
{"input": "<s> @ Nullable public static Integer readNullableInt ( @ NonNull final Parcel parcel ) { final int present = parcel . readInt ( ) ; if ( present = = 1 ) {", "gt": "return parcel . readInt ( ) ; \n } else { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/435"}
{"input": "<s> public static void writeNullableLong ( @ NonNull final Parcel parcel , @ Nullable final Long value ) { if ( value = = null ) { parcel . writeLong ( 0 ) ;", "gt": "} else { \n parcel . writeLong ( 1 ) ; \n parcel . writeLong ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/436"}
{"input": "<s> @ Nullable public static Long readNullableLong ( @ NonNull final Parcel parcel ) { final long present = parcel . readLong ( ) ; if ( present = = 1 ) {", "gt": "return parcel . readLong ( ) ; \n } else { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/437"}
{"input": "<s> @ NonNull public Object getRequired ( @ NonNull final Object key ) throws IOException { final Object result = mMap . get ( key ) ;", "gt": "if ( result = = null ) { \n throw new IOException ( \" <STR_LIT> \" + key + \" ' \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/438"}
{"input": "<s> public static void init ( final Context context ) { ConfigProviders . register ( ( ) - > \" <STR_LIT> \" + \" <STR_LIT> \" + \" <STR_LIT> \" ) ; sharedPrefs = General . getSharedPrefs ( context ) ;", "gt": "mRes = Objects . requireNonNull ( context . getResources ( ) ) ; \n General . initAppConfig ( context ) ; \n }", "repo": "RedReader", "task_id": "RedReader/444"}
{"input": "<s> public static void applySettingsTheme ( @ NonNull final Activity activity ) {", "gt": "activity . setTheme ( R . style . RR_Settings ) ; \n applyLanguage ( activity ) ; \n }", "repo": "RedReader", "task_id": "RedReader/446"}
{"input": "<s> public static NeverAlwaysOrWifiOnly appearance_thumbnails_show_old ( ) { if ( ! getBoolean ( R . string . pref_appearance_thumbnails_show_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_appearance_thumbnails_wifionly_key , false ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ; \n } else { \n return NeverAlwaysOrWifiOnly . ALWAYS ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/448"}
{"input": "<s> public static float appearance_fontscale_bodytext ( ) { if ( getString ( R . string . pref_appearance_fontscale_bodytext_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_bodytext_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/449"}
{"input": "<s> public static float appearance_fontscale_comment_headers ( ) { if ( getString ( R . string . pref_appearance_fontscale_comment_headers_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_comment_headers_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/450"}
{"input": "<s> public static float appearance_fontscale_linkbuttons ( ) { if ( getString ( R . string . pref_appearance_fontscale_linkbuttons_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_linkbuttons_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/451"}
{"input": "<s> public static float appearance_fontscale_posts ( ) { if ( getString ( R . string . pref_appearance_fontscale_posts_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_posts_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/452"}
{"input": "<s> public static float appearance_fontscale_post_subtitles ( ) { if ( getString ( R . string . pref_appearance_fontscale_post_subtitles_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_post_subtitles_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/453"}
{"input": "<s> public static float appearance_fontscale_post_header_titles ( ) { if ( getString ( R . string . pref_appearance_fontscale_post_header_titles_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_post_header_titles_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/454"}
{"input": "<s> public static float appearance_fontscale_post_header_subtitles ( ) { if ( getString ( R . string . pref_appearance_fontscale_post_header_subtitles_key , \" <STR_LIT:-1> \" ) . equals ( \" <STR_LIT:-1> \" ) ) { return appearance_fontscale_global ( ) ;", "gt": "} \n return Float . parseFloat ( getString ( R . string . pref_appearance_fontscale_post_header_subtitles_key , \" <STR_LIT:-1> \" ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/455"}
{"input": "<s> public static Integer pref_behaviour_comment_min ( ) { final Integer defaultValue = - <NUM_LIT:4> ; final String value = getString ( R . string . pref_behaviour_comment_min_key , defaultValue . toString ( ) ) ; if ( value = = null | | value . trim ( ) . isEmpty ( ) ) { return null ; } try {", "gt": "return Integer . parseInt ( value ) ; \n } catch ( final Throwable e ) { \n return defaultValue ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/465"}
{"input": "<s> public static TimeDuration pref_cache_rerequest_postlist_age ( ) { try { final int hours = Integer . parseInt ( getString ( R . string . pref_cache_rerequest_postlist_age_key , \" <STR_LIT:1> \" ) ) ;", "gt": "return TimeDuration . hours ( hours ) ; \n } catch ( final Throwable e ) { \n return TimeDuration . hours ( 1 ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/467"}
{"input": "<s> public static NeverAlwaysOrWifiOnly cache_precache_images_old ( ) { if ( network_tor ( ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } if ( ! getBoolean ( R . string . pref_cache_precache_images_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_cache_precache_images_wifionly_key , true ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ; \n } else { \n return NeverAlwaysOrWifiOnly . ALWAYS ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/469"}
{"input": "<s> public static NeverAlwaysOrWifiOnly cache_precache_comments_old ( ) { if ( ! getBoolean ( R . string . pref_cache_precache_comments_key , true ) ) { return NeverAlwaysOrWifiOnly . NEVER ; } else if ( getBoolean ( R . string . pref_cache_precache_comments_wifionly_key , false ) ) {", "gt": "return NeverAlwaysOrWifiOnly . WIFIONLY ; \n } else { \n return NeverAlwaysOrWifiOnly . ALWAYS ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/470"}
{"input": "<s> public static List < SubredditCanonicalId > pref_subreddits_list ( final int prefId ) { final String value = getString ( prefId , \" \" ) ; final ArrayList < String > list = WritableHashSet . escapedStringToList ( value ) ; final ArrayList < SubredditCanonicalId > result = new ArrayList < > ( list . size ( ) ) ; try { for ( final String str : list ) { result . add ( new SubredditCanonicalId ( str ) ) ; }", "gt": "} catch ( final InvalidSubredditNameException e ) { \n throw new RuntimeException ( e ) ; \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/483"}
{"input": "<s> @ Nullable public static String pref_reddit_client_id_override ( ) { final String value = getString ( R . string . pref_reddit_client_id_override_key , null ) ; if ( value = = null ) { return null ; } final String valueTrimmed = value . trim ( ) ;", "gt": "if ( valueTrimmed . isEmpty ( ) ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/485"}
{"input": "<s> public final boolean isHigherPriorityThan ( @ NonNull final Priority other ) { if ( primary ! = other . primary ) {", "gt": "return primary < other . primary ; \n } else { \n return secondary < other . secondary ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/487"}
{"input": "<s> @ Override public final void run ( ) { if ( ! mAlreadyRun . getAndSet ( true ) ) {", "gt": "mRunnable . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/488"}
{"input": "<s> public static String getAccessibilityString ( @ NonNull final Context context , @ StringRes final int res ) { if ( ! Locale . getDefault ( ) . getLanguage ( ) . equals ( LANGUAGE_CODE_EN ) ) { return context . getString ( res ) ; } if ( res = = R . string . accessibility_post_already_read_withperiod ) {", "gt": "return \" <STR_LIT> \" ; \n } else { \n return context . getString ( res ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/489"}
{"input": "<s> @ NonNull public static DataType fromConstant ( final byte value ) throws UnhandledTypeException { if ( value < 0 | | value > = values ( ) . length ) { throw new UnhandledTypeException ( \" <STR_LIT> \" + ( int ) value ) ;", "gt": "} \n return values ( ) [ value ] ; \n }", "repo": "RedReader", "task_id": "RedReader/491"}
{"input": "<s> public Editor putString ( @ NonNull final String key , @ Nullable final String value ) {", "gt": "mEditor . putString ( key , value ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/493"}
{"input": "<s> public Editor putInt ( @ NonNull final String key , final int value ) {", "gt": "mEditor . putInt ( key , value ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/494"}
{"input": "<s> public Editor putLong ( @ NonNull final String key , final long value ) {", "gt": "mEditor . putLong ( key , value ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/495"}
{"input": "<s> public Editor putBoolean ( @ NonNull final String key , final boolean value ) {", "gt": "mEditor . putBoolean ( key , value ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/496"}
{"input": "<s> public Editor putStringSet ( @ NonNull final String key , @ Nullable final Set < String > value ) {", "gt": "mEditor . putStringSet ( key , value ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/497"}
{"input": "<s> public void apply ( ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "mEditor . apply ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/498"}
{"input": "<s> public void registerOnSharedPreferenceChangeListener ( final OnSharedPreferenceChangeListener listener ) { final SharedPreferences . OnSharedPreferenceChangeListener spListener = ( sharedPreferences , key ) - > listener . onSharedPreferenceChanged ( this , key ) ;", "gt": "mPrefs . registerOnSharedPreferenceChangeListener ( spListener ) ; \n mListenerWrappers . put ( listener , spListener ) ; \n }", "repo": "RedReader", "task_id": "RedReader/499"}
{"input": "<s> public void unregisterOnSharedPreferenceChangeListener ( final OnSharedPreferenceChangeListener listener ) { final SharedPreferences . OnSharedPreferenceChangeListener spListener = mListenerWrappers . remove ( listener ) ; if ( spListener ! = null ) {", "gt": "mPrefs . unregisterOnSharedPreferenceChangeListener ( spListener ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/500"}
{"input": "<s> public boolean contains ( @ NonNull final String key ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . contains ( key ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/501"}
{"input": "<s> @ NonNull public Map < String , ? > getAllClone ( ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return new HashMap < > ( mPrefs . getAll ( ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/502"}
{"input": "<s> @ Nullable public String getString ( @ NonNull final String key , @ Nullable final String defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getString ( key , defValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/503"}
{"input": "<s> public int getInt ( @ NonNull final String key , final int defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getInt ( key , defValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/504"}
{"input": "<s> public long getLong ( @ NonNull final String key , final long defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getLong ( key , defValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/505"}
{"input": "<s> @ Nullable public Set < String > getStringSet ( @ NonNull final String key , @ Nullable final Set < String > defValues ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getStringSet ( key , defValues ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/506"}
{"input": "<s> public boolean getBoolean ( @ NonNull final String key , final boolean defValue ) { try ( Locker ignored = new Locker ( mRestoreLock . readLock ( ) ) ) {", "gt": "return mPrefs . getBoolean ( key , defValue ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/507"}
{"input": "<s> private void moveToNext ( ) { while ( mInner . hasNext ( ) ) { mNext = mInner . next ( ) ; if ( mPredicate . matches ( mNext ) ) { return ;", "gt": "} \n } \n mNext = null ; \n mHasNext = false ; \n }", "repo": "RedReader", "task_id": "RedReader/509"}
{"input": "<s> @ Override public E next ( ) { final E result = mNext ;", "gt": "moveToNext ( ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/510"}
{"input": "<s> default void forEach ( @ NonNull final Consumer < E > consumer ) { while ( hasNext ( ) ) {", "gt": "consumer . consume ( next ( ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/511"}
{"input": "<s> @ NonNull public static Optional < String > removePrefix ( @ NonNull final String input , @ NonNull final String prefix ) { if ( input . startsWith ( prefix ) ) {", "gt": "return Optional . of ( input . substring ( prefix . length ( ) ) ) ; \n } else { \n return Optional . empty ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/512"}
{"input": "<s> @ NonNull public static String asciiUppercase ( @ NonNull final String input ) { final char [ ] chars = input . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { if ( chars [ i ] > = <CHAR_LIT:a> & & chars [ i ] < = <CHAR_LIT> ) { chars [ i ] - = <CHAR_LIT:a> ;", "gt": "chars [ i ] + = <CHAR_LIT:A> ; \n } \n } \n return new String ( chars ) ; \n }", "repo": "RedReader", "task_id": "RedReader/513"}
{"input": "<s> @ NonNull public static String asciiLowercase ( @ NonNull final String input ) { final char [ ] chars = input . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { if ( chars [ i ] > = <CHAR_LIT:A> & & chars [ i ] < = <CHAR_LIT:Z> ) { chars [ i ] - = <CHAR_LIT:A> ;", "gt": "chars [ i ] + = <CHAR_LIT:a> ; \n } \n } \n return new String ( chars ) ; \n }", "repo": "RedReader", "task_id": "RedReader/514"}
{"input": "<s> @ NonNull public static String join ( @ NonNull final Collection < ? > elements , @ NonNull final CharSequence separator ) { final StringBuilder result = new StringBuilder ( ) ; boolean first = true ; for ( final Object element : elements ) { if ( ! first ) { result . append ( separator ) ; }", "gt": "result . append ( element . toString ( ) ) ; \n first = false ; \n } \n return result . toString ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/515"}
{"input": "<s> public E get ( ) { if ( mThread ! = Thread . currentThread ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n return mValue ; \n }", "repo": "RedReader", "task_id": "RedReader/516"}
{"input": "<s> public void set ( final E value ) { if ( mThread ! = Thread . currentThread ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n mValue = value ; \n }", "repo": "RedReader", "task_id": "RedReader/517"}
{"input": "<s> public synchronized void trigger ( ) { if ( thread = = null ) { thread = new InternalTriggerableThread ( ) ;", "gt": "thread . start ( ) ; \n } else if ( allowRetrigger ) { \n shouldRetrigger = true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/520"}
{"input": "<s> private synchronized boolean shouldThreadContinue ( ) { if ( shouldRetrigger ) { shouldRetrigger = false ; return true ; } else {", "gt": "thread = null ; \n allowRetrigger = false ; \n return false ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/521"}
{"input": "<s> public void triggerOne ( ) {", "gt": "mThreads [ mNextThreadToTrigger ] . trigger ( ) ; \n mNextThreadToTrigger = ( mNextThreadToTrigger + 1 ) % mThreads . length ; \n }", "repo": "RedReader", "task_id": "RedReader/523"}
{"input": "<s> @ UiThread public void startTimer ( ) { General . checkThisIsUIThread ( ) ;", "gt": "mShouldTimerRun = true ; \n mHandler . postDelayed ( this , mIntervalMs ) ; \n }", "repo": "RedReader", "task_id": "RedReader/524"}
{"input": "<s> @ UiThread public void stopTimer ( ) {", "gt": "General . checkThisIsUIThread ( ) ; \n mShouldTimerRun = false ; \n }", "repo": "RedReader", "task_id": "RedReader/525"}
{"input": "<s> @ Override public void run ( ) { if ( mShouldTimerRun ) { mListener . onUIThreadRepeatingTimer ( this ) ;", "gt": "if ( mShouldTimerRun ) { \n mHandler . postDelayed ( this , mIntervalMs ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/526"}
{"input": "<s> public synchronized void enqueue ( final E object ) { if ( set . add ( object ) ) {", "gt": "queue . addLast ( object ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/527"}
{"input": "<s> public synchronized E dequeue ( ) { if ( queue . isEmpty ( ) ) { return null ;", "gt": "} \n final E result = queue . removeFirst ( ) ; \n set . remove ( result ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/528"}
{"input": "<s> public synchronized void updateAllListeners ( ) { final Iterator < WeakReference < E > > iter = listeners . iterator ( ) ; while ( iter . hasNext ( ) ) { final E listener = iter . next ( ) . get ( ) ; if ( listener = = null ) { iter . remove ( ) ;", "gt": "} else { \n notifyListener ( listener ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/529"}
{"input": "<s> @ Override public void onActivityResult ( final int requestCode , final int resultCode , final Intent data ) { if ( requestCode = = <NUM_LIT> & & requestCode = = resultCode & & data . hasExtra ( \" <STR_LIT> \" ) ) { final Uri uri = Uri . parse ( data . getStringExtra ( \" <STR_LIT> \" ) ) ;", "gt": "RedditOAuth . completeLogin ( mActivity , uri , RunnableOnce . DO_NOTHING ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/530"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/533"}
{"input": "<s> public static ImageInfoDialog newInstance ( final ImageInfo info ) { final ImageInfoDialog pp = new ImageInfoDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ; \n args . putParcelable ( \" <STR_LIT> \" , info ) ; \n pp . setArguments ( args ) ; \n return pp ; \n }", "repo": "RedReader", "task_id": "RedReader/540"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashSet < String > result , final TimestampUTC timeCached ) {", "gt": "multiredditSubscriptionManager . addListener ( MainMenuFragment . this ) ; \n onMultiredditSubscriptionsChanged ( result ) ; \n }", "repo": "RedReader", "task_id": "RedReader/541"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashSet < SubredditCanonicalId > result , final TimestampUTC timeCached ) {", "gt": "subredditSubscriptionManager . addListener ( MainMenuFragment . this ) ; \n onSubredditSubscriptionsChanged ( result ) ; \n }", "repo": "RedReader", "task_id": "RedReader/542"}
{"input": "<s> @ Override public Bundle onSaveInstanceState ( ) { final Bundle bundle = new Bundle ( ) ; final LinearLayoutManager layoutManager = ( LinearLayoutManager ) mRecyclerView . getLayoutManager ( ) ;", "gt": "bundle . putInt ( SAVEDSTATE_FIRST_VISIBLE_POS , layoutManager . findFirstVisibleItemPosition ( ) ) ; \n return bundle ; \n }", "repo": "RedReader", "task_id": "RedReader/546"}
{"input": "<s> public void cancel ( ) { if ( mRequest ! = null ) {", "gt": "mRequest . cancel ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/547"}
{"input": "<s> public synchronized void restackRefreshCount ( ) { while ( mPostRefreshCount . get ( ) < = 0 ) {", "gt": "mPostRefreshCount . addAndGet ( mPostCountLimit ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/548"}
{"input": "<s> @ Override public void onPostSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostSelected ( post ) ; new Thread ( ) { @ Override", "gt": "public void run ( ) { \n post . markAsRead ( getActivity ( ) ) ; \n } \n } . start ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/549"}
{"input": "<s> @ Override public void onPostCommentsSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostCommentsSelected ( post ) ; new Thread ( ) { @ Override", "gt": "public void run ( ) { \n post . markAsRead ( getActivity ( ) ) ; \n } \n } . start ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/550"}
{"input": "<s> @ Override public void onSuccess ( final ImageInfo info ) { if ( ! precacheImages ) { return ;", "gt": "} \n precacheImage ( activity , info , positionInList , gifViewMode , imageViewMode , videoViewMode ) ; \n }", "repo": "RedReader", "task_id": "RedReader/554"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) - > { mPostListingManager . setLoadingVisible ( false ) ;", "gt": "mPostListingManager . addFooterError ( new ErrorView ( activity , error ) ) ; \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/555"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" + url + \" <STR_LIT> \" + error + \" <STR_LIT:)> \" ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/556"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , String . format ( Locale . US , \" <STR_LIT> \" , url , error ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/557"}
{"input": "<s> public static PostPropertiesDialog newInstance ( final RedditPost post ) { final PostPropertiesDialog pp = new PostPropertiesDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ; \n args . putParcelable ( \" <STR_LIT> \" , post ) ; \n pp . setArguments ( args ) ; \n return pp ; \n }", "repo": "RedReader", "task_id": "RedReader/558"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull final Menu menu , @ NonNull final MenuInflater inflater ) { final MenuItem send = menu . add ( R . string . comment_reply_send ) ; send . setIcon ( R . drawable . ic_action_send_dark ) ;", "gt": "send . setShowAsAction ( MenuItem . SHOW_AS_ACTION_ALWAYS ) ; \n menu . add ( R . string . comment_reply_preview ) ; \n }", "repo": "RedReader", "task_id": "RedReader/567"}
{"input": "<s> private void resetDraft ( ) { mDraftReset = true ; lastType = null ; lastTitle = null ;", "gt": "lastText = null ; \n lastInbox = true ; \n lastNsfw = false ; \n lastSpoiler = false ; \n }", "repo": "RedReader", "task_id": "RedReader/571"}
{"input": "<s> private void ifActivityNotNull ( @ NonNull final Consumer < Listener > action ) { final FragmentActivity activity = getActivity ( ) ; if ( activity ! = null ) {", "gt": "action . consume ( ( Listener ) activity ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/572"}
{"input": "<s> @ NonNull public Bundle toBundle ( ) { final Bundle result = new Bundle ( 1 ) ;", "gt": "if ( subreddit ! = null ) { \n result . putParcelable ( KEY_SUBREDDIT , subreddit ) ; \n }", "repo": "RedReader", "task_id": "RedReader/573"}
{"input": "<s> @ NonNull @ Override public VH1Text onCreateViewHolder ( @ NonNull final ViewGroup viewGroup , final int i ) { final View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . list_item_1_text , viewGroup , false ) ; final VH1Text result = new VH1Text ( view ) ;", "gt": "view . setOnClickListener ( v - > mSubredditBox . setText ( result . text . getText ( ) ) ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/574"}
{"input": "<s> @ NonNull public final View createCombinedListingAndOverlayView ( ) { final FrameLayout outer = new FrameLayout ( mParent ) ; { final View view = getListingView ( ) ; outer . addView ( view ) ; General . setLayoutMatchParent ( view ) ; } { final View overlayView = getOverlayView ( ) ; if ( overlayView ! = null ) { outer . addView ( overlayView ) ;", "gt": "General . setLayoutMatchParent ( overlayView ) ; \n } \n } \n return outer ; \n }", "repo": "RedReader", "task_id": "RedReader/577"}
{"input": "<s> public static SessionListDialog newInstance ( final Uri url , final UUID current , final SessionChangeListener . SessionChangeType type ) { final SessionListDialog dialog = new SessionListDialog ( ) ; final Bundle args = new Bundle ( <NUM_LIT:3> ) ; args . putString ( \" <STR_LIT> \" , url . toString ( ) ) ; if ( current ! = null ) { args . putString ( \" <STR_LIT> \" , current . toString ( ) ) ;", "gt": "} \n args . putString ( \" <STR_LIT> \" , type . name ( ) ) ; \n dialog . setArguments ( args ) ; \n return dialog ; \n }", "repo": "RedReader", "task_id": "RedReader/579"}
{"input": "<s> @ Override public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; context = getContext ( ) ;", "gt": "packageManager = getActivity ( ) . getPackageManager ( ) ; \n shareIntent = getArguments ( ) . getParcelable ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/582"}
{"input": "<s> public static UserPropertiesDialog newInstance ( final RedditUser user ) { final UserPropertiesDialog pp = new UserPropertiesDialog ( ) ;", "gt": "final Bundle args = new Bundle ( ) ; \n args . putParcelable ( \" <STR_LIT> \" , user ) ; \n pp . setArguments ( args ) ; \n return pp ; \n }", "repo": "RedReader", "task_id": "RedReader/585"}
{"input": "<s> public static WebViewFragment newInstance ( final String url , final RedditPost post ) { final WebViewFragment f = new WebViewFragment ( ) ; final Bundle bundle = new Bundle ( 1 ) ; bundle . putString ( \" <STR_LIT> \" , url ) ; if ( post ! = null ) {", "gt": "bundle . putParcelable ( \" <STR_LIT> \" , post ) ; \n } \n f . setArguments ( bundle ) ; \n return f ; \n }", "repo": "RedReader", "task_id": "RedReader/586"}
{"input": "<s> public static WebViewFragment newInstanceHtml ( final String html ) { final WebViewFragment f = new WebViewFragment ( ) ;", "gt": "final Bundle bundle = new Bundle ( 1 ) ; \n bundle . putString ( \" <STR_LIT> \" , html ) ; \n f . setArguments ( bundle ) ; \n return f ; \n }", "repo": "RedReader", "task_id": "RedReader/587"}
{"input": "<s> @ Override public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "mUrl = getArguments ( ) . getString ( \" <STR_LIT> \" ) ; \n html = getArguments ( ) . getString ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/588"}
{"input": "<s> private boolean onEncounteredIntentUrl ( final String url ) { final Intent nativeAppIntent ; try { nativeAppIntent = Intent . parseUri ( url , Intent . URI_INTENT_SCHEME ) ; } catch ( final URISyntaxException e ) { return false ; } if ( nativeAppIntent = = null ) { return false ; } final String fallbackUrl = nativeAppIntent . getStringExtra ( \" <STR_LIT> \" ) ; if ( fallbackUrl = = null ) { return false ;", "gt": "} \n webView . loadUrl ( fallbackUrl ) ; \n currentUrl = fallbackUrl ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/590"}
{"input": "<s> private boolean onEncounteredCustomSchemeUrl ( final String url ) { final Intent nativeAppIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ; try { startActivity ( nativeAppIntent ) ;", "gt": "return true ; \n } catch ( final ActivityNotFoundException e ) { \n return false ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/591"}
{"input": "<s> @ Override public void onPageStarted ( final WebView view , final String url , final Bitmap favicon ) { super . onPageStarted ( view , url , favicon ) ; if ( mUrl ! = null & & url ! = null ) { final AppCompatActivity activity = mActivity ;", "gt": "if ( activity ! = null ) { \n activity . setTitle ( url ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/592"}
{"input": "<s> @ Override public boolean onTap ( ) { if ( toolbarOverlay . isShown ( ) ) {", "gt": "toolbarOverlay . hide ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/594"}
{"input": "<s> public boolean onBackButtonPressed ( ) { if ( webView . canGoBack ( ) ) { goingBack = true ; lastBackDepthAttempt = - 1 ;", "gt": "webView . goBack ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/596"}
{"input": "<s> @ Override public void onPause ( ) { super . onPause ( ) ;", "gt": "webView . onPause ( ) ; \n webView . pauseTimers ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/597"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "webView . resumeTimers ( ) ; \n webView . onResume ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/598"}
{"input": "<s> @ NonNull public HTTPRequestBodyMultipart addPart ( @ NonNull final Part part ) {", "gt": "mParts . add ( part ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/599"}
{"input": "<s> public void forEachPart ( @ NonNull final Consumer < Part > consumer ) { for ( final Part part : mParts ) {", "gt": "consumer . consume ( part ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/600"}
{"input": "<s> @ NonNull public HTTPRequestBodyPostFields addField ( @ NonNull final PostField field ) {", "gt": "mPostFields . add ( field ) ; \n return this ; \n }", "repo": "RedReader", "task_id": "RedReader/601"}
{"input": "<s> @ NonNull public static Optional < FailedRequestBody > from ( @ NonNull final GenericFactory < SeekableInputStream , IOException > is ) { try {", "gt": "return from ( is . create ( ) ) ; \n } catch ( final IOException e ) { \n return Optional . empty ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/603"}
{"input": "<s> @ NonNull @ Override public synchronized String toString ( ) { if ( ! mString . isPresent ( ) ) { if ( mBytes . isPresent ( ) ) { mString = Optional . of ( new String ( mBytes . get ( ) , General . CHARSET_UTF8 ) ) ; } else if ( mJson . isPresent ( ) ) { mString = Optional . of ( mJson . toString ( ) ) ; } else {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ; \n } \n } \n return mString . get ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/604"}
{"input": "<s> @ NonNull public synchronized byte [ ] toBytes ( ) { if ( ! mBytes . isPresent ( ) ) { mBytes = Optional . of ( toString ( ) . getBytes ( General . CHARSET_UTF8 ) ) ;", "gt": "} \n return mBytes . get ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/605"}
{"input": "<s> private Socket enableTLS1_2 ( final Socket s ) { if ( s instanceof SSLSocket ) { ( ( SSLSocket ) s ) . setEnabledProtocols ( TLS_V1_2_ONLY ) ;", "gt": "} \n return s ; \n }", "repo": "RedReader", "task_id": "RedReader/607"}
{"input": "<s> @ NonNull @ Override public List < Cookie > loadForRequest ( final HttpUrl url ) { if ( url . toString ( ) . contains ( \" <STR_LIT> \" ) ) {", "gt": "return list ; \n } else { \n return Collections . emptyList ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/608"}
{"input": "<s> public static synchronized HTTPBackend getHttpBackend ( ) { if ( httpBackend = = null ) { httpBackend = new OKHTTPBackend ( ) ;", "gt": "} \n return httpBackend ; \n }", "repo": "RedReader", "task_id": "RedReader/609"}
{"input": "<s> @ NonNull @ Override public Void visitPart ( @ NonNull final PartFormData part ) {", "gt": "builder . addFormDataPart ( part . name , part . value ) ; \n return Void . INSTANCE ; \n }", "repo": "RedReader", "task_id": "RedReader/610"}
{"input": "<s> @ Override public void cancel ( ) { cancelled . set ( true ) ;", "gt": "final Call call = callRef . getAndSet ( null ) ; \n if ( call ! = null ) { \n call . cancel ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/612"}
{"input": "<s> public static String encodeList ( final List < PostField > fields ) { final StringBuilder result = new StringBuilder ( ) ; for ( final PostField field : fields ) { if ( result . length ( ) > 0 ) { result . append ( <CHAR_LIT> ) ;", "gt": "} \n result . append ( field . encode ( ) ) ; \n } \n return result . toString ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/614"}
{"input": "<s> @ Override public void handleMessage ( @ NonNull final Message msg ) { if ( playing & & view ! = null ) {", "gt": "view . setImageBitmap ( ( Bitmap ) msg . obj ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/617"}
{"input": "<s> public void stopPlaying ( ) { playing = false ; interrupt ( ) ; try {", "gt": "is . close ( ) ; \n } catch ( final Throwable t ) { \n Log . e ( TAG , \" <STR_LIT> \" , t ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/618"}
{"input": "<s> @ Override public void run ( ) { try { decoder . read ( is ) ; loaded . set ( true ) ;", "gt": "} catch ( final Throwable t ) { \n Log . i ( TAG , \" <STR_LIT> \" , t ) ; \n failed . set ( true ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/619"}
{"input": "<s> @ NonNull public static HasAudio fromBoolean ( @ Nullable final Boolean value ) { if ( value = = null ) { return MAYBE_AUDIO ; } if ( value ) {", "gt": "return HAS_AUDIO ; \n } else { \n return NO_AUDIO ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/620"}
{"input": "<s> fun addToCache ( post : RedditPost ) { AlbumInfo . parseRedditGallery ( post ) ? . apply { synchronized ( cache ) {", "gt": "cache . remove ( post . id ) \n cache . put ( post . id , this ) \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/625"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( ! mNotifiedFailure . getAndSet ( true ) ) {", "gt": "listener . onFailure ( error ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/626"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ; \n listener . onFailure ( error ) ; \n }", "repo": "RedReader", "task_id": "RedReader/629"}
{"input": "<s> private static Bitmap scaleAndCrop ( final Bitmap src , final int w , final int h , final int newWidth ) { final float scaleFactor = ( float ) newWidth / ( float ) w ; final Bitmap scaled = Bitmap . createScaledBitmap ( src , Math . round ( scaleFactor * src . getWidth ( ) ) , Math . round ( scaleFactor * src . getHeight ( ) ) , true ) ; final Bitmap result = Bitmap . createBitmap ( scaled , 0 , 0 , newWidth , Math . round ( ( float ) h * scaleFactor ) ) ;", "gt": "if ( result ! = scaled ) { \n scaled . recycle ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/631"}
{"input": "<s> @ Nullable public Boolean readNullableBoolean ( ) throws IOException { if ( ! readBoolean ( ) ) { return null ;", "gt": "} \n return readBoolean ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/633"}
{"input": "<s> public void writeNullableBoolean ( @ Nullable final Boolean value ) throws IOException { if ( value = = null ) { writeBoolean ( false ) ;", "gt": "} else { \n writeBoolean ( true ) ; \n writeBoolean ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/634"}
{"input": "<s> private synchronized void put ( final V value , final boolean writeDown ) { final CacheEntry oldEntry = cached . get ( value . getKey ( ) ) ; if ( oldEntry ! = null ) { cached . put ( value . getKey ( ) , new CacheEntry ( value , oldEntry . listeners ) ) ; oldEntry . listeners . map ( updatedVersionListenerNotifier , value ) ; } else { cached . put ( value . getKey ( ) , new CacheEntry ( value ) ) ;", "gt": "} \n if ( writeDown ) { \n cacheDataSource . performWrite ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/638"}
{"input": "<s> private synchronized void put ( final Collection < V > values , final boolean writeDown ) { for ( final V value : values ) { final CacheEntry oldEntry = cached . get ( value . getKey ( ) ) ; if ( oldEntry ! = null ) { cached . put ( value . getKey ( ) , new CacheEntry ( value , oldEntry . listeners ) ) ; oldEntry . listeners . map ( updatedVersionListenerNotifier , value ) ; } else { cached . put ( value . getKey ( ) , new CacheEntry ( value ) ) ; }", "gt": "} \n if ( writeDown ) { \n cacheDataSource . performWrite ( values ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/639"}
{"input": "<s> private static < E > int getDbVersion ( final Class < E > clazz ) { for ( final Field field : clazz . getDeclaredFields ( ) ) { if ( field . isAnnotationPresent ( WritableObject . WritableObjectVersion . class ) ) { field . setAccessible ( true ) ; try { return field . getInt ( null ) ; } catch ( final IllegalAccessException e ) { throw new RuntimeException ( e ) ;", "gt": "} \n } \n } \n throw new UnexpectedInternalStateException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/640"}
{"input": "<s> private String getFieldTypeString ( final Class < ? > fieldType ) { if ( fieldType = = Integer . class | | fieldType = = Long . class | | fieldType = = Integer . TYPE | | fieldType = = Long . TYPE ) { return \" <STR_LIT> \" ; } else if ( fieldType = = Boolean . class | | fieldType = = Boolean . TYPE ) {", "gt": "return \" <STR_LIT> \" ; \n } else { \n return \" <STR_LIT> \" ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/641"}
{"input": "<s> public synchronized Collection < E > getAll ( ) { try ( SQLiteDatabase db = getReadableDatabase ( ) ) { try ( Cursor cursor = db . query ( TABLE_NAME , fieldNames , null , null , null , null , null ) ) { final LinkedList < E > result = new LinkedList < > ( ) ; while ( cursor . moveToNext ( ) ) { result . add ( readFromCursor ( cursor ) ) ; } return result ;", "gt": "} catch ( final Exception e ) { \n throw new RuntimeException ( e ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/642"}
{"input": "<s> public synchronized E getById ( final K id ) { final ArrayList < E > queryResult = getByField ( FIELD_ID , id . toString ( ) ) ; if ( queryResult . size ( ) ! = 1 ) {", "gt": "return null ; \n } else { \n return queryResult . get ( 0 ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/643"}
{"input": "<s> public synchronized void put ( final E object ) { final SQLiteDatabase db = getWritableDatabase ( ) ; try { final ContentValues values = new ContentValues ( fields . length + 1 ) ; final long result = db . insertOrThrow ( TABLE_NAME , null , toContentValues ( object , values ) ) ; if ( result < 0 ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } } catch ( final IllegalAccessException e ) {", "gt": "throw new RuntimeException ( e ) ; \n } finally { \n db . close ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/644"}
{"input": "<s> @ NonNull public static synchronized RedditChangeDataIO getInstance ( final Context context ) { if ( INSTANCE = = null ) { INSTANCE = new RedditChangeDataIO ( context . getApplicationContext ( ) ) ; if ( STATIC_UPDATE_PENDING ) {", "gt": "INSTANCE . notifyUpdate ( ) ; \n } \n } \n return INSTANCE ; \n }", "repo": "RedReader", "task_id": "RedReader/645"}
{"input": "<s> public static synchronized void notifyUpdateStatic ( ) { if ( INSTANCE ! = null ) {", "gt": "INSTANCE . notifyUpdate ( ) ; \n } else { \n STATIC_UPDATE_PENDING = true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/646"}
{"input": "<s> private void notifyUpdate ( ) { synchronized ( mLock ) { if ( mIsInitialReadComplete ) { triggerUpdate ( ) ;", "gt": "} else { \n mUpdatePending = true ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/647"}
{"input": "<s> private void notifyInitialReadComplete ( ) { synchronized ( mLock ) { mIsInitialReadComplete = true ; if ( mUpdatePending ) {", "gt": "triggerUpdate ( ) ; \n mUpdatePending = false ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/648"}
{"input": "<s> private void doWrite ( ) { synchronized ( ioLock ) { final ArrayList < V > values ; synchronized ( toWrite ) { values = new ArrayList < > ( toWrite . values ( ) ) ;", "gt": "toWrite . clear ( ) ; \n } \n db . putAll ( values ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/649"}
{"input": "<s> private void doRead ( ) { synchronized ( ioLock ) {", "gt": "while ( ! toRead . isEmpty ( ) ) { \n toRead . remove ( ) . run ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/650"}
{"input": "<s> @ Override public void performRequest ( final K key , final TimestampBound timestampBound , final RequestResponseHandler < V , F > handler ) {", "gt": "toRead . offer ( new SingleReadOperation ( timestampBound , handler , key ) ) ; \n readThread . trigger ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/651"}
{"input": "<s> @ Override public void performRequest ( final Collection < K > keys , final TimestampBound timestampBound , final RequestResponseHandler < HashMap < K , V > , F > handler ) {", "gt": "toRead . offer ( new BulkReadOperation ( timestampBound , handler , keys ) ) ; \n readThread . trigger ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/652"}
{"input": "<s> @ Override public void performWrite ( final V value ) { synchronized ( toWrite ) { toWrite . put ( value . getKey ( ) , value ) ;", "gt": "} \n writeThread . trigger ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/653"}
{"input": "<s> @ Override public void performWrite ( final Collection < V > values ) { synchronized ( toWrite ) { for ( final V value : values ) {", "gt": "toWrite . put ( value . getKey ( ) , value ) ; \n } \n } \n writeThread . trigger ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/654"}
{"input": "<s> @ Override public void onRequestSuccess ( final HashMap < K , V > result , final TimestampUTC timeCached ) { final TimestampUTC timestamp = outerOldestTimestamp = = null ? timeCached : TimestampUTC . oldest ( outerOldestTimestamp , timeCached ) ; performWrite ( result . values ( ) ) ;", "gt": "existingResult . putAll ( result ) ; \n responseHandler . onRequestSuccess ( existingResult , timestamp ) ; \n }", "repo": "RedReader", "task_id": "RedReader/655"}
{"input": "<s> @ Override public void onRequestSuccess ( final V result , final TimestampUTC timeCached ) {", "gt": "performWrite ( result ) ; \n responseHandler . onRequestSuccess ( result , timeCached ) ; \n }", "repo": "RedReader", "task_id": "RedReader/656"}
{"input": "<s> private synchronized void put ( final V value , final boolean writeDown ) { final CacheEntry oldEntry = cached . get ( value . getKey ( ) ) ; if ( oldEntry ! = null ) { cached . put ( value . getKey ( ) , new CacheEntry ( new WeakReference < > ( value ) , oldEntry . listeners ) ) ; oldEntry . listeners . map ( updatedVersionListenerNotifier , value ) ; } else { cached . put ( value . getKey ( ) , new CacheEntry ( new WeakReference < > ( value ) ) ) ;", "gt": "} \n if ( writeDown ) { \n cacheDataSource . performWrite ( value ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/660"}
{"input": "<s> public synchronized HashSet < String > toHashset ( ) { if ( hashSet ! = null ) { return hashSet ;", "gt": "} \n return ( hashSet = new HashSet < > ( escapedStringToList ( serialised ) ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/663"}
{"input": "<s> @ Override protected void prettyPrint ( final int indent , final StringBuilder sb ) { sb . append ( <CHAR_LIT:[> ) ; for ( int item = 0 ; item < mContents . size ( ) ; item + + ) { if ( item ! = 0 ) { sb . append ( <CHAR_LIT:U+002C> ) ; } sb . append ( <STR_LIT:\\n> ) ; for ( int i = 0 ; i < indent + 1 ; i + + ) { sb . append ( \" \" ) ; } mContents . get ( item ) . prettyPrint ( indent + 1 , sb ) ; } sb . append ( <STR_LIT:\\n> ) ;", "gt": "for ( int i = 0 ; i < indent ; i + + ) { \n sb . append ( \" \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/664"}
{"input": "<s> public void forEachObject ( final Consumer < JsonObject > consumer ) { for ( final JsonValue value : mContents ) {", "gt": "consumer . consume ( value . asObject ( ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/665"}
{"input": "<s> @ NonNull @ Override protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) { if ( offset = = keys . length ) { return Optional . of ( this ) ; } if ( ! ( keys [ offset ] instanceof Integer ) ) { return Optional . empty ( ) ; } final int key = ( Integer ) keys [ offset ] ; if ( key < 0 | | key > = mContents . size ( ) ) { return Optional . empty ( ) ; } final JsonValue next = mContents . get ( key ) ;", "gt": "if ( next = = null ) { \n return Optional . empty ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/666"}
{"input": "<s> @ NonNull @ Override public < E extends JsonDeserializable > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final E obj = clazz . getConstructor ( ) . newInstance ( ) ;", "gt": "populateObject ( obj ) ; \n return obj ; \n }", "repo": "RedReader", "task_id": "RedReader/667"}
{"input": "<s> @ Nullable public String getString ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/668"}
{"input": "<s> @ Nullable public Long getLong ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/669"}
{"input": "<s> @ Nullable public Double getDouble ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/670"}
{"input": "<s> @ Nullable public Boolean getBoolean ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/671"}
{"input": "<s> @ Nullable public JsonObject getObject ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/672"}
{"input": "<s> @ Nullable public < E extends JsonDeserializable > E getObject ( @ NonNull final String id , final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/673"}
{"input": "<s> @ Nullable public JsonArray getArray ( @ NonNull final String id ) { final JsonValue value = get ( id ) ;", "gt": "if ( value = = null ) { \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/674"}
{"input": "<s> @ NonNull @ Override protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) { if ( offset = = keys . length ) { return Optional . of ( this ) ; } final JsonValue next = properties . get ( keys [ offset ] . toString ( ) ) ;", "gt": "if ( next = = null ) { \n return Optional . empty ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/675"}
{"input": "<s> @ Nullable @ Override public Boolean asBoolean ( ) { final String lowercase = StringUtils . asciiLowercase ( mValue ) ; switch ( lowercase ) { case \" <STR_LIT> \" : case \" <STR_LIT> \" : case \" <STR_LIT:1> \" : return true ; case \" <STR_LIT> \" : case \" <STR_LIT> \" :", "gt": "case \" <STR_LIT:0> \" : \n return false ; \n } \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/676"}
{"input": "<s> @ Nullable @ Override public Double asDouble ( ) { try {", "gt": "return Double . parseDouble ( mValue ) ; \n } catch ( final NumberFormatException e ) { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/677"}
{"input": "<s> @ Nullable @ Override public Long asLong ( ) { try {", "gt": "return Long . parseLong ( mValue ) ; \n } catch ( final NumberFormatException e ) { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/678"}
{"input": "<s> @ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( ) ;", "gt": "prettyPrint ( 0 , sb ) ; \n return sb . toString ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/686"}
{"input": "<s> @ NonNull protected Optional < JsonValue > getAtPathInternal ( final int offset , final Object . . . keys ) {", "gt": "if ( offset = = keys . length ) { \n return Optional . of ( this ) ; \n }", "repo": "RedReader", "task_id": "RedReader/690"}
{"input": "<s> public void setSort ( final PostCommentSort s ) { if ( mUrl . pathType ( ) = = RedditURLParser . POST_COMMENT_LISTING_URL ) {", "gt": "mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/691"}
{"input": "<s> public void setSort ( final UserCommentSort s ) { if ( mUrl . pathType ( ) = = RedditURLParser . USER_COMMENT_LISTING_URL ) {", "gt": "mUrl = mUrl . asUserCommentListURL ( ) . order ( s ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/692"}
{"input": "<s> public final PostListingFragment get ( final AppCompatActivity parent , final boolean force , final Bundle savedInstanceState ) { if ( force ) { session = null ;", "gt": "} \n return new PostListingFragment ( parent , savedInstanceState , getUri ( ) , session , force ) ; \n }", "repo": "RedReader", "task_id": "RedReader/696"}
{"input": "<s> public final String multiredditName ( ) { if ( url . pathType ( ) = = RedditURLParser . MULTIREDDIT_POST_LISTING_URL ) { return url . asMultiredditPostListURL ( ) . name ;", "gt": "} \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/697"}
{"input": "<s> public final String multiredditUsername ( ) { if ( url . pathType ( ) = = RedditURLParser . MULTIREDDIT_POST_LISTING_URL ) { return url . asMultiredditPostListURL ( ) . username ;", "gt": "} \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/698"}
{"input": "<s> @ NonNull public Payload toPayload ( ) { final Payload result = new Payload ( ) ; result . setString ( ENTRY_ID , id ) ; result . setString ( ENTRY_TITLE , title ) ; if ( message ! = null ) { result . setString ( ENTRY_MESSAGE , message ) ;", "gt": "} \n result . setString ( ENTRY_URL , url ) ; \n result . setLong ( ENTRY_SHOW_UNTIL , showUntil . toUtcMs ( ) ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/699"}
{"input": "<s> @ NonNull private static byte [ ] sign ( @ NonNull final PrivateKey privateKey , @ NonNull final byte [ ] message ) throws NoSuchAlgorithmException , InvalidKeyException , SignatureException { final Signature signer = Signature . getInstance ( SIGNATURE_ALG ) ; signer . initSign ( privateKey ) ;", "gt": "signer . update ( message ) ; \n return signer . sign ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/701"}
{"input": "<s> private static void verify ( @ NonNull final PublicKey publicKey , @ NonNull final byte [ ] message , @ NonNull final byte [ ] signature ) throws NoSuchAlgorithmException , InvalidKeyException , SignatureException , SignatureInvalidException { final Signature signer = Signature . getInstance ( SIGNATURE_ALG ) ; signer . initVerify ( publicKey ) ;", "gt": "signer . update ( message ) ; \n if ( ! signer . verify ( signature ) ) { \n throw new SignatureInvalidException ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/702"}
{"input": "<s> @ Override public void onReceive ( final Context context , final Intent intent ) {", "gt": "checkForNewMessages ( context ) ; \n AnnouncementDownloader . performDownload ( context ) ; \n }", "repo": "RedReader", "task_id": "RedReader/704"}
{"input": "<s> @ Override public void run ( ) {", "gt": "RedditChangeDataManager . pruneAllUsersDefaultMaxAge ( ) ; \n CacheManager . getInstance ( context ) . pruneCache ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/706"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) {", "gt": "revertOnFailure ( ) ; \n General . showResultDialog ( activity , error ) ; \n }", "repo": "RedReader", "task_id": "RedReader/707"}
{"input": "<s> @ Override protected void onSuccess ( ) { if ( action = = RedditAPI . ACTION_DELETE ) {", "gt": "General . quickToast ( context , R . string . delete_success ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/708"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { synchronized ( result ) { if ( stillOkay . get ( ) ) {", "gt": "stillOkay . set ( false ) ; \n handler . onRequestFailed ( failureReason ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/709"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( handler ! = null ) {", "gt": "handler . onRequestFailed ( failureReason ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/715"}
{"input": "<s> public void removeListener ( ) { synchronized ( RedditSubredditSubscriptionManager . this ) {", "gt": "listeners . remove ( mListener ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/718"}
{"input": "<s> public synchronized ListenerContext addListener ( final SubredditSubscriptionStateChangeListener listener ) {", "gt": "listeners . add ( listener ) ; \n return new ListenerContext ( listener ) ; \n }", "repo": "RedReader", "task_id": "RedReader/720"}
{"input": "<s> private synchronized void onSubscriptionAttempt ( final SubredditCanonicalId id ) {", "gt": "pendingSubscriptions . add ( id ) ; \n listeners . map ( notifier , SubredditSubscriptionChangeType . SUBSCRIPTION_ATTEMPTED ) ; \n }", "repo": "RedReader", "task_id": "RedReader/722"}
{"input": "<s> private synchronized void onUnsubscriptionAttempt ( final SubredditCanonicalId id ) {", "gt": "pendingUnsubscriptions . add ( id ) ; \n listeners . map ( notifier , SubredditSubscriptionChangeType . UNSUBSCRIPTION_ATTEMPTED ) ; \n }", "repo": "RedReader", "task_id": "RedReader/723"}
{"input": "<s> private synchronized void onSubscriptionChangeAttemptFailed ( final SubredditCanonicalId id ) { pendingUnsubscriptions . remove ( id ) ;", "gt": "pendingSubscriptions . remove ( id ) ; \n listeners . map ( notifier , SubredditSubscriptionChangeType . LIST_UPDATED ) ; \n }", "repo": "RedReader", "task_id": "RedReader/724"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( onFailure ! = null ) {", "gt": "onFailure . apply ( failureReason ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/728"}
{"input": "<s> @ Override public void onRequestFailed ( final RRError failureReason ) { if ( handler ! = null ) {", "gt": "handler . onRequestFailed ( failureReason ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/729"}
{"input": "<s> @ Override protected void onFailure ( @ NonNull final RRError error ) { if ( error . httpStatus ! = null & & error . httpStatus = = <NUM_LIT> ) { if ( action = = RedditAPI . SUBSCRIPTION_ACTION_SUBSCRIBE | | action = = RedditAPI . SUBSCRIPTION_ACTION_UNSUBSCRIBE ) { onSuccess ( ) ; return ;", "gt": "} \n } \n onSubscriptionChangeAttemptFailed ( canonicalName ) ; \n General . showResultDialog ( activity , error ) ; \n }", "repo": "RedReader", "task_id": "RedReader/733"}
{"input": "<s> fun getContextUrl ( ) : PostCommentListingURL { return context ? . run { var result = decoded if ( result . startsWith ( \" <STR_LIT:/> \" ) ) { result = \" <STR_LIT> \" } if ( result . startsWith ( \" <STR_LIT:/> \" ) ) { result = \" <STR_LIT> \" } PostCommentListingURL . parse ( Uri . parse ( result ) ) } ? : PostCommentListingURL ( null , link_id , idAlone , <NUM_LIT:3> ,", "gt": "null , \n null , \n false \n ) \n }", "repo": "RedReader", "task_id": "RedReader/742"}
{"input": "<s> fun getMoreUrls ( commentListingURL : RedditURL ) : List < PostCommentListingURL > { val urls = ArrayList < PostCommentListingURL > ( <NUM_LIT:16> ) if ( commentListingURL . pathType ( ) = = RedditURLParser . POST_COMMENT_LISTING_URL ) { if ( count > 0 ) { for ( child in children ) { urls . add ( commentListingURL . asPostCommentListURL ( ) . commentId ( child ) ) } } else {", "gt": "urls . add ( commentListingURL . asPostCommentListURL ( ) . commentId ( parent_id ) ) \n } \n } \n return urls \n }", "repo": "RedReader", "task_id": "RedReader/747"}
{"input": "<s> public static PostCommentSort lookup ( String name ) { name = StringUtils . asciiUppercase ( name ) ; if ( name . equals ( \" <STR_LIT> \" ) ) { return BEST ; } try {", "gt": "return PostCommentSort . valueOf ( name ) ; \n } catch ( final IllegalArgumentException e ) { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/750"}
{"input": "<s> @ Nullable @ Override protected View . OnLongClickListener generateOnLongClickListener ( @ NonNull final BaseActivity activity , @ Nullable final Integer textColor , @ Nullable final Float textSize , final boolean showLinkButtons ) { return ( button ) - > { LinkHandler . onLinkLongClicked ( activity , mDetails . url ) ;", "gt": "return true ; \n } ; \n }", "repo": "RedReader", "task_id": "RedReader/752"}
{"input": "<s> @ Override public void addSpanDynamic ( final Object what , final int start , final int end , final int flags ) { AndroidCommon . runOnUiThread ( ( ) - > { mSpanned . setSpan ( what , start , end , flags ) ;", "gt": "if ( mTextView ! = null ) { \n mTextView . setText ( mSpanned ) ; \n } \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/753"}
{"input": "<s> @ NonNull public final String getButtonTitle ( ) { if ( name = = null | | name . isEmpty ( ) ) {", "gt": "return url ; \n } else { \n return name ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/755"}
{"input": "<s> @ Nullable public final String getButtonSubtitle ( ) { if ( name = = null | | name . isEmpty ( ) ) {", "gt": "return null ; \n } else { \n return url ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/756"}
{"input": "<s> @ NonNull public final String getPlainText ( ) { final StringBuilder sb = new StringBuilder ( ) ;", "gt": "getPlainText ( sb ) ; \n return sb . toString ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/757"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/758"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/760"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/763"}
{"input": "<s> public static HtmlRawElementStyledText create ( @ NonNull final String text ) { final ArrayList < CharacterStyle > spans = new ArrayList < > ( ) ; spans . add ( new BackgroundColorSpan ( Color . RED ) ) ;", "gt": "spans . add ( new ForegroundColorSpan ( Color . WHITE ) ) ; \n return new HtmlRawElementStyledText ( text , spans ) ; \n }", "repo": "RedReader", "task_id": "RedReader/764"}
{"input": "<s> @ NonNull public static HtmlRawElementTagPassthrough appendError ( @ NonNull final String text , @ NonNull final HtmlRawElement element ) { final ArrayList < HtmlRawElement > children = new ArrayList < > ( ) ; children . add ( element ) ;", "gt": "children . add ( HtmlRawElementInlineErrorMessage . create ( text ) ) ; \n return new HtmlRawElementTagPassthrough ( children ) ; \n }", "repo": "RedReader", "task_id": "RedReader/765"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/766"}
{"input": "<s> @ Override public void generate ( @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < BodyElement > destination ) { final ArrayList < BodyElement > elements = new ArrayList < > ( ) ;", "gt": "mChild . generate ( activity , elements ) ; \n destination . add ( new BodyElementQuote ( elements ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/769"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/772"}
{"input": "<s> @ Override public void generate ( @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < BodyElement > destination ) { final ArrayList < BodyElement > elements = new ArrayList < > ( ) ;", "gt": "mChild . generate ( activity , elements ) ; \n destination . add ( new BodyElementTableCell ( elements ) ) ; \n }", "repo": "RedReader", "task_id": "RedReader/775"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/776"}
{"input": "<s> @ Override public void getPlainText ( @ NonNull final StringBuilder stringBuilder ) { for ( final HtmlRawElement element : mChildren ) {", "gt": "element . getPlainText ( stringBuilder ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/780"}
{"input": "<s> @ Override public final void reduce ( @ NonNull final HtmlTextAttributes activeAttributes , @ NonNull final AppCompatActivity activity , @ NonNull final ArrayList < HtmlRawElement > destination , @ NonNull final ArrayList < LinkButtonDetails > linkButtons ) { onStart ( activeAttributes ) ; try { for ( final HtmlRawElement child : mChildren ) { child . reduce ( activeAttributes , activity , destination , linkButtons ) ; }", "gt": "} finally { \n onEnd ( activeAttributes ) ; \n } \n onLinkButtons ( linkButtons ) ; \n }", "repo": "RedReader", "task_id": "RedReader/781"}
{"input": "<s> @ Override protected void onStart ( @ NonNull final HtmlTextAttributes activeAttributes ) {", "gt": "activeAttributes . bold + + ; \n activeAttributes . extraLarge + + ; \n }", "repo": "RedReader", "task_id": "RedReader/782"}
{"input": "<s> @ Override protected void onEnd ( @ NonNull final HtmlTextAttributes activeAttributes ) {", "gt": "activeAttributes . bold - - ; \n activeAttributes . extraLarge - - ; \n }", "repo": "RedReader", "task_id": "RedReader/783"}
{"input": "<s> @ Override protected void onStart ( @ NonNull final HtmlTextAttributes activeAttributes ) {", "gt": "activeAttributes . bold + + ; \n activeAttributes . large + + ; \n }", "repo": "RedReader", "task_id": "RedReader/784"}
{"input": "<s> @ Override protected void onEnd ( @ NonNull final HtmlTextAttributes activeAttributes ) {", "gt": "activeAttributes . bold - - ; \n activeAttributes . large - - ; \n }", "repo": "RedReader", "task_id": "RedReader/785"}
{"input": "<s> private static boolean isNameChar ( final char c ) { switch ( c ) { case 0 : case <CHAR_LIT> : case <STR_LIT> : case <CHAR_LIT:\"> : case <CHAR_LIT:>> : case <CHAR_LIT:/> : case <CHAR_LIT:=> :", "gt": "return false ; \n default : \n return true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/786"}
{"input": "<s> private boolean tryAccept ( final char c ) { if ( mPos < mHtml . length ( ) & & mHtml . charAt ( mPos ) = = c ) {", "gt": "mPos + + ; \n return true ; \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/788"}
{"input": "<s> private void skipWhitespace ( ) { while ( mPos < mHtml . length ( ) & & isWhitespace ( mHtml . charAt ( mPos ) ) ) {", "gt": "mPos + + ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/790"}
{"input": "<s> private void skipNewlines ( ) { while ( mPos < mHtml . length ( ) & & mHtml . charAt ( mPos ) = = <STR_LIT:\\n> ) {", "gt": "mPos + + ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/791"}
{"input": "<s> public HtmlReader . Token advance ( ) throws MalformedHtmlException {", "gt": "mNext = mHtmlReader . readNext ( ) ; \n return mNext ; \n }", "repo": "RedReader", "task_id": "RedReader/792"}
{"input": "<s> public CharArrSubstring rejoin ( final CharArrSubstring toAppend ) { if ( toAppend . start - 1 ! = start + length ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n return new CharArrSubstring ( arr , start , length + 1 + toAppend . length ) ; \n }", "repo": "RedReader", "task_id": "RedReader/794"}
{"input": "<s> private static int indexOfLinebreak ( final char [ ] raw , final int startPos ) { for ( int i = startPos ; i < raw . length ; i + + ) { if ( raw [ i ] = = <STR_LIT:\\n> ) {", "gt": "return i ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/795"}
{"input": "<s> public int countSpacesAtStart ( ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + i ] ! = <CHAR_LIT> ) {", "gt": "return i ; \n } \n } \n return length ; \n }", "repo": "RedReader", "task_id": "RedReader/796"}
{"input": "<s> public int countSpacesAtEnd ( ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + length - 1 - i ] ! = <CHAR_LIT> ) {", "gt": "return i ; \n } \n } \n return length ; \n }", "repo": "RedReader", "task_id": "RedReader/797"}
{"input": "<s> public int countPrefixLengthIgnoringSpaces ( final char c ) { for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + i ] ! = <CHAR_LIT> & & arr [ start + i ] ! = c ) {", "gt": "return i ; \n } \n } \n return length ; \n }", "repo": "RedReader", "task_id": "RedReader/798"}
{"input": "<s> public int countPrefixLevelIgnoringSpaces ( final char c ) { int level = 0 ; for ( int i = 0 ; i < length ; i + + ) { if ( arr [ start + i ] ! = <CHAR_LIT> & & arr [ start + i ] ! = c ) { return level ; } else if ( arr [ start + i ] = = c ) {", "gt": "level + + ; \n } \n } \n return length ; \n }", "repo": "RedReader", "task_id": "RedReader/799"}
{"input": "<s> public boolean isRepeatingChar ( final char c , final int start , final int len ) { for ( int i = 0 ; i < len ; i + + ) { if ( arr [ i + start + this . start ] ! = c ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/801"}
{"input": "<s> public boolean equalAt ( final int position , final String needle ) { if ( length < position + needle . length ( ) ) { return false ; } for ( int i = 0 ; i < needle . length ( ) ; i + + ) { if ( needle . charAt ( i ) ! = arr [ start + position + i ] ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/802"}
{"input": "<s> public void replaceUnicodeSpaces ( ) { for ( int i = 0 ; i < length ; i + + ) {", "gt": "if ( MarkdownTokenizer . isUnicodeWhitespace ( arr [ start + i ] ) ) { \n arr [ start + i ] = <CHAR_LIT> ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/803"}
{"input": "<s> public void append ( final int [ ] arr ) {", "gt": "System . arraycopy ( arr , 0 , data , pos , arr . length ) ; \n pos + = arr . length ; \n }", "repo": "RedReader", "task_id": "RedReader/804"}
{"input": "<s> public void append ( final char [ ] arr ) { for ( int i = 0 ; i < arr . length ; i + + ) { data [ pos + i ] = arr [ i ] ;", "gt": "} \n pos + = arr . length ; \n }", "repo": "RedReader", "task_id": "RedReader/805"}
{"input": "<s> public int [ ] substringAsArray ( final int start ) { final int [ ] result = new int [ pos - start ] ;", "gt": "System . arraycopy ( data , start , result , 0 , result . length ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/806"}
{"input": "<s> private static int indexOf ( final int [ ] haystack , final int needle , final int startPos ) { for ( int i = startPos ; i < haystack . length ; i + + ) { if ( haystack [ i ] = = needle ) {", "gt": "return i ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/809"}
{"input": "<s> public boolean isEmpty ( ) { if ( type = = MarkdownParser . MarkdownParagraphType . HLINE ) { return false ; } if ( type = = MarkdownParser . MarkdownParagraphType . EMPTY ) { return true ; } if ( tokens = = null ) { return raw . countSpacesAtStart ( ) = = raw . length ; } else { for ( final int token : tokens ) { if ( ! MarkdownTokenizer . isUnicodeWhitespace ( token ) ) { return false ;", "gt": "} \n } \n return true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/810"}
{"input": "<s> public static IntArrayLengthPair tokenize ( final CharArrSubstring input ) { final IntArrayLengthPair tmp1 = new IntArrayLengthPair ( input . length * <NUM_LIT:3> ) ; final IntArrayLengthPair tmp2 = new IntArrayLengthPair ( input . length * <NUM_LIT:3> ) ; tmp1 . pos = input . length ; for ( int i = 0 ; i < input . length ; i + + ) { tmp1 . data [ i ] = input . charAt ( i ) ; } naiveTokenize ( tmp1 , tmp2 ) ;", "gt": "clean ( tmp2 , tmp1 ) ; \n linkify ( tmp1 , tmp2 ) ; \n clean ( tmp2 , tmp1 ) ; \n return tmp1 ; \n }", "repo": "RedReader", "task_id": "RedReader/811"}
{"input": "<s> private static int findParenClosePos ( final IntArrayLengthPair tokens , final int startPos ) { for ( int i = startPos ; i < tokens . pos ; i + + ) { switch ( tokens . data [ i ] ) { case TOKEN_PAREN_CLOSE : return i ; case <CHAR_LIT:\"> : i = indexOfIgnoreEscaped ( tokens , <CHAR_LIT:\"> , i + 1 ) ; if ( i < 0 ) { return - 1 ; }", "gt": "break ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/812"}
{"input": "<s> private static int indexOfIgnoreEscaped ( final IntArrayLengthPair haystack , final int needle , final int startPos ) { for ( int i = startPos ; i < haystack . pos ; i + + ) { if ( haystack . data [ i ] = = <STR_LIT:\\\\> ) { i + + ; } else if ( haystack . data [ i ] = = needle ) {", "gt": "return i ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/813"}
{"input": "<s> private static int indexOf ( final int [ ] haystack , final int needle , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] = = needle ) {", "gt": "return i ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/814"}
{"input": "<s> public static int findCloseWellBracketed ( final int [ ] haystack , final int openBracket , final int closeBracket , final int startInclusive , final int endExclusive ) { if ( haystack [ startInclusive ] ! = openBracket ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } int b = 1 ; for ( int i = startInclusive + 1 ; i < endExclusive ; i + + ) { if ( haystack [ i ] = = openBracket ) { b + + ; } else if ( haystack [ i ] = = closeBracket ) { b - - ; } if ( b = = 0 ) {", "gt": "return i ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/815"}
{"input": "<s> private static boolean isSpaces ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] ! = <CHAR_LIT> ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/816"}
{"input": "<s> private static boolean isDigits ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { if ( haystack [ i ] < <CHAR_LIT:0> | | haystack [ i ] > <CHAR_LIT:9> ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/817"}
{"input": "<s> private static boolean isHexDigits ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { for ( int i = startInclusive ; i < endExclusive ; i + + ) { final int c = haystack [ i ] ; if ( ( c < <CHAR_LIT:0> | | c > <CHAR_LIT:9> ) & & ( c < <CHAR_LIT:a> | | c > <CHAR_LIT> ) & & ( c < <CHAR_LIT:A> | | c > <CHAR_LIT> ) ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/818"}
{"input": "<s> private static int getDecimal ( final int [ ] chars , final int startInclusive , final int endExclusive ) { int result = 0 ; for ( int i = startInclusive ; i < endExclusive ; i + + ) {", "gt": "result * = <NUM_LIT:10> ; \n result + = chars [ i ] - <CHAR_LIT:0> ; \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/819"}
{"input": "<s> private static int fromHex ( final int ch ) { if ( ch > = <CHAR_LIT:0> & & ch < = <CHAR_LIT:9> ) { return ch - <CHAR_LIT:0> ; }", "gt": "if ( ch > = <CHAR_LIT:a> & & ch < = <CHAR_LIT> ) { \n return <NUM_LIT:10> + ch - <CHAR_LIT:a> ; \n }", "repo": "RedReader", "task_id": "RedReader/820"}
{"input": "<s> private static int getHex ( final int [ ] chars , final int startInclusive , final int endExclusive ) { int result = 0 ; for ( int i = startInclusive ; i < endExclusive ; i + + ) {", "gt": "result * = <NUM_LIT:16> ; \n result + = fromHex ( chars [ i ] ) ; \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/821"}
{"input": "<s> private static boolean equals ( final int [ ] haystack , final char [ ] needle , final int startInclusive ) { for ( int i = 0 ; i < needle . length ; i + + ) { if ( haystack [ startInclusive + i ] ! = needle [ i ] ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/822"}
{"input": "<s> private static int getLinkStartType ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { final int maxLen = endExclusive - startInclusive ; for ( int type = 0 ; type < linkPrefixes . length ; type + + ) { if ( linkPrefixes [ type ] . length < = maxLen & & equals ( haystack , linkPrefixes [ type ] , startInclusive ) ) {", "gt": "return type ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/823"}
{"input": "<s> private static int getRedditLinkStartType ( final int [ ] haystack , final int startInclusive , final int endExclusive ) { final int maxLen = endExclusive - startInclusive ; for ( int type = 0 ; type < linkPrefixes_reddit . length ; type + + ) { if ( linkPrefixes_reddit [ type ] . length < = maxLen & & equals ( haystack , linkPrefixes_reddit [ type ] , startInclusive ) ) {", "gt": "return type ; \n } \n } \n return - 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/824"}
{"input": "<s> @ NonNull public static RedditChangeDataManager getInstance ( final RedditAccount user ) { synchronized ( INSTANCE_MAP ) { RedditChangeDataManager result = INSTANCE_MAP . get ( user ) ; if ( result = = null ) { result = new RedditChangeDataManager ( ) ;", "gt": "INSTANCE_MAP . put ( user , result ) ; \n } \n return result ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/825"}
{"input": "<s> private static HashMap < RedditAccount , HashMap < RedditIdAndType , Entry > > snapshotAllUsers ( ) { final HashMap < RedditAccount , HashMap < RedditIdAndType , Entry > > result = new HashMap < > ( ) ; synchronized ( INSTANCE_MAP ) { for ( final RedditAccount account : INSTANCE_MAP . keySet ( ) ) {", "gt": "result . put ( account , getInstance ( account ) . snapshot ( ) ) ; \n } \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/826"}
{"input": "<s> private Entry get ( final RedditIdAndType thing ) { final Entry entry = mEntries . get ( thing ) ; if ( entry = = null ) {", "gt": "return Entry . CLEAR_ENTRY ; \n } else { \n return entry ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/831"}
{"input": "<s> public boolean isUpvoted ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isUpvoted ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/841"}
{"input": "<s> public boolean isDownvoted ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isDownvoted ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/842"}
{"input": "<s> public boolean isRead ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isRead ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/843"}
{"input": "<s> public boolean isSaved ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isSaved ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/844"}
{"input": "<s> public Boolean isHidden ( final RedditIdAndType thing ) { synchronized ( mLock ) {", "gt": "return get ( thing ) . isHidden ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/845"}
{"input": "<s> private HashMap < RedditIdAndType , Entry > snapshot ( ) { synchronized ( mLock ) {", "gt": "return new HashMap < > ( mEntries ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/846"}
{"input": "<s> public int computeScore ( ) { int score = src . getScoreExcludingOwnVote ( ) ; if ( isUpvoted ( ) ) { score + + ;", "gt": "} else if ( isDownvoted ( ) ) { \n score - - ; \n } \n return score ; \n }", "repo": "RedReader", "task_id": "RedReader/849"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( General . isSensitiveDebugLoggingEnabled ( ) ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" + uriStr + \" <STR_LIT> \" + error , error . t ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/851"}
{"input": "<s> public Bitmap getThumbnail ( final ThumbnailLoadedCallback callback , final int usageId ) { this . thumbnailCallback = callback ;", "gt": "this . usageId = usageId ; \n return thumbnailCache ; \n }", "repo": "RedReader", "task_id": "RedReader/852"}
{"input": "<s> public void bind ( final RedditPostView boundView ) {", "gt": "mBoundView = boundView ; \n mChangeDataManager . addListener ( src . getIdAndType ( ) , this ) ; \n }", "repo": "RedReader", "task_id": "RedReader/853"}
{"input": "<s> public void unbind ( final RedditPostView boundView ) { if ( mBoundView = = boundView ) { mBoundView = null ;", "gt": "mChangeDataManager . removeListener ( src . getIdAndType ( ) , this ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/854"}
{"input": "<s> @ Override public void onRedditDataChange ( final RedditIdAndType thingIdAndType ) { if ( mBoundView ! = null ) { final Context context = mBoundView . getContext ( ) ;", "gt": "if ( context ! = null ) { \n mBoundView . updateAppearance ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/855"}
{"input": "<s> private int computeScore ( final RedditChangeDataManager changeDataManager ) { final RedditComment rawComment = mComment . getRawComment ( ) ; int score = rawComment . getUps ( ) - rawComment . getDowns ( ) ; if ( Boolean . TRUE . equals ( rawComment . getLikes ( ) ) ) { score - - ; } if ( Boolean . FALSE . equals ( rawComment . getLikes ( ) ) ) { score + + ; } if ( changeDataManager . isUpvoted ( getIdAndType ( ) ) ) { score + + ;", "gt": "} else if ( changeDataManager . isDownvoted ( getIdAndType ( ) ) ) { \n score - - ; \n } \n return score ; \n }", "repo": "RedReader", "task_id": "RedReader/857"}
{"input": "<s> @ Override public void onFailure ( @ NonNull final RRError error ) { if ( error . httpStatus ! = null & & error . httpStatus = = <NUM_LIT> ) { responseHandler . onSubredditDoesNotExist ( ) ; } else if ( error . httpStatus ! = null & & error . httpStatus = = <NUM_LIT> ) {", "gt": "responseHandler . onSubredditPermissionDenied ( ) ; \n } else { \n responseHandler . onFailure ( error ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/862"}
{"input": "<s> @ Override public void onSuccess ( @ NonNull final Optional < String > redirectUrl , @ NonNull final Optional < String > thingId ) { if ( ! sendRepliesToInbox ) { thingId . ifPresent ( commentFullname - > sendReplies ( cm , inboxResponseHandler , user , commentFullname , false , context ) ) ;", "gt": "} \n responseHandler . onSuccess ( redirectUrl , thingId ) ; \n }", "repo": "RedReader", "task_id": "RedReader/864"}
{"input": "<s> public RedditRenderableComment asComment ( ) { if ( ! isComment ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n return mComment ; \n }", "repo": "RedReader", "task_id": "RedReader/872"}
{"input": "<s> public RedditMore asLoadMore ( ) { if ( ! isLoadMore ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n return mMoreComments ; \n }", "repo": "RedReader", "task_id": "RedReader/873"}
{"input": "<s> public boolean isCollapsed ( final RedditChangeDataManager changeDataManager ) { if ( ! isComment ( ) ) { return false ;", "gt": "} \n return mComment . isCollapsed ( changeDataManager ) ; \n }", "repo": "RedReader", "task_id": "RedReader/874"}
{"input": "<s> public boolean isHidden ( final RedditChangeDataManager changeDataManager ) { if ( mParent ! = null ) { return mParent . isCollapsed ( changeDataManager ) | | mParent . isHidden ( changeDataManager ) ;", "gt": "} \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/875"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final Context context = viewGroup . getContext ( ) ; final View view ; if ( isComment ( ) ) { view = new RedditCommentView ( mActivity , new RRThemeAttributes ( context ) , mFragment , mFragment ) ; } else if ( isLoadMore ( ) ) { view = new LoadMoreCommentsView ( context , mCommentListingUrl ) ; } else {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ; \n } \n return new RecyclerView . ViewHolder ( view ) { \n } ; \n }", "repo": "RedReader", "task_id": "RedReader/877"}
{"input": "<s> @ NonNull public static Optional < List < RedditFlairChoice > > fromJsonList ( @ NonNull final JsonArray json ) { final ArrayList < RedditFlairChoice > result = new ArrayList < > ( json . size ( ) ) ; for ( final JsonValue value : json ) { final JsonObject object = value . asObject ( ) ; if ( object = = null ) { return Optional . empty ( ) ; } final Optional < RedditFlairChoice > choice = fromJson ( object ) ; if ( choice . isEmpty ( ) ) { return Optional . empty ( ) ;", "gt": "} \n result . add ( choice . get ( ) ) ; \n } \n return Optional . of ( result ) ; \n }", "repo": "RedReader", "task_id": "RedReader/879"}
{"input": "<s> @ Override public void writeToParcel ( final Parcel dest , final int flags ) {", "gt": "dest . writeString ( text ) ; \n dest . writeString ( templateId ) ; \n }", "repo": "RedReader", "task_id": "RedReader/881"}
{"input": "<s> @ Override public RedditFlairChoice createFromParcel ( final Parcel in ) { final String text = in . readString ( ) ;", "gt": "final String templateId = in . readString ( ) ; \n return new RedditFlairChoice ( text , templateId ) ; \n }", "repo": "RedReader", "task_id": "RedReader/882"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final RedditPostView view = new RedditPostView ( mActivity , mFragment , mActivity , mLeftHandedMode ) ;", "gt": "return new RecyclerView . ViewHolder ( view ) { \n }", "repo": "RedReader", "task_id": "RedReader/884"}
{"input": "<s> public static synchronized ArrayList < SubredditCanonicalId > getSubredditsSorted ( final RedditAccount account ) { final ArrayList < SubredditCanonicalId > result = new ArrayList < > ( getForAccount ( account ) ) ;", "gt": "Collections . sort ( result ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/886"}
{"input": "<s> public static synchronized RedditSubredditManager getInstance ( final Context context , final RedditAccount user ) { if ( singleton = = null | | ! user . equals ( singletonUser ) ) {", "gt": "singletonUser = user ; \n singleton = new RedditSubredditManager ( context , user ) ; \n } \n return singleton ; \n }", "repo": "RedReader", "task_id": "RedReader/887"}
{"input": "<s> public static String stripRPrefix ( final String name ) throws InvalidSubredditNameException { final Matcher matcher = NAME_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) {", "gt": "return matcher . group ( <NUM_LIT:3> ) ; \n } else { \n throw new InvalidSubredditNameException ( name ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/891"}
{"input": "<s> public static String stripUserPrefix ( final String name ) { final Matcher matcher = USER_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) {", "gt": "return matcher . group ( <NUM_LIT:2> ) ; \n } else { \n return null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/892"}
{"input": "<s> public String getUrl ( ) { if ( url ! = null ) { return url ;", "gt": "} \n return \" <STR_LIT> \" + display_name ; \n }", "repo": "RedReader", "task_id": "RedReader/893"}
{"input": "<s> @ Nullable public String getIconUrl ( ) { if ( icon_img = = null ) {", "gt": "return null ; \n } else { \n return StringEscapeUtils . unescapeHtml4 ( icon_img ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/896"}
{"input": "<s> public String getDisplayNameLowercase ( ) { if ( mId . startsWith ( \" <STR_LIT> \" ) ) { return mId ;", "gt": "} \n return mId . substring ( <NUM_LIT:3> ) ; \n }", "repo": "RedReader", "task_id": "RedReader/898"}
{"input": "<s> @ Override public String humanReadableName ( final Context context , final boolean shorter ) { if ( username = = null ) {", "gt": "return name ; \n } else { \n return String . format ( Locale . US , \" <STR_LIT> \" , name , username ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/902"}
{"input": "<s> public PostCommentListingURL commentId ( String commentId ) { if ( commentId ! = null & & commentId . startsWith ( \" <STR_LIT> \" ) ) { commentId = commentId . substring ( <NUM_LIT:3> ) ;", "gt": "} \n return new PostCommentListingURL ( after , postId , commentId , context , limit , order , video ) ; \n }", "repo": "RedReader", "task_id": "RedReader/903"}
{"input": "<s> public Uri generateNonJsonUri ( ) { final Uri . Builder builder = new Uri . Builder ( ) ; builder . scheme ( Constants . Reddit . getScheme ( ) ) . authority ( Constants . Reddit . getHumanReadableDomain ( ) ) ;", "gt": "internalGenerateCommon ( builder ) ; \n return builder . build ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/905"}
{"input": "<s> public static RedditURL parseProbableCommentListing ( final Uri uri ) { final RedditURL matchURL = parse ( uri ) ;", "gt": "if ( matchURL ! = null ) { \n return matchURL ; \n }", "repo": "RedReader", "task_id": "RedReader/906"}
{"input": "<s> @ NonNull public static RedditURL parseProbablePostListing ( final Uri uri ) { final RedditURL matchURL = parse ( uri ) ;", "gt": "if ( matchURL ! = null ) { \n return matchURL ; \n }", "repo": "RedReader", "task_id": "RedReader/907"}
{"input": "<s> public String humanReadablePath ( ) { final Uri src = generateJsonUri ( ) ; final StringBuilder builder = new StringBuilder ( ) ; for ( final String pathElement : src . getPathSegments ( ) ) { if ( ! pathElement . equals ( \" <STR_LIT> \" ) ) { builder . append ( \" <STR_LIT:/> \" ) ;", "gt": "builder . append ( pathElement ) ; \n } \n } \n return builder . toString ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/908"}
{"input": "<s> @ Override public String humanReadablePath ( ) { final StringBuilder builder = new StringBuilder ( super . humanReadablePath ( ) ) ;", "gt": "if ( query ! = null ) { \n builder . append ( \" <STR_LIT> \" ) . append ( query ) ; \n }", "repo": "RedReader", "task_id": "RedReader/912"}
{"input": "<s> @ Override public Uri generateJsonUri ( ) { if ( uri . getPath ( ) . endsWith ( \" <STR_LIT> \" ) ) {", "gt": "return uri ; \n } else { \n return uri . buildUpon ( ) . appendEncodedPath ( \" <STR_LIT> \" ) . build ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/913"}
{"input": "<s> @ Override public Uri generateJsonUri ( ) { if ( uri . getPath ( ) . endsWith ( \" <STR_LIT> \" ) ) {", "gt": "return uri ; \n } else { \n return uri . buildUpon ( ) . appendEncodedPath ( \" <STR_LIT> \" ) . build ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/914"}
{"input": "<s> @ Override public String humanReadableName ( final Context context , final boolean shorter ) { final String name = context . getString ( R . string . user_comments ) ; if ( shorter ) {", "gt": "return name ; \n } else { \n return String . format ( \" <STR_LIT> \" , name , user ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/915"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "final FragmentActivity activity = getActivity ( ) ; \n if ( activity ! = null ) { \n activity . setTitle ( mTitle ) ; \n }", "repo": "RedReader", "task_id": "RedReader/918"}
{"input": "<s> @ Override public void setPreferenceScreen ( final PreferenceScreen preferenceScreen ) { if ( preferenceScreen ! = null ) { configureAllPrefsAppearance ( preferenceScreen ) ;", "gt": "} \n super . setPreferenceScreen ( preferenceScreen ) ; \n }", "repo": "RedReader", "task_id": "RedReader/919"}
{"input": "<s> @ Override public void run ( ) { cacheManager . pruneCache ( cachesToClear . get ( CacheType . LISTINGS ) , cachesToClear . get ( CacheType . THUMBNAILS ) , cachesToClear . get ( CacheType . IMAGES ) ) ; if ( Objects . requireNonNull ( cachesToClear . get ( CacheType . FLAGS ) ) ) {", "gt": "RedditChangeDataManager . pruneAllUsersWhereOlderThan ( TimeDuration . ms ( 0 ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/921"}
{"input": "<s> fun addAction ( @ StringRes label : Int , action : Runnable ) { existingActions . add ( ViewCompat . addAccessibilityAction ( view , resources . getString ( label )", "gt": ") { _ , _ - > \n action . run ( ) \n true \n } ) \n }", "repo": "RedReader", "task_id": "RedReader/923"}
{"input": "<s> fun removeAllActions ( ) { existingActions . forEach { ViewCompat . removeAccessibilityAction ( view , it )", "gt": "} \n existingActions . clear ( ) \n }", "repo": "RedReader", "task_id": "RedReader/924"}
{"input": "<s> private fun relabelAction ( action : AccessibilityActionCompat , @ StringRes label : Int ? ) { if ( label = = null ) { ViewCompat . replaceAccessibilityAction ( view , action , null , null ) } else { ViewCompat . replaceAccessibilityAction ( view , action , resources . getString ( label ) ,", "gt": "null \n ) \n } \n \n }", "repo": "RedReader", "task_id": "RedReader/925"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouchEvent ( final MotionEvent event ) { final int action = event . getAction ( ) & MotionEvent . ACTION_MASK ; if ( action = = MotionEvent . ACTION_DOWN ) { if ( event . getX ( ) < mSwipeZonePixels ) { return listener . onSwipe ( LEFT ) ; } else if ( event . getX ( ) > getWidth ( ) - mSwipeZonePixels ) { return listener . onSwipe ( RIGHT ) ; } else {", "gt": "return listener . onTap ( ) ; \n } \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/926"}
{"input": "<s> public void setContents ( final View contents ) { this . contents = contents ; if ( shownPosition ! = null ) {", "gt": "show ( shownPosition ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/927"}
{"input": "<s> public void hide ( ) {", "gt": "shownPosition = null ; \n removeAllViews ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/929"}
{"input": "<s> public void setFlingingEnabled ( final boolean flingingEnabled ) {", "gt": "mFlingHintOuter . setVisibility ( flingingEnabled ? VISIBLE : GONE ) ; \n setSwipingEnabled ( flingingEnabled ) ; \n }", "repo": "RedReader", "task_id": "RedReader/930"}
{"input": "<s> @ Override protected void onUpdatedPosition ( final float position ) {", "gt": "mFlingHintYPos = position ; \n updateFlingHintPosition ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/931"}
{"input": "<s> @ Override protected void onEndPosition ( final float endPosition ) { mFlingHintYPos = endPosition ;", "gt": "updateFlingHintPosition ( ) ; \n mFlingHintAnimation = null ; \n }", "repo": "RedReader", "task_id": "RedReader/932"}
{"input": "<s> public static Movie prepareMovie ( @ NonNull final byte [ ] data , final int offset , final int length ) { final Movie movie = Movie . decodeByteArray ( data , offset , length ) ;", "gt": "if ( movie . duration ( ) < 1 ) { \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/933"}
{"input": "<s> public final void startRender ( final RRGLMatrixStack stack , final long time ) { if ( mVisible ) {", "gt": "renderInternal ( stack , time ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/936"}
{"input": "<s> @ Override protected void preRender ( final RRGLMatrixStack stack , final long time ) {", "gt": "GLES20 . glEnable ( GLES20 . GL_BLEND ) ; \n GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; \n }", "repo": "RedReader", "task_id": "RedReader/937"}
{"input": "<s> public void setColour ( final float r , final float g , final float b , final float a ) { mRed = r ; mGreen = g ;", "gt": "mBlue = b ; \n mAlpha = a ; \n }", "repo": "RedReader", "task_id": "RedReader/938"}
{"input": "<s> public final void add ( final RRGLRenderable child ) { mChildren . add ( child ) ; if ( isAdded ( ) ) {", "gt": "child . onAdded ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/940"}
{"input": "<s> public final void remove ( final RRGLRenderable child ) { if ( isAdded ( ) ) { child . onRemoved ( ) ;", "gt": "} \n mChildren . remove ( child ) ; \n }", "repo": "RedReader", "task_id": "RedReader/941"}
{"input": "<s> @ Override public void onAdded ( ) { if ( ! isAdded ( ) ) { for ( final RRGLRenderable entity : mChildren ) {", "gt": "entity . onAdded ( ) ; \n } \n } \n super . onAdded ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/942"}
{"input": "<s> @ Override protected void renderInternal ( final RRGLMatrixStack matrixStack , final long time ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ;", "gt": "entity . startRender ( matrixStack , time ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/943"}
{"input": "<s> @ Override public void onRemoved ( ) { super . onRemoved ( ) ; if ( ! isAdded ( ) ) {", "gt": "for ( final RRGLRenderable entity : mChildren ) { \n entity . onRemoved ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/944"}
{"input": "<s> @ Override public boolean isAnimating ( ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ; if ( entity . isAnimating ( ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/945"}
{"input": "<s> @ Override public void setOverallAlpha ( final float alpha ) { for ( int i = 0 ; i < mChildren . size ( ) ; i + + ) { final RRGLRenderable entity = mChildren . get ( i ) ;", "gt": "entity . setOverallAlpha ( alpha ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/946"}
{"input": "<s> @ Override protected void renderInternal ( final RRGLMatrixStack stack , final long time ) { preRender ( stack , time ) ;", "gt": "mEntity . startRender ( stack , time ) ; \n postRender ( stack , time ) ; \n }", "repo": "RedReader", "task_id": "RedReader/947"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "mEntity . onAdded ( ) ; \n super . onAdded ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/948"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "super . onRemoved ( ) ; \n mEntity . onRemoved ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/949"}
{"input": "<s> public void setScale ( final float x , final float y ) {", "gt": "mScaleX = x ; \n mScaleY = y ; \n }", "repo": "RedReader", "task_id": "RedReader/950"}
{"input": "<s> public void setTexture ( final RRGLTexture newTexture ) { if ( isAdded ( ) ) { mTexture . releaseReference ( ) ; }", "gt": "mTexture = newTexture ; \n if ( isAdded ( ) ) { \n mTexture . addReference ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/951"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "super . onAdded ( ) ; \n mTexture . addReference ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/952"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "mTexture . releaseReference ( ) ; \n super . onRemoved ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/953"}
{"input": "<s> public void setPosition ( final float x , final float y ) {", "gt": "mPositionX = x ; \n mPositionY = y ; \n }", "repo": "RedReader", "task_id": "RedReader/955"}
{"input": "<s> public void setPosition ( final MutableFloatPoint2D mPositionOffset ) {", "gt": "mPositionX = mPositionOffset . x ; \n mPositionY = mPositionOffset . y ; \n }", "repo": "RedReader", "task_id": "RedReader/956"}
{"input": "<s> public void activateProgramColour ( ) { if ( mProgramCurrent ! = mProgramColour ) {", "gt": "activateProgram ( mProgramColour ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/957"}
{"input": "<s> public void activateProgramTexture ( ) { if ( mProgramCurrent ! = mProgramTexture ) {", "gt": "activateProgram ( mProgramTexture ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/958"}
{"input": "<s> public int pop ( ) {", "gt": "mTopMatrixPos - = <NUM_LIT:16> ; \n return mTopMatrixPos ; \n }", "repo": "RedReader", "task_id": "RedReader/963"}
{"input": "<s> @ Override public void onActivated ( ) {", "gt": "super . onActivated ( ) ; \n GLES20 . glEnableVertexAttribArray ( mColorHandle ) ; \n }", "repo": "RedReader", "task_id": "RedReader/964"}
{"input": "<s> @ Override public void onDeactivated ( ) {", "gt": "super . onDeactivated ( ) ; \n GLES20 . glDisableVertexAttribArray ( mColorHandle ) ; \n }", "repo": "RedReader", "task_id": "RedReader/965"}
{"input": "<s> public void activateTextureByHandle ( final int textureHandle ) {", "gt": "GLES20 . glBindTexture ( GLES20 . GL_TEXTURE_2D , textureHandle ) ; \n GLES20 . glUniform1i ( mTextureUniformHandle , 0 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/966"}
{"input": "<s> @ Override public void onActivated ( ) { super . onActivated ( ) ;", "gt": "GLES20 . glEnableVertexAttribArray ( mUVDataHandle ) ; \n GLES20 . glActiveTexture ( GLES20 . GL_TEXTURE0 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/967"}
{"input": "<s> @ Override public void onDeactivated ( ) { super . onDeactivated ( ) ;", "gt": "GLES20 . glDisableVertexAttribArray ( mUVDataHandle ) ; \n GLES20 . glBindTexture ( GLES20 . GL_TEXTURE_2D , 0 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/968"}
{"input": "<s> public void releaseReference ( ) { mRefCount - - ; if ( mRefCount = = 0 ) {", "gt": "deleteTexture ( mTextureHandle ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/969"}
{"input": "<s> private static void deleteTexture ( final int handle ) {", "gt": "final int [ ] handles = { handle } ; \n GLES20 . glDeleteTextures ( 1 , handles , 0 ) ; \n }", "repo": "RedReader", "task_id": "RedReader/970"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouchEvent ( final MotionEvent event ) { mFingerTracker . onTouchEvent ( event ) ;", "gt": "requestRender ( ) ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/971"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) {", "gt": "super . onAttachedToWindow ( ) ; \n mDisplayListManager . onUIAttach ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/972"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) {", "gt": "super . onDetachedFromWindow ( ) ; \n mDisplayListManager . onUIDetach ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/973"}
{"input": "<s> private void setIconResource ( final int resource ) { if ( resource ! = mCurrentIconResource ) { mCurrentIconResource = resource ;", "gt": "mIcon . setImageResource ( resource ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/974"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouch ( final View v , final MotionEvent event ) {", "gt": "mFingerTracker . onTouchEvent ( event ) ; \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/976"}
{"input": "<s> @ Override public void onFingerDown ( final FingerTracker . Finger finger ) { mCurrentFingerCount + + ; if ( mCurrentFingerCount > 1 ) {", "gt": "mFirstFinger = null ; \n } else { \n mFirstFinger = finger ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/977"}
{"input": "<s> @ Override public void onFingersMoved ( ) { if ( mFirstFinger ! = null ) {", "gt": "mListener . onHorizontalSwipe ( mFirstFinger . mTotalPosDifference . x ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/978"}
{"input": "<s> @ Override public void onFingerUp ( final FingerTracker . Finger finger ) { mCurrentFingerCount - - ; if ( mFirstFinger ! = null ) { mListener . onHorizontalSwipeEnd ( ) ; if ( mFirstFinger . mDownDuration < <NUM_LIT> & & mFirstFinger . mPosDifference . x < <NUM_LIT:20> & & mFirstFinger . mPosDifference . y < <NUM_LIT:20> ) {", "gt": "mListener . onSingleTap ( ) ; \n } \n mFirstFinger = null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/979"}
{"input": "<s> public void convertScreenToScene ( final MutableFloatPoint2D screenPos , final MutableFloatPoint2D output ) {", "gt": "output . x = ( screenPos . x - mPositionOffset . x ) / mScale ; \n output . y = ( screenPos . y - mPositionOffset . y ) / mScale ; \n }", "repo": "RedReader", "task_id": "RedReader/980"}
{"input": "<s> public void convertSceneToScreen ( final MutableFloatPoint2D scenePos , final MutableFloatPoint2D output ) {", "gt": "output . x = scenePos . x * mScale + mPositionOffset . x ; \n output . y = scenePos . y * mScale + mPositionOffset . y ; \n }", "repo": "RedReader", "task_id": "RedReader/981"}
{"input": "<s> public void translateScreen ( final MutableFloatPoint2D oldScreenPos , final MutableFloatPoint2D newScreenPos ) {", "gt": "mPositionOffset . add ( newScreenPos ) ; \n mPositionOffset . sub ( oldScreenPos ) ; \n }", "repo": "RedReader", "task_id": "RedReader/983"}
{"input": "<s> @ Override public synchronized void onGLSceneResolutionChange ( final RRGLDisplayList scene , final RRGLContext context , final int width , final int height ) { mResolutionX = width ; mResolutionY = height ; final boolean setInitialScale = ( mBoundsHelper = = null ) ; mBoundsHelper = new BoundsHelper ( width , height , mImageTileSource . getWidth ( ) , mImageTileSource . getHeight ( ) , mCoordinateHelper ) ; if ( setInitialScale ) {", "gt": "mBoundsHelper . applyMinScale ( ) ; \n } \n mScrollbars . setResolution ( width , height ) ; \n mScrollbars . showBars ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/987"}
{"input": "<s> @ Override public void onUIThreadRepeatingTimer ( final UIThreadRepeatingTimer timer ) { if ( mCurrentTouchState = = TouchState . DOUBLE_TAP_WAIT_NO_FINGERS_DOWN ) { if ( System . currentTimeMillis ( ) - mFirstTapReleaseTime > DOUBLE_TAP_MAX_GAP_DURATION_MS ) { mListener . onSingleTap ( ) ; mCurrentTouchState = null ; mDoubleTapGapTimer . stopTimer ( ) ;", "gt": "} \n } else { \n mDoubleTapGapTimer . stopTimer ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/988"}
{"input": "<s> public synchronized void setResolution ( final int x , final int y ) {", "gt": "mResX = x ; \n mResY = y ; \n }", "repo": "RedReader", "task_id": "RedReader/990"}
{"input": "<s> @ Override public void onAdded ( ) {", "gt": "super . onAdded ( ) ; \n mRenderable . onAdded ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/991"}
{"input": "<s> @ Override public void onRemoved ( ) {", "gt": "mRenderable . onRemoved ( ) ; \n super . onRemoved ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/992"}
{"input": "<s> public synchronized void showBars ( ) { mShowUntil = System . currentTimeMillis ( ) + <NUM_LIT> ;", "gt": "mIsVisible = true ; \n mCurrentAlpha = 1 ; \n }", "repo": "RedReader", "task_id": "RedReader/993"}
{"input": "<s> @ Override protected synchronized void renderInternal ( final RRGLMatrixStack stack , final long time ) { if ( mIsVisible & & time > mShowUntil ) { mCurrentAlpha - = ALPHA_STEP ; if ( mCurrentAlpha < 0 ) { mIsVisible = false ; mCurrentAlpha = 0 ;", "gt": "} \n } \n mRenderable . setOverallAlpha ( mCurrentAlpha ) ; \n mRenderable . startRender ( stack , time ) ; \n }", "repo": "RedReader", "task_id": "RedReader/994"}
{"input": "<s> public Bitmap get ( ) { synchronized ( mLock ) { if ( ! mWanted ) {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ; \n } \n return mResult ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/996"}
{"input": "<s> public void markAsUnwanted ( ) { mWanted = false ;", "gt": "if ( mResult ! = null ) { \n mResult . recycle ( ) ; \n mResult = null ; \n }", "repo": "RedReader", "task_id": "RedReader/997"}
{"input": "<s> public void enqueue ( final ImageViewTileLoader tile ) { synchronized ( mQueue ) { mQueue . addLast ( tile ) ;", "gt": "mThreads . triggerOne ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/998"}
{"input": "<s> @ Override public void run ( ) { while ( true ) { final ImageViewTileLoader tile ; synchronized ( mQueue ) { if ( mQueue . isEmpty ( ) ) { return ; }", "gt": "tile = mQueue . removeFirst ( ) ; \n } \n tile . doPrepare ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/999"}
{"input": "<s> public void markAsWanted ( final int desiredScaleIndex ) { if ( desiredScaleIndex = = mDesiredScaleIndex ) { return ; } mDesiredScaleIndex = desiredScaleIndex ; synchronized ( mLock ) { mTileLoaders [ desiredScaleIndex ] . markAsWanted ( ) ; for ( int s = 0 ; s < mTileLoaders . length ; s + + ) { if ( s ! = desiredScaleIndex ) {", "gt": "mTileLoaders [ s ] . markAsUnwanted ( ) ; \n } \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/1000"}
{"input": "<s> public void markAsUnwanted ( ) { if ( mDesiredScaleIndex = = - 1 ) { return ; } mDesiredScaleIndex = - 1 ; synchronized ( mLock ) {", "gt": "for ( int s = 0 ; s < mTileLoaders . length ; s + + ) { \n mTileLoaders [ s ] . markAsUnwanted ( ) ; \n } \n } \n }", "repo": "RedReader", "task_id": "RedReader/1001"}
{"input": "<s> public void setIndentation ( final int indent ) { getLayoutParams ( ) . width = ( mPixelsPerIndent * indent ) ; mIndent = indent ; if ( mPrefDrawLines ) {", "gt": "mLineBuffer = new float [ mIndent * <NUM_LIT:4> ] ; \n } \n invalidate ( ) ; \n requestLayout ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1002"}
{"input": "<s> @ Override public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) {", "gt": "return new RecyclerView . ViewHolder ( new ListItemView ( viewGroup . getContext ( ) ) ) { \n }", "repo": "RedReader", "task_id": "RedReader/1003"}
{"input": "<s> @ Override public void onBindViewHolder ( final RecyclerView . ViewHolder viewHolder ) { final TextView view = ( TextView ) viewHolder . itemView ; view . setText ( mText ) ; ViewCompat . setAccessibilityDelegate ( view , new AccessibilityDelegateCompat ( ) { @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ; \n info . setHeading ( true ) ; \n } \n } ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1006"}
{"input": "<s> @ Override public void onInitializeAccessibilityNodeInfo ( final View host , final AccessibilityNodeInfoCompat info ) {", "gt": "super . onInitializeAccessibilityNodeInfo ( host , info ) ; \n info . setHeading ( true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1007"}
{"input": "<s> @ Override public void handleMessage ( @ NonNull final Message msg ) { if ( textView ! = null ) { textView . setText ( ( ( String ) msg . obj ) . toUpperCase ( Locale . getDefault ( ) ) ) ;", "gt": "} \n if ( msg . what = = LOADING_DONE ) { \n hideNoAnim ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1008"}
{"input": "<s> private void sendMessage ( final String text , final int what ) { final Message msg = Message . obtain ( ) ; msg . obj = text ;", "gt": "msg . what = what ; \n loadingHandler . sendMessage ( msg ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1009"}
{"input": "<s> public void setContents ( final View contents ) { if ( this . contents ! = null ) { removeView ( this . contents ) ;", "gt": "} \n this . contents = contents ; \n addView ( contents ) ; \n General . setLayoutMatchWidthWrapHeight ( contents ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1010"}
{"input": "<s> public void hideNoAnim ( ) { setVisibility ( GONE ) ; removeAllViews ( ) ;", "gt": "contents = null ; \n requestLayout ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1011"}
{"input": "<s> public void calculateStep ( ) { mVelocity - = mParams . stepLengthSeconds * ( ( mPosition - mParams . endPosition ) * mParams . accelerationCoefficient ) ; mVelocity * = mParams . velocityDamping ;", "gt": "mPosition + = mVelocity * mParams . stepLengthSeconds ; \n mStep + + ; \n }", "repo": "RedReader", "task_id": "RedReader/1012"}
{"input": "<s> public boolean isEndThresholdReached ( ) { if ( mStep > = mParams . thresholdMaxSteps ) { return true ; } if ( Math . abs ( mPosition ) > mParams . thresholdPositionDifference ) { return false ; }", "gt": "if ( Math . abs ( mVelocity ) > mParams . thresholdVelocity ) { \n return false ; \n }", "repo": "RedReader", "task_id": "RedReader/1013"}
{"input": "<s> @ Nullable @ StringRes private Integer getAccessibilityHintForActionPref ( @ NonNull final PrefsUtility . CommentAction pref ) { switch ( pref ) { case COLLAPSE : return R . string . action_collapse ;", "gt": "case ACTION_MENU : \n return R . string . action_actionmenu ; \n } \n return null ; \n }", "repo": "RedReader", "task_id": "RedReader/1019"}
{"input": "<s> public void handleInboxClick ( final BaseActivity activity ) { if ( currentItem ! = null ) {", "gt": "currentItem . handleInboxClick ( activity ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1021"}
{"input": "<s> public void handleInboxLongClick ( final BaseActivity activity ) { if ( currentItem ! = null ) {", "gt": "currentItem . handleInboxLongClick ( activity ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1022"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mChangeListenerAddTask ! = null ) {", "gt": "mChangeListenerAddTask . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1023"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) { super . onDetachedFromWindow ( ) ; if ( mChangeListenerRemoveTask ! = null ) {", "gt": "mChangeListenerRemoveTask . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1024"}
{"input": "<s> @ NonNull @ Override protected String getFlingLeftText ( ) { mLeftFlingAction = RedditPostActions . ActionDescriptionPair . from ( mPost , mLeftFlingPref ) ; if ( mLeftFlingAction ! = null ) {", "gt": "return mActivity . getString ( mLeftFlingAction . getDescriptionRes ( ) ) ; \n } else { \n return \" <STR_LIT> \" ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1025"}
{"input": "<s> @ NonNull @ Override protected String getFlingRightText ( ) { mRightFlingAction = RedditPostActions . ActionDescriptionPair . from ( mPost , mRightFlingPref ) ; if ( mRightFlingAction ! = null ) {", "gt": "return mActivity . getString ( mRightFlingAction . getDescriptionRes ( ) ) ; \n } else { \n return \" <STR_LIT> \" ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1026"}
{"input": "<s> @ Override public void handleMessage ( @ NonNull final Message msg ) { if ( mUsageId ! = msg . what ) { return ;", "gt": "} \n mThumbnailView . setImageBitmap ( ( Bitmap ) msg . obj ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1027"}
{"input": "<s> @ Override public void betterThumbnailAvailable ( final Bitmap thumbnail , final int callbackUsageId ) { final Message msg = Message . obtain ( ) ; msg . obj = thumbnail ;", "gt": "msg . what = callbackUsageId ; \n thumbnailHandler . sendMessage ( msg ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1028"}
{"input": "<s> private void setBottomMargin ( final boolean enabled ) { final MarginLayoutParams layoutParams = ( MarginLayoutParams ) mOuterView . getLayoutParams ( ) ; if ( enabled ) { layoutParams . bottomMargin = General . dpToPixels ( mActivity , <NUM_LIT:6> ) ;", "gt": "} else { \n layoutParams . bottomMargin = 0 ; \n } \n mOuterView . setLayoutParams ( layoutParams ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1029"}
{"input": "<s> public final void stop ( ) { if ( ! mStarted ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; }", "gt": "if ( mStopped ) { \n throw new RuntimeException ( \" <STR_LIT> \" ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1032"}
{"input": "<s> @ Override public final void doFrame ( final long frameTimeNanos ) { if ( mStopped ) { return ; } if ( mFirstFrameNanos = = - 1 ) { mFirstFrameNanos = frameTimeNanos ;", "gt": "} \n if ( handleFrame ( frameTimeNanos - mFirstFrameNanos ) ) { \n CHOREOGRAPHER . postFrameCallback ( this ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1033"}
{"input": "<s> @ Override protected boolean handleFrame ( final long nanosSinceAnimationStart ) { mLayoutParams . height = ( int ) ( mStartHeight * interpolateSine ( <NUM_LIT:1.0> - ( double ) nanosSinceAnimationStart / ( double ) DURATION_NANOS ) ) ; mTarget . setLayoutParams ( mLayoutParams ) ; final boolean finished = nanosSinceAnimationStart > DURATION_NANOS ;", "gt": "if ( finished ) { \n mTarget . setVisibility ( View . GONE ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1034"}
{"input": "<s> @ Override public void postFrameCallback ( @ NonNull final Callback callback ) { mCallbacks [ mCallbackCount ] = callback ; mCallbackCount + + ;", "gt": "if ( ! mPosted ) { \n AndroidCommon . UI_THREAD_HANDLER . postDelayed ( this , <NUM_LIT:1000> / <NUM_LIT> ) ; \n mPosted = true ; \n }", "repo": "RedReader", "task_id": "RedReader/1036"}
{"input": "<s> @ Override public void postFrameCallback ( @ NonNull final Callback callback ) { mCallbacks [ mCallbackCount ] = callback ; mCallbackCount + + ;", "gt": "if ( ! mPosted ) { \n CHOREOGRAPHER . postFrameCallback ( this ) ; \n mPosted = true ; \n }", "repo": "RedReader", "task_id": "RedReader/1038"}
{"input": "<s> @ Override public void onScrollStateChanged ( @ NonNull final RecyclerView recyclerView , final int newState ) { switch ( newState ) { case RecyclerView . SCROLL_STATE_IDLE : hideScrollbar ( ) ; break ; case RecyclerView . SCROLL_STATE_DRAGGING : case RecyclerView . SCROLL_STATE_SETTLING :", "gt": "showScrollbar ( ) ; \n break ; \n } \n updateScroll ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1040"}
{"input": "<s> public void enablePullToRefresh ( @ NonNull final SwipeRefreshLayout . OnRefreshListener listener ) {", "gt": "mSwipeRefreshLayout . setOnRefreshListener ( listener ) ; \n mSwipeRefreshLayout . setEnabled ( true ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1041"}
{"input": "<s> private void showScrollbar ( ) {", "gt": "mScrollbar . animate ( ) . cancel ( ) ; \n mScrollbar . setAlpha ( <NUM_LIT> ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1042"}
{"input": "<s> public void bind ( @ NonNull final AppCompatActivity activity , @ NonNull final EventListenerSet < String > querySource ) { mActivity = activity ; if ( mBinding ! = null ) {", "gt": "throw new RuntimeException ( \" <STR_LIT> \" ) ; \n } \n mBinding = querySource ; \n doBind ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1044"}
{"input": "<s> private void doBind ( ) { if ( mBinding ! = null ) { mBindingListener = this : : update ;", "gt": "update ( mBinding . register ( mBindingListener ) ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1045"}
{"input": "<s> private void doUnbind ( ) { if ( mBinding ! = null & & mBindingListener ! = null ) { mBinding . unregister ( mBindingListener ) ;", "gt": "mBindingListener = null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1046"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) {", "gt": "super . onAttachedToWindow ( ) ; \n doBind ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1047"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) {", "gt": "super . onDetachedFromWindow ( ) ; \n doUnbind ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1048"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mRunnableOnAttach ! = null ) {", "gt": "mRunnableOnAttach . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1050"}
{"input": "<s> @ Override protected void onDetachedFromWindow ( ) { super . onDetachedFromWindow ( ) ; if ( mRunnableOnDetach ! = null ) {", "gt": "mRunnableOnDetach . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1051"}
{"input": "<s> @ Override public void onSubredditSubscriptionListUpdated ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1052"}
{"input": "<s> @ Override public void onSubredditSubscriptionAttempted ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1053"}
{"input": "<s> @ Override public void onSubredditUnsubscriptionAttempted ( final RedditSubredditSubscriptionManager subredditSubscriptionManager ) { if ( mRunnableOnSubscriptionsChange ! = null ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . post ( mRunnableOnSubscriptionsChange ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1054"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( @ NonNull final SharedPrefsWrapper sharedPreferences , @ NonNull final String key ) { if ( mRunnableOnPinnedChange ! = null & & key . equals ( mContext . getString ( R . string . pref_pinned_subreddits_key ) ) ) {", "gt": "mRunnableOnPinnedChange . run ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1055"}
{"input": "<s> protected void resetSwipeState ( ) { mSwipeHistory . clear ( ) ; mSwipeStart = null ; mSwipeStartPointerId = - 1 ; mSwipeInProgress = false ;", "gt": "mCurrentSwipeDelta = 0 ; \n mOverallSwipeDelta = 0 ; \n cancelSwipeAnimation ( ) ; \n updateOffset ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1056"}
{"input": "<s> private void onFingerSwipeMove ( ) {", "gt": "mSwipeHistory . add ( mCurrentSwipeDelta , System . currentTimeMillis ( ) ) ; \n updateOffset ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1059"}
{"input": "<s> private void onSwipeEnd ( ) { if ( mSwipeHistory . size ( ) > = <NUM_LIT:2> ) { mVelocity = ( mSwipeHistory . getMostRecent ( ) - mSwipeHistory . getAtTimeAgoMs ( <NUM_LIT:100> ) ) * <NUM_LIT:10> ; } else { mVelocity = 0 ;", "gt": "} \n mOverallSwipeDelta + = mCurrentSwipeDelta ; \n mCurrentSwipeDelta = 0 ; \n animateSwipeToRestPosition ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1060"}
{"input": "<s> private void onSwipeCancelled ( ) { mVelocity = 0 ; mOverallSwipeDelta + = mCurrentSwipeDelta ;", "gt": "mCurrentSwipeDelta = 0 ; \n animateSwipeToRestPosition ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1061"}
{"input": "<s> private void startSwipeAnimation ( final SwipeAnimation animation ) { if ( mCurrentSwipeAnimation ! = null ) {", "gt": "mCurrentSwipeAnimation . stop ( ) ; \n } \n mCurrentSwipeAnimation = animation ; \n mCurrentSwipeAnimation . start ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1063"}
{"input": "<s> private void cancelSwipeAnimation ( ) { if ( mCurrentSwipeAnimation ! = null ) { mCurrentSwipeAnimation . stop ( ) ;", "gt": "mCurrentSwipeAnimation = null ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1064"}
{"input": "<s> @ Override protected void onUpdatedPosition ( final float position ) {", "gt": "mOverallSwipeDelta = position ; \n updateOffset ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1065"}
{"input": "<s> @ Override protected void onEndPosition ( final float endPosition ) { mOverallSwipeDelta = endPosition ;", "gt": "updateOffset ( ) ; \n mCurrentSwipeAnimation = null ; \n }", "repo": "RedReader", "task_id": "RedReader/1066"}
{"input": "<s> @ Override public boolean onInterceptTouchEvent ( final MotionEvent ev ) { if ( mSwipeInProgress ) { return true ; }", "gt": "if ( swipeStartLogic ( ev ) ) { \n return true ; \n }", "repo": "RedReader", "task_id": "RedReader/1067"}
{"input": "<s> public float getAtTimeAgoMs ( final long timeAgo ) { final long timestamp = timestamps [ getNthMostRecentIndex ( 0 ) ] - timeAgo ; float result = getMostRecent ( ) ; for ( int i = 0 ; i < len ; i + + ) { final int index = getNthMostRecentIndex ( i ) ; if ( timestamp > timestamps [ index ] ) { return result ; } else {", "gt": "result = positions [ index ] ; \n } \n } \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/1069"}
{"input": "<s> private int getNthMostRecentIndex ( final int n ) { if ( n > = len | | n < 0 ) { throw new ArrayIndexOutOfBoundsException ( n ) ;", "gt": "} \n return ( start + len - n - 1 ) % positions . length ; \n }", "repo": "RedReader", "task_id": "RedReader/1070"}
{"input": "<s> public void clear ( ) {", "gt": "len = 0 ; \n start = 0 ; \n }", "repo": "RedReader", "task_id": "RedReader/1071"}
{"input": "<s> @ Override public int read ( final byte [ ] buffer , final int offset , final int readLength ) throws IOException { if ( readLength = = 0 ) { return 0 ; } final int result = Objects . requireNonNull ( mCurrentStream ) . read ( buffer , offset , readLength ) ; if ( result < 0 ) {", "gt": "return C . RESULT_END_OF_INPUT ; \n } \n bytesTransferred ( result ) ; \n return result ; \n }", "repo": "RedReader", "task_id": "RedReader/1073"}
{"input": "<s> @ Override public void close ( ) throws IOException { if ( mCurrentStream ! = null ) {", "gt": "mCurrentStream . close ( ) ; \n mCurrentStream = null ; \n transferEnded ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1074"}
{"input": "<s> @ Override public void run ( ) { updateProgress ( ) ; if ( ! mReleased ) {", "gt": "AndroidCommon . UI_THREAD_HANDLER . postDelayed ( this , <NUM_LIT> ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1075"}
{"input": "<s> @ Override public void onPlayerError ( @ NonNull final PlaybackException error ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" , error ) ; \n mListener . onError ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1076"}
{"input": "<s> public void handleTap ( ) { if ( mControlView = = null ) { return ; } if ( mControlView . getVisibility ( ) ! = VISIBLE ) {", "gt": "mControlView . setVisibility ( VISIBLE ) ; \n } else { \n mControlView . setVisibility ( GONE ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1077"}
{"input": "<s> public void release ( ) { if ( ! mReleased ) {", "gt": "removeAllViews ( ) ; \n mVideoPlayer . release ( ) ; \n mReleased = true ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1078"}
{"input": "<s> @ Override public View getVideoLoadingProgressView ( ) { if ( loadingView ! = null ) { loadingView . setVisibility ( View . VISIBLE ) ;", "gt": "return loadingView ; \n } else { \n return super . getVideoLoadingProgressView ( ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1082"}
{"input": "<s> @ Override public void onPrepared ( final MediaPlayer mp ) { if ( loadingView ! = null ) {", "gt": "loadingView . setVisibility ( View . GONE ) ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1083"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) public boolean onBackPressed ( ) { if ( isVideoFullscreen ) { onHideCustomView ( ) ;", "gt": "return true ; \n } else { \n return false ; \n } \n }", "repo": "RedReader", "task_id": "RedReader/1085"}
{"input": "<s> @ Override public void loadData ( final String data , final String mimeType , final String encoding ) {", "gt": "addJavascriptInterface ( ) ; \n super . loadData ( data , mimeType , encoding ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1088"}
{"input": "<s> @ Override public void loadDataWithBaseURL ( final String baseUrl , final String data , final String mimeType , final String encoding , final String historyUrl ) {", "gt": "addJavascriptInterface ( ) ; \n super . loadDataWithBaseURL ( baseUrl , data , mimeType , encoding , historyUrl ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1089"}
{"input": "<s> @ Override public void loadUrl ( final String url ) {", "gt": "addJavascriptInterface ( ) ; \n super . loadUrl ( url ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1091"}
{"input": "<s> @ Override public void loadUrl ( final String url , final Map < String , String > additionalHttpHeaders ) {", "gt": "addJavascriptInterface ( ) ; \n super . loadUrl ( url , additionalHttpHeaders ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1092"}
{"input": "<s> public void clearBrowser ( ) { this . clearCache ( true ) ; this . clearFormData ( ) ;", "gt": "this . clearHistory ( ) ; \n CookieManager . getInstance ( ) . removeAllCookie ( ) ; \n }", "repo": "RedReader", "task_id": "RedReader/1095"}
{"input": "<s> fun setFieldLimits ( maxNameLength : Int ? , maxValueLength : Int ? ) { this . maxNameLength = maxNameLength", "gt": "this . maxValueLength = maxValueLength \n notifyDataSetChanged ( ) \n }", "repo": "Tusky", "task_id": "Tusky/6"}
{"input": "<s> fun getFieldData ( ) : List < StringField > { return fieldData . map {", "gt": "StringField ( it . first , it . second ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/7"}
{"input": "<s> fun addField ( ) {", "gt": "fieldData . add ( MutableStringPair ( \" \" , \" \" ) ) \n notifyItemInserted ( fieldData . size - 1 ) \n }", "repo": "Tusky", "task_id": "Tusky/8"}
{"input": "<s> fun setupLinkListener ( listener : LinkListener ) { itemView . setOnClickListener {", "gt": "listener . onViewAccount ( \n accountId \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/10"}
{"input": "<s> private void setUsername ( String name ) { Context context = username . getContext ( ) ; String format = context . getString ( R . string . post_username_format ) ;", "gt": "String usernameText = String . format ( format , name ) ; \n username . setText ( usernameText ) ; \n }", "repo": "Tusky", "task_id": "Tusky/16"}
{"input": "<s> void setupButtons ( final NotificationActionListener listener , final String accountId , final String notificationId ) { this . notificationActionListener = listener ;", "gt": "this . accountId = accountId ; \n this . notificationId = notificationId ; \n }", "repo": "Tusky", "task_id": "Tusky/18"}
{"input": "<s> override fun onBindViewHolder ( holder : PreviewViewHolder , position : Int ) { val textView = holder . itemView as TextView val iconId = if ( multiple ) { R . drawable . ic_check_box_outline_blank_18dp } else { R . drawable . ic_radio_button_unchecked_18dp } TextViewCompat . setCompoundDrawablesRelativeWithIntrinsicBounds ( textView , iconId , 0 , 0 , 0 )", "gt": "textView . text = options [ position ] \n \n textView . setOnClickListener ( clickListener ) \n }", "repo": "Tusky", "task_id": "Tusky/27"}
{"input": "<s> protected void setUsername ( @ Nullable String name ) { Context context = username . getContext ( ) ;", "gt": "String usernameText = context . getString ( R . string . post_username_format , name ) ; \n username . setText ( usernameText ) ; \n }", "repo": "Tusky", "task_id": "Tusky/30"}
{"input": "<s> private void hidePoll ( ) { pollButton . setVisibility ( View . GONE ) ;", "gt": "pollDescription . setVisibility ( View . GONE ) ; \n pollOptions . setVisibility ( View . GONE ) ; \n }", "repo": "Tusky", "task_id": "Tusky/33"}
{"input": "<s> protected void hideSensitiveMediaWarning ( ) {", "gt": "sensitiveMediaWarning . setVisibility ( View . GONE ) ; \n sensitiveMediaShow . setVisibility ( View . GONE ) ; \n }", "repo": "Tusky", "task_id": "Tusky/37"}
{"input": "<s> protected static boolean hasPreviewableAttachment ( @ NonNull List < Attachment > attachments ) { for ( Attachment attachment : attachments ) { if ( attachment . getType ( ) = = Attachment . Type . AUDIO | | attachment . getType ( ) = = Attachment . Type . UNKNOWN ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "Tusky", "task_id": "Tusky/38"}
{"input": "<s> private void hideQuantitativeStats ( ) { reblogs . setVisibility ( View . GONE ) ;", "gt": "favourites . setVisibility ( View . GONE ) ; \n infoDivider . setVisibility ( View . GONE ) ; \n }", "repo": "Tusky", "task_id": "Tusky/44"}
{"input": "<s> public void showStatusContent ( boolean show ) {", "gt": "super . showStatusContent ( show ) ; \n contentCollapseButton . setVisibility ( show ? View . VISIBLE : View . GONE ) ; \n }", "repo": "Tusky", "task_id": "Tusky/47"}
{"input": "<s> fun setRemoveButtonVisible ( enabled : Boolean ) { if ( removeButtonEnabled ! = enabled ) { removeButtonEnabled = enabled", "gt": "notifyDataSetChanged ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/51"}
{"input": "<s> suspend fun dispatch ( event : Event ) {", "gt": "sharedEventFlow . emit ( event ) \n eventsSubject . onNext ( event ) \n }", "repo": "Tusky", "task_id": "Tusky/52"}
{"input": "<s> public void startActivityWithSlideInAnimation ( @ NonNull Intent intent ) {", "gt": "super . startActivity ( intent ) ; \n overridePendingTransition ( R . anim . slide_from_right , R . anim . slide_to_left ) ; \n }", "repo": "Tusky", "task_id": "Tusky/53"}
{"input": "<s> @ Override public void finish ( ) {", "gt": "super . finish ( ) ; \n overridePendingTransition ( R . anim . slide_from_left , R . anim . slide_to_right ) ; \n }", "repo": "Tusky", "task_id": "Tusky/55"}
{"input": "<s> public void openAsAccount ( @ NonNull String url , @ NonNull AccountEntity account ) { accountManager . setActiveAccount ( account . getId ( ) ) ; Intent intent = MainActivity . redirectIntent ( this , account . getId ( ) , url ) ;", "gt": "startActivity ( intent ) ; \n finishWithoutSlideOutAnimation ( ) ; \n }", "repo": "Tusky", "task_id": "Tusky/58"}
{"input": "<s> fun viewAccount ( id : String ) {", "gt": "val intent = AccountActivity . getIntent ( this , id ) \n startActivityWithSlideInAnimation ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/61"}
{"input": "<s> @ VisibleForTesting fun onBeginSearch ( url : String ) {", "gt": "searchUrl = url \n showQuerySheet ( ) \n }", "repo": "Tusky", "task_id": "Tusky/63"}
{"input": "<s> @ VisibleForTesting fun cancelActiveSearch ( ) { if ( isSearching ( ) ) {", "gt": "onEndSearch ( searchUrl ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/65"}
{"input": "<s> private fun makeNotificationBarTransparent ( ) {", "gt": "WindowCompat . setDecorFitsSystemWindows ( window , false ) \n window . statusBarColor = statusBarColorTransparent \n }", "repo": "Tusky", "task_id": "Tusky/66"}
{"input": "<s> private fun onRefresh ( ) {", "gt": "viewModel . refresh ( ) \n adapter . refreshContent ( ) \n }", "repo": "Tusky", "task_id": "Tusky/67"}
{"input": "<s> private fun toggleBlock ( ) { if ( viewModel . relationshipData . value ? . data ? . blocking ! = true ) { AlertDialog . Builder ( this ) . setMessage ( getString ( R . string . dialog_block_warning , loadedAccount ? . username ) ) . setPositiveButton ( android . R . string . ok ) { _ , _ - > viewModel . changeBlockState ( ) } . setNegativeButton ( android . R . string . cancel , null )", "gt": ". show ( ) \n } else { \n viewModel . changeBlockState ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/77"}
{"input": "<s> private fun toggleMute ( ) { if ( viewModel . relationshipData . value ? . data ? . muting ! = true ) { loadedAccount ? . let { showMuteAccountDialog ( this , it . username ) { notifications , duration - > viewModel . muteAccount ( notifications , duration ) }", "gt": "} \n } else { \n viewModel . unmuteAccount ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/78"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( this , tag ) \n startActivityWithSlideInAnimation ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/80"}
{"input": "<s> override fun onViewAccount ( id : String ) { val intent = Intent ( this , AccountActivity : : class . java )", "gt": "intent . putExtra ( \" <STR_LIT> \" , id ) \n startActivityWithSlideInAnimation ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/81"}
{"input": "<s> @ JvmStatic fun getIntent ( context : Context , accountId : String ) : Intent { val intent = Intent ( context , AccountActivity : : class . java )", "gt": "intent . putExtra ( KEY_ACCOUNT_ID , accountId ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/84"}
{"input": "<s> private fun reload ( isReload : Boolean = false ) { if ( isDataLoading ) { return } accountId . let { obtainAccount ( isReload )", "gt": "if ( ! isSelf ) { \n obtainRelationship ( isReload ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/93"}
{"input": "<s> fun setAccountInfo ( accountId : String ) { this . accountId = accountId", "gt": "this . isSelf = activeAccount . accountId = = accountId \n reload ( false ) \n }", "repo": "Tusky", "task_id": "Tusky/94"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n selectListener = context as ? ListSelectionListener \n }", "repo": "Tusky", "task_id": "Tusky/95"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Tusky", "task_id": "Tusky/98"}
{"input": "<s> private fun load ( ) { binding . progressBar . show ( ) binding . listsView . hide ( )", "gt": "binding . messageView . hide ( ) \n viewModel . load ( accountId ) \n }", "repo": "Tusky", "task_id": "Tusky/99"}
{"input": "<s> fun newInstance ( accountId : String ? ) : ListSelectionFragment { val args = Bundle ( ) . apply { putString ( ARG_ACCOUNT_ID , accountId )", "gt": "} \n return ListSelectionFragment ( ) . apply { arguments = args } \n }", "repo": "Tusky", "task_id": "Tusky/100"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n viewModel . accountId = arguments ? . getString ( ACCOUNT_ID_ARG ) ! ! \n }", "repo": "Tusky", "task_id": "Tusky/101"}
{"input": "<s> fun revealAttachment ( viewData : AttachmentViewData ) { val position = attachmentData . indexOfFirst { oldViewData - > oldViewData . id = = viewData . id }", "gt": "attachmentData [ position ] = viewData . copy ( isRevealed = true ) \n currentSource ? . invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/107"}
{"input": "<s> override fun onMeasure ( widthMeasureSpec : Int , heightMeasureSpec : Int ) { super . onMeasure ( widthMeasureSpec , heightMeasureSpec )", "gt": "val width = measuredWidth \n setMeasuredDimension ( width , width ) \n }", "repo": "Tusky", "task_id": "Tusky/108"}
{"input": "<s> fun newIntent ( context : Context , type : Type , id : String ? = null ) : Intent { return Intent ( context , AccountListActivity : : class . java ) . apply { putExtra ( EXTRA_TYPE , type )", "gt": "putExtra ( EXTRA_ID , id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/109"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "type = requireArguments ( ) . getSerializable ( ARG_TYPE ) as Type \n id = requireArguments ( ) . getString ( ARG_ID ) \n }", "repo": "Tusky", "task_id": "Tusky/110"}
{"input": "<s> override fun onViewTag ( tag : String ) { ( activity as BaseActivity ? ) ? . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/111"}
{"input": "<s> override fun onViewAccount ( id : String ) { ( activity as BaseActivity ? ) ? . let { val intent = AccountActivity . getIntent ( it , id )", "gt": "it . startActivityWithSlideInAnimation ( intent ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/112"}
{"input": "<s> override fun onMute ( mute : Boolean , id : String , position : Int , notifications : Boolean ) { viewLifecycleOwner . lifecycleScope . launch { try { if ( ! mute ) { api . unmuteAccount ( id ) } else { api . muteAccount ( id , notifications ) } onMuteSuccess ( mute , id , position , notifications )", "gt": "} catch ( _ : Throwable ) { \n onMuteFailure ( mute , id , notifications ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/113"}
{"input": "<s> private fun onMuteFailure ( mute : Boolean , accountId : String , notifications : Boolean ) { val verb = if ( mute ) { if ( notifications ) { \" <STR_LIT> \" } else { \" <STR_LIT> \" }", "gt": "} else { \n \" <STR_LIT> \" \n } \n Log . e ( TAG , \" <STR_LIT> \" ) \n }", "repo": "Tusky", "task_id": "Tusky/114"}
{"input": "<s> override fun onBlock ( block : Boolean , id : String , position : Int ) { viewLifecycleOwner . lifecycleScope . launch { try { if ( ! block ) { api . unblockAccount ( id ) } else { api . blockAccount ( id ) } onBlockSuccess ( block , id , position )", "gt": "} catch ( _ : Throwable ) { \n onBlockFailure ( block , id ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/115"}
{"input": "<s> private fun onBlockFailure ( block : Boolean , accountId : String ) { val verb = if ( block ) { \" <STR_LIT> \"", "gt": "} else { \n \" <STR_LIT> \" \n } \n Log . e ( TAG , \" <STR_LIT> \" ) \n }", "repo": "Tusky", "task_id": "Tusky/116"}
{"input": "<s> private fun onRespondToFollowRequestSuccess ( position : Int ) {", "gt": "val followRequestsAdapter = adapter as FollowRequestsAdapter \n followRequestsAdapter . removeItem ( position ) \n }", "repo": "Tusky", "task_id": "Tusky/117"}
{"input": "<s> private fun onFetchAccountsFailure ( throwable : Throwable ) { fetching = false binding . swipeRefreshLayout . isRefreshing = false Log . e ( TAG , \" <STR_LIT> \" , throwable ) if ( adapter . itemCount = = 0 ) { binding . messageView . show ( ) binding . messageView . setup ( throwable ) {", "gt": "binding . messageView . hide ( ) \n this . fetchAccounts ( null ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/120"}
{"input": "<s> final override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { if ( getItemViewType ( position ) = = VIEW_TYPE_ACCOUNT ) { @ Suppress ( \" <STR_LIT> \" )", "gt": "this . onBindAccountViewHolder ( holder as AVH , position ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/122"}
{"input": "<s> fun removeItem ( position : Int ) : TimelineAccount ? { if ( position < 0 | | position > = accountList . size ) { return null", "gt": "} \n val account = accountList . removeAt ( position ) \n notifyItemRemoved ( position ) \n return account \n }", "repo": "Tusky", "task_id": "Tusky/129"}
{"input": "<s> fun addItem ( account : TimelineAccount , position : Int ) { if ( position < 0 | | position > accountList . size ) {", "gt": "return \n } \n accountList . add ( position , account ) \n notifyItemInserted ( position ) \n }", "repo": "Tusky", "task_id": "Tusky/130"}
{"input": "<s> fun updateMutingNotifications ( id : String , mutingNotifications : Boolean , position : Int ) {", "gt": "mutingNotificationsMap [ id ] = mutingNotifications \n notifyItemChanged ( position ) \n }", "repo": "Tusky", "task_id": "Tusky/138"}
{"input": "<s> fun updateMutingNotificationsMap ( newMutingNotificationsMap : HashMap < String , Boolean > ) {", "gt": "mutingNotificationsMap . putAll ( newMutingNotificationsMap ) \n notifyDataSetChanged ( ) \n }", "repo": "Tusky", "task_id": "Tusky/139"}
{"input": "<s> private fun refreshAnnouncements ( ) {", "gt": "viewModel . load ( ) \n binding . swipeRefreshLayout . isRefreshing = true \n }", "repo": "Tusky", "task_id": "Tusky/144"}
{"input": "<s> override fun openReactionPicker ( announcementId : String , target : View ) {", "gt": "currentAnnouncementId = announcementId \n pickerDialog . showAsDropDown ( target ) \n }", "repo": "Tusky", "task_id": "Tusky/145"}
{"input": "<s> override fun onEmojiSelected ( shortcode : String ) {", "gt": "viewModel . addReaction ( currentAnnouncementId ! ! , shortcode ) \n pickerDialog . dismiss ( ) \n }", "repo": "Tusky", "task_id": "Tusky/146"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( this , tag ) \n startActivityWithSlideInAnimation ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/147"}
{"input": "<s> private fun setupContentWarningField ( startingContentWarning : String ? ) { if ( startingContentWarning ! = null ) { binding . composeContentWarningField . setText ( startingContentWarning )", "gt": "} \n binding . composeContentWarningField . doOnTextChanged { _ , _ , _ , _ - > updateVisibleCharactersLeft ( ) } \n }", "repo": "Tusky", "task_id": "Tusky/148"}
{"input": "<s> private fun onScheduleClick ( ) { if ( viewModel . scheduledAt . value = = null ) {", "gt": "binding . composeScheduleView . openPickDateDialog ( ) \n } else { \n showScheduleView ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/153"}
{"input": "<s> private fun removePoll ( ) {", "gt": "viewModel . poll . value = null \n binding . pollPreview . hide ( ) \n }", "repo": "Tusky", "task_id": "Tusky/154"}
{"input": "<s> private fun onContentWarningChanged ( ) { val showWarning = binding . composeContentWarningBar . isGone", "gt": "viewModel . contentWarningChanged ( showWarning ) \n updateVisibleCharactersLeft ( ) \n }", "repo": "Tusky", "task_id": "Tusky/157"}
{"input": "<s> private fun verifyScheduledTime ( ) : Boolean { return binding . composeScheduleView . verifyScheduledTime (", "gt": "binding . composeScheduleView . getDateTime ( viewModel . scheduledAt . value ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/158"}
{"input": "<s> private fun onSendClicked ( ) { if ( verifyScheduledTime ( ) ) {", "gt": "sendStatus ( ) \n } else { \n showScheduleView ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/159"}
{"input": "<s> private fun sanitizePickMediaDescription ( description : String ? ) : String ? { if ( description = = null ) { return null } if ( \" <STR_LIT> \" in description ) {", "gt": "return null \n } \n \n return description \n }", "repo": "Tusky", "task_id": "Tusky/161"}
{"input": "<s> private fun deleteDraftAndFinish ( ) {", "gt": "viewModel . deleteDraft ( ) \n finishWithoutSlideOutAnimation ( ) \n }", "repo": "Tusky", "task_id": "Tusky/165"}
{"input": "<s> private fun resetSchedule ( ) {", "gt": "viewModel . updateScheduledAt ( null ) \n scheduleBehavior . state = BottomSheetBehavior . STATE_HIDDEN \n }", "repo": "Tusky", "task_id": "Tusky/168"}
{"input": "<s> @ JvmStatic fun startIntent ( context : Context , options : ComposeOptions ) : Intent { return Intent ( context , ComposeActivity : : class . java ) . apply {", "gt": "putExtra ( COMPOSE_OPTIONS_EXTRA , options ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/169"}
{"input": "<s> private fun addUploadedMedia ( id : String , type : QueuedMedia . Type , uri : Uri , description : String ? , focus : Attachment . Focus ? ) { media . update { mediaList - > val mediaItem = QueuedMedia ( localId = mediaUploader . getNewLocalMediaId ( ) , uri = uri , type = type , mediaSize = 0 , uploadPercent = - 1 , id = id , description = description , focus = focus ,", "gt": "state = QueuedMedia . State . PUBLISHED \n ) \n mediaList + mediaItem \n } \n }", "repo": "Tusky", "task_id": "Tusky/175"}
{"input": "<s> fun contentWarningChanged ( value : Boolean ) {", "gt": "showContentWarning . value = value \n contentWarningStateChanged = true \n }", "repo": "Tusky", "task_id": "Tusky/178"}
{"input": "<s> fun deleteDraft ( ) { viewModelScope . launch {", "gt": "if ( draftId ! = 0 ) { \n draftHelper . deleteDraftAndAttachments ( draftId ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/179"}
{"input": "<s> fun shouldShowSaveDraftDialog ( ) : Boolean { return media . value . any { mediaValue - >", "gt": "mediaValue . uri . scheme = = \" <STR_LIT> \" \n } \n }", "repo": "Tusky", "task_id": "Tusky/180"}
{"input": "<s> fun updateDescription ( localId : Int , description : String ) { updateMediaItem ( localId ) { mediaItem - >", "gt": "mediaItem . copy ( description = description ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/182"}
{"input": "<s> fun addChoice ( ) {", "gt": "options . add ( \" \" ) \n notifyItemInserted ( options . size - 1 ) \n }", "repo": "Tusky", "task_id": "Tusky/185"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n setStyle ( STYLE_NORMAL , R . style . TuskyDialogFragmentStyle ) \n }", "repo": "Tusky", "task_id": "Tusky/186"}
{"input": "<s> fun setStatusVisibility ( visibility : Status . Visibility ) { val selectedButton = when ( visibility ) { Status . Visibility . PUBLIC - > R . id . publicRadioButton Status . Visibility . UNLISTED - > R . id . unlistedRadioButton Status . Visibility . PRIVATE - > R . id . privateRadioButton Status . Visibility . DIRECT - > R . id . directRadioButton else - >", "gt": "R . id . directRadioButton \n } \n \n check ( selectedButton ) \n }", "repo": "Tusky", "task_id": "Tusky/196"}
{"input": "<s> private fun setEditIcons ( ) { val icon = ContextCompat . getDrawable ( context , R . drawable . ic_create_24dp ) ? : return val size = binding . scheduledDateTime . lineHeight", "gt": "icon . setBounds ( 0 , 0 , size , size ) \n binding . scheduledDateTime . setCompoundDrawables ( null , null , icon , null ) \n }", "repo": "Tusky", "task_id": "Tusky/198"}
{"input": "<s> fun resetSchedule ( ) {", "gt": "scheduleDateTimeUtc = null \n updateScheduleUi ( ) \n }", "repo": "Tusky", "task_id": "Tusky/199"}
{"input": "<s> private fun getTimeFormat ( context : Context ) : Int { return if ( android . text . format . DateFormat . is24HourFormat ( context ) ) {", "gt": "TimeFormat . CLOCK_24H \n } else { \n TimeFormat . CLOCK_12H \n } \n }", "repo": "Tusky", "task_id": "Tusky/200"}
{"input": "<s> fun getDateTime ( scheduledAt : String ? ) : Date ? { scheduledAt ? . let { try { return iso8601 . parse ( it )", "gt": "} catch ( _ : ParseException ) { \n } \n } \n return null \n }", "repo": "Tusky", "task_id": "Tusky/201"}
{"input": "<s> fun setDateTime ( scheduledAt : String ? ) { val date = getDateTime ( scheduledAt ) ? : return initializeSuggestedTime ( )", "gt": "scheduleDateTimeUtc ! ! . time = date \n updateScheduleUi ( ) \n }", "repo": "Tusky", "task_id": "Tusky/202"}
{"input": "<s> private fun initializeSuggestedTime ( ) { if ( scheduleDateTimeUtc = = null ) {", "gt": "scheduleDateTimeUtc = calendar ( ) . apply { \n add ( Calendar . MINUTE , <NUM_LIT:15> ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/206"}
{"input": "<s> fun setImageSize ( width : Int , height : Int ) { this . imageSize = Point ( width , height ) if ( focus ! = null ) {", "gt": "invalidate ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/210"}
{"input": "<s> fun setFocus ( focus : Attachment . Focus ) { this . focus = focus if ( imageSize ! = null ) {", "gt": "invalidate ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/211"}
{"input": "<s> override fun setOnClickListener ( l : OnClickListener ? ) {", "gt": "super . setOnClickListener ( l ) \n adapter . setOnClickListener ( l ) \n }", "repo": "Tusky", "task_id": "Tusky/218"}
{"input": "<s> fun setProgress ( progress : Int ) { this . progress = progress if ( progress ! = - 1 ) { setColorFilter ( Color . rgb ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) , PorterDuff . Mode . MULTIPLY )", "gt": "} else { \n clearColorFilter ( ) \n } \n invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/219"}
{"input": "<s> override fun onBindViewHolder ( holder : ConversationViewHolder , position : Int , payloads : List < Any > ) { getItem ( position ) ? . let { conversationViewData - >", "gt": "holder . setupWithConversation ( conversationViewData , payloads . firstOrNull ( ) ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/222"}
{"input": "<s> fun toAccount ( ) : TimelineAccount { return TimelineAccount ( id = id , localUsername = localUsername , username = username , displayName = displayName , note = \" \" ,", "gt": "url = \" \" , \n avatar = avatar , \n emojis = emojis \n ) \n }", "repo": "Tusky", "task_id": "Tusky/224"}
{"input": "<s> override fun onFavourite ( favourite : Boolean , position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . favourite ( favourite , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/233"}
{"input": "<s> override fun onBookmark ( favourite : Boolean , position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . bookmark ( favourite , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/234"}
{"input": "<s> override fun onViewMedia ( position : Int , attachmentIndex : Int , view : View ? ) { adapter . peek ( position ) ? . let { conversation - > viewMedia ( attachmentIndex ,", "gt": "AttachmentViewData . list ( conversation . lastStatus . status ) , \n view \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/235"}
{"input": "<s> override fun onExpandedChange ( expanded : Boolean , position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . expandHiddenStatus ( expanded , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/237"}
{"input": "<s> override fun onContentHiddenChange ( isShowing : Boolean , position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . showContent ( isShowing , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/238"}
{"input": "<s> override fun onContentCollapsedChange ( isCollapsed : Boolean , position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . collapseLongStatus ( isCollapsed , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/239"}
{"input": "<s> override fun onViewAccount ( id : String ) {", "gt": "val intent = AccountActivity . getIntent ( requireContext ( ) , id ) \n startActivity ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/240"}
{"input": "<s> override fun onViewTag ( tag : String ) {", "gt": "val intent = StatusListActivity . newHashtagIntent ( requireContext ( ) , tag ) \n startActivity ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/241"}
{"input": "<s> override fun onReply ( position : Int ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "reply ( conversation . lastStatus . status ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/242"}
{"input": "<s> override fun onVoteInPoll ( position : Int , choices : MutableList < Int > ) { adapter . peek ( position ) ? . let { conversation - >", "gt": "viewModel . voteInPoll ( choices , conversation ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/243"}
{"input": "<s> override fun onReselect ( ) { if ( isAdded ) { binding . recyclerView . layoutManager ? . scrollToPosition ( 0 )", "gt": "binding . recyclerView . stopScroll ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/244"}
{"input": "<s> private void setAvatars ( List < ConversationAccountEntity > accounts ) { for ( int i = 0 ; i < avatars . length ; i + + ) { ImageView avatarView = avatars [ i ] ; if ( i < accounts . size ( ) ) { ImageLoadingHelper . loadAvatar ( accounts . get ( i ) . getAvatar ( ) , avatarView , avatarRadius48dp , statusDisplayOptions . animateAvatars ( ) , null ) ; avatarView . setVisibility ( View . VISIBLE ) ;", "gt": "} else { \n avatarView . setVisibility ( View . GONE ) ; \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/252"}
{"input": "<s> fun block ( domain : String ) { viewModelScope . launch { repo . block ( domain ) . onFailure { e - > uiEvents . emit ( SnackbarEvent ( message = R . string . error_blocking_domain , domain = domain , throwable = e , actionText = R . string . action_retry , action = { block ( domain ) }", "gt": ") \n ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/260"}
{"input": "<s> suspend fun deleteDraftAndAttachments ( draftId : Int ) { draftDao . find ( draftId ) ? . let { draft - >", "gt": "deleteDraftAndAttachments ( draft ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/261"}
{"input": "<s> private suspend fun deleteDraftAndAttachments ( draft : DraftEntity ) {", "gt": "deleteAttachments ( draft ) \n draftDao . delete ( draft . id ) \n }", "repo": "Tusky", "task_id": "Tusky/262"}
{"input": "<s> suspend fun deleteAllDraftsAndAttachmentsForAccount ( accountId : Long ) { draftDao . loadDrafts ( accountId ) . forEach { draft - >", "gt": "deleteDraftAndAttachments ( draft ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/263"}
{"input": "<s> fun restoreDraft ( draft : DraftEntity ) { viewModelScope . launch { database . draftDao ( ) . insertOrReplace ( draft )", "gt": "deletedDrafts . remove ( draft ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/269"}
{"input": "<s> override fun onCleared ( ) { viewModelScope . launch {", "gt": "deletedDrafts . forEach { \n draftHelper . deleteAttachments ( it ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/270"}
{"input": "<s> fun load ( filter : Filter ) { originalFilter = filter title . value = filter . title keywords . value = filter . keywords action . value = filter . action duration . value = if ( filter . expiresAt = = null ) { 0", "gt": "} else { \n - 1 \n } \n contexts . value = filter . kinds \n }", "repo": "Tusky", "task_id": "Tusky/273"}
{"input": "<s> fun addContext ( context : Filter . Kind ) { if ( ! contexts . value . contains ( context ) ) {", "gt": "contexts . value + = context \n } \n }", "repo": "Tusky", "task_id": "Tusky/275"}
{"input": "<s> fun validate ( ) : Boolean { return title . value . isNotBlank ( ) & &", "gt": "keywords . value . isNotEmpty ( ) & & \n contexts . value . isNotEmpty ( ) \n }", "repo": "Tusky", "task_id": "Tusky/276"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "loadFilters ( ) \n observeViewModel ( ) \n }", "repo": "Tusky", "task_id": "Tusky/280"}
{"input": "<s> override fun finish ( ) { super . finish ( ) if ( isAdditionalLogin ( ) | | isAccountMigration ( ) ) {", "gt": "overridePendingTransition ( R . anim . slide_from_left , R . anim . slide_to_right ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/290"}
{"input": "<s> @ JvmStatic fun getIntent ( context : Context , mode : Int ) : Intent { val loginIntent = Intent ( context , LoginActivity : : class . java )", "gt": "loginIntent . putExtra ( LOGIN_MODE , mode ) \n return loginIntent \n }", "repo": "Tusky", "task_id": "Tusky/293"}
{"input": "<s> fun makeResultIntent ( result : LoginResult ) : Intent { val intent = Intent ( )", "gt": "intent . putExtra ( RESULT_EXTRA , result ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/297"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n binding . loginWebView . saveState ( outState ) \n }", "repo": "Tusky", "task_id": "Tusky/298"}
{"input": "<s> private fun sendResult ( result : LoginResult ) {", "gt": "setResult ( Activity . RESULT_OK , OauthLogin . makeResultIntent ( result ) ) \n finishWithoutSlideOutAnimation ( ) \n }", "repo": "Tusky", "task_id": "Tusky/300"}
{"input": "<s> public static void deleteNotificationChannelsForAccount ( @ NonNull AccountEntity account , @ NonNull Context context ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . O ) { NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ;", "gt": "notificationManager . deleteNotificationChannelGroup ( account . getIdentifier ( ) ) ; \n } \n }", "repo": "Tusky", "task_id": "Tusky/304"}
{"input": "<s> private suspend fun enableUnifiedPushNotificationsForAccount ( context : Context , api : MastodonApi , accountManager : AccountManager , account : AccountEntity ) { if ( isUnifiedPushNotificationEnabledForAccount ( account ) ) { updateUnifiedPushSubscription ( context , api , accountManager , account ) } else { UnifiedPush . registerAppWithDialog ( context ,", "gt": "account . id . toString ( ) , \n features = arrayListOf ( UnifiedPush . FEATURE_BYTES_MESSAGE ) \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/309"}
{"input": "<s> fun disableUnifiedPushNotificationsForAccount ( context : Context , account : AccountEntity ) { if ( ! isUnifiedPushNotificationEnabledForAccount ( account ) ) { return < / n > } < / n > < / n > UnifiedPush . unregisterApp ( context , account . id . toString ( ) ) < / n > } </s", "gt": "fun disableUnifiedPushNotificationsForAccount ( context : Context , account : AccountEntity ) { if ( ! isUnifiedPushNotificationEnabledForAccount ( account ) ) { return \n } \n \n UnifiedPush . unregisterApp ( context , account . id . toString ( ) ) \n }", "repo": "Tusky", "task_id": "Tusky/310"}
{"input": "<s> private fun disablePushNotifications ( context : Context , accountManager : AccountManager ) { accountManager . accounts . forEach {", "gt": "disableUnifiedPushNotificationsForAccount ( context , it ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/311"}
{"input": "<s> fun disableAllNotifications ( context : Context , accountManager : AccountManager ) {", "gt": "disablePushNotifications ( context , accountManager ) \n NotificationHelper . disablePullNotifications ( context ) \n }", "repo": "Tusky", "task_id": "Tusky/312"}
{"input": "<s> suspend fun updateUnifiedPushSubscription ( context : Context , api : MastodonApi , accountManager : AccountManager , account : AccountEntity ) { withContext ( Dispatchers . IO ) { api . updatePushNotificationSubscription ( \" <STR_LIT> \" , account . domain , buildSubscriptionData ( context , account ) ) . onSuccess { Log . d ( TAG , \" <STR_LIT> \" )", "gt": "account . pushServerKey = it . serverKey \n accountManager . saveAccount ( account ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/314"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . setTitle ( R . string . action_view_account_preferences ) \n }", "repo": "Tusky", "task_id": "Tusky/315"}
{"input": "<s> @ DrawableRes private fun getIconForSensitivity ( sensitive : Boolean ) : Int { return if ( sensitive ) {", "gt": "R . drawable . ic_hide_media_24dp \n } else { \n R . drawable . ic_eye_24dp \n } \n }", "repo": "Tusky", "task_id": "Tusky/318"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . setTitle ( R . string . pref_title_edit_notification_settings ) \n }", "repo": "Tusky", "task_id": "Tusky/321"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) PreferenceManager . getDefaultSharedPreferences (", "gt": "this \n ) . registerOnSharedPreferenceChangeListener ( this ) \n }", "repo": "Tusky", "task_id": "Tusky/322"}
{"input": "<s> override fun onPause ( ) { super . onPause ( ) PreferenceManager . getDefaultSharedPreferences (", "gt": "this \n ) . unregisterOnSharedPreferenceChangeListener ( this ) \n }", "repo": "Tusky", "task_id": "Tusky/323"}
{"input": "<s> @ JvmStatic fun newIntent ( context : Context , preferenceType : Int ) : Intent { val intent = Intent ( context , PreferencesActivity : : class . java )", "gt": "intent . putExtra ( EXTRA_PREFERENCE_TYPE , preferenceType ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/326"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . setTitle ( R . string . action_view_preferences ) \n }", "repo": "Tusky", "task_id": "Tusky/327"}
{"input": "<s> override fun onDisplayPreferenceDialog ( preference : Preference ) { if ( ! EmojiPickerPreference . onDisplayPreferenceDialog ( this , preference ) ) {", "gt": "super . onDisplayPreferenceDialog ( preference ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/328"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . setTitle ( R . string . pref_title_http_proxy_settings ) \n }", "repo": "Tusky", "task_id": "Tusky/329"}
{"input": "<s> override fun onPause ( ) { super . onPause ( )", "gt": "if ( pendingRestart ) { \n pendingRestart = false \n exitProcess ( 0 ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/330"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . setTitle ( R . string . pref_title_post_tabs ) \n }", "repo": "Tusky", "task_id": "Tusky/331"}
{"input": "<s> override fun onBindViewHolder ( holder : StatusViewHolder , position : Int ) { getItem ( position ) ? . let { status - >", "gt": "holder . bind ( status ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/334"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < String , Status > ) : String ? { return state . anchorPosition ? . let { anchorPosition - >", "gt": "state . closestItemToPosition ( anchorPosition ) ? . id \n } \n }", "repo": "Tusky", "task_id": "Tusky/335"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { binding . textReported . text = getString ( R . string . report_sent_success , viewModel . accountUserName )", "gt": "handleClicks ( ) \n subscribeObservables ( ) \n }", "repo": "Tusky", "task_id": "Tusky/339"}
{"input": "<s> private fun handleClicks ( ) { binding . buttonDone . setOnClickListener { viewModel . navigateTo ( Screen . Finish ) } binding . buttonBlock . setOnClickListener { viewModel . toggleBlock ( )", "gt": "} \n binding . buttonMute . setOnClickListener { \n viewModel . toggleMute ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/340"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { fillViews ( ) handleChanges ( )", "gt": "handleClicks ( ) \n subscribeObservables ( ) \n }", "repo": "Tusky", "task_id": "Tusky/341"}
{"input": "<s> private fun subscribeObservables ( ) { viewModel . reportingState . observe ( viewLifecycleOwner ) { when ( it ) { is Success - > viewModel . navigateTo ( Screen . Done )", "gt": "is Loading - > showLoading ( ) \n is Error - > showError ( it . cause ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/343"}
{"input": "<s> private fun handleClicks ( ) { binding . buttonBack . setOnClickListener { viewModel . navigateTo ( Screen . Back ) }", "gt": "binding . buttonReport . setOnClickListener { \n sendReport ( ) \n }", "repo": "Tusky", "task_id": "Tusky/345"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { requireActivity ( ) . addMenuProvider ( this , viewLifecycleOwner , Lifecycle . State . RESUMED ) handleClicks ( )", "gt": "initStatusesView ( ) \n setupSwipeRefreshLayout ( ) \n }", "repo": "Tusky", "task_id": "Tusky/346"}
{"input": "<s> override fun onRefresh ( ) {", "gt": "snackbarErrorRetry ? . dismiss ( ) \n adapter . refresh ( ) \n }", "repo": "Tusky", "task_id": "Tusky/349"}
{"input": "<s> private fun setupSwipeRefreshLayout ( ) { binding . swipeRefreshLayout . setColorSchemeResources ( R . color . tusky_blue )", "gt": "binding . swipeRefreshLayout . setOnRefreshListener ( this ) \n }", "repo": "Tusky", "task_id": "Tusky/350"}
{"input": "<s> private fun showError ( ) { if ( snackbarErrorRetry ? . isShown ! = true ) { snackbarErrorRetry = Snackbar . make ( binding . swipeRefreshLayout , R . string . failed_fetch_posts , Snackbar . LENGTH_INDEFINITE ) snackbarErrorRetry ? . setAction ( R . string . action_retry ) {", "gt": "adapter . retry ( ) \n } \n snackbarErrorRetry ? . show ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/351"}
{"input": "<s> private fun handleClicks ( ) { binding . buttonCancel . setOnClickListener { viewModel . navigateTo ( Screen . Back ) }", "gt": "binding . buttonContinue . setOnClickListener { \n viewModel . navigateTo ( Screen . Note ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/352"}
{"input": "<s> private fun showPreviousScreen ( ) { when ( binding . wizard . currentItem ) { 0 - > closeScreen ( )", "gt": "1 - > showStatusesPage ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/358"}
{"input": "<s> fun init ( accountId : String , userName : String , statusId : String ? ) { this . accountId = accountId this . accountUserName = userName this . statusId = statusId statusId ? . let { selectedIds . add ( it ) } isRemoteAccount = userName . contains ( <CHAR_LIT> ) if ( isRemoteAccount ) { remoteServer = userName . substring ( userName . indexOf ( <CHAR_LIT> ) + 1 ) } obtainRelationship ( )", "gt": "viewModelScope . launch { \n accountIdFlow . emit ( accountId ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/360"}
{"input": "<s> private fun obtainRelationship ( ) { val ids = listOf ( accountId ) muteStateMutable . value = Loading ( ) blockStateMutable . value = Loading ( ) viewModelScope . launch { mastodonApi . relationships ( ids ) . fold ( { data - > updateRelationship ( data . getOrNull ( 0 ) ) } , {", "gt": "updateRelationship ( null ) \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/361"}
{"input": "<s> fun setStatusChecked ( status : Status , checked : Boolean ) { if ( checked ) {", "gt": "selectedIds . add ( status . id ) \n } else { \n selectedIds . remove ( status . id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/364"}
{"input": "<s> fun remove ( status : ScheduledStatus ) {", "gt": "scheduledTootsCache . remove ( status ) \n pagingSource ? . invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/371"}
{"input": "<s> fun newSearch ( newSearchRequest : String ) {", "gt": "this . searchRequest = newSearchRequest \n currentSource ? . invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/379"}
{"input": "<s> override fun onBindViewHolder ( holder : StatusViewHolder , position : Int ) { getItem ( position ) ? . let { item - >", "gt": "holder . setupWithStatus ( item , statusListener , statusDisplayOptions ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/381"}
{"input": "<s> private fun showError ( ) { if ( snackbarErrorRetry ? . isShown ! = true ) { snackbarErrorRetry = Snackbar . make ( binding . root , R . string . failed_search , Snackbar . LENGTH_INDEFINITE ) snackbarErrorRetry ? . setAction ( R . string . action_retry ) { snackbarErrorRetry = null", "gt": "adapter . retry ( ) \n } \n snackbarErrorRetry ? . show ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/389"}
{"input": "<s> override fun onViewAccount ( id : String ) { bottomSheetActivity ? . startActivityWithSlideInAnimation (", "gt": "AccountActivity . getIntent ( requireContext ( ) , id ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/390"}
{"input": "<s> override fun onViewTag ( tag : String ) { bottomSheetActivity ? . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/391"}
{"input": "<s> override fun onContentHiddenChange ( isShowing : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let {", "gt": "viewModel . contentHiddenChange ( it , isShowing ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/393"}
{"input": "<s> override fun onReply ( position : Int ) { searchAdapter . peek ( position ) ? . let { status - >", "gt": "reply ( status ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/394"}
{"input": "<s> override fun onFavourite ( favourite : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let { status - >", "gt": "viewModel . favorite ( status , favourite ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/395"}
{"input": "<s> override fun onBookmark ( bookmark : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let { status - >", "gt": "viewModel . bookmark ( status , bookmark ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/396"}
{"input": "<s> override fun onMore ( view : View , position : Int ) { searchAdapter . peek ( position ) ? . status ? . let {", "gt": "more ( it , view , position ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/397"}
{"input": "<s> override fun onViewThread ( position : Int ) { searchAdapter . peek ( position ) ? . status ? . let { status - > val actionableStatus = status . actionableStatus", "gt": "bottomSheetActivity ? . viewThread ( actionableStatus . id , actionableStatus . url ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/398"}
{"input": "<s> override fun onOpenReblog ( position : Int ) { searchAdapter . peek ( position ) ? . status ? . let { status - >", "gt": "bottomSheetActivity ? . viewAccount ( status . account . id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/399"}
{"input": "<s> override fun onExpandedChange ( expanded : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let {", "gt": "viewModel . expandedChange ( it , expanded ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/400"}
{"input": "<s> override fun onContentCollapsedChange ( isCollapsed : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let {", "gt": "viewModel . collapsedChange ( it , isCollapsed ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/401"}
{"input": "<s> override fun onVoteInPoll ( position : Int , choices : MutableList < Int > ) { searchAdapter . peek ( position ) ? . let {", "gt": "viewModel . voteInPoll ( it , choices ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/402"}
{"input": "<s> private fun removeItem ( position : Int ) { searchAdapter . peek ( position ) ? . let {", "gt": "viewModel . removeItem ( it ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/403"}
{"input": "<s> override fun onReblog ( reblog : Boolean , position : Int ) { searchAdapter . peek ( position ) ? . let { status - >", "gt": "viewModel . reblog ( status , reblog ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/404"}
{"input": "<s> private fun accountIsInMentions ( account : AccountEntity ? , mentions : List < Mention > ) : Boolean { return mentions . firstOrNull {", "gt": "account ? . username = = it . username & & account . domain = = Uri . parse ( it . url ) ? . host \n } ! = null \n }", "repo": "Tusky", "task_id": "Tusky/407"}
{"input": "<s> private fun showOpenAsDialog ( statusUrl : String , dialogTitle : CharSequence ? ) { bottomSheetActivity ? . showAccountChooserDialog ( dialogTitle , false , object : AccountSelectionListener { override fun onAccountSelected ( account : AccountEntity ) {", "gt": "bottomSheetActivity ? . openAsAccount ( statusUrl , account ) \n } \n } \n ) \n }", "repo": "Tusky", "task_id": "Tusky/408"}
{"input": "<s> private fun openReportPage ( accountId : String , accountUsername : String , statusId : String ) { startActivity (", "gt": "ReportActivity . getIntent ( requireContext ( ) , accountId , accountUsername , statusId ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/409"}
{"input": "<s> private fun showConfirmDeleteDialog ( id : String , position : Int ) { context ? . let { AlertDialog . Builder ( it ) . setMessage ( R . string . dialog_delete_post_warning ) . setPositiveButton ( android . R . string . ok ) { _ , _ - > viewModel . deleteStatusAsync ( id ) removeItem ( position )", "gt": "} \n . setNegativeButton ( android . R . string . cancel , null ) \n . show ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/410"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setContentView ( binding . root ) setSupportActionBar ( binding . toolbar ) supportActionBar ? . apply { setDisplayHomeAsUpEnabled ( true ) setDisplayShowHomeEnabled ( true ) setDisplayShowTitleEnabled ( false )", "gt": "} \n addMenuProvider ( this ) \n setupPages ( ) \n handleIntent ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/411"}
{"input": "<s> override fun onNewIntent ( intent : Intent ) {", "gt": "super . onNewIntent ( intent ) \n handleIntent ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/413"}
{"input": "<s> private fun handleIntent ( intent : Intent ) { if ( Intent . ACTION_SEARCH = = intent . action ) { viewModel . currentQuery = intent . getStringExtra ( SearchManager . QUERY ) . orEmpty ( )", "gt": "viewModel . search ( viewModel . currentQuery ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/416"}
{"input": "<s> fun search ( query : String ) { loadedStatuses . clear ( ) statusesPagingSourceFactory . newSearch ( query )", "gt": "accountsPagingSourceFactory . newSearch ( query ) \n hashtagsPagingSourceFactory . newSearch ( query ) \n }", "repo": "Tusky", "task_id": "Tusky/418"}
{"input": "<s> fun muteAccount ( accountId : String , notifications : Boolean , duration : Int ? ) { viewModelScope . launch {", "gt": "timelineCases . mute ( accountId , notifications , duration ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/424"}
{"input": "<s> fun pinAccount ( status : Status , isPin : Boolean ) { viewModelScope . launch {", "gt": "timelineCases . pin ( status . id , isPin ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/425"}
{"input": "<s> fun blockAccount ( accountId : String ) { viewModelScope . launch {", "gt": "timelineCases . block ( accountId ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/426"}
{"input": "<s> fun deleteStatusAsync ( id : String ) : Deferred < NetworkResult < DeletedStatus > > { return viewModelScope . async {", "gt": "timelineCases . delete ( id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/427"}
{"input": "<s> fun muteConversation ( statusViewData : StatusViewData . Concrete , mute : Boolean ) { updateStatus ( statusViewData . status . copy ( muted = mute ) ) viewModelScope . launch {", "gt": "timelineCases . muteConversation ( statusViewData . id , mute ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/428"}
{"input": "<s> private fun updateStatus ( newStatus : Status ) { val statusViewData = loadedStatuses . find { it . id = = newStatus . id } if ( statusViewData ! = null ) {", "gt": "updateStatusViewData ( statusViewData . copy ( status = newStatus ) ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/430"}
{"input": "<s> override fun onRefresh ( ) { binding . statusView . hide ( )", "gt": "adapter . refresh ( ) \n }", "repo": "Tusky", "task_id": "Tusky/434"}
{"input": "<s> override fun onReply ( position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n super . reply ( status . status ) \n }", "repo": "Tusky", "task_id": "Tusky/435"}
{"input": "<s> override fun onReblog ( reblog : Boolean , position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . reblog ( reblog , status ) \n }", "repo": "Tusky", "task_id": "Tusky/436"}
{"input": "<s> override fun onFavourite ( favourite : Boolean , position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . favorite ( favourite , status ) \n }", "repo": "Tusky", "task_id": "Tusky/437"}
{"input": "<s> override fun onBookmark ( bookmark : Boolean , position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . bookmark ( bookmark , status ) \n }", "repo": "Tusky", "task_id": "Tusky/438"}
{"input": "<s> override fun onVoteInPoll ( position : Int , choices : List < Int > ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . voteInPoll ( choices , status ) \n }", "repo": "Tusky", "task_id": "Tusky/439"}
{"input": "<s> override fun clearWarningAction ( position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . clearWarning ( status ) \n }", "repo": "Tusky", "task_id": "Tusky/440"}
{"input": "<s> override fun onMore ( view : View , position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n super . more ( status . status , view , position ) \n }", "repo": "Tusky", "task_id": "Tusky/441"}
{"input": "<s> override fun onOpenReblog ( position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n super . openReblog ( status . status ) \n }", "repo": "Tusky", "task_id": "Tusky/442"}
{"input": "<s> override fun onViewMedia ( position : Int , attachmentIndex : Int , view : View ? ) { val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return super . viewMedia (", "gt": "attachmentIndex , \n AttachmentViewData . list ( status . actionable ) , \n view \n ) \n }", "repo": "Tusky", "task_id": "Tusky/449"}
{"input": "<s> override fun onViewAccount ( id : String ) { if ( ( viewModel . kind = = TimelineViewModel . Kind . USER | | viewModel . kind = = TimelineViewModel . Kind . USER_WITH_REPLIES ) & & viewModel . id = = id ) { < / n > return < / n > } < / n > super . viewAccount ( id ) < / n > } </s", "gt": "override fun onViewAccount ( id : String ) { if ( ( viewModel . kind = = TimelineViewModel . Kind . USER | | viewModel . kind = = TimelineViewModel . Kind . USER_WITH_REPLIES ) & & viewModel . id = = id ) { \n return \n } \n super . viewAccount ( id ) \n }", "repo": "Tusky", "task_id": "Tusky/452"}
{"input": "<s> public override fun removeItem ( position : Int ) {", "gt": "val status = adapter . peek ( position ) ? . asStatusOrNull ( ) ? : return \n viewModel . removeStatusWithId ( status . id ) \n }", "repo": "Tusky", "task_id": "Tusky/453"}
{"input": "<s> private fun actionButtonPresent ( ) : Boolean { return viewModel . kind ! = TimelineViewModel . Kind . TAG & & viewModel . kind ! = TimelineViewModel . Kind . FAVOURITES & &", "gt": "viewModel . kind ! = TimelineViewModel . Kind . BOOKMARKS & & \n activity is ActionButtonActivity \n }", "repo": "Tusky", "task_id": "Tusky/454"}
{"input": "<s> override fun onReselect ( ) { if ( isAdded ) { binding . recyclerView . layoutManager ? . scrollToPosition ( 0 )", "gt": "binding . recyclerView . stopScroll ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/457"}
{"input": "<s> override fun changeExpanded ( expanded : Boolean , status : StatusViewData . Concrete ) { viewModelScope . launch {", "gt": "db . timelineDao ( ) . setExpanded ( accountManager . activeAccount ! ! . id , status . id , expanded ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/464"}
{"input": "<s> override fun changeContentShowing ( isShowing : Boolean , status : StatusViewData . Concrete ) { viewModelScope . launch { db . timelineDao ( )", "gt": ". setContentShowing ( accountManager . activeAccount ! ! . id , status . id , isShowing ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/465"}
{"input": "<s> override fun changeContentCollapsed ( isCollapsed : Boolean , status : StatusViewData . Concrete ) { viewModelScope . launch { db . timelineDao ( )", "gt": ". setContentCollapsed ( accountManager . activeAccount ! ! . id , status . id , isCollapsed ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/466"}
{"input": "<s> override fun removeAllByAccountId ( accountId : String ) { viewModelScope . launch {", "gt": "db . timelineDao ( ) . removeAllByUser ( accountManager . activeAccount ! ! . id , accountId ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/467"}
{"input": "<s> override fun removeAllByInstance ( instance : String ) { viewModelScope . launch {", "gt": "db . timelineDao ( ) . deleteAllFromInstance ( accountManager . activeAccount ! ! . id , instance ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/468"}
{"input": "<s> override fun fullReload ( ) { viewModelScope . launch { val activeAccount = accountManager . activeAccount ! !", "gt": "db . timelineDao ( ) . removeAll ( activeAccount . id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/471"}
{"input": "<s> fun invalidate ( ) { if ( db . timelineDao ( ) . getStatusCount ( accountManager . activeAccount ! ! . id ) > 0 ) {", "gt": "currentPagingSource ? . invalidate ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/473"}
{"input": "<s> override fun updatePoll ( newPoll : Poll , status : StatusViewData . Concrete ) { status . copy (", "gt": "status = status . status . copy ( poll = newPoll ) \n ) . update ( ) \n }", "repo": "Tusky", "task_id": "Tusky/475"}
{"input": "<s> override fun changeExpanded ( expanded : Boolean , status : StatusViewData . Concrete ) { status . copy (", "gt": "isExpanded = expanded \n ) . update ( ) \n }", "repo": "Tusky", "task_id": "Tusky/476"}
{"input": "<s> override fun changeContentShowing ( isShowing : Boolean , status : StatusViewData . Concrete ) { status . copy (", "gt": "isShowingContent = isShowing \n ) . update ( ) \n }", "repo": "Tusky", "task_id": "Tusky/477"}
{"input": "<s> override fun changeContentCollapsed ( isCollapsed : Boolean , status : StatusViewData . Concrete ) { status . copy (", "gt": "isCollapsed = isCollapsed \n ) . update ( ) \n }", "repo": "Tusky", "task_id": "Tusky/478"}
{"input": "<s> override fun fullReload ( ) { nextKey = statusData . firstOrNull { it is StatusViewData . Concrete } ? . asStatusOrNull ( ) ? . id", "gt": "statusData . clear ( ) \n currentSource ? . invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/484"}
{"input": "<s> override fun clearWarning ( status : StatusViewData . Concrete ) { updateActionableStatusById ( status . id ) {", "gt": "it . copy ( filtered = null ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/485"}
{"input": "<s> private fun StatusViewData . Concrete . update ( ) { val position = statusData . indexOfFirst { viewData - > viewData . asStatusOrNull ( ) ? . id = = this . id }", "gt": "statusData [ position ] = this \n currentSource ? . invalidate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/486"}
{"input": "<s> fun setup ( start : Date , end : Date ) { binding . dates . text = itemView . context . getString (", "gt": "R . string . date_range , \n dateFormat . format ( start ) , \n dateFormat . format ( end ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/493"}
{"input": "<s> fun onViewTag ( tag : String ) { ( requireActivity ( ) as BaseActivity ) . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/500"}
{"input": "<s> private fun applyLoadingState ( ) { binding . recyclerView . hide ( )", "gt": "binding . messageView . hide ( ) \n binding . progressBar . show ( ) \n }", "repo": "Tusky", "task_id": "Tusky/502"}
{"input": "<s> private fun clearLoadingState ( ) { binding . swipeRefreshLayout . isRefreshing = false", "gt": "binding . progressBar . hide ( ) \n binding . messageView . hide ( ) \n }", "repo": "Tusky", "task_id": "Tusky/503"}
{"input": "<s> override fun onReselect ( ) { if ( isAdded ) { binding . recyclerView . layoutManager ? . scrollToPosition ( 0 )", "gt": "binding . recyclerView . stopScroll ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/506"}
{"input": "<s> override fun updateDrawState ( tp : TextPaint ) {", "gt": "tp . bgColor = bgColor \n tp . isStrikeThruText = true \n }", "repo": "Tusky", "task_id": "Tusky/507"}
{"input": "<s> override fun updateDrawState ( tp : TextPaint ) {", "gt": "tp . bgColor = bgColor \n tp . typeface = DEFAULT_BOLD \n }", "repo": "Tusky", "task_id": "Tusky/508"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . title = getString ( R . string . title_edits ) \n }", "repo": "Tusky", "task_id": "Tusky/511"}
{"input": "<s> override fun onViewAccount ( id : String ) { bottomSheetActivity ? . startActivityWithSlideInAnimation (", "gt": "AccountActivity . getIntent ( requireContext ( ) , id ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/512"}
{"input": "<s> override fun onViewTag ( tag : String ) { bottomSheetActivity ? . startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newHashtagIntent ( requireContext ( ) , tag ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/513"}
{"input": "<s> override fun handle ( operator : Operator , token : XMLToken ) { if ( operator . isEdit ) {", "gt": "handleEdit ( operator , token ) \n } else { \n token . toXML ( xml ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/515"}
{"input": "<s> fun startIntent ( context : Context , id : String , url : String ) : Intent { val intent = Intent ( context , ViewThreadActivity : : class . java ) intent . putExtra ( ID_EXTRA , id )", "gt": "intent . putExtra ( URL_EXTRA , url ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/518"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n requireActivity ( ) . title = getString ( R . string . title_view_thread ) \n }", "repo": "Tusky", "task_id": "Tusky/521"}
{"input": "<s> override fun onReblog ( reblog : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ] \n viewModel . reblog ( reblog , status ) \n }", "repo": "Tusky", "task_id": "Tusky/523"}
{"input": "<s> override fun onFavourite ( favourite : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ] \n viewModel . favorite ( favourite , status ) \n }", "repo": "Tusky", "task_id": "Tusky/524"}
{"input": "<s> override fun onBookmark ( bookmark : Boolean , position : Int ) {", "gt": "val status = adapter . currentList [ position ] \n viewModel . bookmark ( bookmark , status ) \n }", "repo": "Tusky", "task_id": "Tusky/525"}
{"input": "<s> override fun onViewMedia ( position : Int , attachmentIndex : Int , view : View ? ) { val status = adapter . currentList [ position ] . status super . viewMedia (", "gt": "attachmentIndex , \n list ( status , alwaysShowSensitiveMedia ) , \n view \n ) \n }", "repo": "Tusky", "task_id": "Tusky/526"}
{"input": "<s> override fun onViewUrl ( url : String ) { val status : StatusViewData . Concrete ? = viewModel . detailedStatus ( ) if ( status ! = null & & status . status . url = = url ) { requireContext ( ) . openLink ( url ) < / n > return < / n > } < / n > super . onViewUrl ( url ) < / n > } </s", "gt": "override fun onViewUrl ( url : String ) { val status : StatusViewData . Concrete ? = viewModel . detailedStatus ( ) if ( status ! = null & & status . status . url = = url ) { requireContext ( ) . openLink ( url ) \n return \n } \n super . onViewUrl ( url ) \n }", "repo": "Tusky", "task_id": "Tusky/528"}
{"input": "<s> override fun onVoteInPoll ( position : Int , choices : List < Int > ) {", "gt": "val status = adapter . currentList [ position ] \n viewModel . voteInPoll ( choices , status ) \n }", "repo": "Tusky", "task_id": "Tusky/532"}
{"input": "<s> fun retry ( id : String ) {", "gt": "_uiState . value = ThreadUiState . Loading \n loadThread ( id ) \n }", "repo": "Tusky", "task_id": "Tusky/534"}
{"input": "<s> fun refresh ( id : String ) {", "gt": "_uiState . value = ThreadUiState . Refreshing \n loadThread ( id ) \n }", "repo": "Tusky", "task_id": "Tusky/535"}
{"input": "<s> fun changeContentShowing ( isShowing : Boolean , status : StatusViewData . Concrete ) { updateStatusViewData ( status . id ) { viewData - >", "gt": "viewData . copy ( isShowingContent = isShowing ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/542"}
{"input": "<s> fun changeContentCollapsed ( isCollapsed : Boolean , status : StatusViewData . Concrete ) { updateStatusViewData ( status . id ) { viewData - >", "gt": "viewData . copy ( isCollapsed = isCollapsed ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/543"}
{"input": "<s> private fun removeAllByAccountId ( accountId : String ) { updateSuccess { uiState - > uiState . copy ( statusViewData = uiState . statusViewData . filter { viewData - >", "gt": "viewData . status . account . id ! = accountId \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/545"}
{"input": "<s> private fun handleStatusDeletedEvent ( event : StatusDeletedEvent ) { updateSuccess { uiState - > uiState . copy ( statusViewData = uiState . statusViewData . filter { status - >", "gt": "status . id ! = event . statusId \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/546"}
{"input": "<s> < StatusViewData . Concrete > . getRevealButtonState ( ) : RevealButtonState { var seenHide = false forEach { when ( val state = it . getRevealButtonState ( ) ) { RevealButtonState . NO_BUTTON - > return @ forEach RevealButtonState . REVEAL - > return state RevealButtonState . HIDE - > seenHide = true } } if ( seenHide ) {", "gt": "return RevealButtonState . HIDE \n } \n \n return RevealButtonState . NO_BUTTON \n }", "repo": "Tusky", "task_id": "Tusky/548"}
{"input": "<s> private fun updateStatusViewData ( statusId : String , updater : ( StatusViewData . Concrete ) - > StatusViewData . Concrete ) { updateSuccess { uiState - > uiState . copy ( statusViewData = uiState . statusViewData . map { viewData - > if ( viewData . id = = statusId ) { updater ( viewData ) } else { viewData", "gt": "} \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/553"}
{"input": "<s> private fun updateStatus ( statusId : String , updater : ( Status ) - > Status ) { updateStatusViewData ( statusId ) { viewData - >", "gt": "viewData . copy ( \n status = updater ( viewData . status ) \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/554"}
{"input": "<s> fun logout ( ) { accessToken = \" \"", "gt": "clientId = null \n clientSecret = null \n }", "repo": "Tusky", "task_id": "Tusky/556"}
{"input": "<s> fun saveAccount ( account : AccountEntity ) { if ( account . id ! = 0 L ) { Log . d ( TAG , \" <STR_LIT> \" + account . id )", "gt": "accountDao . insertOrReplace ( account ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/559"}
{"input": "<s> fun setActiveAccount ( accountId : Long ) { val newActiveAccount = accounts . find { ( id ) - > id = = accountId } ? : return activeAccount ? . let { Log . d ( TAG , \" <STR_LIT> \" + it . id ) it . isActive = false saveAccount ( it ) } activeAccount = newActiveAccount", "gt": "activeAccount ? . let { \n it . isActive = true \n accountDao . insertOrReplace ( it ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/560"}
{"input": "<s> fun getAllAccountsOrderedByActive ( ) : List < AccountEntity > { val accountsCopy = accounts . toMutableList ( ) accountsCopy . sortWith { l , r - > when { l . isActive & & ! r . isActive - > - 1 r . isActive & & ! l . isActive - > 1 else - > 0", "gt": "} \n } \n \n return accountsCopy \n }", "repo": "Tusky", "task_id": "Tusky/561"}
{"input": "<s> fun getAccountById ( accountId : Long ) : AccountEntity ? { return accounts . find { ( id ) - >", "gt": "id = = accountId \n } \n }", "repo": "Tusky", "task_id": "Tusky/562"}
{"input": "<s> fun getAccountByIdentifier ( identifier : String ) : AccountEntity ? { return accounts . find {", "gt": "identifier = = it . identifier \n } \n }", "repo": "Tusky", "task_id": "Tusky/563"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) { database . execSQL ( \" <STR_LIT> \" ) ; database . execSQL ( \" <STR_LIT> \" ) ;", "gt": "database . execSQL ( \" <STR_LIT> \" ) ; \n database . execSQL ( \" <STR_LIT> \" ) ; \n }", "repo": "Tusky", "task_id": "Tusky/565"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) {", "gt": "MIGRATION_11_12 . migrate ( database ) ; \n MIGRATION_12_13 . migrate ( database ) ; \n }", "repo": "Tusky", "task_id": "Tusky/569"}
{"input": "<s> @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) {", "gt": "database . execSQL ( \" <STR_LIT> \" ) ; \n database . execSQL ( \" <STR_LIT> \" ) ; \n }", "repo": "Tusky", "task_id": "Tusky/576"}
{"input": "<s> @ TypeConverter fun jsonToAccountList ( accountListJson : String ? ) : List < ConversationAccountEntity > ? { return gson . fromJson ( accountListJson ,", "gt": "object : TypeToken < List < ConversationAccountEntity > > ( ) { } . type \n ) \n }", "repo": "Tusky", "task_id": "Tusky/585"}
{"input": "<s> @ TypeConverter fun jsonToDraftAttachmentList ( draftAttachmentListJson : String ? ) : List < DraftAttachment > ? { return gson . fromJson ( draftAttachmentListJson ,", "gt": "object : TypeToken < List < DraftAttachment > > ( ) { } . type \n ) \n }", "repo": "Tusky", "task_id": "Tusky/586"}
{"input": "<s> private fun clearDraftsAlert ( coroutineScope : LifecycleCoroutineScope , id : Long ) { coroutineScope . launch {", "gt": "draftDao . draftsClearNeedUserAlert ( id ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/587"}
{"input": "<s> suspend fun removeAll ( accountId : Long ) {", "gt": "removeAllStatuses ( accountId ) \n removeAllAccounts ( accountId ) \n }", "repo": "Tusky", "task_id": "Tusky/588"}
{"input": "<s> suspend fun cleanup ( accountId : Long , limit : Int ) {", "gt": "cleanupStatuses ( accountId , limit ) \n cleanupAccounts ( accountId ) \n }", "repo": "Tusky", "task_id": "Tusky/589"}
{"input": "<s> fun checkForUnsavedChanges ( ) { if ( viewModel . hasUnsavedChanges ( currentProfileData ) ) {", "gt": "showUnsavedChangesDialog ( ) \n } else { \n finish ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/592"}
{"input": "<s> override fun onStop ( ) { super . onStop ( ) if ( ! isFinishing ) {", "gt": "viewModel . updateProfile ( currentProfileData ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/593"}
{"input": "<s> fun rewriteToStatusTypeIfNeeded ( accountId : String ) : Notification { if ( type = = Type . MENTION & & status ! = null ) { return if ( status . mentions . any { it . id = = accountId } ) { this } else {", "gt": "copy ( type = Type . STATUS ) \n } \n } \n return this \n }", "repo": "Tusky", "task_id": "Tusky/607"}
{"input": "<s> fun toDeletedStatus ( ) : DeletedStatus { return DeletedStatus ( text = getEditableText ( ) , inReplyToId = inReplyToId , spoilerText = spoilerText , visibility = visibility , sensitive = sensitive , attachments = attachments ,", "gt": "poll = poll , \n createdAt = createdAt , \n language = language \n ) \n }", "repo": "Tusky", "task_id": "Tusky/610"}
{"input": "<s> public static NotificationsFragment newInstance ( ) { NotificationsFragment fragment = new NotificationsFragment ( ) ; Bundle arguments = new Bundle ( ) ;", "gt": "fragment . setArguments ( arguments ) ; \n return fragment ; \n }", "repo": "Tusky", "task_id": "Tusky/611"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n binding = null ; \n }", "repo": "Tusky", "task_id": "Tusky/612"}
{"input": "<s> @ Override public boolean onMenuItemSelected ( @ NonNull MenuItem menuItem ) { if ( menuItem . getItemId ( ) = = R . id . action_refresh ) { binding . swipeRefreshLayout . setRefreshing ( true ) ; onRefresh ( ) ; return true ; } else if ( menuItem . getItemId ( ) = = R . id . action_edit_notification_filter ) { showFilterMenu ( ) ; return true ; } else if ( menuItem . getItemId ( ) = = R . id . action_clear_notifications ) {", "gt": "confirmClearNotifications ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "Tusky", "task_id": "Tusky/613"}
{"input": "<s> @ Override public void onRefresh ( ) { binding . statusView . setVisibility ( View . GONE ) ; this . showingError = false ; Either < Placeholder , Notification > first = CollectionsKt . firstOrNull ( this . notifications ) ; String topId ; if ( first ! = null & & first . isRight ( ) ) { topId = first . asRight ( ) . getId ( ) ;", "gt": "} else { \n topId = null ; \n } \n sendFetchNotificationsRequest ( null , topId , FetchEnd . TOP , - 1 ) ; \n }", "repo": "Tusky", "task_id": "Tusky/614"}
{"input": "<s> @ Override public void removeItem ( int position ) {", "gt": "notifications . remove ( position ) ; \n updateAdapter ( ) ; \n }", "repo": "Tusky", "task_id": "Tusky/627"}
{"input": "<s> private Placeholder newPlaceholder ( ) { Placeholder placeholder = Placeholder . getInstance ( maxPlaceholderId ) ;", "gt": "maxPlaceholderId - - ; \n return placeholder ; \n }", "repo": "Tusky", "task_id": "Tusky/628"}
{"input": "<s> protected fun openReblog ( status : Status ? ) {", "gt": "if ( status = = null ) return \n bottomSheetActivity . viewAccount ( status . account . id ) \n }", "repo": "Tusky", "task_id": "Tusky/637"}
{"input": "<s> private fun onBlock ( accountId : String , accountUsername : String ) { AlertDialog . Builder ( requireContext ( ) ) . setMessage ( getString ( R . string . dialog_block_warning , accountUsername ) ) . setPositiveButton ( android . R . string . ok ) { _ : DialogInterface ? , _ : Int - > lifecycleScope . launch { timelineCases . block ( accountId )", "gt": "} \n } \n . setNegativeButton ( android . R . string . cancel , null ) \n . show ( ) \n }", "repo": "Tusky", "task_id": "Tusky/639"}
{"input": "<s> private fun accountIsInMentions ( account : AccountEntity ? , mentions : List < Status . Mention > ) : Boolean { return mentions . any { mention - >", "gt": "account ? . username = = mention . username & & account . domain = = Uri . parse ( mention . url ) ? . host \n } \n }", "repo": "Tusky", "task_id": "Tusky/641"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n photoActionsListener = context as PhotoActionsListener \n }", "repo": "Tusky", "task_id": "Tusky/642"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "transition . onComplete ( ) \n super . onDestroyView ( ) \n }", "repo": "Tusky", "task_id": "Tusky/645"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "toolbarVisibilityDisposable ? . invoke ( ) \n super . onDestroyView ( ) \n }", "repo": "Tusky", "task_id": "Tusky/647"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( Build . VERSION . SDK_INT < = <NUM_LIT> | | player = = null ) {", "gt": "initializePlayer ( ) \n \n binding . videoView . onResume ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/650"}
{"input": "<s> private fun releasePlayer ( ) { player ? . let { savedSeekPosition = it . currentPosition", "gt": "it . release ( ) \n player = null \n binding . videoView . player = null \n } \n }", "repo": "Tusky", "task_id": "Tusky/651"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putLong ( SEEK_POSITION , savedSeekPosition ) \n }", "repo": "Tusky", "task_id": "Tusky/654"}
{"input": "<s> private fun hideToolbarAfterDelay ( delayMilliseconds : Int ) {", "gt": "pendingHideToolbar = true \n handler . postDelayed ( hideToolbar , delayMilliseconds . toLong ( ) ) \n }", "repo": "Tusky", "task_id": "Tusky/655"}
{"input": "<s> @ Throws ( JsonParseException : : class ) override fun deserialize ( json : JsonElement , typeOfT : Type , context : JsonDeserializationContext ) : Boolean ? { return if ( json . isJsonObject ) {", "gt": "null \n }", "repo": "Tusky", "task_id": "Tusky/656"}
{"input": "<s> private fun padInt ( buffer : StringBuilder , value : Int , length : Int ) { val strValue = value . toString ( )", "gt": "for ( i in length - strValue . length downTo 1 ) { \n buffer . append ( <CHAR_LIT:0> ) \n }", "repo": "Tusky", "task_id": "Tusky/657"}
{"input": "<s> private fun indexOfNonDigit ( string : String , offset : Int ) : Int { for ( i in offset until string . length ) {", "gt": "val c = string [ i ] \n if ( c < <CHAR_LIT:0> | | c > <CHAR_LIT:9> ) return i \n } \n return string . length \n }", "repo": "Tusky", "task_id": "Tusky/658"}
{"input": "<s> @ Throws ( IOException : : class ) override fun write ( writer : JsonWriter , date : Date ? ) { if ( date = = null ) {", "gt": "writer . nullValue ( ) \n } else { \n writer . value ( date . formatIsoDate ( ) ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/659"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) val binding = ActivityLicenseBinding . inflate ( layoutInflater ) setContentView ( binding . root ) setSupportActionBar ( binding . includedToolbar . toolbar ) supportActionBar ? . run { setDisplayHomeAsUpEnabled ( true ) setDisplayShowHomeEnabled ( true ) }", "gt": "setTitle ( R . string . title_licenses ) \n \n loadFileIntoTextView ( R . raw . apache , binding . licenseApacheTextView ) \n }", "repo": "Tusky", "task_id": "Tusky/661"}
{"input": "<s> private fun loadFileIntoTextView ( @ RawRes fileId : Int , textView : TextView ) { val sb = StringBuilder ( ) val br = BufferedReader ( InputStreamReader ( resources . openRawResource ( fileId ) ) ) try { var line : String ? = br . readLine ( ) while ( line ! = null ) { sb . append ( line ) sb . append ( <STR_LIT:\\n> ) line = br . readLine ( ) } } catch ( e : IOException ) { Log . w ( \" <STR_LIT> \" , e ) }", "gt": "br . closeQuietly ( ) \n \n textView . text = sb . toString ( ) \n }", "repo": "Tusky", "task_id": "Tusky/662"}
{"input": "<s> private fun showMessage ( @ StringRes messageId : Int ) { Snackbar . make (", "gt": "binding . listsRecycler , \n messageId , \n Snackbar . LENGTH_SHORT \n ) . show ( ) \n }", "repo": "Tusky", "task_id": "Tusky/664"}
{"input": "<s> private fun onListSelected ( list : MastoList ) { startActivityWithSlideInAnimation (", "gt": "StatusListActivity . newListIntent ( this , list . id , list . title ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/665"}
{"input": "<s> override fun onPrepareMenu ( menu : Menu ) { super . onPrepareMenu ( menu ) if ( ! binding . mainToolbar . isVisible ) { menu . forEach { it . setShowAsAction (", "gt": "SHOW_AS_ACTION_NEVER \n ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/670"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) val currentEmojiPack = preferences . getString ( EMOJI_PREFERENCE , \" \" ) if ( currentEmojiPack ! = selectedEmojiPack ) { Log . d ( TAG , \" <STR_LIT> \" . format ( selectedEmojiPack , currentEmojiPack )", "gt": ") \n selectedEmojiPack = currentEmojiPack \n recreate ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/672"}
{"input": "<s> private fun refreshComposeButtonState ( adapter : MainPagerAdapter , tabPosition : Int ) { adapter . getFragment ( tabPosition ) ? . also { fragment - > if ( fragment is FabFragment ) { if ( fragment . isFabVisible ( ) ) { binding . composeButton . show ( ) } else { binding . composeButton . hide ( ) }", "gt": "} else { \n binding . composeButton . show ( ) \n } \n } \n }", "repo": "Tusky", "task_id": "Tusky/675"}
{"input": "<s> @ JvmStatic fun accountSwitchIntent ( context : Context , tuskyAccountId : Long ) : Intent { return Intent ( context , MainActivity : : class . java ) . apply {", "gt": "putExtra ( TUSKY_ACCOUNT_ID , tuskyAccountId ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/679"}
{"input": "<s> @ JvmStatic fun openNotificationIntent ( context : Context , tuskyAccountId : Long , type : Notification . Type ) : Intent { return accountSwitchIntent ( context , tuskyAccountId ) . apply {", "gt": "putExtra ( NOTIFICATION_TYPE , type . name ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/680"}
{"input": "<s> @ JvmStatic fun redirectIntent ( context : Context , tuskyAccountId : Long , url : String ) : Intent { return accountSwitchIntent ( context , tuskyAccountId ) . apply { putExtra ( REDIRECT_URL , url )", "gt": "flags = Intent . FLAG_ACTIVITY_NEW_TASK or Intent . FLAG_ACTIVITY_CLEAR_TASK \n } \n }", "repo": "Tusky", "task_id": "Tusky/682"}
{"input": "<s> fun draftIntent ( context : Context , tuskyAccountId : Long ) : Intent { return accountSwitchIntent ( context , tuskyAccountId ) . apply {", "gt": "putExtra ( OPEN_DRAFTS , true ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/683"}
{"input": "<s> private fun filterToRegexToken ( filter : FilterV1 ) : String ? { val phrase = filter . phrase val quotedPhrase = Pattern . quote ( phrase ) return if ( filter . wholeWord & & ALPHANUMERIC . matcher ( phrase ) . matches ( ) ) {", "gt": "String . format ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> \" , quotedPhrase ) \n } else { \n quotedPhrase \n } \n }", "repo": "Tusky", "task_id": "Tusky/687"}
{"input": "<s> override fun onTransitionEnd ( position : Int ) {", "gt": "this . didTransition = true \n fragments [ position ] ? . get ( ) ? . onTransitionEnd ( ) \n }", "repo": "Tusky", "task_id": "Tusky/690"}
{"input": "<s> private fun getReplyMessage ( intent : Intent ) : CharSequence { val remoteInput = RemoteInput . getResultsFromIntent ( intent )", "gt": "return remoteInput ? . getCharSequence ( NotificationHelper . KEY_REPLY , \" \" ) ? : \" \" \n }", "repo": "Tusky", "task_id": "Tusky/693"}
{"input": "<s> override fun onReceive ( context : Context , intent : Intent ) {", "gt": "super . onReceive ( context , intent ) \n AndroidInjection . inject ( this , context ) \n }", "repo": "Tusky", "task_id": "Tusky/694"}
{"input": "<s> override fun onCreate ( ) {", "gt": "AndroidInjection . inject ( this ) \n super . onCreate ( ) \n }", "repo": "Tusky", "task_id": "Tusky/697"}
{"input": "<s> private suspend fun retrySending ( statusId : Int ) { val statusToSend = statusesToSend [ statusId ] ? : return val backoff = TimeUnit . SECONDS . toMillis ( statusToSend . retries . toLong ( )", "gt": ") . coerceAtMost ( MAX_RETRY_INTERVAL ) \n \n delay ( backoff ) \n sendStatus ( statusId ) \n }", "repo": "Tusky", "task_id": "Tusky/699"}
{"input": "<s> private fun cancelSendingIntent ( statusId : Int ) : PendingIntent { val intent = Intent ( this , SendStatusService : : class . java ) intent . putExtra ( KEY_CANCEL , statusId ) return PendingIntent . getService ( this ,", "gt": "statusId , \n intent , \n NotificationHelper . pendingIntentFlags ( false ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/701"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n supervisorJob . cancel ( ) \n }", "repo": "Tusky", "task_id": "Tusky/702"}
{"input": "<s> override fun onClick ( ) { val intent = MainActivity . composeIntent ( this , ComposeActivity . ComposeOptions ( ) )", "gt": "intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) \n startActivityAndCollapse ( intent ) \n }", "repo": "Tusky", "task_id": "Tusky/704"}
{"input": "<s> fun create ( hostname : String , port : Int ) : ProxyConfiguration ? { if ( isValidHostname ( IDN . toASCII ( hostname ) ) & & isValidProxyPort ( port ) ) { return ProxyConfiguration ( hostname , port )", "gt": "} \n return null \n }", "repo": "Tusky", "task_id": "Tusky/705"}
{"input": "<s> fun defaultTabs ( ) : List < TabData > { return listOf ( createTabDataFromId ( HOME ) ,", "gt": "createTabDataFromId ( NOTIFICATIONS ) , \n createTabDataFromId ( LOCAL ) , \n createTabDataFromId ( DIRECT ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/722"}
{"input": "<s> override fun onTabRemoved ( position : Int ) { currentTabs . removeAt ( position ) currentTabsAdapter . notifyItemRemoved ( position )", "gt": "updateAvailableTabs ( ) \n saveTabs ( ) \n }", "repo": "Tusky", "task_id": "Tusky/724"}
{"input": "<s> override fun onChipClicked ( tab : TabData , tabPosition : Int , chipPosition : Int ) { val newArguments = tab . arguments . filterIndexed { i , _ - > i ! = chipPosition } val newTab = tab . copy ( arguments = newArguments )", "gt": "currentTabs [ tabPosition ] = newTab \n saveTabs ( ) \n \n currentTabsAdapter . notifyItemChanged ( tabPosition ) \n }", "repo": "Tusky", "task_id": "Tusky/725"}
{"input": "<s> private fun showSelectListDialog ( ) { listSelectDialog = ListSelectionFragment . newInstance ( null ) listSelectDialog ? . show ( supportFragmentManager , null )", "gt": "return \n }", "repo": "Tusky", "task_id": "Tusky/726"}
{"input": "<s> private fun saveTabs ( ) { accountManager . activeAccount ? . let { lifecycleScope . launch ( Dispatchers . IO ) { it . tabPreferences = currentTabs", "gt": "accountManager . saveAccount ( it ) \n } \n } \n tabsChanged = true \n }", "repo": "Tusky", "task_id": "Tusky/729"}
{"input": "<s> private fun isSameYear ( dateOne : Date , dateTwo : Date , timeZone1 : TimeZone ) : Boolean { val calendarOne = Calendar . getInstance ( timeZone1 ) . apply { time = dateOne } val calendarTwo = Calendar . getInstance ( timeZone1 ) . apply { time = dateTwo }", "gt": "return calendarOne . get ( Calendar . YEAR ) = = calendarTwo . get ( Calendar . YEAR ) \n }", "repo": "Tusky", "task_id": "Tusky/746"}
{"input": "<s> private fun formatDuration ( durationInSeconds : Double ) : String { val seconds = durationInSeconds . roundToInt ( ) % <NUM_LIT> val minutes = durationInSeconds . toInt ( ) % <NUM_LIT> / <NUM_LIT>", "gt": "val hours = durationInSeconds . toInt ( ) / <NUM_LIT> \n return \" <STR_LIT> \" . format ( hours , minutes , seconds ) \n }", "repo": "Tusky", "task_id": "Tusky/750"}
{"input": "<s> private fun decode83 ( str : String , from : Int = 0 , to : Int = str . length ) : Int { var result = 0 for ( i in from until to ) { val index = charMap [ str [ i ] ] ? : - 1 if ( index ! = - 1 ) {", "gt": "result = result * <NUM_LIT> + index \n } \n } \n return result \n }", "repo": "Tusky", "task_id": "Tusky/752"}
{"input": "<s> private fun decodeDc ( colorEnc : Int ) : FloatArray { val r = colorEnc shr <NUM_LIT:16> val g = ( colorEnc shr <NUM_LIT:8> ) and <NUM_LIT:255>", "gt": "val b = colorEnc and <NUM_LIT:255> \n return floatArrayOf ( srgbToLinear ( r ) , srgbToLinear ( g ) , srgbToLinear ( b ) ) \n }", "repo": "Tusky", "task_id": "Tusky/753"}
{"input": "<s> private fun srgbToLinear ( colorEnc : Int ) : Float { val v = colorEnc / <NUM_LIT:255> f return if ( v < = <NUM_LIT> ) {", "gt": "( v / <NUM_LIT> ) \n } else { \n ( ( v + <NUM_LIT> ) / <NUM_LIT> ) . pow ( <NUM_LIT> ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/754"}
{"input": "<s> private fun secureRandomBytes ( len : Int ) : ByteArray { val ret = ByteArray ( len )", "gt": "SecureRandom . getInstance ( \" <STR_LIT> \" ) . nextBytes ( ret ) \n return ret \n }", "repo": "Tusky", "task_id": "Tusky/759"}
{"input": "<s> < Int > ) : LoadResult < Int , T > = LoadResult . Page ( emptyList ( ) ,", "gt": "null , \n null \n )", "repo": "Tusky", "task_id": "Tusky/762"}
{"input": "<s> fun isVerticalCrop ( viewWidth : Float , viewHeight : Float , imageWidth : Float , imageHeight : Float ) : Boolean { val viewRatio = viewWidth / viewHeight val imageRatio = imageWidth / imageHeight", "gt": "return viewRatio > imageRatio \n }", "repo": "Tusky", "task_id": "Tusky/765"}
{"input": "<s> private fun findEndOfQuotedString ( line : String , start : Int ) : Int { var i = start while ( i < line . length ) { val c = line [ i ] if ( c = = <STR_LIT:\\\\> ) { i + = 1 } else if ( c = = <CHAR_LIT:\"> ) { return i", "gt": "} \n i + + \n } \n return - 1 \n }", "repo": "Tusky", "task_id": "Tusky/766"}
{"input": "<s> fun makeIcon ( context : Context , icon : GoogleMaterial . Icon , @ Px iconSize : Int ) : IconicsDrawable { return IconicsDrawable ( context , icon ) . apply { sizePx = iconSize", "gt": "colorInt = MaterialColors . getColor ( context , R . attr . iconColor , Color . BLACK ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/768"}
{"input": "<s> fun getDomain ( urlString : String ? ) : String { val host = urlString ? . toUri ( ) ? . host return when {", "gt": "host = = null - > \" \" \n host . startsWith ( \" <STR_LIT:.> \" ) - > host . substring ( <NUM_LIT:4> ) \n else - > host \n } \n }", "repo": "Tusky", "task_id": "Tusky/770"}
{"input": "<s> private fun getCustomSpanForTag ( text : CharSequence , tags : List < HashTag > ? , span : URLSpan , listener : LinkListener ) : ClickableSpan ? { return getTagName ( text , tags ) ? . let { object : NoUnderlineURLSpan ( span . url ) {", "gt": "override fun onClick ( view : View ) = listener . onViewTag ( it ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/773"}
{"input": "<s> private fun getCustomSpanForMentionUrl ( url : String , mentionId : String , listener : LinkListener ) : ClickableSpan {", "gt": "return object : MentionSpan ( url ) { \n override fun onClick ( view : View ) = listener . onViewAccount ( mentionId ) \n }", "repo": "Tusky", "task_id": "Tusky/775"}
{"input": "<s> private fun forceFocus ( host : View ) { interrupt ( ) host . post {", "gt": "host . sendAccessibilityEvent ( AccessibilityEvent . TYPE_VIEW_ACCESSIBILITY_FOCUSED ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/780"}
{"input": "<s> < T > List < T > . withoutFirstWhich ( predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( ) </s", "gt": "< T > List < T > . withoutFirstWhich ( predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( )", "repo": "Tusky", "task_id": "Tusky/782"}
{"input": "<s> < T > List < T > . replacedFirstWhich ( replacement : T , predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( ) </s", "gt": "< T > List < T > . replacedFirstWhich ( replacement : T , predicate : ( T ) - > Boolean ) : List < T > { val newList = toMutableList ( )", "repo": "Tusky", "task_id": "Tusky/783"}
{"input": "<s> override fun putString ( key : String ? , value : String ? ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . TIRAMISU ) { prefs . edit ( )", "gt": ". putString ( PrefKeys . LANGUAGE , value ) \n . apply ( ) \n } \n applyLanguageToApp ( value ) \n }", "repo": "Tusky", "task_id": "Tusky/785"}
{"input": "<s> private fun LocaleListCompat . toList ( ) : List < Locale > { val list = mutableListOf < Locale > ( )", "gt": "for ( index in 0 until this . size ( ) ) { \n this [ index ] ? . let { list . add ( it ) } \n } \n return list \n }", "repo": "Tusky", "task_id": "Tusky/787"}
{"input": "<s> fun getMediaSize ( contentResolver : ContentResolver , uri : Uri ? ) : Long { if ( uri = = null ) { return MEDIA_SIZE_UNKNOWN } var mediaSize = MEDIA_SIZE_UNKNOWN val cursor : Cursor ? try { cursor = contentResolver . query ( uri , null , null , null , null ) } catch ( e : SecurityException ) { return MEDIA_SIZE_UNKNOWN } if ( cursor ! = null ) { val sizeIndex = cursor . getColumnIndex ( OpenableColumns . SIZE ) cursor . moveToFirst ( )", "gt": "mediaSize = cursor . getLong ( sizeIndex ) \n cursor . close ( ) \n } \n return mediaSize \n }", "repo": "Tusky", "task_id": "Tusky/790"}
{"input": "<s> @ Throws ( FileNotFoundException : : class ) fun getImageSquarePixels ( contentResolver : ContentResolver , uri : Uri ) : Long { val input = contentResolver . openInputStream ( uri ) val options = BitmapFactory . Options ( ) options . inJustDecodeBounds = true BitmapFactory . decodeStream ( input , null , options )", "gt": "input . closeQuietly ( ) \n \n return ( options . outWidth * options . outHeight ) . toLong ( ) \n }", "repo": "Tusky", "task_id": "Tusky/791"}
{"input": "<s> fun getTemporaryMediaFilename ( extension : String ) : String { return \" <STR_LIT> \" yyyyMMdd_HHmmss \" <STR_LIT> \" < / n > } </s", "gt": "fun getTemporaryMediaFilename ( extension : String ) : String { return \" <STR_LIT> \" yyyyMMdd_HHmmss \" <STR_LIT> \" \n }", "repo": "Tusky", "task_id": "Tusky/792"}
{"input": "<s> fun deserialize ( data : String ? ) : Set < Notification . Type > { val ret = HashSet < Notification . Type > ( ) data ? . let { val array = JSONArray ( data ) for ( i in 0 until array . length ( ) ) { val item = array . getString ( i ) val type = Notification . Type . byString ( item ) if ( type ! = Notification . Type . UNKNOWN ) { ret . add ( type )", "gt": "} \n } \n } \n return ret \n }", "repo": "Tusky", "task_id": "Tusky/794"}
{"input": "<s> override fun updateDrawState ( ds : TextPaint ) {", "gt": "super . updateDrawState ( ds ) \n ds . isUnderlineText = false \n }", "repo": "Tusky", "task_id": "Tusky/795"}
{"input": "<s> override fun add ( index : Int , element : T ) {", "gt": "synced . add ( index , mapper . apply ( element ) ) \n main . add ( index , element ) \n }", "repo": "Tusky", "task_id": "Tusky/799"}
{"input": "<s> private fun < T > clearSpans ( text : Spannable , spanClass : Class < T > ) { for ( span in text . getSpans ( 0 , text . length , spanClass ) ) {", "gt": "text . removeSpan ( span ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/804"}
{"input": "<s> protected fun < T > getLast ( text : Spanned , kind : Class < T > ) : Any ? {", "gt": "val spans = text . getSpans ( 0 , text . length , kind ) \n return spans ? . get ( spans . size - 1 ) \n }", "repo": "Tusky", "task_id": "Tusky/810"}
{"input": "<s> protected fun start ( text : SpannableStringBuilder , mark : Any ) {", "gt": "val len = text . length \n text . setSpan ( mark , len , len , Spannable . SPAN_MARK_MARK ) \n }", "repo": "Tusky", "task_id": "Tusky/811"}
{"input": "<s> fun getDimension ( context : Context , @ AttrRes attribute : Int ) : Int { return context . obtainStyledAttributes ( intArrayOf ( attribute ) ) . use { array - >", "gt": "array . getDimensionPixelSize ( 0 , - 1 ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/818"}
{"input": "<s> fun isBlack ( config : Configuration , theme : String ? ) : Boolean { return when ( theme ) { AppTheme . BLACK . value - > true AppTheme . AUTO_SYSTEM_BLACK . value - > when ( config . uiMode and Configuration . UI_MODE_NIGHT_MASK ) { Configuration . UI_MODE_NIGHT_NO - > false Configuration . UI_MODE_NIGHT_YES - > true", "gt": "else - > false \n } \n else - > false \n } \n }", "repo": "Tusky", "task_id": "Tusky/820"}
{"input": "<s> @ JvmName ( \" <STR_LIT> \" ) fun Notification . toViewData ( isShowingContent : Boolean , isExpanded : Boolean , isCollapsed : Boolean ) : NotificationViewData . Concrete { return NotificationViewData . Concrete ( this . type , this . id ,", "gt": "this . account , \n this . status ? . toViewData ( isShowingContent , isExpanded , isCollapsed ) , \n this . report \n ) \n }", "repo": "Tusky", "task_id": "Tusky/827"}
{"input": "<s> private fun initializeVertices ( ) { sizeRect = Rect ( 0 , 0 , width , height )", "gt": "initLine ( primaryLineData , primaryLinePath ) \n initLine ( secondaryLineData , secondaryLinePath ) \n }", "repo": "Tusky", "task_id": "Tusky/835"}
{"input": "<s> fun setFocalPoint ( focus : Attachment . Focus ? ) { this . focus = focus super . setScaleType ( ScaleType . MATRIX )", "gt": "if ( focalMatrix = = null ) { \n focalMatrix = Matrix ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/837"}
{"input": "<s> fun removeFocalPoint ( ) {", "gt": "super . setScaleType ( ScaleType . CENTER_CROP ) \n focus = null \n }", "repo": "Tusky", "task_id": "Tusky/838"}
{"input": "<s> override fun setScaleType ( type : ScaleType ) { if ( focus ! = null ) {", "gt": "super . setScaleType ( ScaleType . MATRIX ) \n } else { \n super . setScaleType ( type ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/840"}
{"input": "<s> override fun onSizeChanged ( width : Int , height : Int , oldWidth : Int , oldHeight : Int ) { recalculateMatrix ( width , height , drawable )", "gt": "super . onSizeChanged ( width , height , oldWidth , oldHeight ) \n }", "repo": "Tusky", "task_id": "Tusky/842"}
{"input": "<s> private fun recalculateMatrix ( width : Int , height : Int , drawable : Drawable ? ) { if ( drawable ! = null & & focus ! = null & & focalMatrix ! = null ) { scaleType = ScaleType . MATRIX FocalPointUtil . updateFocalPointMatrix ( width . toFloat ( ) , height . toFloat ( ) , drawable . intrinsicWidth . toFloat ( ) , drawable . intrinsicHeight . toFloat ( ) , focus as Attachment . Focus ,", "gt": "focalMatrix as Matrix \n ) \n imageMatrix = focalMatrix \n } \n }", "repo": "Tusky", "task_id": "Tusky/843"}
{"input": "<s> private fun attachImageViews ( ) { removeAllViews ( ) for ( i in 0 until aspectRatios . size . coerceAtMost ( imageViewCache . size ) ) {", "gt": "addView ( imageViewCache [ i ] ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/844"}
{"input": "<s> private fun View . measureExactly ( width : Int , height : Int ) { measure ( View . MeasureSpec . makeMeasureSpec ( width , View . MeasureSpec . EXACTLY ) ,", "gt": "View . MeasureSpec . makeMeasureSpec ( height , View . MeasureSpec . EXACTLY ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/847"}
{"input": "<s> override fun onValueChange ( slider : Slider , value : Float , fromUser : Boolean ) {", "gt": "if ( ! fromUser ) return \n binding . summary . text = formatter ( value ) \n }", "repo": "Tusky", "task_id": "Tusky/848"}
{"input": "<s> @ Override public boolean deepEquals ( NotificationViewData other ) { if ( ! ( other instanceof Placeholder ) ) return false ;", "gt": "Placeholder that = ( Placeholder ) other ; \n return isLoading = = that . isLoading & & id = = that . id ; \n }", "repo": "Tusky", "task_id": "Tusky/851"}
{"input": "<s> fun calculatePercent ( fraction : Int , totalVoters : Int ? , totalVotes : Int ) : Int { return if ( fraction = = 0 ) { 0", "gt": "} else { \n val total = totalVoters ? : totalVotes \n ( fraction / total . toDouble ( ) * <NUM_LIT:100> ) . roundToInt ( ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/852"}
{"input": "<s> fun buildDescription ( title : String , percent : Int , voted : Boolean , context : Context ) : Spanned { val builder = SpannableStringBuilder ( context . getString ( R . string . poll_percent_format , percent ) . parseAsHtml ( ) ) if ( voted ) { builder . append ( \" <STR_LIT> \" )", "gt": "} else { \n builder . append ( \" \" ) \n } \n return builder . append ( title ) \n }", "repo": "Tusky", "task_id": "Tusky/853"}
{"input": "<s> fun addToolbarVisibilityListener ( listener : ToolbarVisibilityListener ) : Function0 < Boolean > { this . toolbarVisibilityListeners . add ( listener )", "gt": "listener ( isToolbarVisible ) \n return { toolbarVisibilityListeners . remove ( listener ) } \n }", "repo": "Tusky", "task_id": "Tusky/856"}
{"input": "<s> private fun getPageTitle ( position : Int ) : CharSequence { if ( attachments = = null ) { return \" \"", "gt": "} \n return String . format ( Locale . getDefault ( ) , \" <STR_LIT> \" , position + 1 , attachments ? . size ) \n }", "repo": "Tusky", "task_id": "Tusky/859"}
{"input": "<s> private fun onOpenStatus ( ) { val attach = attachments ! ! [ binding . viewPager . currentItem ] startActivityWithSlideInAnimation (", "gt": "ViewThreadActivity . startIntent ( this , attach . statusId , attach . statusUrl ) \n ) \n }", "repo": "Tusky", "task_id": "Tusky/860"}
{"input": "<s> @ JvmStatic fun newIntent ( context : Context ? , attachments : List < AttachmentViewData > , index : Int ) : Intent { val intent = Intent ( context , ViewMediaActivity : : class . java ) intent . putParcelableArrayListExtra ( EXTRA_ATTACHMENTS , ArrayList ( attachments ) )", "gt": "intent . putExtra ( EXTRA_ATTACHMENT_INDEX , index ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/864"}
{"input": "<s> @ JvmStatic fun newSingleImageIntent ( context : Context , url : String ) : Intent { val intent = Intent ( context , ViewMediaActivity : : class . java )", "gt": "intent . putExtra ( EXTRA_SINGLE_IMAGE_URL , url ) \n return intent \n }", "repo": "Tusky", "task_id": "Tusky/865"}
{"input": "<s> fun createNewList ( listName : String , exclusive : Boolean , replyPolicy : String ) { viewModelScope . launch { api . createList ( listName , exclusive , replyPolicy ) . fold ( { list - > updateState { copy ( lists = lists + list ) } } , {", "gt": "sendEvent ( Event . CREATE_ERROR ) \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/870"}
{"input": "<s> fun updateList ( listId : String , listName : String , exclusive : Boolean , replyPolicy : String ) { viewModelScope . launch { api . updateList ( listId , listName , exclusive , replyPolicy ) . fold ( { list - > updateState { copy ( lists = lists . replacedFirstWhich ( list ) { it . id = = listId } ) } } , {", "gt": "sendEvent ( Event . UPDATE_ERROR ) \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/871"}
{"input": "<s> fun deleteList ( listId : String ) { viewModelScope . launch { api . deleteList ( listId ) . fold ( { updateState { copy ( lists = lists . withoutFirstWhich { it . id = = listId } ) } } , {", "gt": "sendEvent ( Event . DELETE_ERROR ) \n } \n ) \n } \n }", "repo": "Tusky", "task_id": "Tusky/872"}
{"input": "<s> fun doWork ( ) : Result {", "gt": "notificationsFetcher . fetchAndShow ( ) \n return Result . success ( ) \n }", "repo": "Tusky", "task_id": "Tusky/873"}
{"input": "<s> @ Override public void addListener ( PlaylistEventListener listener ) {", "gt": "checkNotNull ( listener ) ; \n listeners . add ( listener ) ; \n }", "repo": "Xtra", "task_id": "Xtra/17"}
{"input": "<s> @ Override @ Nullable public HlsMediaPlaylist getPlaylistSnapshot ( Uri url , boolean isForPlayback ) { @ Nullable HlsMediaPlaylist snapshot = playlistBundles . get ( url ) . getPlaylistSnapshot ( ) ;", "gt": "if ( snapshot ! = null & & isForPlayback ) { \n maybeSetPrimaryUrl ( url ) ; \n }", "repo": "Xtra", "task_id": "Xtra/18"}
{"input": "<s> @ Override public void maybeThrowPrimaryPlaylistRefreshError ( ) throws IOException { if ( initialPlaylistLoader ! = null ) { initialPlaylistLoader . maybeThrowError ( ) ;", "gt": "} \n if ( primaryMediaPlaylistUrl ! = null ) { \n maybeThrowPlaylistRefreshError ( primaryMediaPlaylistUrl ) ; \n } \n }", "repo": "Xtra", "task_id": "Xtra/19"}
{"input": "<s> @ Override public boolean excludeMediaPlaylist ( Uri playlistUrl , long exclusionDurationMs ) { @ Nullable MediaPlaylistBundle bundle = playlistBundles . get ( playlistUrl ) ;", "gt": "if ( bundle ! = null ) { \n return ! bundle . excludePlaylist ( exclusionDurationMs ) ; \n }", "repo": "Xtra", "task_id": "Xtra/20"}
{"input": "<s> private boolean isVariantUrl ( Uri playlistUrl ) { List < Variant > variants = multivariantPlaylist . variants ; for ( int i = 0 ; i < variants . size ( ) ; i + + ) { if ( playlistUrl . equals ( variants . get ( i ) . url ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "Xtra", "task_id": "Xtra/22"}
{"input": "<s> public void maybeThrowPlaylistRefreshError ( ) throws IOException { mediaPlaylistLoader . maybeThrowError ( ) ; if ( playlistError ! = null ) {", "gt": "throw playlistError ; \n } \n }", "repo": "Xtra", "task_id": "Xtra/27"}
{"input": "<s> private static int skipIgnorableWhitespace ( BufferedReader reader , boolean skipLinebreaks , int c ) throws IOException { while ( c ! = - 1 & & Character . isWhitespace ( c ) & & ( skipLinebreaks | | ! Util . isLinebreak ( c ) ) ) { c = reader . read ( ) ;", "gt": "} \n return c ; \n }", "repo": "Xtra", "task_id": "Xtra/31"}
{"input": "<s> @ Nullable private static Variant getVariantWithAudioGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . audioGroupId ) ) {", "gt": "return variant ; \n } \n } \n return null ; \n }", "repo": "Xtra", "task_id": "Xtra/32"}
{"input": "<s> @ Nullable private static Variant getVariantWithVideoGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . videoGroupId ) ) {", "gt": "return variant ; \n } \n } \n return null ; \n }", "repo": "Xtra", "task_id": "Xtra/33"}
{"input": "<s> @ Nullable private static Variant getVariantWithSubtitleGroup ( ArrayList < Variant > variants , String groupId ) { for ( int i = 0 ; i < variants . size ( ) ; i + + ) { Variant variant = variants . get ( i ) ; if ( groupId . equals ( variant . subtitleGroupId ) ) {", "gt": "return variant ; \n } \n } \n return null ; \n }", "repo": "Xtra", "task_id": "Xtra/34"}
{"input": "<s> private static int parseOptionalIntAttr ( String line , Pattern pattern , int defaultValue ) { Matcher matcher = pattern . matcher ( line ) ;", "gt": "if ( matcher . find ( ) ) { \n return Integer . parseInt ( checkNotNull ( matcher . group ( 1 ) ) ) ; \n }", "repo": "Xtra", "task_id": "Xtra/38"}
{"input": "<s> private static long parseOptionalLongAttr ( String line , Pattern pattern , long defaultValue ) { Matcher matcher = pattern . matcher ( line ) ;", "gt": "if ( matcher . find ( ) ) { \n return Long . parseLong ( checkNotNull ( matcher . group ( 1 ) ) ) ; \n }", "repo": "Xtra", "task_id": "Xtra/39"}
{"input": "<s> private static boolean parseOptionalBooleanAttribute ( String line , Pattern pattern , boolean defaultValue ) { Matcher matcher = pattern . matcher ( line ) ;", "gt": "if ( matcher . find ( ) ) { \n return BOOLEAN_TRUE . equals ( matcher . group ( 1 ) ) ; \n }", "repo": "Xtra", "task_id": "Xtra/44"}
{"input": "<s> @ EnsuresNonNullIf ( expression = \" <STR_LIT> \" , result = true ) public boolean hasNext ( ) throws IOException { if ( next ! = null ) { return true ; } if ( ! extraLines . isEmpty ( ) ) { next = checkNotNull ( extraLines . poll ( ) ) ; return true ; } while ( ( next = reader . readLine ( ) ) ! = null ) { next = next . trim ( ) ; if ( ! next . isEmpty ( ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "Xtra", "task_id": "Xtra/45"}
{"input": "<s> public String next ( ) throws IOException { if ( hasNext ( ) ) { String result = next ; next = null ;", "gt": "return result ; \n } else { \n throw new NoSuchElementException ( ) ; \n } \n }", "repo": "Xtra", "task_id": "Xtra/46"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Clip > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/56"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Video > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/59"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , User > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/62"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Game > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/64"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Stream > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/66"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Video > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/68"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Clip > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/70"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Game > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/73"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Stream > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/75"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Video > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/77"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , User > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/80"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Game > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/83"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Stream > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/84"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Video > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/86"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Stream > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/88"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Tag > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > val anchorPage = state . closestPageToPosition ( anchorPosition )", "gt": "anchorPage ? . prevKey ? . plus ( 1 ) ? : anchorPage ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/90"}
{"input": "<s> fun updateVideoPosition ( id : Int , position : Long ) { val appContext = XtraApp . INSTANCE . applicationContext if ( appContext . prefs ( ) . getBoolean ( C . PLAYER_USE_VIDEOPOSITIONS , true ) ) {", "gt": "GlobalScope . launch { videosDao . updatePosition ( id , position ) } \n } \n }", "repo": "Xtra", "task_id": "Xtra/93"}
{"input": "<s> fun resumeDownloads ( context : Context ) { GlobalScope . launch { requestsDao . getAll ( ) . forEach { if ( DownloadService . activeRequests . add ( it . offlineVideoId ) ) {", "gt": "DownloadUtils . download ( context , it ) \n } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/94"}
{"input": "<s> fun saveVideoPosition ( position : VideoPosition ) { val appContext = XtraApp . INSTANCE . applicationContext if ( appContext . prefs ( ) . getBoolean ( C . PLAYER_USE_VIDEOPOSITIONS , true ) ) {", "gt": "GlobalScope . launch { \n videoPositions . insert ( position ) \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/97"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) { super . onConfigurationChanged ( newConfig ) if ( newConfig . orientation = = Configuration . ORIENTATION_LANDSCAPE ) {", "gt": "binding . appBar . setExpanded ( false , false ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/100"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/101"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/102"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/103"}
{"input": "<s> fun hideKeyboard ( ) {", "gt": "binding . chatView . hideKeyboard ( ) \n binding . chatView . clearFocus ( ) \n }", "repo": "Xtra", "task_id": "Xtra/111"}
{"input": "<s> override fun onNetworkRestored ( ) { if ( isResumed ) {", "gt": "viewModel . start ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/113"}
{"input": "<s> override fun onMovedToBackground ( ) { if ( ! requireArguments ( ) . getBoolean ( KEY_IS_LIVE ) | | ! requireContext ( ) . prefs ( ) . getBoolean ( C . PLAYER_KEEP_CHAT_OPEN , false ) | | requireContext ( ) . prefs ( ) . getBoolean ( C . CHAT_DISABLE , false ) ) {", "gt": "viewModel . stop ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/114"}
{"input": "<s> override fun onMovedToForeground ( ) { if ( ! requireArguments ( ) . getBoolean ( KEY_IS_LIVE ) | | ! requireContext ( ) . prefs ( ) . getBoolean ( C . PLAYER_KEEP_CHAT_OPEN , false ) | | requireContext ( ) . prefs ( ) . getBoolean ( C . CHAT_DISABLE , false ) ) {", "gt": "viewModel . start ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/115"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/116"}
{"input": "<s> override fun onRaidClicked ( ) {", "gt": "raidAutoSwitch = false \n raidClicked . postValue ( true ) \n }", "repo": "Xtra", "task_id": "Xtra/118"}
{"input": "<s> override fun onRaidClose ( ) {", "gt": "raidAutoSwitch = false \n raidClosed = true \n }", "repo": "Xtra", "task_id": "Xtra/119"}
{"input": "<s> override fun onCleared ( ) {", "gt": "chat ? . stop ( ) \n super . onCleared ( ) \n }", "repo": "Xtra", "task_id": "Xtra/120"}
{"input": "<s> override fun pause ( ) { chatReadIRC ? . disconnect ( ) ? : chatReadWebSocket ? . disconnect ( )", "gt": "chatWriteIRC ? . disconnect ( ) ? : chatWriteWebSocket ? . disconnect ( ) \n pubSub ? . disconnect ( ) \n }", "repo": "Xtra", "task_id": "Xtra/123"}
{"input": "<s> override fun onMessage ( message : ChatMessage ) {", "gt": "super . onMessage ( message ) \n addChatter ( message . userName ) \n }", "repo": "Xtra", "task_id": "Xtra/124"}
{"input": "<s> override fun onMessage ( message : ChatMessage ) {", "gt": "_chatMessages . value ? . add ( message ) \n _newMessage . postValue ( message ) \n }", "repo": "Xtra", "task_id": "Xtra/132"}
{"input": "<s> override fun showDownloadDialog ( ) { lastSelectedItem ? . let {", "gt": "ClipDownloadDialog . newInstance ( it ) . show ( childFragmentManager , null ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/133"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/137"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( ) if ( enableNetworkCheck ) {", "gt": "isInitialized = false \n } \n }", "repo": "Xtra", "task_id": "Xtra/139"}
{"input": "<s> private fun init ( ) { initialize ( )", "gt": "isInitialized = true \n created = true \n }", "repo": "Xtra", "task_id": "Xtra/141"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listenerSort = parentFragment as OnSortOptionChanged \n }", "repo": "Xtra", "task_id": "Xtra/150"}
{"input": "<s> fun newInstance ( clip : Clip , qualities : Map < String , String > ? = null ) : ClipDownloadDialog { return ClipDownloadDialog ( ) . apply {", "gt": "arguments = bundleOf ( KEY_CLIP to clip , KEY_QUALITIES to qualities ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/151"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/152"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onDestroy ( ) {", "gt": "unregisterReceiver ( notificationActionReceiver ) \n super . onDestroy ( ) \n }", "repo": "Xtra", "task_id": "Xtra/154"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/158"}
{"input": "<s> fun setVideoInfo ( videoInfo : VideoDownloadInfo ) { if ( _videoInfo . value ! = videoInfo ) {", "gt": "_videoInfo . value = videoInfo \n } \n }", "repo": "Xtra", "task_id": "Xtra/159"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = FollowedChannelsAdapter ( this ) \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/162"}
{"input": "<s> override fun setupSortBar ( sortBar : SortBarBinding ) { sortBar . root . visible ( ) sortBar . root . setOnClickListener { FollowedChannelsSortDialog . newInstance ( sort = viewModel . sort , order = viewModel . order , saveDefault = requireContext ( ) . prefs ( ) . getBoolean ( C . SORT_DEFAULT_FOLLOWED_CHANNELS , false ) ) . show ( childFragmentManager , null )", "gt": "} \n viewModel . sortText . observe ( viewLifecycleOwner ) { \n sortBar . sortText . text = it \n } \n }", "repo": "Xtra", "task_id": "Xtra/163"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/165"}
{"input": "<s> fun newInstance ( sort : FollowSortEnum , order : FollowOrderEnum , saveDefault : Boolean = false ) : FollowedChannelsSortDialog { return FollowedChannelsSortDialog ( ) . apply {", "gt": "arguments = bundleOf ( SORT to sort , ORDER to order , SAVE_DEFAULT to saveDefault ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/166"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as OnFilter \n }", "repo": "Xtra", "task_id": "Xtra/167"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/169"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n previousItem = savedInstanceState ? . getInt ( \" <STR_LIT> \" , - 1 ) ? : - 1 \n }", "repo": "Xtra", "task_id": "Xtra/170"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "Xtra", "task_id": "Xtra/173"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/174"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/175"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/176"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n firstLaunch = savedInstanceState = = null \n }", "repo": "Xtra", "task_id": "Xtra/178"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/180"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/181"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/182"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = FollowedGamesAdapter ( this ) \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/185"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/186"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n previousItem = savedInstanceState ? . getInt ( \" <STR_LIT> \" , - 1 ) ? : - 1 \n }", "repo": "Xtra", "task_id": "Xtra/187"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "Xtra", "task_id": "Xtra/191"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/192"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/193"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/194"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n firstLaunch = savedInstanceState = = null \n }", "repo": "Xtra", "task_id": "Xtra/196"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/199"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/200"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/201"}
{"input": "<s> override fun scrollToTop ( ) { with ( binding ) { appBar . setExpanded ( true , true )", "gt": "recyclerViewLayout . recyclerView . scrollToPosition ( 0 ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/205"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/206"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/207"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "binding . webView . loadUrl ( \" <STR_LIT> \" ) \n super . onDestroy ( ) \n }", "repo": "Xtra", "task_id": "Xtra/208"}
{"input": "<s> override fun onDismiss ( dialog : DialogInterface ) {", "gt": "binding . webView . loadUrl ( \" <STR_LIT> \" ) \n super . onDismiss ( dialog ) \n }", "repo": "Xtra", "task_id": "Xtra/209"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/210"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n restorePlayerFragment ( ) \n }", "repo": "Xtra", "task_id": "Xtra/212"}
{"input": "<s> override fun onDestroy ( ) { unregisterReceiver ( networkReceiver )", "gt": "if ( isFinishing ) { \n playerFragment ? . onClose ( ) \n }", "repo": "Xtra", "task_id": "Xtra/213"}
{"input": "<s> override fun onNewIntent ( intent : Intent ? ) {", "gt": "super . onNewIntent ( intent ) \n handleIntent ( intent ) \n }", "repo": "Xtra", "task_id": "Xtra/214"}
{"input": "<s> private fun restorePlayerFragment ( ) { if ( viewModel . isPlayerOpened ) { if ( playerFragment = = null ) { playerFragment = supportFragmentManager . findFragmentById ( R . id . playerContainer ) as BasePlayerFragment ? } else { if ( playerFragment ? . slidingLayout ? . secondView ? . isVisible = = false & & prefs . getString ( C . PLAYER_BACKGROUND_PLAYBACK , \" <STR_LIT:0> \" ) = = \" <STR_LIT:0> \" ) {", "gt": "playerFragment ? . maximize ( ) \n } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/216"}
{"input": "<s> fun onPlayerStarted ( ) {", "gt": "isPlayerOpened = true \n isPlayerMaximized = true \n }", "repo": "Xtra", "task_id": "Xtra/217"}
{"input": "<s> fun onPlayerClosed ( ) {", "gt": "isPlayerOpened = false \n isPlayerMaximized = false \n }", "repo": "Xtra", "task_id": "Xtra/218"}
{"input": "<s> fun setNetworkAvailable ( available : Boolean ) { if ( _isNetworkAvailable . value ? . peekContent ( ) ! = available ) {", "gt": "_isNetworkAvailable . value = Event ( available ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/219"}
{"input": "<s> override fun initialize ( ) { if ( player ! = null & & ! viewModel . started ) {", "gt": "startPlayer ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/225"}
{"input": "<s> override fun onClose ( ) { player ? . pause ( )", "gt": "player ? . stop ( ) \n releaseController ( ) \n }", "repo": "Xtra", "task_id": "Xtra/226"}
{"input": "<s> fun setResizeMode ( ) { resizeMode = ( resizeMode + 1 ) . let { if ( it < <NUM_LIT:5> ) it else 0 }", "gt": "playerView . resizeMode = resizeMode \n prefs . edit { putInt ( C . ASPECT_RATIO_LANDSCAPE , resizeMode ) } \n }", "repo": "Xtra", "task_id": "Xtra/227"}
{"input": "<s> fun stop ( ) { offsetJob . cancel ( )", "gt": "nextJob ? . cancel ( ) \n timer . cancel ( ) \n }", "repo": "Xtra", "task_id": "Xtra/235"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n clip = requireArguments ( ) . getParcelable ( KEY_CLIP ) ! ! \n }", "repo": "Xtra", "task_id": "Xtra/236"}
{"input": "<s> override fun onNetworkRestored ( ) { if ( isResumed ) {", "gt": "player ? . prepare ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/239"}
{"input": "<s> override fun onNetworkLost ( ) { if ( isResumed ) {", "gt": "player ? . stop ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/240"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/241"}
{"input": "<s> fun load ( gqlHeaders : Map < String , String > , id : String ? ) { if ( result . value = = null ) { viewModelScope . launch { try { graphQLRepository . loadClipUrls ( gqlHeaders , id ) } catch ( e : Exception ) { if ( e . message = = \" <STR_LIT> \" ) { _integrity . postValue ( true ) }", "gt": "null \n } . let { result . postValue ( it ) } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/242"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { enableNetworkCheck = false", "gt": "super . onCreate ( savedInstanceState ) \n video = requireArguments ( ) . getParcelable ( KEY_VIDEO ) ! ! \n }", "repo": "Xtra", "task_id": "Xtra/243"}
{"input": "<s> override fun onClose ( ) { if ( prefs . getBoolean ( C . PLAYER_USE_VIDEOPOSITIONS , true ) ) { player ? . currentPosition ? . let { position - >", "gt": "viewModel . savePosition ( video . id , position ) \n } \n } \n super . onClose ( ) \n }", "repo": "Xtra", "task_id": "Xtra/246"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/247"}
{"input": "<s> fun savePosition ( id : Int , position : Long ) { if ( loaded . value = = true ) {", "gt": "offlineRepository . updateVideoPosition ( id , position ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/248"}
{"input": "<s> private fun changeQuality ( index : Int ) { previousIndex = qualityIndex", "gt": "qualityIndex = index \n setVideoQuality ( ) \n }", "repo": "Xtra", "task_id": "Xtra/249"}
{"input": "<s> override fun onTaskRemoved ( rootIntent : Intent ? ) { savePosition ( ) mediaSession ? . player ? . pause ( )", "gt": "mediaSession ? . player ? . stop ( ) \n stopSelf ( ) \n }", "repo": "Xtra", "task_id": "Xtra/250"}
{"input": "<s> override fun onDestroy ( ) { mediaSession ? . run { player . release ( )", "gt": "release ( ) \n mediaSession = null \n } \n super . onDestroy ( ) \n }", "repo": "Xtra", "task_id": "Xtra/251"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as PlayerSeekListener \n }", "repo": "Xtra", "task_id": "Xtra/253"}
{"input": "<s> fun newInstance ( speedText : String ? , vodGames : Boolean ) : PlayerSettingsDialog { return PlayerSettingsDialog ( ) . apply {", "gt": "arguments = bundleOf ( SPEED to speedText , VOD_GAMES to vodGames ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/255"}
{"input": "<s> fun setQuality ( text : String ? ) { with ( binding ) { if ( ! text . isNullOrBlank ( ) & & menuQuality . isVisible ) { qualityValue . visible ( ) qualityValue . text = text menuQuality . setOnClickListener { ( parentFragment as ? BasePlayerFragment ) ? . showQualityDialog ( )", "gt": "dismiss ( ) \n } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/257"}
{"input": "<s> fun setSpeed ( text : String ? ) { with ( binding ) { if ( ! text . isNullOrBlank ( ) & & menuSpeed . isVisible ) {", "gt": "speedValue . visible ( ) \n speedValue . text = text \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/258"}
{"input": "<s> fun setVodGames ( ) { with ( binding ) { if ( requireContext ( ) . prefs ( ) . getBoolean ( C . PLAYER_MENU_GAMES , false ) ) { menuVodGames . visible ( ) menuVodGames . setOnClickListener { ( parentFragment as ? VideoPlayerFragment ) ? . showVodGames ( )", "gt": "dismiss ( ) \n } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/259"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/261"}
{"input": "<s> fun newInstance ( login : String , repository : ApiRepository ) : PlayerViewerListDialog { return PlayerViewerListDialog ( repository ) . apply {", "gt": "arguments = bundleOf ( LOGIN to login ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/262"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/264"}
{"input": "<s> override fun onBindViewHolder ( holder : ViewHolder , position : Int ) {", "gt": "val item = mData [ position ] \n holder . textView . text = item \n }", "repo": "Xtra", "task_id": "Xtra/266"}
{"input": "<s> fun setTimer ( duration : Long ) { timer ? . let { it . cancel ( ) timerEndTime = 0 L timer = null } if ( duration > 0 L ) { timer = Timer ( ) . apply { timerEndTime = System . currentTimeMillis ( ) + duration schedule ( duration ) {", "gt": "_sleepTimer . postValue ( true ) \n } \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/267"}
{"input": "<s> fun newInstance ( volume : Float ? ) : PlayerVolumeDialog { return PlayerVolumeDialog ( ) . apply {", "gt": "arguments = bundleOf ( VOLUME to volume ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/268"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as PlayerVolumeListener \n }", "repo": "Xtra", "task_id": "Xtra/269"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/271"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as OnSleepTimerStartedListener \n }", "repo": "Xtra", "task_id": "Xtra/272"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/273"}
{"input": "<s> fun show ( fragmentManager : FragmentManager , timeLeft : Long ) { SleepTimerDialog ( ) . apply { arguments = bundleOf ( KEY_TIME_LEFT to timeLeft )", "gt": "show ( fragmentManager , null ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/274"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n stream = requireArguments ( ) . getParcelable ( KEY_STREAM ) ! ! \n }", "repo": "Xtra", "task_id": "Xtra/275"}
{"input": "<s> fun restartPlayer ( ) { if ( viewModel . playerMode ! = PlayerMode . DISABLED ) {", "gt": "loadStream ( stream ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/280"}
{"input": "<s> override fun onMinimize ( ) {", "gt": "super . onMinimize ( ) \n chatFragment . hideKeyboard ( ) \n }", "repo": "Xtra", "task_id": "Xtra/281"}
{"input": "<s> override fun onNetworkRestored ( ) { if ( isResumed ) {", "gt": "restartPlayer ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/282"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/283"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n video = requireArguments ( ) . getParcelable ( KEY_VIDEO ) ! ! \n }", "repo": "Xtra", "task_id": "Xtra/284"}
{"input": "<s> override fun onNetworkRestored ( ) { if ( isResumed ) {", "gt": "player ? . prepare ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/287"}
{"input": "<s> override fun onNetworkLost ( ) { if ( isResumed ) {", "gt": "player ? . stop ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/288"}
{"input": "<s> override fun onClose ( ) { if ( prefs . getBoolean ( C . PLAYER_USE_VIDEOPOSITIONS , true ) ) { video . id ? . toLongOrNull ( ) ? . let { id - > player ? . currentPosition ? . let { position - > viewModel . savePosition ( id , position )", "gt": "} \n } \n } \n super . onClose ( ) \n }", "repo": "Xtra", "task_id": "Xtra/289"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/290"}
{"input": "<s> fun load ( gqlHeaders : Map < String , String > , videoId : String ? , playerType : String ? , supportedCodecs : String ? ) { viewModelScope . launch { try { playerRepository . loadVideoPlaylistUrl ( gqlHeaders , videoId , playerType , supportedCodecs ) } catch ( e : Exception ) { if ( e . message = = \" <STR_LIT> \" ) { _integrity . postValue ( true )", "gt": "} \n null \n } . let { result . postValue ( it ) } \n } \n }", "repo": "Xtra", "task_id": "Xtra/292"}
{"input": "<s> fun savePosition ( id : Long , position : Long ) { if ( loaded . value = = true ) {", "gt": "playerRepository . saveVideoPosition ( VideoPosition ( id , position ) ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/293"}
{"input": "<s> fun checkBookmark ( id : String ) { viewModelScope . launch {", "gt": "bookmarkItem . postValue ( bookmarksRepository . getBookmarkByVideoId ( id ) ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/295"}
{"input": "<s> fun setVideoPositions ( positions : Map < Long , Long > ) { this . positions = positions if ( itemCount ! = 0 ) {", "gt": "notifyDataSetChanged ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/297"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/300"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/304"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n previousItem = savedInstanceState ? . getInt ( \" <STR_LIT> \" , - 1 ) ? : - 1 \n }", "repo": "Xtra", "task_id": "Xtra/305"}
{"input": "<s> private fun onSpinnerItemSelected ( position : Int ) : Fragment { return when ( position ) { 0 - > BookmarksFragment ( )", "gt": "else - > DownloadsFragment ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/307"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "Xtra", "task_id": "Xtra/308"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/309"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/310"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/311"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n firstLaunch = savedInstanceState = = null \n }", "repo": "Xtra", "task_id": "Xtra/313"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/315"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/316"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/317"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = ChannelSearchAdapter ( this ) \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/320"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/321"}
{"input": "<s> fun setQuery ( query : String ) { if ( this . query . value ! = query ) {", "gt": "this . query . value = query \n } \n }", "repo": "Xtra", "task_id": "Xtra/322"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "pagingAdapter = GamesAdapter ( this ) \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/324"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/325"}
{"input": "<s> fun setQuery ( query : String ) { if ( this . query . value ! = query ) {", "gt": "this . query . value = query \n } \n }", "repo": "Xtra", "task_id": "Xtra/326"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n firstLaunch = savedInstanceState = = null \n }", "repo": "Xtra", "task_id": "Xtra/328"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/331"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) pagingAdapter = if ( requireContext ( ) . prefs ( ) . getString ( C . COMPACT_STREAMS , \" <STR_LIT> \" ) = = \" <STR_LIT> \" ) { StreamsCompactAdapter ( this )", "gt": "} else { \n StreamsAdapter ( this ) \n } \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/333"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/334"}
{"input": "<s> fun setQuery ( query : String ) { if ( this . query . value ! = query ) {", "gt": "this . query . value = query \n } \n }", "repo": "Xtra", "task_id": "Xtra/335"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/338"}
{"input": "<s> fun setQuery ( query : String ) { if ( this . query . value ! = query ) {", "gt": "this . query . value = query \n } \n }", "repo": "Xtra", "task_id": "Xtra/339"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/342"}
{"input": "<s> fun setQuery ( query : String ) { if ( this . query . value ! = query ) {", "gt": "this . query . value = query \n } \n }", "repo": "Xtra", "task_id": "Xtra/343"}
{"input": "<s> override fun onBindDialogView ( view : View ) {", "gt": "super . onBindDialogView ( view ) \n mEditText = view . findViewById ( android . R . id . edit ) \n }", "repo": "Xtra", "task_id": "Xtra/344"}
{"input": "<s> override fun onDismiss ( dialog : DialogInterface ) {", "gt": "super . onDismiss ( dialog ) \n onDialogClosed ( mWhichButtonClicked = = DialogInterface . BUTTON_POSITIVE ) \n }", "repo": "Xtra", "task_id": "Xtra/347"}
{"input": "<s> override fun onDismiss ( dialog : DialogInterface ) {", "gt": "super . onDismiss ( dialog ) \n onDialogClosed ( mWhichButtonClicked = = DialogInterface . BUTTON_POSITIVE ) \n }", "repo": "Xtra", "task_id": "Xtra/348"}
{"input": "<s> override fun onDisplayPreferenceDialog ( preference : Preference ) { if ( requireContext ( ) . prefs ( ) . getBoolean ( C . UI_THEME_MATERIAL3 , true ) ) { when ( preference ) { is ListPreference - > showPreferenceDialog ( preference , MaterialListPreference ( ) ) is EditTextPreference - > showPreferenceDialog ( preference , MaterialEditTextPreference ( ) ) else - > super . onDisplayPreferenceDialog ( preference )", "gt": "} \n } else { \n super . onDisplayPreferenceDialog ( preference ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/349"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putBoolean ( KEY_CHANGED , changed ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "Xtra", "task_id": "Xtra/352"}
{"input": "<s> private fun setResult ( ) { if ( ! changed ) { changed = true", "gt": "requireActivity ( ) . setResult ( Activity . RESULT_OK ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/353"}
{"input": "<s> fun deletePositions ( ) { GlobalScope . launch { videoPositions . deleteAll ( )", "gt": "videos . deletePositions ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/360"}
{"input": "<s> override fun onChange ( sort : StreamSortEnum ) { if ( ( parentFragment as ? FragmentHost ) ? . currentFragment = = this ) { viewLifecycleOwner . lifecycleScope . launch { pagingAdapter . submitData ( PagingData . empty ( ) ) viewModel . filter (", "gt": "sort = sort \n ) \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/363"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/364"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as OnFilter \n }", "repo": "Xtra", "task_id": "Xtra/366"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/368"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) pagingAdapter = if ( requireContext ( ) . prefs ( ) . getString ( C . COMPACT_STREAMS , \" <STR_LIT> \" ) ! = \" <STR_LIT> \" ) { StreamsCompactAdapter ( this )", "gt": "} else { \n StreamsAdapter ( this ) \n } \n setAdapter ( binding . recyclerView , pagingAdapter ) \n }", "repo": "Xtra", "task_id": "Xtra/370"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/371"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n previousItem = savedInstanceState ? . getInt ( \" <STR_LIT> \" , - 1 ) ? : - 1 \n }", "repo": "Xtra", "task_id": "Xtra/374"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putInt ( \" <STR_LIT> \" , previousItem ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "Xtra", "task_id": "Xtra/376"}
{"input": "<s> @ Deprecated ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( requestCode = = <NUM_LIT:3> & & resultCode = = Activity . RESULT_OK ) {", "gt": "requireActivity ( ) . recreate ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/377"}
{"input": "<s> override fun scrollToTop ( ) {", "gt": "binding . appBar . setExpanded ( true , true ) \n ( currentFragment as ? Scrollable ) ? . scrollToTop ( ) \n }", "repo": "Xtra", "task_id": "Xtra/378"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/379"}
{"input": "<s> fun setVideoPositions ( positions : Map < Long , Long > ) { this . positions = positions if ( itemCount ! = 0 ) {", "gt": "notifyDataSetChanged ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/381"}
{"input": "<s> override fun showDownloadDialog ( ) { lastSelectedItem ? . let {", "gt": "VideoDownloadDialog . newInstance ( it ) . show ( childFragmentManager , null ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/383"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/388"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/392"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/395"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as OnFilter \n }", "repo": "Xtra", "task_id": "Xtra/398"}
{"input": "<s> override fun onChange ( requestCode : Int , index : Int , text : CharSequence , tag : Int ? ) { when ( requestCode ) {", "gt": "REQUEST_CODE_LANGUAGE - > { \n langIndex = index \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/400"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/401"}
{"input": "<s> fun hideRaid ( ) { with ( binding ) { raidLayout . gone ( )", "gt": "raidImage . gone ( ) \n raidText . gone ( ) \n raidClose . gone ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/403"}
{"input": "<s> fun toggleEmoteMenu ( enable : Boolean ) { if ( enable ) { binding . emoteMenu . visible ( )", "gt": "} else { \n binding . emoteMenu . gone ( ) \n } \n toggleBackPressedCallback ( enable ) \n }", "repo": "Xtra", "task_id": "Xtra/412"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) fun reply ( userName : CharSequence ) { val text = \" <STR_LIT> \" binding . editText . apply {", "gt": "setText ( text ) \n setSelection ( text . length ) \n showKeyboard ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/414"}
{"input": "<s> override fun onDetachedFromWindow ( ) {", "gt": "binding . recyclerView . adapter = null \n super . onDetachedFromWindow ( ) \n }", "repo": "Xtra", "task_id": "Xtra/415"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = ( requireParentFragment ( ) as ChatFragment ) : : appendEmote \n }", "repo": "Xtra", "task_id": "Xtra/420"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n layoutManager . updateWidth ( ) \n }", "repo": "Xtra", "task_id": "Xtra/421"}
{"input": "<s> override fun onAttach ( context : Context ) {", "gt": "super . onAttach ( context ) \n listener = parentFragment as OnButtonClickListener \n }", "repo": "Xtra", "task_id": "Xtra/422"}
{"input": "<s> private fun extractUserName ( text : CharSequence ) : String { val userName = StringBuilder ( ) for ( c in text ) { if ( ! c . isWhitespace ( ) ) { if ( c ! = <CHAR_LIT::> ) { userName . append ( c ) } else { break", "gt": "} \n } \n } \n return userName . toString ( ) \n }", "repo": "Xtra", "task_id": "Xtra/424"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n _binding = null \n }", "repo": "Xtra", "task_id": "Xtra/425"}
{"input": "<s> fun setColumnWidth ( width : Int ) { if ( width < = 0 ) { throw IllegalArgumentException ( \" <STR_LIT> \" ) }", "gt": "if ( columnWidth ! = width ) { \n columnWidth = width \n widthChanged = true \n } \n }", "repo": "Xtra", "task_id": "Xtra/428"}
{"input": "<s> override fun onFinishInflate ( ) { super . onFinishInflate ( ) dragView = getChildAt ( 0 )", "gt": "secondView = getChildAt ( 1 ) \n init ( ) \n }", "repo": "Xtra", "task_id": "Xtra/431"}
{"input": "<s> override fun computeScroll ( ) { if ( viewDragHelper . continueSettling ( true ) ) {", "gt": "postInvalidateOnAnimation ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/434"}
{"input": "<s> override fun onRestoreInstanceState ( state : Parcelable ? ) { super . onRestoreInstanceState ( state . let { if ( it is Bundle ) { isMaximized = it . getBoolean ( \" <STR_LIT> \" ) maximizedSecondViewVisibility = it . getInt ( \" <STR_LIT> \" ) it . getParcelable ( \" <STR_LIT> \" )", "gt": "} else { \n it \n } \n } ) \n }", "repo": "Xtra", "task_id": "Xtra/436"}
{"input": "<s> fun maximize ( ) { isMaximized = true secondView ? . apply { requestLayout ( ) visibility = if ( isPortrait ) { View . VISIBLE } else { shouldUpdateDragLayout = true maximizedSecondViewVisibility ! !", "gt": "} \n } \n animate ( <NUM_LIT> , <NUM_LIT> ) \n listeners . forEach { it . onMaximize ( ) } \n }", "repo": "Xtra", "task_id": "Xtra/437"}
{"input": "<s> private fun animate ( scaleX : Float , scaleY : Float ) { val sclX = PropertyValuesHolder . ofFloat ( \" <STR_LIT:X> \" , scaleX ) val sclY = PropertyValuesHolder . ofFloat ( \" <STR_LIT:Y> \" , scaleY ) ObjectAnimator . ofPropertyValuesHolder ( this , sclX , sclY ) . apply {", "gt": "duration = ANIMATION_DURATION \n addListener ( animatorListener ) \n start ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/439"}
{"input": "<s> private fun smoothSlideTo ( left : Int , top : Int ) { if ( viewDragHelper . smoothSlideViewTo ( dragView , left , top ) ) {", "gt": "postInvalidateOnAnimation ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/440"}
{"input": "<s> private fun closeTo ( left : Int ) {", "gt": "smoothSlideTo ( left , dragViewTop ) \n listeners . forEach { it . onClose ( ) } \n }", "repo": "Xtra", "task_id": "Xtra/441"}
{"input": "<s> override fun onSelectionChanged ( start : Int , end : Int ) { val length = text ! ! . length if ( start ! = length | | end ! = length ) {", "gt": "setSelection ( length , length ) \n return \n } \n super . onSelectionChanged ( start , end ) \n }", "repo": "Xtra", "task_id": "Xtra/443"}
{"input": "<s> override fun onDisabled ( context : Context , intent : Intent ) { super . onDisabled ( context , intent ) LocalBroadcastManager . getInstance ( context ) . sendBroadcast (", "gt": "Intent ( ACTION_DISABLED ) \n ) \n }", "repo": "Xtra", "task_id": "Xtra/444"}
{"input": "<s> override fun onEnabled ( context : Context , intent : Intent ) { super . onEnabled ( context , intent ) LocalBroadcastManager . getInstance ( context ) . sendBroadcast (", "gt": "Intent ( ACTION_ENABLED ) \n ) \n }", "repo": "Xtra", "task_id": "Xtra/445"}
{"input": "<s> override fun onCommand ( message : String , duration : String ? , type : String ? , fullMsg : String ? ) { callback . onCommand ( Command ( message = message ,", "gt": "duration = duration , \n type = type , \n fullMsg = fullMsg \n ) ) \n }", "repo": "Xtra", "task_id": "Xtra/446"}
{"input": "<s> override fun onNotice ( message : String ) { val parts = message . substring ( 1 ) . split ( \" \" . toRegex ( ) , <NUM_LIT:2> ) val prefixes = splitAndMakeMap ( parts [ 0 ] , \" <STR_LIT:;> \" , \" <STR_LIT:=> \" ) val messageInfo = parts [ 1 ] val msgId = prefixes [ \" <STR_LIT> \" ] callback . onCommand ( Command ( message = messageInfo . substring ( messageInfo . indexOf ( \" <STR_LIT::> \" , messageInfo . indexOf ( \" <STR_LIT::> \" ) + 1 ) + 1 ) ,", "gt": "duration = msgId , \n type = \" <STR_LIT> \" , \n fullMsg = message \n ) ) \n }", "repo": "Xtra", "task_id": "Xtra/447"}
{"input": "<s> fun disconnect ( ) { if ( isActive ) { val thread = Thread { isActive = false close ( )", "gt": "} \n thread . start ( ) \n thread . join ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/451"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false \n socket ? . close ( <NUM_LIT:1000> , null ) \n }", "repo": "Xtra", "task_id": "Xtra/453"}
{"input": "<s> private fun reconnect ( ) { if ( isActive ) { coroutineScope . launch { disconnect ( )", "gt": "delay ( <NUM_LIT:1000> ) \n connect ( ) \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/454"}
{"input": "<s> private fun ping ( ) { if ( isActive ) { write ( \" <STR_LIT> \" )", "gt": "checkPong ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/455"}
{"input": "<s> private fun checkPong ( ) { tickerFlowPong ( ) . onCompletion { if ( isActive ) { if ( pongReceived ) { pongReceived = false checkPongWait ( ) } else {", "gt": "reconnect ( ) \n } \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/456"}
{"input": "<s> private fun checkPongWait ( ) { tickerFlowActive ( <NUM_LIT> ) . onCompletion {", "gt": "if ( isActive ) { \n ping ( ) \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/458"}
{"input": "<s> fun disconnect ( ) { if ( isActive ) { val thread = Thread { isActive = false close ( )", "gt": "} \n thread . start ( ) \n thread . join ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/461"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false \n socket ? . close ( <NUM_LIT:1000> , null ) \n }", "repo": "Xtra", "task_id": "Xtra/464"}
{"input": "<s> private fun reconnect ( ) { if ( isActive ) { coroutineScope . launch { disconnect ( )", "gt": "delay ( <NUM_LIT:1000> ) \n connect ( ) \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/465"}
{"input": "<s> private fun ping ( ) { if ( isActive ) { write ( \" <STR_LIT> \" )", "gt": "checkPong ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/466"}
{"input": "<s> private fun checkPong ( ) { tickerFlowPong ( ) . onCompletion { if ( isActive ) { if ( pongReceived ) { pongReceived = false checkPongWait ( ) } else {", "gt": "reconnect ( ) \n } \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/467"}
{"input": "<s> private fun checkPongWait ( ) { tickerFlowActive ( <NUM_LIT> ) . onCompletion {", "gt": "if ( isActive ) { \n ping ( ) \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/469"}
{"input": "<s> fun disconnect ( ) {", "gt": "isActive = false \n socket ? . close ( <NUM_LIT:1000> , null ) \n }", "repo": "Xtra", "task_id": "Xtra/472"}
{"input": "<s> private fun reconnect ( ) { if ( isActive ) { coroutineScope . launch { disconnect ( )", "gt": "delay ( <NUM_LIT:1000> ) \n connect ( ) \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/473"}
{"input": "<s> private fun checkPong ( ) { tickerFlowPong ( ) . onCompletion { if ( isActive ) { if ( pongReceived ) { pongReceived = false checkPongWait ( ) } else {", "gt": "reconnect ( ) \n } \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/475"}
{"input": "<s> private fun checkPongWait ( ) { tickerFlowActive ( <NUM_LIT> ) . onCompletion {", "gt": "if ( isActive ) { \n ping ( ) \n } \n } . launchIn ( coroutineScope ) \n }", "repo": "Xtra", "task_id": "Xtra/477"}
{"input": "<s> fun calculateLandscapeWidthByPercent ( context : Context , percent : Int ) : Int { val deviceLandscapeWidth = with ( context . resources . displayMetrics ) { if ( heightPixels > widthPixels ) heightPixels else widthPixels", "gt": "} \n return ( deviceLandscapeWidth * ( percent / <NUM_LIT:100> f ) ) . toInt ( ) \n }", "repo": "Xtra", "task_id": "Xtra/482"}
{"input": "<s> fun calculatePortraitHeightByPercent ( context : Context , percent : Int ) : Int { val devicePortraitHeight = with ( context . resources . displayMetrics ) { if ( widthPixels > heightPixels ) widthPixels else heightPixels", "gt": "} \n return ( devicePortraitHeight * ( percent / <NUM_LIT:100> f ) ) . toInt ( ) \n }", "repo": "Xtra", "task_id": "Xtra/483"}
{"input": "<s> fun download ( context : Context , request : Request ) { val intent = Intent ( context , DownloadService : : class . java ) . putExtra ( KEY_REQUEST , request )", "gt": "context . startService ( intent ) \n DownloadService . activeRequests . add ( request . offlineVideoId ) \n }", "repo": "Xtra", "task_id": "Xtra/484"}
{"input": "<s> fun savePng ( context : Context , folder : String , fileName : String , bitmap : Bitmap ) { val outputStream : FileOutputStream try { val path = context . filesDir . toString ( ) + File . separator + folder + File . separator + \" <STR_LIT> \" File ( context . filesDir , folder ) . mkdir ( ) outputStream = FileOutputStream ( File ( path ) ) bitmap . compress ( Bitmap . CompressFormat . PNG , <NUM_LIT:100> , outputStream )", "gt": "outputStream . close ( ) \n } catch ( e : Exception ) { \n \n } \n }", "repo": "Xtra", "task_id": "Xtra/485"}
{"input": "<s> fun getContentIfNotHandled ( ) : T ? { return if ( hasBeenHandled ) { null", "gt": "} else { \n hasBeenHandled = true \n content \n } \n }", "repo": "Xtra", "task_id": "Xtra/486"}
{"input": "<s> fun get ( videoId : Int ? = null ) : Fetch { if ( instance = = null | | instance ! ! . isClosed ) { instance = Fetch . getInstance ( configurationBuilder . apply { XtraApp . INSTANCE . applicationContext . prefs ( ) . getInt ( C . DOWNLOAD_CONCURRENT_LIMIT , <NUM_LIT:10> ) . let { setDownloadConcurrentLimit ( it ) }", "gt": "setNamespace ( \" <STR_LIT> \" ) \n } . build ( ) ) \n } \n return instance ! ! \n }", "repo": "Xtra", "task_id": "Xtra/487"}
{"input": "<s> fun showRadioButtonDialogFragment ( fragmentManager : FragmentManager , labels : Collection < CharSequence > , checkedIndex : Int , requestCode : Int = 0 ) { RadioButtonDialogFragment . newInstance ( requestCode ,", "gt": "labels , \n null , \n checkedIndex \n ) . show ( fragmentManager , \" <STR_LIT> \" ) \n }", "repo": "Xtra", "task_id": "Xtra/489"}
{"input": "<s> override fun observe ( owner : LifecycleOwner , observer : Observer < in T > ) { if ( hasActiveObservers ( ) ) { Log . w ( TAG , \" <STR_LIT> \" ) } super . observe ( owner , Observer < T > { t - >", "gt": "if ( pending . compareAndSet ( true , false ) ) { \n observer . onChanged ( t ) \n } \n } ) \n }", "repo": "Xtra", "task_id": "Xtra/491"}
{"input": "<s> override fun setValue ( t : T ? ) {", "gt": "pending . set ( true ) \n super . setValue ( t ) \n }", "repo": "Xtra", "task_id": "Xtra/492"}
{"input": "<s> fun getTimestamp ( input : Long , timestampFormat : String ? ) : String ? { val pattern = when ( timestampFormat ) { \" <STR_LIT:0> \" - > \" <STR_LIT> \" \" <STR_LIT:1> \" - > \" <STR_LIT> \" \" <STR_LIT:2> \" - > \" <STR_LIT> \" \" <STR_LIT:3> \" - > \" <STR_LIT> \" \" <STR_LIT:4> \" - > \" <STR_LIT> \" \" <STR_LIT:5> \" - > \" <STR_LIT> \" \" <STR_LIT:6> \" - > \" <STR_LIT> \" else - > \" <STR_LIT> \" } val format = SimpleDateFormat ( pattern , Locale . getDefault ( ) ) return try {", "gt": "format . format ( Date ( input ) ) \n } catch ( e : Exception ) { \n null \n } \n }", "repo": "Xtra", "task_id": "Xtra/495"}
{"input": "<s> fun parseIso8601Date ( date : String ) : Long ? { return try { SimpleDateFormat ( \" <STR_LIT> \" , Locale . getDefault ( ) ) . parse ( date ) ? . time ? . takeIf { it > 0 } } catch ( e : ParseException ) { try { SimpleDateFormat ( \" <STR_LIT> \" , Locale . getDefault ( ) ) . parse ( date ) ? . time ? . takeIf { it > 0 }", "gt": "} catch ( e : ParseException ) { \n null \n } \n } \n }", "repo": "Xtra", "task_id": "Xtra/497"}
{"input": "<s> fun parseClipOffset ( url : String ) : Double { val time = url . substringAfterLast ( <CHAR_LIT:=> ) . split ( \" <STR_LIT:\\\\> <STR_LIT:D> \" . toRegex ( ) ) var offset = <NUM_LIT:0.0> var multiplier = <NUM_LIT:1.0> for ( i in time . lastIndex - 1 downTo 0 ) {", "gt": "offset + = time [ i ] . toDouble ( ) * multiplier \n multiplier * = <NUM_LIT> \n } \n return offset \n }", "repo": "Xtra", "task_id": "Xtra/499"}
{"input": "<s> fun formatCount ( context : Context , count : Int ) : String { return if ( count > <NUM_LIT:1000> & & context . prefs ( ) . getBoolean ( C . UI_TRUNCATEVIEWCOUNT , false ) ) {", "gt": "formatCountIfMoreThanAThousand ( count ) \n } else { \n count . toString ( ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/502"}
{"input": "<s> override fun draw ( canvas : Canvas ) { for ( i in <NUM_LIT> <NUM_LIT> ) {", "gt": "super . draw ( canvas ) \n } \n }", "repo": "Xtra", "task_id": "Xtra/514"}
{"input": "<s> fun clearBackgroundDrawableForDate ( date : Date ) {", "gt": "val dateTime = CalendarHelper . convertDateToDateTime ( date ) \n mBackgroundForDateTimeMap . remove ( dateTime ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/6"}
{"input": "<s> fun clearTextColorForDate ( date : Date ) {", "gt": "val dateTime = CalendarHelper . convertDateToDateTime ( date ) \n mTextColorForDateTimeMap . remove ( dateTime ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/10"}
{"input": "<s> fun restoreStatesFromKey ( savedInstanceState : Bundle ? , key : String ) { if ( savedInstanceState ! = null & & savedInstanceState . containsKey ( key ) ) { val caldroidSavedState = savedInstanceState . getBundle ( key )", "gt": "arguments = caldroidSavedState \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/11"}
{"input": "<s> fun setCalendarDateTime ( dateTime : DateTime ) { month = dateTime . month ! ! year = dateTime . year ! ! if ( caldroidListener ! = null ) {", "gt": "caldroidListener ! ! . onChangeMonth ( month , year ) \n } \n \n refreshView ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/13"}
{"input": "<s> override fun onDestroyView ( ) { if ( dialog ! = null & & retainInstance ) { dialog ! ! . setDismissMessage ( null )", "gt": "} \n super . onDestroyView ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/25"}
{"input": "<s> fun setCurrentDateTime ( dateTime : DateTime ) {", "gt": "this . currentDateTime = dateTime \n setCalendarDateTime ( currentDateTime ! ! ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/27"}
{"input": "<s> fun newInstance ( dialogTitle : String , month : Int , year : Int ) : CaldroidFragment { val f = CaldroidFragment ( ) val args = Bundle ( ) args . putString ( DIALOG_TITLE , dialogTitle ) args . putInt ( MONTH , month ) args . putInt ( YEAR , year )", "gt": "f . arguments = args \n \n return f \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/29"}
{"input": "<s> fun setPickPhotoSize ( photoSize : Int ) : Builder {", "gt": "pickModel . pickPhotoSize = photoSize \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/32"}
{"input": "<s> fun setHasPhotoSize ( hasSize : Int ) : Builder {", "gt": "pickModel . hasPhotoSize = hasSize \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/33"}
{"input": "<s> fun setAllPhotoSize ( allSize : Int ) : Builder {", "gt": "pickModel . allPhotoSize = allSize \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/34"}
{"input": "<s> fun setSpanCount ( spanCount : Int ) : Builder {", "gt": "pickModel . spanCount = spanCount \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/35"}
{"input": "<s> fun setShowCamera ( showCamera : Boolean ) : Builder {", "gt": "pickModel . isShowCamera = showCamera \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/36"}
{"input": "<s> fun setClickSelectable ( clickSelectable : Boolean ) : Builder {", "gt": "pickModel . isClickSelectable = clickSelectable \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/37"}
{"input": "<s> fun setToolbarColor ( toolbarColor : Int ) : Builder {", "gt": "pickModel . toolbarColor = toolbarColor \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/38"}
{"input": "<s> fun setStatusBarColor ( statusBarColor : Int ) : Builder {", "gt": "pickModel . statusBarColor = statusBarColor \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/39"}
{"input": "<s> fun setToolbarTextColor ( toolbarTextColor : Int ) : Builder {", "gt": "pickModel . toolbarTextColor = toolbarTextColor \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/40"}
{"input": "<s> fun setSelectIconColor ( selectIconColor : Int ) : Builder {", "gt": "pickModel . selectIconColor = selectIconColor \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/41"}
{"input": "<s> fun setLightStatusBar ( lightStatusBar : Boolean ) : Builder {", "gt": "pickModel . lightStatusBar = lightStatusBar \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/42"}
{"input": "<s> fun setShowGif ( showGif : Boolean ) : Builder {", "gt": "pickModel . isShowGif = showGif \n return this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/43"}
{"input": "<s> private fun create ( ) : PickPhotoViewEx {", "gt": "GlobalData . model = pickModel \n return PickPhotoViewEx ( this ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/44"}
{"input": "<s> fun startListening ( activity : AppCompatActivity ) { when { isSdkVersionSupported ( ) & & isBiometricPromptEnabled ( ) - > startListeningBiometric ( activity )", "gt": "isSdkVersionSupported ( ) - > startListeningFingerprint ( activity ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/45"}
{"input": "<s> fun startListeningBiometric ( activity : AppCompatActivity ) { if ( isBiometricManagerEnabled ( ) & & canAuthenticateWithBiometrics ( activity ) ) {", "gt": "showBiometricPrompt ( activity ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/46"}
{"input": "<s> @ RequiresApi ( Build . VERSION_CODES . Q ) @ Suppress ( \" <STR_LIT> \" ) private fun canAuthenticateWithBiometrics ( context : Context ) : Boolean { val biometricManager = context . getSystemService ( BiometricManager : : class . java ) return if ( biometricManager ! = null ) {", "gt": "biometricManager . canAuthenticate ( ) = = BiometricManager . BIOMETRIC_SUCCESS \n } else false \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/49"}
{"input": "<s> fun getDateTimeStringFromTimeMillis ( timeMillis : Long , dateFormat : Int = SimpleDateFormat . FULL , timeFormat : Int = SimpleDateFormat . SHORT , dateTimeFormat : DateTimeFormat ? = null , locale : Locale = Locale . getDefault ( ) ) : String { val date = Date ( timeMillis ) val simpleDateFormat = when ( dateTimeFormat = = null ) { true - > SimpleDateFormat . getDateTimeInstance ( dateFormat , timeFormat , locale ) false - > SimpleDateFormat . getDateTimeInstance ( dateTimeFormat . getDateKey ( ) , dateTimeFormat . getTimeKey ( ) ,", "gt": "locale \n ) \n } \n return simpleDateFormat . format ( date ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/56"}
{"input": "<s> fun getCurrentDateTime ( pattern : String ) : String { val date = Date ( )", "gt": "val dateFormat = SimpleDateFormat ( pattern ) \n return dateFormat . format ( date ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/57"}
{"input": "<s> fun timeMillisToDateTime ( timeMillis : Long , pattern : String ) : String { val date = Date ( timeMillis )", "gt": "val dateFormat = SimpleDateFormat ( pattern ) \n return dateFormat . format ( date ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/58"}
{"input": "<s> fun convDateToTimeMillis ( field : Int , amount : Int , isZeroHour : Boolean = true , isZeroMinute : Boolean = true , isZeroSecond : Boolean = true , isZeroMilliSecond : Boolean = true ) : Long { val calendar = Calendar . getInstance ( Locale . getDefault ( ) ) if ( isZeroHour ) calendar . set ( Calendar . HOUR_OF_DAY , 0 ) if ( isZeroMinute ) calendar . set ( Calendar . MINUTE , 0 ) if ( isZeroSecond ) calendar . set ( Calendar . SECOND , 0 ) if ( isZeroMilliSecond ) calendar . set ( Calendar . MILLISECOND , 0 )", "gt": "if ( amount ! = 0 ) { \n calendar . add ( field , amount ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/63"}
{"input": "<s> private fun makeDirectory ( path : String ) {", "gt": "val workingDirectory = File ( path ) \n if ( ! workingDirectory . exists ( ) ) workingDirectory . mkdirs ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/69"}
{"input": "<s> fun initLegacyWorkingDirectory ( context : Context ) { if ( context . checkPermission ( EXTERNAL_STORAGE_PERMISSIONS ) ) {", "gt": "makeDirectory ( getExternalStorageDirectory ( ) . absolutePath + BACKUP_EXCEL_DIRECTORY ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/70"}
{"input": "<s> fun readFileWithSAF ( mimeType : String , activityResultLauncher : ActivityResultLauncher < Intent > ) { val intent = Intent ( Intent . ACTION_GET_CONTENT ) . apply { type = mimeType", "gt": "} \n activityResultLauncher . launch ( intent ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/72"}
{"input": "<s> fun boldString ( context : Context , textView : TextView ? ) { if ( context . config . boldStyleEnable ) {", "gt": "boldStringForce ( textView ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/74"}
{"input": "<s> fun hashMapToJsonString ( map : HashMap < String , Any > ) : String {", "gt": "val gson = GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) \n return gson . toJson ( map ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/82"}
{"input": "<s> fun fromHtml ( target : String ) : Spanned { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . N ) { return Html . fromHtml ( target )", "gt": "} \n return Html . fromHtml ( target , Html . FROM_HTML_MODE_LEGACY ) ; \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/83"}
{"input": "<s> private fun isValidTypeface ( fontArray : Array < String > ? , fontName : String ? ) : Boolean { var result = false if ( fontArray ! = null ) { for ( name in fontArray ) { if ( StringUtils . equalsIgnoreCase ( name , fontName ) ) { result = true break", "gt": "} \n } \n } \n return result \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/84"}
{"input": "<s> fun getCommonTypeface ( context : Context ) : Typeface ? { if ( sTypeface = = null ) { setCommonTypeface ( context )", "gt": "} \n return sTypeface \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/87"}
{"input": "<s> fun setCommonTypeface ( context : Context ) {", "gt": "val commonFontName = context . config . settingFontName \n sTypeface = getTypeface ( context , commonFontName ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/88"}
{"input": "<s> fun setFontsTypeface ( context : Context , customFontName : String ? , rootView : ViewGroup ? , customLineSpacing : Boolean = true ) { val typeface = if ( StringUtils . isNotEmpty ( customFontName ) ) getTypeface ( context , customFontName ) else getCommonTypeface ( context ) rootView ? . let {", "gt": "setTypeface ( context , it , typeface , customLineSpacing ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/89"}
{"input": "<s> fun fontFileNameToDisplayName ( context : Context , fontFileName : String ) : String { var displayName : String ? = null val fontNames = context . resources . getStringArray ( R . array . pref_list_fonts_values ) val displayNames = context . resources . getStringArray ( R . array . pref_list_fonts_title ) for ( i in fontNames . indices ) { if ( StringUtils . equals ( fontFileName , fontNames [ i ] ) ) { displayName = displayNames [ i ]", "gt": "break \n } \n } \n return displayName ? : FilenameUtils . getBaseName ( fontFileName ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/90"}
{"input": "<s> fun checkFontSetting ( activity : Activity ) { activity . run { if ( ! Locale . getDefault ( ) . language . matches ( CUSTOM_FONTS_SUPPORT_LANGUAGE . toRegex ( ) ) ) { initDefaultFontSetting ( this )", "gt": "} else { \n initDefaultFontSetting ( this ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/91"}
{"input": "<s> private fun setupActionLog ( ) { mBinding . clearLog . setOnClickListener {", "gt": "EasyDiaryDbHelper . deleteActionLogAll ( ) \n updateActionLog ( ) \n } \n updateActionLog ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/97"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n toggleTimePickerTool ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/101"}
{"input": "<s> protected fun setupRecognizer ( ) { mRecognizerIntent = Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) . apply { putExtra ( RecognizerIntent . EXTRA_LANGUAGE_MODEL , RecognizerIntent . LANGUAGE_MODEL_FREE_FORM )", "gt": "putExtra ( RecognizerIntent . EXTRA_LANGUAGE , Locale . getDefault ( ) ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/105"}
{"input": "<s> protected fun duplicatedEasterEggWarning ( ) { showAlertDialog ( \" <STR_LIT> \" ,", "gt": "null , \n null , \n DialogMode . INFO , \n ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/110"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "refreshList ( ) \n mCalendarFragment . refreshView ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/120"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n mCalendarFragment . saveStatesToKey ( outState , \" <STR_LIT> \" ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/121"}
{"input": "<s> private fun selectDateAndRefreshView ( ) { mCalendarFragment . clearSelectedDates ( ) mCalendarFragment . setSelectedDate ( mCalendar . time )", "gt": "mCalendarFragment . refreshViewOnlyCurrentPage ( ) \n refreshList ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/124"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n pauseLock ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/125"}
{"input": "<s> override fun onBackPressed ( ) { if ( ! hasUnsavedChanges ) super . onBackPressed ( )", "gt": "overridePendingTransition ( android . R . anim . fade_in , android . R . anim . fade_out ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/129"}
{"input": "<s> private fun saveChanges ( ) { config . apply { textColor = curTextColor backgroundColor = curBackgroundColor screenBackgroundColor = curScreenBackgroundColor primaryColor = curPrimaryColor", "gt": "isThemeChanged = true \n } \n finish ( ) \n launcher ? . let { toggleLauncher ( it ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/131"}
{"input": "<s> private fun initColorVariables ( ) { curTextColor = config . textColor curBackgroundColor = config . backgroundColor", "gt": "curScreenBackgroundColor = config . screenBackgroundColor \n curPrimaryColor = config . primaryColor \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/132"}
{"input": "<s> private fun colorChanged ( ) { hasUnsavedChanges = true", "gt": "setupColorsPickers ( ) \n invalidateOptionsMenu ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/134"}
{"input": "<s> private fun setCurrentBackgroundColor ( color : Int ) {", "gt": "curBackgroundColor = color \n updateAppViews ( mActivityCustomizationBinding . mainHolder , curBackgroundColor ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/136"}
{"input": "<s> private fun setCurrentScreenBackgroundColor ( color : Int ) {", "gt": "curScreenBackgroundColor = color \n updateBackgroundColor ( color ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/137"}
{"input": "<s> private fun pickTextColor ( ) { ColorPickerDialog ( this , curTextColor ) { if ( hasColorChanged ( curTextColor , it ) ) {", "gt": "setCurrentTextColor ( it ) \n colorChanged ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/139"}
{"input": "<s> private fun pickBackgroundColor ( ) { ColorPickerDialog ( this , curBackgroundColor ) { if ( hasColorChanged ( curBackgroundColor , it ) ) {", "gt": "setCurrentBackgroundColor ( it ) \n colorChanged ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/140"}
{"input": "<s> private fun pickScreenBackgroundColor ( ) { ColorPickerDialog ( this , curScreenBackgroundColor ) { if ( hasColorChanged ( curScreenBackgroundColor , it ) ) {", "gt": "setCurrentScreenBackgroundColor ( it ) \n colorChanged ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/141"}
{"input": "<s> fun showProgressContainer ( ) {", "gt": "mBinding . layoutProgressContainer . visibility = View . VISIBLE \n mBinding . progress . visibility = View . VISIBLE \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/142"}
{"input": "<s> fun hideProgressContainer ( ) { Handler ( Looper . getMainLooper ( ) ) . postDelayed ( { mBinding . layoutProgressContainer . visibility = View . GONE", "gt": "mBinding . progress . visibility = View . GONE \n } , <NUM_LIT> ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/143"}
{"input": "<s> override fun setVisiblePhotoProgress ( isVisible : Boolean ) { when ( isVisible ) { true - > mBinding . photoProgress . visibility = View . VISIBLE", "gt": "false - > mBinding . photoProgress . visibility = View . GONE \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/144"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putSerializable ( DIARY_MODE , mDiaryMode ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/147"}
{"input": "<s> private fun refreshList ( ) { var queryString = \" \" if ( StringUtils . isNotEmpty ( mBinding . query . text ) ) queryString =", "gt": "mBinding . query . text . toString ( ) \n refreshList ( queryString ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/153"}
{"input": "<s> private fun initDummyData ( ) { if ( ! config . isInitDummyData ) { initSampleData ( )", "gt": "config . isInitDummyData = true \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/154"}
{"input": "<s> private fun setupMotionSensor ( ) { val sensorManager = getSystemService ( SENSOR_SERVICE ) as SensorManager", "gt": "val sd = ShakeDetector ( this ) \n sd . start ( sensorManager , SensorManager . SENSOR_DELAY_GAME ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/155"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n destroyModule ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/157"}
{"input": "<s> private fun destroyModule ( ) { mTextToSpeech ? . run {", "gt": "stop ( ) \n shutdown ( ) \n mTextToSpeech = null \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/162"}
{"input": "<s> private fun textToSpeech ( text : String ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . LOLLIPOP ) {", "gt": "ttsGreater21 ( text ) \n } else { \n ttsUnder20 ( text ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/163"}
{"input": "<s> private fun initBottomContainer ( ) { context ? . let {", "gt": "mPrimaryColor = it . config . primaryColor \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/169"}
{"input": "<s> override fun setVisiblePhotoProgress ( isVisible : Boolean ) { when ( isVisible ) { true - > mBinding . photoProgress . visibility = View . VISIBLE", "gt": "false - > mBinding . photoProgress . visibility = View . GONE \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/175"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "useDynamicTheme = ! isNightMode ( ) \n super . onCreate ( savedInstanceState ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/178"}
{"input": "<s> override fun onBackPressed ( ) { super . onBackPressed ( )", "gt": "pauseLock ( ) \n overridePendingTransition ( android . R . anim . fade_in , android . R . anim . fade_out ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/179"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n pauseLock ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/180"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n mCancellationSignal ? . cancel ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/181"}
{"input": "<s> override fun onBackPressed ( ) {", "gt": "super . onBackPressed ( ) \n ActivityCompat . finishAffinity ( this ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/182"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n supportActionBar ? . setBackgroundDrawable ( null ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/184"}
{"input": "<s> override fun onRequestPermissionsResult ( requestCode : Int , permissions : Array < String > , grantResults : IntArray ) { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ) pauseLock ( ) when ( requestCode ) { REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN - > if ( checkPermission ( EXTERNAL_STORAGE_PERMISSIONS ) ) { openMarkdownFile ( )", "gt": "} else { \n makeSnackBar ( \" <STR_LIT> \" ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/191"}
{"input": "<s> override fun onBackPressed ( ) {", "gt": "super . onBackPressed ( ) \n ActivityCompat . finishAffinity ( this ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/195"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) { outState . putInt ( POSTCARD_BG_COLOR , mBgColor )", "gt": "outState . putInt ( POSTCARD_TEXT_COLOR , mTextColor ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/196"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n updateTextSize ( mBinding . postContainer , this @ PostcardActivity , mAddFontSize ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/197"}
{"input": "<s> private fun createBitmap ( ) : Bitmap { val scrollViewBitmap = Bitmap . createBitmap ( mBinding . scrollPostcard . width , mBinding . scrollPostcard . getChildAt ( 0 ) . height , Bitmap . Config . ARGB_8888 ) val scrollViewCanvas = Canvas ( scrollViewBitmap )", "gt": "mBinding . scrollPostcard . draw ( scrollViewCanvas ) \n return scrollViewBitmap \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/202"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n supportActionBar ? . setBackgroundDrawable ( null ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/204"}
{"input": "<s> override fun onBackPressed ( ) {", "gt": "setResult ( Activity . RESULT_OK ) \n super . onBackPressed ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/211"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( config . previousActivity = = PREVIOUS_ACTIVITY_CREATE ) { refreshList ( ) moveListViewScrollToBottom ( )", "gt": "config . previousActivity = - 1 \n } else { \n refreshList ( ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/213"}
{"input": "<s> private fun keypadIsShown ( ) : Boolean { var isShow = false val rootView = findViewById < View > ( android . R . id . content ) val heightDiff = rootView . rootView . height - rootView . height if ( heightDiff > dpToPixel ( <NUM_LIT> F ) ) { isShow = true", "gt": "} \n Log . i ( \" <STR_LIT> \" , \" <STR_LIT> \" ) \n \n return isShow \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/218"}
{"input": "<s> fun onItemHolderClick ( itemHolder : AlarmViewHolder ) { onItemClickListener ? . run {", "gt": "onItemClick ( null , itemHolder . itemView , itemHolder . adapterPosition , itemHolder . itemId ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/219"}
{"input": "<s> fun onItemHolderClick ( itemHolder : CheatSheetViewHolder ) { onItemClickListener ? . run {", "gt": "onItemClick ( null , itemHolder . itemView , itemHolder . adapterPosition , itemHolder . itemId ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/221"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { return when ( dDayItems . size = = position . plus ( 1 ) ) { true - > ( holder as DDayAddViewHolder ) . bindTo ( dDayItems [ position ] )", "gt": "false - > ( holder as DDayViewHolder ) . bindTo ( dDayItems [ position ] ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/225"}
{"input": "<s> fun bindTo ( dDay : DDay ) { itemDDayAddBinding . root . setOnClickListener {", "gt": "openDDayDialog ( dDay ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/227"}
{"input": "<s> fun getSelectedItems ( ) : List < Diary > { val selectedItems = arrayListOf < Diary > ( )", "gt": "diaryItems . map { \n if ( it . isSelected ) selectedItems . add ( it ) \n } \n return selectedItems \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/229"}
{"input": "<s> private fun getNewReleases ( ) : String { val sb = StringBuilder ( ) releases . forEach { val parts = activity . getString ( it . textId ) . split ( \" <STR_LIT> <STR_LIT> \" ) . map ( String : : trim ) parts . forEachIndexed { index , description - > when ( index ) { 0 - > sb . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) else - > sb . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) } }", "gt": "sb . append ( \" <STR_LIT> <STR_LIT> \" ) \n } \n \n return sb . toString ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/245"}
{"input": "<s> private fun applyCustomTypeFace ( paint : Paint ) { val oldStyle : Int val old = paint . typeface oldStyle = old ? . style ? : 0 val fake = oldStyle and tf . style . inv ( ) if ( fake and Typeface . BOLD ! = 0 ) { paint . isFakeBoldText = true } if ( fake and Typeface . ITALIC ! = 0 ) {", "gt": "paint . textSkewX = - <NUM_LIT> \n } \n \n paint . typeface = tf \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/297"}
{"input": "<s> private fun hsv2hsl ( hsv : FloatArray ) : FloatArray { val hue = hsv [ 0 ] val sat = hsv [ 1 ] val value = hsv [ <NUM_LIT:2> ] val newHue = ( <NUM_LIT> - sat ) * value var newSat = sat * value / if ( newHue < <NUM_LIT> ) newHue else <NUM_LIT> - newHue", "gt": "if ( newSat > <NUM_LIT> ) \n newSat = <NUM_LIT> \n \n return floatArrayOf ( hue , newSat , newHue / <NUM_LIT> ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/304"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n updateDDayList ( mDDaySortOrder ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/313"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n Handler ( Looper . getMainLooper ( ) ) . post { updateDiary ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/316"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) {", "gt": "super . onViewCreated ( view , savedInstanceState ) \n setupHistory ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/321"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n Handler ( Looper . getMainLooper ( ) ) . post { updateHistory ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/322"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) bindEvent ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/324"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/325"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) progressContainer = ( requireActivity ( ) as BaseSettingsActivity ) . getProgressContainer ( ) requireActivity ( ) . run { changeDrawableIconColor ( config . textColor , R . drawable . ic_minus_6 ) changeDrawableIconColor ( config . textColor , R . drawable . ic_plus_6 )", "gt": "} \n bindEvent ( ) \n updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/330"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/331"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) bindEvent ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/333"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/334"}
{"input": "<s> private fun exportRealmFile ( showDialog : Boolean = true ) {", "gt": "requireActivity ( ) . exportRealmFile ( ) \n requireActivity ( ) . makeSnackBar ( \" <STR_LIT> \" ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/335"}
{"input": "<s> private fun exportFullBackupFile ( uri : Uri ? ) { exportRealmFile ( false ) BackupOperations . Builder ( requireActivity ( ) , uri . toString ( ) , BackupOperations . WORK_MODE_BACKUP ) . build ( ) . apply {", "gt": "continuation . enqueue ( ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/339"}
{"input": "<s> private fun importFullBackupFile ( uri : Uri ? ) { BackupOperations . Builder ( requireActivity ( ) , uri . toString ( ) , BackupOperations . WORK_MODE_RECOVERY ) . build ( ) . apply {", "gt": "continuation . enqueue ( ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/340"}
{"input": "<s> private fun setupLauncher ( taskFlag : Int , callback : ( ) - > Unit ) {", "gt": "mTaskFlag = taskFlag \n callback ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/341"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) bindEvent ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/343"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "updateFragmentUI ( mBinding . root ) \n initPreference ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/344"}
{"input": "<s> private fun bindEvent ( ) { mBinding . run { appLockSetting . setOnClickListener ( mOnClickListener )", "gt": "fingerprint . setOnClickListener ( mOnClickListener ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/345"}
{"input": "<s> private fun initPreference ( ) { mBinding . run { appLockSettingSwitcher . isChecked = mActivity . config . aafPinLockEnable", "gt": "fingerprintSwitcher . isChecked = mActivity . config . fingerprintLockEnable \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/346"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n mActivity . changeDrawableIconColor ( android . R . color . white , R . drawable . ic_delete_w ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/348"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "updateFragmentUI ( mBinding . root ) \n mActivity . updateDrawableColorInnerCardView ( R . drawable . ic_delete_w ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/349"}
{"input": "<s> private fun getProperDayDrawable ( selected : Boolean ) : Drawable { val drawableId = if ( selected ) R . drawable . bg_circle_filled else R . drawable . bg_circle_stroke val drawable = ContextCompat . getDrawable ( mActivity , drawableId )", "gt": "drawable ! ! . applyColorFilter ( mActivity . config . textColor ) \n return drawable \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/351"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCoroutineJob ? . run { if ( isActive ) cancel ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/354"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCoroutineJob ? . run { if ( isActive ) cancel ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/362"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCoroutineJob ? . run { if ( isActive ) cancel ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/364"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCoroutineJob ? . run { if ( isActive ) cancel ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/367"}
{"input": "<s> private fun fillValueBackward ( averageInfo : ArrayList < Float > ) { averageInfo . forEachIndexed { index , fl - > if ( fl = = <NUM_LIT> ) { down @ for ( seq in index . minus ( 1 ) downTo 0 ) { if ( averageInfo [ seq ] > <NUM_LIT> ) { averageInfo [ index ] = averageInfo [ seq ] break @ down }", "gt": "} \n } \n } \n Log . i ( AAF_TEST , \" <STR_LIT> \" , \" <STR_LIT> \" ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/369"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCoroutineJob ? . run { if ( isActive ) cancel ( ) } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/372"}
{"input": "<s> override fun onCreate ( ) { super . onCreate ( )", "gt": "Realm . init ( this ) \n context = this \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/377"}
{"input": "<s> private fun getInstance ( ) : Realm { if ( mRealmInstance = = null | | mRealmInstance ? . isClosed = = true ) { mRealmInstance = Realm . getInstance ( mDiaryConfig )", "gt": "} \n return mRealmInstance ! ! \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/378"}
{"input": "<s> fun insertDiary ( diary : Diary ) { getInstance ( ) . executeTransaction { realm - > var sequence = 1 if ( realm . where ( Diary : : class . java ) . count ( ) > 0 L ) { val number = realm . where ( Diary : : class . java ) . max ( \" <STR_LIT> \" ) number ? . let { sequence = it . toInt ( ) . plus ( 1 ) }", "gt": "} \n diary . sequence = sequence \n realm . insert ( diary ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/380"}
{"input": "<s> fun insertTemporaryDiary ( diaryTemp : Diary ) { deleteTemporaryDiaryBy ( diaryTemp . originSequence ) getInstance ( ) . executeTransaction { realm - > if ( diaryTemp . sequence = = BaseDiaryEditingActivity . DIARY_SEQUENCE_INIT ) { realm . where ( Diary : : class . java ) . max ( \" <STR_LIT> \" ) ? . let { diaryTemp . sequence = it . toInt ( ) . plus ( 1 )", "gt": "} \n } \n realm . insert ( diaryTemp ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/381"}
{"input": "<s> fun findDiaryBy ( sequence : Int , realmInstance : Realm = getInstance ( ) ) : Diary ? {", "gt": "return realmInstance . where ( Diary : : class . java ) \n . equalTo ( \" <STR_LIT> \" , sequence ) . findFirst ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/384"}
{"input": "<s> fun findDiaryBy ( photoUri : String , realmInstance : Realm = getInstance ( ) ) : Diary ? { val result = realmInstance . where ( PhotoUri : : class . java ) . contains ( \" <STR_LIT> \" , photoUri ) . findFirst ( ) ? . diary var diary : Diary ? = null result ? . let { if ( it . isValid & & it . isNotEmpty ( ) ) { diary = it . first ( )", "gt": "} \n } \n \n return diary \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/385"}
{"input": "<s> fun deleteDiaryBy ( sequence : Int , realmInstance : Realm = getInstance ( ) ) { realmInstance . run { where ( Diary : : class . java ) . equalTo ( \" <STR_LIT> \" , sequence ) . findFirst ( ) ? . let { beginTransaction ( )", "gt": "it . deleteFromRealm ( ) \n commitTransaction ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/387"}
{"input": "<s> fun deleteTemporaryDiaryBy ( originSequence : Int , realmInstance : Realm = getInstance ( ) ) { realmInstance . run { where ( Diary : : class . java ) . equalTo ( \" <STR_LIT> \" , originSequence ) . findFirst ( ) ? . let { beginTransaction ( )", "gt": "it . deleteFromRealm ( ) \n commitTransaction ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/388"}
{"input": "<s> fun countDiaryAll ( ) : Long { return getInstance ( ) . where ( Diary : : class . java )", "gt": ". equalTo ( \" <STR_LIT> \" , DIARY_ORIGIN_SEQUENCE_INIT ) \n . count ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/389"}
{"input": "<s> fun deleteAlarmBy ( sequence : Int ) { findAlarmBy ( sequence ) ? . let { getInstance ( ) . run { beginTransaction ( )", "gt": "it . deleteFromRealm ( ) \n commitTransaction ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/391"}
{"input": "<s> fun insertActionLog ( actionLog : ActionLog , context : Context ) { if ( context . config . enableDebugMode ) {", "gt": "insertActionLog ( actionLog ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/394"}
{"input": "<s> fun deleteActionLogAll ( ) { getInstance ( ) . executeTransaction { realm - >", "gt": "realm . where ( ActionLog : : class . java ) . findAll ( ) . deleteAllFromRealm ( ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/395"}
{"input": "<s> fun deleteDDayBy ( sequence : Int ) { findDDayBy ( sequence ) ? . let { getInstance ( ) . run { beginTransaction ( )", "gt": "it . deleteFromRealm ( ) \n commitTransaction ( ) \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/397"}
{"input": "<s> fun determineFiles ( targetDirectoryName : String ) {", "gt": "this . mRootDirectoryName = targetDirectoryName \n determineFiles ( targetDirectoryName , null ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/403"}
{"input": "<s> private fun countFileEntry ( uri : Uri ? ) : Int { val uriStream = context . contentResolver . openInputStream ( uri ! ! ) var count = 0 try { val zipInputStream = ZipInputStream ( uriStream ) while ( zipInputStream . nextEntry ! = null & & isOnProgress ) { zipInputStream . closeEntry ( ) count + + } zipInputStream . close ( ) uriStream ? . close ( )", "gt": "} catch ( e : IOException ) { \n e . printStackTrace ( ) \n } \n return count \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/404"}
{"input": "<s> fun printFileNames ( ) { for ( fileName in mFileNames ) {", "gt": "Log . i ( \" <STR_LIT> \" , fileName ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/405"}
{"input": "<s> fun closeOutputStream ( ) { try { zipOutputStream . close ( )", "gt": "} catch ( e : IOException ) { \n e . printStackTrace ( ) \n } \n \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/407"}
{"input": "<s> fun setRoundCorner ( radius : Int ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . LOLLIPOP ) {", "gt": "ViewStyleSetter . applyRoundCorner ( this , radius . toFloat ( ) ) \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/413"}
{"input": "<s> override fun onDraw ( canvas : Canvas ? ) {", "gt": "super . onDraw ( canvas ) \n if ( fixedAppcompatPadding ) useCompatPadding = true \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/420"}
{"input": "<s> fun setColors ( textColor : Int , accentColor : Int , backgroundColor : Int ) {", "gt": "setTextColor ( textColor ) \n setLinkTextColor ( accentColor ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/421"}
{"input": "<s> fun setCustomTabView ( layoutResId : Int , textViewId : Int ) {", "gt": "mTabViewLayoutId = layoutResId \n mTabViewTextViewId = textViewId \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/422"}
{"input": "<s> override fun onAttachedToWindow ( ) { super . onAttachedToWindow ( )", "gt": "if ( mViewPager ! = null ) { \n scrollToTab ( mViewPager ! ! . currentItem , 0 ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/424"}
{"input": "<s> override fun onClick ( v : View ) { for ( i in 0 until mTabStrip . getChildCount ( ) ) { if ( v = = = mTabStrip . getChildAt ( i ) ) {", "gt": "mViewPager ! ! . currentItem = i \n return \n } \n } \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/427"}
{"input": "<s> fun setSelectedIndicatorColors ( vararg colors : Int ) { mCustomTabColorizer = null", "gt": "mDefaultTabColorizer . setIndicatorColors ( * colors ) \n invalidate ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/429"}
{"input": "<s> fun setDividerColors ( vararg colors : Int ) { mCustomTabColorizer = null", "gt": "mDefaultTabColorizer . setDividerColors ( * colors ) \n invalidate ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/430"}
{"input": "<s> fun onViewPagerPageChanged ( position : Int , positionOffset : Float ) { mSelectedPosition = position", "gt": "mSelectionOffset = positionOffset \n invalidate ( ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/431"}
{"input": "<s> override fun onUpdate ( context : Context , appWidgetManager : AppWidgetManager , appWidgetIds : IntArray ) {", "gt": "super . onUpdate ( context , appWidgetManager , appWidgetIds ) \n performUpdate ( context ) \n }", "repo": "aaf-easydiary", "task_id": "aaf-easydiary/433"}
{"input": "<s> private fun initUser ( ) { viewModelScope . launch { environment . getUser ( )", "gt": ". collect { setState { copy ( user = it ) } } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/0"}
{"input": "<s> private fun initToDoTaskDiff ( ) { viewModelScope . launch { environment . listenToDoTaskDiff ( )", "gt": ". collect ( ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/1"}
{"input": "<s> @ Composable fun Host ( content : @ Composable ( ) - > Unit ) { val viewModel = hiltViewModel < HostViewModel > ( ) val state by viewModel . state . collectAsStateWithLifecycle ( )", "gt": "Theme ( theme = state . theme , content = content ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/2"}
{"input": "<s> private fun initTheme ( ) { viewModelScope . launch { environment . getTheme ( )", "gt": ". collect { setState { copy ( theme = it ) } } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/3"}
{"input": "<s> fun logout ( ) {", "gt": "credentialProvider . setCredential ( Credential ( token = \" \" ) ) \n userProvider . setUser ( User ( email = \" \" ) ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/15"}
{"input": "<s> override fun dispatch ( action : LogoutAction ) { when ( action ) {", "gt": "is LogoutAction . ClickLogout - > logout ( ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/16"}
{"input": "<s> private fun logout ( ) { viewModelScope . launch { environment . logout ( )", "gt": "setEffect ( LogoutEffect . NavigateToSplash ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/17"}
{"input": "<s> private fun initUser ( ) { viewModelScope . launch { environment . getUser ( )", "gt": ". collect { setState { copy ( user = it ) } } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/18"}
{"input": "<s> @ Composable private fun SettingItem ( onClick : ( ) - > Unit , title : String , ) { PgModalCell (", "gt": "onClick = onClick , \n text = title , \n color = MaterialTheme . colorScheme . surfaceVariant \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/19"}
{"input": "<s> override fun dispatch ( action : ThemeAction ) { when ( action ) {", "gt": "is ThemeAction . SelectTheme - > applyTheme ( action . selected ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/21"}
{"input": "<s> private fun applyTheme ( item : ThemeItem ) { viewModelScope . launch {", "gt": "environment . setTheme ( item . theme ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/23"}
{"input": "<s> < ToDoList > . toItemAllState ( ) : List < ItemAllState > { val data = mutableListOf < ItemAllState > ( ) forEach { data . add ( ItemAllState . List ( it ) )", "gt": "data . addAll ( it . tasks . toItemListAllState ( it ) ) \n } \n \n return data \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/26"}
{"input": "<s> override fun dispatch ( action : ListDetailAction ) { when ( action ) { is ListDetailAction . ListAction - > handleListAction ( action )", "gt": "is ListDetailAction . TaskAction - > handleTaskAction ( action ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/34"}
{"input": "<s> @ Composable fun UpdateGroupListScreen ( viewModel : UpdateGroupListViewModel , onSubmit : ( ) - > Unit , onSkip : ( ) - > Unit , ) { val state by viewModel . state . collectAsStateWithLifecycle ( ) UpdateGroupListScreen ( state = state , title = { PgModalTitle ( text = stringResource ( R . string . todo_update_group_list ) ) } , onItemChange = { viewModel . dispatch ( UpdateGroupListAction . Change ( it ) ) } , onSubmit = { viewModel . dispatch ( UpdateGroupListAction . Submit )", "gt": "onSubmit ( ) \n } , \n onSkip = onSkip \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/40"}
{"input": "<s> @ Composable fun GroupMenuScreen ( viewModel : GroupMenuViewModel , onAddRemoveClick : ( ) - > Unit , onDeleteClick : ( ) - > Unit , onRenameClick : ( ) - > Unit , ) { val state by viewModel . state . collectAsStateWithLifecycle ( ) GroupMenuScreen ( items = state . items , onAddRemoveClick = onAddRemoveClick , onDeleteClick = { onDeleteClick ( )", "gt": "viewModel . dispatch ( GroupMenuAction . ClickDelete ) \n } , \n onRenameClick = onRenameClick \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/43"}
{"input": "<s> @ Composable private fun GroupMenuItem ( onClick : ( ) - > Unit , title : String , imageVector : ImageVector , color : Color , enabled : Boolean ) { PgModalCell ( onClick = onClick , text = title , color = color , leftIcon = @ Composable { PgIcon ( imageVector = imageVector", "gt": ") \n } , \n enabled = enabled \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/44"}
{"input": "<s> @ Composable private fun ScheduledTodayCell ( modifier : Modifier , onClick : ( ) - > Unit , currentDate : String , scheduledTaskCount : String , isSelected : Boolean ) { OverallTaskCell ( modifier = modifier , taskCount = scheduledTaskCount , title = stringResource ( R . string . todo_today ) , iconText = currentDate , icon = Icons . Rounded . CalendarToday ,", "gt": "iconColor = ListRed , \n onClick = onClick , \n isSelected = isSelected \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/47"}
{"input": "<s> @ Composable private fun ScheduledCell ( modifier : Modifier , onClick : ( ) - > Unit , scheduledTaskCount : String , isSelected : Boolean ) { OverallTaskCell ( modifier = modifier , taskCount = scheduledTaskCount , title = stringResource ( R . string . todo_scheduled ) , icon = Icons . Rounded . Event ,", "gt": "iconColor = ListBlue , \n onClick = onClick , \n isSelected = isSelected \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/48"}
{"input": "<s> @ Composable private fun AllTaskCell ( modifier : Modifier , onClick : ( ) - > Unit , allTaskCount : String , isSelected : Boolean ) { OverallTaskCell ( modifier = modifier , taskCount = allTaskCount , title = stringResource ( R . string . todo_all ) , icon = Icons . Rounded . Inbox ,", "gt": "iconColor = CommonGrey , \n onClick = onClick , \n isSelected = isSelected \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/49"}
{"input": "<s> @ Preview @ Composable fun CellPreview ( ) { ListCell ( RectangleShape , \" <STR_LIT:Name> \" , \" <STR_LIT> \" , ListRed , true ,", "gt": "false , \n { } , \n { } \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/51"}
{"input": "<s> < ToDoGroup > . toItemGroup ( selectedItemState : SelectedItemState ) : List < ItemMainState > { val data = mutableListOf < ItemMainState > ( ) forEach { if ( it . id ! = ToDoGroupDb . DEFAULT_ID ) { data . add ( ItemMainState . ItemGroup ( it ) ) }", "gt": "data . addAll ( it . lists . toItemListMainState ( selectedItemState ) ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/54"}
{"input": "<s> @ Composable private fun ScheduledContent ( items : List < ItemScheduledState > , header : @ Composable ColumnScope . ( ) - > Unit , onTaskItemClick : ( ItemScheduledState . Task ) - > Unit , onTaskStatusItemClick : ( ToDoTask ) - > Unit , onTaskSwipeToDelete : ( ToDoTask ) - > Unit ) { PgPageLayout { header ( ) Box ( modifier = Modifier . fillMaxSize ( ) . weight ( <NUM_LIT> ) ) { TaskContent ( items , onTaskItemClick , onTaskStatusItemClick ,", "gt": "onTaskSwipeToDelete \n ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/57"}
{"input": "<s> @ Composable fun SearchContent ( items : List < ItemAllState > , onTaskItemClick : ( ItemAllState . Task ) - > Unit , onTaskStatusItemClick : ( ToDoTask ) - > Unit , onTaskSwipeToDelete : ( ToDoTask ) - > Unit ) { TaskContent ( items ,", "gt": "onTaskItemClick , \n onTaskStatusItemClick , \n onTaskSwipeToDelete \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/59"}
{"input": "<s> fun updateTaskNote ( note : String , taskId : String ) {", "gt": "val currentDate = dateTimeProvider . now ( ) \n toDoTaskProvider . updateTaskNote ( taskId , note , currentDate ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/63"}
{"input": "<s> @ Composable private fun StepTitle ( onClickBack : ( ) - > Unit ) { Box ( modifier = Modifier . height ( <NUM_LIT> p ) . fillMaxWidth ( ) ) { Box ( modifier = Modifier . padding ( start = <NUM_LIT> p ) . align ( Alignment . CenterStart ) ) { PgIconButton ( onClick = onClickBack , color = Color . Transparent ) {", "gt": "PgIcon ( imageVector = Icons . Rounded . ChevronLeft ) \n } \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/64"}
{"input": "<s> private fun handleStepItemAction ( action : StepAction . StepItemAction ) { when ( action ) { is StepAction . StepItemAction . Create - > handleStepItemCreateAction ( action )", "gt": "is StepAction . StepItemAction . Edit - > handleStepItemEditAction ( action ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/67"}
{"input": "<s> fun scheduleTaskAlarm ( task : ToDoTask , time : LocalDateTime ) { val receiverIntent = Intent ( context , TaskBroadcastReceiver : : class . java ) . apply { action = TaskBroadcastReceiver . ACTION_ALARM_SHOW putExtra ( TaskBroadcastReceiver . EXTRA_TASK_ID , task . id ) } val pendingIntent = PendingIntent . getBroadcast ( context , task . createdAt . toMillis ( ) . toInt ( ) , receiverIntent ,", "gt": "flags \n ) \n \n setAlarm ( time . toMillis ( ) , pendingIntent ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/70"}
{"input": "<s> fun cancelTaskAlarm ( task : ToDoTask ) { val receiverIntent = Intent ( context , TaskBroadcastReceiver : : class . java ) receiverIntent . action = TaskBroadcastReceiver . ACTION_ALARM_SHOW val pendingIntent = PendingIntent . getBroadcast ( context , task . createdAt . toMillis ( ) . toInt ( ) , receiverIntent ,", "gt": "flags \n ) \n \n cancelAlarm ( pendingIntent ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/71"}
{"input": "<s> private fun cancelAlarm ( operation : PendingIntent ? ) { if ( operation = = null ) {", "gt": "return \n } \n \n alarmManager ? . cancel ( operation ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/73"}
{"input": "<s> fun show ( task : ToDoTask , toDoList : ToDoList ) { val builder = buildNotification ( task , toDoList ) val id = task . createdAt . toMillis ( ) . toInt ( )", "gt": "notificationManager ? . notify ( \n id , \n builder . build ( ) \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/74"}
{"input": "<s> fun dismiss ( task : ToDoTask ) {", "gt": "val id = task . createdAt . toMillis ( ) . toInt ( ) \n notificationManager ? . cancel ( id ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/75"}
{"input": "<s> @ TypeConverter fun toDate ( date : Long ? ) : LocalDateTime ? { if ( date = = null ) return null", "gt": "return date . toLocalDateTime ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/84"}
{"input": "<s> @ TypeConverter fun toDateLong ( date : LocalDateTime ? ) : Long ? { if ( date = = null ) return null", "gt": "return date . toMillis ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/85"}
{"input": "<s> < ToDoListDb > . toGroupIdWithList ( ) : List < GroupIdWithList > { return map { list - > GroupIdWithList (", "gt": "groupId = list . groupId , \n list = list . toToDoList ( ) \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/86"}
{"input": "<s> < ToDoGroupWithList > . groupWithListToGroup ( ) : List < ToDoGroup > { return map {", "gt": "it . group . toGroup ( it . listWithTasks . toDoListWithTasksToToDoList ( ) ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/87"}
{"input": "<s> < ToDoGroup > . toGroupDp ( ) : List < ToDoGroupDb > { return map { ToDoGroupDb ( id = it . id , name = it . name ,", "gt": "createdAt = it . createdAt , \n updatedAt = it . updatedAt \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/89"}
{"input": "<s> < ToDoStepDb > . toStep ( ) : List < ToDoStep > { return map { step - > ToDoStep ( id = step . id , name = step . name , status = step . status ,", "gt": "createdAt = step . createdAt , \n updatedAt = step . updatedAt \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/92"}
{"input": "<s> fun getGroup ( ) : Flow < List < ToDoGroup > > { return toDoGroupReadDao . getGroup ( ) . filterNotNull ( )", "gt": ". map { it . toGroup ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/96"}
{"input": "<s> fun getGroup ( groupId : String ) : Flow < ToDoGroup > { return toDoGroupReadDao . getGroup ( groupId ) . filterNotNull ( )", "gt": ". map { it . toGroup ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/97"}
{"input": "<s> fun getGroupWithList ( ) : Flow < List < ToDoGroup > > { return toDoGroupReadDao . getGroupWithList ( ) . filterNotNull ( )", "gt": ". map { it . groupWithListToGroup ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/98"}
{"input": "<s> suspend fun ungroup ( groupId : String , updatedAt : LocalDateTime , listIds : List < String > ) { withContext ( dispatcher ) { toDoListWriteDao . updateListGroup ( listIds , ToDoGroupDb . DEFAULT_ID , updatedAt )", "gt": "toDoGroupWriteDao . deleteGroup ( groupId ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/100"}
{"input": "<s> suspend fun updateGroupName ( id : String , name : String , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoGroupWriteDao . updateGroupName ( id , name , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/101"}
{"input": "<s> suspend fun deleteGroup ( id : String ) { withContext ( dispatcher ) {", "gt": "toDoGroupWriteDao . deleteGroup ( id ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/102"}
{"input": "<s> fun getListWithTasks ( ) : Flow < List < ToDoList > > { return toDoListReadDao . getListWithTasks ( ) . filterNotNull ( )", "gt": ". map { it . toDoListWithTasksToToDoList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/103"}
{"input": "<s> fun getList ( ) : Flow < List < ToDoList > > { return toDoListReadDao . getList ( ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/104"}
{"input": "<s> fun getListById ( listId : String ) : Flow < ToDoList > { return toDoListReadDao . getListById ( listId ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/105"}
{"input": "<s> fun getListByGroupId ( groupId : String ) : Flow < List < ToDoList > > { return toDoListReadDao . getListByGroupId ( groupId ) . filterNotNull ( )", "gt": ". map { it . toToDoList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/106"}
{"input": "<s> fun getListWithTasksById ( listId : String ) : Flow < ToDoList > { return toDoListReadDao . getListWithTasksById ( listId )", "gt": ". map { it . toToDoList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/107"}
{"input": "<s> fun getListWithUnGroupList ( groupId : String ) : Flow < List < GroupIdWithList > > { return toDoListReadDao . getListWithUnGroupList ( groupId ) . filterNotNull ( )", "gt": ". map { it . toGroupIdWithList ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/108"}
{"input": "<s> suspend fun deleteListById ( listId : String ) { withContext ( dispatcher ) {", "gt": "toDoListWriteDao . deleteListById ( listId ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/110"}
{"input": "<s> suspend fun updateListNameAndColor ( toDoList : ToDoList , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoListWriteDao . updateListNameAndColor ( toDoList . id , toDoList . name , toDoList . color , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/112"}
{"input": "<s> suspend fun updateStepStatus ( id : String , status : ToDoStatus , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoStepWriteDao . updateStepStatus ( id , status , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/114"}
{"input": "<s> suspend fun updateStepName ( id : String , name : String , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoStepWriteDao . updateStepName ( id , name , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/115"}
{"input": "<s> suspend fun deleteStepById ( id : String ) { withContext ( dispatcher ) {", "gt": "toDoStepWriteDao . deleteStepById ( id ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/116"}
{"input": "<s> fun getOverallCount ( date : LocalDateTime ) : Flow < ToDoTaskOverallCount > {", "gt": "return toDoTaskReadDao . getTaskOverallCount ( date ) \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/117"}
{"input": "<s> fun getTaskWithStepsById ( taskId : String ) : Flow < ToDoTask > { return toDoTaskReadDao . getTaskWithStepsById ( taskId ) . filterNotNull ( )", "gt": ". map { it . toTask ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/120"}
{"input": "<s> fun getTaskWithListById ( taskId : String ) : Flow < TaskWithList > { return toDoTaskReadDao . getTaskWithListById ( taskId ) . filterNotNull ( )", "gt": ". map { TaskWithList ( it . list . toToDoList ( ) , it . task . toTask ( ) ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/121"}
{"input": "<s> fun getScheduledTasks ( ) : Flow < List < ToDoTask > > { return toDoTaskReadDao . getScheduledTasks ( )", "gt": ". map { it . toTask ( ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/123"}
{"input": "<s> suspend fun updateTaskDueDate ( id : String , dueDateTime : LocalDateTime ? , isDueDateTimeSet : Boolean , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . updateTaskDueDate ( id , dueDateTime , isDueDateTimeSet , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/125"}
{"input": "<s> suspend fun resetTaskDueDate ( id : String , updatedAt : LocalDateTime ) { withContext ( dispatcher ) { toDoTaskWriteDao . resetTaskDueDate ( id , null , false ,", "gt": "ToDoRepeat . NEVER , \n updatedAt \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/126"}
{"input": "<s> suspend fun updateTaskRepeat ( id : String , repeat : ToDoRepeat , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . updateTaskRepeat ( id , repeat , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/127"}
{"input": "<s> suspend fun updateTaskStatus ( id : String , status : ToDoStatus , completedAt : LocalDateTime ? , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . updateTaskStatus ( id , status , completedAt , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/128"}
{"input": "<s> suspend fun updateTaskNote ( id : String , note : String , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . updateTaskNote ( id , note , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/129"}
{"input": "<s> suspend fun updateTaskName ( id : String , name : String , updatedAt : LocalDateTime ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . updateTaskName ( id , name , updatedAt ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/130"}
{"input": "<s> suspend fun deleteTaskById ( id : String ) { withContext ( dispatcher ) {", "gt": "toDoTaskWriteDao . deleteTaskById ( id ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/131"}
{"input": "<s> fun getInstance ( context : Context ) : ToDoDatabase { return INSTANCE ? : synchronized ( this ) {", "gt": "INSTANCE ? : buildDatabase ( context ) . also { INSTANCE = it } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/132"}
{"input": "<s> fun getCredential ( ) : Flow < Credential > { return credentialDataStore . data . map { Credential ( it . token ) }", "gt": ". catch { emit ( Credential ( token = \" \" ) ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/138"}
{"input": "<s> suspend fun setCredential ( data : Credential ) { withContext ( dispatcher ) {", "gt": "credentialDataStore . updateData { \n CredentialPreference ( data . token ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/139"}
{"input": "<s> fun getLanguage ( ) : Flow < Language > { return languageDataStore . data . map { it . toLanguage ( ) }", "gt": ". catch { emit ( Language . ENGLISH ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/140"}
{"input": "<s> suspend fun setLanguage ( data : Language ) { withContext ( dispatcher ) {", "gt": "languageDataStore . updateData { \n data . toLanguagePreference ( ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/141"}
{"input": "<s> fun getTheme ( ) : Flow < Theme > { return themeDataStore . data . map { it . toTheme ( ) }", "gt": ". catch { emit ( Theme . SYSTEM ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/142"}
{"input": "<s> suspend fun setTheme ( data : Theme ) { withContext ( dispatcher ) {", "gt": "themeDataStore . updateData { \n data . toThemePreference ( ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/143"}
{"input": "<s> fun getUser ( ) : Flow < User > { return userDataStore . data . map { User ( it . email ) }", "gt": ". catch { emit ( User ( email = \" \" ) ) } \n . flowOn ( dispatcher ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/144"}
{"input": "<s> suspend fun setUser ( data : User ) { withContext ( dispatcher ) {", "gt": "userDataStore . updateData { \n UserPreference ( data . email ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/145"}
{"input": "<s> @ Singleton @ Provides fun provideToDoGroupWriteDao ( @ ApplicationContext context : Context ) : ToDoGroupWriteDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoGroupWriteDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/150"}
{"input": "<s> @ Singleton @ Provides fun provideToDoListWriteDao ( @ ApplicationContext context : Context ) : ToDoListWriteDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoListWriteDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/151"}
{"input": "<s> @ Singleton @ Provides fun provideToDoTaskWriteDao ( @ ApplicationContext context : Context ) : ToDoTaskWriteDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoTaskWriteDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/152"}
{"input": "<s> @ Singleton @ Provides fun provideToDoStepWriteDao ( @ ApplicationContext context : Context ) : ToDoStepWriteDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoStepWriteDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/153"}
{"input": "<s> @ Singleton @ Provides fun provideToDoGroupReadDao ( @ ApplicationContext context : Context ) : ToDoGroupReadDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoGroupReadDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/154"}
{"input": "<s> @ Singleton @ Provides fun provideToDoListReadDao ( @ ApplicationContext context : Context ) : ToDoListReadDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoListReadDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/155"}
{"input": "<s> @ Singleton @ Provides fun provideToDoTaskReadDao ( @ ApplicationContext context : Context ) : ToDoTaskReadDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoTaskReadDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/156"}
{"input": "<s> @ Singleton @ Provides fun provideToDoStepReadDao ( @ ApplicationContext context : Context ) : ToDoStepReadDao {", "gt": "return ToDoDatabase . getInstance ( context ) \n . toDoStepReadDao ( ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/157"}
{"input": "<s> < T > . joinTo ( buffer : A , separator : ( Int ) - > CharSequence ) : A { val limit = - 1 var count = 0 for ( element in this ) { if ( + + count > 1 ) buffer . append ( separator ( count - 1 ) ) if ( limit < 0 | | count < = limit ) {", "gt": "buffer . append ( element . toString ( ) ) \n } else break \n } \n return buffer \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/158"}
{"input": "<s> private fun resolveName ( name : String , names : Flow < List < String > > , updateNameWithNewName : OnResolveDuplicateName , ) : Flow < Any > { return names . map { name . resolveDuplicate ( it ) } </s", "gt": "private fun resolveName ( name : String , names : Flow < List < String > > , updateNameWithNewName : OnResolveDuplicateName , ) : Flow < Any > { return names . map { name . resolveDuplicate ( it ) }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/164"}
{"input": "<s> fun < T > debounce ( waitMs : Long = <NUM_LIT> , coroutineScope : CoroutineScope , destinationFunction : ( T ) - > Unit ) : ( T ) - > Unit { var debounceJob : Job ? = null return { param : T - > debounceJob ? . cancel ( ) debounceJob = coroutineScope . launch {", "gt": "delay ( waitMs ) \n destinationFunction ( param ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/167"}
{"input": "<s> fun String . ellipsisAt ( n : Int ) : String { require ( n > = 0 ) { \" <STR_LIT> \" } </s", "gt": "fun String . ellipsisAt ( n : Int ) : String { require ( n > = 0 ) { \" <STR_LIT> \" }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/173"}
{"input": "<s> private fun getOverridingConfig ( locale : Locale , resources : Resources ) : Configuration { val configuration = resources . configuration if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) { configuration . setLocales ( LocaleList ( locale ) )", "gt": "} else { \n configuration . locale = locale \n } \n return configuration \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/179"}
{"input": "<s> private fun getLocale ( configuration : Configuration ) : Locale { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) {", "gt": "configuration . locales . get ( 0 ) \n } else { \n configuration . locale \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/180"}
{"input": "<s> private fun < T > build ( much : Int , obj : ( Int ) - > T ) : List < T > { val list = mutableListOf < T > ( )", "gt": "for ( i in 0 until much ) { \n list . add ( obj ( i ) ) \n } \n return list \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/188"}
{"input": "<s> @ Composable fun NavPg ( ) { val navController = rememberNavController ( ) NavHost ( navController = navController , startDestination = \" <STR_LIT> \" ) {", "gt": "composable ( route = \" <STR_LIT> \" ) { \n View1 ( navController = navController ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/189"}
{"input": "<s> @ Composable fun View3 ( navController : NavController ) { Column ( modifier = Modifier . fillMaxSize ( ) ) { Text ( \" <STR_LIT> \" ) Button ( { }", "gt": ") { \n Text ( \" <STR_LIT> \" ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/190"}
{"input": "<s> @ Composable fun View4 ( navController : NavController , vm2 : Vm2 ) { Column ( modifier = Modifier . fillMaxSize ( ) . padding ( <NUM_LIT> p ) ) { val state = vm2 . data1 . state . collectAsStateWithLifecycle ( ) Text ( \" <STR_LIT> \" ) Button ( { navController . navigate ( \" <STR_LIT> \" ) } ) { Text ( \" <STR_LIT> \" ) } Button ( { vm2 . inc ( ) }", "gt": ") { \n Text ( \" <STR_LIT> \" ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/191"}
{"input": "<s> @ Composable fun View5 ( navController : NavController , vm2 : Vm2 ) { val state = vm2 . data1 . state . collectAsStateWithLifecycle ( ) Text ( \" <STR_LIT> \" ) Button ( { vm2 . inc ( )", "gt": "} \n ) { \n Text ( \" <STR_LIT> \" ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/192"}
{"input": "<s> fun inc ( ) { viewModelScope . launch {", "gt": "data1 . inc ( ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/193"}
{"input": "<s> fun inc ( ) { viewModelScope . launch {", "gt": "data1 . inc ( ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/194"}
{"input": "<s> @ Composable fun PgModalBackButton ( onClick : ( ) - > Unit , imageVector : ImageVector = Icons . Rounded . ChevronLeft ) { PgIconButton ( onClick = onClick , modifier = Modifier . size ( <NUM_LIT> p ) , color = MaterialTheme . colorScheme . surfaceVariant ) {", "gt": "PgIcon ( \n imageVector = imageVector , \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/195"}
{"input": "<s> @ Composable fun PgIconButton ( onClick : ( ) - > Unit , modifier : Modifier = Modifier , enabled : Boolean = true , color : Color = MaterialTheme . colorScheme . secondary , content : @ Composable ( ) - > Unit ) { val shape = CircleShape IconButton ( onClick = onClick , modifier = modifier . background ( color = color , shape = shape ) . clip ( shape ) ,", "gt": "enabled = enabled \n ) { \n content ( ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/196"}
{"input": "<s> @ Composable fun PgSecondaryButton ( onClick : ( ) - > Unit , modifier : Modifier = Modifier , content : @ Composable RowScope . ( ) - > Unit ) { OutlinedButton ( modifier = modifier . height ( <NUM_LIT> p ) ,", "gt": "onClick = onClick , \n shape = MaterialTheme . shapes . medium , \n content = content \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/198"}
{"input": "<s> @ Composable fun PgModalBackHeader ( text : String , onClickBack : ( ) - > Unit , modifier : Modifier = Modifier ) { Row ( modifier = modifier ) { Box ( modifier = Modifier . padding ( start = <NUM_LIT> p ) . weight ( <NUM_LIT> ) ) { PgModalBackButton ( onClick = onClickBack ) } PgModalTitle ( text = text , modifier = Modifier . weight ( <NUM_LIT> ) ) Spacer ( Modifier", "gt": ". size ( <NUM_LIT> p ) \n . weight ( <NUM_LIT> ) \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/202"}
{"input": "<s> @ Composable fun PgIcon ( modifier : Modifier = Modifier , imageVector : ImageVector , tint : Color = LocalContentColor . current , ) { Icon ( imageVector = imageVector ,", "gt": "contentDescription = \" \" , \n tint = tint , \n modifier = modifier \n ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/203"}
{"input": "<s> @ Composable fun PgModalLayout ( title : @ Composable ( ) - > Unit , modifier : Modifier = Modifier , content : LazyListScope . ( ) - > Unit ) { PgModalLazyColumn ( modifier ) { item { Spacer ( Modifier . height ( <NUM_LIT> p ) ) title ( ) Spacer ( Modifier . height ( <NUM_LIT> p ) ) } content ( )", "gt": "item { \n Spacer ( Modifier . height ( <NUM_LIT> p ) ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/205"}
{"input": "<s> @ Composable fun PgModalLazyColumn ( modifier : Modifier = Modifier , shape : Shape = RectangleShape , content : LazyListScope . ( ) - > Unit ) { Box ( modifier = Modifier . background ( color = MaterialTheme . colorScheme . background , shape = shape ) ) { LazyColumn ( modifier = modifier . navigationBarsPadding ( )", "gt": ". imePadding ( ) , \n content = content \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/206"}
{"input": "<s> @ Composable fun PgModalRow ( modifier : Modifier = Modifier , horizontalArrangement : Arrangement . Horizontal = Arrangement . Start , verticalAlignment : Alignment . Vertical = Alignment . Top , content : @ Composable RowScope . ( ) - > Unit ) { Box ( modifier = Modifier . background ( color = MaterialTheme . colorScheme . background ) ) { Row ( modifier = modifier . navigationBarsPadding ( ) . imePadding ( ) , horizontalArrangement = horizontalArrangement ,", "gt": "verticalAlignment = verticalAlignment , \n content = content \n ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/207"}
{"input": "<s> @ Composable fun rememberSwipeSearchState ( initialValue : SwipeSearchValue ) : SwipeSearchState { return remember {", "gt": "SwipeSearchState ( initialValue ) \n } . apply { \n this . currentValue = initialValue \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/208"}
{"input": "<s> fun animateOffsetTo ( offset : Float ) { mutatorMutex . mutate {", "gt": "offsetState . animateTo ( offset ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/209"}
{"input": "<s> fun dispatchScrollDelta ( delta : Float , max : Float ) { mutatorMutex . mutate ( MutatePriority . UserInput ) {", "gt": "offsetState . snapTo ( ( offsetState . value + delta ) . coerceAtMost ( max ) ) \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/210"}
{"input": "<s> @ Composable @ ReadOnlyComposable fun boolResource ( @ BoolRes id : Int ) : Boolean {", "gt": "val resources = resources ( ) \n return resources . getBoolean ( id ) \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/219"}
{"input": "<s> @ Composable @ ReadOnlyComposable private fun resources ( ) : Resources {", "gt": "LocalConfiguration . current \n return LocalContext . current . resources \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/220"}
{"input": "<s> @ Composable @ ExperimentalMaterialApi private fun rememberModalBottomSheetStateInternal ( initialValue : ModalBottomSheetValue , animationSpec : AnimationSpec < Float > = SwipeableDefaults . AnimationSpec , confirmStateChange : ( ModalBottomSheetValue ) - > Boolean = { true } ) : ModalBottomSheetState = rememberModalBottomSheetState ( initialValue = initialValue , animationSpec = animationSpec ,", "gt": "skipHalfExpanded = true , \n confirmValueChange = confirmStateChange , \n )", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/222"}
{"input": "<s> @ Composable fun < STATE , EFFECT , ACTION , ENVIRONMENT > HandleEffect ( viewModel : StatefulViewModel < STATE , EFFECT , ACTION , ENVIRONMENT > , handle : suspend CoroutineScope . ( EFFECT ) - > Unit ) { val effect by viewModel . effect . collectAsStateWithLifecycle ( ) LaunchedEffect ( effect ) { effect ? . let {", "gt": "handle ( it ) \n viewModel . resetEffect ( ) \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/226"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { setTheme ( R . style . Theme_ComposeToDoList_Light ) super . onCreate ( savedInstanceState ) WindowCompat . setDecorFitsSystemWindows ( window , false ) setContent { windowState = rememberWindowState ( ) Host { Surface {", "gt": "MainNavHost ( windowState ) \n } \n } \n } \n }", "repo": "Compose-ToDo", "task_id": "Compose-ToDo/236"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ; \n getWindow ( ) . addFlags ( WindowManager . LayoutParams . FLAG_SECURE ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/1"}
{"input": "<s> @ Override public boolean onSupportNavigateUp ( ) {", "gt": "onBackPressed ( ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/2"}
{"input": "<s> @ Override public void run ( ) { if ( dialog . isShowing ( ) ) {", "gt": "dialog . dismiss ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/11"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( )", "gt": "_binding = null \n _dialogEditTag = null \n }", "repo": "simplenote-android", "task_id": "simplenote-android/12"}
{"input": "<s> override fun onShow ( dialog : DialogInterface ? ) {", "gt": "setupViews ( ) \n setObservers ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/13"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { ThemeUtils . setTheme ( this ) super . onCreate ( savedInstanceState ) val binding : ActivityTagAddBinding = ActivityTagAddBinding . inflate ( layoutInflater ) binding . setObservers ( ) binding . setupLayout ( ) binding . setupViews ( )", "gt": "viewModel . start ( ) \n \n setContentView ( binding . root ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/14"}
{"input": "<s> public static void registerTracker ( Tracker tracker ) { if ( tracker ! = null ) {", "gt": "TRACKERS . add ( tracker ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/16"}
{"input": "<s> public static void track ( Stat stat , String category , String label ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . track ( stat , category , label , null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/17"}
{"input": "<s> public static void track ( Stat stat , String category , String label , Map < String , ? > properties ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . track ( stat , category , label , properties ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/18"}
{"input": "<s> public static void refreshMetadata ( String username ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . refreshMetadata ( username ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/19"}
{"input": "<s> public static void flush ( ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . flush ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/20"}
{"input": "<s> public static void track ( Stat stat ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . track ( stat , null , null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/21"}
{"input": "<s> public static void track ( Stat stat , Map < String , ? > properties ) { if ( ! Simplenote . analyticsIsEnabled ( ) ) { return ;", "gt": "} \n for ( Tracker tracker : TRACKERS ) { \n tracker . track ( stat , null , null , properties ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/22"}
{"input": "<s> private String generateNewAnonID ( ) { String uuid = UUID . randomUUID ( ) . toString ( ) ; SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; final SharedPreferences . Editor editor = preferences . edit ( ) ;", "gt": "editor . putString ( TRACKS_ANON_ID , uuid ) ; \n editor . apply ( ) ; \n mAnonID = uuid ; \n return uuid ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/25"}
{"input": "<s> @ Override public void refreshMetadata ( String username ) { if ( mNosaraClient = = null ) { return ; } if ( ! TextUtils . isEmpty ( username ) ) { mUserName = username ; if ( getAnonID ( ) ! = null ) { mNosaraClient . trackAliasUser ( mUserName , getAnonID ( ) , TracksClient . NosaraUserType . SIMPLENOTE ) ; clearAnonID ( ) ; } } else { mUserName = null ;", "gt": "if ( getAnonID ( ) = = null ) { \n generateNewAnonID ( ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/26"}
{"input": "<s> @ Override public void flush ( ) { if ( mNosaraClient = = null ) { return ;", "gt": "} \n mNosaraClient . flush ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/27"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_confirmation , container , false ) ;", "gt": "initUi ( view ) ; \n return view ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/29"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_signup , container , false ) ;", "gt": "initUi ( view ) ; \n return view ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/34"}
{"input": "<s> private void initUi ( View view ) {", "gt": "initFooter ( ( TextView ) view . findViewById ( com . simperium . R . id . text_footer ) ) ; \n initSignupButton ( view ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/35"}
{"input": "<s> private void listenToEmailChanges ( EditText emailEditText , final Button signupButton ) { emailEditText . addTextChangedListener ( new TextWatcher ( ) { @ Override public void afterTextChanged ( Editable s ) { setButtonState ( signupButton , s ) ; } @ Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { }", "gt": "@ Override \n public void onTextChanged ( CharSequence s , int start , int before , int count ) { \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/37"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( NetworkUtils . isNetworkAvailable ( requireContext ( ) ) ) { showProgressDialog ( ) ; signupUser ( emailEditText . getText ( ) . toString ( ) ) ; } else {", "gt": "showDialogError ( getString ( R . string . simperium_dialog_message_network ) ) ; \n } \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/38"}
{"input": "<s> private void hideDialogProgress ( ) { if ( progressDialogFragment ! = null & & ! progressDialogFragment . isHidden ( ) ) { progressDialogFragment . dismiss ( ) ;", "gt": "progressDialogFragment = null ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/41"}
{"input": "<s> @ Override public void onFailure ( @ NonNull Call call , @ NonNull final IOException error ) { Activity activity = getActivity ( ) ; if ( activity ! = null ) { activity . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { showDialogError ( getString ( R . string . dialog_message_signup_error ) ) ; AppLog . add ( AppLog . Type . ACCOUNT , \" <STR_LIT> \" + error . getMessage ( ) ) ;", "gt": "Logger . log ( error . getMessage ( ) , error ) ; \n } \n } ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/44"}
{"input": "<s> @ Override public void run ( ) { showDialogError ( getString ( R . string . dialog_message_signup_error ) ) ;", "gt": "AppLog . add ( AppLog . Type . ACCOUNT , \" <STR_LIT> \" + error . getMessage ( ) ) ; \n Logger . log ( error . getMessage ( ) , error ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/45"}
{"input": "<s> @ Override public void onResponse ( @ NonNull Call call , @ NonNull Response response ) { Activity activity = getActivity ( ) ; if ( activity ! = null ) { activity . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { hideDialogProgress ( ) ; DisplayUtils . hideKeyboard ( getView ( ) ) ;", "gt": "showConfirmationScreen ( email ) ; \n } \n } ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/46"}
{"input": "<s> @ Override public void run ( ) { hideDialogProgress ( ) ;", "gt": "DisplayUtils . hideKeyboard ( getView ( ) ) ; \n showConfirmationScreen ( email ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/47"}
{"input": "<s> @ Override public void onLoginSheetEmailClicked ( ) { Intent intent = new Intent ( SimplenoteAuthenticationActivity . this , SimplenoteCredentialsActivity . class ) ; intent . putExtra ( EXTRA_IS_LOGIN , true ) ;", "gt": "startActivity ( intent ) ; \n finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/52"}
{"input": "<s> @ Override protected void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "outState . putString ( STATE_AUTH_STATE , mAuthState ) ; \n super . onSaveInstanceState ( outState ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/53"}
{"input": "<s> @ Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onRestoreInstanceState ( savedInstanceState ) ; if ( savedInstanceState . containsKey ( STATE_AUTH_STATE ) ) {", "gt": "mAuthState = savedInstanceState . getString ( STATE_AUTH_STATE ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/54"}
{"input": "<s> @ Override public void onBackPressed ( ) {", "gt": "startActivity ( new Intent ( SimplenoteCredentialsActivity . this , SimplenoteAuthenticationActivity . class ) ) ; \n finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/56"}
{"input": "<s> @ Override protected void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_signup ) ;", "gt": "initContainer ( ) ; \n initToolbar ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/57"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { onBackPressed ( ) ;", "gt": "return true ; \n } else { \n return super . onOptionsItemSelected ( item ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/60"}
{"input": "<s> override fun onCancel ( dialog : DialogInterface ) {", "gt": "super . onCancel ( dialog ) \n AnalyticsTracker . track ( AnalyticsTracker . Stat . IAP_PLANS_DIALOG_DISMISSED ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/61"}
{"input": "<s> override fun onBindViewHolder ( holder : PlanListItemViewHolder , position : Int ) {", "gt": "val uiState = getItem ( position ) \n holder . onBind ( uiState ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/62"}
{"input": "<s> @ NonNull @ Override public Dialog onCreateDialog ( Bundle savedInstanceState ) {", "gt": "setRetainInstance ( true ) ; \n return new BottomSheetDialog ( requireContext ( ) , getTheme ( ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/64"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) val noteId = intent . getStringExtra ( NOTE_ID_ARG ) if ( noteId = = null ) { finish ( ) return } with ( ActivityCollaboratorsBinding . inflate ( layoutInflater ) ) { setContentView ( root ) setupViews ( )", "gt": "setObservers ( ) \n \n viewModel . loadCollaborators ( noteId ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/65"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "viewModel . startListeningChanges ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/67"}
{"input": "<s> override fun onPause ( ) { super . onPause ( )", "gt": "viewModel . stopListeningChanges ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/68"}
{"input": "<s> private fun ActivityCollaboratorsBinding . handleEmptyCollaborators ( ) {", "gt": "showEmptyView ( ) \n ( collaboratorsList . adapter as CollaboratorsAdapter ) . submitList ( emptyList ( ) ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/71"}
{"input": "<s> private fun ActivityCollaboratorsBinding . hideEmptyView ( ) { empty . image . visibility = View . GONE", "gt": "empty . title . visibility = View . GONE \n empty . message . visibility = View . GONE \n }", "repo": "simplenote-android", "task_id": "simplenote-android/72"}
{"input": "<s> private fun ActivityCollaboratorsBinding . showEmptyView ( ) { empty . image . visibility = View . VISIBLE", "gt": "empty . title . visibility = View . VISIBLE \n empty . message . visibility = View . VISIBLE \n }", "repo": "simplenote-android", "task_id": "simplenote-android/73"}
{"input": "<s> private fun navigateToNotesList ( ) { val intent = Intent ( applicationContext , NotesActivity : : class . java )", "gt": "intent . flags = Intent . FLAG_ACTIVITY_CLEAR_TOP \n startActivity ( intent ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/76"}
{"input": "<s> @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { initBuilderArguments ( ) ; if ( mHideActivityBar ) { hideActivityBar ( ) ; } ViewGroup view = ( ViewGroup ) inflater . inflate ( R . layout . fragment_full_screen_dialog , container , false ) ; initToolbar ( view ) ;", "gt": "setThemeBackground ( view ) ; \n view . setFocusableInTouchMode ( true ) ; \n view . requestFocus ( ) ; \n return view ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/81"}
{"input": "<s> @ Override public void dismiss ( ) { if ( isStateSaved ( ) ) { return ; } if ( mOnDismissListener ! = null ) { mOnDismissListener . onDismiss ( ) ; }", "gt": "if ( mHideActivityBar ) { \n showActivityBar ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/82"}
{"input": "<s> protected void confirm ( Bundle result ) { if ( mOnConfirmListener ! = null ) { mOnConfirmListener . onConfirm ( result ) ;", "gt": "} \n dismiss ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/84"}
{"input": "<s> public void hideActivityBar ( ) { FragmentActivity activity = getActivity ( ) ; if ( activity instanceof AppCompatActivity ) { ActionBar actionBar = ( ( AppCompatActivity ) activity ) . getSupportActionBar ( ) ;", "gt": "if ( actionBar ! = null & & actionBar . isShowing ( ) ) { \n actionBar . hide ( ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/85"}
{"input": "<s> @ Override public boolean onMenuItemClick ( MenuItem item ) { if ( item . getItemId ( ) = = ID_ACTION ) { onConfirmClicked ( ) ;", "gt": "return true ; \n } else { \n return false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/87"}
{"input": "<s> public void onBackPressed ( ) { if ( isAdded ( ) ) {", "gt": "onDismissClicked ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/88"}
{"input": "<s> protected void onConfirmClicked ( ) { boolean isConsumed = ( ( FullScreenDialogContent ) mFragment ) . onConfirmClicked ( mController ) ; if ( ! isConsumed ) {", "gt": "mController . confirm ( null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/89"}
{"input": "<s> protected void onDismissClicked ( ) { boolean isConsumed = ( ( FullScreenDialogContent ) mFragment ) . onDismissClicked ( mController ) ; if ( ! isConsumed ) {", "gt": "mController . dismiss ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/90"}
{"input": "<s> public void setSubtitle ( @ NonNull String text ) {", "gt": "mSubtitle = text ; \n mToolbar . setSubtitle ( mSubtitle ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/91"}
{"input": "<s> public void setSubtitle ( @ StringRes int textId ) {", "gt": "mSubtitle = requireContext ( ) . getString ( textId ) ; \n mToolbar . setSubtitle ( mSubtitle ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/92"}
{"input": "<s> public void showActivityBar ( ) { FragmentActivity activity = getActivity ( ) ; if ( activity instanceof AppCompatActivity ) { ActionBar actionBar = ( ( AppCompatActivity ) activity ) . getSupportActionBar ( ) ;", "gt": "if ( actionBar ! = null & & ! actionBar . isShowing ( ) ) { \n actionBar . show ( ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/93"}
{"input": "<s> public Builder setAction ( @ NonNull String text ) {", "gt": "mAction = text ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/94"}
{"input": "<s> public Builder setContent ( Class < ? extends Fragment > contentClass , @ Nullable Bundle contentArguments ) { if ( ! FullScreenDialogContent . class . isAssignableFrom ( contentClass ) ) { throw new IllegalArgumentException ( \" <STR_LIT> \" ) ;", "gt": "} \n mClass = contentClass ; \n mArguments = contentArguments ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/95"}
{"input": "<s> public Builder setHideActivityBar ( boolean hide ) {", "gt": "mHideActivityBar = hide ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/96"}
{"input": "<s> public Builder setSubtitle ( @ NonNull String text ) {", "gt": "mSubtitle = text ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/97"}
{"input": "<s> public Builder setSubtitle ( @ StringRes int textId ) {", "gt": "mSubtitle = mContext . getString ( textId ) ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/98"}
{"input": "<s> public Builder setTitle ( @ NonNull String text ) {", "gt": "mTitle = text ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/99"}
{"input": "<s> public Builder setTitle ( @ StringRes int textId ) {", "gt": "mTitle = mContext . getString ( textId ) ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/100"}
{"input": "<s> public Builder setToolbarElevation ( float elevation ) {", "gt": "mElevation = elevation ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/101"}
{"input": "<s> public Builder setToolbarElevation ( @ DimenRes int dimension ) { if ( dimension = = 0 ) { return setToolbarElevation ( Float . valueOf ( dimension ) ) ;", "gt": "} else { \n mElevation = mContext . getResources ( ) . getDimension ( dimension ) ; \n return this ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/102"}
{"input": "<s> public Builder setOnConfirmListener ( @ Nullable OnConfirmListener listener ) {", "gt": "mOnConfirmListener = listener ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/103"}
{"input": "<s> public Builder setOnDismissListener ( @ Nullable OnDismissListener listener ) {", "gt": "mOnDismissListener = listener ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/104"}
{"input": "<s> public Builder setViewContainer ( @ IdRes int container ) {", "gt": "mContainer = container ; \n return this ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/105"}
{"input": "<s> @ Override public void onComplete ( Map < Integer , Note > revisionsMap ) { if ( ! mFragment . isAdded ( ) | | mNote = = null ) { return ; } mNoteRevisionsList = new ArrayList < > ( revisionsMap . values ( ) ) ; mFragment . requireActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n updateProgressBar ( ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/106"}
{"input": "<s> @ Override public void onError ( Throwable exception ) { if ( ! mFragment . isAdded ( ) | | getDialog ( ) ! = null & & ! getDialog ( ) . isShowing ( ) ) { return ; } mFragment . requireActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) {", "gt": "mProgressBar . setVisibility ( View . GONE ) ; \n mErrorText . setVisibility ( View . VISIBLE ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/107"}
{"input": "<s> @ Override public void run ( ) {", "gt": "mProgressBar . setVisibility ( View . GONE ) ; \n mErrorText . setVisibility ( View . VISIBLE ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/108"}
{"input": "<s> @ Override public void onClick ( View v ) {", "gt": "mDidTapButton = true ; \n mListener . onHistoryCancelClicked ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/109"}
{"input": "<s> @ Override public void onClick ( View v ) {", "gt": "mDidTapButton = true ; \n mListener . onHistoryRestoreClicked ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/110"}
{"input": "<s> @ Override public void onDismiss ( DialogInterface dialog ) {", "gt": "mListener . onHistoryDismissed ( ) ; \n mNote = null ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/111"}
{"input": "<s> public void show ( FragmentManager manager , Note note ) { if ( mFragment . isAdded ( ) ) { showNow ( manager , TAG ) ;", "gt": "mNote = note ; \n mDidTapButton = false ; \n setProgressBar ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/113"}
{"input": "<s> public void updateProgressBar ( ) { if ( getDialog ( ) ! = null & & getDialog ( ) . isShowing ( ) ) {", "gt": "setProgressBar ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/114"}
{"input": "<s> private void dispatchFileImport ( String fileType , String content ) throws ImportException { switch ( fileType ) { case \" <STR_LIT> \" : importJsonFile ( content ) ; break ; case \" <STR_LIT> \" : importMarkdown ( content ) ; break ; case \" <STR_LIT> \" : importPlaintext ( content ) ;", "gt": "break ; \n default : \n throw new ImportException ( FailureReason . UnknownExportType ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/116"}
{"input": "<s> private void importMarkdown ( String content ) { Note note = Note . fromContent ( mNotesBucket , content ) ;", "gt": "note . enableMarkdown ( ) ; \n addNote ( note ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/117"}
{"input": "<s> private void addNote ( Note note ) { for ( String tagName : note . getTags ( ) ) { try { TagUtils . createTagIfMissing ( mTagsBucket , tagName ) ; } catch ( BucketObjectNameInvalid e ) {", "gt": "note . removeTag ( tagName ) ; \n } \n } \n note . save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/118"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) public static String dateString ( Number time , boolean useShortFormat , Context context ) {", "gt": "Calendar c = numberToDate ( time ) ; \n return dateString ( c , useShortFormat , context ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/123"}
{"input": "<s> private static int getReferenceCount ( String key , String content ) { Pattern pattern = Pattern . compile ( SIMPLENOTE_LINK_PREFIX + key ) ; Matcher matcher = pattern . matcher ( content ) ; int count = 0 ;", "gt": "while ( matcher . find ( ) ) { \n count + + ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/124"}
{"input": "<s> public String getTitle ( ) { if ( mTitle = = null ) { updateTitleAndPreview ( ) ;", "gt": "} \n return mTitle ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/127"}
{"input": "<s> public String getContent ( ) { Object content = getProperty ( CONTENT_PROPERTY ) ;", "gt": "if ( content = = null ) { \n return BLANK_CONTENT ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/128"}
{"input": "<s> public void setContent ( String content ) { mTitle = null ;", "gt": "mContentPreview = null ; \n setProperty ( CONTENT_PROPERTY , content ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/129"}
{"input": "<s> public String getContentPreview ( ) { if ( mContentPreview = = null ) { updateTitleAndPreview ( ) ;", "gt": "} \n return mContentPreview ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/130"}
{"input": "<s> public String getPublishedUrl ( ) { String urlCode = ( String ) getProperty ( PUBLISH_URL_PROPERTY ) ;", "gt": "if ( TextUtils . isEmpty ( urlCode ) ) { \n return \" \" ; \n } \n return PUBLISH_URL + urlCode ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/131"}
{"input": "<s> public boolean hasTag ( String tag ) { List < String > tags = getTags ( ) ; String tagLower = tag . toLowerCase ( ) ; for ( String tagName : tags ) {", "gt": "if ( tagLower . equals ( tagName . toLowerCase ( ) ) ) \n return true ; \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/132"}
{"input": "<s> public List < String > getTags ( ) { JSONArray tags = ( JSONArray ) getProperty ( TAGS_PROPERTY ) ; if ( tags = = null ) { tags = new JSONArray ( ) ; setProperty ( TAGS_PROPERTY , \" \" ) ; } int length = tags . length ( ) ; List < String > tagList = new ArrayList < > ( length ) ; if ( length = = 0 ) return tagList ; for ( int i = 0 ; i < length ; i + + ) { String tag = tags . optString ( i ) ;", "gt": "if ( ! tag . equals ( \" \" ) ) \n tagList . add ( tag ) ; \n } \n return tagList ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/133"}
{"input": "<s> public void addTag ( String tagName ) { List < String > tags = getTags ( ) ; List < String > tagsMatched = TagUtils . findTagsMatch ( tags , tagName ) ; if ( tagsMatched . isEmpty ( ) ) { tags . add ( tagName ) ;", "gt": "} \n setTags ( tags ) ; \n setModificationDate ( Calendar . getInstance ( ) ) ; \n save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/134"}
{"input": "<s> public void removeTag ( String tagName ) { List < String > tags = getTags ( ) ; List < String > tagsMatched = TagUtils . findTagsMatch ( tags , tagName ) ;", "gt": "tags . removeAll ( tagsMatched ) ; \n setTags ( tags ) ; \n setModificationDate ( Calendar . getInstance ( ) ) ; \n save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/135"}
{"input": "<s> public CharSequence getTagString ( ) { StringBuilder tagString = new StringBuilder ( ) ; List < String > tags = getTags ( ) ; for ( String tag : tags ) { if ( tagString . length ( ) > 0 ) { tagString . append ( SPACE ) ;", "gt": "} \n tagString . append ( tag ) ; \n } \n return tagString ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/136"}
{"input": "<s> public JSONArray getSystemTags ( ) { JSONArray tags = ( JSONArray ) getProperty ( SYSTEM_TAGS_PROPERTY ) ; if ( tags = = null ) {", "gt": "tags = new JSONArray ( ) ; \n setProperty ( SYSTEM_TAGS_PROPERTY , tags ) ; \n } \n return tags ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/137"}
{"input": "<s> public void setMarkdownEnabled ( boolean isMarkdownEnabled ) { if ( isMarkdownEnabled ) {", "gt": "addSystemTag ( MARKDOWN_TAG ) ; \n } else { \n removeSystemTag ( MARKDOWN_TAG ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/139"}
{"input": "<s> public boolean hasCollaborators ( ) { for ( String tag : getTags ( ) ) { if ( StrUtils . isEmail ( tag ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/140"}
{"input": "<s> public void setPinned ( boolean isPinned ) { if ( isPinned ) {", "gt": "addSystemTag ( PINNED_TAG ) ; \n } else { \n removeSystemTag ( PINNED_TAG ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/141"}
{"input": "<s> public void setPreviewEnabled ( boolean isPreviewEnabled ) { if ( isPreviewEnabled ) {", "gt": "addSystemTag ( PREVIEW_TAG ) ; \n } else { \n removeSystemTag ( PREVIEW_TAG ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/142"}
{"input": "<s> public void setPublished ( boolean isPublished ) { if ( isPublished ) {", "gt": "addSystemTag ( PUBLISHED_TAG ) ; \n } else { \n removeSystemTag ( PUBLISHED_TAG ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/143"}
{"input": "<s> private boolean hasSystemTag ( String tag ) { if ( TextUtils . isEmpty ( tag ) ) return false ; JSONArray tags = getSystemTags ( ) ; int length = tags . length ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( tags . optString ( i ) . equals ( tag ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/144"}
{"input": "<s> public void update ( Note note , JSONObject properties ) { note . setProperties ( properties ) ;", "gt": "note . mTitle = null ; \n note . mContentPreview = null ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/147"}
{"input": "<s> @ Override public List < Index > index ( Tag tag ) { List < Index > indexes = new ArrayList < > ( 1 ) ; int count = Note . allInTag ( mNotesBucket , tag . getSimperiumKey ( ) ) . count ( ) ;", "gt": "indexes . add ( new Index ( Tag . NOTE_COUNT_INDEX_NAME , count ) ) ; \n return indexes ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/148"}
{"input": "<s> @ Override public Map < String , String > index ( String [ ] keys , Note note ) { Map < String , String > values = new HashMap < > ( keys . length ) ; values . put ( INDEXES [ 0 ] , note . getTitle ( ) ) ;", "gt": "values . put ( INDEXES [ 1 ] , note . getContent ( ) ) ; \n return values ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/149"}
{"input": "<s> public void setRecentSearches ( List < String > recents ) { if ( recents = = null ) { recents = new ArrayList < > ( ) ;", "gt": "} \n setProperty ( RECENT_SEARCHES_KEY , new JSONArray ( recents ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/154"}
{"input": "<s> public void setActiveSubscription ( long purchaseTime ) { setSubscriptionPlatform ( Preferences . SubscriptionPlatform . ANDROID ) ; setSubscriptionLevel ( Preferences . SubscriptionLevel . SUSTAINER ) ;", "gt": "setSubscriptionDate ( purchaseTime ) ; \n save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/155"}
{"input": "<s> public void removeActiveSubscription ( ) { setSubscriptionPlatform ( SubscriptionPlatform . NONE ) ; setSubscriptionLevel ( SubscriptionLevel . NONE ) ;", "gt": "setSubscriptionDate ( null ) ; \n save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/156"}
{"input": "<s> public SubscriptionPlatform getCurrentSubscriptionPlatform ( ) { Object subscriptionPlatform = getProperty ( SUBSCRIPTION_PLATFORM_KEY ) ; if ( subscriptionPlatform = = null ) { return null ; } if ( subscriptionPlatform instanceof String ) {", "gt": "return SubscriptionPlatform . fromString ( ( String ) subscriptionPlatform ) ; \n } else { \n return null ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/157"}
{"input": "<s> public static SubscriptionPlatform fromString ( String platformName ) { if ( platformName ! = null ) { for ( SubscriptionPlatform platform : SubscriptionPlatform . values ( ) ) { if ( platformName . equalsIgnoreCase ( platform . getName ( ) ) ) { return platform ;", "gt": "} \n } \n } \n return null ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/158"}
{"input": "<s> public static SubscriptionLevel fromString ( String level ) { if ( level ! = null ) { for ( SubscriptionLevel subscriptionLevel : SubscriptionLevel . values ( ) ) { if ( level . equalsIgnoreCase ( subscriptionLevel . getName ( ) ) ) { return subscriptionLevel ;", "gt": "} \n } \n } \n return null ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/159"}
{"input": "<s> public String getName ( ) { String name = ( String ) getProperty ( NAME_PROPERTY ) ;", "gt": "if ( name = = null ) { \n name = getSimperiumKey ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/161"}
{"input": "<s> public void setName ( String name ) { if ( name = = null ) { name = \" \" ;", "gt": "} \n setProperty ( NAME_PROPERTY , name ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/162"}
{"input": "<s> public void setIndex ( Integer tagIndex ) { if ( tagIndex = = null ) {", "gt": "getProperties ( ) . remove ( \" <STR_LIT> \" ) ; \n } else { \n setProperty ( \" <STR_LIT> \" , tagIndex ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/163"}
{"input": "<s> public void hideTabs ( ) {", "gt": "mTabLayout . setVisibility ( View . GONE ) ; \n mViewPager . setPagingEnabled ( false ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/166"}
{"input": "<s> public void showTabs ( ) {", "gt": "mTabLayout . setVisibility ( View . VISIBLE ) ; \n mViewPager . setPagingEnabled ( true ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/167"}
{"input": "<s> public void setSearchMatchBarVisible ( boolean isVisible ) { if ( mSearchMatchBar ! = null ) {", "gt": "mSearchMatchBar . setVisibility ( isVisible ? View . VISIBLE : View . GONE ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/168"}
{"input": "<s> void addFragment ( Fragment fragment , String title ) { mFragments . add ( fragment ) ;", "gt": "mTitles . add ( title ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/172"}
{"input": "<s> @ Override public void run ( ) { if ( ! isAdded ( ) ) return ; requireActivity ( ) . runOnUiThread ( ( ) - > {", "gt": "mNote . setPublished ( ! mNote . isPublished ( ) ) ; \n mNote . save ( ) ; \n updatePublishedState ( false ) ; \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/176"}
{"input": "<s> @ Override public View newView ( Context context , Cursor cursor , ViewGroup parent ) { Activity activity = ( Activity ) context ; if ( activity = = null )", "gt": "return null ; \n return activity . getLayoutInflater ( ) . inflate ( R . layout . autocomplete_list_item , null ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/177"}
{"input": "<s> @ Override public void bindView ( View view , Context context , Cursor cursor ) {", "gt": "TextView textView = ( TextView ) view ; \n textView . setText ( convertToString ( cursor ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/178"}
{"input": "<s> @ Override public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { String url = request . getUrl ( ) . toString ( ) ; if ( url . startsWith ( SimplenoteLinkify . SIMPLENOTE_LINK_PREFIX ) ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . INTERNOTE_LINK_TAPPED , AnalyticsTracker . CATEGORY_LINK , \" <STR_LIT> \" ) ; SimplenoteLinkify . openNote ( requireActivity ( ) , url . replace ( SIMPLENOTE_LINK_PREFIX , \" \" ) ) ;", "gt": "} else { \n BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , url ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/180"}
{"input": "<s> @ Override public boolean onPreDraw ( ) { if ( mContentEditText . getLayout ( ) ! = null ) {", "gt": "setScroll ( ) ; \n mRootView . getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/181"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ; checkWebView ( ) ; mIsPaused = false ; mNotesBucket . addListener ( this ) ; AppLog . add ( Type . SYNC , \" <STR_LIT> \" ) ; mTagInput . setOnTagAddedListener ( this ) ; if ( mContentEditText ! = null ) { mContentEditText . setTextSize ( TypedValue . COMPLEX_UNIT_SP , PrefUtils . getFontSize ( requireContext ( ) ) ) ;", "gt": "if ( mContentEditText . hasFocus ( ) ) { \n showSoftKeyboard ( ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/184"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( DisplayUtils . isLargeScreenLandscape ( getActivity ( ) ) & & mNote ! = null ) {", "gt": "outState . putString ( STATE_NOTE_ID , mNote . getSimperiumKey ( ) ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/188"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull Menu menu , @ NonNull MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; if ( ! isAdded ( ) | | ( ! mIsFromWidget & & DisplayUtils . isLargeScreenLandscape ( getActivity ( ) ) & & mNoteMarkdownFragment = = null ) ) {", "gt": "return ; \n } \n inflater . inflate ( R . menu . note_editor , menu ) ; \n MenuCompat . setGroupDividerEnabled ( menu , true ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/189"}
{"input": "<s> private void deleteNote ( ) {", "gt": "NoteUtils . deleteNote ( mNote , getActivity ( ) ) ; \n requireActivity ( ) . finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/193"}
{"input": "<s> protected void clearMarkdown ( ) { if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( \" <STR_LIT> \" , mCss + \" \" , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/194"}
{"input": "<s> protected void hideMarkdown ( ) { if ( BrowserUtils . isWebViewInstalled ( requireContext ( ) ) & & mMarkdown ! = null ) {", "gt": "mMarkdown . setVisibility ( View . INVISIBLE ) ; \n } else { \n mError . setVisibility ( View . INVISIBLE ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/195"}
{"input": "<s> public void showInfo ( ) { DrawableUtils . startAnimatedVectorDrawable ( mInformationMenuItem . getIcon ( ) ) ; if ( mNote ! = null ) {", "gt": "mContentEditText . clearFocus ( ) ; \n saveNote ( ) ; \n showInfoSheet ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/199"}
{"input": "<s> private void setMarkdownEnabled ( boolean enabled ) { mIsMarkdownEnabled = enabled ; if ( mIsMarkdownEnabled ) {", "gt": "loadMarkdownData ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/201"}
{"input": "<s> private void loadMarkdownData ( ) { String formattedContent = NoteMarkdownFragment . getMarkdownFormattedContent ( mCss , mContentEditText . getPreviewTextContent ( ) ) ; if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( null , formattedContent , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/202"}
{"input": "<s> private void updateNote ( Note updatedNote ) {", "gt": "mNote = updatedNote ; \n refreshContent ( true ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/204"}
{"input": "<s> private void updateTagList ( List < String > tags ) {", "gt": "setChips ( tags ) ; \n mTagInput . setText ( \" \" ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/205"}
{"input": "<s> @ Override public void onTagAdded ( String tag ) {", "gt": "if ( mNote = = null | | ! isAdded ( ) | | TextUtils . isEmpty ( tag ) ) { \n return ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/206"}
{"input": "<s> @ Override public void afterTextChanged ( Editable editable ) { attemptAutoList ( editable ) ;", "gt": "setTitleSpan ( editable ) ; \n mContentEditText . fixLineSpacing ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/207"}
{"input": "<s> public boolean isPlaceholderVisible ( ) { if ( mPlaceholderView ! = null ) {", "gt": "return mPlaceholderView . getVisibility ( ) = = View . VISIBLE ; \n } else { \n return false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/210"}
{"input": "<s> @ Override public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { String tag = mTagInput . getText ( ) . toString ( ) . trim ( ) ; if ( tag . length ( ) > 0 & & mNote ! = null ) {", "gt": "viewModel . addTag ( tag , mNote ) ; \n } \n } \n hideToolbarForLandscapeEditing ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/212"}
{"input": "<s> private String getNoteContentString ( ) { if ( mContentEditText = = null | | mContentEditText . getText ( ) = = null ) {", "gt": "return \" \" ; \n } else { \n return mContentEditText . getText ( ) . toString ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/213"}
{"input": "<s> @ Override public void onSharePublishClicked ( ) { publishNote ( ) ; if ( mShareBottomSheet ! = null ) {", "gt": "mShareBottomSheet . dismiss ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/214"}
{"input": "<s> @ Override public void onShareUnpublishClicked ( ) { unpublishNote ( ) ; if ( mShareBottomSheet ! = null ) {", "gt": "mShareBottomSheet . dismiss ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/215"}
{"input": "<s> @ Override public void onHistoryCancelClicked ( ) { mContentEditText . setText ( mNote . getContent ( ) ) ; if ( mHistoryBottomSheet ! = null ) {", "gt": "mHistoryBottomSheet . dismiss ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/216"}
{"input": "<s> @ Override public void onHistoryRestoreClicked ( ) { if ( mHistoryBottomSheet ! = null ) { mHistoryBottomSheet . dismiss ( ) ;", "gt": "} \n saveAndSyncNote ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/217"}
{"input": "<s> private void showShareSheet ( ) { if ( isAdded ( ) & & mShareBottomSheet ! = null & & ! mShareBottomSheet . isAdded ( ) ) {", "gt": "mShareBottomSheet . show ( requireFragmentManager ( ) , mNote ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/222"}
{"input": "<s> private void showInfoSheet ( ) { if ( isAdded ( ) & & mInfoBottomSheet ! = null & & ! mInfoBottomSheet . isAdded ( ) ) {", "gt": "mInfoBottomSheet . show ( requireFragmentManager ( ) , mNote ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/223"}
{"input": "<s> @ Override protected Void doInBackground ( Void . . . args ) { NoteEditorFragment fragment = mNoteEditorFragmentReference . get ( ) ;", "gt": "if ( fragment ! = null ) { \n fragment . saveNote ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/228"}
{"input": "<s> @ Override public boolean onItemLongClick ( AdapterView < ? > adapterView , View view , int position , long l ) { getListView ( ) . setChoiceMode ( ListView . CHOICE_MODE_MULTIPLE_MODAL ) ; getListView ( ) . setItemChecked ( position , true ) ;", "gt": "if ( mActionMode = = null ) { \n requireActivity ( ) . startActionMode ( this ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/232"}
{"input": "<s> public List < Integer > getSelectedNotesPositions ( ) { SparseBooleanArray checkedPositions = getListView ( ) . getCheckedItemPositions ( ) ; ArrayList < Integer > positions = new ArrayList < > ( ) ; for ( int i = 0 ; i < checkedPositions . size ( ) ; i + + ) { if ( checkedPositions . valueAt ( i ) ) {", "gt": "positions . add ( checkedPositions . keyAt ( i ) - mList . getHeaderViewsCount ( ) ) ; \n } \n } \n return positions ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/235"}
{"input": "<s> protected void getPrefs ( ) { mIsCondensedNoteList = PrefUtils . getBoolPref ( getActivity ( ) , PrefUtils . PREF_CONDENSED_LIST , false ) ;", "gt": "mTitleFontSize = PrefUtils . getFontSize ( getActivity ( ) ) ; \n mPreviewFontSize = mTitleFontSize - <NUM_LIT:2> ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/238"}
{"input": "<s> public void setEmptyListButton ( String message ) { if ( mEmptyViewButton ! = null ) { if ( ! message . isEmpty ( ) ) { mEmptyViewButton . setVisibility ( View . VISIBLE ) ; mEmptyViewButton . setText ( message ) ;", "gt": "} else { \n mEmptyViewButton . setVisibility ( View . GONE ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/245"}
{"input": "<s> public void setEmptyListImage ( @ DrawableRes int image ) { if ( mEmptyViewImage ! = null ) { if ( image ! = - 1 ) { mEmptyViewImage . setVisibility ( View . VISIBLE ) ; mEmptyViewImage . setImageResource ( image ) ;", "gt": "} else { \n mEmptyViewImage . setVisibility ( View . GONE ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/246"}
{"input": "<s> public void setEmptyListMessage ( String message ) { if ( mEmptyViewText ! = null & & message ! = null ) {", "gt": "mEmptyViewText . setText ( message ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/247"}
{"input": "<s> public void setActivatedPosition ( int position ) { if ( getListView ( ) ! = null ) { if ( position = = ListView . INVALID_POSITION ) { getListView ( ) . setItemChecked ( mActivatedPosition , false ) ; } else {", "gt": "getListView ( ) . setItemChecked ( position , true ) ; \n } \n mActivatedPosition = position ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/252"}
{"input": "<s> public void setFloatingActionButtonVisible ( boolean visible ) { if ( mFloatingActionButton = = null ) return ; if ( visible ) {", "gt": "mFloatingActionButton . show ( ) ; \n } else { \n mFloatingActionButton . hide ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/253"}
{"input": "<s> public void searchNotes ( String searchString , boolean isSubmit ) { mIsSearching = true ; mSuggestionLayout . setVisibility ( View . VISIBLE ) ; if ( ! searchString . equals ( mSearchString ) ) { mSearchString = searchString ; } if ( searchString . isEmpty ( ) ) { getSearchItems ( ) ; } else { getTagSuggestions ( searchString ) ; }", "gt": "if ( isSubmit ) { \n mSuggestionLayout . setVisibility ( View . GONE ) ; \n refreshListForSearch ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/257"}
{"input": "<s> public void clearSearch ( ) { mIsSearching = false ; mSuggestionLayout . setVisibility ( View . GONE ) ; refreshList ( ) ;", "gt": "if ( mSearchString ! = null & & ! mSearchString . equals ( \" \" ) ) { \n mSearchString = null ; \n refreshList ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/258"}
{"input": "<s> private void deleteSearchItem ( String item ) { Preferences preferences = getPreferences ( ) ; if ( preferences ! = null ) { List < String > recents = preferences . getRecentSearches ( ) ; mDeletedItemIndex = recents . indexOf ( item ) ; recents . remove ( item ) ; preferences . setRecentSearches ( recents ) ;", "gt": "preferences . save ( ) ; \n } else { \n Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/259"}
{"input": "<s> public void changeCursor ( ObjectCursor < Note > cursor ) {", "gt": "mCursor = cursor ; \n super . changeCursor ( cursor ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/262"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position - mList . getHeaderViewsCount ( ) ) ; \n return mCursor . getObject ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/263"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) @ Override public boolean onTouch ( View view , MotionEvent event ) { if ( event . getButtonState ( ) = = MotionEvent . BUTTON_SECONDARY & & event . getAction ( ) = = MotionEvent . ACTION_DOWN ) {", "gt": "showPopupMenuAtPosition ( view , position ) ; \n return true ; \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/264"}
{"input": "<s> @ Override public void onDeleteObject ( Bucket < Preferences > bucket , Preferences object ) { if ( isAdded ( ) ) { requireActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) {", "gt": "getSearchItems ( ) ; \n } \n } ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/265"}
{"input": "<s> @ Override public void onNetworkChange ( Bucket < Preferences > bucket , Bucket . ChangeType type , String key ) { if ( isAdded ( ) ) { requireActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) {", "gt": "getSearchItems ( ) ; \n } \n } ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/266"}
{"input": "<s> @ Override public void onSaveObject ( Bucket < Preferences > bucket , Preferences object ) { if ( isAdded ( ) ) { requireActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) {", "gt": "getSearchItems ( ) ; \n } \n } ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/267"}
{"input": "<s> @ Override public void onClick ( View view ) { if ( ! isAdded ( ) ) { return ; } final String item = holder . mSuggestionText . getText ( ) . toString ( ) ; deleteSearchItem ( item ) ; Snackbar . make ( getRootView ( ) , R . string . snackbar_deleted_recent_search , Snackbar . LENGTH_LONG ) . setAction ( getString ( R . string . undo ) , new View . OnClickListener ( ) { @ Override", "gt": "public void onClick ( View view ) { \n addSearchItem ( item , mDeletedItemIndex ) ; \n } \n } ) . show ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/268"}
{"input": "<s> private void updateItems ( List < Suggestion > suggestions ) { DiffUtil . DiffResult diffResult = DiffUtil . calculateDiff ( new SuggestionDiffCallback ( mSuggestions , suggestions ) ) ; mSuggestions . clear ( ) ;", "gt": "mSuggestions . addAll ( suggestions ) ; \n diffResult . dispatchUpdatesTo ( this ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/271"}
{"input": "<s> @ Override public boolean areContentsTheSame ( int itemPositionOld , int itemPositionNew ) { Suggestion itemOld = mListOld . get ( itemPositionOld ) ;", "gt": "Suggestion itemNew = mListNew . get ( itemPositionNew ) ; \n return itemOld . getName ( ) . equalsIgnoreCase ( itemNew . getName ( ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/272"}
{"input": "<s> @ Override public boolean areItemsTheSame ( int itemPositionOld , int itemPositionNew ) { Suggestion itemOld = mListOld . get ( itemPositionOld ) ;", "gt": "Suggestion itemNew = mListNew . get ( itemPositionNew ) ; \n return itemOld . getName ( ) . equalsIgnoreCase ( itemNew . getName ( ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/273"}
{"input": "<s> private Calendar getDateByPreference ( Note note ) { switch ( PrefUtils . getIntPref ( requireContext ( ) , PrefUtils . PREF_SORT_ORDER ) ) { case DATE_CREATED_ASCENDING : case DATE_CREATED_DESCENDING : return note . getCreationDate ( ) ; case DATE_MODIFIED_ASCENDING : case DATE_MODIFIED_DESCENDING : return note . getModificationDate ( ) ; case ALPHABETICAL_ASCENDING :", "gt": "case ALPHABETICAL_DESCENDING : \n default : \n return null ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/274"}
{"input": "<s> @ Override public boolean onMenuItemClick ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . menu_pin : note . setPinned ( ! note . isPinned ( ) ) ; note . setModificationDate ( Calendar . getInstance ( ) ) ; note . save ( ) ; refreshList ( ) ; return true ; case R . id . menu_trash : if ( getActivity ( ) ! = null ) { ( ( NotesActivity ) getActivity ( ) ) . trashNote ( note ) ; }", "gt": "return true ; \n default : \n return false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/275"}
{"input": "<s> @ Override protected ObjectCursor < Note > doInBackground ( Boolean . . . args ) { NoteListFragment fragment = mNoteListFragmentReference . get ( ) ;", "gt": "mIsFromNavSelect = args [ 0 ] ; \n return fragment . queryNotes ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/276"}
{"input": "<s> @ Override protected ObjectCursor < Note > doInBackground ( Void . . . args ) {", "gt": "NoteListFragment fragment = mNoteListFragmentReference . get ( ) ; \n return fragment . queryNotesForSearch ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/277"}
{"input": "<s> @ Override protected void onPostExecute ( Void aVoid ) { NoteListFragment fragment = mNoteListFragmentReference . get ( ) ;", "gt": "fragment . mActionMode . finish ( ) ; \n fragment . refreshList ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/279"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/284"}
{"input": "<s> @ Override public void onDestroy ( ) { if ( mCursor ! = null ) {", "gt": "mCursor . close ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/286"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/289"}
{"input": "<s> @ Override public void run ( ) { if ( mNote ! = null & & mNote . getSimperiumKey ( ) ! = null ) {", "gt": "( ( NestedScrollView ) layout ) . smoothScrollTo ( 0 , mPreferences . getInt ( mNote . getSimperiumKey ( ) , 0 ) ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/291"}
{"input": "<s> @ Override public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { String url = request . getUrl ( ) . toString ( ) ; if ( url . startsWith ( SimplenoteLinkify . SIMPLENOTE_LINK_PREFIX ) ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . INTERNOTE_LINK_TAPPED , AnalyticsTracker . CATEGORY_LINK , \" <STR_LIT> \" ) ; SimplenoteLinkify . openNote ( requireActivity ( ) , url . replace ( SIMPLENOTE_LINK_PREFIX , \" \" ) ) ;", "gt": "} else { \n BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , url ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/292"}
{"input": "<s> private void deleteNote ( ) {", "gt": "NoteUtils . deleteNote ( mNote , getActivity ( ) ) ; \n requireActivity ( ) . finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/294"}
{"input": "<s> public void updateMarkdown ( String text ) { if ( mMarkdown ! = null ) {", "gt": "mMarkdown . loadDataWithBaseURL ( null , getMarkdownFormattedContent ( mCss , text ) , \" <STR_LIT> \" , \" <STR_LIT> \" , null ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/298"}
{"input": "<s> @ Override protected void onPreExecute ( ) {", "gt": "NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference . get ( ) ; \n fragment . mIsLoadingNote = true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/299"}
{"input": "<s> @ Override protected void onPostExecute ( Void nada ) { NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference . get ( ) ;", "gt": "fragment . mIsLoadingNote = false ; \n fragment . requireActivity ( ) . invalidateOptionsMenu ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/300"}
{"input": "<s> void updateNavigationDrawer ( ) { runOnUiThread ( new Runnable ( ) {", "gt": "public void run ( ) { \n updateNavigationDrawerItems ( ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/301"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) {", "gt": "super . onNewIntent ( intent ) ; \n checkForSharedContent ( intent ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/302"}
{"input": "<s> @ Override public void onClick ( DialogInterface dialog , int which ) {", "gt": "AuthUtils . logOut ( ( Simplenote ) getApplication ( ) ) ; \n finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/303"}
{"input": "<s> @ Override public void setTitle ( CharSequence title ) { if ( getSupportActionBar ( ) ! = null ) {", "gt": "getSupportActionBar ( ) . setTitle ( title ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/306"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( mDrawerLayout ! = null & & mDrawerLayout . isDrawerOpen ( GravityCompat . START ) ) {", "gt": "mDrawerLayout . closeDrawer ( GravityCompat . START ) ; \n } else { \n super . onBackPressed ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/307"}
{"input": "<s> @ Override public void onActionModeDestroyed ( ) { if ( mSearchMenuItem ! = null & & ! mSearchMenuItem . isActionViewExpanded ( ) ) {", "gt": "mDrawerLayout . setDrawerLockMode ( DrawerLayout . LOCK_MODE_UNLOCKED ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/308"}
{"input": "<s> private List < Tag > getTagsFromCursor ( Bucket . ObjectCursor < Tag > tagCursor ) { List < Tag > tags = new ArrayList < > ( ) ; for ( int i = 0 ; i < tagCursor . getCount ( ) ; i + + ) { tagCursor . moveToNext ( ) ; Tag tag = tagCursor . getObject ( ) ; if ( ! collaboratorsRepository . isValidCollaborator ( tag . getName ( ) ) ) {", "gt": "tags . add ( tag ) ; \n } \n } \n return tags ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/311"}
{"input": "<s> private void setSelectedTagActive ( ) { if ( mSelectedTag = = null ) { mSelectedTag = mTagsAdapter . getDefaultItem ( ) ; } MenuItem selectedMenuItem = mNavigationMenu . findItem ( ( int ) mSelectedTag . id ) ; if ( selectedMenuItem ! = null ) { selectedMenuItem . setChecked ( true ) ;", "gt": "} else { \n mNavigationMenu . findItem ( ALL_NOTES_ID ) . setChecked ( true ) ; \n } \n setTitle ( mSelectedTag . name ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/313"}
{"input": "<s> public TagsAdapter . TagMenuItem getSelectedTag ( ) { if ( mSelectedTag = = null ) { mSelectedTag = mTagsAdapter . getDefaultItem ( ) ;", "gt": "} \n return mSelectedTag ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/314"}
{"input": "<s> public void updateTrashMenuItem ( boolean shouldWaitForAnimation ) { if ( shouldWaitForAnimation ) { new Handler ( ) . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { updateTrashMenuItem ( ) ; }", "gt": "} , getResources ( ) . getInteger ( R . integer . time_animation ) ) ; \n } else { \n updateTrashMenuItem ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/316"}
{"input": "<s> @ Override public boolean onQueryTextChange ( String newText ) { if ( mSearchMenuItem . isActionViewExpanded ( ) ) { getNoteListFragment ( ) . searchNotes ( newText , false ) ;", "gt": "} \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/319"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( String queryText ) { getNoteListFragment ( ) . searchNotes ( queryText , true ) ; getNoteListFragment ( ) . addSearchItem ( queryText , 0 ) ;", "gt": "checkEmptyListText ( true ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/320"}
{"input": "<s> @ Override public boolean onMenuItemClick ( MenuItem item ) { if ( ! mSearchMenuItem . isActionViewExpanded ( ) ) { showDetailPlaceholder ( ) ;", "gt": "} \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/321"}
{"input": "<s> @ Override public void run ( ) { item . setIcon ( drawable ) ;", "gt": "item . setTitle ( string ) ; \n if ( item = = mEmptyTrashMenuItem ) { \n invalidateOptionsMenu ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/324"}
{"input": "<s> public void submitSearch ( String selection ) { if ( mSearchView ! = null ) { String query = mSearchView . getQuery ( ) . toString ( ) ; if ( query . endsWith ( TAG_PREFIX ) ) { mSearchView . setQuery ( query . substring ( 0 , query . lastIndexOf ( TAG_PREFIX ) ) + selection , true ) ;", "gt": "} else { \n mSearchView . setQuery ( selection , true ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/325"}
{"input": "<s> @ Override public void run ( ) { if ( ! mNotesBucket . hasChangeVersion ( ) ) {", "gt": "setToolbarProgressVisibility ( true ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/328"}
{"input": "<s> @ Override public void run ( ) {", "gt": "AppLog . add ( Type . ACCOUNT , \" <STR_LIT> \" ) ; \n startLoginActivity ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/329"}
{"input": "<s> private void setToolbarProgressVisibility ( boolean isVisible ) { if ( getSupportActionBar ( ) ! = null ) {", "gt": "getSupportActionBar ( ) . setDisplayShowCustomEnabled ( isVisible ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/330"}
{"input": "<s> private void togglePreview ( MenuItem item ) { if ( mIsShowingMarkdown ) { setIconAfterAnimation ( item , R . drawable . av_visibility_on_off_24dp , R . string . markdown_show ) ; setMarkdownShowing ( false ) ; mCurrentNote . setPreviewEnabled ( false ) ; } else { setIconAfterAnimation ( item , R . drawable . av_visibility_off_on_24dp , R . string . markdown_hide ) ;", "gt": "setMarkdownShowing ( true ) ; \n mCurrentNote . setPreviewEnabled ( true ) ; \n } \n mCurrentNote . save ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/337"}
{"input": "<s> @ Override public void run ( ) { if ( type = = Bucket . ChangeType . INDEX ) { setToolbarProgressVisibility ( false ) ;", "gt": "} \n mNoteListFragment . refreshList ( ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/339"}
{"input": "<s> @ Override public void run ( ) { if ( type = = Bucket . ChangeType . INDEX ) { setToolbarProgressVisibility ( false ) ;", "gt": "} \n mNoteListFragment . refreshList ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/340"}
{"input": "<s> @ Override public void onDeleteObject ( Bucket < Note > bucket , Note object ) { runOnUiThread ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n mNoteListFragment . refreshList ( ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/341"}
{"input": "<s> @ Override protected Void doInBackground ( Void . . . voids ) { NotesActivity activity = mNotesActivityReference . get ( ) ; if ( activity . mNotesBucket = = null ) { return null ; } Query < Note > query = Note . allDeleted ( activity . mNotesBucket ) ; Bucket . ObjectCursor cursor = query . execute ( ) ;", "gt": "while ( cursor . moveToNext ( ) ) { \n cursor . getObject ( ) . delete ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/342"}
{"input": "<s> @ Override protected void onPostExecute ( Void nada ) { NotesActivity activity = mNotesActivityReference . get ( ) ; if ( activity ! = null ) {", "gt": "activity . showDetailPlaceholder ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/343"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/345"}
{"input": "<s> @ Override public void onAppWidgetOptionsChanged ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , Bundle newOptions ) { RemoteViews views = new RemoteViews ( context . getPackageName ( ) , PrefUtils . getLayoutWidget ( context , false ) ) ;", "gt": "resizeWidget ( newOptions , views ) ; \n appWidgetManager . updateAppWidget ( appWidgetId , views ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/346"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position ) ; \n return mCursor . getObject ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/347"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { Bundle appWidgetOptions = appWidgetManager . getAppWidgetOptions ( appWidgetId ) ;", "gt": "updateWidget ( context , appWidgetManager , appWidgetId , appWidgetOptions ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/349"}
{"input": "<s> @ Override public void onAppWidgetOptionsChanged ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , Bundle newOptions ) { RemoteViews views = new RemoteViews ( context . getPackageName ( ) , PrefUtils . getLayoutWidget ( context , true ) ) ;", "gt": "resizeWidget ( newOptions , views ) ; \n appWidgetManager . updateAppWidget ( appWidgetId , views ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/350"}
{"input": "<s> @ Override public Note getItem ( int position ) {", "gt": "mCursor . moveToPosition ( position ) ; \n return mCursor . getObject ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/351"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ; \n disableScreenshotsIfLocked ( this ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/353"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { if ( ! isAdded ( ) ) { return false ; } Simplenote currentApp = ( Simplenote ) getActivity ( ) . getApplication ( ) ; if ( currentApp . getSimperium ( ) . needsAuthorization ( ) ) { Intent loginIntent = new Intent ( getActivity ( ) , SimplenoteAuthenticationActivity . class ) ; startActivityForResult ( loginIntent , Simperium . SIGNUP_SIGNIN_REQUEST ) ;", "gt": "} else { \n new LogOutTask ( PreferencesFragment . this ) . execute ( ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/355"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . USER_ACCOUNT_DELETE_REQUESTED , AnalyticsTracker . CATEGORY_USER , \" <STR_LIT> \" ) ;", "gt": "showDeleteAccountDialog ( ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/356"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { try { BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , \" <STR_LIT> \" ) ;", "gt": "} catch ( Exception e ) { \n toast ( R . string . no_browser_available , Toast . LENGTH_LONG ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/357"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) { try { BrowserUtils . launchBrowserOrShowError ( requireContext ( ) , \" <STR_LIT> \" ) ;", "gt": "} catch ( Exception e ) { \n toast ( R . string . no_browser_available , Toast . LENGTH_LONG ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/358"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "startActivity ( new Intent ( getActivity ( ) , AboutActivity . class ) ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/359"}
{"input": "<s> @ Override public boolean onPreferenceChange ( Preference preference , Object newValue ) {", "gt": "updateTheme ( requireActivity ( ) , Integer . parseInt ( newValue . toString ( ) ) ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/362"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "startActivity ( new Intent ( requireContext ( ) , StyleActivity . class ) ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/364"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference preference ) {", "gt": "( ( PreferencesActivity ) requireActivity ( ) ) . openBrowserForMembership ( getView ( ) ) ; \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/365"}
{"input": "<s> @ Override public boolean onPreferenceChange ( Preference preference , Object o ) { if ( ( ( SwitchPreferenceCompat ) preference ) . isChecked ( ) ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . SETTINGS_LIST_CONDENSED_ENABLED , AnalyticsTracker . CATEGORY_USER , \" <STR_LIT> \" ) ;", "gt": "} \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/366"}
{"input": "<s> @ Override public boolean onPreferenceChange ( Preference preference , Object newValue ) { try { boolean isChecked = ( boolean ) newValue ; Preferences prefs = mPreferencesBucket . get ( PREFERENCES_OBJECT_KEY ) ; prefs . setAnalyticsEnabled ( isChecked ) ; prefs . save ( ) ;", "gt": "} catch ( BucketObjectMissingException e ) { \n e . printStackTrace ( ) ; \n } \n return true ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/367"}
{"input": "<s> private void closeProgressDialogDeleteAccount ( ) { if ( mProgressDialogFragment ! = null & & ! mProgressDialogFragment . isHidden ( ) ) { mProgressDialogFragment . dismiss ( ) ;", "gt": "mProgressDialogFragment = null ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/370"}
{"input": "<s> private boolean hasUnsyncedNotes ( ) { Simplenote application = ( Simplenote ) getActivity ( ) . getApplication ( ) ; Bucket < Note > notesBucket = application . getNotesBucket ( ) ; Bucket . ObjectCursor < Note > notesCursor = notesBucket . allObjects ( ) ; while ( notesCursor . moveToNext ( ) ) { Note note = notesCursor . getObject ( ) ; if ( note . isNew ( ) | | note . isModified ( ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/373"}
{"input": "<s> private void logOut ( ) { AppLog . add ( Type . ACTION , \" <STR_LIT> \" ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . USER_SIGNED_OUT , AnalyticsTracker . CATEGORY_USER , \" <STR_LIT> \" ) ;", "gt": "AuthUtils . logOut ( ( Simplenote ) requireActivity ( ) . getApplication ( ) ) ; \n getActivity ( ) . finish ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/374"}
{"input": "<s> @ Override public void run ( ) {", "gt": "fragment . closeProgressDialogDeleteAccount ( ) ; \n fragment . showDeleteAccountConfirmationDialog ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/378"}
{"input": "<s> @ Override public void run ( ) {", "gt": "fragment . closeProgressDialogDeleteAccount ( ) ; \n fragment . showDialogDeleteAccountError ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/379"}
{"input": "<s> private fun deleteTagFromNotes ( tag : Tag ) { val cursor = tag . findNotes ( notesBucket , tag . name ) while ( cursor . moveToNext ( ) ) { val note = cursor . getObject ( )", "gt": "note . removeTag ( tag . name ) \n } \n \n cursor . close ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/388"}
{"input": "<s> @ Override public boolean onConfirmClicked ( FullScreenDialogController controller ) { if ( ! NetworkUtils . isNetworkAvailable ( requireContext ( ) ) ) { Toast . makeText ( requireContext ( ) , R . string . error_network_required , Toast . LENGTH_LONG ) . show ( ) ; return false ; } if ( mHasSentEmail ) { Toast . makeText ( requireContext ( ) , R . string . toast_email_sent , Toast . LENGTH_SHORT ) . show ( ) ; } else {", "gt": "showVerifyEmail ( ) ; \n } \n sendVerificationEmail ( ) ; \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/392"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ; new Handler ( Looper . getMainLooper ( ) ) . post ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n dismissIfVerified ( ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/396"}
{"input": "<s> public static Bundle newBundle ( boolean hasSentEmail ) { Bundle bundle = new Bundle ( ) ;", "gt": "bundle . putBoolean ( EXTRA_SENT_EMAIL , hasSentEmail ) ; \n return bundle ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/398"}
{"input": "<s> public static boolean analyticsIsEnabled ( ) { if ( mPreferencesBucket = = null ) { return true ; } try { Preferences prefs = mPreferencesBucket . get ( PREFERENCES_OBJECT_KEY ) ;", "gt": "return prefs . getAnalyticsEnabled ( ) ; \n } catch ( BucketObjectMissingException e ) { \n return true ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/408"}
{"input": "<s> public boolean isLoggedIn ( ) {", "gt": "User user = mSimperium . getUser ( ) ; \n return user ! = null & & user . getStatus ( ) = = User . Status . AUTHORIZED ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/411"}
{"input": "<s> public String getUserEmail ( ) {", "gt": "User user = mSimperium . getUser ( ) ; \n return user ! = null ? user . getEmail ( ) : null ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/412"}
{"input": "<s> @ Override public void onUpdate ( String entityId , Calendar lastSyncTime , boolean isSynced ) { if ( lastSyncTime ! = null ) {", "gt": "mPreferences . edit ( ) . putLong ( entityId , lastSyncTime . getTimeInMillis ( ) ) . apply ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/414"}
{"input": "<s> @ Override public void onUpdate ( AccountVerificationWatcher . Status status ) { switch ( status ) { case VERIFIED : dismissReviewAccountDialog ( ) ; return ; case SENT_EMAIL : showWaitingOnEmailConfirmation ( ) ;", "gt": "return ; \n case UNVERIFIED : \n showUnverifiedAccount ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/415"}
{"input": "<s> @ Override public void onActivityDestroyed ( Activity activity ) { super . onActivityDestroyed ( activity ) ; if ( activity instanceof NoteWidgetLightConfigureActivity | | activity instanceof NoteWidgetDarkConfigureActivity ) {", "gt": "isAlreadyLocked = false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/416"}
{"input": "<s> @ Override public void onActivityResumed ( Activity activity ) { if ( ( activity instanceof NoteWidgetDarkConfigureActivity | | activity instanceof NoteWidgetLightConfigureActivity ) & & isPasswordLocked ( ) & & ! isAlreadyLocked ) { Intent i = new Intent ( activity . getApplicationContext ( ) , PasscodeUnlockActivity . class ) ; activity . startActivity ( i ) ;", "gt": "isAlreadyLocked = true ; \n } else { \n super . onActivityResumed ( activity ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/417"}
{"input": "<s> private void notifyUpdate ( String entityId ) { for ( SyncTimeListener listener : mListeners ) {", "gt": "listener . onUpdate ( entityId , getLastSyncTime ( entityId ) , isSynced ( entityId ) ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/421"}
{"input": "<s> private void notifyRemove ( String entityId ) { for ( SyncTimeListener listener : mListeners ) {", "gt": "listener . onRemove ( entityId ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/422"}
{"input": "<s> private void updateSyncTime ( String entityId ) { Calendar now = Calendar . getInstance ( ) ;", "gt": "mSyncTimes . put ( entityId , now ) ; \n Log . d ( TAG , \" <STR_LIT> \" + entityId + \" <STR_LIT> \" + now . getTime ( ) + \" <STR_LIT:)> \" ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/423"}
{"input": "<s> @ Override public void onDeleteObject ( Bucket < T > bucket , T object ) {", "gt": "mSyncTimes . remove ( object . getSimperiumKey ( ) ) ; \n notifyRemove ( object . getSimperiumKey ( ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/424"}
{"input": "<s> @ Override public void onNetworkChange ( Bucket < T > bucket , Bucket . ChangeType type , String entityId ) { if ( entityId = = null ) { return ; } if ( type = = Bucket . ChangeType . REMOVE ) { mSyncTimes . remove ( entityId ) ; notifyRemove ( entityId ) ;", "gt": "} else { \n updateSyncTime ( entityId ) ; \n notifyUpdate ( entityId ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/425"}
{"input": "<s> @ Override public void onSyncObject ( Bucket < T > bucket , String noteId ) {", "gt": "updateSyncTime ( noteId ) ; \n notifyUpdate ( noteId ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/426"}
{"input": "<s> override fun onDestroyView ( ) { super . onDestroyView ( )", "gt": "_binding = null \n _dialogEditTag = null \n }", "repo": "simplenote-android", "task_id": "simplenote-android/427"}
{"input": "<s> override fun onShow ( dialog : DialogInterface ) { setObservers ( )", "gt": "startUiState ( ) \n showDialogRenameTag ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/428"}
{"input": "<s> private fun startUiState ( ) {", "gt": "viewModel . start ( tag ) \n binding . inputTagName . editText ? . setText ( tag . name ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/429"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) val binding = ActivityTagsBinding . inflate ( layoutInflater ) setContentView ( binding . root )", "gt": "binding . setupViews ( ) \n binding . setObservers ( ) \n \n viewModel . start ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/430"}
{"input": "<s> private fun ActivityTagsBinding . showLongAddToast ( ) { if ( buttonAdd . isHapticFeedbackEnabled ) { buttonAdd . performHapticFeedback ( HapticFeedbackConstants . LONG_PRESS )", "gt": "} \n toast ( R . string . add_tag ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/431"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "DisplayUtils . disableScreenshotsIfLocked ( this ) \n viewModel . startListeningTagChanges ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/435"}
{"input": "<s> public override fun onPause ( ) {", "gt": "super . onPause ( ) \n viewModel . stopListeningTagChanges ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/436"}
{"input": "<s> @ Suppress ( \" <STR_LIT> \" ) override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { if ( resultCode = = RESULT_OK & & requestCode = = REQUEST_ADD_TAG ) { viewModel . updateOnResult ( )", "gt": "} \n super . onActivityResult ( requestCode , resultCode , data ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/437"}
{"input": "<s> private fun ActivityTagsBinding . setLabelEmptyTagList ( ) {", "gt": "setEmptyListImage ( R . drawable . ic_tag_24dp ) \n setEmptyListMessage ( getString ( R . string . empty_tags ) ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/438"}
{"input": "<s> private fun ActivityTagsBinding . setEmptyListMessage ( message : String ? ) { message ? . let {", "gt": "empty . text . text = it \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/441"}
{"input": "<s> @ Override protected void onRestart ( ) { super . onRestart ( ) ;", "gt": "if ( mThemeChanged ) { \n recreate ( ) ; \n mThemeChanged = false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/444"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( key . equals ( PrefUtils . PREF_THEME ) | | key . equals ( PrefUtils . PREF_STYLE_INDEX ) ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) { recreate ( ) ;", "gt": "} else { \n mThemeChanged = true ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/445"}
{"input": "<s> @ Override public void onFailure ( @ NonNull Call call , @ NonNull IOException e ) {", "gt": "String url = call . request ( ) . url ( ) . toString ( ) ; \n handler . onFailure ( e , url ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/451"}
{"input": "<s> private void updateState ( Status newState ) { if ( newState ! = currentState ) { currentState = newState ;", "gt": "listener . onUpdate ( newState ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/454"}
{"input": "<s> @ Override public void onAnimationEnd ( Animation animation ) { Animation animationIn = AnimationUtils . loadAnimation ( textView . getContext ( ) , android . R . anim . fade_in ) ;", "gt": "textView . setText ( newText ) ; \n textView . startAnimation ( animationIn ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/457"}
{"input": "<s> public static void magicLinkLogin ( Simplenote application , Uri uri ) { String userEmail = extractEmailFromMagicLink ( uri ) ;", "gt": "String spToken = uri . getQueryParameter ( \" <STR_LIT> \" ) ; \n application . loginWithToken ( userEmail , spToken ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/460"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( mDataValid ) {", "gt": "return mCursor . getCount ( ) ; \n } else { \n return 0 ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/464"}
{"input": "<s> public void swapCursor ( Cursor newCursor ) { if ( newCursor = = mCursor ) { return ; } if ( newCursor ! = null ) { mCursor = newCursor ; mDataValid = true ; notifyDataSetChanged ( ) ; } else { notifyItemRangeRemoved ( 0 , getItemCount ( ) ) ;", "gt": "mCursor = null ; \n mRowIDColumn = - 1 ; \n mDataValid = false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/467"}
{"input": "<s> public static boolean isWebViewInstalled ( Context context ) { try { new WebView ( context ) ;", "gt": "return true ; \n } catch ( Exception exception ) { \n return false ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/470"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { if ( holder is CollaboratorViewHolder ) {", "gt": "holder . bind ( getItem ( position ) as CollaboratorDataItem . CollaboratorItem ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/475"}
{"input": "<s> public static Point getDisplayPixelSize ( Context context ) { WindowManager wm = ( WindowManager ) context . getSystemService ( Context . WINDOW_SERVICE ) ;", "gt": "Display display = wm . getDefaultDisplay ( ) ; \n Point size = new Point ( ) ; \n display . getSize ( size ) ; \n return size ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/482"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) public static String getDisplaySizeAndOrientation ( Context context ) { boolean isLarge = isLarge ( context ) | | isXLarge ( context ) ; boolean isLandscape = isLandscape ( context ) ; if ( isLarge & & isLandscape ) { return \" <STR_LIT> \" ; } else if ( isLarge & & ! isLandscape ) { return \" <STR_LIT> \" ; } else if ( ! isLarge & & isLandscape ) { return \" <STR_LIT> \" ; } else if ( ! isLarge & & ! isLandscape ) {", "gt": "return \" <STR_LIT> \" ; \n } else { \n return \" <STR_LIT> \" ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/483"}
{"input": "<s> public static int getChecklistIconSize ( @ NonNull Context context , boolean isList ) { int extra = context . getResources ( ) . getInteger ( R . integer . default_font_size_checkbox_extra ) ;", "gt": "int size = PrefUtils . getFontSize ( context ) ; \n return DisplayUtils . dpToPx ( context , isList ? size : size + extra ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/486"}
{"input": "<s> public static Drawable tintDrawableWithResource ( Context context , Drawable drawable , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int tint = ContextCompat . getColor ( context , colorRes ) ; \n return tintDrawable ( drawable , tint ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/491"}
{"input": "<s> public static Drawable tintDrawableWithAttribute ( Context context , @ DrawableRes int drawableRes , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ; \n return tintDrawable ( context , drawableRes , color ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/493"}
{"input": "<s> public static int getColor ( Context context , @ AttrRes int tintColorAttribute ) { TypedValue typedValue = new TypedValue ( ) ; Resources . Theme theme = context . getTheme ( ) ;", "gt": "theme . resolveAttribute ( tintColorAttribute , typedValue , true ) ; \n return typedValue . data ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/494"}
{"input": "<s> public static void tintMenuWithAttribute ( Context context , Menu menu , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ; \n DrawableUtils . tintMenu ( menu , color ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/496"}
{"input": "<s> public static void tintMenu ( Menu menu , @ ColorInt int color ) { for ( int i = 0 ; i < menu . size ( ) ; i + + ) { MenuItem item = menu . getItem ( i ) ;", "gt": "DrawableUtils . tintMenuItem ( item , color ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/497"}
{"input": "<s> public static void tintMenuWithResource ( Context context , Menu menu , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int color = ContextCompat . getColor ( context , colorRes ) ; \n DrawableUtils . tintMenu ( menu , color ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/498"}
{"input": "<s> public static void tintMenuItem ( MenuItem menuItem , @ ColorInt int color ) {", "gt": "Drawable tinted = DrawableUtils . tintDrawable ( menuItem . getIcon ( ) , color ) ; \n menuItem . setIcon ( tinted ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/499"}
{"input": "<s> public static void tintMenuItemWithResource ( Context context , MenuItem menuItem , @ ColorRes int colorRes ) { @ ColorInt", "gt": "int color = ContextCompat . getColor ( context , colorRes ) ; \n DrawableUtils . tintMenuItem ( menuItem , color ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/500"}
{"input": "<s> public static void tintMenuItemWithAttribute ( Context context , MenuItem menuItem , @ AttrRes int tintColorAttribute ) { @ ColorInt", "gt": "int color = getColor ( context , tintColorAttribute ) ; \n DrawableUtils . tintMenuItem ( menuItem , color ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/501"}
{"input": "<s> public static String readFile ( Context context , Uri uri ) throws IOException { StringBuilder stringBuilder = new StringBuilder ( ) ; InputStream inputStream = context . getContentResolver ( ) . openInputStream ( uri ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; String line ; while ( ( line = reader . readLine ( ) ) ! = null ) { stringBuilder . append ( line ) ;", "gt": "stringBuilder . append ( \" <STR_LIT> <STR_LIT> \" ) ; \n } \n inputStream . close ( ) ; \n return stringBuilder . toString ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/504"}
{"input": "<s> @ Override public int findTokenEnd ( CharSequence text , int cursor ) { int i = cursor ; int length = text . length ( ) ; while ( i < length ) { if ( text . charAt ( i ) = = CHARACTER_BRACKET_CLOSE ) { return i ; } else {", "gt": "i + + ; \n } \n } \n return length ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/506"}
{"input": "<s> @ Override public int findTokenStart ( CharSequence text , int cursor ) { int i = cursor ; while ( i > 0 & & text . charAt ( i - 1 ) ! = CHARACTER_BRACKET_OPEN ) { i - - ; }", "gt": "if ( i < 1 | | text . charAt ( i - 1 ) ! = CHARACTER_BRACKET_OPEN ) { \n return cursor ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/507"}
{"input": "<s> @ Override public CharSequence terminateToken ( CharSequence text ) { if ( text instanceof Spanned ) { SpannableString spannableString = new SpannableString ( text + CHARACTER_BRACKET_CLOSE . toString ( ) ) ; TextUtils . copySpansFrom ( ( Spanned ) text , 0 , text . length ( ) , Object . class , spannableString , 0 ) ;", "gt": "return spannableString ; \n } else { \n return text + CHARACTER_BRACKET_CLOSE . toString ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/508"}
{"input": "<s> @ Override public void onMatch ( final SpanFactory factory , final Spannable text , final int start , final int end ) { if ( mTextView = = null ) return ; Handler handler = mTextView . getHandler ( ) ; if ( handler = = null ) return ; handler . post ( new Runnable ( ) { @ Override public void run ( ) { if ( mStopped )", "gt": "return ; \n sListener . onMatch ( factory , text , start , end ) ; \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/509"}
{"input": "<s> @ Override public void run ( ) { if ( mStopped )", "gt": "return ; \n sListener . onMatch ( factory , text , start , end ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/510"}
{"input": "<s> public static int getFirstMatchLocation ( Spannable content , String matches ) { if ( TextUtils . isEmpty ( matches ) ) { return 0 ; } String [ ] values = matches . split ( \" <STR_LIT:\\\\> <STR_LIT:+> \" , <NUM_LIT:4> ) ; if ( values . length > MATCH_INDEX_START ) { try { int location = Integer . valueOf ( values [ MATCH_INDEX_START ] ) ; return location + getByteOffset ( content , 0 , location ) ; } catch ( NumberFormatException exception ) {", "gt": "return 0 ; \n } \n } \n return 0 ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/511"}
{"input": "<s> public void start ( ) { if ( TextUtils . isEmpty ( mMatches ) )", "gt": "return ; \n mThread = new Thread ( this ) ; \n mStopped = false ; \n mThread . start ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/512"}
{"input": "<s> public void stop ( ) { mStopped = true ;", "gt": "if ( mThread ! = null ) \n mThread . interrupt ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/513"}
{"input": "<s> public void highlightMatches ( String matches , int columnIndex ) { synchronized ( this ) { stop ( ) ; mSpannable = mTextView . getEditableText ( ) ; mMatches = matches ;", "gt": "mIndex = columnIndex ; \n mPlainText = mTextView . getPlainTextContent ( ) ; \n start ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/514"}
{"input": "<s> public synchronized void removeMatches ( ) { stop ( ) ; if ( mSpannable ! = null & & mMatchedSpans ! = null ) { for ( Object span : mMatchedSpans ) {", "gt": "mSpannable . removeSpan ( span ) ; \n } \n mMatchedSpans . clear ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/515"}
{"input": "<s> public static String getNetworkInfo ( Context context ) { String type = getNetworkTypeString ( context ) ; String speed ; switch ( getNetworkType ( context ) ) { case ConnectivityManager . TYPE_MOBILE : speed = getNetworkSpeed ( context ) ; break ; case ConnectivityManager . TYPE_WIFI : speed = getNetworkSpeedWifi ( context ) ; break ; case TYPE_NONE : case TYPE_NULL : default :", "gt": "speed = \" <STR_LIT:?> \" ; \n break ; \n } \n return type + \" <STR_LIT> \" + speed + \" <STR_LIT:)> \" ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/520"}
{"input": "<s> public static int getNetworkType ( Context context ) { NetworkInfo info = getActiveNetworkInfo ( context ) ; if ( info = = null ) { return TYPE_NULL ; }", "gt": "if ( ! info . isConnected ( ) ) { \n return TYPE_NONE ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/523"}
{"input": "<s> public static String getNetworkTypeString ( Context context ) { switch ( getNetworkType ( context ) ) { case ConnectivityManager . TYPE_MOBILE : return \" <STR_LIT> \" ; case ConnectivityManager . TYPE_WIFI : return \" <STR_LIT> \" ; case TYPE_NONE : return \" <STR_LIT> \" ;", "gt": "case TYPE_NULL : \n default : \n return \" <STR_LIT> \" ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/524"}
{"input": "<s> public static boolean isNetworkAvailable ( Context context ) {", "gt": "NetworkInfo info = getActiveNetworkInfo ( context ) ; \n return info ! = null & & info . isConnected ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/525"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( mListener ! = null ) {", "gt": "mListener . onItemClick ( item ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/534"}
{"input": "<s> public static SimplenoteMovementMethod getInstance ( ) { if ( mInstance = = null ) { mInstance = new SimplenoteMovementMethod ( ) ;", "gt": "} \n return mInstance ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/535"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "setRetainInstance ( true ) ; \n setCancelable ( false ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/537"}
{"input": "<s> public int findTokenStart ( CharSequence text , int cursor ) { int i = cursor ; while ( i > 0 & & text . charAt ( i - 1 ) ! = <CHAR_LIT> ) { i - - ; }", "gt": "while ( i < cursor & & text . charAt ( i ) = = <CHAR_LIT> ) { \n i + + ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/538"}
{"input": "<s> public int findTokenEnd ( CharSequence text , int cursor ) { int i = cursor ; int len = text . length ( ) ; while ( i < len ) { if ( text . charAt ( i ) = = <CHAR_LIT> ) { return i ; } else {", "gt": "i + + ; \n } \n } \n return len ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/539"}
{"input": "<s> public CharSequence terminateToken ( CharSequence text ) { int i = text . length ( ) ; while ( i > 0 & & text . charAt ( i - 1 ) = = <CHAR_LIT> ) { i - - ; } if ( i > 0 & & text . charAt ( i - 1 ) = = <CHAR_LIT> ) { return text ; } else { if ( text instanceof Spanned ) { SpannableString sp = new SpannableString ( text + \" \" ) ; TextUtils . copySpansFrom ( ( Spanned ) text , 0 , text . length ( ) , Object . class , sp , 0 ) ; return sp ;", "gt": "} else { \n return text + \" \" ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/540"}
{"input": "<s> public static String notNullStr ( final String value ) { if ( value = = null )", "gt": "return \" \" ; \n return value ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/541"}
{"input": "<s> public static int strToInt ( String value , int defaultInt ) { if ( value = = null ) return defaultInt ; try {", "gt": "return Integer . valueOf ( value ) ; \n } catch ( NumberFormatException e ) { \n return defaultInt ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/542"}
{"input": "<s> public static long strToLong ( String value , long defaultLong ) { if ( value = = null ) return defaultLong ; try {", "gt": "return Long . valueOf ( value ) ; \n } catch ( NumberFormatException e ) { \n return defaultLong ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/543"}
{"input": "<s> public static float strToFloat ( String value , float defaultFloat ) { if ( value = = null ) return defaultFloat ; try {", "gt": "return Float . valueOf ( value ) ; \n } catch ( NumberFormatException e ) { \n return defaultFloat ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/544"}
{"input": "<s> public static boolean isSameStr ( String s1 , String s2 ) { if ( s1 = = null | | s2 = = null )", "gt": "return ( s1 = = null & & s2 = = null ) ; \n return s1 . equals ( s2 ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/547"}
{"input": "<s> public static Spanned setTextToUpperCaseAndBold ( String originalString ) { if ( TextUtils . isEmpty ( originalString ) ) { return HtmlCompat . fromHtml ( \" \" ) ;", "gt": "} \n return HtmlCompat . fromHtml ( \" <STR_LIT> \" + originalString . toUpperCase ( ) + \" <STR_LIT> \" ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/549"}
{"input": "<s> @ Override public void onStopped ( ) {", "gt": "super . onStopped ( ) ; \n stopBuckets ( \" <STR_LIT> \" ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/550"}
{"input": "<s> @ Override public void run ( ) {", "gt": "stopBuckets ( \" <STR_LIT> \" ) ; \n completer . set ( Result . success ( ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/551"}
{"input": "<s> override fun onBindViewHolder ( holder : TagItemViewHolder , position : Int ) {", "gt": "val currentTagItem = getItem ( position ) \n holder . bind ( currentTagItem ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/553"}
{"input": "<s> public void submitList ( List < Tag > tags ) {", "gt": "this . tags = tags ; \n notifyDataSetChanged ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/554"}
{"input": "<s> public int getPosition ( TagMenuItem mSelectedTag ) { if ( mSelectedTag . id = = ALL_NOTES_ID ) return 0 ; if ( mSelectedTag . id = = TRASH_ID ) return 1 ; if ( mSelectedTag . id = = UNTAGGED_NOTES_ID ) return this . getCount ( ) - 1 ; if ( tags = = null ) return - 1 ; for ( int i = 0 ; i < tags . size ( ) ; i + + ) { if ( i = = mSelectedTag . id ) {", "gt": "return i + mMinimumItemsPrimary ; \n } \n } \n return - 1 ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/556"}
{"input": "<s> @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( count > = 1 & & s . charAt ( start ) = = SPACE ) {", "gt": "saveTagOrShowError ( s . toString ( ) ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/559"}
{"input": "<s> @ Override public boolean dispatchKeyEvent ( KeyEvent event ) { if ( event . getKeyCode ( ) = = KeyEvent . KEYCODE_ENTER ) { saveTagOrShowError ( getText ( ) . toString ( ) ) ;", "gt": "return true ; \n } else { \n return super . dispatchKeyEvent ( event ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/560"}
{"input": "<s> public void init ( ) {", "gt": "setOnItemClickListener ( this ) ; \n addTextChangedListener ( mTextWatcher ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/561"}
{"input": "<s> public void notifyTagsChanged ( ) { String lexical = getText ( ) . toString ( ) . trim ( ) ;", "gt": "String canonical = TagUtils . getCanonicalFromLexical ( mBucketTag , lexical ) ; \n notifyTagsChanged ( canonical ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/562"}
{"input": "<s> public void notifyTagsChanged ( String tag ) { if ( mTagAddedListener ! = null ) {", "gt": "mTagAddedListener . onTagAdded ( tag ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/563"}
{"input": "<s> public static void createTagIfMissing ( Bucket < Tag > bucket , String name ) throws BucketObjectNameInvalid { if ( isTagMissing ( bucket , name ) ) {", "gt": "createTag ( bucket , name , bucket . count ( ) ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/566"}
{"input": "<s> public static List < String > findTagsMatch ( List < String > tags , String tagSearch ) { List < String > tagsMatched = new ArrayList < > ( ) ; String tagSearchHash = hashTag ( tagSearch ) ; for ( String tag : tags ) { String tagHash = hashTag ( tag ) ; if ( tagHash . equals ( tagSearchHash ) ) {", "gt": "tagsMatched . add ( tag ) ; \n } \n } \n return tagsMatched ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/567"}
{"input": "<s> public static int getColorResourceFromAttribute ( @ NonNull Context context , @ AttrRes int attribute ) { TypedArray typedArray = context . obtainStyledAttributes ( new int [ ] { attribute } ) ; int colorResId = typedArray . getResourceId ( 0 , android . R . color . black ) ;", "gt": "typedArray . recycle ( ) ; \n return colorResId ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/575"}
{"input": "<s> @ Override public void onClick ( View v ) { if ( mUndoListener ! = null ) {", "gt": "mUndoListener . onUndo ( ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/576"}
{"input": "<s> public static boolean hasWPToken ( Context context ) { if ( context = = null ) { return false ;", "gt": "} \n return ! TextUtils . isEmpty ( PrefUtils . getStringPref ( context , PrefUtils . PREF_WP_TOKEN ) ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/578"}
{"input": "<s> fun start ( ) {", "gt": "_uiState . value = UiState ( \" \" ) \n _event . postValue ( Event . START ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/583"}
{"input": "<s> fun loadCollaborators ( noteId : String ) { this . noteId = noteId viewModelScope . launch {", "gt": "updateUiState ( noteId ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/584"}
{"input": "<s> fun start ( ) { if ( isStarted ) {", "gt": "return \n } \n \n isStarted = true \n }", "repo": "simplenote-android", "task_id": "simplenote-android/586"}
{"input": "<s> private fun onPlanSelected ( offerToken : String , tracker : AnalyticsTracker . Stat ) { AnalyticsTracker . track ( tracker )", "gt": "_onPurchaseRequest . postValue ( offerToken ) \n _plansBottomSheetVisibility . postValue ( false ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/587"}
{"input": "<s> override fun onCleared ( ) {", "gt": "super . onCleared ( ) \n billingClient . endConnection ( ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/590"}
{"input": "<s> fun update ( note : Note ) {", "gt": "val tags = getTagsUseCase . getTags ( note ) \n _uiState . value = UiState ( tags ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/596"}
{"input": "<s> @ MainThread override fun observe ( @ NonNull owner : LifecycleOwner , @ NonNull observer : Observer < in T > ) { if ( hasActiveObservers ( ) ) { Log . w ( TAG , \" <STR_LIT> \" ) } super . observe ( owner , { t - >", "gt": "if ( pending . compareAndSet ( true , false ) ) { \n observer . onChanged ( t ) \n } \n } ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/598"}
{"input": "<s> @ MainThread override fun setValue ( t : T ? ) {", "gt": "pending . set ( true ) \n super . setValue ( t ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/599"}
{"input": "<s> override fun postValue ( value : T ) {", "gt": "pending . set ( true ) \n super . postValue ( value ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/600"}
{"input": "<s> fun asyncCall ( ) {", "gt": "pending . set ( true ) \n super . postValue ( null ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/601"}
{"input": "<s> fun start ( ) { viewModelScope . launch { val tagItems = getTagsUseCase . allTags ( )", "gt": "_uiState . value = UiState ( tagItems ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/602"}
{"input": "<s> private suspend fun updateUiState ( searchQuery : String ? , searchUpdate : Boolean = false ) { val tagItems = if ( searchQuery = = null ) getTagsUseCase . allTags ( ) else getTagsUseCase . searchTags ( searchQuery )", "gt": "_uiState . value = UiState ( tagItems , searchUpdate , searchQuery ) \n }", "repo": "simplenote-android", "task_id": "simplenote-android/604"}
{"input": "<s> fun search ( searchQuery : String ) { viewModelScope . launch {", "gt": "updateUiState ( searchQuery , true ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/605"}
{"input": "<s> fun updateOnResult ( ) { viewModelScope . launch { val searchQuery = _uiState . value ? . searchQuery", "gt": "updateUiState ( searchQuery ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/607"}
{"input": "<s> fun deleteTag ( tagItem : TagItem ) { viewModelScope . launch { tagsRepository . deleteTag ( tagItem . tag ) AnalyticsTracker . track ( AnalyticsTracker . Stat . TAG_MENU_DELETED ,", "gt": "AnalyticsTracker . CATEGORY_TAG , \n \" <STR_LIT> \" \n ) \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/609"}
{"input": "<s> @ Override public void onClick ( @ NonNull View view ) { setChecked ( ! isChecked ) ; if ( view instanceof SimplenoteEditText ) { try { ( ( SimplenoteEditText ) view ) . toggleCheckbox ( this ) ;", "gt": "} catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/611"}
{"input": "<s> @ Override public void setAdapter ( Adapter adapterNew ) { final RecyclerView . Adapter adapterOld = getAdapter ( ) ; if ( adapterOld ! = null ) { adapterOld . unregisterAdapterDataObserver ( mObserver ) ; } super . setAdapter ( adapterNew ) ;", "gt": "if ( adapterNew ! = null ) { \n adapterNew . registerAdapterDataObserver ( mObserver ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/612"}
{"input": "<s> public void setEmptyView ( View emptyView ) {", "gt": "mEmptyView = emptyView ; \n toggleEmptyView ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/613"}
{"input": "<s> private void toggleEmptyView ( ) { if ( mEmptyView ! = null & & getAdapter ( ) ! = null ) { final boolean empty = getAdapter ( ) . getItemCount ( ) = = 0 ;", "gt": "mEmptyView . setVisibility ( empty ? VISIBLE : GONE ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/614"}
{"input": "<s> @ Override public void setAlpha ( int alpha ) {", "gt": "mPaint . setAlpha ( alpha ) ; \n invalidateSelf ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/617"}
{"input": "<s> @ Override public void setColorFilter ( ColorFilter cf ) {", "gt": "mPaint . setColorFilter ( cf ) ; \n invalidateSelf ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/618"}
{"input": "<s> public void setColor ( int color ) {", "gt": "mPaint . setColor ( color ) ; \n invalidateSelf ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/619"}
{"input": "<s> public void setRadius ( float cornerRadius ) {", "gt": "mRadius = cornerRadius ; \n invalidateSelf ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/620"}
{"input": "<s> @ Override public boolean onTouchEvent ( MotionEvent event ) { if ( ! mIsEnabled ) { return false ; }", "gt": "if ( event . getAction ( ) = = MotionEvent . ACTION_UP ) { \n performClick ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/623"}
{"input": "<s> private void setLinkTokenizer ( ) { mTokenizer = new LinkTokenizer ( ) ; setOnItemClickListener ( this ) ;", "gt": "setTokenizer ( mTokenizer ) ; \n setThreshold ( 1 ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/627"}
{"input": "<s> @ Override protected void onSelectionChanged ( int selStart , int selEnd ) { super . onSelectionChanged ( selStart , selEnd ) ; if ( listeners ! = null ) {", "gt": "for ( OnSelectionChangedListener l : listeners ) l . onSelectionChanged ( selStart , selEnd ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/630"}
{"input": "<s> @ Override public boolean onKeyPreIme ( int keyCode , KeyEvent event ) { if ( event . getKeyCode ( ) = = KeyEvent . KEYCODE_BACK ) { clearFocus ( ) ;", "gt": "} \n return super . onKeyPreIme ( keyCode , event ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/631"}
{"input": "<s> @ Override protected void onFocusChanged ( boolean focused , int direction , Rect previouslyFocusedRect ) { if ( focused ) { setCursorVisible ( true ) ;", "gt": "} \n super . onFocusChanged ( focused , direction , previouslyFocusedRect ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/632"}
{"input": "<s> private int findStartOfLineOfSelection ( ) { int position = getSelectionStart ( ) ; if ( position = = - 1 ) { return 0 ; } Editable editable = getText ( ) ; for ( int i = position - 1 ; i > = 0 ; i - - ) { if ( editable . charAt ( i ) = = <STR_LIT:\\n> ) {", "gt": "return i + 1 ; \n } \n } \n return 0 ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/633"}
{"input": "<s> private void cancelAnimation ( ) { if ( mAnimator ! = null ) {", "gt": "mAnimator . removeAllListeners ( ) ; \n mAnimator . cancel ( ) ; \n mAnimator = null ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/636"}
{"input": "<s> private void cancelLongClick ( ) { cancelAnimation ( ) ; mIsMaximumSpeed = false ;", "gt": "removeCallbacks ( mLongPressCallback ) ; \n setRotation ( 0 ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/637"}
{"input": "<s> @ Override public void onAnimationEnd ( Animator animation ) {", "gt": "cancelAnimation ( ) ; \n cancelLongClick ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/639"}
{"input": "<s> public static Typeface getTypeface ( Context context , String typefaceName ) { if ( context = = null | | typefaceName = = null ) { return null ; } if ( ! mTypefaceCache . containsKey ( typefaceName ) ) { Typeface typeface = Typeface . createFromAsset ( context . getApplicationContext ( ) . getAssets ( ) , \" <STR_LIT:/> \" + typefaceName ) ; if ( typeface ! = null ) {", "gt": "mTypefaceCache . put ( typefaceName , typeface ) ; \n } \n } \n return mTypefaceCache . get ( typefaceName ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/640"}
{"input": "<s> private void loadSites ( ) { if ( getActivity ( ) = = null | | ! WordPressUtils . hasWPToken ( getActivity ( ) ) ) { return ; } if ( loadSitesFromPreferences ( ) ) { SitesAdapter sitesAdapter = new SitesAdapter ( getActivity ( ) ) ;", "gt": "mListView . setAdapter ( sitesAdapter ) ; \n return ; \n } \n fetchSitesFromAPI ( ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/644"}
{"input": "<s> private boolean loadSitesFromPreferences ( ) { if ( getActivity ( ) = = null ) { return false ; } String savedSites = PrefUtils . getStringPref ( getActivity ( ) , PrefUtils . PREF_WORDPRESS_SITES ) ; if ( ! TextUtils . isEmpty ( savedSites ) ) { try { mSitesArray = new JSONArray ( savedSites ) ; return true ; } catch ( JSONException e ) {", "gt": "return false ; \n } \n } \n return false ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/646"}
{"input": "<s> @ Override public void run ( ) { if ( mSitesArray . length ( ) = = 0 ) {", "gt": "setDialogStatus ( DialogStatus . CONNECT ) ; \n } \n } \n } ) ; \n }", "repo": "simplenote-android", "task_id": "simplenote-android/649"}
{"input": "<s> @ Override public void run ( ) { if ( mSitesArray . length ( ) = = 0 ) {", "gt": "setDialogStatus ( DialogStatus . CONNECT ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/650"}
{"input": "<s> @ Override public void run ( ) { if ( mSitesArray . length ( ) = = 0 ) {", "gt": "setDialogStatus ( DialogStatus . CONNECT ) ; \n } \n }", "repo": "simplenote-android", "task_id": "simplenote-android/652"}
{"input": "<s> fun showToast ( @ StringRes message : Int , duration : Int ? = null ) { val act = activity ? : return act . runOnUiThread {", "gt": "showToast ( act , act . getString ( message ) , duration ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/2"}
{"input": "<s> fun showToast ( message : String ? , duration : Int ? = null ) { val act = activity ? : return act . runOnUiThread {", "gt": "showToast ( act , message , duration ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/3"}
{"input": "<s> @ MainThread fun showToast ( act : Activity ? , text : UiText , duration : Int ) { if ( act = = null ) return text . asStringNull ( act ) ? . let {", "gt": "showToast ( act , it , duration ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/5"}
{"input": "<s> @ MainThread fun showToast ( act : Activity ? , @ StringRes message : Int , duration : Int ? = null ) {", "gt": "if ( act = = null ) return \n showToast ( act , act . getString ( message ) , duration ) \n }", "repo": "cloudstream", "task_id": "cloudstream/6"}
{"input": "<s> fun onUserLeaveHint ( act : Activity ? ) { if ( canEnterPipMode & & canShowPipMode ) {", "gt": "act ? . enterPIPMode ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/9"}
{"input": "<s> fun getInstance ( ) : DownloaderTestImpl ? { if ( instance = = null ) { init ( null )", "gt": "} \n return instance \n }", "repo": "cloudstream", "task_id": "cloudstream/13"}
{"input": "<s> fun getUrl ( url : String , referer : String ? ) : List < ExtractorLink > ? { val data = regex . find ( app . get ( url ) . text ) ? . value ? . replace ( \" <STR_LIT:\\\"> \" , \" \" ) ? . split ( \" <STR_LIT:U+002C> \" ) ? : return null val m3u8 = \" <STR_LIT> \" return M3u8Helper . generateM3u8 ( name ,", "gt": "m3u8 , \n url , \n headers = mapOf ( \" <STR_LIT> \" to url , \" <STR_LIT> \" to \" <STR_LIT> \" ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/14"}
{"input": "<s> fun getUrl ( url : String , referer : String ? ) : List < ExtractorLink > { val sources = mutableListOf < ExtractorLink > ( ) sources . add ( ExtractorLink ( name , name , url . replace ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , \" \" ,", "gt": "Qualities . Unknown . value , \n ) \n ) \n return sources \n }", "repo": "cloudstream", "task_id": "cloudstream/15"}
{"input": "<s> private fun cdaUggc ( a : String ) : String { val decoded = rot13 ( a )", "gt": "return if ( decoded . endsWith ( \" <STR_LIT> \" ) ) decoded . replace ( \" <STR_LIT> \" , \" <STR_LIT> \" ) \n else decoded \n }", "repo": "cloudstream", "task_id": "cloudstream/17"}
{"input": "<s> private fun getVideoId ( url : String ) : String ? { val path = URL ( url ) . path val id = path . substringAfter ( \" <STR_LIT:/> \" )", "gt": "if ( id . matches ( videoIdRegex ) ) { \n return id \n }", "repo": "cloudstream", "task_id": "cloudstream/20"}
{"input": "<s> private fun getKey ( id : String ) : String ? { return normalSafeApiCall {", "gt": "id . map { \n it . code . toString ( <NUM_LIT:16> ) \n } . joinToString ( \" \" ) . substring ( 0 , <NUM_LIT:32> ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/25"}
{"input": "<s> fun getUrl ( url : String , referer : String ? , subtitleCallback : ( SubtitleFile ) - > Unit , callback : ( ExtractorLink ) - > Unit ) { val id = Regex ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> \" ) . find ( url ) ? . groupValues ? . get ( 1 ) val doc = app . get ( \" <STR_LIT> \" ) . document val link = doc . selectFirst ( \" <STR_LIT> \" ) ? . attr ( \" <STR_LIT> \" ) callback . invoke ( ExtractorLink ( this . name , this . name , httpsify ( link ? : return ) , \" \" ,", "gt": "Qualities . Unknown . value \n ) \n ) \n \n }", "repo": "cloudstream", "task_id": "cloudstream/33"}
{"input": "<s> fun getUrl ( url : String , referer : String ? , subtitleCallback : ( SubtitleFile ) - > Unit , callback : ( ExtractorLink ) - > Unit ) { val res = app . get ( url , referer = referer ) . document val title = res . select ( \" <STR_LIT> \" ) . text ( ) val video = res . selectFirst ( \" <STR_LIT> \" ) ? . attr ( \" <STR_LIT> \" ) callback . invoke ( ExtractorLink ( this . name , this . name , video ? : return , \" \" , getQuality ( title ) ,", "gt": "INFER_TYPE \n ) \n ) \n \n }", "repo": "cloudstream", "task_id": "cloudstream/35"}
{"input": "<s> private fun generateKey ( salt : ByteArray , secret : ByteArray ) : ByteArray { var key = md5 ( secret + salt ) var currentKey = key while ( currentKey . size < <NUM_LIT> ) {", "gt": "key = md5 ( key + secret + salt ) \n currentKey + = key \n } \n return currentKey \n }", "repo": "cloudstream", "task_id": "cloudstream/41"}
{"input": "<s> fun getUrl ( url : String , referer : String ? , subtitleCallback : ( SubtitleFile ) - > Unit , callback : ( ExtractorLink ) - > Unit ) { val doc = app . get ( url ) . document val urlString = doc . select ( \" <STR_LIT> \" ) . attr ( \" <STR_LIT> \" ) if ( urlString . contains ( \" <STR_LIT> \" ) ) { generateM3u8 ( name ,", "gt": "urlString , \n mainUrl , \n ) . forEach ( callback ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/42"}
{"input": "<s> private fun encodeId ( id : String ) : String { val code = \" <STR_LIT> \" return code . toCharArray ( ) . joinToString ( \" \" ) { char - >", "gt": "char . code . toString ( <NUM_LIT:16> ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/43"}
{"input": "<s> private fun createHashTable ( ) : String { return buildString {", "gt": "repeat ( <NUM_LIT:12> ) { \n append ( alphabet [ Random . nextInt ( alphabet . length ) ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/44"}
{"input": "<s> private fun splitInput ( input : String ) : List < String > { var counter = 0 val array = ArrayList < String > ( ) var buffer = \" \" for ( c in input ) { when ( c ) { <CHAR_LIT:(> - > counter + + <CHAR_LIT:)> - > counter - - else - > { } } </s", "gt": "private fun splitInput ( input : String ) : List < String > { var counter = 0 val array = ArrayList < String > ( ) var buffer = \" \" for ( c in input ) { when ( c ) { <CHAR_LIT:(> - > counter + + <CHAR_LIT:)> - > counter - - else - > { } }", "repo": "cloudstream", "task_id": "cloudstream/46"}
{"input": "<s> private fun evaluateMath ( mathExpression : String ) : String { val rhino = Context . enter ( ) rhino . initStandardObjects ( ) rhino . optimizationLevel = - 1 val scope : Scriptable = rhino . initStandardObjects ( ) return try { rhino . evaluateString ( scope , \" <STR_LIT> \" , \" <STR_LIT> \" , 1 , null ) . toString ( )", "gt": "} \n catch ( e : EvaluatorException ) { \n \" \" \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/47"}
{"input": "<s> private fun tearDecode ( a90 : List < BigInteger > , a91 : List < BigInteger > ) : MutableList < BigInteger > { var ( a95 , a96 ) = a90 var a97 = ( - <NUM_LIT> ) . toBigInteger ( ) for ( _i in 0 until <NUM_LIT:32> ) { a96 - = ( ( ( ( a95 shl <NUM_LIT:4> ) xor rShift ( a95 , <NUM_LIT:5> ) ) + a95 ) xor ( a97 + a91 [ rShift ( a97 , <NUM_LIT:11> ) . and ( <NUM_LIT> toBigInteger ( ) ) . toInt ( ) ] ) ) a97 + = <NUM_LIT> toBigInteger ( ) a95 - = ( ( ( ( a96 shl <NUM_LIT:4> ) xor rShift ( a96 , <NUM_LIT:5> ) ) + a96 ) xor ( a97 + a91 [ a97 . and ( <NUM_LIT> toBigInteger ( ) ) . toInt ( ) ] ) )", "gt": "} \n \n return mutableListOf ( a95 , a96 ) \n }", "repo": "cloudstream", "task_id": "cloudstream/49"}
{"input": "<s> private fun digestPad ( string : String ) : List < BigInteger > { val empList = mutableListOf < BigInteger > ( ) val length = string . length val extra = big15 - ( length . toBigInteger ( ) % big16 ) empList . add ( extra ) for ( i in 0 until length ) { empList . add ( string [ i ] . code . toBigInteger ( ) ) } </s", "gt": "private fun digestPad ( string : String ) : List < BigInteger > { val empList = mutableListOf < BigInteger > ( ) val length = string . length val extra = big15 - ( length . toBigInteger ( ) % big16 ) empList . add ( extra ) for ( i in 0 until length ) { empList . add ( string [ i ] . code . toBigInteger ( ) ) }", "repo": "cloudstream", "task_id": "cloudstream/50"}
{"input": "<s> private fun padLastChars ( input : String ) : String {", "gt": "return if ( input . reversed ( ) [ <NUM_LIT:3> ] . isDigit ( ) ) input \n else input . dropLast ( <NUM_LIT:4> ) \n }", "repo": "cloudstream", "task_id": "cloudstream/55"}
{"input": "<s> fun getUrl ( url : String , referer : String ? , subtitleCallback : ( SubtitleFile ) - > Unit , callback : ( ExtractorLink ) - > Unit ) { val res = app . get ( url , referer = referer ) . document val script = res . select ( \" <STR_LIT> \" ) . find { it . data ( ) . contains ( \" <STR_LIT> \" ) } ? . data ( ) val link = Regex ( \" <STR_LIT:[> <STR_LIT:\\\"> <STR_LIT> <STR_LIT:\\\"> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\"> <STR_LIT> <STR_LIT:\\\"> <CHAR_LIT:]> \" ) . find ( script ? : return ) ? . groupValues ? . get ( 1 ) M3u8Helper . generateM3u8 ( name , link ? : return ,", "gt": "\" <STR_LIT> \" , \n headers = mapOf ( \" <STR_LIT> \" to \" <STR_LIT> \" ) \n ) . forEach ( callback ) \n \n }", "repo": "cloudstream", "task_id": "cloudstream/59"}
{"input": "<s> fun getUrl ( url : String , referer : String ? ) : List < ExtractorLink > { val response = app . get ( url , interceptor = WebViewResolver ( Regex ( \" \" \" <STR_LIT> <STR_LIT> <STR_LIT> \" \" \" )", "gt": ") \n ) \n \n return generateM3u8 ( name , response . url , url , headers = response . headers . toMap ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/60"}
{"input": "<s> private fun dashify ( id : String , dashTable : String ) : String { val table = dashTable . split ( \" \" ) return id . mapIndexedNotNull { i , c - >", "gt": "table . getOrNull ( ( baseTable . indexOf ( c ) * <NUM_LIT:16> ) + ( i % <NUM_LIT:16> ) ) \n } . joinToString ( \" <STR_LIT:-> \" ) \n }", "repo": "cloudstream", "task_id": "cloudstream/62"}
{"input": "<s> fun getUrl ( url : String , referer : String ? , subtitleCallback : ( SubtitleFile ) - > Unit , callback : ( ExtractorLink ) - > Unit ) { val res = app . get ( url ) . text val video = Regex ( \" <STR_LIT> <STR_LIT:\\\"> <STR_LIT> <STR_LIT:\\\"> <STR_LIT:]> \" ) . find ( res ) ? . groupValues ? . get ( 1 ) callback . invoke ( ExtractorLink ( name , name , video ? : return , \" <STR_LIT> \" ,", "gt": "Qualities . Unknown . value , \n type = INFER_TYPE \n ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/63"}
{"input": "<s> override fun onPause ( ) { super . onPause ( ) if ( ApkInstaller . delayedInstaller ? . startInstallation ( ) = = true ) { Toast . makeText ( this , R . string . update_started , Toast . LENGTH_LONG ) . show ( ) } </s", "gt": "override fun onPause ( ) { super . onPause ( ) if ( ApkInstaller . delayedInstaller ? . startInstallation ( ) = = true ) { Toast . makeText ( this , R . string . update_started , Toast . LENGTH_LONG ) . show ( ) }", "repo": "cloudstream", "task_id": "cloudstream/68"}
{"input": "<s> override fun onUserLeaveHint ( ) {", "gt": "super . onUserLeaveHint ( ) \n onUserLeaveHint ( this ) \n }", "repo": "cloudstream", "task_id": "cloudstream/71"}
{"input": "<s> override fun onNewIntent ( intent : Intent ? ) {", "gt": "handleAppIntent ( intent ) \n super . onNewIntent ( intent ) \n }", "repo": "cloudstream", "task_id": "cloudstream/74"}
{"input": "<s> private fun handleAppIntent ( intent : Intent ? ) { if ( intent = = null ) return val str = intent . dataString", "gt": "loadCache ( ) \n handleAppIntentUrl ( this , str , false ) \n }", "repo": "cloudstream", "task_id": "cloudstream/75"}
{"input": "<s> private fun hidePreviewPopupDialog ( ) { bottomPreviewPopup . dismissSafe ( this )", "gt": "bottomPreviewPopup = null \n bottomPreviewBinding = null \n }", "repo": "cloudstream", "task_id": "cloudstream/77"}
{"input": "<s> fun initAll ( ) { synchronized ( allProviders ) { for ( api in allProviders ) {", "gt": "api . init ( ) \n } \n } \n apiMap = null \n }", "repo": "cloudstream", "task_id": "cloudstream/81"}
{"input": "<s> fun addPluginMapping ( plugin : MainAPI ) { synchronized ( apis ) { apis = apis + plugin", "gt": "} \n initMap ( true ) \n }", "repo": "cloudstream", "task_id": "cloudstream/82"}
{"input": "<s> fun removePluginMapping ( plugin : MainAPI ) { synchronized ( apis ) { apis = apis . filter { it ! = plugin }", "gt": "} \n initMap ( true ) \n }", "repo": "cloudstream", "task_id": "cloudstream/83"}
{"input": "<s> private fun initMap ( forcedUpdate : Boolean = false ) { synchronized ( apis ) { if ( apiMap = = null | | forcedUpdate )", "gt": "apiMap = apis . mapIndexed { index , api - > api . name to index } . toMap ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/84"}
{"input": "<s> private fun getLoadResponseIdFromUrl ( url : String , apiName : String ) : Int {", "gt": "return url . replace ( getApiFromNameNull ( apiName ) ? . mainUrl ? : \" \" , \" \" ) . replace ( \" <STR_LIT:/> \" , \" \" ) \n . hashCode ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/87"}
{"input": "<s> fun init ( ) { overrideData ? . get ( this . javaClass . simpleName ) ? . let { data - >", "gt": "overrideWithNewData ( data ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/92"}
{"input": "<s> fun MainAPI . fixUrl ( url : String ) : String { if ( url . startsWith ( \" <STR_LIT> \" ) | | url . startsWith ( \" <STR_LIT:{> <STR_LIT:\\\"> \" ) ) { return url } if ( url . isEmpty ( ) ) { return \" \" } val startsWithNoHttp = url . startsWith ( \" <STR_LIT> \" ) if ( startsWithNoHttp ) { return \" <STR_LIT> \" } else { if ( url . startsWith ( <CHAR_LIT:/> ) ) {", "gt": "return mainUrl + url \n } \n return \" <STR_LIT> \" \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/97"}
{"input": "<s> fun fixTitle ( str : String ) : String { return str . split ( \" \" ) . joinToString ( \" \" ) { it . lowercase ( )", "gt": ". replaceFirstChar { char - > if ( char . isLowerCase ( ) ) char . titlecase ( Locale . getDefault ( ) ) else it } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/99"}
{"input": "<s> fun imdbUrlToIdNullable ( url : String ? ) : String ? {", "gt": "if ( url = = null ) return null \n return imdbUrlToId ( url ) \n }", "repo": "cloudstream", "task_id": "cloudstream/102"}
{"input": "<s> fun AnimeSearchResponse . addDub ( episodes : Int ? ) {", "gt": "if ( episodes = = null | | episodes < = 0 ) return \n addDubStatus ( DubStatus . Dubbed , episodes ) \n }", "repo": "cloudstream", "task_id": "cloudstream/109"}
{"input": "<s> fun AnimeSearchResponse . addSub ( episodes : Int ? ) {", "gt": "if ( episodes = = null | | episodes < = 0 ) return \n addDubStatus ( DubStatus . Subbed , episodes ) \n }", "repo": "cloudstream", "task_id": "cloudstream/110"}
{"input": "<s> fun LoadResponse . addRating ( value : Int ? ) { if ( ( value ? : return ) < 0 | | value > <NUM_LIT> ) { return", "gt": "} \n this . rating = value \n }", "repo": "cloudstream", "task_id": "cloudstream/120"}
{"input": "<s> fun AnimeLoadResponse . addEpisodes ( status : DubStatus , episodes : List < Episode > ? ) {", "gt": "if ( episodes . isNullOrEmpty ( ) ) return \n this . episodes [ status ] = ( this . episodes [ status ] ? : emptyList ( ) ) + episodes \n }", "repo": "cloudstream", "task_id": "cloudstream/127"}
{"input": "<s> < T > MainAPI . newMovieLoadResponse ( name : String , url : String , type : TvType , data : T ? , initializer : suspend MovieLoadResponse . ( ) - > Unit = { } ) : MovieLoadResponse { if ( data is String ) </s", "gt": "< T > MainAPI . newMovieLoadResponse ( name : String , url : String , type : TvType , data : T ? , initializer : suspend MovieLoadResponse . ( ) - > Unit = { } ) : MovieLoadResponse { if ( data is String )", "repo": "cloudstream", "task_id": "cloudstream/129"}
{"input": "<s> fun search ( query : String ) : List < SearchResponse > ? { return tmdb . searchService ( ) . multi ( query , 1 , \" <STR_LIT> \" , \" <STR_LIT> \" , includeAdult ) . awaitResponse ( ) . body ( ) ? . results ? . mapNotNull {", "gt": "it . movie ? . toSearchResponse ( ) ? : it . tvShow ? . toSearchResponse ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/145"}
{"input": "<s> inline fun debugException ( message : ( ) - > String ) { if ( BuildConfig . DEBUG ) {", "gt": "throw DebugException ( message . invoke ( ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/146"}
{"input": "<s> inline fun debugPrint ( tag : String = DEBUG_PRINT , message : ( ) - > String ) { if ( BuildConfig . DEBUG ) {", "gt": "Log . d ( tag , message . invoke ( ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/147"}
{"input": "<s> inline fun debugWarning ( message : ( ) - > String ) { if ( BuildConfig . DEBUG ) {", "gt": "logError ( DebugException ( message . invoke ( ) ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/148"}
{"input": "<s> inline fun debugAssert ( assert : ( ) - > Boolean , message : ( ) - > String ) { if ( BuildConfig . DEBUG & & assert . invoke ( ) ) {", "gt": "throw DebugException ( message . invoke ( ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/149"}
{"input": "<s> inline fun debugWarning ( assert : ( ) - > Boolean , message : ( ) - > String ) { if ( BuildConfig . DEBUG & & assert . invoke ( ) ) {", "gt": "logError ( DebugException ( message . invoke ( ) ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/150"}
{"input": "<s> fun < T > normalSafeApiCall ( apiCall : ( ) - > T ) : T ? { return try { apiCall . invoke ( )", "gt": "} catch ( throwable : Throwable ) { \n logError ( throwable ) \n return null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/152"}
{"input": "<s> fun < T > safeFail ( throwable : Throwable ) : Resource < T > {", "gt": "val stackTraceMsg = throwable . getStackTracePretty ( ) \n return Resource . Failure ( false , null , null , stackTraceMsg ) \n }", "repo": "cloudstream", "task_id": "cloudstream/155"}
{"input": "<s> < T > safeApiCall ( apiCall : suspend ( ) - > T , ) : Resource < T > { return withContext ( Dispatchers . IO ) { try { Resource . Success ( apiCall . invoke ( ) ) } catch ( throwable : Throwable ) {", "gt": "logError ( throwable ) \n throwAbleToResource ( throwable ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/157"}
{"input": "<s> private fun getWebViewCookie ( url : String ) : String ? { return normalSafeApiCall {", "gt": "CookieManager . getInstance ( ) ? . getCookie ( url ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/160"}
{"input": "<s> private suspend fun proceed ( request : Request , cookies : Map < String , String > ) : Response { val userAgentMap = WebViewResolver . getWebViewUserAgent ( ) ? . let { mapOf ( \" <STR_LIT> \" to it ) } ? : emptyMap ( ) val headers = getHeaders ( request . headers . toMap ( ) + userAgentMap , cookies + request . cookies ) return app . baseClient . newCall (", "gt": "request . newBuilder ( ) \n . headers ( headers ) \n . build ( ) \n ) . await ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/162"}
{"input": "<s> fun registerExtractorAPI ( element : ExtractorApi ) { Log . i ( PLUGIN_TAG , \" <STR_LIT> \" )", "gt": "element . sourcePlugin = this . __filename \n extractorApis . add ( element ) \n }", "repo": "cloudstream", "task_id": "cloudstream/180"}
{"input": "<s> fun toSitePlugin ( ) : SitePlugin { return SitePlugin ( this . filePath , PROVIDER_STATUS_OK , maxOf ( 1 , version ) , 1 , internalName , internalName , emptyList ( ) , File ( this . filePath ) . name , null , null ,", "gt": "null , \n null , \n File ( this . filePath ) . length ( ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/181"}
{"input": "<s> private suspend fun maybeLoadPlugin ( context : Context , file : File ) { val name = file . name if ( file . extension = = \" <STR_LIT> \" | | file . extension = = \" <STR_LIT:3> \" ) { loadPlugin ( context , file , PluginData ( name , null , false , file . absolutePath , PLUGIN_VERSION_NOT_SET )", "gt": ") \n } else { \n Log . i ( TAG , \" <STR_LIT> \" ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/186"}
{"input": "<s> fun loadAllOnlinePlugins ( context : Context ) { ( getPluginsOnline ( ) ) . toList ( ) . apmap { pluginData - > loadPlugin ( context ,", "gt": "File ( pluginData . filePath ) , \n pluginData \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/188"}
{"input": "<s> fun checkSafeModeFile ( ) : Boolean { return normalSafeApiCall { val folder = File ( CLOUD_STREAM_FOLDER ) if ( ! folder . exists ( ) ) return @ normalSafeApiCall false val files = folder . listFiles { _ , name - >", "gt": "name . equals ( \" <STR_LIT> \" , ignoreCase = true ) \n } \n files ? . any ( ) \n } ? : false \n }", "repo": "cloudstream", "task_id": "cloudstream/190"}
{"input": "<s> fun getPluginSanitizedFileName ( name : String ) : String { return sanitizeFilename ( name ,", "gt": "true \n ) + \" <STR_LIT:.> \" + name . hashCode ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/191"}
{"input": "<s> fun convertRawGitUrl ( url : String ) : String { if ( getKey < Boolean > ( context ! ! . getString ( R . string . jsdelivr_proxy_key ) ) ! = true ) return url val match = GH_REGEX . find ( url ) ? : return url", "gt": "val ( user , repo , rest ) = match . destructured \n return \" <STR_LIT> \" \n }", "repo": "cloudstream", "task_id": "cloudstream/195"}
{"input": "<s> fun canVote ( pluginUrl : String ) : Boolean {", "gt": "if ( ! PluginManager . urlPlugins . contains ( pluginUrl ) ) return false \n return true \n }", "repo": "cloudstream", "task_id": "cloudstream/207"}
{"input": "<s> fun doWork ( ) : Result { context . createNotificationChannel ( BACKUP_CHANNEL_ID , BACKUP_CHANNEL_NAME , BACKUP_CHANNEL_DESCRIPTION ) setForeground ( ForegroundInfo ( BACKUP_NOTIFICATION_ID , backupNotificationBuilder . build ( ) ) )", "gt": "BackupUtils . backup ( context ) \n \n return Result . success ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/209"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "downloadScope . coroutineContext . cancel ( ) \n super . onDestroy ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/211"}
{"input": "<s> protected fun removeAccountKeys ( ) { removeKeys ( accountId ) val accounts = getAccounts ( ) ? . toMutableList ( ) ? : mutableListOf ( )", "gt": "accounts . remove ( accountIndex ) \n setKey ( accountsKey , accounts . toIntArray ( ) ) \n \n init ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/212"}
{"input": "<s> protected fun switchToNewAccount ( ) { val accounts = getAccounts ( )", "gt": "lastAccountIndex = accountIndex \n accountIndex = ( accounts ? . maxOrNull ( ) ? : 0 ) + 1 \n }", "repo": "cloudstream", "task_id": "cloudstream/214"}
{"input": "<s> protected fun registerAccount ( ) { setKey ( accountActiveKey , accountIndex ) val accounts = getAccounts ( ) ? . toMutableList ( ) ? : mutableListOf ( ) if ( ! accounts . contains ( accountIndex ) ) {", "gt": "accounts . add ( accountIndex ) \n } \n \n setKey ( accountsKey , accounts . toIntArray ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/215"}
{"input": "<s> fun changeAccount ( index : Int ) {", "gt": "accountIndex = index \n setKey ( accountActiveKey , index ) \n }", "repo": "cloudstream", "task_id": "cloudstream/216"}
{"input": "<s> private fun fixUrl ( url : String ) : String { return if ( url . startsWith ( \" <STR_LIT:/> \" ) ) host + url else if ( ! url . startsWith ( \" <STR_LIT> \" ) ) \" <STR_LIT> \"", "gt": "else url \n \n }", "repo": "cloudstream", "task_id": "cloudstream/217"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true \n removeAccountKeys ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/219"}
{"input": "<s> fun search ( name : String ) : List < SyncAPI . SyncSearchResult > ? { val data = searchShows ( name ) ? : return null return data . data ? . Page ? . media ? . map { SyncAPI . SyncSearchResult ( it . title . romaji ? : return null , this . name , it . id . toString ( ) ,", "gt": "getUrlFromId ( it . id ) , \n it . bannerImage \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/221"}
{"input": "<s> fun initGetUser ( ) { if ( getAuth ( ) = = null ) return ioSafe {", "gt": "getUser ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/226"}
{"input": "<s> private fun checkToken ( ) : Boolean { return unixTime > getKey ( accountId ,", "gt": "ANILIST_UNIXTIME_KEY , 0 L \n ) ! ! \n }", "repo": "cloudstream", "task_id": "cloudstream/227"}
{"input": "<s> private fun getAuth ( ) : String ? { return getKey ( accountId ,", "gt": "ANILIST_TOKEN_KEY \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/228"}
{"input": "<s> private fun fixUrl ( url : String ) : String { if ( url . startsWith ( \" <STR_LIT> \" ) ) { return url } if ( url . isEmpty ( ) ) { return \" \" } val startsWithNoHttp = url . startsWith ( \" <STR_LIT> \" ) if ( startsWithNoHttp ) { return \" <STR_LIT> \" } else { if ( url . startsWith ( <CHAR_LIT:/> ) ) {", "gt": "return host + url \n } \n return \" <STR_LIT> \" \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/231"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true \n removeAccountKeys ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/236"}
{"input": "<s> private fun getAuth ( ) : String ? { return getKey ( accountId ,", "gt": "MAL_TOKEN_KEY \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/238"}
{"input": "<s> private fun parseDateLong ( string : String ? ) : Long ? { return try { SimpleDateFormat ( \" <STR_LIT> \" ) . parse ( string ? : return null", "gt": ") ? . time ? . div ( <NUM_LIT:1000> ) \n } catch ( e : Exception ) { \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/244"}
{"input": "<s> private suspend fun checkMalToken ( ) { if ( unixTime > ( getKey ( accountId , MAL_UNIXTIME_KEY", "gt": ") ? : 0 L ) \n ) { \n refreshToken ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/249"}
{"input": "<s> private fun throwGotTooManyRequests ( ) {", "gt": "currentCoolDown = unixTimeMs + coolDownDuration \n throw ErrorLoadingException ( \" <STR_LIT> \" ) \n }", "repo": "cloudstream", "task_id": "cloudstream/254"}
{"input": "<s> private fun setAuthKey ( data : SubtitleOAuthEntity ? ) { if ( data = = null ) removeKey ( accountId , OPEN_SUBTITLES_USER_KEY )", "gt": "currentSession = data \n setKey ( accountId , OPEN_SUBTITLES_USER_KEY , data ) \n }", "repo": "cloudstream", "task_id": "cloudstream/255"}
{"input": "<s> override fun logOut ( ) { setAuthKey ( null )", "gt": "removeAccountKeys ( ) \n currentSession = getAuthKey ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/259"}
{"input": "<s> fun getUnixTime ( string : String ? ) : Long ? { return try { SimpleDateFormat ( simklDateFormat ) . apply { this . timeZone = TimeZone . getTimeZone ( \" <STR_LIT> \" ) } . parse ( string ? : return null ) ? . toInstant ( ) ? . epochSecond", "gt": "} catch ( e : Exception ) { \n logError ( e ) \n return null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/263"}
{"input": "<s> fun getDateTime ( unixTime : Long ? ) : String ? { return try { SimpleDateFormat ( simklDateFormat ) . apply { this . timeZone = TimeZone . getTimeZone ( \" <STR_LIT> \" ) } . format ( Date . from ( Instant . ofEpochSecond ( unixTime ? : return null ) )", "gt": ") \n } catch ( e : Exception ) { \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/264"}
{"input": "<s> override fun logOut ( ) {", "gt": "requireLibraryRefresh = true \n removeAccountKeys ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/279"}
{"input": "<s> private fun navigateToMainActivity ( ) { val mainIntent = Intent ( this , MainActivity : : class . java )", "gt": "startActivity ( mainIntent ) \n finish ( )", "repo": "cloudstream", "task_id": "cloudstream/283"}
{"input": "<s> override fun getItemOffsets ( outRect : Rect , view : View , parent : RecyclerView , state : RecyclerView . State ) { val layoutParams = view . layoutParams as RecyclerView . LayoutParams layoutParams . width = size", "gt": "layoutParams . height = size \n view . layoutParams = layoutParams \n }", "repo": "cloudstream", "task_id": "cloudstream/284"}
{"input": "<s> private fun afterPluginsLoaded ( forceReload : Boolean ) { if ( forceReload ) {", "gt": "synchronized ( cache ) { \n cache . clear ( ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/285"}
{"input": "<s> suspend fun waitForHomeDelay ( ) { val delta = api . sequentialMainPageScrollDelay + api . lastHomepageRequest - unixTimeMS", "gt": "if ( delta < 0 ) return \n delay ( delta ) \n }", "repo": "cloudstream", "task_id": "cloudstream/288"}
{"input": "<s> suspend fun extractorVerifierJob ( extractorData : String ? ) { safeApiCall {", "gt": "api . extractorVerifierJob ( extractorData ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/289"}
{"input": "<s> private fun RemoteMediaClient . getItemIndex ( ) : Int ? { return try { val index = this . mediaQueue . itemIds . indexOf ( this . currentItem ? . itemId ? : 0 )", "gt": "if ( index < 0 ) null else index \n } catch ( e : Exception ) { \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/291"}
{"input": "<s> private fun getCurrentMetaData ( ) : MetadataHolder ? { return try { val data = remoteMediaClient ? . mediaInfo ? . customData ? . toString ( )", "gt": "data ? . toKotlinObject ( ) \n } catch ( e : Exception ) { \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/293"}
{"input": "<s> private fun getNextViewPos ( fromPos : Int , direction : Int ) : Int { val offset = calcOffsetToNextView ( direction ) if ( hitBorder ( fromPos , offset ) ) {", "gt": "return fromPos \n } \n \n return fromPos + offset \n }", "repo": "cloudstream", "task_id": "cloudstream/298"}
{"input": "<s> private fun hitBorder ( from : Int , offset : Int ) : Boolean { val spanCount = spanCount return if ( abs ( offset ) = = 1 ) { val spanIndex = from % spanCount val newSpanIndex = spanIndex + offset newSpanIndex < 0 | | newSpanIndex > = spanCount", "gt": "} else { \n val newPos = from + offset \n newPos in spanCount . . - 1 \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/299"}
{"input": "<s> override fun onChildAttachedToWindow ( child : View ) { child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) val observed = if ( isHorizontal ) child . measuredHeight else child . measuredWidth if ( observed > biggestObserved ) { biggestObserved = observed children . forEach { it . updateMaxSize ( ) }", "gt": "} else { \n child . updateMaxSize ( ) \n } \n super . onChildAttachedToWindow ( child ) \n }", "repo": "cloudstream", "task_id": "cloudstream/301"}
{"input": "<s> fun downloadStatusEvent ( data : Pair < Int , VideoDownloadManager . DownloadType > ) { val ( id , status ) = data", "gt": "if ( id = = persistentId ) { \n currentMetaData . status = status \n setStatus ( status ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/303"}
{"input": "<s> fun downloadProgressEvent ( data : Triple < Int , Long , Long > ) { val ( id , bytesDownloaded , bytesTotal ) = data if ( id = = persistentId ) { currentMetaData . downloadedLength = bytesDownloaded", "gt": "currentMetaData . totalLength = bytesTotal \n \n setProgress ( bytesDownloaded , bytesTotal ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/304"}
{"input": "<s> override fun setStatus ( status : DownloadStatusTell ? ) { mainText ? . post { val txt = when ( status ) { DownloadStatusTell . IsPaused - > R . string . download_paused DownloadStatusTell . IsDownloading - > R . string . downloading DownloadStatusTell . IsDone - > R . string . downloaded else - > R . string . download }", "gt": "mainText ? . setText ( txt ) \n } \n super . setStatus ( status ) \n \n }", "repo": "cloudstream", "task_id": "cloudstream/307"}
{"input": "<s> override fun resetView ( ) { setStatus ( null ) currentMetaData = DownloadMetadata ( 0 , 0 , 0 , null )", "gt": "isZeroBytes = true \n progressBar . progress = 0 \n }", "repo": "cloudstream", "task_id": "cloudstream/310"}
{"input": "<s> override fun applyTransformation ( interpolatedTime : Float , t : Transformation ? ) { super . applyTransformation ( interpolatedTime , t )", "gt": "val value = from + ( to - from ) * interpolatedTime \n progressBar . progress = value . toInt ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/311"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is DownloadChildViewHolder - > { \n holder . bind ( cardList [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/313"}
{"input": "<s> fun newInstance ( headerName : String , folder : String ) : Bundle { return Bundle ( ) . apply { putString ( \" <STR_LIT> \" , folder )", "gt": "putString ( \" <STR_LIT> \" , headerName ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/314"}
{"input": "<s> override fun onDestroyView ( ) { downloadDeleteEventListener ? . let { VideoDownloadManager . downloadDeleteEvent - = it }", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/315"}
{"input": "<s> override fun onDestroyView ( ) { if ( downloadDeleteEventListener ! = null ) { VideoDownloadManager . downloadDeleteEvent - = downloadDeleteEventListener ! !", "gt": "downloadDeleteEventListener = null \n } \n binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/319"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is DownloadHeaderViewHolder - > { \n holder . bind ( cardList [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/322"}
{"input": "<s> override fun getItemOffsets ( outRect : Rect , view : View , parent : RecyclerView , state : RecyclerView . State ) { if ( parent . getChildAdapterPosition ( view ) = = 0 ) { customView . measure ( View . MeasureSpec . makeMeasureSpec ( parent . measuredWidth , View . MeasureSpec . AT_MOST ) , View . MeasureSpec . makeMeasureSpec ( parent . measuredHeight , View . MeasureSpec . AT_MOST ) )", "gt": "outRect . set ( 0 , customView . measuredHeight , 0 , 0 ) \n } else { \n outRect . setEmpty ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/324"}
{"input": "<s> override fun onDestroyView ( ) { bottomSheetDialog ? . ownHide ( )", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/330"}
{"input": "<s> private fun fixGrid ( ) { activity ? . getSpanCount ( ) ? . let { currentSpan = it", "gt": "} \n configEvent . invoke ( currentSpan ) \n }", "repo": "cloudstream", "task_id": "cloudstream/331"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is ParentViewHolder - > { \n holder . bind ( items [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/333"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) { is HeaderViewHolder - > { }", "gt": "else - > super . onBindViewHolder ( holder , position - headItems ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/336"}
{"input": "<s> override fun onViewDetachedFromWindow ( holder : RecyclerView . ViewHolder ) { when ( holder ) { is HeaderViewHolder - > { holder . onViewDetachedFromWindow ( )", "gt": "} \n \n else - > super . onViewDetachedFromWindow ( holder ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/338"}
{"input": "<s> override fun onViewAttachedToWindow ( holder : RecyclerView . ViewHolder ) { when ( holder ) { is HeaderViewHolder - > { holder . onViewAttachedToWindow ( )", "gt": "} \n \n else - > super . onViewAttachedToWindow ( holder ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/339"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is CardViewHolder - > { \n holder . bind ( items [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/342"}
{"input": "<s> override fun transformPage ( page : View , position : Float ) { val padding = ( - position * page . width / <NUM_LIT:2> ) . toInt ( )", "gt": "page . setPadding ( \n padding , 0 , \n - padding , 0 \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/343"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/344"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) { binding ? . viewpager ? . currentItem ? . let { currentItem - > outState . putInt ( VIEWPAGER_ITEM_KEY , currentItem )", "gt": "} \n super . onSaveInstanceState ( outState ) \n }", "repo": "cloudstream", "task_id": "cloudstream/345"}
{"input": "<s> fun switchList ( name : String ) { currentSyncApi = availableSyncApis [ availableApiNames . indexOf ( name ) ]", "gt": "_currentApiName . postValue ( currentSyncApi ? . name ) \n reloadPages ( true ) \n }", "repo": "cloudstream", "task_id": "cloudstream/348"}
{"input": "<s> override fun onCleared ( ) {", "gt": "MainActivity . reloadLibraryEvent - = : : reloadPages \n super . onCleared ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/351"}
{"input": "<s> fun rebind ( ) {", "gt": "unbound . addAll ( <NUM_LIT> . pages . size ) \n this . notifyItemRangeChanged ( 0 , pages . size ) \n }", "repo": "cloudstream", "task_id": "cloudstream/357"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "currentColor = 0 \n super . onDestroy ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/358"}
{"input": "<s> private fun requestAudioFocus ( ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . O ) {", "gt": "activity ? . requestLocalAudioFocus ( AppUtils . getFocusRequest ( ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/360"}
{"input": "<s> private fun onSubStyleChanged ( style : SaveCaptionStyle ) { if ( player is CS3IPlayer ) {", "gt": "player . updateSubtitleStyle ( style ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/361"}
{"input": "<s> fun nextResize ( ) {", "gt": "resizeMode = ( resizeMode + 1 ) % PlayerResize . values ( ) . size \n resize ( resizeMode , true ) \n }", "repo": "cloudstream", "task_id": "cloudstream/363"}
{"input": "<s> override fun onStop ( ) {", "gt": "player . onStop ( ) \n super . onStop ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/365"}
{"input": "<s> override fun onResume ( ) { context ? . let { ctx - >", "gt": "player . onResume ( ctx ) \n } \n \n super . onResume ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/366"}
{"input": "<s> private fun reloadSubs ( ) { exoPlayer ? . applicationLooper ? . let { try { Handler ( it ) . post { try { seekTime ( <NUM_LIT> , source = PlayerEventSource . Player ) } catch ( e : Exception ) { logError ( e ) } }", "gt": "} catch ( e : Exception ) { \n logError ( e ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/369"}
{"input": "<s> < Tracks . Group > . getFormats ( ) : List < Pair < Format , Int > > { return this . map {", "gt": "it . getFormats ( ) \n } . flatten ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/371"}
{"input": "<s> override fun setSubtitleOffset ( offset : Long ) {", "gt": "currentSubtitleOffset = offset \n currentTextRenderer ? . setRenderOffsetMs ( offset ) \n }", "repo": "cloudstream", "task_id": "cloudstream/375"}
{"input": "<s> override fun onResume ( context : Context ) {", "gt": "if ( exoPlayer = = null ) \n reloadPlayer ( context ) \n }", "repo": "cloudstream", "task_id": "cloudstream/382"}
{"input": "<s> override fun release ( ) {", "gt": "imageGenerator . release ( ) \n releasePlayer ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/383"}
{"input": "<s> override fun setPlaybackSpeed ( speed : Float ) {", "gt": "exoPlayer ? . setPlaybackSpeed ( speed ) \n playBackSpeed = speed \n }", "repo": "cloudstream", "task_id": "cloudstream/384"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) private fun createOnlineSource ( headers : Map < String , String > ) : HttpDataSource . Factory { val source = OkHttpDataSource . Factory ( app . baseClient ) . setUserAgent ( USER_AGENT ) return source . apply {", "gt": "setDefaultRequestProperties ( headers ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/385"}
{"input": "<s> private fun getCurrentTimestamp ( writePosition : Long ? = null ) : EpisodeSkip . SkipStamp ? { val position = writePosition ? : this @ CS3IPlayer . getPosition ( ) ? : return null for ( lastTimeStamp in lastTimeStamps ) { if ( lastTimeStamp . startMs < = position & & ( position + ( toleranceBeforeUs / <NUM_LIT> ) + 1 ) < lastTimeStamp . endMs ) {", "gt": "return lastTimeStamp \n } \n } \n return null \n }", "repo": "cloudstream", "task_id": "cloudstream/388"}
{"input": "<s> override fun seekTo ( time : Long , source : PlayerEventSource ) {", "gt": "updatedTime ( time , source ) \n exoPlayer ? . seekTo ( time ) \n }", "repo": "cloudstream", "task_id": "cloudstream/389"}
{"input": "<s> private fun ExoPlayer . seekTime ( time : Long , source : PlayerEventSource ) {", "gt": "updatedTime ( currentPosition + time , source ) \n seekTo ( currentPosition + time ) \n }", "repo": "cloudstream", "task_id": "cloudstream/390"}
{"input": "<s> fun updateForcedEncoding ( context : Context ) { val settingsManager = PreferenceManager . getDefaultSharedPreferences ( context ) val value = settingsManager . getString ( context . getString ( R . string . subtitles_encoding_key ) , null ) overrideEncoding = if ( value . isNullOrBlank ( ) ) {", "gt": "null \n } else { \n value \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/392"}
{"input": "<s> fun trimStr ( string : String ) : String { return string . trimStart ( ) . trim ( <STR_LIT> , <STR_LIT> ) . replace ( Regex ( \" <STR_LIT:[> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> <STR_LIT> \" ) ,", "gt": "\" \" \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/393"}
{"input": "<s> override fun onUserLeaveHint ( ) {", "gt": "super . onUserLeaveHint ( ) \n CommonActivity . onUserLeaveHint ( this ) \n }", "repo": "cloudstream", "task_id": "cloudstream/399"}
{"input": "<s> private fun playLink ( url : String ) { this . navigate ( R . id . global_to_navigation_player , GeneratorPlayer . newInstance ( LinkGenerator ( listOf ( BasicLink ( url )", "gt": ") \n ) \n ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/400"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n CommonActivity . setActivityInstance ( this ) \n }", "repo": "cloudstream", "task_id": "cloudstream/401"}
{"input": "<s> override fun next ( ) {", "gt": "if ( hasNext ( ) ) \n currentIndex + + \n }", "repo": "cloudstream", "task_id": "cloudstream/402"}
{"input": "<s> override fun prev ( ) {", "gt": "if ( hasPrev ( ) ) \n currentIndex - - \n }", "repo": "cloudstream", "task_id": "cloudstream/403"}
{"input": "<s> fun generateLinks ( clearCache : Boolean , type : LoadType , callback : ( Pair < ExtractorLink ? , ExtractorUri ? > ) - > Unit , subtitleCallback : ( SubtitleData ) - > Unit , offset : Int ) : Boolean { subtitles . forEach ( subtitleCallback ) val allowedTypes = type . toSet ( ) links . forEach { if ( allowedTypes . contains ( it . type ) ) { callback . invoke ( it to null )", "gt": "} \n } \n \n return true \n }", "repo": "cloudstream", "task_id": "cloudstream/405"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "playerBinding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/407"}
{"input": "<s> override fun subtitlesChanged ( ) {", "gt": "playerBinding ? . playerSubtitleOffsetBtt ? . isGone = \n player . getCurrentPreferredSubtitle ( ) = = null \n }", "repo": "cloudstream", "task_id": "cloudstream/409"}
{"input": "<s> protected fun enterFullscreen ( ) { if ( isFullScreenPlayer ) { activity ? . hideSystemUI ( ) if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . P & & fullscreenNotch ) { val params = activity ? . window ? . attributes params ? . layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES", "gt": "activity ? . window ? . attributes = params \n } \n } \n updateOrientation ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/410"}
{"input": "<s> override fun onResume ( ) {", "gt": "enterFullscreen ( ) \n super . onResume ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/411"}
{"input": "<s> override fun onDestroy ( ) { exitFullscreen ( ) player . release ( )", "gt": "player . releaseCallbacks ( ) \n super . onDestroy ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/412"}
{"input": "<s> private fun toggleShowDelayed ( ) { if ( doubleTapEnabled | | doubleTapPauseEnabled ) { val index = currentDoubleTapIndex playerBinding ? . playerHolder ? . postDelayed ( { if ( index = = currentDoubleTapIndex ) { onClickChange ( ) }", "gt": "} , DOUBLE_TAB_MINIMUM_TIME_BETWEEN ) \n } else { \n onClickChange ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/418"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putLong ( SUBTITLE_DELAY_BUNDLE_KEY , subtitleDelay ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "cloudstream", "task_id": "cloudstream/423"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) private fun toggleRotate ( ) { activity ? . let {", "gt": "toggleOrientationWithSensor ( it ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/424"}
{"input": "<s> override fun playerDimensionsLoaded ( width : Int , height : Int ) {", "gt": "isVerticalOrientation = height > width \n updateOrientation ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/425"}
{"input": "<s> override fun playerStatusChanged ( ) { if ( player . getIsPlaying ( ) ) {", "gt": "viewModel . forceClearCache = false \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/432"}
{"input": "<s> private fun closestQuality ( target : Int ? ) : Qualities {", "gt": "if ( target = = null ) return Qualities . Unknown \n return Qualities . values ( ) . minBy { abs ( it . value - target ) } \n }", "repo": "cloudstream", "task_id": "cloudstream/435"}
{"input": "<s> private fun startPlayer ( ) { if ( isActive ) return val links = sortLinks ( currentQualityProfile ) if ( links . isEmpty ( ) ) {", "gt": "noLinksFound ( ) \n return \n } \n loadLink ( links . first ( ) , false ) \n }", "repo": "cloudstream", "task_id": "cloudstream/440"}
{"input": "<s> override fun nextEpisode ( ) { isNextEpisode = true", "gt": "player . release ( ) \n viewModel . loadLinksNext ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/441"}
{"input": "<s> override fun prevEpisode ( ) { isNextEpisode = true", "gt": "player . release ( ) \n viewModel . loadLinksPrev ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/442"}
{"input": "<s> override fun nextMirror ( ) { val links = sortLinks ( currentQualityProfile ) if ( links . isEmpty ( ) ) { noLinksFound ( ) return } val newIndex = links . indexOf ( currentSelectedLink ) + 1 if ( newIndex > = links . size ) { noLinksFound ( )", "gt": "return \n } \n \n loadLink ( links [ newIndex ] , true ) \n }", "repo": "cloudstream", "task_id": "cloudstream/444"}
{"input": "<s> override fun onDestroy ( ) { ResultFragment . updateUI ( )", "gt": "currentVerifyLink ? . cancel ( ) \n super . onDestroy ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/445"}
{"input": "<s> private fun autoSelectSubtitles ( ) { normalSafeApiCall {", "gt": "if ( ! autoSelectFromSettings ( ) ) { \n autoSelectFromDownloads ( ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/446"}
{"input": "<s> override fun playerDimensionsLoaded ( width : Int , height : Int ) {", "gt": "super . playerDimensionsLoaded ( width , height ) \n setPlayerDimen ( width to height ) \n }", "repo": "cloudstream", "task_id": "cloudstream/447"}
{"input": "<s> private fun unwrapBundle ( savedInstanceState : Bundle ? ) { Log . i ( TAG , \" <STR_LIT> \" ) savedInstanceState ? . let { bundle - >", "gt": "sync . addSyncs ( bundle . getSerializable ( \" <STR_LIT> \" ) as ? HashMap < String , String > ? ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/448"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/449"}
{"input": "<s> override fun onTimestamp ( timestamp : EpisodeSkip . SkipStamp ? ) { if ( timestamp ! = null ) { playerBinding ? . skipChapterButton ? . setText ( timestamp . uiText ) displayTimeStamp ( true ) val currentIndex = skipIndex playerBinding ? . skipChapterButton ? . handler ? . postDelayed ( { if ( skipIndex = = currentIndex ) displayTimeStamp ( false )", "gt": "} , <NUM_LIT> ) \n } else { \n displayTimeStamp ( false ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/450"}
{"input": "<s> public void setFinalStreamEndPositionUs ( long streamEndPositionUs ) {", "gt": "checkState ( isCurrentStreamFinal ( ) ) ; \n this . finalStreamEndPositionUs = streamEndPositionUs ; \n }", "repo": "cloudstream", "task_id": "cloudstream/452"}
{"input": "<s> @ Override protected void onStreamChanged ( Format [ ] formats , long startPositionUs , long offsetUs ) { streamFormat = formats [ 0 ] ; if ( decoder ! = null ) {", "gt": "decoderReplacementState = REPLACEMENT_STATE_SIGNAL_END_OF_STREAM ; \n } else { \n initDecoder ( ) ; \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/453"}
{"input": "<s> @ Override protected void onPositionReset ( long positionUs , boolean joining ) { clearOutput ( ) ; inputStreamEnded = false ; outputStreamEnded = false ; finalStreamEndPositionUs = C . TIME_UNSET ; if ( decoderReplacementState ! = REPLACEMENT_STATE_NONE ) { replaceDecoder ( ) ;", "gt": "} else { \n releaseBuffers ( ) ; \n checkNotNull ( decoder ) . flush ( ) ; \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/454"}
{"input": "<s> @ Override protected void onDisabled ( ) { streamFormat = null ; finalStreamEndPositionUs = C . TIME_UNSET ;", "gt": "clearOutput ( ) ; \n releaseDecoder ( ) ; \n }", "repo": "cloudstream", "task_id": "cloudstream/455"}
{"input": "<s> private void releaseBuffers ( ) { nextInputBuffer = null ; nextSubtitleEventIndex = C . INDEX_UNSET ; if ( subtitle ! = null ) { subtitle . release ( ) ; subtitle = null ; }", "gt": "if ( nextSubtitle ! = null ) { \n nextSubtitle . release ( ) ; \n nextSubtitle = null ; \n }", "repo": "cloudstream", "task_id": "cloudstream/457"}
{"input": "<s> private void releaseDecoder ( ) { releaseBuffers ( ) ; checkNotNull ( decoder ) . release ( ) ;", "gt": "decoder = null ; \n decoderReplacementState = REPLACEMENT_STATE_NONE ; \n }", "repo": "cloudstream", "task_id": "cloudstream/458"}
{"input": "<s> private void initDecoder ( ) {", "gt": "waitingForKeyFrame = true ; \n decoder = decoderFactory . createDecoder ( checkNotNull ( streamFormat ) ) ; \n }", "repo": "cloudstream", "task_id": "cloudstream/459"}
{"input": "<s> private void replaceDecoder ( ) {", "gt": "releaseDecoder ( ) ; \n initDecoder ( ) ; \n }", "repo": "cloudstream", "task_id": "cloudstream/460"}
{"input": "<s> @ SuppressWarnings ( \" <STR_LIT> \" ) @ Override public boolean handleMessage ( Message msg ) { switch ( msg . what ) { case MSG_UPDATE_OUTPUT : invokeUpdateOutputInternal ( ( List < Cue > ) msg . obj ) ;", "gt": "return true ; \n default : \n throw new IllegalStateException ( ) ; \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/463"}
{"input": "<s> private void handleDecoderError ( SubtitleDecoderException e ) { Log . e ( TAG , \" <STR_LIT> \" + streamFormat , e ) ;", "gt": "clearOutput ( ) ; \n replaceDecoder ( ) ; \n }", "repo": "cloudstream", "task_id": "cloudstream/464"}
{"input": "<s> fun loadLinks ( episode : Int ) {", "gt": "generator ? . goto ( episode ) \n loadLinks ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/465"}
{"input": "<s> fun loadLinksPrev ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( generator ? . hasPrev ( ) = = true ) { \n generator ? . prev ( ) \n loadLinks ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/466"}
{"input": "<s> fun loadLinksNext ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( generator ? . hasNext ( ) = = true ) { \n generator ? . next ( ) \n loadLinks ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/467"}
{"input": "<s> fun getNextMeta ( ) : Any ? { return normalSafeApiCall { if ( generator ? . hasNext ( ) = = false ) return @ normalSafeApiCall null", "gt": "generator ? . getCurrent ( offset = 1 ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/468"}
{"input": "<s> fun attachGenerator ( newGenerator : IGenerator ? ) { if ( generator = = null ) {", "gt": "generator = newGenerator \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/469"}
{"input": "<s> @ RequiresApi ( Build . VERSION_CODES . O ) private fun getRemoteAction ( activity : Activity , id : Int , @ StringRes title : Int , event : CSPlayerEvent ) : RemoteAction { val text = activity . getString ( title ) return RemoteAction ( Icon . createWithResource ( activity , id ) ,", "gt": "text , \n text , \n getPen ( activity , event . value ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/472"}
{"input": "<s> fun getId ( ) : String {", "gt": "return if ( origin = = SubtitleOrigin . EMBEDDED_IN_VIDEO ) url \n else \" <STR_LIT> \" \n }", "repo": "cloudstream", "task_id": "cloudstream/473"}
{"input": "<s> fun initSubtitles ( subView : SubtitleView ? , subHolder : FrameLayout ? , style : SaveCaptionStyle ? ) { subtitleView = subView subView ? . let { sView - > ( sView . parent as ViewGroup ? ) ? . removeView ( sView ) subHolder ? . addView ( sView )", "gt": "} \n style ? . let { \n setSubStyle ( it ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/477"}
{"input": "<s> fun new16by9 ( width : Int ) : ImageParams { if ( width < <NUM_LIT:100> ) { return DEFAULT }", "gt": "return ImageParams ( \n width / <NUM_LIT:4> , \n ( width * <NUM_LIT:9> ) / ( <NUM_LIT:4> * <NUM_LIT:16> ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/478"}
{"input": "<s> fun new ( ) : IPreviewGenerator { return if ( SettingsFragment . isTrueTvSettings ( ) ) {", "gt": "empty ( ) \n } else { \n PreviewGenerator ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/479"}
{"input": "<s> private fun rescale ( image : Bitmap , params : ImageParams ) : Bitmap { if ( image . width < = params . width & & image . height < = params . height ) return image val new = image . scale ( params . width , params . height )", "gt": "if ( new ! = image ) { \n image . recycle ( ) \n } \n return new \n }", "repo": "cloudstream", "task_id": "cloudstream/480"}
{"input": "<s> override fun release ( ) { lastGenerator . release ( ) currentGenerator . release ( )", "gt": "lastGenerator = NoPreviewGenerator ( ) \n currentGenerator = NoPreviewGenerator ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/482"}
{"input": "<s> fun load ( context : Context , link : ExtractorUri , keepCache : Boolean ) { clear ( keepCache ) currentGenerator = Mp4PreviewGenerator ( params ) . apply {", "gt": "load ( keepCache = keepCache , context = context , uri = link . uri ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/483"}
{"input": "<s> private fun clear ( ) { synchronized ( images ) { currentJob ? . cancel ( ) images = arrayOf ( )", "gt": "prefixSum = arrayOf ( ) \n loadedImages = 0 \n totalImages = 0 \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/484"}
{"input": "<s> override fun release ( ) {", "gt": "clear ( ) \n images = arrayOf ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/485"}
{"input": "<s> fun load ( url : String , headers : Map < String , String > ) { currentJob ? . cancel ( ) currentJob = ioSafe { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "clear ( true ) \n retriever . setDataSource ( url , headers ) \n start ( this ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/488"}
{"input": "<s> fun load ( keepCache : Boolean , context : Context , uri : Uri ) { currentJob ? . cancel ( ) currentJob = ioSafe { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "clear ( keepCache ) \n retriever . setDataSource ( context , uri ) \n start ( this ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/489"}
{"input": "<s> override fun release ( ) {", "gt": "currentJob ? . cancel ( ) \n clear ( false ) \n }", "repo": "cloudstream", "task_id": "cloudstream/490"}
{"input": "<s> override fun next ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( hasNext ( ) ) \n currentIndex + + \n }", "repo": "cloudstream", "task_id": "cloudstream/491"}
{"input": "<s> override fun prev ( ) { Log . i ( TAG , \" <STR_LIT> \" )", "gt": "if ( hasPrev ( ) ) \n currentIndex - - \n }", "repo": "cloudstream", "task_id": "cloudstream/492"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is PriorityViewHolder - > holder . bind ( items [ position ] ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/495"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is ProfilesViewHolder - > holder . bind ( items [ position ] , position ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/497"}
{"input": "<s> fun setProfileName ( profile : Int , name : String ? ) { val path = \" <STR_LIT> \" if ( name = = null ) {", "gt": "removeKey ( path ) \n } else { \n setKey ( path , name . trim ( ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/499"}
{"input": "<s> fun setQualityProfileType ( profile : Int , type : QualityProfileType ? ) { val path = \" <STR_LIT> \" if ( type = = QualityProfileType . None ) {", "gt": "removeKey ( path ) \n } else { \n setKey ( path , type ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/503"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/505"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n clickCallback = null \n }", "repo": "cloudstream", "task_id": "cloudstream/506"}
{"input": "<s> fun search ( context : Context ? , query : String , isQuickSearch : Boolean ) : Boolean { ( providers ? : context ? . filterProviderByPreferredMedia ( hasHomePageIsRequired = false ) ? . map { it . name } ? . toSet ( ) ) ? . let { active - > searchViewModel . searchAndCancel ( query = query , ignoreSettings = false , providersActive = active , isQuickSearch = isQuickSearch", "gt": ") \n return true \n } \n return false \n }", "repo": "cloudstream", "task_id": "cloudstream/507"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n fixGrid ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/509"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) { is CardViewHolder - > { holder . bind ( actors [ position ] . actor , actors [ position ] . isInverted , position ) { actors [ position ] . isInverted = ! actors [ position ] . isInverted", "gt": "this . notifyItemChanged ( position ) \n } \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/511"}
{"input": "<s> override fun onViewDetachedFromWindow ( holder : RecyclerView . ViewHolder ) { if ( holder . itemView . hasFocus ( ) ) {", "gt": "holder . itemView . clearFocus ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/514"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) { is EpisodeCardViewHolderLarge - > { holder . bind ( getItem ( position ) ) }", "gt": "is EpisodeCardViewHolderSmall - > { \n holder . bind ( getItem ( position ) ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/517"}
{"input": "<s> override fun nextMirror ( ) {", "gt": "currentTrailerIndex + + \n loadTrailer ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/527"}
{"input": "<s> override fun playerError ( exception : Throwable ) { if ( player . getIsPlaying ( ) ) {", "gt": "super . playerError ( exception ) \n } else { \n nextMirror ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/528"}
{"input": "<s> private fun setFocusUpAndDown ( upper : View ? , down : View ? ) { if ( upper = = null | | down = = null ) return", "gt": "upper . nextFocusDownId = down . id \n down . nextFocusUpId = upper . id \n }", "repo": "cloudstream", "task_id": "cloudstream/530"}
{"input": "<s> private fun reloadViewModel ( forceReload : Boolean ) { if ( ! viewModel . hasLoaded ( ) | | forceReload ) { val storedData = getStoredData ( ) ? : return viewModel . load ( activity , storedData . url , storedData . apiName , storedData . showFillers ,", "gt": "storedData . dubStatus , \n storedData . start \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/531"}
{"input": "<s> override fun onStop ( ) {", "gt": "afterPluginsLoadedEvent - = : : reloadViewModel \n super . onStop ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/533"}
{"input": "<s> private fun updateUI ( id : Int ? ) {", "gt": "syncModel . updateUserData ( ) \n viewModel . reloadEpisodes ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/534"}
{"input": "<s> override fun onDestroyView ( ) { binding = null", "gt": "updateUIEvent - = : : updateUI \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/536"}
{"input": "<s> private fun handleSelection ( data : Any ) { when ( data ) { is EpisodeRange - > { viewModel . changeRange ( data ) } is Int - > { viewModel . changeSeason ( data ) } is DubStatus - > { viewModel . changeDubStatus ( data ) }", "gt": "is String - > { \n setRecommendations ( currentRecommendations , data ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/538"}
{"input": "<s> private fun RecyclerView ? . setAdapter ( ) { this ? . adapter = SelectAdaptor { data - >", "gt": "handleSelection ( data ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/540"}
{"input": "<s> private fun focusPlayButton ( ) { binding ? . resultPlayMovie ? . requestFocus ( )", "gt": "binding ? . resultPlaySeries ? . requestFocus ( ) \n binding ? . resultResumeSeries ? . requestFocus ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/541"}
{"input": "<s> private fun reloadViewModel ( forceReload : Boolean ) { if ( ! viewModel . hasLoaded ( ) | | forceReload ) { val storedData = getStoredData ( ) ? : return viewModel . load ( activity , storedData . url , storedData . apiName , storedData . showFillers ,", "gt": "storedData . dubStatus , \n storedData . start \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/542"}
{"input": "<s> override fun onStop ( ) {", "gt": "afterPluginsLoadedEvent - = : : reloadViewModel \n super . onStop ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/544"}
{"input": "<s> private fun toggleEpisodes ( show : Boolean ) { binding ? . apply { episodesShadow . fade ( show ) episodeHolderTv . fade ( show ) if ( episodesShadow . isRtl ( ) ) { episodesShadowBackground . scaleX = - <NUM_LIT>", "gt": "} else { \n episodesShadowBackground . scaleX = <NUM_LIT> \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/545"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) { super . onConfigurationChanged ( newConfig )", "gt": "uiReset ( ) \n fixPlayerSize ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/546"}
{"input": "<s> override fun playerDimensionsLoaded ( width : Int , height : Int ) {", "gt": "playerWidthHeight = width to height \n fixPlayerSize ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/547"}
{"input": "<s> fun txt ( status : DubStatus ? ) : UiText ? { return txt ( when ( status ) { DubStatus . Dubbed - > R . string . app_dubbed_text", "gt": "DubStatus . Subbed - > R . string . app_subbed_text \n else - > null \n } \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/549"}
{"input": "<s> fun SelectPopup . getTitle ( context : Context ) : String { return when ( this ) { is SelectPopup . SelectArray - > text . asString ( context )", "gt": "is SelectPopup . SelectText - > text . asString ( context ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/552"}
{"input": "<s> fun clear ( ) {", "gt": "currentResponse = null \n _page . postValue ( null ) \n }", "repo": "cloudstream", "task_id": "cloudstream/554"}
{"input": "<s> private fun filterName ( name : String ? ) : String ? { if ( name = = null ) return null Regex ( \" <STR_LIT> \" ) . find ( name ) ? . groupValues ? . get ( 1 ) ? . let {", "gt": "if ( it . isEmpty ( ) ) \n return null \n } \n return name \n }", "repo": "cloudstream", "task_id": "cloudstream/556"}
{"input": "<s> private fun downloadSubtitle ( context : Context ? , link : SubtitleData , meta : VideoDownloadManager . DownloadEpisodeMetadata , ) { context ? . let { ctx - > val fileName = VideoDownloadManager . getFileName ( ctx , meta ) val folder = getFolder ( meta . type ? : return , meta . mainName ) downloadSubtitle ( ctx , ExtractorSubtitleLink ( link . name , link . url , \" \" ) ,", "gt": "fileName , \n folder \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/559"}
{"input": "<s> private fun startChromecast ( activity : Activity ? , result : ResultEpisode , isVisible : Boolean = true ) { if ( activity = = null ) return loadLinks ( result , isVisible = isVisible , LoadType . Chromecast ) { data - >", "gt": "startChromecast ( activity , result , data . links , data . subs , 0 ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/561"}
{"input": "<s> fun cancelLinks ( ) { currentLoadLinkJob ? . cancel ( )", "gt": "currentLoadLinkJob = null \n _loadedLinks . postValue ( null ) \n }", "repo": "cloudstream", "task_id": "cloudstream/564"}
{"input": "<s> private fun postPopup ( text : UiText , options : List < UiText > , callback : suspend ( Int ? ) - > Unit ) { _selectPopup . postValue ( SelectPopup . SelectText ( text , options ) { value - > viewModelScope . launchSafe { _selectPopup . postValue ( null )", "gt": "callback . invoke ( value ) \n } \n } \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/565"}
{"input": "<s> @ JvmName ( \" <STR_LIT> \" ) private fun postPopup ( text : UiText , options : List < Pair < UiText , Int > > , callback : suspend ( Int ? ) - > Unit ) { _selectPopup . postValue ( SelectPopup . SelectArray ( text , options , ) { value - > viewModelScope . launchSafe { _selectPopup . postValue ( null )", "gt": "callback . invoke ( value ) \n } \n } \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/566"}
{"input": "<s> private fun loadLinks ( result : ResultEpisode , isVisible : Boolean , type : LoadType , clearCache : Boolean = false , work : suspend ( CoroutineScope . ( LinkLoadingResult ) - > Unit ) ) { currentLoadLinkJob ? . cancel ( ) currentLoadLinkJob = ioSafe { val links = loadLinks ( result , isVisible = isVisible , type = type , clearCache = clearCache", "gt": ") \n if ( ! this . isActive ) return @ ioSafe \n work ( links ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/567"}
{"input": "<s> private suspend fun updateFillers ( name : String ) { fillers = ioWorkSafe {", "gt": "FillerEpisodeCheck . getFillerEpisodes ( name ) \n } ? : emptyMap ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/571"}
{"input": "<s> fun reloadEpisodes ( ) { if ( currentResponse ? . isMovie ( ) = = true ) { postMovie ( ) } else { _episodes . postValue ( Resource . Success ( getEpisodes ( currentIndex ? : return , currentRange ? : return ) )", "gt": ") \n _movie . postValue ( null ) \n } \n postResume ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/573"}
{"input": "<s> private fun postFavorites ( loadResponse : LoadResponse ) { val id = loadResponse . getId ( )", "gt": "val isFavorite = getFavoritesData ( id ) ! = null \n _favoriteStatus . postValue ( isFavorite ) \n }", "repo": "cloudstream", "task_id": "cloudstream/575"}
{"input": "<s> override fun onViewDetachedFromWindow ( holder : RecyclerView . ViewHolder ) { if ( holder . itemView . hasFocus ( ) ) {", "gt": "holder . itemView . clearFocus ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/581"}
{"input": "<s> fun select ( newIndex : Int , recyclerView : RecyclerView ? ) { if ( recyclerView = = null ) return if ( newIndex = = selectedIndex ) return val oldIndex = selectedIndex", "gt": "selectedIndex = newIndex \n \n notifyItemChanged ( selectedIndex ) \n notifyItemChanged ( oldIndex ) \n }", "repo": "cloudstream", "task_id": "cloudstream/582"}
{"input": "<s> private fun getMissing ( ) : List < CurrentSynced > { return repos . map { CurrentSynced ( it . name , it . idPrefix , syncs . containsKey ( it . idPrefix ) ,", "gt": "it . hasAccount ( ) , \n it . icon , \n ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/585"}
{"input": "<s> fun updateSynced ( ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) \n _currentSynced . postValue ( getMissing ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/586"}
{"input": "<s> fun setEpisodesDelta ( delta : Int ) { Log . i ( TAG , \" <STR_LIT> \" ) val user = userData . value if ( user is Resource . Success ) { user . value . watchedEpisodes ? . plus ( delta", "gt": ") ? . let { episode - > \n setEpisodes ( episode ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/589"}
{"input": "<s> fun modifyMaxEpisode ( episodeNum : Int ) { Log . i ( TAG , \" <STR_LIT> \" ) modifyData { status - > status . watchedEpisodes = maxOf ( episodeNum ,", "gt": "status . watchedEpisodes ? : return @ modifyData null \n ) \n status \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/593"}
{"input": "<s> fun setSync ( syncName : String , syncId : String ) {", "gt": "syncs . clear ( ) \n syncs [ syncName ] = syncId \n }", "repo": "cloudstream", "task_id": "cloudstream/595"}
{"input": "<s> fun clear ( ) { syncs . clear ( ) _metaResponse . postValue ( null )", "gt": "_currentSynced . postValue ( getMissing ( ) ) \n _userDataResponse . postValue ( null ) \n }", "repo": "cloudstream", "task_id": "cloudstream/596"}
{"input": "<s> fun updateMetaAndUser ( ) { _userDataResponse . postValue ( Resource . Loading ( ) ) _metaResponse . postValue ( Resource . Loading ( ) )", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) \n updateMetadata ( ) \n updateUserData ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/597"}
{"input": "<s> fun asStringNull ( context : Context ? ) : String ? { try { return asString ( context ? : return null ) } catch ( e : Exception ) {", "gt": "Log . e ( TAG , \" <STR_LIT> \" ) \n logError ( e ) \n return null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/598"}
{"input": "<s> fun ImageView ? . setImageDrawable ( value : UiImage . Drawable ) { if ( this = = null ) return", "gt": "this . isVisible = true \n this . setImage ( UiImage . Drawable ( value . resId ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/601"}
{"input": "<s> @ JvmName ( \" <STR_LIT> \" ) fun img ( url : String ? , headers : Map < String , String > ? = null , @ DrawableRes errorDrawable : Int ? = null ) : UiImage ? {", "gt": "if ( url . isNullOrBlank ( ) ) return null \n return UiImage . Image ( url , headers , errorDrawable ) \n }", "repo": "cloudstream", "task_id": "cloudstream/602"}
{"input": "<s> @ JvmName ( \" <STR_LIT> \" ) fun txt ( @ StringRes resId : Int ? , vararg args : Any ? ) : UiText ? { if ( resId = = null | | args . any { it = = null } ) { return null", "gt": "} \n return UiText . StringResource ( resId , args . filterNotNull ( ) . toList ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/603"}
{"input": "<s> fun TextView ? . setText ( text : UiText ? ) { if ( this = = null ) return if ( text = = null ) { this . isVisible = false } else { val str = text . asStringNull ( context ) ? . let { if ( this . maxLines = = 1 ) { it . replace ( \" <STR_LIT> <STR_LIT> \" , \" \" ) } else { it } }", "gt": "this . isGone = str . isNullOrBlank ( ) \n this . text = str \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/604"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is CardViewHolder - > { \n holder . bind ( cardList [ position ] , position ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/606"}
{"input": "<s> fun bind ( card : SearchResponse , position : Int ) { if ( ! compactView ) { cardView ? . apply { layoutParams = FrameLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , coverHeight )", "gt": "} \n } \n \n SearchResultBuilder . bind ( clickCallback , card , position , itemView ) \n }", "repo": "cloudstream", "task_id": "cloudstream/608"}
{"input": "<s> fun newInstance ( query : String ) : Bundle { return Bundle ( ) . apply {", "gt": "if ( query . isNotBlank ( ) ) putString ( SEARCH_QUERY , query ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/610"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n fixGrid ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/613"}
{"input": "<s> override fun onDestroyView ( ) { hideKeyboard ( ) bottomSheetDialog ? . ownHide ( )", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/614"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n afterPluginsLoadedEvent + = : : reloadRepos \n }", "repo": "cloudstream", "task_id": "cloudstream/615"}
{"input": "<s> override fun onStop ( ) {", "gt": "super . onStop ( ) \n afterPluginsLoadedEvent - = : : reloadRepos \n }", "repo": "cloudstream", "task_id": "cloudstream/616"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is CardViewHolder - > { \n holder . bind ( cardList [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/618"}
{"input": "<s> fun clearSearch ( ) {", "gt": "_searchResponse . postValue ( Resource . Success ( ArrayList ( ) ) ) \n _currentSearch . postValue ( emptyList ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/622"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is CardViewHolder - > { \n holder . bind ( cardList [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/626"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/627"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n afterRepositoryLoadedEvent + = : : reloadRepositories \n }", "repo": "cloudstream", "task_id": "cloudstream/630"}
{"input": "<s> override fun onStop ( ) {", "gt": "super . onStop ( ) \n afterRepositoryLoadedEvent - = : : reloadRepositories \n }", "repo": "cloudstream", "task_id": "cloudstream/631"}
{"input": "<s> private fun reloadRepositories ( success : Boolean = true ) {", "gt": "extensionViewModel . loadStats ( ) \n extensionViewModel . loadRepositories ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/632"}
{"input": "<s> fun loadRepositories ( ) {", "gt": "val urls = repos ( ) \n _repositories . postValue ( urls ) \n }", "repo": "cloudstream", "task_id": "cloudstream/633"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is PluginViewHolder - > { \n holder . bind ( plugins [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/635"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/641"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/644"}
{"input": "<s> fun updateFilteredPlugins ( ) { _filteredPlugins . postValue (", "gt": "false to plugins . filterTvTypes ( ) . filterLang ( ) . sortByQuery ( currentQuery ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/651"}
{"input": "<s> fun search ( query : String ? ) { currentQuery = query _filteredPlugins . postValue (", "gt": "true to ( filteredPlugins . value ? . second ? . sortByQuery ( query ) ? : emptyList ( ) ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/653"}
{"input": "<s> override fun onBindViewHolder ( holder : RecyclerView . ViewHolder , position : Int ) { when ( holder ) {", "gt": "is RepoViewHolder - > { \n holder . bind ( repositories [ position ] ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/656"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_account )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/658"}
{"input": "<s> fun PreferenceFragmentCompat ? . getPref ( id : Int ) : Preference ? { if ( this = = null ) return null return try { findPreference ( getString ( id ) )", "gt": "} catch ( e : Exception ) { \n logError ( e ) \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/659"}
{"input": "<s> fun getFolderSize ( dir : File ) : Long { var size : Long = 0 dir . listFiles ( ) ? . let { for ( file in it ) { size + = if ( file . isFile ) { file . length ( ) } else getFolderSize ( file )", "gt": "} \n } \n \n return size \n }", "repo": "cloudstream", "task_id": "cloudstream/664"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/670"}
{"input": "<s> fun getCurrentLocale ( context : Context ) : String { val res = context . resources val conf = res . configuration return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) { conf ? . locales ? . get ( 0 ) ? . toString ( ) ? : \" <STR_LIT> \"", "gt": "} else { \n @ Suppress ( \" <STR_LIT> \" ) \n conf ? . locale ? . toString ( ) ? : \" <STR_LIT> \" \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/672"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_general )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/673"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_player )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/674"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_providers )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/675"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_ui )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/676"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) setUpToolbar ( R . string . category_updates )", "gt": "setPaddingBottom ( ) \n setToolBarScrollFlags ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/677"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/678"}
{"input": "<s> private fun updateProgress ( ) {", "gt": "_providerProgress . postValue ( TestProgress ( passed , failed , total ) ) \n postProviders ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/683"}
{"input": "<s> fun setFilterMethod ( filter : ProviderFilter ) { if ( this . filter = = filter ) return", "gt": "this . filter = filter \n postProviders ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/685"}
{"input": "<s> private fun addProvider ( api : MainAPI , results : TestingUtils . TestResultProvider ) { synchronized ( providers ) { val index = providers . indexOfFirst { it . first = = api } if ( index = = - 1 ) { providers . add ( api to results ) if ( results . success ) passed + + else failed + + } else {", "gt": "providers [ index ] = api to results \n } \n updateProgress ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/686"}
{"input": "<s> fun init ( ) {", "gt": "total = synchronized ( APIHolder . allProviders ) { APIHolder . allProviders . size } \n updateProgress ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/687"}
{"input": "<s> fun stopTest ( ) {", "gt": "scope ? . cancel ( ) \n scope = null \n }", "repo": "cloudstream", "task_id": "cloudstream/689"}
{"input": "<s> fun newInstance ( isSetup : Boolean ) : Bundle { return Bundle ( ) . apply {", "gt": "putBoolean ( SETUP_EXTENSION_BUNDLE_IS_SETUP , isSetup ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/690"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/691"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n afterRepositoryLoadedEvent + = : : setRepositories \n }", "repo": "cloudstream", "task_id": "cloudstream/693"}
{"input": "<s> override fun onStop ( ) {", "gt": "super . onStop ( ) \n afterRepositoryLoadedEvent - = : : setRepositories \n }", "repo": "cloudstream", "task_id": "cloudstream/694"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/695"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/697"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/699"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/701"}
{"input": "<s> fun push ( activity : Activity ? , hide : Boolean = true ) { activity . navigate ( R . id . global_to_navigation_chrome_subtitles , Bundle ( ) . apply {", "gt": "putBoolean ( \" <STR_LIT> \" , hide ) \n } ) \n }", "repo": "cloudstream", "task_id": "cloudstream/703"}
{"input": "<s> private fun onColorSelected ( stuff : Pair < Int , Int > ) { context ? . setColor ( stuff . first , stuff . second )", "gt": "if ( hide ) \n activity ? . hideSystemUI ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/706"}
{"input": "<s> private fun onDialogDismissed ( id : Int ) {", "gt": "if ( hide ) \n activity ? . hideSystemUI ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/707"}
{"input": "<s> private fun Context . setColor ( id : Int , color : Int ? ) { val realColor = color ? : getDefColor ( id ) when ( id ) { 0 - > state . foregroundColor = realColor 1 - > state . edgeColor = realColor <NUM_LIT:2> - > state . backgroundColor = realColor <NUM_LIT:3> - > state . windowColor = realColor", "gt": "else - > Unit \n } \n updateState ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/709"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/711"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n onColorSelectedEvent - = : : onColorSelected \n }", "repo": "cloudstream", "task_id": "cloudstream/712"}
{"input": "<s> fun push ( activity : Activity ? , hide : Boolean = true ) { activity . navigate ( R . id . global_to_navigation_subtitles , Bundle ( ) . apply {", "gt": "putBoolean ( \" <STR_LIT> \" , hide ) \n } ) \n }", "repo": "cloudstream", "task_id": "cloudstream/713"}
{"input": "<s> fun getCurrentSavedStyle ( ) : SaveCaptionStyle { return getKey ( SUBTITLE_KEY ) ? : SaveCaptionStyle ( getDefColor ( 0 ) , getDefColor ( <NUM_LIT:2> ) , getDefColor ( <NUM_LIT:3> ) , CaptionStyleCompat . EDGE_TYPE_OUTLINE , getDefColor ( 1 ) , null ,", "gt": "null , \n DEF_SUBS_ELEVATION , \n null , \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/715"}
{"input": "<s> private fun onColorSelected ( stuff : Pair < Int , Int > ) { context ? . setColor ( stuff . first , stuff . second )", "gt": "if ( hide ) \n activity ? . hideSystemUI ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/717"}
{"input": "<s> private fun onDialogDismissed ( id : Int ) {", "gt": "if ( hide ) \n activity ? . hideSystemUI ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/718"}
{"input": "<s> private fun Context . setColor ( id : Int , color : Int ? ) { val realColor = color ? : getDefColor ( id ) when ( id ) { 0 - > state . foregroundColor = realColor 1 - > state . edgeColor = realColor <NUM_LIT:2> - > state . backgroundColor = realColor <NUM_LIT:3> - > state . windowColor = realColor", "gt": "else - > Unit \n } \n updateState ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/719"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/721"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n onColorSelectedEvent - = : : onColorSelected \n }", "repo": "cloudstream", "task_id": "cloudstream/723"}
{"input": "<s> private fun getHtmlText ( text : String ) : Spanned { return try { HtmlCompat . fromHtml ( text , HtmlCompat . FROM_HTML_MODE_LEGACY )", "gt": "} catch ( e : Exception ) { \n logError ( e ) \n text . toSpanned ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/729"}
{"input": "<s> @ RequiresApi ( Build . VERSION_CODES . O ) @ SuppressLint ( \" <STR_LIT> \" ) @ Synchronized private fun getWatchNextProgramByVideoId ( id : String , context : Context ) : Pair < WatchNextProgram ? , Long ? > { return findFirstWatchNextProgram ( context ) { cursor - >", "gt": "( cursor . getString ( cursor . getColumnIndex ( COLUMN_INTERNAL_PROVIDER_ID ) ) = = id ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/732"}
{"input": "<s> fun Activity ? . loadCache ( ) { try { cacheClass ( \" <STR_LIT> \" . load ( ) )", "gt": "} catch ( _ : Exception ) { \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/739"}
{"input": "<s> private fun < T > Context . restoreMap ( map : Map < String , T > ? , isEditingAppSettings : Boolean = false ) { map ? . filter { it . key . isTransferable ( ) } ? . forEach {", "gt": "setKeyRaw ( it . key , it . value , isEditingAppSettings ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/747"}
{"input": "<s> < T , V > V . ioWorkSafe ( work : suspend ( CoroutineScope . ( V ) - > T ) ) : T ? { val value = this return withContext ( Dispatchers . IO ) { try { work ( value ) } catch ( e : Exception ) {", "gt": "logError ( e ) \n null \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/751"}
{"input": "<s> < T , V > V . ioWork ( work : suspend ( CoroutineScope . ( V ) - > T ) ) : T { val value = this return withContext ( Dispatchers . IO ) {", "gt": "work ( value ) \n }", "repo": "cloudstream", "task_id": "cloudstream/752"}
{"input": "<s> < T , V > V . mainWork ( work : suspend ( CoroutineScope . ( V ) - > T ) ) : T { val value = this return withContext ( Dispatchers . Main ) {", "gt": "work ( value ) \n }", "repo": "cloudstream", "task_id": "cloudstream/753"}
{"input": "<s> fun runOnMainThread ( work : ( ( ) - > Unit ) ) { val mainHandler = Handler ( Looper . getMainLooper ( ) ) mainHandler . post {", "gt": "work ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/754"}
{"input": "<s> operator fun setValue ( self : Any ? , property : KProperty < * > , t : T ? ) { cache = t if ( t = = null ) {", "gt": "removeKey ( key ) \n } else { \n setKeyClass ( key , t ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/755"}
{"input": "<s> operator fun setValue ( self : Any ? , property : KProperty < * > , t : T ? ) { if ( t = = null ) {", "gt": "removeKey ( realKey ) \n } else { \n AcraApplication . setKeyClass ( realKey , t ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/762"}
{"input": "<s> fun getAccounts ( context : Context ) : List < Account > { return accounts . toMutableList ( ) . apply {", "gt": "val item = getDefaultAccount ( context ) \n remove ( item ) \n add ( 0 , item ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/765"}
{"input": "<s> fun getAllWatchStateIds ( ) : List < Int > ? { val folder = \" <STR_LIT> \" return getKeys ( folder ) ? . mapNotNull {", "gt": "it . removePrefix ( \" <STR_LIT> \" ) . toIntOrNull ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/770"}
{"input": "<s> fun deleteAllResumeStateIds ( ) {", "gt": "val folder = \" <STR_LIT> \" \n removeKeys ( folder ) \n }", "repo": "cloudstream", "task_id": "cloudstream/771"}
{"input": "<s> fun getAllResumeStateIds ( ) : List < Int > ? { val folder = \" <STR_LIT> \" return getKeys ( folder ) ? . mapNotNull {", "gt": "it . removePrefix ( \" <STR_LIT> \" ) . toIntOrNull ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/773"}
{"input": "<s> private fun getAllResumeStateIdsOld ( ) : List < Int > ? { val folder = \" <STR_LIT> \" return getKeys ( folder ) ? . mapNotNull {", "gt": "it . removePrefix ( \" <STR_LIT> \" ) . toIntOrNull ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/774"}
{"input": "<s> fun setLastWatched ( parentId : Int ? , episodeId : Int ? , episode : Int ? , season : Int ? , isFromDownload : Boolean = false , updateTime : Long ? = null , ) { if ( parentId = = null ) return setKey ( \" <STR_LIT> \" , parentId . toString ( ) , VideoDownloadHelper . ResumeWatching ( parentId , episodeId , episode , season ,", "gt": "updateTime ? : System . currentTimeMillis ( ) , \n isFromDownload \n ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/775"}
{"input": "<s> fun removeLastWatched ( parentId : Int ? ) {", "gt": "if ( parentId = = null ) return \n removeKey ( \" <STR_LIT> \" , parentId . toString ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/777"}
{"input": "<s> fun getLastWatched ( id : Int ? ) : VideoDownloadHelper . ResumeWatching ? { if ( id = = null ) return null", "gt": "return getKey ( \n \" <STR_LIT> \" , \n id . toString ( ) , \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/778"}
{"input": "<s> fun getBookmarkedData ( id : Int ? ) : BookmarkedData ? {", "gt": "if ( id = = null ) return null \n return getKey ( \" <STR_LIT> \" , id . toString ( ) ) \n }", "repo": "cloudstream", "task_id": "cloudstream/781"}
{"input": "<s> fun getAllBookmarkedData ( ) : List < BookmarkedData > { return getKeys ( \" <STR_LIT> \" ) ? . mapNotNull {", "gt": "getKey ( it ) \n } ? : emptyList ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/782"}
{"input": "<s> fun getAllSubscriptions ( ) : List < SubscribedData > { return getKeys ( \" <STR_LIT> \" ) ? . mapNotNull {", "gt": "getKey ( it ) \n } ? : emptyList ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/783"}
{"input": "<s> fun getAllFavorites ( ) : List < FavoritesData > { return getKeys ( \" <STR_LIT> \" ) ? . mapNotNull {", "gt": "getKey ( it ) \n } ? : emptyList ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/788"}
{"input": "<s> fun getViewPos ( id : Int ? ) : PosDur ? {", "gt": "if ( id = = null ) return null \n return getKey ( \" <STR_LIT> \" , id . toString ( ) , null ) \n }", "repo": "cloudstream", "task_id": "cloudstream/793"}
{"input": "<s> fun getVideoWatchState ( id : Int ? ) : VideoWatchState ? {", "gt": "if ( id = = null ) return null \n return getKey ( \" <STR_LIT> \" , id . toString ( ) , null ) \n }", "repo": "cloudstream", "task_id": "cloudstream/794"}
{"input": "<s> fun getResultWatchState ( id : Int ) : WatchType { return WatchType . fromInternalId ( getKey < Int > ( \" <STR_LIT> \" ,", "gt": "id . toString ( ) , \n null \n ) \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/798"}
{"input": "<s> private fun removeKeys ( key : String ) {", "gt": "removeKey ( WORK_KEY_INFO , key ) \n removeKey ( WORK_KEY_PACKAGE , key ) \n }", "repo": "cloudstream", "task_id": "cloudstream/800"}
{"input": "<s> private fun handleNotification ( id : Int , notification : Notification ) { main {", "gt": "setForegroundAsync ( ForegroundInfo ( id , notification ) ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/801"}
{"input": "<s> fun getAndUnpack ( string : String ) : String {", "gt": "val packedText = getPacked ( string ) \n return JsUnpacker ( packedText ) . unpack ( ) ? : string \n }", "repo": "cloudstream", "task_id": "cloudstream/805"}
{"input": "<s> fun getExtractorApiFromName ( name : String ) : ExtractorApi { for ( api in extractorApis ) { if ( api . name = = name ) return api", "gt": "} \n return extractorApis [ 0 ] \n }", "repo": "cloudstream", "task_id": "cloudstream/808"}
{"input": "<s> fun ExtractorApi . fixUrl ( url : String ) : String { if ( url . startsWith ( \" <STR_LIT> \" ) | | url . startsWith ( \" <STR_LIT:{> <STR_LIT:\\\"> \" ) ) { return url } if ( url . isEmpty ( ) ) { return \" \" } val startsWithNoHttp = url . startsWith ( \" <STR_LIT> \" ) if ( startsWithNoHttp ) { return \" <STR_LIT> \" } else { if ( url . startsWith ( <CHAR_LIT:/> ) ) {", "gt": "return mainUrl + url \n } \n return \" <STR_LIT> \" \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/809"}
{"input": "<s> private fun getSystemProperty ( propName : String ) : String ? { return try { val p = Runtime . getRuntime ( ) . exec ( \" <STR_LIT> \" ) BufferedReader ( InputStreamReader ( p . inputStream ) , <NUM_LIT> ) . use { it . readLine ( )", "gt": "} \n } catch ( ex : IOException ) { \n null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/817"}
{"input": "<s> fun detect ( ) : Boolean { val p = Pattern . compile ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT:)> \" )", "gt": "val searchResults = p . matcher ( hunterJS ) \n return searchResults . find ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/818"}
{"input": "<s> private fun hunter ( h : String , n : String , t : Int , e : Int ) : String { var result = \" \" var i = 0 while ( i < h . length ) { var j = 0 var s = \" \" while ( h [ i ] ! = n [ e ] ) { s + = h [ i ] i + + } while ( j < n . length ) { s = s . replace ( n [ j ] , j . digitToChar ( ) ) j + + }", "gt": "result + = ( duf ( s , e ) - t ) . toChar ( ) \n i + + \n } \n return result \n }", "repo": "cloudstream", "task_id": "cloudstream/819"}
{"input": "<s> fun detect ( ) : Boolean { val js = packedJS ! ! . replace ( \" \" , \" \" ) val p = Pattern . compile ( \" <STR_LIT> <STR_LIT:\\\\> <STR_LIT> <STR_LIT:\\\\> <STR_LIT> \" )", "gt": "val m = p . matcher ( js ) \n return m . find ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/820"}
{"input": "<s> private fun toBytes16Big ( n : Int ) : ByteArray { return ByteArray ( <NUM_LIT:16> ) { val fixed = n / <NUM_LIT> . pow ( ( <NUM_LIT:15> - it ) )", "gt": "( maxOf ( 0 , fixed . toInt ( ) ) % <NUM_LIT> ) . toByte ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/823"}
{"input": "<s> private fun getParentLink ( uri : String ) : String { val split = uri . split ( \" <STR_LIT:/> \" ) . toMutableList ( )", "gt": "split . removeLast ( ) \n return split . joinToString ( \" <STR_LIT:/> \" ) \n }", "repo": "cloudstream", "task_id": "cloudstream/828"}
{"input": "<s> suspend fun resolveLinkSafe ( index : Int , tries : Int = <NUM_LIT:3> , failDelay : Long = <NUM_LIT> ) : ByteArray ? { for ( i in 0 until tries ) { try { return resolveLink ( index ) } catch ( e : IllegalArgumentException ) { return null } catch ( e : CancellationException ) { return null } catch ( t : Throwable ) {", "gt": "delay ( failDelay ) \n } \n } \n return null \n }", "repo": "cloudstream", "task_id": "cloudstream/829"}
{"input": "<s> override fun setImageDrawable ( d : Drawable ? ) {", "gt": "super . setImageDrawable ( d ) \n myConfigureBounds ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/836"}
{"input": "<s> override fun setImageResource ( resId : Int ) {", "gt": "super . setImageResource ( resId ) \n myConfigureBounds ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/837"}
{"input": "<s> private fun initISO6391Map ( ) { for ( lang in languages ) {", "gt": "ISO_639_1Map [ lang . ISO_639_1 ] = lang . languageName \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/842"}
{"input": "<s> fun fromTwoLettersToLanguage ( input : String ) : String ? { if ( input . substringBefore ( \" <STR_LIT:-> \" ) . length ! = <NUM_LIT:2> ) return null if ( ISO_639_1Map . isEmpty ( ) ) { initISO6391Map ( )", "gt": "} \n val comparison = input . lowercase ( Locale . ROOT ) \n \n return ISO_639_1Map [ comparison ] \n }", "repo": "cloudstream", "task_id": "cloudstream/843"}
{"input": "<s> fun fixPaddingStatusbarMargin ( v : View ? ) { if ( v = = null ) return val ctx = v . context ? : return v . layoutParams = v . layoutParams . apply { if ( this is MarginLayoutParams ) { setMargins ( v . marginLeft , v . marginTop + ctx . getStatusBarHeight ( ) , v . marginRight ,", "gt": "v . marginBottom \n ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/860"}
{"input": "<s> fun Dialog ? . dismissSafe ( activity : Activity ? ) { if ( this ? . isShowing = = true & & activity ? . isFinishing = = false ) {", "gt": "this . dismiss ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/868"}
{"input": "<s> fun Dialog ? . dismissSafe ( ) { if ( this ? . isShowing = = true & & activity ? . isFinishing ! = true ) {", "gt": "this . dismiss ( ) \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/869"}
{"input": "<s> fun isShortLink ( url : String ) : Boolean { return shortList . any {", "gt": "it . regex . find ( url ) ! = null \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/872"}
{"input": "<s> fun setResumeLength ( length : Long ) { bytesDownloaded = length", "gt": "bytesWritten = length \n lastDownloadedBytes = length \n }", "repo": "cloudstream", "task_id": "cloudstream/880"}
{"input": "<s> fun setDownloadFileInfoTemplate ( template : DownloadedFileInfo ) {", "gt": "downloadFileInfoTemplate = template \n updateFileInfo ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/882"}
{"input": "<s> private fun checkNotification ( ) {", "gt": "if ( lastUpdatedMs + UPDATE_RATE_MS > System . currentTimeMillis ( ) ) return \n notify ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/885"}
{"input": "<s> fun addSegment ( length : Long ) {", "gt": "hlsProgress + = 1 \n addBytes ( length ) \n }", "repo": "cloudstream", "task_id": "cloudstream/887"}
{"input": "<s> < String , V > . appendAndDontOverride ( rhs : Map < String , V > ) : Map < String , V > { val out = this . toMutableMap ( ) </s", "gt": "< String , V > . appendAndDontOverride ( rhs : Map < String , V > ) : Map < String , V > { val out = this . toMutableMap ( )", "repo": "cloudstream", "task_id": "cloudstream/890"}
{"input": "<s> List < Job > . join ( ) { forEach { job - > try { job . join ( )", "gt": "} catch ( t : Throwable ) { \n logError ( t ) \n } \n } \n }", "repo": "cloudstream", "task_id": "cloudstream/892"}
{"input": "<s> fun getDefaultDir ( context : Context ) : SafeFile ? { return SafeFile . fromMedia (", "gt": "context , MediaFileContentType . Downloads \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/893"}
{"input": "<s> private fun DownloadedFileInfo . toFile ( context : Context ) : SafeFile ? {", "gt": "return basePathToFile ( context , this . basePath ) ? . gotoDirectory ( relativePath ) \n ? . findFile ( displayName ) \n }", "repo": "cloudstream", "task_id": "cloudstream/896"}
{"input": "<s> fun deleteFileAndUpdateSettings ( context : Context , id : Int ) : Boolean { val success = deleteFile ( context , id )", "gt": "if ( success ) context . removeKey ( KEY_DOWNLOAD_INFO , id . toString ( ) ) \n return success \n }", "repo": "cloudstream", "task_id": "cloudstream/897"}
{"input": "<s> private fun startWork ( context : Context , key : String ) { val req = OneTimeWorkRequest . Builder ( DownloadFileWorkManager : : class . java ) . setInputData ( Data . Builder ( ) . putString ( \" <STR_LIT> \" , key ) . build ( ) ) . build ( ) ( WorkManager . getInstance ( context ) ) . enqueueUniqueWork (", "gt": "key , \n ExistingWorkPolicy . KEEP , \n req \n ) \n }", "repo": "cloudstream", "task_id": "cloudstream/902"}
{"input": "<s> fun downloadFromResumeUsingWorker ( context : Context , pkg : DownloadResumePackage , ) { val key = pkg . item . ep . id . toString ( )", "gt": "setKey ( WORK_KEY_PACKAGE , key , pkg ) \n startWork ( context , key ) \n }", "repo": "cloudstream", "task_id": "cloudstream/903"}
{"input": "<s> fun downloadEpisodeUsingWorker ( context : Context , source : String ? , folder : String ? , ep : DownloadEpisodeMetadata , links : List < ExtractorLink > , ) { val info = DownloadInfo ( source , folder , ep , links )", "gt": "val key = info . ep . id . toString ( ) \n setKey ( WORK_KEY_INFO , key , info ) \n startWork ( context , key ) \n }", "repo": "cloudstream", "task_id": "cloudstream/904"}
{"input": "<s> fun setOnSizeListener ( listener : ( Int ) - > Unit ) {", "gt": "lastViewIndex = null \n itemListener = listener \n }", "repo": "cloudstream", "task_id": "cloudstream/905"}
{"input": "<s> override fun onLayoutCompleted ( state : RecyclerView . State ? ) { super . onLayoutCompleted ( state ) if ( waitForSnap ! = null ) { this . getChildAt ( snapChild ? : 1 ) ? . let { view - > LinearSnapHelper ( ) . calculateDistanceToFinalSnap ( this , view ) ? . get ( 0 ) ? . let { dx - > waitForSnap ? . invoke ( dx ) waitForSnap = null", "gt": "} \n } \n } \n updateSize ( ) \n }", "repo": "cloudstream", "task_id": "cloudstream/906"}
{"input": "<s> fun snap ( snap : Int ? = null , callback : ( Int ) - > Unit ) {", "gt": "waitForSnap = callback \n snapChild = snap \n }", "repo": "cloudstream", "task_id": "cloudstream/907"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setContentView ( binding . root ) if ( checkAppSideloading ( ) ) { return } setupOptionsMenu ( ) handlePermission ( getPermissionToRequest ( ) ) { if ( ! it ) { toast ( com . simplemobiletools . commons . R . string . no_storage_permissions )", "gt": "finish ( ) \n } \n initEditActivity ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/0"}
{"input": "<s> override fun onStop ( ) { super . onStop ( ) if ( isEditingWithThirdParty ) {", "gt": "finish ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/2"}
{"input": "<s> private fun loadDrawCanvas ( ) { binding . defaultImageView . beGone ( ) binding . cropImageView . beGone ( ) binding . editorDrawCanvas . beVisible ( ) if ( ! wasDrawCanvasPositioned ) { wasDrawCanvasPositioned = true binding . editorDrawCanvas . onGlobalLayout { ensureBackgroundThread {", "gt": "fillCanvasBackground ( ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/4"}
{"input": "<s> private fun setupBottomActions ( ) { setupPrimaryActionButtons ( ) setupCropRotateActionButtons ( )", "gt": "setupAspectRatioButtons ( ) \n setupDrawButtons ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/7"}
{"input": "<s> private fun bottomFilterClicked ( ) { currPrimaryAction = if ( currPrimaryAction = = PRIMARY_ACTION_FILTER ) { PRIMARY_ACTION_NONE", "gt": "} else { \n PRIMARY_ACTION_FILTER \n } \n updatePrimaryActionButtons ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/8"}
{"input": "<s> private fun bottomCropRotateClicked ( ) { currPrimaryAction = if ( currPrimaryAction = = PRIMARY_ACTION_CROP_ROTATE ) { PRIMARY_ACTION_NONE", "gt": "} else { \n PRIMARY_ACTION_CROP_ROTATE \n } \n updatePrimaryActionButtons ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/9"}
{"input": "<s> private fun bottomDrawClicked ( ) { currPrimaryAction = if ( currPrimaryAction = = PRIMARY_ACTION_DRAW ) { PRIMARY_ACTION_NONE", "gt": "} else { \n PRIMARY_ACTION_DRAW \n } \n updatePrimaryActionButtons ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/10"}
{"input": "<s> private fun updateCropRotateActionButtons ( ) { arrayOf ( binding . bottomEditorCropRotateActions . bottomAspectRatio ) . forEach { it . applyColorFilter ( Color . WHITE ) } val primaryActionView = when ( currCropRotateAction ) { CROP_ROTATE_ASPECT_RATIO - > binding . bottomEditorCropRotateActions . bottomAspectRatio", "gt": "else - > null \n } \n \n primaryActionView ? . applyColorFilter ( getProperPrimaryColor ( ) ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/13"}
{"input": "<s> private fun updateDrawColor ( color : Int ) { drawColor = color binding . bottomEditorDrawActions . bottomDrawColor . applyColorFilter ( color )", "gt": "config . lastEditorDrawColor = color \n binding . editorDrawCanvas . updateColor ( color ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/14"}
{"input": "<s> private fun editWith ( ) {", "gt": "openEditor ( uri . toString ( ) , true ) \n isEditingWithThirdParty = true \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/18"}
{"input": "<s> private fun setupLongPress ( view : ImageView ) { view . setOnLongClickListener { val contentDescription = view . contentDescription if ( contentDescription ! = null ) {", "gt": "toast ( contentDescription . toString ( ) ) \n } \n true \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/20"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n setupToolbar ( binding . manageFoldersToolbar , NavigationIcon . Arrow ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/21"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n setupToolbar ( binding . manageFoldersToolbar , NavigationIcon . Arrow ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/25"}
{"input": "<s> private fun addFolder ( ) { FilePickerDialog ( this , config . lastFilepickerPath , false , config . shouldShowHidden , false , true ) { config . lastFilepickerPath = it ensureBackgroundThread { addNoMedia ( it ) {", "gt": "updateFolders ( ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/27"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n setupToolbar ( binding . manageFoldersToolbar , NavigationIcon . Arrow ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/28"}
{"input": "<s> private fun addFolder ( ) { showAddIncludedFolderDialog {", "gt": "updateFolders ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/31"}
{"input": "<s> override fun onStart ( ) {", "gt": "super . onStart ( ) \n mTempShowHiddenHandler . removeCallbacksAndMessages ( null ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/32"}
{"input": "<s> override fun onBackPressed ( ) { if ( binding . mainMenu . isSearchOpen ) { binding . mainMenu . closeSearch ( ) } else if ( config . groupDirectSubfolders ) { if ( mCurrentPathPrefix . isEmpty ( ) ) { super . onBackPressed ( ) } else { mOpenedSubfolders . removeLast ( ) mCurrentPathPrefix = mOpenedSubfolders . last ( ) setupAdapter ( mDirs )", "gt": "} \n } else { \n super . onBackPressed ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/34"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putBoolean ( WAS_PROTECTION_HANDLED , mWasProtectionHandled ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/35"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) ) \n binding . mainMenu . updateColors ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/37"}
{"input": "<s> private fun checkDefaultSpamFolders ( ) { if ( ! config . spamFoldersChecked ) { val spamFolders = arrayListOf ( \" <STR_LIT> \" ) val OTGPath = config . OTGPath spamFolders . forEach { if ( getDoesFilePathExist ( it , OTGPath ) ) { config . addExcludedFolder ( it )", "gt": "} \n } \n config . spamFoldersChecked = true \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/40"}
{"input": "<s> private fun launchSearchActivity ( ) { hideKeyboard ( ) Intent ( this , SearchActivity : : class . java ) . apply { startActivity ( this ) }", "gt": "binding . mainMenu . postDelayed ( { \n binding . mainMenu . closeSearch ( ) \n } , <NUM_LIT> ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/42"}
{"input": "<s> private fun showAllMedia ( ) { config . showAll = true Intent ( this , MediaActivity : : class . java ) . apply { putExtra ( DIRECTORY , \" \" ) if ( mIsThirdPartyIntent ) { handleMediaIntent ( this ) } else { hideKeyboard ( )", "gt": "startActivity ( this ) \n finish ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/44"}
{"input": "<s> private fun tryToggleTemporarilyShowHidden ( ) { if ( config . temporarilyShowHidden ) { toggleTemporarilyShowHidden ( false ) } else { if ( isRPlus ( ) & & ! isExternalStorageManager ( ) ) { GrantAllFilesDialog ( this ) } else { handleHiddenFolderPasswordProtection {", "gt": "toggleTemporarilyShowHidden ( true ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/46"}
{"input": "<s> private fun increaseColumnCount ( ) {", "gt": "config . dirColumnCnt + = 1 \n columnCountChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/53"}
{"input": "<s> private fun reduceColumnCount ( ) {", "gt": "config . dirColumnCnt - = 1 \n columnCountChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/54"}
{"input": "<s> private fun itemClicked ( path : String ) { handleLockedFolderOpening ( path ) { success - > if ( success ) { Intent ( this , MediaActivity : : class . java ) . apply { putExtra ( SKIP_AUTHENTICATION , true ) putExtra ( DIRECTORY , path )", "gt": "handleMediaIntent ( this ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/58"}
{"input": "<s> private fun setAsDefaultFolder ( ) {", "gt": "config . defaultFolder = \" \" \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/59"}
{"input": "<s> override fun recheckPinnedFolders ( ) { ensureBackgroundThread {", "gt": "gotDirectories ( movePinnedDirectoriesToFront ( getCurrentlyDisplayedDirs ( ) ) ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/62"}
{"input": "<s> override fun onStart ( ) {", "gt": "super . onStart ( ) \n mTempShowHiddenHandler . removeCallbacksAndMessages ( null ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/64"}
{"input": "<s> override fun onPause ( ) { super . onPause ( ) mIsGettingMedia = false binding . mediaRefreshLayout . isRefreshing = false storeStateVariables ( ) mLastMediaHandler . removeCallbacksAndMessages ( null )", "gt": "if ( ! mMedia . isEmpty ( ) ) { \n mCurrAsyncTask ? . stopFetching ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/65"}
{"input": "<s> override fun onBackPressed ( ) { if ( binding . mediaMenu . isSearchOpen ) {", "gt": "binding . mediaMenu . closeSearch ( ) \n } else { \n super . onBackPressed ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/68"}
{"input": "<s> private fun startSlideshow ( ) { if ( mMedia . isNotEmpty ( ) ) { hideKeyboard ( ) Intent ( this , ViewPagerActivity : : class . java ) . apply { val item = mMedia . firstOrNull { it is Medium } as ? Medium ? : return putExtra ( SKIP_AUTHENTICATION , shouldSkipAuthentication ( ) ) putExtra ( PATH , item . path ) putExtra ( SHOW_ALL , mShowAll )", "gt": "putExtra ( SLIDESHOW_START_ON_ENTER , true ) \n startActivity ( this ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/70"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) ) \n binding . mediaMenu . updateColors ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/71"}
{"input": "<s> private fun emptyRecycleBin ( ) { showRecycleBinEmptyingDialog {", "gt": "emptyTheRecycleBin { \n finish ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/75"}
{"input": "<s> private fun emptyAndDisableRecycleBin ( ) { showRecycleBinEmptyingDialog {", "gt": "emptyAndDisableTheRecycleBin { \n finish ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/76"}
{"input": "<s> private fun restoreAllFiles ( ) { val paths = mMedia . filter { it is Medium } . map { ( it as Medium ) . path } as ArrayList < String > restoreRecycleBinPaths ( paths ) { ensureBackgroundThread {", "gt": "directoryDB . deleteDirPath ( RECYCLE_BIN ) \n } \n finish ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/77"}
{"input": "<s> private fun switchToFolderView ( ) { hideKeyboard ( ) config . showAll = false", "gt": "startActivity ( Intent ( this , MainActivity : : class . java ) ) \n finish ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/79"}
{"input": "<s> private fun changeViewType ( ) { ChangeViewTypeDialog ( this , false , mPath ) { refreshMenuItems ( )", "gt": "setupLayoutManager ( ) \n binding . mediaGrid . adapter = null \n setupAdapter ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/80"}
{"input": "<s> private fun deleteDBDirectory ( ) { ensureBackgroundThread { try {", "gt": "directoryDB . deleteDirPath ( mPath ) \n } catch ( ignored : Exception ) { \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/83"}
{"input": "<s> private fun createNewFolder ( ) { CreateNewFolderDialog ( this , mPath ) {", "gt": "config . tempFolderPath = it \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/84"}
{"input": "<s> private fun tryToggleTemporarilyShowHidden ( ) { if ( config . temporarilyShowHidden ) { toggleTemporarilyShowHidden ( false ) } else { if ( isRPlus ( ) & & ! isExternalStorageManager ( ) ) { GrantAllFilesDialog ( this ) } else { handleHiddenFolderPasswordProtection {", "gt": "toggleTemporarilyShowHidden ( true ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/85"}
{"input": "<s> private fun toggleTemporarilyShowHidden ( show : Boolean ) { mLoadedInitialPhotos = false config . temporarilyShowHidden = show", "gt": "getMedia ( ) \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/86"}
{"input": "<s> private fun setupLayoutManager ( ) { val viewType = config . getFolderViewType ( if ( mShowAll ) SHOW_ALL else mPath ) if ( viewType = = VIEW_TYPE_GRID ) {", "gt": "setupGridLayoutManager ( ) \n } else { \n setupListLayoutManager ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/87"}
{"input": "<s> private fun increaseColumnCount ( ) {", "gt": "config . mediaColumnCnt + = 1 \n columnCountChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/89"}
{"input": "<s> private fun reduceColumnCount ( ) {", "gt": "config . mediaColumnCnt - = 1 \n columnCountChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/90"}
{"input": "<s> private fun setAsDefaultFolder ( ) {", "gt": "config . defaultFolder = mPath \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/94"}
{"input": "<s> private fun unsetAsDefaultFolder ( ) {", "gt": "config . defaultFolder = \" \" \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/95"}
{"input": "<s> override fun onPause ( ) { super . onPause ( )", "gt": "binding . panoramaView . pauseRendering ( ) \n isRendering = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/97"}
{"input": "<s> override fun onDestroy ( ) { super . onDestroy ( ) if ( isRendering ) {", "gt": "binding . panoramaView . shutdown ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/98"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n setupButtonMargins ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/99"}
{"input": "<s> private fun toggleButtonVisibility ( ) { arrayOf ( binding . cardboard , binding . explore , binding . panoramaGradientBackground ) . forEach { it . animate ( ) . alpha ( if ( isFullscreen ) <NUM_LIT> else <NUM_LIT> )", "gt": "it . isClickable = ! isFullscreen \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/101"}
{"input": "<s> private fun handleClick ( ) { isFullscreen = ! isFullscreen toggleButtonVisibility ( ) if ( isFullscreen ) {", "gt": "hideSystemUI ( false ) \n } else { \n showSystemUI ( false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/102"}
{"input": "<s> override fun onPause ( ) { super . onPause ( )", "gt": "binding . vrVideoView . pauseRendering ( ) \n mIsRendering = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/105"}
{"input": "<s> override fun onDestroy ( ) { super . onDestroy ( ) if ( mIsRendering ) { binding . vrVideoView . shutdown ( ) }", "gt": "if ( ! isChangingConfigurations ) { \n mTimerHandler . removeCallbacksAndMessages ( null ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/106"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n setupButtons ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/107"}
{"input": "<s> private fun setupDuration ( duration : Long ) { mDuration = ( duration / <NUM_LIT:1000> ) . toInt ( ) binding . bottomVideoTimeHolder . videoSeekbar . max = mDuration", "gt": "binding . bottomVideoTimeHolder . videoDuration . text = mDuration . getFormattedDuration ( ) \n setVideoProgress ( 0 ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/108"}
{"input": "<s> private fun togglePlayPause ( ) { mIsPlaying = ! mIsPlaying if ( mIsPlaying ) {", "gt": "resumeVideo ( ) \n } else { \n pauseVideo ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/109"}
{"input": "<s> private fun setVideoProgress ( seconds : Int ) { binding . vrVideoView . seekTo ( seconds * <NUM_LIT> ) binding . bottomVideoTimeHolder . videoSeekbar . progress = seconds", "gt": "mCurrTime = seconds \n binding . bottomVideoTimeHolder . videoCurrTime . text = seconds . getFormattedDuration ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/112"}
{"input": "<s> private fun handleClick ( ) { mIsFullscreen = ! mIsFullscreen toggleButtonVisibility ( ) if ( mIsFullscreen ) {", "gt": "hideSystemUI ( false ) \n } else { \n showSystemUI ( false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/114"}
{"input": "<s> override fun onProgressChanged ( seekBar : SeekBar ? , progress : Int , fromUser : Boolean ) { if ( fromUser ) {", "gt": "setVideoProgress ( progress ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/115"}
{"input": "<s> override fun onStartTrackingTouch ( seekBar : SeekBar ? ) {", "gt": "binding . vrVideoView . pauseVideo ( ) \n mIsDragged = true \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/116"}
{"input": "<s> override fun onStopTrackingTouch ( seekBar : SeekBar ? ) { mIsPlaying = true", "gt": "resumeVideo ( ) \n mIsDragged = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/117"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "mIsVideo = false \n super . onCreate ( savedInstanceState ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/118"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( config . bottomActions ) { window . navigationBarColor = Color . TRANSPARENT } else { setTranslucentNavigation ( ) }", "gt": "if ( config . blackBackground ) { \n updateStatusbarColor ( Color . BLACK ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/119"}
{"input": "<s> private fun sendViewPagerIntent ( path : String ) { ensureBackgroundThread { if ( isPathPresentInMediaStore ( path ) ) { openViewPager ( path ) } else { rescanPath ( path ) {", "gt": "openViewPager ( path ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/120"}
{"input": "<s> private fun initBottomActions ( ) {", "gt": "initBottomActionButtons ( ) \n initBottomActionsLayout ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/123"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n updateMenuColors ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/126"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n mCurrAsyncTask ? . stopFetching ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/127"}
{"input": "<s> private fun updateMenuColors ( ) {", "gt": "updateStatusbarColor ( getProperBackgroundColor ( ) ) \n binding . searchMenu . updateColors ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/128"}
{"input": "<s> private fun itemClicked ( path : String ) { val isVideo = path . isVideoFast ( ) if ( isVideo ) { openPath ( path , false ) } else { Intent ( this , ViewPagerActivity : : class . java ) . apply { putExtra ( PATH , path )", "gt": "putExtra ( SHOW_ALL , false ) \n startActivity ( this ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/130"}
{"input": "<s> private fun setupLayoutManager ( ) { val viewType = config . getFolderViewType ( SHOW_ALL ) if ( viewType = = VIEW_TYPE_GRID ) {", "gt": "setupGridLayoutManager ( ) \n } else { \n setupListLayoutManager ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/131"}
{"input": "<s> private fun setupListLayoutManager ( ) { val layoutManager = binding . searchGrid . layoutManager as MyGridLayoutManager", "gt": "layoutManager . spanCount = 1 \n layoutManager . orientation = RecyclerView . VERTICAL \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/132"}
{"input": "<s> private fun getAllMedia ( ) { getCachedMedia ( \" \" ) { if ( it . isNotEmpty ( ) ) { mAllMedia = it . clone ( ) as ArrayList < ThumbnailItem > } runOnUiThread {", "gt": "setupAdapter ( ) \n } \n startAsyncTask ( false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/134"}
{"input": "<s> private fun startAsyncTask ( updateItems : Boolean ) { mCurrAsyncTask ? . stopFetching ( ) mCurrAsyncTask = GetMediaAsynctask ( applicationContext , \" \" , showAll = true ) { mAllMedia = it . clone ( ) as ArrayList < ThumbnailItem > if ( updateItems ) { textChanged ( mLastSearchedText )", "gt": "} \n } \n \n mCurrAsyncTask ! ! . execute ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/135"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "setupToolbar ( binding . settingsToolbar , NavigationIcon . Arrow ) \n setupSettingItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/137"}
{"input": "<s> private fun setupCustomizeColors ( ) { binding . settingsColorCustomizationHolder . setOnClickListener {", "gt": "startCustomizationActivity ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/138"}
{"input": "<s> private fun setupChangeDateTimeFormat ( ) { binding . settingsChangeDateTimeFormatHolder . setOnClickListener {", "gt": "ChangeDateTimeFormatDialog ( this ) { } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/141"}
{"input": "<s> private fun setupFileThumbnailStyle ( ) { binding . settingsFileThumbnailStyleHolder . setOnClickListener {", "gt": "ChangeFileThumbnailStyleDialog ( this ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/163"}
{"input": "<s> private fun setupManageExtendedDetails ( ) { binding . settingsManageExtendedDetailsHolder . setOnClickListener { ManageExtendedDetailsDialog ( this ) { if ( config . extendedDetails = = 0 ) {", "gt": "binding . settingsShowExtendedDetailsHolder . callOnClick ( ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/175"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n setupToolbar ( binding . setWallpaperToolbar , NavigationIcon . Arrow ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/186"}
{"input": "<s> override fun onActivityResult ( requestCode : Int , resultCode : Int , resultData : Intent ? ) { if ( requestCode = = PICK_IMAGE ) { if ( resultCode = = Activity . RESULT_OK & & resultData ! = null ) { handleImage ( resultData ) } else {", "gt": "finish ( ) \n } \n } \n super . onActivityResult ( requestCode , resultCode , resultData ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/187"}
{"input": "<s> private fun handleImage ( intent : Intent ) { uri = intent . data ! ! if ( uri . scheme ! = \" <STR_LIT> \" & & uri . scheme ! = \" <STR_LIT> \" ) { toast ( R . string . unknown_file_location ) finish ( ) return } wallpaperManager = WallpaperManager . getInstance ( applicationContext ) binding . cropImageView . apply { setOnCropImageCompleteListener ( this @ SetWallpaperActivity )", "gt": "setImageUriAsync ( uri ) \n } \n \n setupAspectRatio ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/189"}
{"input": "<s> private fun changeAspectRatio ( ) {", "gt": "aspectRatio = + + aspectRatio % ( RATIO_SQUARE + 1 ) \n setupAspectRatio ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/191"}
{"input": "<s> protected fun unregisterFileUpdateListener ( ) { try { contentResolver . unregisterContentObserver ( observer )", "gt": "} catch ( ignored : Exception ) { \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/194"}
{"input": "<s> protected fun showAddIncludedFolderDialog ( callback : ( ) - > Unit ) { FilePickerDialog ( this , config . lastFilepickerPath , false , config . shouldShowHidden , false , true ) { config . lastFilepickerPath = it config . addIncludedFolder ( it ) callback ( )", "gt": "ensureBackgroundThread { \n scanPathRecursively ( it ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/195"}
{"input": "<s> private fun launchActivity ( ) {", "gt": "startActivity ( Intent ( this , MainActivity : : class . java ) ) \n finish ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/196"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "mIsVideo = true \n super . onCreate ( savedInstanceState ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/197"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { showTransparentTop = true super . onCreate ( savedInstanceState ) setContentView ( binding . root )", "gt": "setupOptionsMenu ( ) \n setupOrientation ( ) \n checkNotchSupport ( ) \n initPlayer ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/198"}
{"input": "<s> override fun onPause ( ) { super . onPause ( ) pauseVideo ( )", "gt": "if ( config . rememberLastVideoPosition & & mWasVideoStarted ) { \n saveVideoProgress ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/199"}
{"input": "<s> private fun togglePlayPause ( ) { mIsPlaying = ! mIsPlaying if ( mIsPlaying ) {", "gt": "resumeVideo ( ) \n } else { \n pauseVideo ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/205"}
{"input": "<s> private fun setLastVideoSavedPosition ( ) { val pos = config . getLastVideoPosition ( mUri . toString ( ) ) if ( pos > 0 ) {", "gt": "setPosition ( pos ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/207"}
{"input": "<s> private fun didVideoEnd ( ) : Boolean { val currentPos = mExoPlayer ? . currentPosition ? : 0", "gt": "val duration = mExoPlayer ? . duration ? : 0 \n return currentPos ! = 0 L & & currentPos > = duration \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/209"}
{"input": "<s> private fun saveVideoProgress ( ) { if ( ! didVideoEnd ( ) ) {", "gt": "config . saveLastVideoPosition ( mUri . toString ( ) , mExoPlayer ! ! . currentPosition . toInt ( ) / <NUM_LIT:1000> ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/210"}
{"input": "<s> private fun doSkip ( forward : Boolean ) { if ( mExoPlayer = = null ) { return } val curr = mExoPlayer ! ! . currentPosition val newProgress = if ( forward ) curr + FAST_FORWARD_VIDEO_MS else curr - FAST_FORWARD_VIDEO_MS val roundProgress = Math . round ( newProgress / <NUM_LIT:1000> f ) val limitedProgress = Math . max ( Math . min ( mExoPlayer ! ! . duration . toInt ( ) / <NUM_LIT:1000> , roundProgress ) , 0 )", "gt": "setPosition ( limitedProgress ) \n if ( ! mIsPlaying ) { \n togglePlayPause ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/212"}
{"input": "<s> private fun releaseExoPlayer ( ) { mExoPlayer ? . apply {", "gt": "stop ( ) \n release ( ) \n } \n mExoPlayer = null \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/216"}
{"input": "<s> override fun onProgressChanged ( seekBar : SeekBar ? , progress : Int , fromUser : Boolean ) { if ( mExoPlayer ! = null & & fromUser ) { setPosition ( progress )", "gt": "resetPlayWhenReady ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/217"}
{"input": "<s> override fun onStopTrackingTouch ( seekBar : SeekBar ? ) { if ( mExoPlayer = = null ) return if ( mIsPlaying ) { mExoPlayer ! ! . playWhenReady = true } else {", "gt": "togglePlayPause ( ) \n } \n \n mIsDragged = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/218"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n stopSlideshow ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/219"}
{"input": "<s> private fun initBottomActions ( ) {", "gt": "initBottomActionButtons ( ) \n initBottomActionsLayout ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/223"}
{"input": "<s> private fun initFavorites ( ) { ensureBackgroundThread {", "gt": "mFavoritePaths = getFavoritePaths ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/224"}
{"input": "<s> private fun checkSlideshowOnEnter ( ) { if ( intent . getBooleanExtra ( SLIDESHOW_START_ON_ENTER , false ) ) {", "gt": "initSlideshow ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/226"}
{"input": "<s> private fun initSlideshow ( ) { SlideshowDialog ( this ) {", "gt": "startSlideshow ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/227"}
{"input": "<s> private fun slideshowEnded ( forward : Boolean ) { if ( config . loopSlideshow ) { if ( forward ) { binding . viewPager . setCurrentItem ( 0 , false ) } else { binding . viewPager . setCurrentItem ( binding . viewPager . adapter ! ! . count - 1 , false ) }", "gt": "} else { \n stopSlideshow ( ) \n toast ( R . string . slideshow_ended ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/229"}
{"input": "<s> private fun stopSlideshow ( ) { if ( mIsSlideshowActive ) { binding . viewPager . setPageTransformer ( false , DefaultPageTransformer ( ) ) mIsSlideshowActive = false showSystemUI ( true ) mSlideshowHandler . removeCallbacksAndMessages ( null ) window . clearFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) mAreSlideShowMediaVisible = false", "gt": "if ( config . slideshowRandomOrder ) { \n mRandomSlideshowStopped = true \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/230"}
{"input": "<s> private fun moveFileTo ( ) { handleDeletePasswordProtection {", "gt": "checkMediaManagementAndCopy ( false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/232"}
{"input": "<s> private fun checkMediaManagementAndCopy ( isCopyOperation : Boolean ) { handleMediaManagementPrompt {", "gt": "copyMoveTo ( isCopyOperation ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/233"}
{"input": "<s> private fun rotateImage ( degrees : Int ) { val currentPath = getCurrentPath ( ) if ( needsStupidWritePermissions ( currentPath ) ) { handleSAFDialog ( currentPath ) { if ( it ) { rotateBy ( degrees ) }", "gt": "} \n } else { \n rotateBy ( degrees ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/235"}
{"input": "<s> private fun rotateBy ( degrees : Int ) {", "gt": "getCurrentPhotoFragment ( ) ? . rotateImageViewBy ( degrees ) \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/236"}
{"input": "<s> private fun toggleOrientation ( orientation : Int ) { requestedOrientation = orientation", "gt": "mIsOrientationLocked = orientation ! = ActivityInfo . SCREEN_ORIENTATION_UNSPECIFIED \n refreshMenuItems ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/237"}
{"input": "<s> private fun isShowHiddenFlagNeeded ( ) : Boolean { val file = File ( mPath ) if ( file . isHidden ) { return true } var parent = file . parentFile ? : return false while ( true ) { if ( parent . isHidden | | parent . list ( ) ? . any { it . startsWith ( NOMEDIA ) } = = true ) { return true } if ( parent . absolutePath = = \" <STR_LIT:/> \" ) { break }", "gt": "parent = parent . parentFile ? : return false \n } \n \n return false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/239"}
{"input": "<s> private fun showProperties ( ) { if ( getCurrentMedium ( ) ! = null ) {", "gt": "PropertiesDialog ( this , getCurrentPath ( ) , false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/240"}
{"input": "<s> private fun toggleFavorite ( ) { val medium = getCurrentMedium ( ) ? : return medium . isFavorite = ! medium . isFavorite ensureBackgroundThread { updateFavorite ( medium . path , medium . isFavorite ) if ( medium . isFavorite ) { mFavoritePaths . add ( medium . path ) } </s", "gt": "private fun toggleFavorite ( ) { val medium = getCurrentMedium ( ) ? : return medium . isFavorite = ! medium . isFavorite ensureBackgroundThread { updateFavorite ( medium . path , medium . isFavorite ) if ( medium . isFavorite ) { mFavoritePaths . add ( medium . path ) }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/241"}
{"input": "<s> private fun restoreFile ( ) { restoreRecycleBinPath ( getCurrentPath ( ) ) {", "gt": "refreshViewPager ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/242"}
{"input": "<s> private fun resizeImage ( ) {", "gt": "val oldPath = getCurrentPath ( ) \n launchResizeImageDialog ( oldPath ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/243"}
{"input": "<s> private fun checkMediaManagementAndRename ( ) { handleMediaManagementPrompt {", "gt": "renameFile ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/245"}
{"input": "<s> private fun refreshUI ( media : ArrayList < Medium > , refetchViewPagerPosition : Boolean ) { mPrevHashcode = media . hashCode ( ) </s", "gt": "private fun refreshUI ( media : ArrayList < Medium > , refetchViewPagerPosition : Boolean ) { mPrevHashcode = media . hashCode ( )", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/247"}
{"input": "<s> override fun fragmentClicked ( ) { mIsFullScreen = ! mIsFullScreen", "gt": "checkSystemUI ( ) \n fullscreenToggled ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/248"}
{"input": "<s> override fun goToPrevItem ( ) {", "gt": "binding . viewPager . setCurrentItem ( binding . viewPager . currentItem - 1 , false ) \n checkOrientation ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/250"}
{"input": "<s> override fun goToNextItem ( ) {", "gt": "binding . viewPager . setCurrentItem ( binding . viewPager . currentItem + 1 , false ) \n checkOrientation ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/251"}
{"input": "<s> private fun checkSystemUI ( ) { if ( mIsFullScreen ) { hideSystemUI ( true )", "gt": "} else { \n stopSlideshow ( ) \n showSystemUI ( true ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/252"}
{"input": "<s> private fun getCurrentMedium ( ) : Medium ? { return if ( getCurrentMedia ( ) . isEmpty ( ) | | mPos = = - 1 ) {", "gt": "null \n } else { \n getCurrentMedia ( ) [ min ( mPos , getCurrentMedia ( ) . lastIndex ) ] \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/254"}
{"input": "<s> override fun onPageSelected ( position : Int ) { if ( mPos ! = position ) { mPos = position", "gt": "updateActionbarTitle ( ) \n refreshMenuItems ( ) \n scheduleSwipe ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/255"}
{"input": "<s> override fun onPageScrollStateChanged ( state : Int ) { if ( state = = ViewPager . SCROLL_STATE_IDLE & & getCurrentMedium ( ) ! = null ) {", "gt": "checkOrientation ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/256"}
{"input": "<s> private fun storeWidgetColors ( ) { config . apply { widgetBgColor = mBgColor", "gt": "widgetTextColor = mTextColor \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/257"}
{"input": "<s> private fun requestWidgetUpdate ( ) { Intent ( AppWidgetManager . ACTION_APPWIDGET_UPDATE , null , this , MyWidgetProvider : : class . java ) . apply { putExtra ( AppWidgetManager . EXTRA_APPWIDGET_IDS , intArrayOf ( mWidgetId ) )", "gt": "sendBroadcast ( this ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/258"}
{"input": "<s> private fun pickBackgroundColor ( ) { ColorPickerDialog ( this , mBgColorWithoutTransparency ) { wasPositivePressed , color - > if ( wasPositivePressed ) {", "gt": "mBgColorWithoutTransparency = color \n updateBackgroundColor ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/261"}
{"input": "<s> private fun pickTextColor ( ) { ColorPickerDialog ( this , mTextColor ) { wasPositivePressed , color - > if ( wasPositivePressed ) {", "gt": "mTextColor = color \n updateTextColor ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/262"}
{"input": "<s> private fun changeSelectedFolder ( ) { PickDirectoryDialog ( this , \" \" , false , true , false , true ) {", "gt": "updateFolderImage ( it ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/263"}
{"input": "<s> override fun onActionModeDestroyed ( ) { if ( isDragAndDropping ) { notifyDataSetChanged ( ) val reorderedFoldersList = dirs . map { it . path } config . customFoldersOrder = TextUtils . join ( \" <STR_LIT> \" , reorderedFoldersList )", "gt": "config . directorySorting = SORT_BY_CUSTOM \n } \n \n isDragAndDropping = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/267"}
{"input": "<s> override fun onViewRecycled ( holder : ViewHolder ) { super . onViewRecycled ( holder ) if ( ! activity . isDestroyed ) {", "gt": "Glide . with ( activity ) . clear ( bindItem ( holder . itemView ) . dirThumbnail ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/268"}
{"input": "<s> private fun moveSelectedItemsToTop ( ) { selectedKeys . reversed ( ) . forEach { key - > val position = dirs . indexOfFirst { it . path . hashCode ( ) = = key } val tempItem = dirs [ position ] dirs . removeAt ( position )", "gt": "dirs . add ( 0 , tempItem ) \n } \n \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/271"}
{"input": "<s> private fun moveSelectedItemsToBottom ( ) { selectedKeys . forEach { key - > val position = dirs . indexOfFirst { it . path . hashCode ( ) = = key } val tempItem = dirs [ position ] dirs . removeAt ( position )", "gt": "dirs . add ( dirs . size , tempItem ) \n } \n \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/272"}
{"input": "<s> private fun tryEmptyRecycleBin ( askConfirmation : Boolean ) { if ( askConfirmation ) { activity . showRecycleBinEmptyingDialog { emptyRecycleBin ( )", "gt": "} \n } else { \n emptyRecycleBin ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/274"}
{"input": "<s> private fun emptyRecycleBin ( ) { activity . handleLockedFolderOpening ( RECYCLE_BIN ) { success - > if ( success ) { activity . emptyTheRecycleBin {", "gt": "listener ? . refreshItems ( ) \n } \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/275"}
{"input": "<s> private fun tryLockFolder ( ) { if ( config . wasFolderLockingNoticeShown ) { lockFolder ( ) } else {", "gt": "FolderLockingNoticeDialog ( activity ) { \n lockFolder ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/278"}
{"input": "<s> private fun lockFolder ( ) { SecurityDialog ( activity , \" \" , SHOW_ALL_TABS ) { hash , type , success - > if ( success ) { getSelectedPaths ( ) . filter { ! config . isFolderProtected ( it ) } . forEach { config . addFolderProtection ( it , hash , type ) lockedFolderPaths . add ( it ) }", "gt": "listener ? . refreshItems ( ) \n finishActMode ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/279"}
{"input": "<s> private fun copyFilesTo ( ) { handleLockedFolderOpeningForFolders ( getSelectedPaths ( ) ) {", "gt": "copyMoveTo ( it , true ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/281"}
{"input": "<s> private fun tryCreateShortcut ( ) { if ( ! isOreoPlus ( ) ) { return } activity . handleLockedFolderOpening ( getFirstSelectedItemPath ( ) ? : \" \" ) { success - >", "gt": "if ( success ) { \n createShortcut ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/283"}
{"input": "<s> private fun tryChangeAlbumCover ( useDefault : Boolean ) { activity . handleLockedFolderOpening ( getFirstSelectedItemPath ( ) ? : \" \" ) { success - >", "gt": "if ( success ) { \n changeAlbumCover ( useDefault ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/285"}
{"input": "<s> private fun changeAlbumCover ( useDefault : Boolean ) { if ( selectedKeys . size ! = 1 ) return val path = getFirstSelectedItemPath ( ) ? : return if ( useDefault ) { val albumCovers = getAlbumCoversWithout ( path )", "gt": "storeCovers ( albumCovers ) \n } else { \n pickMediumFrom ( path , path ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/286"}
{"input": "<s> private fun pickMediumFrom ( targetFolder : String , path : String ) { PickMediumDialog ( activity , path ) { if ( File ( it ) . isDirectory ) { pickMediumFrom ( targetFolder , it ) } else { val albumCovers = getAlbumCoversWithout ( path ) val cover = AlbumCover ( targetFolder , it )", "gt": "albumCovers . add ( cover ) \n storeCovers ( albumCovers ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/287"}
{"input": "<s> fun updateAnimateGifs ( animateGifs : Boolean ) {", "gt": "this . animateGifs = animateGifs \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/291"}
{"input": "<s> fun updateCropThumbnails ( cropThumbnails : Boolean ) {", "gt": "this . cropThumbnails = cropThumbnails \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/292"}
{"input": "<s> override fun onRowMoved ( fromPosition : Int , toPosition : Int ) { if ( fromPosition < toPosition ) { for ( i in fromPosition until toPosition ) { Collections . swap ( dirs , i , i + 1 ) } } else { for ( i in fromPosition downTo toPosition + 1 ) { Collections . swap ( dirs , i , i - 1 )", "gt": "} \n } \n \n notifyItemMoved ( fromPosition , toPosition ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/293"}
{"input": "<s> override fun actionItemPressed ( id : Int ) { when ( id ) {", "gt": "com . simplemobiletools . commons . R . id . cab_remove - > removeSelection ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/297"}
{"input": "<s> private fun executeItemMenuOperation ( eventTypeId : Int , callback : ( ) - > Unit ) { selectedKeys . clear ( )", "gt": "selectedKeys . add ( eventTypeId ) \n callback ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/299"}
{"input": "<s> override fun actionItemPressed ( id : Int ) { when ( id ) {", "gt": "R . id . cab_unhide - > tryUnhideFolders ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/300"}
{"input": "<s> private fun setupView ( view : View , folder : String ) { ItemManageFolderBinding . bind ( view ) . apply { root . setupViewBackground ( activity ) manageFolderHolder . isSelected = selectedKeys . contains ( folder . hashCode ( ) ) manageFolderTitle . apply {", "gt": "text = folder \n setTextColor ( context . getProperTextColor ( ) ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/302"}
{"input": "<s> override fun onViewRecycled ( holder : ViewHolder ) { super . onViewRecycled ( holder ) if ( ! activity . isDestroyed ) { val itemView = holder . itemView visibleItemPaths . remove ( itemView . allViews . firstOrNull { it . id = = R . id . medium_name } ? . tag ) val tmb = itemView . allViews . firstOrNull { it . id = = R . id . medium_thumbnail }", "gt": "if ( tmb ! = null ) { \n Glide . with ( activity ) . clear ( tmb ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/305"}
{"input": "<s> private fun checkMediaManagementAndRename ( ) { activity . handleMediaManagementPrompt {", "gt": "renameFile ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/309"}
{"input": "<s> private fun editFile ( ) {", "gt": "val path = getFirstSelectedItemPath ( ) ? : return \n activity . openEditor ( path ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/310"}
{"input": "<s> private fun openPath ( ) {", "gt": "val path = getFirstSelectedItemPath ( ) ? : return \n activity . openPath ( path , true ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/311"}
{"input": "<s> private fun setAs ( ) {", "gt": "val path = getFirstSelectedItemPath ( ) ? : return \n activity . setAs ( path ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/312"}
{"input": "<s> private fun resize ( ) { val paths = getSelectedItems ( ) . filter { it . isImage ( ) } . map { it . path } if ( isOneItemSelected ( ) ) { val path = paths . first ( ) activity . launchResizeImageDialog ( path ) { finishActMode ( ) listener ? . refreshItems ( ) } } else { activity . launchResizeMultipleImagesDialog ( paths ) {", "gt": "finishActMode ( ) \n listener ? . refreshItems ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/313"}
{"input": "<s> private fun toggleFileVisibility ( hide : Boolean ) { ensureBackgroundThread { getSelectedItems ( ) . forEach { activity . toggleFileVisibility ( it . path , hide ) } activity . runOnUiThread {", "gt": "listener ? . refreshItems ( ) \n finishActMode ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/315"}
{"input": "<s> private fun toggleFavorites ( add : Boolean ) { ensureBackgroundThread { getSelectedItems ( ) . forEach { it . isFavorite = add activity . updateFavorite ( it . path , add ) } activity . runOnUiThread {", "gt": "listener ? . refreshItems ( ) \n finishActMode ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/316"}
{"input": "<s> private fun restoreFiles ( ) { activity . restoreRecycleBinPaths ( getSelectedPaths ( ) ) { listener ? . refreshItems ( )", "gt": "finishActMode ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/317"}
{"input": "<s> private fun moveFilesTo ( ) { activity . handleDeletePasswordProtection {", "gt": "checkMediaManagementAndCopy ( false ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/320"}
{"input": "<s> private fun checkMediaManagementAndCopy ( isCopyOperation : Boolean ) { activity . handleMediaManagementPrompt {", "gt": "copyMoveTo ( isCopyOperation ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/321"}
{"input": "<s> private fun fixDateTaken ( ) { ensureBackgroundThread { activity . fixDateTaken ( getSelectedPaths ( ) , true ) {", "gt": "listener ? . refreshItems ( ) \n finishActMode ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/322"}
{"input": "<s> private fun checkDeleteConfirmation ( ) { activity . handleMediaManagementPrompt { if ( config . isDeletePasswordProtectionOn ) { activity . handleDeletePasswordProtection { deleteFiles ( config . tempSkipRecycleBin ) } } else if ( config . tempSkipDeleteConfirmation | | config . skipDeleteConfirmation ) { deleteFiles ( config . tempSkipRecycleBin )", "gt": "} else { \n askConfirmDelete ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/323"}
{"input": "<s> fun updateDisplayFilenames ( displayFilenames : Boolean ) { this . displayFilenames = displayFilenames", "gt": "enableInstantLoad ( ) \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/325"}
{"input": "<s> fun updateAnimateGifs ( animateGifs : Boolean ) {", "gt": "this . animateGifs = animateGifs \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/326"}
{"input": "<s> fun updateCropThumbnails ( cropThumbnails : Boolean ) {", "gt": "this . cropThumbnails = cropThumbnails \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/327"}
{"input": "<s> fun updateShowFileTypes ( showFileTypes : Boolean ) {", "gt": "this . showFileTypes = showFileTypes \n notifyDataSetChanged ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/328"}
{"input": "<s> private fun enableInstantLoad ( ) { loadImageInstantly = true delayHandler . postDelayed ( {", "gt": "loadImageInstantly = false \n } , INSTANT_LOAD_DURATION ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/329"}
{"input": "<s> private fun setupSection ( view : View , section : ThumbnailSection ) { ThumbnailSectionBinding . bind ( view ) . apply { thumbnailSection . text = section . title", "gt": "thumbnailSection . setTextColor ( textColor ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/330"}
{"input": "<s> override fun destroyItem ( container : ViewGroup , position : Int , any : Any ) {", "gt": "fragments . remove ( position ) \n super . destroyItem ( container , position , any ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/334"}
{"input": "<s> fun toggleFullscreen ( isFullscreen : Boolean ) { for ( ( pos , fragment ) in fragments ) {", "gt": "fragment . fullscreenToggled ( isFullscreen ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/335"}
{"input": "<s> fun setCurrentPhoto ( position : Int ) { if ( currentSelectionIndex ! = position ) { currentSelectionIndex = position", "gt": "notifyDataSetChanged ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/338"}
{"input": "<s> fun stopFetching ( ) {", "gt": "mediaFetcher . shouldStop = true \n cancel ( true ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/341"}
{"input": "<s> fun destroyInstance ( ) { if ( db ? . isOpen = = true ) { db ? . close ( )", "gt": "} \n db = null \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/342"}
{"input": "<s> private fun positivePressed ( ) {", "gt": "dialog ? . dismiss ( ) \n callback ( true ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/343"}
{"input": "<s> private fun setupStyle ( ) { val styleRadio = binding . dialogRadioFolderStyle styleRadio . setOnCheckedChangeListener { group , checkedId - > updateSample ( ) } val styleBtn = when ( config . folderStyle ) { FOLDER_STYLE_SQUARE - > binding . dialogRadioFolderSquare", "gt": "else - > binding . dialogRadioFolderRoundedCorners \n } \n \n styleBtn . isChecked = true \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/345"}
{"input": "<s> private fun setupMediaCount ( ) { val countRadio = binding . dialogRadioFolderCountHolder countRadio . setOnCheckedChangeListener { group , checkedId - > updateSample ( ) } val countBtn = when ( config . showFolderMediaCount ) { FOLDER_MEDIA_CNT_LINE - > binding . dialogRadioFolderCountLine FOLDER_MEDIA_CNT_BRACKETS - > binding . dialogRadioFolderCountBrackets", "gt": "else - > binding . dialogRadioFolderCountNone \n } \n \n countBtn . isChecked = true \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/346"}
{"input": "<s> private fun dialogConfirmed ( ) {", "gt": "dialog ? . dismiss ( ) \n callback ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/349"}
{"input": "<s> private fun getViewValue ( view : EditText ) : Float {", "gt": "val textValue = view . value \n return if ( textValue . isEmpty ( ) ) <NUM_LIT> else textValue . toFloat ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/350"}
{"input": "<s> private fun dialogConfirmed ( ) { val path = if ( alternativePaths . isEmpty ( ) ) selectedPaths [ 0 ] else alternativePaths [ radioGroup ! ! . checkedRadioButtonId ]", "gt": "activity . config . addExcludedFolder ( path ) \n callback ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/352"}
{"input": "<s> private fun customRatioPicked ( ) { CustomAspectRatioDialog ( activity , lastOtherAspectRatio ) { callback ( it )", "gt": "dialog ? . dismiss ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/353"}
{"input": "<s> private fun ratioPicked ( pair : Pair < Float , Float > ) {", "gt": "callback ( pair ) \n dialog ? . dismiss ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/354"}
{"input": "<s> private fun MySearchMenu . updateSearchViewUi ( ) { getToolbar ( ) . beInvisible ( ) updateColors ( )", "gt": "setBackgroundColor ( Color . TRANSPARENT ) \n searchViewAppBarLayout . setBackgroundColor ( Color . TRANSPARENT ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/356"}
{"input": "<s> private fun MySearchMenu . setSearchViewListeners ( ) { onSearchOpenListener = { updateSearchViewLeftIcon ( com . simplemobiletools . commons . R . drawable . ic_cross_vector ) } </s", "gt": "private fun MySearchMenu . setSearchViewListeners ( ) { onSearchOpenListener = { updateSearchViewLeftIcon ( com . simplemobiletools . commons . R . drawable . ic_cross_vector ) }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/357"}
{"input": "<s> private fun backPressed ( ) { if ( searchView . isSearchOpen ) { searchView . closeSearch ( ) } else if ( activity . config . groupDirectSubfolders ) { if ( currentPathPrefix . isEmpty ( ) ) { dialog ? . dismiss ( ) } else { openedSubfolders . removeLast ( ) currentPathPrefix = openedSubfolders . last ( ) gotDirectories ( allDirectories )", "gt": "} \n } else { \n dialog ? . dismiss ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/361"}
{"input": "<s> private fun showOtherFolder ( ) { PickDirectoryDialog ( activity , path , true , true , false , false ) { callback ( it )", "gt": "dialog ? . dismiss ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/362"}
{"input": "<s> private fun getViewValue ( view : EditText ) : Int {", "gt": "val textValue = view . value \n return if ( textValue . isEmpty ( ) ) 0 else textValue . toInt ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/363"}
{"input": "<s> private fun getViewValue ( view : EditText ) : Int {", "gt": "val textValue = view . value \n return if ( textValue . isEmpty ( ) ) 0 else textValue . toInt ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/364"}
{"input": "<s> private fun selectPath ( alertDialog : AlertDialog , newPath : String ) { activity . handleSAFDialogSdk30 ( newPath ) { if ( ! it ) { return @ handleSAFDialogSdk30", "gt": "} \n callback ( newPath ) \n alertDialog . dismiss ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/365"}
{"input": "<s> < String > , pathLastModifiedMap : Map < String , Long > , callback : ( ) - > Unit ) { fixDateTaken ( paths , false ) for ( path in paths ) { val file = File ( path ) val lastModified = pathLastModifiedMap [ path ] if ( config . keepLastModified & & lastModified ! = null & & lastModified ! = 0 L ) { File ( file . absolutePath ) . setLastModified ( lastModified )", "gt": "updateLastModified ( file . absolutePath , lastModified ) \n } \n } \n rescanPaths ( paths , callback ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/382"}
{"input": "<s> @ TargetApi ( Build . VERSION_CODES . N ) fun Activity . showFileOnMap ( path : String ) { val exif = try { if ( path . startsWith ( \" <STR_LIT> \" ) & & isNougatPlus ( ) ) { ExifInterface ( contentResolver . openInputStream ( Uri . parse ( path ) ) ! ! ) } else { ExifInterface ( path ) } } catch ( e : Exception ) { showErrorToast ( e ) return } val latLon = FloatArray ( <NUM_LIT:2> ) if ( exif . getLatLong ( latLon ) ) {", "gt": "showLocationOnMap ( \" <STR_LIT> \" ) \n } else { \n toast ( R . string . unknown_location ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/384"}
{"input": "<s> < String > , noMediaFolders : ArrayList < String > ) : String { val dirName = getFolderNameFromPath ( path ) val folderNoMediaStatuses = HashMap < String , Boolean > ( ) noMediaFolders . forEach { folder - > folderNoMediaStatuses [ \" <STR_LIT> \" ] = true } </s", "gt": "< String > , noMediaFolders : ArrayList < String > ) : String { val dirName = getFolderNameFromPath ( path ) val folderNoMediaStatuses = HashMap < String , Boolean > ( ) noMediaFolders . forEach { folder - > folderNoMediaStatuses [ \" <STR_LIT> \" ] = true }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/392"}
{"input": "<s>", "gt": "try { \n destination . saveAttributes ( ) \n } catch ( ignored : Exception ) { \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/405"}
{"input": "<s> private fun isExif ( field : Field ) : Boolean { return field . type = = String : : class . java & &", "gt": "isPublicStaticFinal ( field . modifiers ) & & \n field . name . startsWith ( \" <STR_LIT> \" ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/406"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n storeStateVariables ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/413"}
{"input": "<s> private fun checkScreenDimensions ( ) { if ( mScreenWidth = = 0 | | mScreenHeight = = 0 ) {", "gt": "measureScreen ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/416"}
{"input": "<s> private fun measureScreen ( ) { val metrics = DisplayMetrics ( ) activity ? . windowManager ? . defaultDisplay ? . getRealMetrics ( metrics )", "gt": "mScreenWidth = metrics . widthPixels \n mScreenHeight = metrics . heightPixels \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/417"}
{"input": "<s> private fun photoFragmentVisibilityChanged ( isVisible : Boolean ) { if ( isVisible ) {", "gt": "scheduleZoomableView ( ) \n } else { \n hideZoomableView ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/418"}
{"input": "<s> private fun loadAPNG ( ) { if ( context ! = null ) { val drawable = APNGDrawable . fromFile ( mMedium . path )", "gt": "binding . gesturesView . setImageDrawable ( drawable ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/422"}
{"input": "<s> private fun loadBitmap ( addZoomableView : Boolean = true ) { if ( context = = null ) { return } val path = getFilePathToShow ( ) if ( path . isWebP ( ) ) { val drawable = WebPDrawable . fromFile ( path ) if ( drawable . intrinsicWidth = = 0 ) { loadWithGlide ( path , addZoomableView ) } else { binding . gesturesView . setImageDrawable ( drawable )", "gt": "} \n } else { \n loadWithGlide ( path , addZoomableView ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/423"}
{"input": "<s>", "gt": "for ( i in 0 until fakeItemsCnt ) { \n paths . add ( \" \" ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/424"}
{"input": "<s> private fun openPanorama ( ) { Intent ( context , PanoramaPhotoActivity : : class . java ) . apply { putExtra ( PATH , mMedium . path )", "gt": "startActivity ( this ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/427"}
{"input": "<s> override fun onDestroy ( ) { super . onDestroy ( ) if ( activity ? . isChangingConfigurations = = false ) {", "gt": "cleanup ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/435"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putInt ( PROGRESS , mCurrTime ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/438"}
{"input": "<s> private fun restoreLastVideoSavedPosition ( ) { val pos = mConfig . getLastVideoPosition ( mMedium . path )", "gt": "if ( pos > 0 ) { \n mPositionAtPause = pos * <NUM_LIT> \n setPosition ( pos ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/441"}
{"input": "<s> private fun setupTimeHolder ( ) { mSeekBar . max = mDuration", "gt": "binding . bottomVideoTimeHolder . videoDuration . text = mDuration . getFormattedDuration ( ) \n setupTimer ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/442"}
{"input": "<s> private fun setupTimer ( ) { activity ? . runOnUiThread ( object : Runnable { override fun run ( ) { if ( mExoPlayer ! = null & & ! mIsDragged & & mIsPlaying ) { mCurrTime = ( mExoPlayer ! ! . currentPosition / <NUM_LIT:1000> ) . toInt ( ) mSeekBar . progress = mCurrTime mCurrTimeView . text = mCurrTime . getFormattedDuration ( ) }", "gt": "mTimerHandler . postDelayed ( this , <NUM_LIT:1000> ) \n } \n } ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/443"}
{"input": "<s> private fun openPanorama ( ) { Intent ( context , PanoramaVideoActivity : : class . java ) . apply { putExtra ( PATH , mMedium . path )", "gt": "startActivity ( this ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/446"}
{"input": "<s> private fun skip ( forward : Boolean ) { if ( mIsPanorama ) { return } else if ( mExoPlayer = = null ) { playVideo ( ) return", "gt": "} \n \n mPositionAtPause = 0 L \n doSkip ( forward ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/447"}
{"input": "<s> private fun doSkip ( forward : Boolean ) { if ( mExoPlayer = = null ) { return } val curr = mExoPlayer ! ! . currentPosition val newProgress = if ( forward ) curr + FAST_FORWARD_VIDEO_MS else curr - FAST_FORWARD_VIDEO_MS val roundProgress = Math . round ( newProgress / <NUM_LIT:1000> f ) val limitedProgress = Math . max ( Math . min ( mExoPlayer ! ! . duration . toInt ( ) / <NUM_LIT:1000> , roundProgress ) , 0 )", "gt": "setPosition ( limitedProgress ) \n if ( ! mIsPlaying ) { \n togglePlayPause ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/448"}
{"input": "<s> override fun onProgressChanged ( seekBar : SeekBar , progress : Int , fromUser : Boolean ) { if ( fromUser ) { if ( mExoPlayer ! = null ) { if ( ! mWasPlayerInited ) { mPositionWhenInit = progress } setPosition ( progress ) } if ( mExoPlayer = = null ) {", "gt": "mPositionAtPause = progress * <NUM_LIT> \n playVideo ( ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/449"}
{"input": "<s> override fun onStartTrackingTouch ( seekBar : SeekBar ) { if ( mExoPlayer = = null ) { return", "gt": "} \n \n mExoPlayer ! ! . playWhenReady = false \n mIsDragged = true \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/450"}
{"input": "<s> override fun onStopTrackingTouch ( seekBar : SeekBar ) { if ( mIsPanorama ) { openPanorama ( ) return } if ( mExoPlayer = = null ) { return } if ( mIsPlaying ) { mExoPlayer ! ! . playWhenReady = true } else {", "gt": "playVideo ( ) \n } \n \n mIsDragged = false \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/451"}
{"input": "<s> private fun togglePlayPause ( ) { if ( activity = = null | | ! isAdded ) { return } if ( mIsPlaying ) {", "gt": "pauseVideo ( ) \n } else { \n playVideo ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/452"}
{"input": "<s> private fun videoEnded ( ) : Boolean { val currentPos = mExoPlayer ? . currentPosition ? : 0", "gt": "val duration = mExoPlayer ? . duration ? : 0 \n return currentPos ! = 0 L & & currentPos > = duration \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/454"}
{"input": "<s> private fun setPosition ( seconds : Int ) { mExoPlayer ? . seekTo ( seconds * <NUM_LIT> ) mSeekBar . progress = seconds mCurrTimeView . text = seconds . getFormattedDuration ( )", "gt": "if ( ! mIsPlaying ) { \n mPositionAtPause = mExoPlayer ? . currentPosition ? : 0 L \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/455"}
{"input": "<s> private fun setupVideoDuration ( ) { ensureBackgroundThread { mDuration = context ? . getDuration ( mMedium . path ) ? : 0 activity ? . runOnUiThread {", "gt": "setupTimeHolder ( ) \n setPosition ( 0 ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/456"}
{"input": "<s> private fun releaseExoPlayer ( ) { mIsPlayerPrepared = false mExoPlayer ? . apply {", "gt": "stop ( ) \n release ( ) \n } \n mExoPlayer = null \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/459"}
{"input": "<s> private fun getLatLonAltitude ( path : String ) : String { var result = \" \" val exif = try { ExifInterface ( path ) } catch ( e : Exception ) { return \" \" } val latLon = FloatArray ( <NUM_LIT:2> ) if ( exif . getLatLong ( latLon ) ) { result = \" <STR_LIT> \" } val altitude = exif . getAltitude ( <NUM_LIT:0.0> ) if ( altitude ! = <NUM_LIT:0.0> ) {", "gt": "result + = \" <STR_LIT> \" \n } \n \n return result . trimStart ( <CHAR_LIT:U+002C> ) . trim ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/460"}
{"input": "<s> fun removeExcludedFolder ( path : String ) { val currExcludedFolders = HashSet < String > ( excludedFolders )", "gt": "currExcludedFolders . remove ( path ) \n excludedFolders = currExcludedFolders \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/467"}
{"input": "<s> fun addIncludedFolder ( path : String ) { val currIncludedFolders = HashSet < String > ( includedFolders )", "gt": "currIncludedFolders . add ( path ) \n includedFolders = currIncludedFolders \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/468"}
{"input": "<s> fun removeIncludedFolder ( path : String ) { val currIncludedFolders = HashSet < String > ( includedFolders )", "gt": "currIncludedFolders . remove ( path ) \n includedFolders = currIncludedFolders \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/470"}
{"input": "<s> private fun getDirectoryColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { DIR_HORIZONTAL_COLUMN_CNT } </s", "gt": "private fun getDirectoryColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { DIR_HORIZONTAL_COLUMN_CNT }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/471"}
{"input": "<s> private fun getMediaColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { MEDIA_HORIZONTAL_COLUMN_CNT } </s", "gt": "private fun getMediaColumnsField ( ) : String { val isPortrait = context . resources . configuration . orientation = = Configuration . ORIENTATION_PORTRAIT return if ( isPortrait ) { if ( scrollHorizontally ) { MEDIA_HORIZONTAL_COLUMN_CNT }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/473"}
{"input": "<s> fun saveLastVideoPosition ( path : String , value : Int ) { if ( path . isNotEmpty ( ) ) {", "gt": "prefs . edit ( ) . putInt ( \" <STR_LIT> \" , value ) . apply ( ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/476"}
{"input": "<s> fun getPermissionsToRequest ( ) : Collection < Int > { val permissions = mutableListOf ( getPermissionToRequest ( ) ) if ( isRPlus ( ) ) { permissions . add ( PERMISSION_MEDIA_LOCATION ) } if ( isTiramisuPlus ( ) ) {", "gt": "permissions . add ( PERMISSION_READ_MEDIA_VIDEO ) \n } \n \n return permissions \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/477"}
{"input": "<s> override fun transformPage ( view : View , position : Float ) { view . translationX = view . width * - position view . alpha = if ( position < = - <NUM_LIT> | | position > = <NUM_LIT> ) { <NUM_LIT> } </s", "gt": "override fun transformPage ( view : View , position : Float ) { view . translationX = view . width * - position view . alpha = if ( position < = - <NUM_LIT> | | position > = <NUM_LIT> ) { <NUM_LIT> }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/478"}
{"input": "<s> fun clearThumbs ( ) {", "gt": "filterThumbnails = ArrayList ( ) \n processedThumbnails = ArrayList ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/480"}
{"input": "<s> fun readUInt32 ( bb : ByteBuffer ) : Long { var i = bb . int . toLong ( )", "gt": "if ( i < 0 ) { \n i + = <NUM_LIT> shl <NUM_LIT:32> \n } \n return i \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/481"}
{"input": "<s> private fun addFolder ( curFolders : HashSet < String > , folder : String ) { curFolders . add ( folder ) val files = File ( folder ) . listFiles ( ) ? : return for ( file in files ) {", "gt": "if ( file . isDirectory ) { \n addFolder ( curFolders , file . absolutePath ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/483"}
{"input": "<s> private fun formatDate ( timestamp : String , showDay : Boolean ) : String { return if ( timestamp . areDigitsOnly ( ) ) { val cal = Calendar . getInstance ( Locale . ENGLISH ) cal . timeInMillis = timestamp . toLong ( ) val format = if ( showDay ) context . config . dateFormat else \" <STR_LIT> \"", "gt": "DateFormat . format ( format , cal ) . toString ( ) \n } else { \n \" \" \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/485"}
{"input": "<s> override fun onDeleted ( context : Context , appWidgetIds : IntArray ) { super . onDeleted ( context , appWidgetIds ) ensureBackgroundThread {", "gt": "appWidgetIds . forEach { \n context . widgetsDB . deleteWidgetId ( it ) \n } \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/490"}
{"input": "<s> fun isScheduled ( context : Context ) : Boolean { val jobScheduler = context . getSystemService ( JobScheduler : : class . java )", "gt": "val jobs = jobScheduler . allPendingJobs \n return jobs . any { it . id = = PHOTO_VIDEO_CONTENT_JOB } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/493"}
{"input": "<s> private fun getDayStartTS ( ts : Long , resetDays : Boolean ) : String { val calendar = Calendar . getInstance ( Locale . ENGLISH ) . apply { timeInMillis = ts set ( Calendar . HOUR_OF_DAY , 0 ) set ( Calendar . MINUTE , 0 ) set ( Calendar . SECOND , 0 ) set ( Calendar . MILLISECOND , 0 ) if ( resetDays ) { set ( Calendar . DAY_OF_MONTH , 1 )", "gt": "} \n } \n \n return calendar . timeInMillis . toString ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/497"}
{"input": "<s> fun getSignature ( ) : String { val lastModified = if ( modified > 1 ) { modified } else {", "gt": "File ( path ) . lastModified ( ) \n } \n \n return \" <STR_LIT> \" \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/498"}
{"input": "<s> override fun onReceive ( context : Context , intent : Intent ) {", "gt": "val path = intent . getStringExtra ( REFRESH_PATH ) ? : return \n context . addPathToDB ( path ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/500"}
{"input": "<s> override fun onDraw ( canvas : Canvas ) { super . onDraw ( canvas ) canvas . save ( ) if ( backgroundBitmap ! = null ) { canvas . drawBitmap ( backgroundBitmap ! ! , <NUM_LIT> , <NUM_LIT> , null ) } for ( ( key , value ) in mPaths ) { changePaint ( value ) canvas . drawPath ( key , mPaint ) }", "gt": "changePaint ( mPaintOptions ) \n canvas . drawPath ( mPath , mPaint ) \n canvas . restore ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/505"}
{"input": "<s> private fun actionDown ( x : Float , y : Float ) { mPath . reset ( ) mPath . moveTo ( x , y )", "gt": "mCurX = x \n mCurY = y \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/506"}
{"input": "<s> private fun actionMove ( x : Float , y : Float ) { mPath . quadTo ( mCurX , mCurY , ( x + mCurX ) / <NUM_LIT:2> , ( y + mCurY ) / <NUM_LIT:2> )", "gt": "mCurX = x \n mCurY = y \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/507"}
{"input": "<s> private fun changePaint ( paintOptions : PaintOptions ) {", "gt": "mPaint . color = paintOptions . color \n mPaint . strokeWidth = paintOptions . strokeWidth \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/509"}
{"input": "<s> fun updateBackgroundBitmap ( bitmap : Bitmap ) {", "gt": "backgroundBitmap = bitmap \n invalidate ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/510"}
{"input": "<s> fun getBitmap ( ) : Bitmap { val bitmap = Bitmap . createBitmap ( width , height , Bitmap . Config . ARGB_8888 )", "gt": "val canvas = Canvas ( bitmap ) \n canvas . drawColor ( Color . WHITE ) \n draw ( canvas ) \n return bitmap \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/511"}
{"input": "<s> fun undo ( ) { if ( mPaths . isEmpty ( ) ) { return }", "gt": "val lastKey = mPaths . keys . lastOrNull ( ) \n mPaths . remove ( lastKey ) \n invalidate ( ) \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/512"}
{"input": "<s> private fun percentChanged ( percent : Int ) { if ( mIsBrightnessScroll ) {", "gt": "brightnessPercentChanged ( percent ) \n } else { \n volumePercentChanged ( percent ) \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/517"}
{"input": "<s> private fun showValue ( percent : Int ) { slideInfoView . apply { text = \" <STR_LIT> <STR_LIT> <STR_LIT> \"", "gt": "alpha = <NUM_LIT> \n } \n }", "repo": "Simple-Gallery", "task_id": "Simple-Gallery/518"}
{"input": "<s> public void setCustomTabView ( int layoutResId , int textViewId ) {", "gt": "mTabViewLayoutId = layoutResId ; \n mTabViewTextViewId = textViewId ; \n }", "repo": "vanilla", "task_id": "vanilla/0"}
{"input": "<s> @ Override protected void onAttachedToWindow ( ) { super . onAttachedToWindow ( ) ; if ( mViewPager ! = null ) {", "gt": "scrollToTab ( mViewPager . getCurrentItem ( ) , 0 ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/2"}
{"input": "<s> @ Override public void onPageScrollStateChanged ( int state ) { mScrollState = state ; if ( mViewPagerPageChangeListener ! = null ) {", "gt": "mViewPagerPageChangeListener . onPageScrollStateChanged ( state ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/3"}
{"input": "<s> @ Override public void onClick ( View v ) { for ( int i = 0 ; i < mTabStrip . getChildCount ( ) ; i + + ) { if ( v = = mTabStrip . getChildAt ( i ) ) {", "gt": "mViewPager . setCurrentItem ( i ) ; \n return ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/5"}
{"input": "<s> void setCustomTabColorizer ( SlidingTabLayout . TabColorizer customTabColorizer ) {", "gt": "mCustomTabColorizer = customTabColorizer ; \n invalidate ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/6"}
{"input": "<s> void setSelectedIndicatorColors ( int . . . colors ) { mCustomTabColorizer = null ;", "gt": "mDefaultTabColorizer . setIndicatorColors ( colors ) ; \n invalidate ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/7"}
{"input": "<s> void onViewPagerPageChanged ( int position , float positionOffset ) { mSelectedPosition = position ;", "gt": "mSelectionOffset = positionOffset ; \n invalidate ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/8"}
{"input": "<s> @ Override protected TextView createDefaultTabView ( Context context ) { TextView view = super . createDefaultTabView ( context ) ; view . setTextColor ( getResources ( ) . getColorStateList ( ch . blinkenlights . android . vanilla . R . color . tab_text_selector ) ) ; view . setBackgroundResource ( ch . blinkenlights . android . vanilla . R . drawable . unbound_ripple_light ) ;", "gt": "view . setMaxLines ( 1 ) ; \n view . setEllipsize ( TextUtils . TruncateAt . END ) ; \n view . setTextSize ( <NUM_LIT> ) ; \n return view ; \n }", "repo": "vanilla", "task_id": "vanilla/10"}
{"input": "<s> private static MediaLibraryBackend getBackend ( Context context ) { if ( sBackend = = null ) { synchronized ( sWait ) { if ( sBackend = = null ) { sBackend = new MediaLibraryBackend ( context . getApplicationContext ( ) ) ; sScanner = new MediaScanner ( context . getApplicationContext ( ) , sBackend ) ; sScanner . startQuickScan ( <NUM_LIT> ) ;", "gt": "} \n } \n } \n return sBackend ; \n }", "repo": "vanilla", "task_id": "vanilla/11"}
{"input": "<s> public static void startLibraryScan ( Context context , boolean forceFull , boolean drop ) { MediaLibraryBackend backend = getBackend ( context ) ; if ( drop ) { sScanner . flushDatabase ( ) ; } if ( forceFull ) {", "gt": "sScanner . startFullScan ( ) ; \n } else { \n sScanner . startNormalScan ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/13"}
{"input": "<s> public static void abortLibraryScan ( Context context ) {", "gt": "MediaLibraryBackend backend = getBackend ( context ) ; \n sScanner . abortScan ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/14"}
{"input": "<s> public static MediaLibrary . ScanProgress describeScanProgress ( Context context ) {", "gt": "MediaLibraryBackend backend = getBackend ( context ) ; \n return sScanner . describeScanProgress ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/15"}
{"input": "<s> public static void registerLibraryObserver ( LibraryObserver observer ) { if ( sLibraryObservers . contains ( observer ) )", "gt": "throw new IllegalStateException ( \" <STR_LIT> \" ) ; \n sLibraryObservers . add ( observer ) ; \n }", "repo": "vanilla", "task_id": "vanilla/16"}
{"input": "<s> public static void unregisterLibraryObserver ( LibraryObserver observer ) { boolean removed = sLibraryObservers . remove ( observer ) ;", "gt": "if ( ! removed ) \n throw new IllegalArgumentException ( \" <STR_LIT> \" ) ; \n }", "repo": "vanilla", "task_id": "vanilla/17"}
{"input": "<s> public static int getLibrarySize ( Context context ) { int count = 0 ; Cursor cursor = queryLibrary ( context , TABLE_SONGS , new String [ ] { \" <STR_LIT> \" } , null , null , null ) ;", "gt": "if ( cursor . moveToFirst ( ) ) \n count = cursor . getInt ( 0 ) ; \n cursor . close ( ) ; \n return count ; \n }", "repo": "vanilla", "task_id": "vanilla/23"}
{"input": "<s> long getColumnFromSongId ( String column , long id ) { long mtime = 0 ; Cursor cursor = query ( false , MediaLibrary . TABLE_SONGS , new String [ ] { column } , MediaLibrary . SongColumns . _ID + \" <STR_LIT:=> \" + Long . toString ( id ) , null , null , null , null , \" <STR_LIT:1> \" ) ;", "gt": "if ( cursor . moveToFirst ( ) ) \n mtime = cursor . getLong ( 0 ) ; \n cursor . close ( ) ; \n return mtime ; \n }", "repo": "vanilla", "task_id": "vanilla/25"}
{"input": "<s> int delete ( String table , String whereClause , String [ ] whereArgs ) {", "gt": "SQLiteDatabase dbh = getWritableDatabase ( ) ; \n return dbh . delete ( table , whereClause , whereArgs ) ; \n }", "repo": "vanilla", "task_id": "vanilla/26"}
{"input": "<s> int update ( String table , ContentValues values , String whereClause , String [ ] whereArgs ) {", "gt": "SQLiteDatabase dbh = getWritableDatabase ( ) ; \n return dbh . update ( table , values , whereClause , whereArgs ) ; \n }", "repo": "vanilla", "task_id": "vanilla/27"}
{"input": "<s> public String getFirst ( String key ) { String result = null ; if ( containsKey ( key ) )", "gt": "result = get ( key ) . get ( 0 ) ; \n return result ; \n }", "repo": "vanilla", "task_id": "vanilla/30"}
{"input": "<s> private void addFiltered ( Pattern filter , String key , ArrayList < String > data ) { ArrayList < String > list = new ArrayList < > ( ) ; for ( String s : data ) { Matcher matcher = filter . matcher ( s ) ; if ( matcher . matches ( ) ) { list . add ( matcher . group ( 1 ) . trim ( ) ) ;", "gt": "} \n } \n if ( list . size ( ) > 0 ) \n put ( key , list ) ; \n }", "repo": "vanilla", "task_id": "vanilla/32"}
{"input": "<s> public void startQuickScan ( int delay ) { if ( ! mHandler . hasMessages ( MSG_GUESS_QUICKSCAN ) & & ! mHandler . hasMessages ( MSG_SCAN_RPC ) ) {", "gt": "mHandler . sendMessageDelayed ( mHandler . obtainMessage ( MSG_GUESS_QUICKSCAN , 0 , 0 ) , delay ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/36"}
{"input": "<s> public void abortScan ( ) { mHandler . removeMessages ( MSG_SCAN_RPC ) ;", "gt": "mScanPlan . clear ( ) ; \n mHandler . sendMessage ( mHandler . obtainMessage ( MSG_SCAN_RPC , RPC_KICKSTART , 0 ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/37"}
{"input": "<s> public void flushDatabase ( ) { mBackend . setPendingDeletion ( ) ;", "gt": "mPendingCleanup = true ; \n setNativeLastMtime ( MTIME_PRISTINE ) ; \n }", "repo": "vanilla", "task_id": "vanilla/38"}
{"input": "<s> private void setNativeLastMtime ( int mtime ) { MediaLibrary . Preferences prefs = MediaLibrary . getPreferences ( mContext ) ;", "gt": "prefs . _nativeLastMtime = mtime ; \n MediaLibrary . setPreferences ( mContext , prefs ) ; \n }", "repo": "vanilla", "task_id": "vanilla/40"}
{"input": "<s> void reset ( ) { this . seen = 0 ;", "gt": "this . changed = 0 ; \n this . lastFile = null ; \n }", "repo": "vanilla", "task_id": "vanilla/42"}
{"input": "<s> void registerProgress ( String path , boolean changed ) { mStats . lastFile = path ;", "gt": "mStats . seen + + ; \n if ( changed ) { \n mStats . changed + + ; \n }", "repo": "vanilla", "task_id": "vanilla/43"}
{"input": "<s> void clear ( ) {", "gt": "mSteps . clear ( ) ; \n mStats . reset ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/44"}
{"input": "<s> MediaScanPlan addNextStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_NORMAL ) ) ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/45"}
{"input": "<s> MediaScanPlan addOptionalStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_OPTIONAL ) ) ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/46"}
{"input": "<s> MediaScanPlan addChainedStep ( int msg , Object arg ) {", "gt": "mSteps . add ( new Step ( msg , arg , Step . MODE_CHAINED ) ) ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/47"}
{"input": "<s> Step getNextStep ( ) { Step next = ( mSteps . size ( ) ! = 0 ? mSteps . remove ( 0 ) : null ) ; if ( next ! = null ) { if ( next . mode = = Step . MODE_OPTIONAL & & mStats . changed ! = 0 ) { next = null ; mSteps . clear ( ) ; } if ( next . mode = = Step . MODE_CHAINED & & mStats . changed = = 0 ) { next = null ; mSteps . clear ( ) ;", "gt": "} \n } \n mStats . reset ( ) ; \n return next ; \n }", "repo": "vanilla", "task_id": "vanilla/48"}
{"input": "<s> public static Action getAction ( SharedPreferences prefs , String key , Action def ) { try { String pref = prefs . getString ( key , null ) ; if ( pref = = null ) return def ;", "gt": "return Enum . valueOf ( Action . class , pref ) ; \n } catch ( Exception e ) { \n return def ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/49"}
{"input": "<s> public GainValues getReplayGainValues ( String path ) { if ( path = = null ) { path = \" <STR_LIT> <STR_LIT:\\\\> \" ; } GainValues cached = rgCache . get ( path ) ; if ( cached = = null ) {", "gt": "cached = getReplayGainValuesFromFile ( path ) ; \n rgCache . put ( path , cached ) ; \n } \n return cached ; \n }", "repo": "vanilla", "task_id": "vanilla/50"}
{"input": "<s> private float getFloatFromString ( String rg_raw ) { float rg_float = <NUM_LIT> ; try { String nums = rg_raw . replaceAll ( \" <STR_LIT> \" , \" \" ) ;", "gt": "rg_float = Float . parseFloat ( nums ) ; \n } catch ( Exception e ) { \n } \n return rg_float ; \n }", "repo": "vanilla", "task_id": "vanilla/51"}
{"input": "<s> @ Override public Parcelable onSaveInstanceState ( ) {", "gt": "showSearch ( false ) ; \n return super . onSaveInstanceState ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/54"}
{"input": "<s> public void setOnClickListener ( View . OnClickListener listener ) {", "gt": "mParentClickConsumer = listener ; \n mControlsContent . setOnClickListener ( this ) ; \n }", "repo": "vanilla", "task_id": "vanilla/55"}
{"input": "<s> public void openMenu ( ) { if ( mPopupMenu = = null | | mParentMenuConsumer = = null ) return ;", "gt": "mParentMenuConsumer . onPrepareOptionsMenu ( mPopupMenu . getMenu ( ) ) ; \n mPopupMenu . show ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/56"}
{"input": "<s> public void setCover ( Bitmap cover ) { if ( cover = = null ) mCover . setImageResource ( R . drawable . fallback_cover ) ;", "gt": "else \n mCover . setImageBitmap ( cover ) ; \n }", "repo": "vanilla", "task_id": "vanilla/57"}
{"input": "<s> private ImageButton getImageButton ( Drawable drawable ) { ImageButton button = new ImageButton ( mContext ) ; button . setImageDrawable ( drawable ) ;", "gt": "button . setBackgroundResource ( R . drawable . unbound_ripple_light ) ; \n return button ; \n }", "repo": "vanilla", "task_id": "vanilla/59"}
{"input": "<s> private void styleSearchView ( View view , int color ) { if ( view ! = null ) { if ( view instanceof TextView ) { ( ( TextView ) view ) . setTextColor ( color ) ; } else if ( view instanceof ImageView ) { ( ( ImageView ) view ) . setColorFilter ( color ) ; } else if ( view instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) view ; for ( int i = 0 ; i < group . getChildCount ( ) ; i + + ) {", "gt": "styleSearchView ( group . getChildAt ( i ) , color ) ; \n } \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/60"}
{"input": "<s> public Bitmap getCoverFromSong ( Context ctx , Song song , int size ) { CoverKey key = new CoverCache . CoverKey ( MediaUtils . TYPE_ALBUM , song . albumId , size ) ; Bitmap cover = getStoredCover ( key ) ; if ( cover = = null ) { cover = sBitmapDiskCache . createBitmap ( ctx , song , size * size ) ; if ( cover ! = null ) { storeCover ( key , cover ) ;", "gt": "cover = getStoredCover ( key ) ; \n } \n } \n return cover ; \n }", "repo": "vanilla", "task_id": "vanilla/65"}
{"input": "<s> public static void evictAll ( ) { if ( sBitmapDiskCache ! = null ) {", "gt": "sBitmapDiskCache . evictAll ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/66"}
{"input": "<s> @ Override public boolean equals ( Object obj ) { if ( obj instanceof CoverKey & & this . mediaId = = ( ( CoverKey ) obj ) . mediaId & & this . mediaType = = ( ( CoverKey ) obj ) . mediaType & & this . coverSize = = ( ( CoverKey ) obj ) . coverSize ) { return true ;", "gt": "} \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/67"}
{"input": "<s> private long getUsedSpace ( ) { long usedSpace = - 1 ; SQLiteDatabase dbh = getWritableDatabase ( ) ; Cursor cursor = dbh . query ( TABLE_NAME , new String [ ] { \" <STR_LIT> \" } , null , null , null , null , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "usedSpace = cursor . getLong ( 0 ) ; \n cursor . close ( ) ; \n } \n return usedSpace ; \n }", "repo": "vanilla", "task_id": "vanilla/70"}
{"input": "<s> public void setup ( Looper looper , Callback callback , int style ) { mUiHandler = new Handler ( this ) ; mHandler = new Handler ( looper , this ) ;", "gt": "mCallback = callback ; \n mCoverStyle = style ; \n }", "repo": "vanilla", "task_id": "vanilla/72"}
{"input": "<s> public void querySongs ( ) {", "gt": "mHandler . removeMessages ( MSG_QUERY_SONGS ) ; \n mHandler . sendEmptyMessage ( MSG_QUERY_SONGS ) ; \n }", "repo": "vanilla", "task_id": "vanilla/73"}
{"input": "<s> @ Override protected void onSizeChanged ( int width , int height , int oldWidth , int oldHeight ) { if ( mPendingQuery & & width ! = 0 & & height ! = 0 ) { mPendingQuery = false ;", "gt": "querySongs ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/76"}
{"input": "<s> public void setSongBitmap ( int i , Song song , Bitmap bitmap ) {", "gt": "mCacheSongs [ i ] = song ; \n mCacheBitmaps [ i ] = bitmap ; \n }", "repo": "vanilla", "task_id": "vanilla/78"}
{"input": "<s> public Bitmap grepBitmap ( Song song ) { final int len = mCacheSongs . length ; for ( int i = 0 ; i < len ; i + + ) { if ( song ! = null & & song . equals ( mCacheSongs [ i ] ) ) {", "gt": "return mCacheBitmaps [ i ] ; \n } \n } \n return null ; \n }", "repo": "vanilla", "task_id": "vanilla/79"}
{"input": "<s> public void abortScroll ( ) { System . arraycopy ( mSnapshotBitmaps , 0 , mCacheBitmaps , 0 , <NUM_LIT:3> ) ;", "gt": "System . arraycopy ( mSnapshotSongs , 0 , mCacheSongs , 0 , <NUM_LIT:3> ) ; \n finalizeScroll ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/80"}
{"input": "<s> public void finalizeScroll ( ) { for ( int i = 0 ; i < = <NUM_LIT:2> ; i + + ) { mSnapshotBitmaps [ i ] = null ;", "gt": "mSnapshotSongs [ i ] = null ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/81"}
{"input": "<s> @ Override public void abortAnimation ( ) {", "gt": "mCoverIntent = 0 ; \n super . abortAnimation ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/82"}
{"input": "<s> @ Override public void setChecked ( boolean checked ) {", "gt": "mChecked = checked ; \n mCheckBox . setChecked ( mChecked ) ; \n }", "repo": "vanilla", "task_id": "vanilla/85"}
{"input": "<s> public void showDragger ( boolean state ) {", "gt": "mDragger . setVisibility ( state ? View . VISIBLE : View . GONE ) ; \n adjustPadding ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/86"}
{"input": "<s> public void showDuration ( boolean state ) {", "gt": "mDurationView . setVisibility ( state ? View . VISIBLE : View . GONE ) ; \n adjustPadding ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/87"}
{"input": "<s> public void setDraggerOnClickListener ( View . OnClickListener listener ) { TypedValue v = new TypedValue ( ) ; getContext ( ) . getTheme ( ) . resolveAttribute ( android . R . attr . selectableItemBackground , v , true ) ;", "gt": "mDragger . setBackgroundResource ( v . resourceId ) ; \n mDragger . setOnClickListener ( listener ) ; \n }", "repo": "vanilla", "task_id": "vanilla/88"}
{"input": "<s> public void registerForOnItemLongClickListener ( ListView view ) {", "gt": "view . setOnItemLongClickListener ( this ) ; \n view . setOnTouchListener ( this ) ; \n }", "repo": "vanilla", "task_id": "vanilla/92"}
{"input": "<s> @ Override public void onFolderPicked ( File directory , ArrayList < String > a , ArrayList < String > b ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( this ) . edit ( ) ; editor . putString ( PrefKeys . FILESYSTEM_BROWSE_START , directory . getAbsolutePath ( ) ) ;", "gt": "editor . apply ( ) ; \n finish ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/95"}
{"input": "<s> @ Override public boolean accept ( File dir , String filename ) { if ( filename . charAt ( 0 ) = = <CHAR_LIT:.> ) return false ; if ( mFilter ! = null ) { filename = filename . toLowerCase ( ) ; for ( String term : mFilter ) { if ( ! filename . contains ( term ) )", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/96"}
{"input": "<s> @ Override public void commitQuery ( Object data ) {", "gt": "mFiles = ( File [ ] ) data ; \n notifyDataSetChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/97"}
{"input": "<s> @ Override public void clear ( ) {", "gt": "mFiles = null ; \n notifyDataSetInvalidated ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/98"}
{"input": "<s> @ Override public int getCount ( ) { if ( mFiles = = null )", "gt": "return 0 ; \n return mFiles . length ; \n }", "repo": "vanilla", "task_id": "vanilla/99"}
{"input": "<s> @ Override public void setFilter ( String filter ) { if ( filter = = null ) mFilter = null ;", "gt": "else \n mFilter = SPACE_SPLIT . split ( filter . toLowerCase ( ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/100"}
{"input": "<s> @ Override public Limiter buildLimiter ( long id ) { for ( int i = 0 ; i < mFiles . length ; i + + ) { if ( id = = getItemId ( i ) ) {", "gt": "return buildLimiter ( mFiles [ i ] ) ; \n } \n } \n return null ; \n }", "repo": "vanilla", "task_id": "vanilla/104"}
{"input": "<s> @ Override public void onEvent ( int event , String path ) { if (", "gt": "path ! = null ) \n mActivity . mPagerAdapter . postRequestRequery ( FileSystemAdapter . this ) ; \n }", "repo": "vanilla", "task_id": "vanilla/105"}
{"input": "<s> @ Override public QueryTask buildSongQuery ( String [ ] projection ) {", "gt": "File path = getLimiterPath ( ) ; \n return MediaUtils . buildFileQuery ( path . getPath ( ) , projection , true ) ; \n }", "repo": "vanilla", "task_id": "vanilla/106"}
{"input": "<s> public void onItemClicked ( Intent intent ) { boolean isFolder = intent . getBooleanExtra ( LibraryAdapter . DATA_EXPANDABLE , false ) ; boolean isHeader = intent . getLongExtra ( LibraryAdapter . DATA_ID , LibraryAdapter . INVALID_ID ) = = LibraryAdapter . HEADER_ID ; if ( ! isHeader & & FileUtils . canDispatchIntent ( intent ) & & FileUtils . dispatchIntent ( mActivity , intent ) ) return ; if ( isFolder ) {", "gt": "mActivity . onItemExpanded ( intent ) ; \n } else { \n mActivity . onItemClicked ( intent ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/107"}
{"input": "<s> public static String normalizeDirectorySeparators ( String path ) { final StringBuilder sb = new StringBuilder ( path ) ; for ( int i = 0 ; i < sb . length ( ) ; i + + ) { final char originalChar = sb . charAt ( i ) ; if ( originalChar = = <CHAR_LIT:/> | | originalChar = = <STR_LIT:\\\\> ) {", "gt": "sb . setCharAt ( i , File . separatorChar ) ; \n } \n } \n return sb . toString ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/109"}
{"input": "<s> private static String traversePathUpwards ( String path , int traversalCount ) { if ( traversalCount < 0 ) throw new IllegalArgumentException ( \" <STR_LIT> \" ) ; if ( traversalCount = = 0 ) return path ; StringBuilder sb = new StringBuilder ( ( FileUtils . NAME_PARENT_FOLDER . length ( ) + 1 ) * traversalCount + path . length ( ) ) ; for ( int i = 0 ; i < traversalCount ; i + + ) { sb . append ( FileUtils . NAME_PARENT_FOLDER ) ;", "gt": "sb . append ( File . separatorChar ) ; \n } \n sb . append ( path ) ; \n return sb . toString ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/110"}
{"input": "<s> public static boolean dispatchIntent ( LibraryActivity activity , Intent intent ) { boolean handled = true ; String path = intent . getStringExtra ( LibraryAdapter . DATA_FILE ) ; String mimeGuess = URLConnection . guessContentTypeFromName ( path ) ; File file = new File ( path ) ; Uri uri = Uri . fromFile ( file ) ; Intent extView = new Intent ( Intent . ACTION_VIEW ) ; extView . setDataAndType ( uri , mimeGuess ) ; try { activity . startActivity ( extView ) ;", "gt": "} catch ( Exception ActivityNotFoundException ) { \n handled = false ; \n } \n return handled ; \n }", "repo": "vanilla", "task_id": "vanilla/111"}
{"input": "<s> public static String getFileExtension ( String filename ) {", "gt": "int index = filename . lastIndexOf ( <CHAR_LIT:.> ) ; \n return index > 0 ? filename . substring ( index ) : \" \" ; \n }", "repo": "vanilla", "task_id": "vanilla/113"}
{"input": "<s> @ Override public void afterTextChanged ( Editable s ) {", "gt": "final File dir = new File ( s . toString ( ) ) ; \n setCurrentDir ( dir ) ; \n }", "repo": "vanilla", "task_id": "vanilla/115"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ; \n } else { \n return super . onOptionsItemSelected ( item ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/118"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > parent , View view , int pos , long id ) { FolderPickerAdapter . Item item = mListAdapter . getItem ( pos ) ; File curPath = mListAdapter . getCurrentDir ( ) ; File newPath = null ; if ( item . file = = null ) { newPath = curPath . getParentFile ( ) ; } else {", "gt": "newPath = new File ( curPath , item . name ) ; \n } \n if ( newPath ! = null ) \n setCurrentDir ( newPath ) ; \n }", "repo": "vanilla", "task_id": "vanilla/120"}
{"input": "<s> public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case 0 : setFolderState ( path , FolderState . INCLUDE ) ; break ; case 1 : setFolderState ( path , FolderState . EXCLUDE ) ;", "gt": "break ; \n default : \n setFolderState ( path , FolderState . NEUTRAL ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/121"}
{"input": "<s> public void setCurrentDir ( File dir ) {", "gt": "mCurrentDir = dir ; \n refresh ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/122"}
{"input": "<s> public void setIncludedDirs ( ArrayList < String > list ) {", "gt": "mIncludedDirs = verifyDirs ( list ) ; \n refresh ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/123"}
{"input": "<s> public void setExcludedDirs ( ArrayList < String > list ) {", "gt": "mExcludedDirs = verifyDirs ( list ) ; \n refresh ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/124"}
{"input": "<s> private ArrayList < String > verifyDirs ( ArrayList < String > list ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( String path : list ) { File file = new File ( path ) ;", "gt": "if ( file . isDirectory ( ) ) \n result . add ( path ) ; \n } \n return result ; \n }", "repo": "vanilla", "task_id": "vanilla/125"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/126"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/127"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/128"}
{"input": "<s> private void hideMessageOverlay ( ) {", "gt": "if ( mOverlayText ! = null ) \n mOverlayText . setVisibility ( View . GONE ) ; \n }", "repo": "vanilla", "task_id": "vanilla/129"}
{"input": "<s> @ Override public void onPositionInfoChanged ( ) {", "gt": "if ( mQueuePosView ! = null ) \n mUiHandler . sendEmptyMessage ( MSG_UPDATE_POSITION ) ; \n }", "repo": "vanilla", "task_id": "vanilla/130"}
{"input": "<s> @ Override public boolean onSearchRequested ( ) {", "gt": "openLibrary ( null , - 1 ) ; \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/132"}
{"input": "<s> private void setControlsVisible ( boolean visible ) { int mode = visible ? View . VISIBLE : View . GONE ; mSlidingView . setVisibility ( mode ) ;", "gt": "mControlsVisible = visible ; \n if ( visible ) { \n mPlayPauseButton . requestFocus ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/134"}
{"input": "<s> @ Override protected void performAction ( Action action ) { switch ( action ) { case ToggleControls : setControlsVisible ( ! mControlsVisible ) ; mHandler . sendEmptyMessage ( MSG_SAVE_CONTROLS ) ; break ; case ShowQueue : mSlidingView . expandSlide ( ) ;", "gt": "break ; \n default : \n super . performAction ( action ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/135"}
{"input": "<s> @ Override public void onClick ( View view ) { if ( view = = mOverlayText & & ( mState & PlaybackService . FLAG_EMPTY_QUEUE ) ! = 0 ) { setState ( PlaybackService . get ( this ) . setFinishAction ( SongTimeline . FINISH_RANDOM ) ) ; } else if ( view = = mCoverView ) { performAction ( mCoverPressAction ) ; } else if ( view . getId ( ) = = R . id . info_table ) {", "gt": "openLibrary ( mCurrentSong , MediaUtils . TYPE_ALBUM ) ; \n } else { \n super . onClick ( view ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/136"}
{"input": "<s> @ Override public boolean onLongClick ( View view ) { switch ( view . getId ( ) ) { case R . id . cover_view : performAction ( mCoverLongPressAction ) ; break ; case R . id . info_table : setExtraInfoVisible ( ! mExtraInfoVisible ) ; mHandler . sendEmptyMessage ( MSG_SAVE_CONTROLS ) ; break ;", "gt": "default : \n return false ; \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/137"}
{"input": "<s> @ Override protected void onDialogClosed ( boolean positiveResult ) { if ( positiveResult & & shouldPersist ( ) ) { persistInt ( mValue ) ;", "gt": "notifyChanged ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/140"}
{"input": "<s> @ Override public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) { float value = seekBar . getProgress ( ) / <NUM_LIT> ; value * = value ;", "gt": "value * = value ; \n mValue = ( int ) ( value * ( MAX - MIN ) ) + MIN ; \n updateText ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/141"}
{"input": "<s> @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { EditText editText = ( EditText ) getDialog ( ) . getCurrentFocus ( ) ; if ( editText . length ( ) = = <NUM_LIT:2> ) { View view = editText . focusSearch ( View . FOCUS_RIGHT ) ;", "gt": "if ( view ! = null ) { \n view . requestFocus ( ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/142"}
{"input": "<s> static int parseInteger ( String s ) { if ( s . length ( ) = = 0 ) { return 0 ;", "gt": "} \n return Integer . parseInt ( s ) ; \n }", "repo": "vanilla", "task_id": "vanilla/143"}
{"input": "<s> public boolean drawFromCache ( CoverCache . CoverKey key , boolean fadeIn ) { boolean cacheHit = true ; Bitmap bitmap = sBitmapLruCache . get ( key ) ; if ( bitmap = = null ) { cacheHit = false ; } if ( fadeIn ) { TransitionDrawable td = new TransitionDrawable ( new Drawable [ ] { getDrawable ( ) , ( new BitmapDrawable ( getResources ( ) , bitmap ) ) } ) ; setImageDrawable ( td ) ; td . startTransition ( <NUM_LIT> ) ;", "gt": "} else { \n setImageBitmap ( bitmap ) ; \n } \n return cacheHit ; \n }", "repo": "vanilla", "task_id": "vanilla/145"}
{"input": "<s> @ Override public void onStart ( ) { super . onStart ( ) ; loadPreferences ( ) ;", "gt": "loadTabOrder ( ) ; \n updateHeaders ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/146"}
{"input": "<s> private void loadTabOrder ( ) { if ( mPagerAdapter . loadTabOrder ( ) ) {", "gt": "mVanillaTabLayout . setViewPager ( mViewPager ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/148"}
{"input": "<s> private void checkForLaunch ( Intent intent ) { SharedPreferences settings = SharedPrefHelper . getSettings ( this ) ; if ( settings . getBoolean ( PrefKeys . PLAYBACK_ON_STARTUP , PrefDefaults . PLAYBACK_ON_STARTUP ) & & Intent . ACTION_MAIN . equals ( intent . getAction ( ) ) ) {", "gt": "startActivity ( new Intent ( this , FullPlaybackActivity . class ) ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/149"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { if ( intent = = null ) return ;", "gt": "checkForLaunch ( intent ) ; \n loadLimiterIntent ( intent ) ; \n }", "repo": "vanilla", "task_id": "vanilla/150"}
{"input": "<s> @ Override public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( keyCode = = KeyEvent . KEYCODE_DEL | | keyCode = = KeyEvent . KEYCODE_FORWARD_DEL )", "gt": "return true ; \n if ( super . onKeyDown ( keyCode , event ) ) \n return true ; \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/151"}
{"input": "<s> public void openPlaybackActivity ( ) { if ( mSlidingView . isShrinkable ( ) )", "gt": "mSlidingView . hideSlideDelayed ( ) ; \n startActivity ( new Intent ( this , FullPlaybackActivity . class ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/154"}
{"input": "<s> public void onItemExpanded ( Intent rowData ) { int type = rowData . getIntExtra ( LibraryAdapter . DATA_TYPE , MediaUtils . TYPE_INVALID ) ;", "gt": "if ( type = = MediaUtils . TYPE_PLAYLIST ) \n editPlaylist ( rowData ) ; \n else \n expand ( rowData ) ; \n }", "repo": "vanilla", "task_id": "vanilla/155"}
{"input": "<s> private void updateCover ( final Bitmap cover ) { runOnUiThread ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n mBottomBarControls . setCover ( cover ) ; \n } \n } ) ; \n }", "repo": "vanilla", "task_id": "vanilla/156"}
{"input": "<s> private void editPlaylist ( Intent rowData ) { Intent launch = new Intent ( this , PlaylistActivity . class ) ; launch . putExtra ( \" <STR_LIT> \" , rowData . getLongExtra ( LibraryAdapter . DATA_ID , LibraryAdapter . INVALID_ID ) ) ;", "gt": "launch . putExtra ( \" <STR_LIT> \" , rowData . getStringExtra ( LibraryAdapter . DATA_TITLE ) ) ; \n startActivity ( launch ) ; \n }", "repo": "vanilla", "task_id": "vanilla/157"}
{"input": "<s> @ Override public boolean onQueryTextChange ( String newText ) {", "gt": "mPagerAdapter . setFilter ( newText ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/161"}
{"input": "<s> @ Override public boolean onQueryTextSubmit ( String query ) {", "gt": "mPagerAdapter . setFilter ( query ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/162"}
{"input": "<s> @ Override public void onMediaChange ( ) {", "gt": "if ( mPagerAdapter ! = null ) \n mPagerAdapter . invalidateData ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/163"}
{"input": "<s> @ Override protected void onStateChange ( int state , int toggled ) { super . onStateChange ( state , toggled ) ;", "gt": "if ( ( state & PlaybackService . FLAG_EMPTY_QUEUE ) ! = 0 ) \n mBottomBarControls . setSong ( null ) ; \n }", "repo": "vanilla", "task_id": "vanilla/164"}
{"input": "<s> @ Override public void onDismiss ( DialogInterface dialog ) { ListView list = ( ( AlertDialog ) dialog ) . getListView ( ) ; int which = list . getCheckedItemPosition ( ) ; CheckBox reverseSort = ( CheckBox ) list . findViewById ( R . id . reverse_sort ) ;", "gt": "if ( reverseSort . isChecked ( ) ) { \n which = ~ which ; \n }", "repo": "vanilla", "task_id": "vanilla/166"}
{"input": "<s> @ Override public int getItemPosition ( Object item ) { int type = ( Integer ) ( ( ListView ) item ) . getTag ( ) ;", "gt": "int pos = getMediaTypePosition ( type ) ; \n return pos = = - 1 ? POSITION_NONE : pos ; \n }", "repo": "vanilla", "task_id": "vanilla/167"}
{"input": "<s> public void setHeaderText ( String text ) { for ( DraggableRow row : mHeaderViews ) { row . setText ( text ) ;", "gt": "} \n mHeaderText = text ; \n }", "repo": "vanilla", "task_id": "vanilla/169"}
{"input": "<s> private void restorePosition ( int index ) { Integer curPos = sLruAdapterPos . popPosition ( mAdapters [ index ] ) ;", "gt": "if ( curPos ! = null & & curPos < mLists [ index ] . getCount ( ) ) \n mLists [ index ] . setSelection ( curPos ) ; \n }", "repo": "vanilla", "task_id": "vanilla/171"}
{"input": "<s> public Limiter getCurrentLimiter ( ) { LibraryAdapter current = mCurrentAdapter ; if ( current = = null )", "gt": "return null ; \n return current . getLimiter ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/172"}
{"input": "<s> public int getMediaTypePosition ( int type ) { int [ ] order = mTabOrder ; for ( int i = mTabCount ; - - i ! = - 1 ; ) {", "gt": "if ( order [ i ] = = type ) \n return i ; \n } \n return - 1 ; \n }", "repo": "vanilla", "task_id": "vanilla/173"}
{"input": "<s> public void postRequestRequery ( LibraryAdapter adapter ) {", "gt": "Handler handler = mUiHandler ; \n handler . sendMessage ( handler . obtainMessage ( MSG_REQUEST_REQUERY , adapter ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/175"}
{"input": "<s> private void postRunQuery ( LibraryAdapter adapter ) { mRequeryNeeded [ adapter . getMediaType ( ) ] = false ; Handler handler = mWorkerHandler ;", "gt": "handler . removeMessages ( MSG_RUN_QUERY , adapter ) ; \n handler . sendMessage ( handler . obtainMessage ( MSG_RUN_QUERY , adapter ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/176"}
{"input": "<s> private void requeryIfNeeded ( int type ) { LibraryAdapter adapter = mAdapters [ type ] ; if ( adapter ! = null & & mRequeryNeeded [ type ] ) {", "gt": "postRunQuery ( adapter ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/177"}
{"input": "<s> public void invalidateData ( ) { for ( LibraryAdapter adapter : mAdapters ) {", "gt": "if ( adapter ! = null ) { \n postRequestRequery ( adapter ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/178"}
{"input": "<s> public void loadSortOrder ( SortableAdapter adapter ) { String key = adapter . getSortSettingsKey ( ) ; int def = adapter . getDefaultSortMode ( ) ;", "gt": "int sort = SharedPrefHelper . getSettings ( mActivity ) . getInt ( key , def ) ; \n adapter . setSortMode ( sort ) ; \n }", "repo": "vanilla", "task_id": "vanilla/179"}
{"input": "<s> public void setFilter ( String text ) { if ( text . length ( ) = = 0 ) text = null ; mFilter = text ; for ( LibraryAdapter adapter : mAdapters ) { if ( adapter ! = null ) {", "gt": "adapter . setFilter ( text ) ; \n requestRequery ( adapter ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/181"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Intent intent = id = = LibraryAdapter . HEADER_ID ? createHeaderIntent ( view ) : mCurrentAdapter . createData ( view ) ; int type = ( Integer ) ( ( View ) view . getParent ( ) ) . getTag ( ) ; if ( type = = MediaUtils . TYPE_FILE ) {", "gt": "mFilesAdapter . onItemClicked ( intent ) ; \n } else { \n mActivity . onItemClicked ( intent ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/185"}
{"input": "<s> private String _k ( LibraryAdapter adapter ) { String result = adapter . getMediaType ( ) + \" <STR_LIT> \" ; Limiter limiter = adapter . getLimiter ( ) ; if ( limiter ! = null ) { for ( String entry : limiter . names ) {", "gt": "result = result + entry + \" <STR_LIT:/> \" ; \n } \n } \n return result ; \n }", "repo": "vanilla", "task_id": "vanilla/186"}
{"input": "<s> @ Override protected void onDialogClosed ( boolean positiveResult ) { super . onDialogClosed ( positiveResult ) ;", "gt": "notifyDependencyChange ( shouldDisableDependents ( ) ) ; \n notifyChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/187"}
{"input": "<s> public void setExpandable ( boolean expandable ) { if ( expandable ! = mExpandable ) { mExpandable = expandable ;", "gt": "notifyDataSetChanged ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/189"}
{"input": "<s> @ Override public QueryTask buildSongQuery ( String [ ] projection ) { QueryTask query = buildQuery ( projection , true ) ;", "gt": "query . type = mType ; \n return query ; \n }", "repo": "vanilla", "task_id": "vanilla/190"}
{"input": "<s> public void changeCursor ( Cursor cursor ) { Cursor old = mCursor ; mCursor = cursor ; buildAlphabet ( ) ; if ( cursor = = null ) { notifyDataSetInvalidated ( ) ; } else { notifyDataSetChanged ( ) ;", "gt": "} \n if ( old ! = null ) { \n old . close ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/191"}
{"input": "<s> public int getLimiterType ( ) { Limiter limiter = mLimiter ; if ( limiter ! = null )", "gt": "return limiter . type ; \n return MediaUtils . TYPE_INVALID ; \n }", "repo": "vanilla", "task_id": "vanilla/192"}
{"input": "<s> @ Override public int getCount ( ) { Cursor cursor = mCursor ; if ( cursor = = null )", "gt": "return 0 ; \n return cursor . getCount ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/196"}
{"input": "<s> @ Override public int getSectionForPosition ( int position ) { for ( int i = 0 ; i < mAlphabet . size ( ) ; + + i ) {", "gt": "if ( mAlphabet . get ( i ) . position > position ) \n return i - 1 ; \n } \n return 0 ; \n }", "repo": "vanilla", "task_id": "vanilla/199"}
{"input": "<s> public void release ( ) {", "gt": "mMediaSession . setActive ( false ) ; \n mMediaSession . release ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/206"}
{"input": "<s> public static Random getRandom ( ) { if ( sRandom = = null )", "gt": "sRandom = new Random ( ) ; \n return sRandom ; \n }", "repo": "vanilla", "task_id": "vanilla/207"}
{"input": "<s> public static long queryGenreForSong ( Context context , long id ) { String [ ] projection = { MediaLibrary . GenreSongColumns . _GENRE_ID } ; String query = MediaLibrary . GenreSongColumns . SONG_ID + \" <STR_LIT> \" ; String [ ] queryArgs = new String [ ] { Long . toString ( id ) } ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_GENRES_SONGS , projection , query , queryArgs , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "return cursor . getLong ( 0 ) ; \n cursor . close ( ) ; \n } \n return 0 ; \n }", "repo": "vanilla", "task_id": "vanilla/210"}
{"input": "<s> public static boolean isSongAvailable ( Context context ) { if ( sSongCount = = - 1 ) { sSongCount = MediaLibrary . getLibrarySize ( context ) ;", "gt": "} \n return sSongCount ! = 0 ; \n }", "repo": "vanilla", "task_id": "vanilla/211"}
{"input": "<s> private static ArrayList < Song > getAllSongs ( Context context ) { QueryTask query = new QueryTask ( MediaLibrary . VIEW_SONGS_ALBUMS_ARTISTS , Song . FILLED_PROJECTION , null , null , null ) ; Cursor cursor = query . runQuery ( context ) ; ArrayList < Song > list = new ArrayList < Song > ( ) ; if ( cursor = = null ) return list ; while ( cursor . moveToNext ( ) ) { Song song = new Song ( - 1 ) ; song . populate ( cursor ) ;", "gt": "list . add ( song ) ; \n } \n cursor . close ( ) ; \n return list ; \n }", "repo": "vanilla", "task_id": "vanilla/212"}
{"input": "<s> public static void onMediaChange ( ) {", "gt": "sSongCount = - 1 ; \n sAllSongs . clear ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/213"}
{"input": "<s> public static Song getSongByTypeId ( Context context , int type , long id ) { Song song = new Song ( - 1 ) ; QueryTask query = buildQuery ( type , id , Song . FILLED_PROJECTION , null ) ; Cursor cursor = query . runQuery ( context ) ; if ( cursor ! = null ) { if ( cursor . getCount ( ) > 0 ) { cursor . moveToPosition ( 0 ) ; song . populate ( cursor ) ;", "gt": "} \n cursor . close ( ) ; \n } \n return song . isFilled ( ) ? song : null ; \n }", "repo": "vanilla", "task_id": "vanilla/214"}
{"input": "<s> public static boolean deleteFile ( File file ) { File [ ] children = file . listFiles ( ) ; if ( children ! = null ) { for ( File child : children ) {", "gt": "deleteFile ( child ) ; \n } \n } \n return file . delete ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/215"}
{"input": "<s> private static String addDirEndSlash ( String path ) { if ( path . length ( ) > 0 & & path . charAt ( path . length ( ) - 1 ) ! = <CHAR_LIT:/> ) { if ( ( new File ( path ) ) . isDirectory ( ) ) {", "gt": "path + = \" <STR_LIT:/> \" ; \n } \n } \n return path ; \n }", "repo": "vanilla", "task_id": "vanilla/216"}
{"input": "<s> public static Cursor getCursorForFileQuery ( String path ) { MatrixCursor matrixCursor = new MatrixCursor ( Song . FILLED_PROJECTION ) ; File directory = new File ( path ) ; if ( directory . isDirectory ( ) ) { addDirectoryToCursor ( directory , matrixCursor ) ;", "gt": "} else { \n addFileToCursor ( path , matrixCursor ) ; \n } \n return matrixCursor ; \n }", "repo": "vanilla", "task_id": "vanilla/217"}
{"input": "<s> public static long getCurrentIdForType ( Song song , int mType ) { if ( song = = null ) return TYPE_INVALID ; switch ( mType ) { case TYPE_ARTIST : return song . artistId ; case TYPE_ALBUM : return song . albumId ; case TYPE_SONG :", "gt": "return song . id ; \n default : \n return TYPE_INVALID ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/218"}
{"input": "<s> @ Override public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . cover_view : startActivity ( new Intent ( this , FullPlaybackActivity . class ) ) ; finish ( ) ;", "gt": "break ; \n default : \n super . onClick ( view ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/220"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/221"}
{"input": "<s> public static boolean havePermissions ( Context context ) { for ( String permission : getNeededPermissions ( ) ) { if ( context . checkSelfPermission ( permission ) ! = PackageManager . PERMISSION_GRANTED ) {", "gt": "return false ; \n } \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/225"}
{"input": "<s> private static String [ ] getOptionalPermissions ( ) { if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . TIRAMISU ) { return new String [ ] { Manifest . permission . POST_NOTIFICATIONS } ;", "gt": "} \n return new String [ ] { } ; \n }", "repo": "vanilla", "task_id": "vanilla/227"}
{"input": "<s> @ Override public void onDestroy ( ) { PlaybackService . removeTimelineCallback ( this ) ;", "gt": "mLooper . quit ( ) ; \n super . onDestroy ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/229"}
{"input": "<s> @ Override public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . next : shiftCurrentSong ( SongTimeline . SHIFT_NEXT_SONG ) ; break ; case R . id . play_pause : playPause ( ) ; break ; case R . id . previous : rewindCurrentSong ( ) ; break ; case R . id . end_action : cycleFinishAction ( ) ; break ;", "gt": "case R . id . shuffle : \n cycleShuffle ( ) ; \n break ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/234"}
{"input": "<s> protected void setState ( final int state ) { mLastStateEvent = System . nanoTime ( ) ; if ( mState ! = state ) { final int toggled = mState ^ state ; mState = state ; runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) {", "gt": "onStateChange ( state , toggled ) ; \n } \n } ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/235"}
{"input": "<s> public void setState ( long uptime , int state ) { if ( uptime > mLastStateEvent ) { setState ( state ) ;", "gt": "mLastStateEvent = uptime ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/236"}
{"input": "<s> protected void onServiceReady ( ) { PlaybackService service = PlaybackService . get ( this ) ;", "gt": "setSong ( service . getSong ( 0 ) ) ; \n setState ( service . getState ( ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/237"}
{"input": "<s> protected void onSongChange ( Song song ) {", "gt": "if ( mCoverView ! = null ) \n mCoverView . querySongs ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/238"}
{"input": "<s> protected void setSong ( final Song song ) { mLastSongEvent = System . nanoTime ( ) ; runOnUiThread ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n onSongChange ( song ) ; \n } \n } ) ; \n }", "repo": "vanilla", "task_id": "vanilla/239"}
{"input": "<s> public void setSong ( long uptime , Song song ) { if ( uptime > mLastSongEvent ) { setSong ( song ) ;", "gt": "mLastSongEvent = uptime ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/240"}
{"input": "<s> public void replaceSong ( int delta , Song song ) {", "gt": "if ( mCoverView ! = null ) \n mCoverView . replaceSong ( delta , song ) ; \n }", "repo": "vanilla", "task_id": "vanilla/241"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "menu . add ( 0 , MENU_PREFS , <NUM_LIT:10> , R . string . settings ) . setIcon ( R . drawable . ic_menu_preferences ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/242"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_PREFS : startActivity ( new Intent ( this , PreferencesActivity . class ) ) ; break ; case MENU_CLEAR_QUEUE : PlaybackService . get ( this ) . clearQueue ( ) ; break ; case MENU_EMPTY_QUEUE : PlaybackService . get ( this ) . emptyQueue ( ) ; break ;", "gt": "default : \n return false ; \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/243"}
{"input": "<s> public void prepareMediaPlayer ( VanillaMediaPlayer mp , String path ) throws IOException { mp . setDataSource ( path ) ;", "gt": "mp . prepare ( ) ; \n applyReplayGain ( mp ) ; \n }", "repo": "vanilla", "task_id": "vanilla/247"}
{"input": "<s> private void refreshReplayGainValues ( ) { if ( mMediaPlayer ! = null ) { applyReplayGain ( mMediaPlayer ) ;", "gt": "} \n if ( mPreparedMediaPlayer ! = null ) { \n applyReplayGain ( mPreparedMediaPlayer ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/248"}
{"input": "<s> private void refreshDuckingValues ( ) { float duckingFactor = ( ( float ) mVolumeDuringDucking ) / <NUM_LIT:100> f ; if ( mMediaPlayer ! = null ) { mMediaPlayer . setDuckingFactor ( duckingFactor ) ;", "gt": "} \n if ( mPreparedMediaPlayer ! = null ) { \n mPreparedMediaPlayer . setDuckingFactor ( duckingFactor ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/249"}
{"input": "<s> private void triggerReadAhead ( ) { Song song = mCurrentSong ; if ( ( mState & FLAG_PLAYING ) ! = 0 & & song ! = null ) {", "gt": "mReadahead . setSong ( song ) ; \n } else { \n mReadahead . pause ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/251"}
{"input": "<s> public void setFlag ( int flag ) { synchronized ( mStateLock ) {", "gt": "updateState ( mState | flag ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/253"}
{"input": "<s> public void unsetFlag ( int flag ) { synchronized ( mStateLock ) {", "gt": "updateState ( mState & ~ flag ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/254"}
{"input": "<s> public int play ( ) { synchronized ( mStateLock ) { if ( ( mState & FLAG_EMPTY_QUEUE ) ! = 0 ) { setFinishAction ( SongTimeline . FINISH_RANDOM ) ; showToast ( R . string . random_enabling , Toast . LENGTH_SHORT ) ; }", "gt": "int state = updateState ( mState | FLAG_PLAYING ) ; \n userActionTriggered ( ) ; \n return state ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/258"}
{"input": "<s> public int playPause ( boolean forceNotification ) { synchronized ( mStateLock ) { mForceNotificationVisible = forceNotification ; if ( ( mState & FLAG_PLAYING ) ! = 0 )", "gt": "return pause ( ) ; \n else \n return play ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/260"}
{"input": "<s> public int setFinishAction ( int action ) { synchronized ( mStateLock ) {", "gt": "return updateState ( mState & ~ MASK_FINISH | action < < SHIFT_FINISH ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/261"}
{"input": "<s> public int setShuffleMode ( int mode ) { synchronized ( mStateLock ) {", "gt": "return updateState ( mState & ~ MASK_SHUFFLE | mode < < SHIFT_SHUFFLE ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/263"}
{"input": "<s> @ Override public boolean onError ( MediaPlayer player , int what , int extra ) {", "gt": "Log . e ( \" <STR_LIT> \" , \" <STR_LIT> \" + what + <CHAR_LIT> + extra ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/265"}
{"input": "<s> public Song getSong ( int delta ) { if ( mTimeline = = null )", "gt": "return null ; \n if ( delta = = 0 ) \n return mCurrentSong ; \n return mTimeline . getSong ( delta ) ; \n }", "repo": "vanilla", "task_id": "vanilla/266"}
{"input": "<s> @ Override public void onReceive ( Context content , Intent intent ) { String action = intent . getAction ( ) ; if ( AudioManager . ACTION_AUDIO_BECOMING_NOISY . equals ( action ) ) { if ( mHeadsetPause ) { pause ( ) ;", "gt": "} \n } else if ( Intent . ACTION_SCREEN_ON . equals ( action ) ) { \n userActionTriggered ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/267"}
{"input": "<s> public int getState ( ) { synchronized ( mStateLock ) {", "gt": "return mState ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/269"}
{"input": "<s> public int getPosition ( ) { if ( ! mMediaPlayerInitialized )", "gt": "return 0 ; \n return mMediaPlayer . getCurrentPosition ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/270"}
{"input": "<s> public int getDuration ( ) { if ( ! mMediaPlayerInitialized )", "gt": "return 0 ; \n return mMediaPlayer . getDuration ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/271"}
{"input": "<s> public void seekToProgress ( int progress ) { if ( ! mMediaPlayerInitialized ) return ;", "gt": "long position = ( long ) mMediaPlayer . getDuration ( ) * progress / <NUM_LIT:1000> ; \n seekToPosition ( ( int ) position ) ; \n }", "repo": "vanilla", "task_id": "vanilla/273"}
{"input": "<s> public void seekToPosition ( int msec ) { if ( ! mMediaPlayerInitialized ) {", "gt": "return ; \n } \n mMediaPlayer . seekTo ( msec ) ; \n mHandler . sendEmptyMessage ( MSG_BROADCAST_SEEK ) ; \n }", "repo": "vanilla", "task_id": "vanilla/274"}
{"input": "<s> @ Override public void activeSongReplaced ( int delta , Song song ) { ArrayList < TimelineCallback > list = sCallbacks ; for ( int i = list . size ( ) ; - - i ! = - 1 ; ) list . get ( i ) . replaceSong ( delta , song ) ;", "gt": "if ( delta = = 0 ) \n setCurrentSong ( 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/275"}
{"input": "<s> public Song shiftCurrentSong ( int delta ) { preparePlayCountsUpdate ( delta ) ; Song song = setCurrentSong ( delta ) ;", "gt": "userActionTriggered ( ) ; \n return song ; \n }", "repo": "vanilla", "task_id": "vanilla/276"}
{"input": "<s> public void emptyQueue ( ) { pause ( ) ;", "gt": "setFlag ( FLAG_EMPTY_QUEUE ) ; \n mTimeline . emptyQueue ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/279"}
{"input": "<s> @ Override public void onChange ( LibraryObserver . Type type , long id , boolean ongoing ) { if ( type ! = LibraryObserver . Type . SONG & & type ! = LibraryObserver . Type . PLAYLIST ) return ;", "gt": "MediaUtils . onMediaChange ( ) ; \n onMediaChange ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/281"}
{"input": "<s> public static PlaybackService get ( Context context ) { if ( sInstance = = null ) { context . startService ( new Intent ( context , PlaybackService . class ) ) ; while ( sInstance = = null ) { try { synchronized ( sWait ) { sWait . wait ( ) ; } } catch ( InterruptedException ignored ) {", "gt": "} \n } \n } \n return sInstance ; \n }", "repo": "vanilla", "task_id": "vanilla/282"}
{"input": "<s> public void saveState ( int pendingSeek ) { try { DataOutputStream out = new DataOutputStream ( openFileOutput ( STATE_FILE , 0 ) ) ; Song song = mCurrentSong ; out . writeLong ( STATE_FILE_MAGIC ) ; out . writeInt ( STATE_VERSION ) ; out . writeInt ( pendingSeek ) ; out . writeLong ( song = = null ? - 1 : song . id ) ; mTimeline . writeState ( out ) ;", "gt": "out . close ( ) ; \n } catch ( IOException e ) { \n Log . w ( \" <STR_LIT> \" , \" <STR_LIT> \" , e ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/283"}
{"input": "<s> public void jumpToQueuePosition ( int pos ) {", "gt": "mTimeline . setCurrentQueuePosition ( pos ) ; \n play ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/284"}
{"input": "<s> public static void countSong ( Context context , Song song , boolean played ) {", "gt": "final long id = Song . getId ( song ) ; \n MediaLibrary . updateSongPlayCounts ( context , id , played ) ; \n }", "repo": "vanilla", "task_id": "vanilla/285"}
{"input": "<s> public static ArrayList < Long > getTopSongs ( Context context , int limit ) { ArrayList < Long > payload = new ArrayList < Long > ( ) ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_SONGS , new String [ ] { MediaLibrary . SongColumns . _ID } , MediaLibrary . SongColumns . PLAYCOUNT + \" <STR_LIT> \" , null , MediaLibrary . SongColumns . PLAYCOUNT + \" <STR_LIT> \" ) ; while ( cursor . moveToNext ( ) & & limit > 0 ) { payload . add ( cursor . getLong ( 0 ) ) ;", "gt": "limit - - ; \n } \n cursor . close ( ) ; \n return payload ; \n }", "repo": "vanilla", "task_id": "vanilla/286"}
{"input": "<s> public static long getPlaylist ( Context context , String name ) { long id = - 1 ; final String [ ] projection = { MediaLibrary . PlaylistColumns . _ID } ; final String selection = MediaLibrary . PlaylistColumns . NAME + \" <STR_LIT> \" ; final String [ ] selectionArgs = { name } ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_PLAYLISTS , projection , selection , selectionArgs , null ) ; if ( cursor ! = null ) { if ( cursor . moveToNext ( ) )", "gt": "id = cursor . getLong ( 0 ) ; \n cursor . close ( ) ; \n } \n return id ; \n }", "repo": "vanilla", "task_id": "vanilla/288"}
{"input": "<s> public static int addToPlaylist ( Context context , long playlistId , QueryTask query ) { ArrayList < Long > result = new ArrayList < Long > ( ) ; Cursor cursor = query . runQuery ( context ) ; if ( cursor ! = null ) { while ( cursor . moveToNext ( ) ) {", "gt": "result . add ( cursor . getLong ( 0 ) ) ; \n } \n } \n return addToPlaylist ( context , playlistId , result ) ; \n }", "repo": "vanilla", "task_id": "vanilla/290"}
{"input": "<s> public static int addToPlaylist ( Context context , long playlistId , ArrayList < Long > audioIds ) { if ( playlistId = = - 1 )", "gt": "return 0 ; \n return MediaLibrary . addToPlaylist ( context , playlistId , audioIds ) ; \n }", "repo": "vanilla", "task_id": "vanilla/291"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "mLooper . quit ( ) ; \n super . onDestroy ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/295"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { long id = intent . getLongExtra ( \" <STR_LIT> \" , 0 ) ; String title = intent . getStringExtra ( \" <STR_LIT> \" ) ;", "gt": "mAdapter . setPlaylistId ( id ) ; \n setTitle ( title ) ; \n mPlaylistId = id ; \n mPlaylistName = title ; \n }", "repo": "vanilla", "task_id": "vanilla/296"}
{"input": "<s> @ Override public void onClick ( DialogInterface dialog , int which ) { if ( which = = DialogInterface . BUTTON_POSITIVE ) {", "gt": "Playlist . deletePlaylist ( this , mPlaylistId ) ; \n finish ( ) ; \n } \n dialog . dismiss ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/299"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ; \n } else { \n return super . onOptionsItemSelected ( item ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/300"}
{"input": "<s> public void setPlaylistId ( long id ) {", "gt": "mPlaylistId = id ; \n mWorkerHandler . sendEmptyMessage ( MSG_RUN_QUERY ) ; \n }", "repo": "vanilla", "task_id": "vanilla/301"}
{"input": "<s> public void setEditable ( boolean editable ) {", "gt": "mEditable = editable ; \n notifyDataSetInvalidated ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/302"}
{"input": "<s> @ Override public boolean handleMessage ( Message message ) { switch ( message . what ) { case MSG_RUN_QUERY : { Cursor cursor = runQuery ( ) ; mUiHandler . sendMessage ( mUiHandler . obtainMessage ( MSG_UPDATE_CURSOR , cursor ) ) ; break ; } case MSG_UPDATE_CURSOR : changeCursor ( ( Cursor ) message . obj ) ; break ;", "gt": "default : \n return false ; \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/303"}
{"input": "<s> private Cursor runQuery ( ) {", "gt": "QueryTask query = MediaUtils . buildPlaylistQuery ( mPlaylistId , PROJECTION ) ; \n return query . runQuery ( mContext ) ; \n }", "repo": "vanilla", "task_id": "vanilla/304"}
{"input": "<s> public static PlaylistDialog newInstance ( Callback callback , Intent intent , LibraryAdapter allSource , Song currentSong ) { PlaylistDialog pd = new PlaylistDialog ( ) ; pd . mCallback = callback ; pd . mData = pd . new Data ( ) ;", "gt": "pd . mData . sourceIntent = intent ; \n pd . mData . allSource = allSource ; \n pd . mCurrentSong = currentSong ; \n return pd ; \n }", "repo": "vanilla", "task_id": "vanilla/307"}
{"input": "<s> @ Override public void onSuccess ( String input ) { mData . id = - 1 ;", "gt": "mData . name = input ; \n mCallback . updatePlaylistFromPlaylistDialog ( mData ) ; \n }", "repo": "vanilla", "task_id": "vanilla/308"}
{"input": "<s> public static PlaylistInputDialog newInstance ( Callback callback , String initialText , int actionRes ) { PlaylistInputDialog pid = new PlaylistInputDialog ( ) ;", "gt": "pid . mCallback = callback ; \n pid . mInitialText = initialText ; \n pid . mActionRes = actionRes ; \n return pid ; \n }", "repo": "vanilla", "task_id": "vanilla/309"}
{"input": "<s> public void onStart ( ) { super . onStart ( ) ; mDialog . getButton ( DialogInterface . BUTTON_POSITIVE ) . setEnabled ( false ) ;", "gt": "mEditText . setText ( mInitialText ) ; \n mEditText . requestFocus ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/310"}
{"input": "<s> @ Override public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case DialogInterface . BUTTON_NEGATIVE : break ; case DialogInterface . BUTTON_POSITIVE : mCallback . onSuccess ( mEditText . getText ( ) . toString ( ) ) ; break ;", "gt": "default : \n break ; \n } \n dialog . dismiss ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/312"}
{"input": "<s> public void unregister ( ) { MediaLibrary . unregisterLibraryObserver ( mLibraryObserver ) ;", "gt": "mFileObserver . stopWatching ( ) ; \n mHandlerThread . quitSafely ( ) ; \n mHandlerThread = null ; \n mHandler = null ; \n }", "repo": "vanilla", "task_id": "vanilla/313"}
{"input": "<s> private void dumpAllAsM3uPlaylist ( ) { XT ( \" <STR_LIT> \" ) ; Cursor cursor = Playlist . queryPlaylists ( mContext ) ; if ( cursor ! = null ) { while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( 0 ) ; XT ( \" <STR_LIT> \" + id ) ;", "gt": "sendUniqueMessage ( MSG_DUMP_M3U , id ) ; \n } \n cursor . close ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/316"}
{"input": "<s> private File getFileForName ( File parent , String name ) { name = name . replaceAll ( \" <STR_LIT:/> \" , \" <STR_LIT:_> \" ) ;", "gt": "File f = new File ( parent , name ) ; \n return f ; \n }", "repo": "vanilla", "task_id": "vanilla/318"}
{"input": "<s> private long getHash ( File f ) { long hash = - 1 ; byte [ ] buff = new byte [ <NUM_LIT> ] ; try ( FileInputStream fis = new FileInputStream ( f ) ) { CRC32 crc = new CRC32 ( ) ; while ( fis . read ( buff ) ! = - 1 ) { crc . update ( buff ) ; } hash = crc . getValue ( ) ; if ( hash < 0 ) hash = hash * - 1 ;", "gt": "} catch ( IOException e ) {", "repo": "vanilla", "task_id": "vanilla/323"}
{"input": "<s> private void XT ( String s ) { if ( DEBUG ) { try ( PrintWriter pw = new PrintWriter ( new FileOutputStream ( new File ( \" <STR_LIT> \" ) , true ) ) ) { pw . println ( System . currentTimeMillis ( ) / <NUM_LIT:1000> + \" <STR_LIT> \" + s ) ;", "gt": "Log . v ( \" <STR_LIT> \" , \" <STR_LIT> \" + s ) ; \n } catch ( Exception e ) { \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/324"}
{"input": "<s> @ Override public void onFolderPicked ( File directory , ArrayList < String > a , ArrayList < String > b ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( this ) . edit ( ) ; editor . putString ( PrefKeys . PLAYLIST_SYNC_FOLDER , directory . getAbsolutePath ( ) ) ;", "gt": "editor . apply ( ) ; \n finish ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/326"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n SharedPrefHelper . getSettings ( this ) . unregisterOnSharedPreferenceChangeListener ( this ) ; \n }", "repo": "vanilla", "task_id": "vanilla/330"}
{"input": "<s> @ Override public void onBuildHeaders ( List < Header > target ) { ArrayList < Header > tmp = new ArrayList < Header > ( ) ;", "gt": "loadHeadersFromResource ( R . xml . preference_headers , tmp ) ; \n for ( Header obj : tmp ) { \n target . add ( obj ) ; \n }", "repo": "vanilla", "task_id": "vanilla/331"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_audio ) ; \n }", "repo": "vanilla", "task_id": "vanilla/333"}
{"input": "<s> public boolean onPreferenceClick ( Preference preference ) {", "gt": "updateConfigWidgets ( ) ; \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/334"}
{"input": "<s> private void updateConfigWidgets ( ) { boolean rgOn = ( cbTrackReplayGain . isChecked ( ) | | cbAlbumReplayGain . isChecked ( ) ) ;", "gt": "sbGainBump . setEnabled ( rgOn ) ; \n sbUntaggedDebump . setEnabled ( rgOn ) ; \n }", "repo": "vanilla", "task_id": "vanilla/335"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_playback ) ; \n }", "repo": "vanilla", "task_id": "vanilla/336"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_library ) ; \n }", "repo": "vanilla", "task_id": "vanilla/337"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_notifications ) ; \n }", "repo": "vanilla", "task_id": "vanilla/338"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_shake ) ; \n }", "repo": "vanilla", "task_id": "vanilla/339"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_coverart ) ; \n }", "repo": "vanilla", "task_id": "vanilla/340"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_misc ) ; \n }", "repo": "vanilla", "task_id": "vanilla/341"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ; \n addPreferencesFromResource ( R . xml . preference_playlist ) ; \n }", "repo": "vanilla", "task_id": "vanilla/342"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Activity activity = getActivity ( ) ; Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \" <STR_LIT> \" ) ) ;", "gt": "if ( intent ! = null ) { \n startActivity ( intent ) ; \n }", "repo": "vanilla", "task_id": "vanilla/343"}
{"input": "<s> @ Override public void onChange ( LibraryObserver . Type type , long id , boolean ongoing ) { if ( type ! = LibraryObserver . Type . SCAN_PROGRESS ) return ; getActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override", "gt": "public void run ( ) { \n updateProgress ( ) ; \n } \n } ) ; \n }", "repo": "vanilla", "task_id": "vanilla/345"}
{"input": "<s> @ Override public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . start_button : startButtonPressed ( view ) ; break ; case R . id . cancel_button : cancelButtonPressed ( view ) ; break ; case R . id . edit_button : editButtonPressed ( view ) ; break ; case R . id . media_scan_group_albums :", "gt": "case R . id . media_scan_force_bastp : \n confirmUpdatePreferences ( ( CheckBox ) view ) ; \n break ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/347"}
{"input": "<s> public void onClick ( DialogInterface dialog , int id ) {", "gt": "mFullScanPending = true ; \n confirmUpdatePreferences ( checkbox ) ; \n }", "repo": "vanilla", "task_id": "vanilla/349"}
{"input": "<s> public long calculateSongSum ( Context context , String column ) { long duration = 0 ; Cursor cursor = MediaLibrary . queryLibrary ( context , MediaLibrary . TABLE_SONGS , new String [ ] { \" <STR_LIT> \" + column + \" <STR_LIT:)> \" } , null , null , null ) ; if ( cursor ! = null ) { if ( cursor . moveToFirst ( ) ) { duration = cursor . getLong ( 0 ) ;", "gt": "} \n cursor . close ( ) ; \n } \n return duration ; \n }", "repo": "vanilla", "task_id": "vanilla/352"}
{"input": "<s> private void startMediaFoldersSelection ( ) {", "gt": "mIsEditingDirectories = true ; \n startActivity ( new Intent ( getActivity ( ) , MediaFoldersSelectionActivity . class ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/353"}
{"input": "<s> @ Override public boolean onPreferenceClick ( Preference pref ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( mContext ) . edit ( ) ; editor . putString ( PrefKeys . SELECTED_THEME , pref . getKey ( ) ) ;", "gt": "editor . apply ( ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/354"}
{"input": "<s> private int [ ] decodeValue ( String v ) { String [ ] parts = v . split ( \" <STR_LIT:U+002C> \" ) ; int [ ] values = new int [ parts . length ] ; for ( int i = 0 ; i < parts . length ; i + + ) {", "gt": "long parsedLong = ( long ) Long . decode ( parts [ i ] ) ; \n values [ i ] = ( int ) parsedLong ; \n } \n return values ; \n }", "repo": "vanilla", "task_id": "vanilla/355"}
{"input": "<s> public void pause ( ) {", "gt": "mHandler . removeMessages ( MSG_SET_SONG ) ; \n mHandler . removeMessages ( MSG_READ_CHUNK ) ; \n }", "repo": "vanilla", "task_id": "vanilla/356"}
{"input": "<s> public void setSong ( final Song song ) {", "gt": "pause ( ) ; \n mHandler . sendMessageDelayed ( mHandler . obtainMessage ( MSG_SET_SONG , song ) , <NUM_LIT:1000> ) ; \n }", "repo": "vanilla", "task_id": "vanilla/357"}
{"input": "<s> @ Override public boolean onStopJob ( JobParameters params ) {", "gt": "finalizeScan ( ) ; \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/359"}
{"input": "<s> private void finalizeScan ( ) { MediaLibrary . unregisterLibraryObserver ( mObserver ) ;", "gt": "MediaLibrary . abortLibraryScan ( this ) ; \n mJobParams = null ; \n }", "repo": "vanilla", "task_id": "vanilla/360"}
{"input": "<s> @ Override public void onChange ( LibraryObserver . Type type , long id , boolean ongoing ) { if ( type = = LibraryObserver . Type . SONG & & ! ongoing ) { jobFinished ( mJobParams , false ) ;", "gt": "finalizeScan ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/361"}
{"input": "<s> @ Override public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) {", "gt": "progress = ( progress / mSteps ) * mSteps ; \n seekBar . setProgress ( progress ) ; \n setValue ( progress ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/364"}
{"input": "<s> private void setValue ( int value ) { mValue = value ;", "gt": "mValueText . setText ( getSummary ( value ) ) ; \n persistInt ( value ) ; \n }", "repo": "vanilla", "task_id": "vanilla/365"}
{"input": "<s> private void saveCheckBoxPreference ( boolean enabled ) { SharedPreferences . Editor editor = SharedPrefHelper . getSettings ( mContext ) . edit ( ) ;", "gt": "editor . putBoolean ( mCheckBoxKey , enabled ) ; \n editor . apply ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/366"}
{"input": "<s> public static SharedPreferences getSettings ( Context context ) { if ( sSettings = = null )", "gt": "sSettings = PreferenceManager . getDefaultSharedPreferences ( context ) ; \n return sSettings ; \n }", "repo": "vanilla", "task_id": "vanilla/368"}
{"input": "<s> public void setData ( PlaybackService service , int pos ) { mService = service ; mHighlightRow = pos ;", "gt": "mSongCount = service . getTimelineLength ( ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/370"}
{"input": "<s> @ Override public Song getItem ( int pos ) {", "gt": "Song item = mService . getSongByQueuePosition ( pos ) ; \n return ( item ! = null ? item : new Song ( - 1 ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/371"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "PlaybackService . removeTimelineCallback ( this ) ; \n super . onDestroyView ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/372"}
{"input": "<s> @ Override public void drop ( int from , int to ) { if ( from ! = to ) {", "gt": "playbackService ( ) . moveSongPosition ( from , to ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/374"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) private void scrollToCurrentSong ( int currentSongPosition ) {", "gt": "mListView . setSelectionFromTop ( currentSongPosition , 0 ) ; \n \n }", "repo": "vanilla", "task_id": "vanilla/376"}
{"input": "<s> public void setSong ( long uptime , Song song ) { if ( PlaybackService . hasInstance ( ) ) { boolean scroll = SharedPrefHelper . getSettings ( getActivity ( ) . getApplicationContext ( ) ) . getBoolean ( PrefKeys . QUEUE_ENABLE_SCROLL_TO_SONG , PrefDefaults . QUEUE_ENABLE_SCROLL_TO_SONG ) ;", "gt": "if ( ! mIsPopulated | | scroll ) { \n refreshSongQueueList ( scroll ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/377"}
{"input": "<s> public void onTimelineChanged ( ) { if ( PlaybackService . hasInstance ( ) ) {", "gt": "refreshSongQueueList ( false ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/378"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "mPaused = false ; \n updateElapsedTime ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/380"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n mPaused = true ; \n }", "repo": "vanilla", "task_id": "vanilla/381"}
{"input": "<s> @ Override protected void onSongChange ( Song song ) { setDuration ( song = = null ? 0 : song . duration ) ;", "gt": "updateElapsedTime ( ) ; \n super . onSongChange ( song ) ; \n }", "repo": "vanilla", "task_id": "vanilla/382"}
{"input": "<s> @ Override protected void onStateChange ( int state , int toggled ) {", "gt": "updateElapsedTime ( ) ; \n super . onStateChange ( state , toggled ) ; \n }", "repo": "vanilla", "task_id": "vanilla/383"}
{"input": "<s> @ Override public boolean handleMessage ( Message message ) { switch ( message . what ) { case MSG_UPDATE_PROGRESS : updateElapsedTime ( ) ; break ; case MSG_SEEK_TO_PROGRESS : PlaybackService . get ( this ) . seekToProgress ( message . arg1 ) ; updateElapsedTime ( ) ; break ;", "gt": "default : \n return super . handleMessage ( message ) ; \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/384"}
{"input": "<s> private void setDuration ( long duration ) {", "gt": "mDuration = duration ; \n mDurationView . setText ( DateUtils . formatElapsedTime ( mTimeBuilder , duration / <NUM_LIT:1000> ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/385"}
{"input": "<s> @ Override public void onPositionSubmit ( int position ) {", "gt": "PlaybackService . get ( this ) . seekToPosition ( position ) ; \n updateElapsedTime ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/387"}
{"input": "<s> public void hideSlide ( ) {", "gt": "setSlaveViewStage ( 0 ) ; \n setExpansionStage ( 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/388"}
{"input": "<s> @ Override protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; View handle = findViewById ( mSliderHandleId ) ; if ( handle ! = null ) { if ( handle instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) handle ; for ( int i = 0 ; i < group . getChildCount ( ) ; i + + ) { group . getChildAt ( i ) . setOnTouchListener ( this ) ; }", "gt": "} else { \n handle . setOnTouchListener ( this ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/391"}
{"input": "<s> @ Override protected void onWindowVisibilityChanged ( int state ) { super . onWindowVisibilityChanged ( state ) ; if ( state = = View . GONE & & mDelayedHide ) {", "gt": "hideSlide ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/392"}
{"input": "<s> @ Override public boolean onFling ( MotionEvent event1 , MotionEvent event2 , float velocityX , float velocityY ) {", "gt": "mFlingVelocity = velocityY ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/393"}
{"input": "<s> public static long getId ( Song song ) { if ( song = = null )", "gt": "return 0 ; \n return song . id ; \n }", "repo": "vanilla", "task_id": "vanilla/395"}
{"input": "<s> public String getTrackAndDiscNumber ( ) { String result = Integer . toString ( trackNumber ) ;", "gt": "if ( discNumber > 0 ) { \n result + = String . format ( \" <STR_LIT> \" , discNumber ) ; \n } < / n", "repo": "vanilla", "task_id": "vanilla/396"}
{"input": "<s> @ Override public int compare ( Song a , Song b ) { if ( a . id = = b . id )", "gt": "return 0 ; \n if ( a . id > b . id ) \n return 1 ; \n return - 1 ; \n }", "repo": "vanilla", "task_id": "vanilla/400"}
{"input": "<s> public void setShuffleMode ( int mode ) { if ( mode = = mShuffleMode ) return ; synchronized ( this ) { saveActiveSongs ( ) ; mShuffleMode = mode ; if ( mode ! = SHUFFLE_NONE & & mFinishAction ! = FINISH_RANDOM & & ! mSongs . isEmpty ( ) ) { ArrayList < Song > songs = getShuffledTimeline ( false ) ; mCurrentPos = songs . indexOf ( mSavedCurrent ) ; mSongs = songs ;", "gt": "} \n broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/401"}
{"input": "<s> private void reshuffleTimeline ( ) { synchronized ( this ) { saveActiveSongs ( ) ; ArrayList < Song > songs = getShuffledTimeline ( false ) ; int newPosition = songs . indexOf ( mSavedCurrent ) ; Collections . swap ( songs , newPosition , mCurrentPos ) ;", "gt": "mSongs = songs ; \n broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/403"}
{"input": "<s> private void shiftCurrentSongInternal ( int delta ) { int pos = mCurrentPos + delta ; if ( mFinishAction ! = FINISH_RANDOM & & pos = = mSongs . size ( ) ) { if ( mShuffleMode ! = SHUFFLE_NONE & & ! mSongs . isEmpty ( ) ) { mSongs = getShuffledTimeline ( true ) ; } pos = 0 ; } else if ( pos < 0 ) { if ( mFinishAction = = FINISH_RANDOM ) pos = 0 ;", "gt": "else \n pos = Math . max ( 0 , mSongs . size ( ) - 1 ) ; \n } \n mCurrentPos = pos ; \n }", "repo": "vanilla", "task_id": "vanilla/404"}
{"input": "<s> public Song setCurrentQueuePosition ( int pos ) { synchronized ( this ) { saveActiveSongs ( ) ; mCurrentPos = pos ;", "gt": "broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n return getSong ( 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/405"}
{"input": "<s> public Song getSongByQueuePosition ( int pos ) { Song song = null ; synchronized ( this ) {", "gt": "if ( mSongs . size ( ) > pos ) \n song = mSongs . get ( pos ) ; \n } \n return song ; \n }", "repo": "vanilla", "task_id": "vanilla/406"}
{"input": "<s> public int getQueuePositionForSongId ( long id ) { synchronized ( this ) { for ( int pos = 0 ; pos < mSongs . size ( ) ; pos + + ) { Song current = mSongs . get ( pos ) ; if ( current . id = = id )", "gt": "return pos ; \n } \n } \n return - 1 ; \n }", "repo": "vanilla", "task_id": "vanilla/407"}
{"input": "<s> private void shrinkQueue ( int len ) { synchronized ( this ) { while ( mCurrentPos > len ) { mSongs . remove ( 0 ) ;", "gt": "mCurrentPos - - ; \n } \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/408"}
{"input": "<s> public void clearQueue ( ) { synchronized ( this ) { saveActiveSongs ( ) ; if ( mCurrentPos + 1 < mSongs . size ( ) )", "gt": "mSongs . subList ( mCurrentPos + 1 , mSongs . size ( ) ) . clear ( ) ; \n broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/409"}
{"input": "<s> public void emptyQueue ( ) { synchronized ( this ) { saveActiveSongs ( ) ; mSongs . clear ( ) ;", "gt": "mCurrentPos = 0 ; \n broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/410"}
{"input": "<s> public void removeSongPosition ( int pos ) { synchronized ( this ) { ArrayList < Song > songs = mSongs ; if ( songs . size ( ) < = pos ) return ; saveActiveSongs ( ) ; songs . remove ( pos ) ; if ( pos < mCurrentPos ) mCurrentPos - - ; if ( getSong ( 1 ) = = null )", "gt": "mCurrentPos = 0 ; \n broadcastChangedSongs ( ) ; \n } \n changed ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/412"}
{"input": "<s> public boolean isEndOfQueue ( ) { synchronized ( this ) {", "gt": "return mFinishAction = = FINISH_STOP & & mCurrentPos = = mSongs . size ( ) - 1 ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/414"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) = = android . R . id . home ) { finish ( ) ;", "gt": "return true ; \n } else { \n return super . onOptionsItemSelected ( item ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/418"}
{"input": "<s> @ Override public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . done : finish ( ) ; break ;", "gt": "case R . id . restore_default : \n restoreDefault ( ) ; \n break ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/419"}
{"input": "<s> public void setTabIds ( int [ ] ids ) {", "gt": "mTabIds = ids ; \n notifyDataSetChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/423"}
{"input": "<s> final private static boolean usesDarkTheme ( Context context ) { final int idx = getSelectedThemeIndex ( context ) ; final String [ ] variants = context . getResources ( ) . getStringArray ( R . array . theme_variant ) ;", "gt": "boolean useDark = variants [ idx ] . equals ( \" <STR_LIT> \" ) ; \n return useDark ; \n }", "repo": "vanilla", "task_id": "vanilla/425"}
{"input": "<s> final public static int fetchThemeColor ( Context context , int resId ) { TypedArray a = context . obtainStyledAttributes ( new int [ ] { resId } ) ; int color = a . getColor ( 0 , 0 ) ;", "gt": "a . recycle ( ) ; \n return color ; \n }", "repo": "vanilla", "task_id": "vanilla/427"}
{"input": "<s> final public static int [ ] getDefaultCoverColors ( Context context ) { int bg = fetchThemeColor ( context , android . R . attr . colorBackground ) ;", "gt": "int diff = <NUM_LIT> * ( bg > <NUM_LIT> ? - 1 : 1 ) ; \n return new int [ ] { bg , bg + diff } ; \n }", "repo": "vanilla", "task_id": "vanilla/428"}
{"input": "<s> public static TrackDetailsDialog newInstance ( long songId ) { TrackDetailsDialog dialog = new TrackDetailsDialog ( ) ;", "gt": "Bundle args = new Bundle ( ) ; \n args . putLong ( SONG_ID , songId ) ; \n dialog . setArguments ( args ) ; \n return dialog ; \n }", "repo": "vanilla", "task_id": "vanilla/429"}
{"input": "<s> @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mHandlerThread = new HandlerThread ( getClass ( ) . getName ( ) ) ;", "gt": "mHandlerThread . start ( ) ; \n setStyle ( DialogFragment . STYLE_NO_TITLE , 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/430"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n mHandlerThread . quit ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/432"}
{"input": "<s> public void setColors ( int colA , int colB ) { PaintDrawable bg = new PaintDrawable ( colB ) ;", "gt": "setBackgroundDrawable ( bg ) ; \n mArrowColor = colA ; \n }", "repo": "vanilla", "task_id": "vanilla/433"}
{"input": "<s> private FancyMenuItem addInternal ( int id , int order , int icon , CharSequence text , boolean spacer ) { FancyMenuItem item = new FancyMenuItem ( mContext , id ) . setIcon ( icon ) . setTitle ( text ) . setIsSpacer ( spacer ) ; while ( order > = mItems . size ( ) ) {", "gt": "mItems . add ( new ArrayList < FancyMenuItem > ( ) ) ; \n } \n mItems . get ( order ) . add ( item ) ; \n return item ; \n }", "repo": "vanilla", "task_id": "vanilla/435"}
{"input": "<s> private Adapter assembleAdapter ( ArrayList < ArrayList < FancyMenuItem > > items ) { final Adapter adapter = new Adapter ( mContext , 0 ) ; for ( ArrayList < FancyMenuItem > sub : items ) { for ( FancyMenuItem item : sub ) {", "gt": "adapter . add ( item ) ; \n } \n } \n return adapter ; \n }", "repo": "vanilla", "task_id": "vanilla/436"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > parent , View view , int pos , long id ) { FancyMenuItem item = adapter . getItem ( pos ) ;", "gt": "if ( ! item . isSpacer ( ) ) { \n mCallback . onFancyItemSelected ( item ) ; \n }", "repo": "vanilla", "task_id": "vanilla/437"}
{"input": "<s> public FancyMenuItem setIsSpacer ( boolean spacer ) {", "gt": "mSpacer = spacer ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/438"}
{"input": "<s> @ Override public Drawable getIcon ( ) { if ( mIconRes ! = 0 )", "gt": "return mContext . getResources ( ) . getDrawable ( mIconRes ) ; \n return mIcon ; \n }", "repo": "vanilla", "task_id": "vanilla/439"}
{"input": "<s> @ Override public FancyMenuItem setIcon ( Drawable drawable ) {", "gt": "mIcon = drawable ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/440"}
{"input": "<s> @ Override public FancyMenuItem setIcon ( int res ) {", "gt": "mIconRes = res ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/441"}
{"input": "<s> @ Override public FancyMenuItem setIntent ( Intent intent ) {", "gt": "mIntent = intent ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/442"}
{"input": "<s> @ Override public FancyMenuItem setTitle ( CharSequence title ) {", "gt": "mTitle = title ; \n return this ; \n }", "repo": "vanilla", "task_id": "vanilla/443"}
{"input": "<s> @ Override public void setImageResource ( int resId ) {", "gt": "super . setImageResource ( resId ) ; \n this . updateImageTint ( resId ) ; \n }", "repo": "vanilla", "task_id": "vanilla/444"}
{"input": "<s> private void updateImageTint ( int resHint ) { int filterColor = mNormalTint ; switch ( resHint ) { case R . drawable . repeat_active : case R . drawable . repeat_current_active : case R . drawable . stop_current_active : case R . drawable . shuffle_active : case R . drawable . shuffle_album_active :", "gt": "case R . drawable . random_active : \n filterColor = mActiveTint ; \n } \n this . setColorFilter ( filterColor ) ; \n }", "repo": "vanilla", "task_id": "vanilla/445"}
{"input": "<s> public void reset ( ) { mDataSource = null ;", "gt": "mHasNextMediaPlayer = false ; \n super . reset ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/447"}
{"input": "<s> public void release ( ) { mDataSource = null ;", "gt": "mHasNextMediaPlayer = false ; \n super . release ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/448"}
{"input": "<s> @ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) public void setNextMediaPlayer ( VanillaMediaPlayer next ) {", "gt": "super . setNextMediaPlayer ( next ) ; \n mHasNextMediaPlayer = ( next ! = null ) ; \n }", "repo": "vanilla", "task_id": "vanilla/449"}
{"input": "<s> public void openAudioFx ( ) { Intent i = new Intent ( AudioEffect . ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION ) ; i . putExtra ( AudioEffect . EXTRA_AUDIO_SESSION , this . getAudioSessionId ( ) ) ;", "gt": "i . putExtra ( AudioEffect . EXTRA_PACKAGE_NAME , mContext . getPackageName ( ) ) ; \n mContext . sendBroadcast ( i ) ; \n }", "repo": "vanilla", "task_id": "vanilla/450"}
{"input": "<s> public void closeAudioFx ( ) { Intent i = new Intent ( AudioEffect . ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION ) ; i . putExtra ( AudioEffect . EXTRA_AUDIO_SESSION , this . getAudioSessionId ( ) ) ;", "gt": "i . putExtra ( AudioEffect . EXTRA_PACKAGE_NAME , mContext . getPackageName ( ) ) ; \n mContext . sendBroadcast ( i ) ; \n }", "repo": "vanilla", "task_id": "vanilla/451"}
{"input": "<s> public void setReplayGain ( float replayGain ) {", "gt": "mReplayGain = replayGain ; \n updateVolume ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/452"}
{"input": "<s> public void setIsDucking ( boolean isDucking ) {", "gt": "mIsDucking = isDucking ; \n updateVolume ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/453"}
{"input": "<s> public void setDuckingFactor ( float duckingFactor ) {", "gt": "mDuckingFactor = duckingFactor ; \n updateVolume ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/454"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/456"}
{"input": "<s> @ Override public void onUpdate ( Context context , AppWidgetManager manager , int [ ] ids ) { Song song = null ; int state = 0 ; if ( PlaybackService . hasInstance ( ) ) { PlaybackService service = PlaybackService . get ( context ) ; song = service . getSong ( 0 ) ;", "gt": "state = service . getState ( ) ; \n } \n sEnabled = true ; \n updateWidget ( context , manager , song , state ) ; \n }", "repo": "vanilla", "task_id": "vanilla/457"}
{"input": "<s> public HashMap getTags ( String fname ) { HashMap tags = new HashMap ( ) ; try { RandomAccessFile ra = new RandomAccessFile ( fname , \" <STR_LIT> \" ) ; tags = getTags ( ra ) ; ra . close ( ) ;", "gt": "} catch ( Exception e ) { \n \n } \n return tags ; \n }", "repo": "vanilla", "task_id": "vanilla/458"}
{"input": "<s> private void inheritTag ( String key , HashMap from , HashMap to ) { if ( ! to . containsKey ( key ) & & from . containsKey ( key ) ) {", "gt": "to . put ( key , from . get ( key ) ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/459"}
{"input": "<s> public int b2le32 ( byte [ ] b , int off ) { int r = 0 ;", "gt": "for ( int i = 0 ; i < <NUM_LIT:4> ; i + + ) { \n r | = ( b2u ( b [ off + i ] ) < < ( <NUM_LIT:8> * i ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/460"}
{"input": "<s> public int raf2le32 ( RandomAccessFile fh , long off ) throws IOException { byte [ ] scratch = new byte [ <NUM_LIT:4> ] ; fh . seek ( off ) ;", "gt": "fh . read ( scratch ) ; \n return b2le32 ( scratch , 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/461"}
{"input": "<s> public void addTagEntry ( HashMap tags , String key , String value ) { if ( tags . containsKey ( key ) ) { ( ( ArrayList ) tags . get ( key ) ) . add ( value ) ; } else {", "gt": "ArrayList l = new ArrayList < String > ( ) ; \n l . add ( value ) ; \n tags . put ( key , l ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/462"}
{"input": "<s> private int calculateFrameLength ( byte [ ] frame , int offset , int v3major ) { if ( v3major < <NUM_LIT:3> ) { return ( frame [ offset ] < < <NUM_LIT:16> ) + ( frame [ offset + 1 ] < < <NUM_LIT:8> ) + frame [ offset + <NUM_LIT:2> ] ; } int rawlen = b2be32 ( frame , offset ) ;", "gt": "if ( v3major < <NUM_LIT:4> ) { \n return rawlen ; \n }", "repo": "vanilla", "task_id": "vanilla/464"}
{"input": "<s> public HashMap getTags ( RandomAccessFile s ) throws IOException { HashMap rgain = parseLameHeader ( s , 0 ) ; HashMap tags = parseV1Header ( s , s . length ( ) - <NUM_LIT> ) ; for ( String k : Arrays . asList ( \" <STR_LIT> \" , \" <STR_LIT> \" ) ) {", "gt": "if ( rgain . containsKey ( k ) ) \n tags . put ( k , rgain . get ( k ) ) ; \n } \n return tags ; \n }", "repo": "vanilla", "task_id": "vanilla/465"}
{"input": "<s> private byte [ ] readIntoBuffer ( RandomAccessFile s , int dataSize ) throws IOException { int bufferSize = Math . min ( dataSize , MAX_BUFFER_SIZE ) ; byte [ ] buffer = new byte [ bufferSize ] ; s . read ( buffer , 0 , buffer . length ) ;", "gt": "if ( dataSize > bufferSize ) { \n s . skipBytes ( dataSize - bufferSize ) ; \n }", "repo": "vanilla", "task_id": "vanilla/466"}
{"input": "<s> public HashMap getTags ( RandomAccessFile s ) throws IOException {", "gt": "HashMap tags = new HashMap ( ) ; \n return tags ; \n }", "repo": "vanilla", "task_id": "vanilla/471"}
{"input": "<s> @ Override public void onDragFloatView ( View floatView , Point position , Point touch ) { if ( mRemoveEnabled & & mIsRemoving ) {", "gt": "mPositionX = position . x ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/473"}
{"input": "<s> @ Override public boolean onDown ( MotionEvent ev ) { if ( mRemoveEnabled & & mRemoveMode = = CLICK_REMOVE ) { mClickRemoveHitPos = viewIdHitPosition ( ev , mClickRemoveId ) ; } mHitPos = startDragPosition ( ev ) ; if ( mHitPos ! = MISS & & mDragInitMode = = ON_DOWN ) { startDrag ( mHitPos , ( int ) ev . getX ( ) - mItemX , ( int ) ev . getY ( ) - mItemY ) ; } mIsRemoving = false ;", "gt": "mCanDrag = true ; \n mPositionX = 0 ; \n mFlingHitPos = startFlingPosition ( ev ) ; \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/474"}
{"input": "<s> @ Override public boolean onSingleTapUp ( MotionEvent ev ) { if ( mRemoveEnabled & & mRemoveMode = = CLICK_REMOVE ) { if ( mClickRemoveHitPos ! = MISS ) {", "gt": "mDslv . removeItem ( mClickRemoveHitPos - mDslv . getHeaderViewsCount ( ) ) ; \n } \n } \n return true ; \n }", "repo": "vanilla", "task_id": "vanilla/476"}
{"input": "<s> @ Override public Cursor swapCursor ( Cursor newCursor ) { Cursor old = super . swapCursor ( newCursor ) ;", "gt": "resetMappings ( ) ; \n return old ; \n }", "repo": "vanilla", "task_id": "vanilla/477"}
{"input": "<s> @ Override public void changeCursor ( Cursor cursor ) {", "gt": "super . changeCursor ( cursor ) ; \n resetMappings ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/478"}
{"input": "<s> public void reset ( ) {", "gt": "resetMappings ( ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/479"}
{"input": "<s> private void resetMappings ( ) {", "gt": "mListMapping . clear ( ) ; \n mRemovedCursorPositions . clear ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/480"}
{"input": "<s> @ Override public void remove ( int which ) { int cursorPos = mListMapping . get ( which , which ) ; if ( ! mRemovedCursorPositions . contains ( cursorPos ) ) { mRemovedCursorPositions . add ( cursorPos ) ; } int newCount = getCount ( ) ; for ( int i = which ; i < newCount ; + + i ) { mListMapping . put ( i , mListMapping . get ( i + 1 , i + 1 ) ) ;", "gt": "} \n mListMapping . delete ( newCount ) ; \n cleanMapping ( ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/481"}
{"input": "<s> private void cleanMapping ( ) { ArrayList < Integer > toRemove = new ArrayList < Integer > ( ) ; int size = mListMapping . size ( ) ; for ( int i = 0 ; i < size ; + + i ) { if ( mListMapping . keyAt ( i ) = = mListMapping . valueAt ( i ) ) { toRemove . add ( mListMapping . keyAt ( i ) ) ; } }", "gt": "size = toRemove . size ( ) ; \n for ( int i = 0 ; i < size ; + + i ) { \n mListMapping . delete ( toRemove . get ( i ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/482"}
{"input": "<s> public ArrayList < Integer > getCursorPositions ( ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ;", "gt": "for ( int i = 0 ; i < getCount ( ) ; + + i ) { \n result . add ( mListMapping . get ( i , i ) ) ; \n }", "repo": "vanilla", "task_id": "vanilla/483"}
{"input": "<s> public int getListPosition ( int cursorPosition ) { if ( mRemovedCursorPositions . contains ( cursorPosition ) ) { return REMOVED ; } int index = mListMapping . indexOfValue ( cursorPosition ) ; if ( index < 0 ) {", "gt": "return cursorPosition ; \n } else { \n return mListMapping . keyAt ( index ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/484"}
{"input": "<s> @ Override public boolean isChecked ( ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable ) \n return ( ( Checkable ) child ) . isChecked ( ) ; \n else \n return false ; \n }", "repo": "vanilla", "task_id": "vanilla/486"}
{"input": "<s> @ Override public void setChecked ( boolean checked ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable ) \n ( ( Checkable ) child ) . setChecked ( checked ) ; \n }", "repo": "vanilla", "task_id": "vanilla/487"}
{"input": "<s> @ Override public void toggle ( ) { View child = getChildAt ( 0 ) ;", "gt": "if ( child instanceof Checkable ) \n ( ( Checkable ) child ) . toggle ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/488"}
{"input": "<s> private void cancel ( ) { if ( mDragState = = DRAGGING ) {", "gt": "cancelDrag ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/489"}
{"input": "<s> @ Override public void setOnTouchListener ( View . OnTouchListener l ) { if ( mFloatViewManager ! = null ) {", "gt": "mFloatViewManager . setSecondaryOnTouchListener ( l ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/490"}
{"input": "<s> public ListAdapter getInputAdapter ( ) { if ( mAdapterWrapper = = null ) {", "gt": "return null ; \n } else { \n return mAdapterWrapper . getAdapter ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/491"}
{"input": "<s> public void add ( int position , int height ) { int currHeight = mMap . get ( position , - 1 ) ; if ( currHeight ! = height ) { if ( currHeight = = - 1 ) { if ( mMap . size ( ) = = mMaxSize ) { mMap . delete ( mOrder . remove ( 0 ) ) ; } } else { mOrder . remove ( ( Integer ) position ) ;", "gt": "} \n mMap . put ( position , height ) ; \n mOrder . add ( position ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/493"}
{"input": "<s> public void clear ( ) {", "gt": "mMap . clear ( ) ; \n mOrder . clear ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/494"}
{"input": "<s> @ Override protected void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; if ( mTrackDragSort ) {", "gt": "mDragSortTracker . appendState ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/495"}
{"input": "<s> public float transform ( float frac ) { if ( frac < mAlpha ) { return mA * frac * frac ; } else if ( frac < <NUM_LIT> - mAlpha ) {", "gt": "return mB + mC * frac ; \n } else { \n return <NUM_LIT> - mD * ( frac - <NUM_LIT> ) * ( frac - <NUM_LIT> ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/496"}
{"input": "<s> public void start ( ) { mStartTime = SystemClock . uptimeMillis ( ) ; mCanceled = false ;", "gt": "onStart ( ) ; \n post ( this ) ; \n }", "repo": "vanilla", "task_id": "vanilla/497"}
{"input": "<s> @ Override public void run ( ) { if ( mCanceled ) { return ; } float fraction = ( ( float ) ( SystemClock . uptimeMillis ( ) - mStartTime ) ) / mDurationF ; if ( fraction > = <NUM_LIT> ) { onUpdate ( <NUM_LIT> , <NUM_LIT> ) ; onStop ( ) ;", "gt": "} else { \n onUpdate ( fraction , transform ( fraction ) ) ; \n post ( this ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/498"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "mInitDragDeltaY = mDragDeltaY ; \n mFinalDragDeltaY = mFloatViewHeightHalf ; \n }", "repo": "vanilla", "task_id": "vanilla/499"}
{"input": "<s> public void removeItem ( int which ) {", "gt": "mUseRemoveVelocity = false ; \n removeItem ( which , 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/503"}
{"input": "<s> public void cancelDrag ( ) { if ( mDragState = = DRAGGING ) { mDragScroller . stopScrolling ( true ) ; destroyFloatView ( ) ; clearPositions ( ) ; adjustAllItems ( ) ; if ( mInTouchEvent ) { mDragState = STOPPED ;", "gt": "} else { \n mDragState = IDLE ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/505"}
{"input": "<s> private void clearPositions ( ) { mSrcPos = - 1 ; mFirstExpPos = - 1 ;", "gt": "mSecondExpPos = - 1 ; \n mFloatPos = - 1 ; \n }", "repo": "vanilla", "task_id": "vanilla/506"}
{"input": "<s> private void doRemoveItem ( int which ) { mDragState = REMOVING ; if ( mRemoveListener ! = null ) { mRemoveListener . remove ( which ) ; } destroyFloatView ( ) ; adjustOnReorder ( ) ; clearPositions ( ) ; if ( mInTouchEvent ) {", "gt": "mDragState = STOPPED ; \n } else { \n mDragState = IDLE ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/507"}
{"input": "<s> public boolean stopDrag ( boolean remove ) {", "gt": "mUseRemoveVelocity = false ; \n return stopDrag ( remove , 0 ) ; \n }", "repo": "vanilla", "task_id": "vanilla/508"}
{"input": "<s> public boolean stopDragWithVelocity ( boolean remove , float velocityX ) {", "gt": "mUseRemoveVelocity = true ; \n return stopDrag ( remove , velocityX ) ; \n }", "repo": "vanilla", "task_id": "vanilla/509"}
{"input": "<s> private void doActionUpOrCancel ( ) { mCancelMethod = NO_CANCEL ; mInTouchEvent = false ; if ( mDragState = = STOPPED ) { mDragState = IDLE ;", "gt": "} \n mCurrFloatAlpha = mFloatAlpha ; \n mListViewIntercepted = false ; \n mChildHeightCache . clear ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/510"}
{"input": "<s> private void saveTouchCoords ( MotionEvent ev ) { int action = ev . getAction ( ) & MotionEvent . ACTION_MASK ; if ( action ! = MotionEvent . ACTION_DOWN ) { mLastX = mX ; mLastY = mY ; } mX = ( int ) ev . getX ( ) ; mY = ( int ) ev . getY ( ) ; if ( action = = MotionEvent . ACTION_DOWN ) { mLastX = mX ;", "gt": "mLastY = mY ; \n } \n mOffsetX = ( int ) ev . getRawX ( ) - mX ; \n mOffsetY = ( int ) ev . getRawY ( ) - mY ; \n }", "repo": "vanilla", "task_id": "vanilla/511"}
{"input": "<s> public void setDragScrollStarts ( float upperFrac , float lowerFrac ) { if ( lowerFrac > <NUM_LIT> ) { mDragDownScrollStartFrac = <NUM_LIT> ; } else { mDragDownScrollStartFrac = lowerFrac ; } if ( upperFrac > <NUM_LIT> ) { mDragUpScrollStartFrac = <NUM_LIT> ; } else { mDragUpScrollStartFrac = upperFrac ;", "gt": "} \n if ( getHeight ( ) ! = 0 ) { \n updateScrollStarts ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/512"}
{"input": "<s> @ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) {", "gt": "super . onSizeChanged ( w , h , oldw , oldh ) ; \n updateScrollStarts ( ) ; \n }", "repo": "vanilla", "task_id": "vanilla/513"}
{"input": "<s> private void adjustAllItems ( ) { final int first = getFirstVisiblePosition ( ) ; final int last = getLastVisiblePosition ( ) ; int begin = Math . max ( 0 , getHeaderViewsCount ( ) - first ) ; int end = Math . min ( last - first , getCount ( ) - 1 - getFooterViewsCount ( ) - first ) ; for ( int i = begin ; i < = end ; + + i ) { View v = getChildAt ( i ) ;", "gt": "if ( v ! = null ) { \n adjustItem ( first + i , v , false ) ; \n } \n } \n }", "repo": "vanilla", "task_id": "vanilla/514"}
{"input": "<s> private void adjustItem ( int position ) { View v = getChildAt ( position - getFirstVisiblePosition ( ) ) ; if ( v ! = null ) {", "gt": "adjustItem ( position , v , false ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/515"}
{"input": "<s> @ Override public void requestLayout ( ) { if ( ! mBlockLayoutRequests ) {", "gt": "super . requestLayout ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/516"}
{"input": "<s> public boolean startDrag ( int position , int dragFlags , int deltaX , int deltaY ) { if ( ! mInTouchEvent | | mFloatViewManager = = null ) { return false ; } View v = mFloatViewManager . onCreateFloatView ( position ) ; if ( v = = null ) {", "gt": "return false ; \n } else { \n return startDrag ( position , v , dragFlags , deltaX , deltaY ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/519"}
{"input": "<s> private void doDragFloatView ( boolean forceInvalidate ) { int movePos = getFirstVisiblePosition ( ) + getChildCount ( ) / <NUM_LIT:2> ; View moveItem = getChildAt ( getChildCount ( ) / <NUM_LIT:2> ) ;", "gt": "if ( moveItem = = null ) { \n return ; \n }", "repo": "vanilla", "task_id": "vanilla/520"}
{"input": "<s> private void destroyFloatView ( ) { if ( mFloatView ! = null ) { mFloatView . setVisibility ( GONE ) ; if ( mFloatViewManager ! = null ) { mFloatViewManager . onDestroyFloatView ( mFloatView ) ;", "gt": "} \n mFloatView = null ; \n invalidate ( ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/521"}
{"input": "<s> public void setDragSortListener ( DragSortListener l ) { setDropListener ( l ) ;", "gt": "setDragListener ( l ) ; \n setRemoveListener ( l ) ; \n }", "repo": "vanilla", "task_id": "vanilla/522"}
{"input": "<s> public void setDragScrollProfile ( DragScrollProfile ssp ) { if ( ssp ! = null ) {", "gt": "mScrollProfile = ssp ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/523"}
{"input": "<s> private static int rotate ( int value , int offset , int lowerBound , int upperBound ) { int windowSize = upperBound - lowerBound ; value + = offset ; if ( value < lowerBound ) { value + = windowSize ;", "gt": "} else if ( value > = upperBound ) { \n value - = windowSize ; \n } \n return value ; \n }", "repo": "vanilla", "task_id": "vanilla/524"}
{"input": "<s> private static int insertionIndexForKey ( SparseBooleanArray sba , int key ) { int low = 0 ; int high = sba . size ( ) ; while ( high - low > 0 ) { int middle = ( low + high ) > > 1 ; if ( sba . keyAt ( middle ) < key ) low = middle + 1 ;", "gt": "else \n high = middle ; \n } \n return low ; \n }", "repo": "vanilla", "task_id": "vanilla/526"}
{"input": "<s> public void startScrolling ( int dir ) { if ( ! mScrolling ) { mAbort = false ; mScrolling = true ; tStart = SystemClock . uptimeMillis ( ) ;", "gt": "mPrevTime = tStart ; \n scrollDir = dir ; \n post ( this ) ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/527"}
{"input": "<s> public void startTracking ( ) { mBuilder . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) ;", "gt": "mNumFlushes = 0 ; \n mTracking = true ; \n }", "repo": "vanilla", "task_id": "vanilla/529"}
{"input": "<s> public void stopTracking ( ) { if ( mTracking ) {", "gt": "mBuilder . append ( \" <STR_LIT> <STR_LIT> <STR_LIT> \" ) ; \n flush ( ) ; \n mTracking = false ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/531"}
{"input": "<s> private void findColumns ( Cursor c , String [ ] from ) { if ( c ! = null ) { int i ; int count = from . length ; if ( mFrom = = null | | mFrom . length ! = count ) { mFrom = new int [ count ] ; } for ( i = 0 ; i < count ; i + + ) { mFrom [ i ] = c . getColumnIndexOrThrow ( from [ i ] ) ;", "gt": "} \n } else { \n mFrom = null ; \n } \n }", "repo": "vanilla", "task_id": "vanilla/534"}
{"input": "<s> @ Override public void onDestroyFloatView ( View floatView ) { ( ( ImageView ) floatView ) . setImageDrawable ( null ) ;", "gt": "mFloatBitmap . recycle ( ) ; \n mFloatBitmap = null ; \n }", "repo": "vanilla", "task_id": "vanilla/537"}
{"input": "<s> protected View getRootView ( ) {", "gt": "viewBinding = AboutBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/0"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/1"}
{"input": "<s> @ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ;", "gt": "setVolumeControlStream ( TTSManager . AUDIO_STREAM ) ; \n setContentView ( getRootView ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/2"}
{"input": "<s> @ Override public boolean onSupportNavigateUp ( ) {", "gt": "getOnBackPressedDispatcher ( ) . onBackPressed ( ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/3"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { viewBinding = ChartBinding . inflate ( inflater , container , false ) ;", "gt": "viewBinding . chartView . setChartByDistance ( chartByDistance ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/8"}
{"input": "<s> @ Override public void onPause ( ) { super . onPause ( ) ;", "gt": "pauseTrackDataHub ( ) ; \n PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/10"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/11"}
{"input": "<s> public void onSampledInTrackPoint ( @ NonNull TrackPoint trackPoint , @ NonNull TrackStatistics trackStatistics ) { if ( isResumed ( ) ) { ChartPoint point = ChartPoint . create ( trackStatistics , trackPoint , trackPoint . getSpeed ( ) , chartByDistance , viewBinding . chartView . getUnitSystem ( ) ) ;", "gt": "pendingPoints . add ( point ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/14"}
{"input": "<s> @ Override public void clearMarkers ( ) { if ( isResumed ( ) ) {", "gt": "viewBinding . chartView . clearMarker ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/16"}
{"input": "<s> @ Override public void onNewMarker ( @ NonNull Marker marker ) { if ( isResumed ( ) ) {", "gt": "viewBinding . chartView . addMarker ( marker ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/17"}
{"input": "<s> @ Override public void onNewMarkersDone ( ) { if ( isResumed ( ) ) {", "gt": "runOnUiThread ( updateChart ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/18"}
{"input": "<s> private void checkChartSettings ( ) { boolean needUpdate = viewBinding . chartView . applyReportSpeed ( ) ; if ( needUpdate ) {", "gt": "viewBinding . chartView . postInvalidate ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/19"}
{"input": "<s> private synchronized void pauseTrackDataHub ( ) {", "gt": "trackDataHub . unregisterTrackDataListener ( this ) ; \n trackDataHub = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/21"}
{"input": "<s> private void runOnUiThread ( Runnable runnable ) { Activity fragmentActivity = getActivity ( ) ; if ( fragmentActivity ! = null ) {", "gt": "fragmentActivity . runOnUiThread ( runnable ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/22"}
{"input": "<s> void update ( ChartPoint chartPoint ) { if ( isChartPointValid ( chartPoint ) ) {", "gt": "extremityMonitor . update ( extractDataFromChartPoint ( chartPoint ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/23"}
{"input": "<s> void drawPath ( Canvas canvas , boolean shouldFillPathArea ) { if ( shouldFillPathArea ) { canvas . drawPath ( path , fillPaint ) ;", "gt": "} \n canvas . drawPath ( path , strokePaint ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/24"}
{"input": "<s> private int getMinMarkerValue ( double min , int intervalValue ) { int value = ( ( int ) ( min / intervalValue ) ) * intervalValue ;", "gt": "if ( value > min ) { \n return value - intervalValue ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/27"}
{"input": "<s> int getTitleId ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > metricTitleId ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "imperialTitleId ; \n case NAUTICAL_IMPERIAL - > \n nauticalTitleId ; \n } ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/28"}
{"input": "<s> @ Override public boolean onDown ( MotionEvent e ) { if ( ! scroller . isFinished ( ) ) { scroller . abortAnimation ( ) ;", "gt": "} \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/30"}
{"input": "<s> @ Override public boolean onScroll ( MotionEvent e1 , MotionEvent e2 , float distanceX , float distanceY ) { if ( Math . abs ( distanceX ) > 0 ) { int availableToScroll = effectiveWidth * ( zoomLevel - 1 ) - getScrollX ( ) ; if ( availableToScroll > 0 ) {", "gt": "scrollBy ( Math . min ( availableToScroll , ( int ) distanceX ) ) ; \n } \n } \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/31"}
{"input": "<s> @ Override public boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) {", "gt": "fling ( ( int ) - velocityX ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/32"}
{"input": "<s> @ Override public boolean onScale ( ScaleGestureDetector detector ) { float scaleFactor = detector . getScaleFactor ( ) ; if ( scaleFactor > = <NUM_LIT> ) { zoomIn ( ) ; return true ; } else if ( scaleFactor < = <NUM_LIT> ) {", "gt": "zoomOut ( ) ; \n return true ; \n } \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/33"}
{"input": "<s> public boolean applyReportSpeed ( ) { if ( reportSpeed ) { if ( ! speedSeries . isEnabled ( ) ) { speedSeries . setEnabled ( true ) ; paceSeries . setEnabled ( false ) ; return true ; } } else { if ( ! paceSeries . isEnabled ( ) ) { speedSeries . setEnabled ( false ) ; paceSeries . setEnabled ( true ) ;", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/34"}
{"input": "<s> public void addChartPoints ( List < ChartPoint > dataPoints ) { synchronized ( chartPoints ) { chartPoints . addAll ( dataPoints ) ; for ( ChartPoint dataPoint : dataPoints ) { xExtremityMonitor . update ( dataPoint . timeOrDistance ( ) ) ; for ( ChartValueSeries i : seriesList ) { i . update ( dataPoint ) ; }", "gt": "} \n updateDimensions ( ) ; \n updateSeries ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/35"}
{"input": "<s> public void reset ( ) { synchronized ( chartPoints ) { chartPoints . clear ( ) ;", "gt": "xExtremityMonitor . reset ( ) ; \n zoomLevel = 1 ; \n updateDimensions ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/36"}
{"input": "<s> public void addMarker ( Marker marker ) { synchronized ( markers ) {", "gt": "markers . add ( marker ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/37"}
{"input": "<s> public void clearMarker ( ) { synchronized ( markers ) {", "gt": "markers . clear ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/38"}
{"input": "<s> private void zoomIn ( ) { if ( canZoomIn ( ) ) {", "gt": "zoomLevel + + ; \n updateSeries ( ) ; \n invalidate ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/39"}
{"input": "<s> private void zoomOut ( ) { if ( canZoomOut ( ) ) { zoomLevel - - ; scroller . abortAnimation ( ) ; int scrollX = getScrollX ( ) ; int maxWidth = effectiveWidth * ( zoomLevel - 1 ) ; if ( scrollX > maxWidth ) { scrollX = maxWidth ; scrollTo ( scrollX , 0 ) ;", "gt": "} \n updateSeries ( ) ; \n invalidate ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/40"}
{"input": "<s> private void fling ( int velocityX ) { int maxWidth = effectiveWidth * ( zoomLevel - 1 ) ;", "gt": "scroller . fling ( getScrollX ( ) , 0 , velocityX , 0 , 0 , maxWidth , 0 , 0 ) ; \n invalidate ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/41"}
{"input": "<s> private void requestDisallowInterceptTouchEventInParent ( boolean disallow ) { ViewParent parent = getParent ( ) ; if ( parent ! = null ) {", "gt": "parent . requestDisallowInterceptTouchEvent ( disallow ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/42"}
{"input": "<s> private void scrollBy ( int deltaX ) { int scrollX = getScrollX ( ) + deltaX ; if ( scrollX < = 0 ) { scrollX = 0 ; } int maxWidth = effectiveWidth * ( zoomLevel - 1 ) ;", "gt": "if ( scrollX > = maxWidth ) { \n scrollX = maxWidth ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/43"}
{"input": "<s> @ Override public void computeScroll ( ) { if ( scroller . computeScrollOffset ( ) ) { int oldX = getScrollX ( ) ; int x = scroller . getCurrX ( ) ; scrollTo ( x , 0 ) ; if ( oldX ! = x ) {", "gt": "onScrollChanged ( x , 0 , oldX , 0 ) ; \n postInvalidate ( ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/44"}
{"input": "<s> @ Override protected void onDraw ( Canvas canvas ) { synchronized ( chartPoints ) { canvas . save ( ) ; canvas . drawColor ( backgroundColor ) ; canvas . save ( ) ; clipToGraphArea ( canvas ) ; drawDataSeries ( canvas ) ; drawMarker ( canvas ) ; drawGrid ( canvas ) ; canvas . restore ( ) ; drawSeriesTitles ( canvas ) ; drawXAxis ( canvas ) ; drawYAxis ( canvas ) ; canvas . restore ( ) ;", "gt": "if ( showPointer ) { \n drawPointer ( canvas ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/47"}
{"input": "<s> private void clipToGraphArea ( Canvas canvas ) { int x = getScrollX ( ) + leftBorder ;", "gt": "int y = topBorder ; \n canvas . clipRect ( x , y , x + effectiveWidth , y + effectiveHeight ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/48"}
{"input": "<s> private String getXAxisLabel ( ) { Context context = getContext ( ) ; if ( chartByDistance ) { return switch ( unitSystem ) { case METRIC - > context . getString ( R . string . unit_kilometer ) ; case IMPERIAL_FEET , IMPERIAL_METER - > context . getString ( R . string . unit_mile ) ; case NAUTICAL_IMPERIAL - > context . getString ( R . string . unit_nautical_mile ) ;", "gt": "} ; \n } else { \n return context . getString ( R . string . description_time ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/50"}
{"input": "<s> private double getXAxisInterval ( ) { double interval = maxX / zoomLevel / TARGET_X_AXIS_INTERVALS ; if ( interval < 1 ) { interval = <NUM_LIT> ; } else if ( interval < <NUM_LIT:5> ) { interval = <NUM_LIT:2> ; } else if ( interval < <NUM_LIT:10> ) { interval = <NUM_LIT:5> ;", "gt": "} else { \n interval = ( interval / <NUM_LIT:10> ) * <NUM_LIT:10> ; \n } \n return interval ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/52"}
{"input": "<s> private List < Double > getXAxisMarkerPositions ( double interval ) { List < Double > markers = new ArrayList < > ( ) ; markers . add ( <NUM_LIT> ) ; for ( int i = 1 ; i * interval < maxX ; i + + ) { markers . add ( i * interval ) ; }", "gt": "if ( markers . size ( ) < <NUM_LIT:2> ) { \n markers . add ( maxX ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/53"}
{"input": "<s> private void updateSeries ( ) { synchronized ( chartPoints ) {", "gt": "seriesList . stream ( ) . forEach ( this : : updateSerie ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/56"}
{"input": "<s> private void updateEffectiveDimensionsIfChanged ( int newWidth , int newHeight ) { if ( width ! = newWidth | | height ! = newHeight ) { width = newWidth ;", "gt": "height = newHeight ; \n updateEffectiveDimensions ( ) ; \n updateSeries ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/58"}
{"input": "<s> private Rect getRect ( Paint paint , String string ) { Rect rect = new Rect ( ) ;", "gt": "paint . getTextBounds ( string , 0 , string . length ( ) , rect ) ; \n return rect ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/62"}
{"input": "<s> private boolean allowIfEmpty ( ChartValueSeries chartValueSeries ) { if ( ! chartPoints . isEmpty ( ) ) { return false ;", "gt": "} \n return chartValueSeries . drawIfChartPointHasNoData ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/63"}
{"input": "<s> @ VisibleForTesting public List < Track > getTracks ( ) { ArrayList < Track > tracks = new ArrayList < > ( ) ; try ( Cursor cursor = getTrackCursor ( null , null , TracksColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) { tracks . ensureCapacity ( cursor . getCount ( ) ) ; do { tracks . add ( createTrack ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ; \n } \n } \n return tracks ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/67"}
{"input": "<s> public List < Track > getTracks ( ContentProviderSelectionInterface selection ) { SelectionData selectionData = selection . buildSelection ( ) ; ArrayList < Track > tracks = new ArrayList < > ( ) ; try ( Cursor cursor = getTrackCursor ( selectionData . selection ( ) , selectionData . selectionArgs ( ) , TracksColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) { tracks . ensureCapacity ( cursor . getCount ( ) ) ; do { tracks . add ( createTrack ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ; \n } \n } \n return tracks ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/68"}
{"input": "<s> public Track getTrack ( @ NonNull Track . Id trackId ) { try ( Cursor cursor = getTrackCursor ( TracksColumns . _ID + \" <STR_LIT> \" , new String [ ] { Long . toString ( trackId . id ( ) ) } , null ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrack ( cursor ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/69"}
{"input": "<s> public Track getTrack ( @ NonNull UUID trackUUID ) { String trackUUIDsearch = UUIDUtils . toHex ( trackUUID ) ; try ( Cursor cursor = getTrackCursor ( \" <STR_LIT:(> \" + TracksColumns . UUID + \" <STR_LIT> \" , new String [ ] { trackUUIDsearch } , null ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrack ( cursor ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/70"}
{"input": "<s> public Integer getNextMarkerNumber ( @ NonNull Track . Id trackId ) { String [ ] projection = { MarkerColumns . _ID } ; String selection = MarkerColumns . TRACKID + \" <STR_LIT> \" ; String [ ] selectionArgs = new String [ ] { Long . toString ( trackId . id ( ) ) } ; try ( Cursor cursor = getMarkerCursor ( projection , selection , selectionArgs , MarkerColumns . _ID , - 1 ) ) { if ( cursor ! = null ) {", "gt": "return cursor . getCount ( ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/73"}
{"input": "<s> public Marker getMarker ( @ NonNull Marker . Id markerId ) { try ( Cursor cursor = getMarkerCursor ( null , MarkerColumns . _ID + \" <STR_LIT> \" , new String [ ] { Long . toString ( markerId . id ( ) ) } , MarkerColumns . _ID , 1 ) ) { if ( cursor ! = null & & cursor . moveToFirst ( ) ) {", "gt": "return createMarker ( cursor ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/74"}
{"input": "<s> @ Deprecated @ VisibleForTesting public List < Marker > getMarkers ( Track . Id trackId ) { ArrayList < Marker > markers = new ArrayList < > ( ) ; try ( Cursor cursor = getMarkerCursor ( trackId , null , - 1 ) ) { if ( cursor . moveToFirst ( ) ) { do { markers . add ( createMarker ( cursor ) ) ;", "gt": "} while ( cursor . moveToNext ( ) ) ; \n } \n } \n return markers ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/75"}
{"input": "<s> public Uri insertMarker ( @ NonNull Marker marker ) {", "gt": "marker . setId ( null ) ; \n return contentResolver . insert ( MarkerColumns . CONTENT_URI , createContentValues ( marker ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/76"}
{"input": "<s> private void deleteMarkerPhoto ( Context context , Marker marker ) { if ( marker ! = null & & marker . hasPhoto ( ) ) { Uri uri = marker . getPhotoURI ( ) ; File file = MarkerUtils . buildInternalPhotoFile ( context , marker . getTrackId ( ) , uri ) ; if ( file . exists ( ) ) { File parent = file . getParentFile ( ) ; file . delete ( ) ; if ( parent . listFiles ( ) . length = = 0 ) {", "gt": "parent . delete ( ) ; \n } \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/77"}
{"input": "<s> @ Deprecated private TrackPoint findTrackPointBy ( String selection , String [ ] selectionArgs ) { try ( Cursor cursor = getTrackPointCursor ( null , selection , selectionArgs , TrackPointsColumns . _ID ) ) { if ( cursor ! = null & & cursor . moveToNext ( ) ) {", "gt": "return createTrackPoint ( cursor ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/83"}
{"input": "<s> private static String formatIdListForUri ( long [ ] ids ) { StringBuilder idsPathSegment = new StringBuilder ( ) ; for ( long id : ids ) { if ( idsPathSegment . length ( ) > 0 ) { idsPathSegment . append ( ID_SEPARATOR ) ;", "gt": "} \n idsPathSegment . append ( id ) ; \n } \n return idsPathSegment . toString ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/85"}
{"input": "<s> private int getTotalChanges ( ) { int totalCount ; try ( Cursor cursor = db . rawQuery ( \" <STR_LIT> \" , null ) ) {", "gt": "cursor . moveToNext ( ) ; \n totalCount = cursor . getInt ( 0 ) ; \n } \n return totalCount ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/87"}
{"input": "<s> private void upgradeFrom26to27 ( SQLiteDatabase db ) { db . beginTransaction ( ) ; db . execSQL ( \" <STR_LIT> \" ) ;", "gt": "db . setTransactionSuccessful ( ) ; \n db . endTransaction ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/97"}
{"input": "<s> private void upgradeFrom33to34 ( SQLiteDatabase db ) { db . beginTransaction ( ) ; db . execSQL ( \" <STR_LIT> \" ) ;", "gt": "db . setTransactionSuccessful ( ) ; \n db . endTransaction ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/100"}
{"input": "<s> public static Cadence of ( float value , Duration duration ) { if ( duration . isZero ( ) ) { return zero ( ) ;", "gt": "} \n return new Cadence ( value / ( duration . toMillis ( ) / ( float ) Duration . ofMinutes ( 1 ) . toMillis ( ) ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/101"}
{"input": "<s> public static Distance of ( Double distance_m ) { if ( distance_m = = null ) {", "gt": "return Distance . of ( Double . NaN ) ; \n } else { \n return Distance . of ( ( double ) distance_m ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/102"}
{"input": "<s> @ Nullable public static Distance ofOrNull ( Double distance_m ) { if ( distance_m = = null ) { return null ;", "gt": "} \n return of ( distance_m ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/103"}
{"input": "<s> public static Distance one ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > Distance . ofKilometer ( 1 ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "Distance . ofMile ( 1 ) ; \n case NAUTICAL_IMPERIAL - > \n Distance . ofNauticalMile ( 1 ) ; \n } ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/104"}
{"input": "<s> public double toKM_Miles ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > toKM ( ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "toMI ( ) ; \n case NAUTICAL_IMPERIAL - > \n toNauticalMiles ( ) ; \n } ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/105"}
{"input": "<s> public Builder setDecimalCount ( int decimalCount ) {", "gt": "this . decimalCount = decimalCount ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/108"}
{"input": "<s> public Builder setUnit ( @ Nullable UnitSystem unitSystem ) {", "gt": "this . unitSystem = unitSystem ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/109"}
{"input": "<s> public Builder setThreshold ( double threshold ) {", "gt": "this . threshold = threshold ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/110"}
{"input": "<s> public Location getLocation ( ) { Location location = new Location ( \" \" ) ; location . setTime ( time . toEpochMilli ( ) ) ; if ( hasLocation ( ) ) { location . setLatitude ( latitude ) ; location . setLongitude ( longitude ) ; } if ( hasBearing ( ) ) { location . setBearing ( bearing ) ; } if ( hasAccuracy ( ) ) { location . setAccuracy ( ( float ) accuracy . toM ( ) ) ; }", "gt": "if ( hasAltitude ( ) ) { \n location . setAltitude ( altitude . toM ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/112"}
{"input": "<s> public static Speed of ( Distance distance , Duration duration ) { if ( duration . isZero ( ) ) { return zero ( ) ;", "gt": "} \n return new Speed ( distance . toM ( ) / ( duration . toMillis ( ) / ( double ) Duration . ofSeconds ( 1 ) . toMillis ( ) ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/113"}
{"input": "<s> public static Speed max ( Speed speed1 , Speed speed2 ) { if ( speed1 . greaterThan ( speed2 ) ) { return speed1 ;", "gt": "} \n return speed2 ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/114"}
{"input": "<s> public double to ( UnitSystem unitSystem ) { return switch ( unitSystem ) { case METRIC - > toKMH ( ) ; case IMPERIAL_FEET , IMPERIAL_METER - >", "gt": "toMPH ( ) ; \n case NAUTICAL_IMPERIAL - > \n toKnots ( ) ; \n } ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/116"}
{"input": "<s> public Builder setDecimalCount ( int decimalCount ) {", "gt": "this . decimalCount = decimalCount ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/118"}
{"input": "<s> public Builder setUnit ( @ NonNull UnitSystem unitSystem ) {", "gt": "this . unitSystem = unitSystem ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/119"}
{"input": "<s> public Builder setReportSpeedOrPace ( boolean reportSpeedOrPace ) {", "gt": "this . reportSpeedOrPace = reportSpeedOrPace ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/120"}
{"input": "<s> public static Type getById ( int id ) { for ( Type e : values ( ) ) {", "gt": "if ( e . type_db = = id ) \n return e ; \n } \n throw new RuntimeException ( \" <STR_LIT> \" + id ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/122"}
{"input": "<s> public TrackPoint setType ( @ NonNull Type type ) {", "gt": "this . type = type ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/123"}
{"input": "<s> public TrackPoint setLatitude ( double latitude ) {", "gt": "this . latitude = latitude ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/124"}
{"input": "<s> public TrackPoint setLongitude ( double longitude ) {", "gt": "this . longitude = longitude ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/125"}
{"input": "<s> public TrackPoint setAltitudeGain ( Float altitudeGain_m ) {", "gt": "this . altitudeGain_m = altitudeGain_m ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/126"}
{"input": "<s> public TrackPoint setAltitudeLoss ( Float altitudeLoss_m ) {", "gt": "this . altitudeLoss_m = altitudeLoss_m ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/127"}
{"input": "<s> @ VisibleForTesting public TrackPoint setAltitude ( double altitude_m ) {", "gt": "this . altitude = Altitude . WGS84 . of ( altitude_m ) ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/128"}
{"input": "<s> public TrackPoint setAltitude ( Altitude altitude ) {", "gt": "this . altitude = altitude ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/129"}
{"input": "<s> public TrackPoint setSpeed ( Speed speed ) {", "gt": "this . speed = speed ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/130"}
{"input": "<s> public TrackPoint setBearing ( Float bearing ) {", "gt": "this . bearing = bearing ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/131"}
{"input": "<s> public TrackPoint setHorizontalAccuracy ( Distance horizontalAccuracy ) {", "gt": "this . horizontalAccuracy = horizontalAccuracy ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/132"}
{"input": "<s> public TrackPoint setVerticalAccuracy ( Distance horizontalAccuracy ) {", "gt": "this . verticalAccuracy = horizontalAccuracy ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/133"}
{"input": "<s> @ NonNull public Distance distanceToPrevious ( @ NonNull TrackPoint previous ) { if ( hasSensorDistance ( ) ) { return getSensorDistance ( ) ;", "gt": "} \n return distanceToPreviousFromLocation ( previous ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/134"}
{"input": "<s> @ NonNull public Distance distanceToPreviousFromLocation ( @ NonNull TrackPoint previous ) { if ( ! hasLocation ( ) | | hasLocation ( ) ! = previous . hasLocation ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n return Distance . of ( getLocation ( ) . distanceTo ( previous . getLocation ( ) ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/135"}
{"input": "<s> public TrackPoint setSensorDistance ( Distance distance_m ) {", "gt": "this . sensorDistance = distance_m ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/136"}
{"input": "<s> public TrackPoint setHeartRate ( HeartRate heartRate ) {", "gt": "this . heartRate = heartRate ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/138"}
{"input": "<s> public TrackPoint setCadence ( Cadence cadence ) {", "gt": "this . cadence = cadence ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/139"}
{"input": "<s> public TrackPoint setPower ( Power power ) {", "gt": "this . power = power ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/140"}
{"input": "<s> @ Nullable @ Override public String getType ( @ NonNull Uri uri ) { String mime = getTypeMime ( uri ) ;", "gt": "if ( mime ! = null ) { \n return mime ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/143"}
{"input": "<s> public void registerTrackDataListener ( final Listener trackDataListener ) { handler . post ( ( ) - > { listeners . add ( trackDataListener ) ;", "gt": "if ( isStarted ( ) ) { \n loadDataForListener ( trackDataListener ) ; \n } \n } ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/145"}
{"input": "<s> private void resetSamplingState ( ) { numLoadedPoints = 0 ; firstSeenTrackPointId = null ;", "gt": "lastSeenTrackPointId = null ; \n trackStatisticsUpdater = new TrackStatisticsUpdater ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/149"}
{"input": "<s> @ Override public boolean hasNext ( ) { if ( cursor = = null ) { return false ;", "gt": "} \n return ! cursor . isLast ( ) & & ! cursor . isAfterLast ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/150"}
{"input": "<s> @ Override @ NonNull public TrackPoint next ( ) { if ( cursor = = null | | ! cursor . moveToNext ( ) ) { throw new NoSuchElementException ( ) ;", "gt": "} \n return ContentProviderUtils . fillTrackPoint ( cursor , indexes ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/151"}
{"input": "<s> @ Override public void close ( ) { if ( cursor ! = null ) { cursor . close ( ) ;", "gt": "cursor = null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/152"}
{"input": "<s> public TrackSelection addDateRange ( Instant from , Instant to ) { this . from = from ;", "gt": "this . to = to ; \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/153"}
{"input": "<s> public TrackSelection addTrackId ( Track . Id trackId ) { if ( ! this . trackIds . contains ( trackId ) ) { this . trackIds . add ( trackId ) ;", "gt": "} \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/154"}
{"input": "<s> public TrackSelection addActivityType ( String activityType ) { if ( ! this . categories . contains ( activityType ) ) { this . categories . add ( activityType ) ;", "gt": "} \n return this ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/155"}
{"input": "<s> public static UUID fromBytes ( byte [ ] bytes ) { ByteBuffer byteBuffer = ByteBuffer . wrap ( bytes ) ; long mostSignificant = byteBuffer . getLong ( ) ;", "gt": "long lestSignificant = byteBuffer . getLong ( ) ; \n return new UUID ( mostSignificant , lestSignificant ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/156"}
{"input": "<s> public static byte [ ] toBytes ( @ NonNull UUID uuid ) { ByteBuffer byteBuffer = ByteBuffer . allocate ( <NUM_LIT:16> ) ; byteBuffer . putLong ( uuid . getMostSignificantBits ( ) ) ;", "gt": "byteBuffer . putLong ( uuid . getLeastSignificantBits ( ) ) ; \n return byteBuffer . array ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/157"}
{"input": "<s> private static int getPosition ( Context context , ActivityType activityType ) { if ( activityType = = null ) { return - 1 ;", "gt": "} \n return activityTypes . indexOf ( activityType ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/160"}
{"input": "<s> @ NonNull @ Override public Dialog onCreateDialog ( Bundle savedInstanceState ) { Dialog dialog = super . onCreateDialog ( savedInstanceState ) ;", "gt": "dialog . setTitle ( R . string . track_edit_activity_type_hint ) ; \n return dialog ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/161"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/163"}
{"input": "<s> @ Override public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long id ) {", "gt": "chooseActivityTypeCaller . onChooseActivityTypeDone ( activityTypes . get ( position ) ) ; \n dismiss ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/164"}
{"input": "<s> public void setSelected ( int position ) {", "gt": "selected = position ; \n notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/165"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = StatisticsRecordedBinding . inflate ( inflater , container , false ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/168"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n loadStatistics ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/169"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/170"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/171"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = StatisticsRecordingBinding . inflate ( inflater , container , false ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/174"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/176"}
{"input": "<s> @ Override public void onStop ( ) {", "gt": "super . onStop ( ) ; \n trackRecordingServiceConnection . unbind ( getContext ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/177"}
{"input": "<s> @ Override public void onDestroyView ( ) { super . onDestroyView ( ) ;", "gt": "viewHolders . clear ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/178"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n trackRecordingServiceConnection = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/179"}
{"input": "<s> private void updateDataOnUI ( ) { if ( isResumed ( ) ) {", "gt": "viewHolders . forEach ( i - > i . onChanged ( unitSystem , recordingData ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/181"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "helpBinding = HelpBinding . inflate ( getLayoutInflater ( ) ) ; \n return helpBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/183"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = IntroductionBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/184"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/185"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = OsmDashboardBinding . inflate ( inflater , container , false ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/187"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/188"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = WelcomeBinding . inflate ( inflater , container , false ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/189"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/190"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ;", "gt": "outState . putString ( EXTRA_TITLE , title ) ; \n outState . putStringArrayList ( EXTRA_ERROR_LIST , errorList ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/193"}
{"input": "<s> public void close ( ) {", "gt": "printWriter . flush ( ) ; \n printWriter = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/196"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "conflictsQueue . clear ( ) ; \n exportTasks . clear ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/199"}
{"input": "<s> private void nextExport ( @ Nullable ExportTask exportTask ) { exportTasks . remove ( exportTask ) ; setProgress ( ) ; if ( exportTasks . isEmpty ( ) ) {", "gt": "onExportEnded ( ) ; \n return ; \n } \n export ( exportTasks . get ( 0 ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/204"}
{"input": "<s> @ Override public void onExportSuccess ( ExportTask exportTask ) { if ( exportFileExists ( exportTask ) ) { trackExportOverwrittenCount + + ;", "gt": "} else { \n trackExportSuccessCount + + ; \n } \n nextExport ( exportTask ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/205"}
{"input": "<s> public void overwrite ( ) { export ( exportTask , ConflictResolutionStrategy . CONFLICT_OVERWRITE ) ; if ( viewBinding . exportProgressApplyToAll . isChecked ( ) ) {", "gt": "autoConflict = ConflictResolutionStrategy . CONFLICT_OVERWRITE ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/208"}
{"input": "<s> public void skip ( ) { export ( exportTask , ConflictResolutionStrategy . CONFLICT_SKIP ) ; if ( viewBinding . exportProgressApplyToAll . isChecked ( ) ) {", "gt": "autoConflict = ConflictResolutionStrategy . CONFLICT_SKIP ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/209"}
{"input": "<s> @ Override public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( filename ) ;", "gt": "dest . writeString ( trackFileFormat . name ( ) ) ; \n dest . writeTypedList ( trackIds ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/213"}
{"input": "<s> @ Override public boolean writeTrack ( List < Track > tracks , @ NonNull OutputStream outputStream ) { try { prepare ( outputStream ) ; writeHeader ( ) ; for ( Track track : tracks ) { writeMarkers ( track ) ; } for ( Track track : tracks ) { writeTrackPoints ( track ) ; } writeFooter ( ) ; close ( ) ; return true ;", "gt": "} catch ( InterruptedException e ) { \n Log . e ( TAG , \" <STR_LIT> \" , e ) ; \n return false ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/214"}
{"input": "<s> public void close ( ) {", "gt": "printWriter . flush ( ) ; \n printWriter = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/215"}
{"input": "<s> @ VisibleForTesting void close ( ) {", "gt": "printWriter . flush ( ) ; \n printWriter = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/216"}
{"input": "<s> private void writeFooter ( ) {", "gt": "printWriter . println ( \" <STR_LIT> \" ) ; \n printWriter . println ( \" <STR_LIT> \" ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/217"}
{"input": "<s> private void writeEndTrack ( ) {", "gt": "printWriter . println ( \" <STR_LIT> \" ) ; \n printWriter . println ( \" <STR_LIT> \" ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/221"}
{"input": "<s> @ VisibleForTesting void writeOpenSegment ( ) { printWriter . println ( \" <STR_LIT> \" ) ; trackpointTypeList . clear ( ) ; speedList . clear ( ) ; distanceList . clear ( ) ; powerList . clear ( ) ; cadenceList . clear ( ) ; heartRateList . clear ( ) ;", "gt": "altitudeGainList . clear ( ) ; \n altitudeLossList . clear ( ) ; \n accuracyHorizontal . clear ( ) ; \n accuracyVertical . clear ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/222"}
{"input": "<s> private float getHeading ( Track . Id trackId , Location location ) { TrackPoint . Id trackPointId = contentProviderUtils . getTrackPointId ( trackId , location ) ; if ( trackPointId = = null ) { return location . getBearing ( ) ; } TrackPoint viewLocation = contentProviderUtils . getLastValidTrackPoint ( trackId ) ;", "gt": "if ( viewLocation ! = null ) { \n return viewLocation . bearingTo ( location ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/225"}
{"input": "<s> private static String getCoordinates ( Location location , String separator ) { String result = location . getLongitude ( ) + separator + location . getLatitude ( ) ;", "gt": "if ( location . hasAltitude ( ) ) { \n result + = separator + location . getAltitude ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/226"}
{"input": "<s> private void writePlacemarkerStyle ( ) { printWriter . println ( \" <STR_LIT> <STR_LIT:\\\"> \" + KMLTrackExporter . MARKER_STYLE + \" <STR_LIT:\\\"> <STR_LIT> \" ) ;", "gt": "printWriter . println ( \" <STR_LIT> \" ) ; \n printWriter . println ( \" <STR_LIT> \" ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/230"}
{"input": "<s> protected DocumentFile configureDirectoryChooserIntent ( Intent intent ) {", "gt": "intent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ) ; \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/235"}
{"input": "<s> @ Override protected Intent createNextActivityIntent ( Uri directoryUri ) { Intent intent = IntentUtils . newIntent ( this , ImportActivity . class ) ;", "gt": "intent . putExtra ( ImportActivity . EXTRA_DIRECTORY_URI_KEY , directoryUri ) ; \n return intent ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/236"}
{"input": "<s> @ Override public void startElement ( String uri , String localName , String tag , Attributes attributes ) { switch ( tag ) { case TAG_MARKER : onMarkerStart ( attributes ) ; break ; case TAG_TRACK : trackImporter . newTrack ( ) ; break ; case TAG_TRACK_SEGMENT : break ;", "gt": "case TAG_TRACK_POINT : \n onTrackPointStart ( attributes ) ; \n break ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/243"}
{"input": "<s> private void onTrackPointStart ( Attributes attributes ) { latitude = attributes . getValue ( ATTRIBUTE_LAT ) ; longitude = attributes . getValue ( ATTRIBUTE_LON ) ; altitude = null ; time = null ; speed = null ; gain = null ; loss = null ; sensorDistance = null ; accuracyHorizontal = null ;", "gt": "accuracyVertical = null ; \n power = null ; \n heartrate = null ; \n cadence = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/245"}
{"input": "<s> private void onMarkerStart ( Attributes attributes ) { name = null ; description = null ; photoUrl = null ; latitude = attributes . getValue ( ATTRIBUTE_LAT ) ;", "gt": "longitude = attributes . getValue ( ATTRIBUTE_LON ) ; \n altitude = null ; \n time = null ; \n markerType = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/246"}
{"input": "<s> private void onFileEnd ( ) {", "gt": "trackImporter . addMarkers ( markers ) ; \n trackImporter . finish ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/247"}
{"input": "<s> public static void enqueue ( Context context , ImportServiceResultReceiver receiver , Uri uri ) { Intent intent = new Intent ( context , JobService . class ) ; intent . putExtra ( EXTRA_RECEIVER , receiver ) ;", "gt": "intent . putExtra ( EXTRA_URI , uri ) ; \n enqueueWork ( context , ImportService . class , JOB_ID , intent ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/251"}
{"input": "<s> @ Override protected void onHandleWork ( @ NonNull Intent intent ) { resultReceiver = intent . getParcelableExtra ( EXTRA_RECEIVER ) ;", "gt": "Uri uri = intent . getParcelableExtra ( EXTRA_URI ) ; \n importFile ( DocumentFile . fromSingleUri ( this , uri ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/252"}
{"input": "<s> LiveData < Summary > getImportData ( List < DocumentFile > documentFiles ) { if ( importData = = null ) {", "gt": "importData = new MutableLiveData < > ( ) ; \n loadData ( documentFiles ) ; \n } \n return importData ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/254"}
{"input": "<s> private void onMarkerStart ( ) { name = null ; description = null ; activityTypeLocalized = null ; photoUrl = null ;", "gt": "latitude = null ; \n longitude = null ; \n altitude = null ; \n markerType = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/257"}
{"input": "<s> private void onMarkerLocationEnd ( ) { if ( content ! = null ) { String [ ] parts = content . trim ( ) . split ( \" <STR_LIT:U+002C> \" ) ; if ( parts . length ! = <NUM_LIT:2> & & parts . length ! = <NUM_LIT:3> ) { return ; }", "gt": "longitude = parts [ 0 ] ; \n latitude = parts [ 1 ] ; \n altitude = parts . length = = <NUM_LIT:3> ? parts [ <NUM_LIT:2> ] : null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/258"}
{"input": "<s> private void onTrackSegmentStart ( ) { locationList . clear ( ) ; whenList . clear ( ) ; trackpointTypeList . clear ( ) ; sensorSpeedList . clear ( ) ; sensorDistanceList . clear ( ) ; sensorHeartRateList . clear ( ) ; sensorCadenceList . clear ( ) ; sensorPowerList . clear ( ) ;", "gt": "altitudeGainList . clear ( ) ; \n altitudeLossList . clear ( ) ; \n accuracyHorizontal . clear ( ) ; \n accuracyVertical . clear ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/259"}
{"input": "<s> private void onFileEnd ( ) {", "gt": "trackImporter . addMarkers ( markers ) ; \n trackImporter . finish ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/261"}
{"input": "<s> @ NonNull public List < Track . Id > importFile ( Uri fileUri ) throws IOException { List < Track . Id > trackIds = findAndParseKmlFile ( fileUri ) ; List < Track . Id > trackIdsWithImages = new ArrayList < > ( ) ; for ( Track . Id trackId : trackIds ) { if ( copyKmzImages ( fileUri , trackId ) ) { trackIdsWithImages . add ( trackId ) ; deleteOrphanImages ( trackId ) ; } else {", "gt": "return new ArrayList < > ( ) ; \n } \n } \n return trackIdsWithImages ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/262"}
{"input": "<s> private boolean hasImageExtension ( String fileName ) { if ( fileName = = null ) { return false ; } String fileExt = FileUtils . getExtension ( fileName . toLowerCase ( ) ) ;", "gt": "if ( fileExt = = null ) { \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/263"}
{"input": "<s> void newTrack ( ) { if ( track ! = null ) { finishTrack ( ) ;", "gt": "} \n track = null ; \n trackPoints . clear ( ) ; \n markers . clear ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/265"}
{"input": "<s> void finish ( ) { if ( track ! = null ) {", "gt": "finishTrack ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/266"}
{"input": "<s> private String getInternalPhotoUrl ( @ NonNull Track . Id trackId , @ NonNull String externalPhotoUrl ) { String importFileName = KmzTrackImporter . importNameForFilename ( externalPhotoUrl ) ; File file = MarkerUtils . buildInternalPhotoFile ( context , trackId , Uri . parse ( importFileName ) ) ; if ( file ! = null ) {", "gt": "Uri photoUri = FileUtils . getUriForFile ( context , file ) ; \n return \" \" + photoUri ; \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/267"}
{"input": "<s> @ NonNull public List < Track . Id > importFile ( Context context , Uri uri ) throws ImportParserException , ImportAlreadyExistsException , IOException { try ( InputStream inputStream = context . getContentResolver ( ) . openInputStream ( uri ) ) {", "gt": "return importFile ( inputStream ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/268"}
{"input": "<s> protected void execute ( TrackRecordingService service ) { Track . Id trackId = service . startNewTrack ( ) ; if ( trackId ! = null ) { Bundle bundle = getIntent ( ) . getExtras ( ) ; if ( bundle ! = null ) { updateTrackMetadata ( trackId , bundle ) ; if ( PreferencesUtils . isPublicAPIDashboardEnabled ( ) ) {", "gt": "startDashboardAPI ( trackId , bundle ) ; \n } \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/274"}
{"input": "<s> protected void execute ( TrackRecordingService service ) { RecordingData recordingData = service . getRecordingDataObservable ( ) . getValue ( ) ; Track . Id trackId = null ; if ( recordingData ! = null & & recordingData . track ( ) ! = null ) { trackId = recordingData . track ( ) . getId ( ) ; }", "gt": "service . endCurrentTrack ( ) ; \n if ( trackId ! = null ) { \n ExportUtils . postWorkoutExport ( this , trackId ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/277"}
{"input": "<s> private synchronized boolean isSameBluetoothDevice ( String address ) { if ( bluetoothGatt = = null ) { return false ;", "gt": "} \n return address . equals ( bluetoothGatt . getDevice ( ) . getAddress ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/279"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { AtmosphericPressure value = parseEnvironmentalSensing ( characteristic ) ; if ( value = = null )", "gt": "return ; \n observer . onChange ( new Raw < > ( value ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/280"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { Pair < WheelData , BluetoothHandlerCyclingCadence . CrankData > data = parseCyclingCrankAndWheel ( address , sensorName , characteristic ) ; if ( data . first ! = null ) {", "gt": "observer . onChange ( new Raw < > ( data . first ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/282"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { Data cyclingPower = parseCyclingPower ( characteristic ) ; if ( cyclingPower ! = null ) {", "gt": "observer . onChange ( new Raw < > ( cyclingPower ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/283"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) { HeartRate heartRate = parseHeartRate ( characteristic ) ; if ( heartRate ! = null ) {", "gt": "observer . onChange ( new Raw < > ( heartRate ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/284"}
{"input": "<s> @ Override public void handlePayload ( SensorManager . SensorDataChangedObserver observer , @ NonNull ServiceMeasurementUUID serviceMeasurementUUID , String sensorName , String address , BluetoothGattCharacteristic characteristic ) {", "gt": "Data data = parseRunningSpeedAndCadence ( sensorName , characteristic ) ; \n observer . onChange ( new Raw < > ( data ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/285"}
{"input": "<s> public static BluetoothAdapter getAdapter ( Context context ) { BluetoothManager bluetoothManager = ( BluetoothManager ) context . getSystemService ( Context . BLUETOOTH_SERVICE ) ; if ( bluetoothManager = = null ) { Log . i ( TAG , \" <STR_LIT> \" ) ;", "gt": "return null ; \n } else { \n return bluetoothManager . getAdapter ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/288"}
{"input": "<s> public void start ( Context context , Handler handler ) { this . context = context ;", "gt": "this . handler = handler ; \n PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/292"}
{"input": "<s> private void onDisconnect ( ) { if ( driver = = null ) return ;", "gt": "driver . disconnect ( ) ; \n listener . onDisconnect ( new AggregatorBarometer ( \" <STR_LIT> \" , null ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/294"}
{"input": "<s> public final void add ( Raw < Input > current ) {", "gt": "computeValue ( current ) ; \n previous = current ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/296"}
{"input": "<s> public Output getValue ( ) { if ( ! hasValue ( ) ) { return null ; }", "gt": "if ( isRecent ( ) ) { \n return value ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/297"}
{"input": "<s> private boolean isRecent ( ) { if ( previous = = null ) { return false ;", "gt": "} \n return Instant . now ( ) . isBefore ( previous . time ( ) . plus ( BluetoothRemoteSensorManager . MAX_SENSOR_DATE_SET_AGE ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/298"}
{"input": "<s> @ Override public void reset ( ) { if ( value ! = null ) {", "gt": "value = new Data ( value . distance , Distance . of ( 0 ) , value . speed ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/299"}
{"input": "<s> @ Override public void computeValue ( Raw < BluetoothHandlerRunningSpeedAndCadence . Data > current ) { if ( previous ! = null ) { Distance distance = null ; if ( previous . value ( ) . totalDistance ( ) ! = null & & current . value ( ) . totalDistance ( ) ! = null ) { distance = current . value ( ) . totalDistance ( ) . minus ( previous . value ( ) . totalDistance ( ) ) ; if ( value ! = null ) { distance = distance . plus ( value . distance ) ;", "gt": "} \n } \n value = new Data ( current . value ( ) . speed ( ) , current . value ( ) . cadence ( ) , distance ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/301"}
{"input": "<s> @ Override public void reset ( ) { if ( value ! = null ) {", "gt": "value = new Data ( value . speed , value . cadence , Distance . of ( 0 ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/302"}
{"input": "<s> public Pair < HeartRate , String > getHeartRate ( ) { if ( heartRate ! = null ) { return new Pair < > ( heartRate . getValue ( ) , heartRate . getSensorNameOrAddress ( ) ) ;", "gt": "} \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/304"}
{"input": "<s> @ Override public void onConnect ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . add ( aggregator ) ; \n observer . onChange ( new SensorDataSet ( sensorDataSet ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/308"}
{"input": "<s> @ Override public void onChange ( Raw < ? > data ) {", "gt": "sensorDataSet . update ( data ) ; \n observer . onChange ( new SensorDataSet ( sensorDataSet ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/309"}
{"input": "<s> @ Override public void onDisconnect ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . add ( aggregator ) ; \n observer . onChange ( new SensorDataSet ( sensorDataSet ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/310"}
{"input": "<s> @ Override public void onRemove ( Aggregator < ? , ? > aggregator ) {", "gt": "sensorDataSet . remove ( aggregator ) ; \n observer . onChange ( new SensorDataSet ( sensorDataSet ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/311"}
{"input": "<s> public void stop ( Context context ) { bluetoothSensorManager . stop ( context ) ; bluetoothSensorManager = null ; altitudeSumManager . stop ( context ) ;", "gt": "altitudeSumManager = null ; \n gpsManager . stop ( context ) ; \n gpsManager = null ; \n sensorDataSet . clear ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/312"}
{"input": "<s> public SensorDataSet fill ( TrackPoint trackPoint ) {", "gt": "sensorDataSet . fillTrackPoint ( trackPoint ) ; \n return new SensorDataSet ( sensorDataSet ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/313"}
{"input": "<s> public void reset ( ) { if ( bluetoothSensorManager = = null | | altitudeSumManager = = null ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" ) ; \n return ; \n } \n sensorDataSet . reset ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/314"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , @ Nullable String key ) { if ( gpsManager ! = null ) { gpsManager . onSharedPreferenceChanged ( sharedPreferences , key ) ;", "gt": "bluetoothSensorManager . onSharedPreferenceChanged ( sharedPreferences , key ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/315"}
{"input": "<s> public static long diff ( long a , long b , final long UINT_MAX ) { if ( a < 0 | | b < 0 ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; } if ( a > UINT_MAX | | b > UINT_MAX ) { throw new RuntimeException ( \" <STR_LIT> \" ) ; }", "gt": "if ( a > = b ) { \n return a - b ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/316"}
{"input": "<s> @ Override public void onStart ( String utteranceId ) { int result = audioManager . requestAudioFocus ( audioFocusChangeListener , AUDIO_STREAM , AudioManager . AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK ) ; if ( result = = AudioManager . AUDIOFOCUS_REQUEST_FAILED ) {", "gt": "Log . w ( TAG , \" <STR_LIT> \" ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/318"}
{"input": "<s> @ Override public void onDone ( String utteranceId ) { int result = audioManager . abandonAudioFocus ( audioFocusChangeListener ) ; if ( result = = AudioManager . AUDIOFOCUS_REQUEST_FAILED ) {", "gt": "Log . w ( TAG , \" <STR_LIT> \" ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/319"}
{"input": "<s> public void stop ( ) { if ( tts ! = null ) { tts . shutdown ( ) ; tts = null ; }", "gt": "if ( ttsFallback ! = null ) { \n ttsFallback . release ( ) ; \n ttsFallback = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/320"}
{"input": "<s> public void start ( @ Nullable TrackStatistics trackStatistics ) { voiceAnnouncement = new TTSManager ( context ) ;", "gt": "voiceAnnouncement . start ( ) ; \n update ( trackStatistics ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/321"}
{"input": "<s> void update ( @ Nullable TrackStatistics trackStatistics ) { this . trackStatistics = trackStatistics ;", "gt": "updateNextDuration ( ) ; \n updateNextTaskDistance ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/322"}
{"input": "<s> private boolean shouldNotAnnounce ( ) { if ( voiceAnnouncement = = null ) { Log . e ( TAG , \" <STR_LIT> \" ) ; return true ; } if ( ! PreferencesUtils . shouldVoiceAnnouncementOnDeviceSpeaker ( ) & & MediaRouter . getInstance ( context ) . getSelectedRoute ( ) . isDeviceSpeaker ( ) ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ; \n return true ; \n } \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/323"}
{"input": "<s> public void stop ( ) { if ( voiceAnnouncement ! = null ) { voiceAnnouncement . stop ( ) ;", "gt": "voiceAnnouncement = null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/325"}
{"input": "<s> public void setFrequency ( Duration frequency ) {", "gt": "this . totalTimeFrequency = frequency ; \n update ( this . trackStatistics ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/326"}
{"input": "<s> public void setFrequency ( Distance frequency ) {", "gt": "this . distanceFrequency = frequency ; \n update ( this . trackStatistics ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/327"}
{"input": "<s> @ SuppressWarnings ( { \" <STR_LIT> \" } ) public void stop ( Context context ) { if ( isStarted ( ) ) { LocationManagerCompat . removeUpdates ( locationManager , this ) ; } locationManager = null ; this . context = null ;", "gt": "handler = null ; \n gpsStatusManager . stop ( ) ; \n gpsStatusManager = null ; \n trackPointCreator = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/333"}
{"input": "<s> public void stop ( ) { stopTimer ( ) ; client . onGpsStatusChanged ( GpsStatusValue . GPS_NONE ) ;", "gt": "client = null ; \n handler = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/334"}
{"input": "<s> public void onNewTrackPoint ( @ NonNull final TrackPoint trackPoint ) {", "gt": "lastTrackPoint = trackPoint ; \n determineGpsStatusOnTrackpoint ( trackPoint ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/336"}
{"input": "<s> void determineGpsStatusByTime ( Instant now ) { if ( lastTrackPoint = = null ) { return ; } if ( signalLostThreshold . minus ( Duration . between ( lastTrackPoint . getTime ( ) , now ) ) . isNegative ( ) ) { if ( gpsStatus ! = GpsStatusValue . GPS_SIGNAL_LOST ) { setGpsStatus ( GpsStatusValue . GPS_SIGNAL_LOST ) ;", "gt": "} \n return ; \n } \n scheduleTimer ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/337"}
{"input": "<s> public void onGpsEnabled ( ) { if ( gpsStatus = = GpsStatusValue . GPS_ENABLED ) { return ; } LocationManager locationManager = ( LocationManager ) context . getSystemService ( Context . LOCATION_SERVICE ) ; if ( locationManager ! = null & & locationManager . isProviderEnabled ( LocationManager . GPS_PROVIDER ) ) { setGpsStatus ( GpsStatusValue . GPS_ENABLED ) ;", "gt": "scheduleTimer ( ) ; \n } else { \n onGpsDisabled ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/338"}
{"input": "<s> public void onGpsDisabled ( ) { if ( gpsStatus = = GpsStatusValue . GPS_DISABLED ) { return ;", "gt": "} \n setGpsStatus ( GpsStatusValue . GPS_DISABLED ) ; \n lastTrackPoint = null ; \n stopTimer ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/339"}
{"input": "<s> private void setGpsStatus ( GpsStatusValue current ) { gpsStatus = current ; if ( client ! = null ) {", "gt": "client . onGpsStatusChanged ( current ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/340"}
{"input": "<s> private void scheduleTimer ( ) {", "gt": "handler . removeCallbacks ( gpsStatusTimer ) ; \n handler . postDelayed ( gpsStatusTimer , signalLostThreshold . toMillis ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/341"}
{"input": "<s> public synchronized void start ( @ NonNull Context context , @ NonNull Handler handler ) {", "gt": "this . context = context ; \n sensorManager . start ( context , handler ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/343"}
{"input": "<s> public void stop ( ) {", "gt": "sensorManager . stop ( context ) ; \n this . context = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/345"}
{"input": "<s> public synchronized TrackPoint createSegmentEnd ( ) { TrackPoint segmentEnd = TrackPoint . createSegmentEndWithTime ( createNow ( ) ) ; addSensorData ( segmentEnd ) ;", "gt": "reset ( ) ; \n return segmentEnd ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/347"}
{"input": "<s> public synchronized TrackPoint createIdle ( ) { TrackPoint idle = new TrackPoint ( TrackPoint . Type . IDLE , createNow ( ) ) ; addSensorData ( idle ) ;", "gt": "reset ( ) ; \n return idle ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/348"}
{"input": "<s> public String getTrackCategory ( ) { if ( track = = null ) { return \" \" ;", "gt": "} \n return track . getActivityTypeLocalized ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/349"}
{"input": "<s> @ NonNull public TrackStatistics getTrackStatistics ( ) { if ( track = = null ) { return new TrackStatistics ( ) ;", "gt": "} \n return track . getTrackStatistics ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/350"}
{"input": "<s> void endCurrentTrack ( ) { TrackPoint segmentEnd = trackPointCreator . createSegmentEnd ( ) ;", "gt": "insertTrackPoint ( segmentEnd , true ) ; \n trackId = null ; \n trackStatisticsUpdater = null ; \n reset ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/355"}
{"input": "<s> @ VisibleForTesting ( otherwise = VisibleForTesting . PACKAGE_PRIVATE ) public void onIdle ( ) { Log . d ( TAG , \" <STR_LIT> \" ) ;", "gt": "onNewTrackPoint ( trackPointCreator . createIdle ( ) ) ; \n idleObserver . onIdle ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/356"}
{"input": "<s> public void resumeTrack ( Track . Id trackId ) { if ( ! trackRecordingManager . resumeExistingTrack ( trackId ) ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return ;", "gt": "} \n Log . i ( TAG , \" <STR_LIT> \" ) ; \n updateRecordingStatus ( RecordingStatus . record ( trackId ) ) ; \n startRecording ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/361"}
{"input": "<s> private void startRecording ( ) { handler . postDelayed ( updateRecordingData , RECORDING_DATA_UPDATE_INTERVAL . toMillis ( ) ) ;", "gt": "startSensors ( ) ; \n voiceAnnouncementManager . start ( trackRecordingManager . getTrackStatistics ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/362"}
{"input": "<s> public void tryStartSensors ( ) { if ( isSensorStarted ( ) ) return ;", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ; \n startSensors ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/363"}
{"input": "<s> public Marker . Id insertMarker ( String name , String category , String description , String photoUrl ) { if ( ! isRecording ( ) ) { return null ;", "gt": "} \n return trackRecordingManager . insertMarker ( name , category , description , photoUrl ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/367"}
{"input": "<s> private void updateRecordingStatus ( RecordingStatus status ) { Log . i ( TAG , \" <STR_LIT> \" + recordingStatus + \" <STR_LIT> \" + status ) ;", "gt": "recordingStatus = status ; \n recordingStatusObservable . postValue ( recordingStatus ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/369"}
{"input": "<s> @ Override public void onServiceDisconnected ( ComponentName className ) {", "gt": "Log . i ( TAG , \" <STR_LIT> \" ) ; \n setTrackRecordingService ( null ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/372"}
{"input": "<s> public void unbindAndStop ( Context context ) {", "gt": "unbind ( context ) ; \n stopService ( context ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/375"}
{"input": "<s> private void setTrackRecordingService ( TrackRecordingService value ) { trackRecordingService = value ; if ( value ! = null ) {", "gt": "callback . onConnected ( value , this ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/376"}
{"input": "<s> public void stopRecording ( @ NonNull Context context ) { if ( trackRecordingService = = null ) { Log . e ( TAG , \" <STR_LIT> \" ) ;", "gt": "} else { \n trackRecordingService . endCurrentTrack ( ) ; \n } \n unbindAndStop ( context ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/377"}
{"input": "<s> void updateContent ( String content ) {", "gt": "notificationBuilder . setSubText ( content ) ; \n updateNotification ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/379"}
{"input": "<s> @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( PreferencesUtils . isKey ( R . string . stats_units_key , key ) ) {", "gt": "setUnitSystem ( PreferencesUtils . getUnitSystem ( ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/380"}
{"input": "<s> public void updateUI ( ActivityType activityType ) { updateIcon ( activityType ) ;", "gt": "textView . setText ( getActivity ( ) . getString ( activityType . getLocalizedStringId ( ) ) ) ; \n textView . clearFocus ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/385"}
{"input": "<s> public boolean add ( String address , String name ) { Device device = new Device ( address , name ) ; if ( ! devices . contains ( device ) ) { devices . add ( device ) ; return true ; } else { for ( Device currentDevice : devices ) { if ( currentDevice . address . equals ( address ) ) { currentDevice . name = name ; return true ;", "gt": "} \n } \n } \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/388"}
{"input": "<s> public void addAll ( List < BluetoothDevice > bluetoothDevices ) { boolean dataSetChanged = bluetoothDevices . stream ( ) . anyMatch ( bluetoothDevice - > add ( bluetoothDevice . getAddress ( ) , bluetoothDevice . getName ( ) ) ) ;", "gt": "if ( dataSetChanged ) \n notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/389"}
{"input": "<s> private void setValue ( String value ) { final boolean changed = ! TextUtils . equals ( this . value , value ) ; if ( changed | | ! valueSet ) { this . value = value ; valueSet = true ; persistString ( value ) ;", "gt": "if ( changed ) { \n notifyChanged ( ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/392"}
{"input": "<s> @ Override public void onScanResult ( int callbackType , ScanResult result ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" + result . getDevice ( ) . getName ( ) + \" \" + result ) ; \n onBatchScanResults ( List . of ( result ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/393"}
{"input": "<s> @ Override public void onScanFailed ( int errorCode ) { super . onScanFailed ( errorCode ) ; Log . e ( TAG , \" <STR_LIT> \" + errorCode ) ;", "gt": "Toast . makeText ( getContext ( ) , R . string . sensor_could_not_scan , Toast . LENGTH_LONG ) . show ( ) ; \n dismiss ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/394"}
{"input": "<s> @ Override protected void onPrepareDialogBuilder ( AlertDialog . Builder builder ) { super . onPrepareDialogBuilder ( builder ) ; builder . setSingleChoiceItems ( listAdapter , selectedEntryIndex , ( dialog , which ) - > { selectedEntryIndex = which ; BluetoothLeSensorPreferenceDialog . this . onClick ( dialog , DialogInterface . BUTTON_POSITIVE ) ;", "gt": "dialog . dismiss ( ) ; \n } ) ; \n builder . setIcon ( bluetoothIcon ) ; \n builder . setPositiveButton ( null , null ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/396"}
{"input": "<s> @ Override public void onDialogClosed ( boolean positiveResult ) { if ( scanner ! = null ) { scanner . stopScan ( scanCallback ) ; } if ( positiveResult & & selectedEntryIndex > = 0 ) { String value = listAdapter . get ( selectedEntryIndex ) . getAddress ( ) ; BluetoothLeSensorPreference preference = ( BluetoothLeSensorPreference ) getPreference ( ) ;", "gt": "if ( preference . callChangeListener ( value ) ) { \n preference . setValue ( value ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/397"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "bluetoothIcon = null ; \n scanner = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/398"}
{"input": "<s> @ Override public void onResume ( ) { super . onResume ( ) ;", "gt": "PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n updateUnits ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/400"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/401"}
{"input": "<s> @ Override public void onChooseActivityTypeDone ( ActivityType activityType ) { if ( activityPreferenceDialog ! = null ) {", "gt": "activityPreferenceDialog . updateUI ( activityType ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/402"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "super . onStart ( ) ; \n ( ( SettingsActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . settings_gps_title ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/403"}
{"input": "<s> public static void invalidatePreference ( @ NonNull Preference preference ) { boolean isEnabled = preference . isEnabled ( ) ;", "gt": "preference . setVisible ( ! isEnabled ) ; \n preference . setVisible ( isEnabled ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/404"}
{"input": "<s> @ Override public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { addPreferencesFromResource ( R . xml . settings_import_export ) ; setExportTrackFileFormatOptions ( ) ;", "gt": "setExportDirectorySummary ( ) ; \n setFilenameTemplate ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/405"}
{"input": "<s> void check ( ) { int lastVersion = PreferencesUtils . getInt ( R . string . prefs_last_version_key , 0 ) ; if ( version > lastVersion ) {", "gt": "onUpgrade ( ) ; \n } else if ( version < lastVersion ) { \n onDowngrade ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/409"}
{"input": "<s> private void upgradeFrom0to1 ( ) { String preferenceValue = PreferencesUtils . getString ( R . string . stats_custom_layouts_key , \" \" ) ; if ( preferenceValue . isEmpty ( ) ) {", "gt": "PreferencesUtils . setString ( R . string . stats_custom_layouts_key , PreferencesUtils . buildDefaultLayout ( ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/411"}
{"input": "<s> public static boolean isKey ( int [ ] keyIds , String key ) { for ( int keyId : keyIds ) { if ( isKey ( keyId , key ) ) {", "gt": "return true ; \n } \n } \n return false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/414"}
{"input": "<s> static int getInt ( int keyId , int defaultValue ) { try { return sharedPreferences . getInt ( getKey ( keyId ) , defaultValue ) ; } catch ( ClassCastException e ) { } try { String stringValue = sharedPreferences . getString ( getKey ( keyId ) , null ) ;", "gt": "return Integer . parseInt ( stringValue ) ; \n } catch ( NumberFormatException e ) { \n return defaultValue ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/415"}
{"input": "<s> private static float getFloat ( int keyId , float defaultValue ) { try { return sharedPreferences . getFloat ( getKey ( keyId ) , defaultValue ) ; } catch ( ClassCastException e ) { } try { String stringValue = sharedPreferences . getString ( getKey ( keyId ) , null ) ;", "gt": "return Float . parseFloat ( stringValue ) ; \n } catch ( NumberFormatException e ) { \n return defaultValue ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/416"}
{"input": "<s> @ VisibleForTesting public static void setString ( int keyId , String value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putString ( getKey ( keyId ) , value ) ; \n editor . apply ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/417"}
{"input": "<s> @ VisibleForTesting public static void setBoolean ( int keyId , Boolean value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putBoolean ( getKey ( keyId ) , value ) ; \n editor . apply ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/418"}
{"input": "<s> static void setInt ( int keyId , int value ) { Editor editor = sharedPreferences . edit ( ) ;", "gt": "editor . putInt ( getKey ( keyId ) , value ) ; \n editor . apply ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/419"}
{"input": "<s> public static void applyDefaultUnit ( ) { if ( getString ( R . string . stats_units_key , \" \" ) . equals ( \" \" ) ) { if ( ! Locale . US . equals ( Locale . getDefault ( ) ) ) { setUnit ( UnitSystem . METRIC ) ;", "gt": "} else { \n setUnit ( UnitSystem . IMPERIAL_FEET ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/421"}
{"input": "<s> public static Duration getVoiceAnnouncementFrequency ( ) { final int DEFAULT = Integer . parseInt ( resources . getString ( R . string . voice_announcement_frequency_default ) ) ;", "gt": "int value = getInt ( R . string . voice_announcement_frequency_key , DEFAULT ) ; \n return Duration . ofSeconds ( value ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/431"}
{"input": "<s> public static Duration getIdleDurationTimeout ( ) { final int DEFAULT = Integer . parseInt ( resources . getString ( R . string . idle_duration_default ) ) ;", "gt": "int value = getInt ( R . string . idle_duration_key , DEFAULT ) ; \n return Duration . ofSeconds ( value ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/437"}
{"input": "<s> public static TrackFilenameGenerator getTrackFileformatGenerator ( ) { String DEFAULT = resources . getString ( R . string . export_filename_format_default ) ; TrackFilenameGenerator generator = new TrackFilenameGenerator ( getString ( R . string . export_filename_format_key , DEFAULT ) ) ; if ( generator . isValid ( ) ) {", "gt": "return generator ; \n } else { \n return new TrackFilenameGenerator ( DEFAULT ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/439"}
{"input": "<s> public static int getDefaultNightMode ( ) { final String defaultValue = getKey ( R . string . night_mode_default ) ;", "gt": "final String value = getString ( R . string . night_mode_key , defaultValue ) ; \n return Integer . parseInt ( value ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/442"}
{"input": "<s> @ Override public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) {", "gt": "addPreferencesFromResource ( R . xml . settings_sensors ) ; \n setWheelCircumferenceInputFilter ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/453"}
{"input": "<s> @ Override protected void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( fragment ! = null & & fragment . isAdded ( ) ) {", "gt": "getSupportFragmentManager ( ) . putFragment ( outState , FRAGMENT_KEY , fragment ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/456"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = SettingsBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/457"}
{"input": "<s> @ Override public int getSpanSize ( int position ) { if ( adapterFieldsVisible . isItemWide ( position ) ) { return numColumns ;", "gt": "} \n return 1 ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/460"}
{"input": "<s> @ Override public boolean onMove ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder , @ NonNull RecyclerView . ViewHolder target ) { int fromPosition = viewHolder . getAdapterPosition ( ) ; int toPosition = target . getAdapterPosition ( ) ;", "gt": "recordingLayoutFieldsVisible = adapterFieldsVisible . move ( fromPosition , toPosition ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/461"}
{"input": "<s> @ Override protected void onDestroy ( ) {", "gt": "super . onDestroy ( ) ; \n recordingLayoutFieldsVisible = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/463"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = ActivitySettingsCustomLayoutBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/464"}
{"input": "<s> @ Override protected void onResume ( ) {", "gt": "super . onResume ( ) ; \n adapter . reloadLayouts ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/466"}
{"input": "<s> @ Override protected View getRootView ( ) { PreferencesUtils . getCustomLayout ( ) ;", "gt": "viewBinding = ActivitySettingsCustomLayoutListBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/467"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . custom_layout_edit , menu ) ; \n return super . onCreateOptionsMenu ( menu ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/468"}
{"input": "<s> @ Override public void onSettingsCustomLayoutProfileClicked ( @ NonNull RecordingLayout recordingLayout ) { Intent intent = new Intent ( this , SettingsCustomLayoutEditActivity . class ) ;", "gt": "intent . putExtra ( SettingsCustomLayoutEditActivity . EXTRA_LAYOUT , recordingLayout ) ; \n startActivity ( intent ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/470"}
{"input": "<s> @ Override public void onStart ( ) {", "gt": "super . onStart ( ) ; \n ( ( SettingsActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . settings_ui_title ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/472"}
{"input": "<s> @ Override public void onResume ( ) {", "gt": "super . onResume ( ) ; \n PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/473"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/474"}
{"input": "<s> @ VisibleForTesting void writeDistance ( Distance distance , StringBuilder builder , int resId , String lineBreak ) { double distanceInKm = distance . toKM ( ) ; double distanceInMi = distance . toMI ( ) ;", "gt": "builder . append ( context . getString ( resId , distanceInKm , distanceInMi ) ) ; \n builder . append ( lineBreak ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/477"}
{"input": "<s> @ VisibleForTesting void writeTime ( Duration time , StringBuilder builder , int resId , String lineBreak ) {", "gt": "builder . append ( context . getString ( resId , StringUtils . formatElapsedTime ( time ) ) ) ; \n builder . append ( lineBreak ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/478"}
{"input": "<s> @ VisibleForTesting void writeSpeed ( Speed speed , StringBuilder builder , int resId , String lineBreak ) {", "gt": "builder . append ( context . getString ( resId , speed . toKMH ( ) , speed . toMPH ( ) ) ) ; \n builder . append ( lineBreak ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/479"}
{"input": "<s> @ VisibleForTesting void writeAltitude ( double altitude_m , StringBuilder builder , int resId , String lineBreak ) { long altitudeInM = Math . round ( altitude_m ) ; long altitudeInFt = Math . round ( Distance . of ( altitude_m ) . toFT ( ) ) ;", "gt": "builder . append ( context . getString ( resId , altitudeInM , altitudeInFt ) ) ; \n builder . append ( lineBreak ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/480"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = ActivityShowErrorBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/482"}
{"input": "<s> private void reportBug ( ) { Uri uriUrl ; try { uriUrl = Uri . parse ( String . format ( getString ( R . string . report_issue_link ) , URLEncoder . encode ( viewBinding . textViewError . getText ( ) . toString ( ) , StandardCharsets . UTF_8 . toString ( ) ) ) ) ; } catch ( final UnsupportedEncodingException ignored ) {", "gt": "return ; \n } \n Intent intent = new Intent ( Intent . ACTION_VIEW , uriUrl ) ; \n startActivity ( intent ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/483"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( final Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . show_error , menu ) ; \n return super . onCreateOptionsMenu ( menu ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/484"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( final MenuItem item ) { if ( item . getItemId ( ) = = R . id . error_share ) { onClickedShare ( ) ; return true ; } else if ( item . getItemId ( ) = = R . id . error_report ) {", "gt": "reportBug ( ) ; \n return true ; \n } \n return super . onOptionsItemSelected ( item ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/485"}
{"input": "<s> public void reset ( ) {", "gt": "min = Double . POSITIVE_INFINITY ; \n max = Double . NEGATIVE_INFINITY ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/488"}
{"input": "<s> public boolean update ( double value ) { boolean changed = false ; if ( value < min ) { min = value ; changed = true ; } if ( value > max ) {", "gt": "max = value ; \n changed = true ; \n } \n return changed ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/489"}
{"input": "<s> public void set ( double min , double max ) {", "gt": "this . min = min ; \n this . max = max ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/490"}
{"input": "<s> public void reset ( ) { startTime = null ; stopTime = null ; setTotalDistance ( Distance . of ( 0 ) ) ; setTotalTime ( Duration . ofSeconds ( 0 ) ) ; setMovingTime ( Duration . ofSeconds ( 0 ) ) ;", "gt": "setMaxSpeed ( Speed . zero ( ) ) ; \n setTotalAltitudeGain ( null ) ; \n setTotalAltitudeLoss ( null ) ; \n isIdle = false ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/491"}
{"input": "<s> public void reset ( Instant startTime ) {", "gt": "reset ( ) ; \n setStartTime ( startTime ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/492"}
{"input": "<s> public void setStartTime ( Instant startTime ) {", "gt": "this . startTime = startTime ; \n setStopTime ( startTime ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/493"}
{"input": "<s> @ VisibleForTesting ( otherwise = VisibleForTesting . PACKAGE_PRIVATE ) public void addMovingTime ( Duration time ) { if ( time . isNegative ( ) ) { throw new RuntimeException ( \" <STR_LIT> \" ) ;", "gt": "} \n movingTime = movingTime . plus ( time ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/495"}
{"input": "<s> public Speed getAverageSpeed ( ) { if ( totalTime . isZero ( ) ) { return Speed . of ( 0 ) ;", "gt": "} \n return Speed . of ( totalDistance . toM ( ) / totalTime . getSeconds ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/496"}
{"input": "<s> public void updateAltitudeExtremities ( Altitude altitude ) { if ( altitude ! = null ) {", "gt": "altitudeExtremities . update ( altitude . toM ( ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/497"}
{"input": "<s> public void setAverageHeartRate ( HeartRate heartRate ) { if ( heartRate ! = null ) {", "gt": "avgHeartRate = heartRate ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/498"}
{"input": "<s> @ VisibleForTesting ( otherwise = VisibleForTesting . PACKAGE_PRIVATE ) public void addTotalAltitudeGain ( float gain_m ) { if ( totalAltitudeGain_m = = null ) { totalAltitudeGain_m = <NUM_LIT> ;", "gt": "} \n totalAltitudeGain_m + = gain_m ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/499"}
{"input": "<s> @ VisibleForTesting ( otherwise = VisibleForTesting . PACKAGE_PRIVATE ) public void addTotalAltitudeLoss ( float loss_m ) { if ( totalAltitudeLoss_m = = null ) { totalAltitudeLoss_m = <NUM_LIT> ;", "gt": "} \n totalAltitudeLoss_m + = loss_m ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/500"}
{"input": "<s> public TrackStatistics getTrackStatistics ( ) { TrackStatistics stats = new TrackStatistics ( trackStatistics ) ;", "gt": "stats . merge ( currentSegment ) ; \n return stats ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/502"}
{"input": "<s> private void reset ( TrackPoint trackPoint ) { if ( currentSegment . isInitialized ( ) ) { trackStatistics . merge ( currentSegment ) ;", "gt": "} \n currentSegment . reset ( trackPoint . getTime ( ) ) ; \n lastTrackPoint = null ; \n resetAverageHeartRate ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/503"}
{"input": "<s> private void resetAverageHeartRate ( ) {", "gt": "averageHeartRateBPM = <NUM_LIT:0.0f> ; \n totalHeartRateDuration = Duration . ZERO ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/504"}
{"input": "<s> private void updateSpeed ( @ NonNull TrackPoint trackPoint ) { Speed currentSpeed = trackPoint . getSpeed ( ) ; if ( currentSpeed . greaterThan ( currentSegment . getMaxSpeed ( ) ) ) {", "gt": "currentSegment . setMaxSpeed ( currentSpeed ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/505"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ; \n outState . putSerializable ( ICON_VALUE_KEY , activityType ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/506"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackEditBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/507"}
{"input": "<s> @ Override public void onDestroy ( ) {", "gt": "viewBinding . trackListFabAction . setVisibility ( View . VISIBLE ) ; \n viewBinding . bottomAppBar . performShow ( true ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/511"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; viewBinding = null ;", "gt": "recordingStatusConnection = null ; \n adapter = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/515"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackListBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/516"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . track_list , menu ) ; searchMenuItem = menu . findItem ( R . id . track_list_search ) ;", "gt": "ActivityUtils . configureSearchWidget ( this , searchMenuItem ) ; \n return super . onCreateOptionsMenu ( menu ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/517"}
{"input": "<s> @ Override public boolean onKeyUp ( int keyCode , KeyEvent event ) { if ( keyCode = = KeyEvent . KEYCODE_SEARCH & & searchMenuItem ! = null ) { return true ;", "gt": "} \n return super . onKeyUp ( keyCode , event ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/519"}
{"input": "<s> @ Override public void onBackPressed ( ) { SearchView searchView = ( SearchView ) searchMenuItem . getActionView ( ) ; if ( ! searchView . isIconified ( ) ) { searchView . setIconified ( true ) ; } if ( searchQuery ! = null ) { searchQuery = null ;", "gt": "loadData ( ) ; \n return ; \n } \n super . onBackPressed ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/520"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ; if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) {", "gt": "searchQuery = intent . getStringExtra ( SearchManager . QUERY ) ; \n } else { \n searchQuery = null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/521"}
{"input": "<s> public void onGpsStatusChanged ( GpsStatusValue newStatus ) {", "gt": "gpsStatusValue = newStatus ; \n updateGpsMenuItem ( true , recordingStatus . isRecording ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/523"}
{"input": "<s> private void onRecordingStatusChanged ( RecordingStatus status ) { recordingStatus = status ;", "gt": "setFloatButton ( ) ; \n adapter . updateRecordingStatus ( recordingStatus ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/525"}
{"input": "<s> @ Override protected void onStart ( ) {", "gt": "super . onStart ( ) ; \n trackDataHub . start ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/526"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; this . invalidateOptionsMenu ( ) ;", "gt": "if ( trackId ! = null ) { \n trackDataHub . loadTrack ( trackId ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/527"}
{"input": "<s> @ Override protected void onStop ( ) { super . onStop ( ) ;", "gt": "trackRecordingServiceConnection . unbind ( this ) ; \n trackDataHub . stop ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/528"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackRecordedBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/530"}
{"input": "<s> @ Override public void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ;", "gt": "setIntent ( intent ) ; \n handleIntent ( intent ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/531"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . track_detail , menu ) ; \n return super . onCreateOptionsMenu ( menu ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/532"}
{"input": "<s> public void startPostponedEnterTransitionWith ( View viewIcon ) {", "gt": "ViewCompat . setTransitionName ( viewIcon , TrackRecordedActivity . VIEW_TRACK_ICON ) ; \n startPostponedEnterTransition ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/537"}
{"input": "<s> @ Override public void onAttachedToWindow ( ) { setLockscreenPolicy ( ) ; setScreenOnPolicy ( ) ;", "gt": "setFullscreenPolicy ( ) ; \n super . onAttachedToWindow ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/538"}
{"input": "<s> @ Override protected void onStart ( ) { super . onStart ( ) ; PreferencesUtils . registerOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "gt": "trackRecordingServiceConnection . bind ( this ) ; \n trackDataHub . start ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/541"}
{"input": "<s> @ Override protected void onStop ( ) { super . onStop ( ) ; PreferencesUtils . unregisterOnSharedPreferenceChangeListener ( sharedPreferenceChangeListener ) ;", "gt": "trackRecordingServiceConnection . unbind ( this ) ; \n trackDataHub . stop ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/544"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "viewBinding = null ; \n trackRecordingServiceConnection = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/545"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackRecordingBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/546"}
{"input": "<s> @ Override public boolean onCreateOptionsMenu ( Menu menu ) {", "gt": "getMenuInflater ( ) . inflate ( R . menu . track_record , menu ) ; \n return super . onCreateOptionsMenu ( menu ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/547"}
{"input": "<s> @ Override public void onBackPressed ( ) { if ( isDiscarding ) {", "gt": "return ; \n } \n super . onBackPressed ( ) ; \n resumeTrackAndFinish ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/552"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = TrackStoppedBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/553"}
{"input": "<s> void add ( TrackStatistics statistics ) {", "gt": "trackStatistics . merge ( statistics ) ; \n countTracks + + ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/558"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ; \n outState . putBoolean ( STATE_ARE_FILTERS_APPLIED , areFiltersApplied ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/560"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = AggregatedStatsBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/561"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { ViewHolder viewHolder = ( ViewHolder ) holder ; AggregatedStatistics . AggregatedStatistic aggregatedStatistic = aggregatedStatistics . getItem ( position ) ; String type = aggregatedStatistic . getActivityTypeLocalized ( ) ; if ( ActivityType . findByLocalizedString ( context , type ) . isShowSpeedPreferred ( ) ) {", "gt": "viewHolder . setSpeed ( aggregatedStatistic ) ; \n } else { \n viewHolder . setPace ( aggregatedStatistic ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/565"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( aggregatedStatistics = = null ) { return 0 ;", "gt": "} \n return aggregatedStatistics . getCount ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/566"}
{"input": "<s> public void swapData ( AggregatedStatistics aggregatedStatistics ) {", "gt": "this . aggregatedStatistics = aggregatedStatistics ; \n this . notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/567"}
{"input": "<s> @ Override public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( id ) ;", "gt": "dest . writeString ( value ) ; \n dest . writeByte ( ( byte ) ( isChecked ? 1 : 0 ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/577"}
{"input": "<s> private static boolean isInt ( String value ) { if ( value = = null | | value . isEmpty ( ) ) { return false ; } try { Integer . parseInt ( value ) ;", "gt": "} catch ( NumberFormatException nfe ) { \n return false ; \n } \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/580"}
{"input": "<s> @ Override public void writeToParcel ( Parcel parcel , int i ) { parcel . writeString ( key ) ; parcel . writeByte ( ( byte ) ( isVisible ? 1 : 0 ) ) ;", "gt": "parcel . writeByte ( ( byte ) ( isPrimary ? 1 : 0 ) ) ; \n parcel . writeByte ( ( byte ) ( isWide ? 1 : 0 ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/581"}
{"input": "<s> public void replaceAllFields ( List < DataField > newFields ) {", "gt": "dataFields . clear ( ) ; \n addFields ( newFields ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/583"}
{"input": "<s> public void moveField ( int from , int to ) {", "gt": "DataField dataFieldToMove = dataFields . remove ( from ) ; \n dataFields . add ( to , dataFieldToMove ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/585"}
{"input": "<s> @ Override public void writeToParcel ( Parcel parcel , int i ) { parcel . writeString ( name ) ;", "gt": "parcel . writeInt ( columnsPerRow ) ; \n parcel . writeList ( dataFields ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/587"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( recordingLayout = = null ) {", "gt": "return 0 ; \n } else { \n return recordingLayout . getFields ( ) . size ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/591"}
{"input": "<s> public void swapValues ( RecordingLayout data ) { this . recordingLayout = data ; if ( this . recordingLayout ! = null ) {", "gt": "this . notifyDataSetChanged ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/592"}
{"input": "<s> public RecordingLayout move ( int fromPosition , int toPosition ) { recordingLayout . moveField ( fromPosition , toPosition ) ;", "gt": "notifyItemMoved ( fromPosition , toPosition ) ; \n return recordingLayout ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/593"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { SettingsCustomLayoutListAdapter . ViewHolder viewHolder = ( SettingsCustomLayoutListAdapter . ViewHolder ) holder ; RecordingLayout recordingLayout = recordingLayoutList . get ( position ) ;", "gt": "viewHolder . itemView . setTag ( recordingLayout . getName ( ) ) ; \n viewHolder . title . setText ( recordingLayout . getName ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/596"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( recordingLayoutList = = null ) { return 0 ;", "gt": "} \n return recordingLayoutList . size ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/597"}
{"input": "<s> public void reloadLayouts ( ) {", "gt": "recordingLayoutList = PreferencesUtils . getAllCustomLayouts ( ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/598"}
{"input": "<s> public void removeLayout ( int position ) { recordingLayoutList . remove ( position ) ;", "gt": "PreferencesUtils . updateCustomLayouts ( recordingLayoutList ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/599"}
{"input": "<s> public void restoreItem ( RecordingLayout recordingLayout , int position ) { recordingLayoutList . add ( position , recordingLayout ) ;", "gt": "PreferencesUtils . updateCustomLayouts ( recordingLayoutList ) ; \n notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/600"}
{"input": "<s> @ Override public void onSaveInstanceState ( @ NonNull Bundle outState ) {", "gt": "super . onSaveInstanceState ( outState ) ; \n outState . putSerializable ( SELECTED_INTERVAL_KEY , selectedInterval ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/604"}
{"input": "<s> @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {", "gt": "viewBinding = IntervalListViewBinding . inflate ( inflater , container , false ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/605"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/609"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "adapter = null ; \n viewModel = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/610"}
{"input": "<s> public Interval getLastInterval ( ) { if ( intervalList . size ( ) = = 1 & & intervalList . get ( 0 ) . getDistance ( ) . lessThan ( distanceInterval ) ) { return null ; } for ( int i = intervalList . size ( ) - 1 ; i > = 0 ; i - - ) { if ( intervalList . get ( i ) . getDistance ( ) . greaterOrEqualThan ( distanceInterval ) ) {", "gt": "return this . intervalList . get ( i ) ; \n } \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/614"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( intervalList = = null ) { return 0 ;", "gt": "} \n return intervalList . size ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/616"}
{"input": "<s> public List < IntervalStatistics . Interval > swapData ( List < IntervalStatistics . Interval > data , UnitSystem unitSystem , boolean isReportSpeed ) { this . unitSystem = unitSystem ; this . isReportSpeed = isReportSpeed ; intervalList = data ;", "gt": "if ( data ! = null ) { \n this . notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/617"}
{"input": "<s> @ Override protected void onCleared ( ) { super . onCleared ( ) ; if ( trackPointsTableObserver ! = null ) { contentResolver . unregisterContentObserver ( trackPointsTableObserver ) ; trackPointsTableObserver = null ; } if ( handlerThread ! = null ) {", "gt": "handlerThread . getLooper ( ) . quit ( ) ; \n handlerThread = null ; \n } \n handler = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/618"}
{"input": "<s> public void onPause ( ) { if ( trackPointsTableObserver ! = null ) {", "gt": "contentResolver . unregisterContentObserver ( trackPointsTableObserver ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/620"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerDetailActivityBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/625"}
{"input": "<s> @ Override public void onPause ( ) {", "gt": "super . onPause ( ) ; \n handler . removeCallbacks ( hideText ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/630"}
{"input": "<s> @ Override public void onDestroyView ( ) {", "gt": "super . onDestroyView ( ) ; \n viewBinding = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/631"}
{"input": "<s> @ Override public void onDestroy ( ) { super . onDestroy ( ) ;", "gt": "markerId = null ; \n marker = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/632"}
{"input": "<s> @ Override public void setMenuVisibility ( boolean menuVisible ) { super . setMenuVisibility ( menuVisible ) ; if ( isResumed ( ) ) { if ( menuVisible ) { updateUi ( ) ;", "gt": "} else { \n handler . removeCallbacks ( hideText ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/633"}
{"input": "<s> @ Override public void onCreateOptionsMenu ( @ NonNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . marker_detail , menu ) ; shareMarkerImageMenuItem = menu . findItem ( R . id . marker_detail_share ) ;", "gt": "updateMarker ( false ) ; \n updateMenuItems ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/634"}
{"input": "<s> private void updateMenuItems ( ) {", "gt": "if ( shareMarkerImageMenuItem ! = null ) \n shareMarkerImageMenuItem . setVisible ( marker . hasPhoto ( ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/635"}
{"input": "<s> private void updateMarker ( boolean refresh ) { if ( refresh | | marker = = null ) { marker = contentProviderUtils . getMarker ( markerId ) ; if ( marker = = null ) {", "gt": "Log . d ( TAG , \" <STR_LIT> \" ) ; \n getParentFragmentManager ( ) . popBackStack ( ) ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/636"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerEditBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/638"}
{"input": "<s> private Marker . Id createNewMarker ( TrackRecordingService trackRecordingService ) { try { Marker . Id marker = trackRecordingService . insertMarker ( \" \" , \" \" , \" \" , null ) ; if ( marker = = null ) { Toast . makeText ( this , R . string . marker_add_error , Toast . LENGTH_LONG ) . show ( ) ; return null ; } return marker ;", "gt": "} catch ( IllegalStateException e ) { \n Log . e ( TAG , \" <STR_LIT> \" , e ) ; \n return null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/639"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; trackId = null ;", "gt": "viewBinding = null ; \n viewModel = null ; \n takePictureFromGallery = null ; \n takePictureFromCamera = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/640"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( item . getItemId ( ) = = R . id . marker_edit_insert_photo ) { createMarkerWithPicture ( ) ; return true ; } if ( item . getItemId ( ) = = R . id . marker_edit_insert_gallery_img ) {", "gt": "createMarkerWithGalleryImage ( ) ; \n return true ; \n } \n return super . onOptionsItemSelected ( item ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/643"}
{"input": "<s> public LiveData < Marker > getMarkerData ( @ NonNull Marker . Id markerId ) { if ( markerData = = null ) { markerData = new MutableLiveData < > ( ) ; Marker marker = new ContentProviderUtils ( getApplication ( ) ) . getMarker ( markerId ) ; if ( marker . hasPhoto ( ) ) { photoOriginalUri = marker . getPhotoURI ( ) ;", "gt": "} \n markerData . postValue ( marker ) ; \n } \n return markerData ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/648"}
{"input": "<s> private void deletePhoto ( Marker marker ) { if ( marker . hasPhoto ( ) ) {", "gt": "deletePhoto ( marker . getPhotoURI ( ) ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/651"}
{"input": "<s> @ Override protected void onStart ( ) {", "gt": "super . onStart ( ) ; \n trackRecordingServiceConnection . bind ( this ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/655"}
{"input": "<s> @ Override protected void onResume ( ) { super . onResume ( ) ; trackRecordingServiceConnection . bind ( this ) ;", "gt": "this . invalidateOptionsMenu ( ) ; \n loadData ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/656"}
{"input": "<s> @ Override protected void onStop ( ) {", "gt": "super . onStop ( ) ; \n trackRecordingServiceConnection . unbind ( this ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/657"}
{"input": "<s> @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; viewBinding = null ;", "gt": "adapter = null ; \n contentProviderUtils = null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/658"}
{"input": "<s> @ Override protected View getRootView ( ) {", "gt": "viewBinding = MarkerListBinding . inflate ( getLayoutInflater ( ) ) ; \n return viewBinding . getRoot ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/659"}
{"input": "<s> @ Override public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( trackId ! = null & & item . getItemId ( ) = = R . id . marker_list_insert_marker ) { Intent intent = IntentUtils . newIntent ( this , MarkerEditActivity . class ) . putExtra ( MarkerEditActivity . EXTRA_TRACK_ID , trackId ) ;", "gt": "startActivity ( intent ) ; \n return true ; \n } \n return super . onOptionsItemSelected ( item ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/662"}
{"input": "<s> @ Override public void onBackPressed ( ) { SearchView searchView = ( SearchView ) searchMenuItem . getActionView ( ) ; if ( ! searchView . isIconified ( ) ) { searchView . setIconified ( true ) ; } if ( searchQuery ! = null ) { searchQuery = null ;", "gt": "loadData ( ) ; \n return ; \n } \n super . onBackPressed ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/663"}
{"input": "<s> @ Override protected void onNewIntent ( Intent intent ) { super . onNewIntent ( intent ) ; if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) {", "gt": "searchQuery = intent . getStringExtra ( SearchManager . QUERY ) ; \n } else { \n searchQuery = null ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/664"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) {", "gt": "ViewHolder viewHolder = ( ViewHolder ) holder ; \n viewHolder . bind ( markers . get ( position ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/666"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( markers = = null ) { return 0 ;", "gt": "} \n return markers . size ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/667"}
{"input": "<s> public void swapData ( List < Marker > markers ) {", "gt": "this . markers = markers ; \n this . notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/668"}
{"input": "<s> @ Override public boolean onCreateActionMode ( ActionMode actionMode , Menu menu ) {", "gt": "actionMode . getMenuInflater ( ) . inflate ( R . menu . list_context_menu , menu ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/669"}
{"input": "<s> @ Override public boolean onPrepareActionMode ( ActionMode actionMode , Menu menu ) { selectionMode = true ;", "gt": "actionModeCallback . onPrepare ( menu , null , getCheckedIds ( ) , true ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/670"}
{"input": "<s> @ Override public boolean onActionItemClicked ( ActionMode actionMode , MenuItem menuItem ) { if ( actionModeCallback . onClick ( menuItem . getItemId ( ) , null , getCheckedIds ( ) ) ) { actionMode . finish ( ) ;", "gt": "} \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/671"}
{"input": "<s> @ Override public void onDestroyActionMode ( ActionMode actionMode ) { selectionMode = false ;", "gt": "setAllSelected ( false ) ; \n actionModeCallback . onDestroy ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/672"}
{"input": "<s> private long [ ] getCheckedIds ( ) { List < Long > ids = new ArrayList < > ( ) ; for ( int i = 0 ; i < selection . size ( ) ; i + + ) { if ( selection . valueAt ( i ) ) {", "gt": "ids . add ( ( long ) selection . keyAt ( i ) ) ; \n } \n } \n return ids . stream ( ) . mapToLong ( i - > i ) . toArray ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/674"}
{"input": "<s> public void setSelected ( boolean isSelected ) {", "gt": "selection . put ( ( int ) getId ( ) , isSelected ) ; \n view . setActivated ( isSelected ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/675"}
{"input": "<s> @ Override public boolean onLongClick ( View view ) { setSelected ( ! view . isActivated ( ) ) ; if ( ! selectionMode ) { actionMode = context . startSupportActionMode ( MarkerListAdapter . this ) ;", "gt": "} else { \n actionMode . invalidate ( ) ; \n } \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/677"}
{"input": "<s> public static File getPhotoFileIfExists ( Context context , Track . Id trackId , Uri uri ) { if ( uri = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } String filename = uri . getLastPathSegment ( ) ; if ( filename = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } File dir = FileUtils . getPhotoDir ( context , trackId ) ; File file = new File ( dir , filename ) ;", "gt": "if ( ! file . exists ( ) ) { \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/679"}
{"input": "<s> @ Nullable public static File buildInternalPhotoFile ( Context context , Track . Id trackId , @ NonNull Uri fileNameUri ) { if ( fileNameUri = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ; return null ; } String filename = fileNameUri . getLastPathSegment ( ) ; if ( filename = = null ) { Log . w ( TAG , \" <STR_LIT> \" ) ;", "gt": "return null ; \n } \n File dir = FileUtils . getPhotoDir ( context , trackId ) ; \n return new File ( dir , filename ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/680"}
{"input": "<s> @ Override public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { ViewHolder viewHolder = ( ViewHolder ) holder ;", "gt": "cursor . moveToPosition ( position ) ; \n viewHolder . bind ( cursor ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/682"}
{"input": "<s> @ Override public int getItemCount ( ) { if ( cursor = = null ) { return 0 ;", "gt": "} \n return cursor . getCount ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/683"}
{"input": "<s> public void swapData ( Cursor cursor ) {", "gt": "this . cursor = cursor ; \n this . notifyDataSetChanged ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/684"}
{"input": "<s> @ Override public boolean onCreateActionMode ( ActionMode mode , Menu menu ) {", "gt": "mode . getMenuInflater ( ) . inflate ( R . menu . list_context_menu , menu ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/685"}
{"input": "<s> @ Override public boolean onPrepareActionMode ( ActionMode mode , Menu menu ) { selectionMode = true ;", "gt": "actionModeCallback . onPrepare ( menu , null , getCheckedIds ( ) , true ) ; \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/686"}
{"input": "<s> @ Override public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { if ( actionModeCallback . onClick ( item . getItemId ( ) , null , getCheckedIds ( ) ) ) { mode . finish ( ) ;", "gt": "} \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/687"}
{"input": "<s> @ Override public void onDestroyActionMode ( ActionMode mode ) { selectionMode = false ;", "gt": "setAllSelected ( false ) ; \n actionModeCallback . onDestroy ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/688"}
{"input": "<s> private long [ ] getCheckedIds ( ) { List < Long > ids = new ArrayList < > ( ) ; for ( int i = 0 ; i < selection . size ( ) ; i + + ) { if ( selection . valueAt ( i ) ) {", "gt": "ids . add ( ( long ) selection . keyAt ( i ) ) ; \n } \n } \n return ids . stream ( ) . mapToLong ( i - > i ) . toArray ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/689"}
{"input": "<s> public void setSelected ( boolean isSelected ) {", "gt": "selection . put ( ( int ) getId ( ) , isSelected ) ; \n view . setActivated ( isSelected ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/690"}
{"input": "<s> @ Override public boolean onLongClick ( View v ) { setSelected ( ! view . isActivated ( ) ) ; if ( ! selectionMode ) { actionMode = context . startSupportActionMode ( TrackListAdapter . this ) ;", "gt": "} else { \n actionMode . invalidate ( ) ; \n } \n return true ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/691"}
{"input": "<s> protected void publishResults ( CharSequence constraint , FilterResults results ) { if ( ArrayAdapterFilterDisabled . this . getCount ( ) > 0 ) {", "gt": "notifyDataSetChanged ( ) ; \n } else { \n notifyDataSetInvalidated ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/693"}
{"input": "<s> public void shutdown ( ) {", "gt": "enqueueObjects . clear ( ) ; \n executorService . shutdown ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/694"}
{"input": "<s> private boolean preExecute ( T object ) { synchronized ( enqueueObjects ) { if ( ! enqueueObjects . contains ( object ) ) { enqueueObjects . add ( object ) ; return true ;", "gt": "} else { \n return false ; \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/696"}
{"input": "<s> private void postExecute ( T object ) { synchronized ( enqueueObjects ) {", "gt": "enqueueObjects . remove ( object ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/697"}
{"input": "<s> private static String getTimeDistance ( String totalTime , String totalDistance ) { StringBuilder builder = new StringBuilder ( ) ; if ( totalTime ! = null & & totalTime . length ( ) ! = 0 ) { if ( builder . length ( ) ! = 0 ) { builder . append ( \" <STR_LIT> \" ) ; } builder . append ( totalTime ) ; } if ( totalDistance ! = null & & totalDistance . length ( ) ! = 0 ) { if ( builder . length ( ) ! = 0 ) { builder . append ( \" \" ) ;", "gt": "} \n builder . append ( \" <STR_LIT:(> \" ) . append ( totalDistance ) . append ( \" <STR_LIT:)> \" ) ; \n } \n return builder . toString ( ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/698"}
{"input": "<s> public static int dpToPx ( Context context , int dp ) {", "gt": "float density = context . getResources ( ) . getDisplayMetrics ( ) . density ; \n return Math . round ( dp * density ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/701"}
{"input": "<s> @ Override public void onScrollStateChanged ( AbsListView view , int scrollState ) { if ( scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_IDLE | | scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_FLING | | scrollState = = AbsListView . OnScrollListener . SCROLL_STATE_TOUCH_SCROLL ) { if ( from > = 0 & & to > = 0 ) { for ( int i = from ; i < to ; i + + ) { View viewChild = view . getChildAt ( i - from ) ;", "gt": "visibleViewsListener . onViewVisible ( viewChild , i ) ; \n } \n } \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/702"}
{"input": "<s> @ Override public void onScroll ( AbsListView view , int firstVisibleItem , int visibleItemCount , int totalItemCount ) {", "gt": "from = firstVisibleItem ; \n to = firstVisibleItem + visibleItemCount ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/703"}
{"input": "<s> public static int getFontSizeSmallInPx ( Context context ) { TypedArray typedArray = context . obtainStyledAttributes ( com . google . android . material . R . style . TextAppearance_MaterialComponents_Body2 , new int [ ] { android . R . attr . textSize } ) ; int fontSize = typedArray . getDimensionPixelSize ( 0 , <NUM_LIT:12> ) ;", "gt": "typedArray . recycle ( ) ; \n return fontSize ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/707"}
{"input": "<s> public static int getFontSizeMediumInPx ( Context context ) { TypedArray typedArray = context . obtainStyledAttributes ( com . google . android . material . R . style . TextAppearance_MaterialComponents_Body1 , new int [ ] { android . R . attr . textSize } ) ; int fontSize = typedArray . getDimensionPixelSize ( 0 , <NUM_LIT:15> ) ;", "gt": "typedArray . recycle ( ) ; \n return fontSize ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/708"}
{"input": "<s> public static EGM2008Correction createCorrection ( Context context , Location location ) throws IOException { Indices indices = getIndices ( location ) ; try ( DataInputStream dataInputStream = new DataInputStream ( context . getResources ( ) . openRawResource ( EGM2008_5_DATA ) ) ) {", "gt": "return new EGM2008Correction ( indices , dataInputStream ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/711"}
{"input": "<s> @ VisibleForTesting static int getUndulationRaw ( DataInputStream dataInputStream , Indices indices ) throws IOException { dataInputStream . reset ( ) ;", "gt": "int absoluteIndex = indices . getAbsoluteIndex ( ) ; \n return getUndulationRaw ( dataInputStream , absoluteIndex ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/712"}
{"input": "<s> @ Override public void onExportError ( ExportTask unused , String errorMessage ) { Intent intent = new Intent ( context , SettingsActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ;", "gt": "intent . putExtra ( SettingsActivity . EXTRAS_EXPORT_ERROR_MESSAGE , errorMessage ) ; \n context . startActivity ( intent ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/715"}
{"input": "<s> private static Uri getExportDocumentFileUri ( Context context , String exportFileName , TrackFileFormat trackFileFormat , DocumentFile directory ) { Uri exportDocumentFileUri = findFile ( context , directory . getUri ( ) , exportFileName ) ; if ( exportDocumentFileUri = = null ) { final DocumentFile file = directory . createFile ( trackFileFormat . getMimeType ( ) , exportFileName ) ; if ( file ! = null ) {", "gt": "exportDocumentFileUri = file . getUri ( ) ; \n } \n } \n return exportDocumentFileUri ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/717"}
{"input": "<s> public static File getPhotoDir ( Context context , Track . Id trackId ) { File photoDirectory = new File ( getPhotoDir ( context ) , \" \" + trackId . id ( ) ) ;", "gt": "photoDirectory . mkdirs ( ) ; \n return photoDirectory ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/718"}
{"input": "<s> public static String getExtension ( String fileName ) { if ( fileName = = null ) { return null ; } int index = fileName . lastIndexOf ( <CHAR_LIT:.> ) ;", "gt": "if ( index = = - 1 ) { \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/720"}
{"input": "<s> public static void copy ( FileDescriptor src , File dst ) { try ( FileChannel in = new FileInputStream ( src ) . getChannel ( ) ; FileChannel out = new FileOutputStream ( dst ) . getChannel ( ) ) { in . transferTo ( 0 , in . size ( ) , out ) ;", "gt": "} catch ( Exception e ) {", "repo": "OpenTracks", "task_id": "OpenTracks/723"}
{"input": "<s> public static void deleteDirectoryRecurse ( File file ) { if ( file ! = null & & file . exists ( ) & & file . isDirectory ( ) ) { for ( File child : file . listFiles ( ) ) { deleteDirectoryRecurse ( child ) ; }", "gt": "file . delete ( ) ; \n } else if ( file ! = null & & file . isFile ( ) ) { \n file . delete ( ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/724"}
{"input": "<s> public static ArrayList < DocumentFile > getFiles ( DocumentFile file ) { ArrayList < DocumentFile > files = new ArrayList < > ( ) ; if ( ! file . isDirectory ( ) ) { files . add ( file ) ; return files ; } for ( DocumentFile candidate : file . listFiles ( ) ) { if ( ! candidate . isDirectory ( ) ) { files . add ( candidate ) ; } else {", "gt": "files . addAll ( getFiles ( candidate ) ) ; \n } \n } \n return files ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/725"}
{"input": "<s> public static DocumentFile toDocumentFile ( Context context , Uri directoryUri ) { if ( directoryUri = = null ) { return null ; } try { return DocumentFile . fromTreeUri ( context . getApplicationContext ( ) , directoryUri ) ;", "gt": "} catch ( Exception e ) { \n Log . w ( TAG , \" <STR_LIT> \" + e . getMessage ( ) ) ; \n } \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/730"}
{"input": "<s> public void requestPermissionsIfNeeded ( Context context , ActivityResultCaller caller , @ Nullable Runnable onGranted , @ Nullable RejectedCallback onRejected ) { if ( ! hasPermission ( context ) ) {", "gt": "requestPermission ( caller , onGranted , onRejected ) ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/731"}
{"input": "<s> public static String formatDateTimeWithOffsetIfDifferent ( OffsetDateTime odt ) { if ( ! odt . getOffset ( ) . equals ( OffsetDateTime . now ( ) . getOffset ( ) ) ) { return odt . toZonedDateTime ( ) . format ( DateTimeFormatter . ofLocalizedDateTime ( FormatStyle . FULL ) ) ;", "gt": "} \n return odt . toZonedDateTime ( ) . format ( DateTimeFormatter . ofLocalizedDateTime ( FormatStyle . MEDIUM ) ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/732"}
{"input": "<s> public static String formatElapsedTimeWithHour ( @ NonNull Duration time ) {", "gt": "String value = formatElapsedTime ( time ) ; \n return TextUtils . split ( value , \" <STR_LIT::> \" ) . length = = <NUM_LIT:2> ? \" <STR_LIT> \" + value : value ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/733"}
{"input": "<s> public static String getCategory ( String category ) { if ( category = = null | | category . length ( ) = = 0 ) { return null ;", "gt": "} \n return \" <STR_LIT:[> \" + category + \" <STR_LIT:]> \" ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/738"}
{"input": "<s> public static OffsetDateTime parseTime ( String xmlDateTime ) { try { TemporalAccessor t = DateTimeFormatter . ISO_DATE_TIME . parseBest ( xmlDateTime , ZonedDateTime : : from , LocalDateTime : : from ) ; if ( t instanceof LocalDateTime localDateTime ) { Log . w ( TAG , \" <STR_LIT> \" ) ; t = localDateTime . atZone ( ZoneOffset . UTC ) ; } return OffsetDateTime . from ( t ) ;", "gt": "} catch ( Exception e ) { \n Log . e ( TAG , \" <STR_LIT> \" ) ; \n throw e ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/740"}
{"input": "<s> public static String getAppVersionName ( Context context ) { try { PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( BuildConfig . APPLICATION_ID , PackageManager . GET_META_DATA ) ; return pi . versionName + \" <STR_LIT:/> \" + BuildConfig . VERSION_NAME_FULL ;", "gt": "} catch ( NameNotFoundException e ) { \n Log . w ( TAG , \" <STR_LIT> \" , e ) ; \n return \" \" ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/743"}
{"input": "<s> public static Long getAppVersionCode ( Context context ) { try { PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( BuildConfig . APPLICATION_ID , PackageManager . GET_META_DATA ) ; return PackageInfoCompat . getLongVersionCode ( pi ) ;", "gt": "} catch ( NameNotFoundException e ) { \n Log . w ( TAG , \" <STR_LIT> \" , e ) ; \n return - <NUM_LIT> ; \n } \n }", "repo": "OpenTracks", "task_id": "OpenTracks/744"}
{"input": "<s> public static WakeLock releaseWakeLock ( WakeLock wakeLock ) { if ( wakeLock ! = null & & wakeLock . isHeld ( ) ) { wakeLock . release ( ) ;", "gt": "} \n return null ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/745"}
{"input": "<s> public void initialize ( Context context , LayoutInflater inflater ) {", "gt": "this . context = context ; \n this . binding = createViewBinding ( inflater ) ; \n }", "repo": "OpenTracks", "task_id": "OpenTracks/761"}
{"input": "<s> fun preProcess ( ) { items = photoRepository . getAll ( ) elementsToProcess = items . size", "gt": "openZipFile ( ) \n super . preProcess ( ) \n }", "repo": "Photok", "task_id": "Photok/1"}
{"input": "<s> fun processItem ( item : Photo ) { val success = writePhotoToZipEntry ( item ) if ( success ) {", "gt": "backedUpPhotos . add ( item ) \n } else { \n failuresOccurred = true \n } \n }", "repo": "Photok", "task_id": "Photok/2"}
{"input": "<s> private fun openZipFile ( ) {", "gt": "val out = app . contentResolver . openOutputStream ( uri ) \n zipOutputStream = ZipOutputStream ( out ) \n }", "repo": "Photok", "task_id": "Photok/4"}
{"input": "<s> private fun writeZipEntry ( fileName : String , inputStream : InputStream ? ) : Boolean { inputStream ? : return false return try { val entry = ZipEntry ( fileName ) zipOutputStream . putNextEntry ( entry ) inputStream . copyTo ( zipOutputStream ) zipOutputStream . closeEntry ( ) true", "gt": "} catch ( e : IOException ) { \n Timber . d ( \" <STR_LIT> \" ) \n false \n } \n }", "repo": "Photok", "task_id": "Photok/5"}
{"input": "<s> override fun bind ( binding : DialogRestoreBackupBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/7"}
{"input": "<s> private fun getVersion ( ) : Int { metaData ? . let { return if ( it . backupVersion = = 0 ) { 1 } else { it . backupVersion", "gt": "} \n } \n \n return - 1 \n }", "repo": "Photok", "task_id": "Photok/8"}
{"input": "<s> private fun createStream ( uri : Uri ) : ZipInputStream ? { val inputStream = try { app . contentResolver . openInputStream ( uri ) } catch ( e : IOException ) { Timber . d ( \" <STR_LIT> \" ) null } return if ( inputStream ! = null ) {", "gt": "ZipInputStream ( BufferedInputStream ( inputStream ) ) \n } else { \n null \n } \n }", "repo": "Photok", "task_id": "Photok/10"}
{"input": "<s> fun onUnlock ( ) { binding . unlockBackupWrongPasswordWarning . hide ( ) viewModel . verifyPassword ( backupPassword ) { if ( it ) { dismiss ( ) onUnlockSuccess ( viewModel . password )", "gt": "} else { \n binding . unlockBackupWrongPasswordWarning . show ( ) \n } \n } \n }", "repo": "Photok", "task_id": "Photok/12"}
{"input": "<s> override fun bind ( binding : DialogBackupUnlockBinding ) { super . bind ( binding )", "gt": "binding . viewModel = viewModel \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/13"}
{"input": "<s> override fun onCreate ( ) { super . onCreate ( ) if ( BuildConfig . DEBUG ) { Timber . plant ( Timber . DebugTree ( ) ) }", "gt": "ProcessLifecycleOwner . get ( ) . lifecycle . addObserver ( this ) \n \n setAppDesign ( config . systemDesign ) \n }", "repo": "Photok", "task_id": "Photok/15"}
{"input": "<s> fun millisToFormattedDateConverter ( millis : Long ) : String ? {", "gt": "val date = Date ( millis ) \n return dateFormat . format ( date ) \n }", "repo": "Photok", "task_id": "Photok/18"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) viewModel . navigationEvent . observe ( this ) {", "gt": "navigator . navigate ( it , this ) \n } \n \n viewModel . evaluateNavigation ( ) \n }", "repo": "Photok", "task_id": "Photok/21"}
{"input": "<s> fun navigate ( navigationEvent : NavigationEvent , activity : ForwardDialerActivity ) { when ( navigationEvent ) { NavigationEvent . ForwardToDialer - > navigateForwardToDialer ( activity )", "gt": "NavigationEvent . OpenRecoveryMenu - > navigateOpenRecoveryMenu ( activity ) \n } \n }", "repo": "Photok", "task_id": "Photok/22"}
{"input": "<s> private fun navigateOpenRecoveryMenu ( activity : ForwardDialerActivity ) { Timber . d ( \" <STR_LIT> \" ) val intent = Intent ( activity , RecoveryMenuActivity : : class . java )", "gt": "activity . apply { \n startActivity ( intent ) \n finish ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/23"}
{"input": "<s> private fun navigateForwardToDialer ( activity : ForwardDialerActivity ) { val dialIntent = Intent ( Intent . ACTION_DIAL ) . apply { flags = Intent . FLAG_ACTIVITY_CLEAR_TOP }", "gt": "activity . apply { \n startActivity ( dialIntent ) \n finishAndRemoveTask ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/24"}
{"input": "<s> @ Preview @ Composable private fun GalleryInteractionsPreview ( ) { MaterialTheme { GalleryInteractionsRow ( onClose = { } , onSelectAll = { } ,", "gt": "onDelete = { } , \n onExport = { } , \n ) \n } \n }", "repo": "Photok", "task_id": "Photok/26"}
{"input": "<s> @ Preview ( showBackground = true , backgroundColor = <NUM_LIT> ) @ Composable private fun GalleryPlaceholderPreview ( ) { MaterialTheme {", "gt": "GalleryPlaceholder { } \n } \n }", "repo": "Photok", "task_id": "Photok/27"}
{"input": "<s> @ Composable fun GalleryScreen ( viewModel : GalleryViewModel ) { val uiState by viewModel . uiState . collectAsState ( ) MaterialTheme { when ( uiState ) { is GalleryUiState . Empty - > GalleryPlaceholder { viewModel . handleUiEvent ( it ) } is GalleryUiState . Content - > GalleryContent ( uiState as GalleryUiState . Content ,", "gt": "handleUiEvent = { viewModel . handleUiEvent ( it ) } \n ) \n } \n } \n }", "repo": "Photok", "task_id": "Photok/28"}
{"input": "<s> @ Composable fun ImportButton ( onClick : ( ) - > Unit , modifier : Modifier = Modifier , ) { FloatingActionButton ( onClick = onClick , containerColor = colorResource ( R . color . colorPrimary ) , modifier = modifier , ) { Icon ( painter = painterResource ( R . drawable . ic_add ) ,", "gt": "contentDescription = null , \n tint = Color . White \n ) \n } \n }", "repo": "Photok", "task_id": "Photok/29"}
{"input": "<s> @ Preview @ Composable private fun ImportButtonPreview ( ) { ImportButton (", "gt": "onClick = { } \n ) \n }", "repo": "Photok", "task_id": "Photok/30"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) launchLifecycleAwareJob { viewModel . eventsFlow . collect { event - > navigator . navigate ( event , findNavController ( ) , this )", "gt": "} \n } \n \n viewModel . checkForNewFeatures ( ) \n }", "repo": "Photok", "task_id": "Photok/33"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) { super . onConfigurationChanged ( newConfig )", "gt": "viewModel . onConfigurationChanged ( ) \n }", "repo": "Photok", "task_id": "Photok/34"}
{"input": "<s> private fun onPhotoLongPressed ( item : PhotoTile ) { if ( multiSelectionState . value . isActive . not ( ) ) { multiSelectionState . update { it . copy ( isActive = true ,", "gt": "selectedItemUUIDs = listOf ( item . uuid ) \n ) \n } \n } \n }", "repo": "Photok", "task_id": "Photok/39"}
{"input": "<s> override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ? ) { super . onActivityResult ( requestCode , resultCode , data ) if ( resultCode = = Activity . RESULT_OK ) { when ( requestCode ) { REQ_CONTENT_PHOTOS - > dispatchPhotoImportRequest ( data ) REQ_CONTENT_VIDEOS - > dispatchVideosImportRequest ( data ) REQ_CONTENT_BACKUP - > dispatchBackupImportRequest ( data )", "gt": "} \n } \n \n dismiss ( ) \n }", "repo": "Photok", "task_id": "Photok/45"}
{"input": "<s> private fun resolveUrisFromIntent ( data : Intent ) : MutableList < Uri > { val uris = mutableListOf < Uri > ( ) if ( data . clipData ! = null ) { val count = data . clipData ! ! . itemCount for ( i in 0 until count ) { val uri = data . clipData ! ! . getItemAt ( i ) . uri uris . add ( uri ) } } </s", "gt": "private fun resolveUrisFromIntent ( data : Intent ) : MutableList < Uri > { val uris = mutableListOf < Uri > ( ) if ( data . clipData ! = null ) { val count = data . clipData ! ! . itemCount for ( i in 0 until count ) { val uri = data . clipData ! ! . getItemAt ( i ) . uri uris . add ( uri ) } }", "repo": "Photok", "task_id": "Photok/48"}
{"input": "<s> override fun bind ( binding : DialogImportMenuBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/49"}
{"input": "<s> fun processItem ( item : Uri ) { val success = photoRepository . safeImportPhoto ( item ) if ( ! success ) {", "gt": "failuresOccurred = true \n } \n }", "repo": "Photok", "task_id": "Photok/50"}
{"input": "<s> fun processItem ( item : Photo ) { val result = photoRepository . exportPhoto ( item ) if ( ! result ) {", "gt": "failuresOccurred = true \n } \n }", "repo": "Photok", "task_id": "Photok/52"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) {", "gt": "super . onViewCreated ( view , savedInstanceState ) \n photo ? : dismiss ( ) \n }", "repo": "Photok", "task_id": "Photok/57"}
{"input": "<s> override fun bind ( binding : DialogBottomSheetDetailsBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/58"}
{"input": "<s> private fun toggleSystemUI ( ) { if ( systemUiVisible ) {", "gt": "requireActivity ( ) . hideSystemUI ( ) \n } else { \n requireActivity ( ) . showSystemUI ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/61"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "super . onDestroy ( ) \n requireActivity ( ) . showSystemUI ( ) \n }", "repo": "Photok", "task_id": "Photok/62"}
{"input": "<s> override fun bind ( binding : FragmentImageViewerBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/63"}
{"input": "<s> fun bindTo ( uuid : String ? ) { uuid ? : return photoUUID = uuid", "gt": "loadPhoto ( ) \n }", "repo": "Photok", "task_id": "Photok/68"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "enableEdgeToEdge ( ) \n super . onCreate ( savedInstanceState ) \n }", "repo": "Photok", "task_id": "Photok/70"}
{"input": "<s> private fun confirmImport ( amount : Int , onImportConfirmed : ( ) - > Unit ) { Dialogs . showConfirmDialog ( this , String . format ( getString ( R . string . import_sharted_question ) , amount", "gt": ") \n ) { _ , _ - > \n onImportConfirmed ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/72"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) { super . onConfigurationChanged ( newConfig )", "gt": "onOrientationChanged ( newConfig . orientation ) \n }", "repo": "Photok", "task_id": "Photok/73"}
{"input": "<s> fun consumeSharedUris ( ) {", "gt": "consumedUrisFromStore . value = sharedUrisStore . getUris ( ) \n sharedUrisStore . clear ( ) \n }", "repo": "Photok", "task_id": "Photok/75"}
{"input": "<s> @ Preview @ Composable private fun MainMenuPreview ( ) { MaterialTheme { MainMenu (", "gt": "uiState = MainMenuUiState ( R . id . galleryFragment ) , \n onNavigationItemClicked = { } \n ) \n } \n }", "repo": "Photok", "task_id": "Photok/76"}
{"input": "<s> fun internalDeleteFile ( fileName : String ) : Boolean { val success = app . deleteFile ( fileName ) if ( ! success ) {", "gt": "Timber . d ( \" <STR_LIT> \" ) \n } \n \n return success \n }", "repo": "Photok", "task_id": "Photok/81"}
{"input": "<s> private fun internalRenameFile ( currentFileName : String , newFileName : String ) : Boolean { val currentFile = app . getFileStreamPath ( currentFileName )", "gt": "val newFile = app . getFileStreamPath ( newFileName ) \n return currentFile . renameTo ( newFile ) \n }", "repo": "Photok", "task_id": "Photok/82"}
{"input": "<s> fun loadPhoto ( photo : Photo ) : ByteArray ? { encryptedStorageManager . internalOpenEncryptedFileInput ( photo . internalFileName ) ? . use {", "gt": "return it . readBytes ( ) \n } \n \n return null \n }", "repo": "Photok", "task_id": "Photok/90"}
{"input": "<s> fun loadThumbnail ( photo : Photo ) : ByteArray ? { encryptedStorageManager . internalOpenEncryptedFileInput ( photo . internalThumbnailFileName ) ? . use {", "gt": "return it . readBytes ( ) \n } \n \n return null \n }", "repo": "Photok", "task_id": "Photok/91"}
{"input": "<s> fun loadVideoPreview ( photo : Photo ) : ByteArray ? { encryptedStorageManager . internalOpenEncryptedFileInput ( photo . internalVideoPreviewFileName ) ? . use {", "gt": "return it . readBytes ( ) \n } \n \n return null \n }", "repo": "Photok", "task_id": "Photok/92"}
{"input": "<s> fun openChangelog ( ) {", "gt": "val url = getString ( R . string . news_changelog_url ) \n openUrl ( url ) \n }", "repo": "Photok", "task_id": "Photok/97"}
{"input": "<s> private fun getNewFeaturesViewData ( ) : List < NewFeatureViewData > { val titles = resources . getStringArray ( R . array . newsTitles ) val summaries = resources . getStringArray ( R . array . newsSummaries ) return if ( titles . size = = summaries . size ) { val viewDataList = mutableListOf < NewFeatureViewData > ( ) for ( i in <NUM_LIT> . titles . lastIndex ) { viewDataList . add ( NewFeatureViewData ( titles [ i ] , summaries [ i ] ) ) }", "gt": "viewDataList \n }", "repo": "Photok", "task_id": "Photok/98"}
{"input": "<s> override fun bind ( binding : DialogNewsBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/99"}
{"input": "<s> fun bindTo ( viewData : NewFeatureViewData ) {", "gt": "binding . itemNewsTitle . text = viewData . title \n binding . itemNewsSummary . text = viewData . summary \n }", "repo": "Photok", "task_id": "Photok/100"}
{"input": "<s> fun buttonClicked ( ) { if ( isLastPage ) { finish ( ) } else { binding . onBoardingViewPager . setCurrentItem (", "gt": "binding . onBoardingViewPager . currentItem + 1 , \n true \n ) \n } \n }", "repo": "Photok", "task_id": "Photok/101"}
{"input": "<s> override fun bind ( binding : FragmentOnboardingBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/103"}
{"input": "<s> @ MainThread override fun observe ( owner : LifecycleOwner , observer : Observer < in T > ) { if ( hasActiveObservers ( ) ) { Timber . w ( \" <STR_LIT> \" ) } super . observe ( owner ) {", "gt": "if ( pending . compareAndSet ( true , false ) ) { \n observer . onChanged ( it ) \n } \n } \n }", "repo": "Photok", "task_id": "Photok/108"}
{"input": "<s> @ MainThread override fun setValue ( value : T ? ) {", "gt": "pending . set ( true ) \n super . setValue ( value ) \n }", "repo": "Photok", "task_id": "Photok/109"}
{"input": "<s> fun getFileName ( contentResolver : ContentResolver , uri : Uri ) : String ? { val projection = arrayOf ( MediaStore . MediaColumns . DISPLAY_NAME ) contentResolver . query ( uri , projection , null , null , null ) ? . use { if ( it . moveToFirst ( ) ) { return it . getString ( 0 )", "gt": "} \n } \n return null \n }", "repo": "Photok", "task_id": "Photok/110"}
{"input": "<s> fun getFileSize ( contentResolver : ContentResolver , uri : Uri ) : Long { contentResolver . openFileDescriptor ( uri , \" <STR_LIT> \" ) ? . use {", "gt": "return it . statSize \n } \n \n return - <NUM_LIT> \n }", "repo": "Photok", "task_id": "Photok/111"}
{"input": "<s> fun setAppDesign ( design : String ? ) { design ? : return val nightMode = when ( design ) { \" <STR_LIT> \" - > AppCompatDelegate . MODE_NIGHT_FOLLOW_SYSTEM \" <STR_LIT> \" - > AppCompatDelegate . MODE_NIGHT_NO \" <STR_LIT> \" - > AppCompatDelegate . MODE_NIGHT_YES else - > null", "gt": "} \n \n nightMode ? : return \n AppCompatDelegate . setDefaultNightMode ( nightMode ) \n }", "repo": "Photok", "task_id": "Photok/112"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "viewModel . navigationEvent . observe ( this ) { \n navigator . navigate ( it , this ) \n }", "repo": "Photok", "task_id": "Photok/121"}
{"input": "<s> override fun bind ( binding : ActivityRecoveryMenuBinding ) {", "gt": "super . bind ( binding ) \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/122"}
{"input": "<s> fun navigate ( navigationEvent : NavigationEvent , activity : AppCompatActivity ) { when ( navigationEvent ) { NavigationEvent . OpenPhotok - > navigateOpenPhotok ( activity )", "gt": "NavigationEvent . AfterResetHideApp - > navigateAfterResetHideApp ( activity ) \n } \n }", "repo": "Photok", "task_id": "Photok/123"}
{"input": "<s> fun resetHidePhotoSetting ( ) { toggleMainComponentUseCase ( )", "gt": "navigationEvent . value = RecoveryMenuNavigator . NavigationEvent . AfterResetHideApp \n }", "repo": "Photok", "task_id": "Photok/125"}
{"input": "<s> fun reset ( ) { encryptionKey = null", "gt": "ivParameterSpec = null \n isReady = false \n }", "repo": "Photok", "task_id": "Photok/127"}
{"input": "<s> fun createCipherInputStream ( origInputStream : InputStream , password : String ? = null ) : CipherInputStream ? { return if ( isReady ) try { val cipher = if ( password = = null ) { createCipher ( Cipher . DECRYPT_MODE ) } else { createCipher ( Cipher . DECRYPT_MODE , password ) } CipherInputStream ( origInputStream , cipher ) } catch ( e : GeneralSecurityException ) { Timber . d ( \" <STR_LIT> \" )", "gt": "null \n } else { \n null \n } \n }", "repo": "Photok", "task_id": "Photok/128"}
{"input": "<s> fun createCipherOutputStream ( origOutputStream : OutputStream , password : String ? = null ) : CipherOutputStream ? { return if ( isReady ) try { val cipher = if ( password = = null ) { createCipher ( Cipher . ENCRYPT_MODE ) } else { createCipher ( Cipher . ENCRYPT_MODE , password ) } CipherOutputStream ( origOutputStream , cipher ) } catch ( e : GeneralSecurityException ) { Timber . d ( \" <STR_LIT> \" )", "gt": "null \n } else { \n null \n } \n }", "repo": "Photok", "task_id": "Photok/129"}
{"input": "<s> private fun createCipher ( mode : Int , password : String ) : Cipher ? { val key = genSecKey ( password ) val iv = genIv ( password )", "gt": "return createCipher ( mode , key , iv ) \n }", "repo": "Photok", "task_id": "Photok/130"}
{"input": "<s> private fun genSecKey ( password : String ) : SecretKeySpec { val md = MessageDigest . getInstance ( SHA_256 )", "gt": "val bytes = md . digest ( password . toByteArray ( StandardCharsets . UTF_8 ) ) \n return SecretKeySpec ( bytes , AES ) \n }", "repo": "Photok", "task_id": "Photok/132"}
{"input": "<s> private fun genIv ( password : String ) : IvParameterSpec { val iv = ByteArray ( <NUM_LIT:16> ) val charArray = password . toCharArray ( ) val firstChars = charArray . take ( <NUM_LIT:16> ) for ( i in firstChars . indices ) {", "gt": "iv [ i ] = firstChars [ i ] . toByte ( ) \n } \n \n return IvParameterSpec ( iv ) \n }", "repo": "Photok", "task_id": "Photok/133"}
{"input": "<s> fun storePassword ( password : String ) {", "gt": "val hashedPw = BCrypt . hashpw ( password , BCrypt . gensalt ( ) ) \n config . securityPassword = hashedPw \n }", "repo": "Photok", "task_id": "Photok/134"}
{"input": "<s> private fun getIntFromString ( key : String , default : Int ) : Int {", "gt": "val stringValue = preferences . getString ( key , default . toString ( ) ) \n return stringValue ? . toInt ( ) ? : default \n }", "repo": "Photok", "task_id": "Photok/135"}
{"input": "<s> private fun putString ( key : String , value : String ) { val edit = preferences . edit ( )", "gt": "edit . putString ( key , value ) \n edit . apply ( ) \n }", "repo": "Photok", "task_id": "Photok/136"}
{"input": "<s> private fun putInt ( key : String , value : Int ) { val edit = preferences . edit ( )", "gt": "edit . putInt ( key , value ) \n edit . apply ( ) \n }", "repo": "Photok", "task_id": "Photok/137"}
{"input": "<s> private fun putBoolean ( key : String , value : Boolean ) { val edit = preferences . edit ( )", "gt": "edit . putBoolean ( key , value ) \n edit . apply ( ) \n }", "repo": "Photok", "task_id": "Photok/138"}
{"input": "<s> private fun putLong ( key : String , value : Long ) { val edit = preferences . edit ( )", "gt": "edit . putLong ( key , value ) \n edit . apply ( ) \n }", "repo": "Photok", "task_id": "Photok/139"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { view . systemBarsPadding ( ) super . onViewCreated ( view , savedInstanceState ) setHasOptionsMenu ( true ) setToolbar ( binding . aboutToolbar )", "gt": "binding . aboutToolbar . setNavigationOnClickListener { \n findNavController ( ) . navigateUp ( ) \n }", "repo": "Photok", "task_id": "Photok/140"}
{"input": "<s> override fun bind ( binding : FragmentAboutBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/142"}
{"input": "<s> override fun bind ( binding : DialogChangePasswordBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/145"}
{"input": "<s> fun preProcess ( ) { items = photoRepository . getAll ( )", "gt": "elementsToProcess = items . size \n super . preProcess ( ) \n }", "repo": "Photok", "task_id": "Photok/150"}
{"input": "<s> fun postProcess ( ) { super . postProcess ( )", "gt": "passwordManager . storePassword ( newPassword ) \n encryptionManager . initialize ( newPassword ) \n }", "repo": "Photok", "task_id": "Photok/151"}
{"input": "<s> private fun loadIconCredits ( ) : Spanned { val bytes = context . assets . open ( ICON_CREDITS_FILE ) . readBytes ( )", "gt": "val rawText = String ( bytes ) \n return HtmlCompat . fromHtml ( rawText , HtmlCompat . FROM_HTML_MODE_COMPACT ) \n }", "repo": "Photok", "task_id": "Photok/152"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "useViewModel ( viewModel ) \n setupLayout ( ) \n }", "repo": "Photok", "task_id": "Photok/156"}
{"input": "<s> fun toggleAppVisibility ( ) { Dialogs . showConfirmDialog ( requireContext ( ) , viewModel . confirmText ) { _ , _ - > viewModel . toggleMainComponent ( )", "gt": "dismiss ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/158"}
{"input": "<s> override fun bind ( binding : DialogToggleAppVisibilityBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/159"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) view . statusBarPadding ( )", "gt": "toolbar = view . findViewById ( R . id . settingsToolbar ) \n }", "repo": "Photok", "task_id": "Photok/162"}
{"input": "<s> private fun setupAppCategory ( ) { addCallbackTo < ListPreference > ( Config . SYSTEM_DESIGN ) {", "gt": "setAppDesign ( it as String ) \n } \n }", "repo": "Photok", "task_id": "Photok/164"}
{"input": "<s> private fun setupSecurityCategory ( ) { addActionTo ( KEY_ACTION_CHANGE_PASSWORD ) { ChangePasswordDialog ( ) . show ( childFragmentManager ) } addActionTo ( KEY_ACTION_HIDE_APP ) {", "gt": "ToggleAppVisibilityDialog ( ) . show ( childFragmentManager ) \n } \n \n configurePhoneDialPreference ( ) \n }", "repo": "Photok", "task_id": "Photok/165"}
{"input": "<s> private fun configurePhoneDialPreference ( ) { val dialPreference = findPreference < EditTextPreference > ( Config . SECURITY_DIAL_LAUNCH_CODE ) dialPreference ? . setOnBindEditTextListener { it . inputType = InputType . TYPE_CLASS_NUMBER or InputType . TYPE_NUMBER_FLAG_DECIMAL it . addTextChangedListener { editable - > if ( editable ? . length ! ! < 1 ) {", "gt": "it . setText ( <NUM_LIT> toString ( ) ) \n } \n } \n } \n }", "repo": "Photok", "task_id": "Photok/166"}
{"input": "<s> private fun addActionTo ( preferenceId : String , action : ( ) - > Unit ) { preferenceManager . findPreference < Preference > ( preferenceId )", "gt": "? . setOnPreferenceClickListener { \n action ( ) \n true \n } \n }", "repo": "Photok", "task_id": "Photok/168"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) binding . root . systemBarsPadding ( ) binding . ossToolbar . setNavigationOnClickListener {", "gt": "findNavController ( ) . navigateUp ( ) \n } \n \n binding . ossRecycler . initialize ( LICENSE_REPORT_FILE ) \n }", "repo": "Photok", "task_id": "Photok/171"}
{"input": "<s> override fun bind ( binding : FragmentSetupBinding ) {", "gt": "super . bind ( binding ) \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/173"}
{"input": "<s> internal fun setToolbar ( toolbar : Toolbar , showTitle : Boolean = false ) { val activity = ( requireActivity ( ) as AppCompatActivity ) activity . setSupportActionBar ( toolbar )", "gt": "activity . supportActionBar ? . setDisplayShowTitleEnabled ( showTitle ) \n }", "repo": "Photok", "task_id": "Photok/182"}
{"input": "<s> private fun setStatusIcon ( drawable : Int ? , color : Int = 0 ) { if ( drawable = = null ) { binding . processStatusImageView . setImageDrawable ( null ) return } binding . processStatusImageView . setImageDrawable ( ContextCompat . getDrawable ( requireContext ( ) , drawable ) ) binding . processStatusImageView . setColorFilter ( ContextCompat . getColor (", "gt": "requireContext ( ) , \n color \n ) \n ) \n }", "repo": "Photok", "task_id": "Photok/186"}
{"input": "<s> override fun bind ( binding : DialogBottomSheetProcessBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/187"}
{"input": "<s> fun preProcess ( ) {", "gt": "processState = ProcessState . PROCESSING \n updateProgress ( ) \n }", "repo": "Photok", "task_id": "Photok/189"}
{"input": "<s> private suspend fun processLoop ( ) { for ( item in items ) { if ( processState = = ProcessState . ABORTED ) { return }", "gt": "processItem ( item ) \n itemProcessed ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/190"}
{"input": "<s> private fun itemProcessed ( ) {", "gt": "current + + \n updateProgress ( ) \n }", "repo": "Photok", "task_id": "Photok/192"}
{"input": "<s> private fun updateProgress ( ) { if ( elementsToProcess = = 0 ) {", "gt": "return \n } \n \n progressPercent = ( current * <NUM_LIT:100> ) / elementsToProcess \n }", "repo": "Photok", "task_id": "Photok/193"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "binding = DataBindingUtil . setContentView ( this , layout ) \n bind ( binding ) \n }", "repo": "Photok", "task_id": "Photok/194"}
{"input": "<s> fun notifyCallbacks ( property : Int , newValue : Any ? ) { callbacks . forEach {", "gt": "it . onCallback ( property , newValue ) \n } \n }", "repo": "Photok", "task_id": "Photok/199"}
{"input": "<s> fun message ( message : String ) : Builder {", "gt": "chooser . message = message \n return this \n }", "repo": "Photok", "task_id": "Photok/200"}
{"input": "<s> fun mimeType ( mimeType : String ) : Builder {", "gt": "chooser . mimeType = mimeType \n return this \n }", "repo": "Photok", "task_id": "Photok/201"}
{"input": "<s> fun requestCode ( requestCode : Int ) : Builder {", "gt": "chooser . requestCode = requestCode \n return this \n }", "repo": "Photok", "task_id": "Photok/202"}
{"input": "<s> fun permissionCode ( permissionCode : Int ) : Builder {", "gt": "chooser . permissionRequestCode = permissionCode \n return this \n }", "repo": "Photok", "task_id": "Photok/203"}
{"input": "<s> fun permission ( permission : String ) : Builder {", "gt": "chooser . permission = permission \n return this \n }", "repo": "Photok", "task_id": "Photok/204"}
{"input": "<s> fun allowMultiple ( ) : Builder {", "gt": "chooser . allowMultiple = true \n return this \n }", "repo": "Photok", "task_id": "Photok/205"}
{"input": "<s> fun showLongToast ( context : Context , message : String ) { onMain {", "gt": "Toast . makeText ( context , message , Toast . LENGTH_LONG ) . show ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/209"}
{"input": "<s> fun showShortToast ( context : Context , message : String ) { onMain {", "gt": "Toast . makeText ( context , message , Toast . LENGTH_SHORT ) . show ( ) \n } \n }", "repo": "Photok", "task_id": "Photok/210"}
{"input": "<s> fun setTextValue ( value : String ) {", "gt": "binding . passwordEditTextValue . setText ( value ) \n binding . passwordEditTextValue . setSelection ( value . length ) \n }", "repo": "Photok", "task_id": "Photok/211"}
{"input": "<s> private fun addFragment ( fragment : Fragment , title : String ) {", "gt": "fragmentList . add ( fragment ) \n fragmentTitleList . add ( title ) \n }", "repo": "Photok", "task_id": "Photok/213"}
{"input": "<s> override fun bind ( binding : FragmentUnlockBinding ) { super . bind ( binding )", "gt": "binding . context = this \n binding . viewModel = viewModel \n }", "repo": "Photok", "task_id": "Photok/215"}
{"input": "<s> override fun bind ( binding : FragmentVideoPlayerBinding ) {", "gt": "super . bind ( binding ) \n binding . context = this \n }", "repo": "Photok", "task_id": "Photok/219"}
{"input": "<s> private fun createMediaSourceFactory ( ) : MediaSourceFactory { val aesDataSource = AesDataSource ( encryptionManager ) val factory = DataSource . Factory {", "gt": "aesDataSource \n } \n \n return ProgressiveMediaSource . Factory ( factory ) \n }", "repo": "Photok", "task_id": "Photok/220"}
{"input": "<s> fun releasePlayer ( ) {", "gt": "player ? . release ( ) \n player = null \n }", "repo": "Photok", "task_id": "Photok/222"}
{"input": "<s> override fun onCleared ( ) {", "gt": "super . onCleared ( ) \n releasePlayer ( ) \n }", "repo": "Photok", "task_id": "Photok/223"}
{"input": "<s> override fun updateServerUrl ( newAddress : String ? ) { if ( newAddress ! = null ) { hostConfig . address = newAddress", "gt": "buildRetrofit ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/2"}
{"input": "<s> fun connectUser ( username : String , password : String ) : UserAuthResponse ? { val auth = UserAuth ( ) auth . username = username", "gt": "auth . password = password \n return process { this . apiService . connectLocal ( auth ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/4"}
{"input": "<s> fun retrieveUser ( withTasks : Boolean ) : User ? { val user = process { apiService . getUser ( ) } val tasks = getTasks ( )", "gt": "user ? . tasks = tasks \n return user \n }", "repo": "habitica-android", "task_id": "habitica-android/7"}
{"input": "<s> override fun updateAuthenticationCredentials ( userID : String ? , apiToken : String ? ) { this . hostConfig . userID = userID ? : \" \"", "gt": "this . hostConfig . apiKey = apiToken ? : \" \" \n Analytics . setUserID ( hostConfig . userID ) \n }", "repo": "habitica-android", "task_id": "habitica-android/11"}
{"input": "<s> fun purchaseItem ( type : String , itemKey : String , purchaseQuantity : Int ) : Void ? { return process { apiService . purchaseItem ( type ,", "gt": "itemKey , \n mapOf ( Pair ( \" <STR_LIT> \" , purchaseQuantity ) ) \n ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/12"}
{"input": "<s> fun feedPet ( petKey : String , foodKey : String ) : FeedResponse ? { val response = apiService . feedPet ( petKey , foodKey )", "gt": "response . data ? . message = response . message \n return process { response } \n }", "repo": "habitica-android", "task_id": "habitica-android/14"}
{"input": "<s> fun changeClass ( className : String ? ) : User ? { return process { if ( className ! = null ) { apiService . changeClass ( className )", "gt": "} else { \n apiService . changeClass ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/15"}
{"input": "<s> fun validatePurchase ( request : PurchaseValidationRequest ) : PurchaseValidationResult ? { return if ( lastPurchaseValidation = = null | | Date ( ) . time - lastPurchaseValidation . time > <NUM_LIT> ) {", "gt": "return process { apiService . validatePurchase ( request ) } \n } else { \n null \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/16"}
{"input": "<s> fun resetAccount ( password : String ) : Void ? { val updateObject = HashMap < String , String > ( )", "gt": "updateObject [ \" <STR_LIT> \" ] = password \n return process { apiService . resetAccount ( updateObject ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/18"}
{"input": "<s> fun deleteAccount ( password : String ) : Void ? { val updateObject = HashMap < String , String > ( )", "gt": "updateObject [ \" <STR_LIT> \" ] = password \n return process { apiService . deleteAccount ( updateObject ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/19"}
{"input": "<s> fun sendPasswordResetEmail ( email : String ) : Void ? { val data = HashMap < String , String > ( )", "gt": "data [ \" <STR_LIT> \" ] = email \n return process { apiService . sendPasswordResetEmail ( data ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/20"}
{"input": "<s> fun updateLoginName ( newLoginName : String , password : String ) : Void ? { val updateObject = HashMap < String , String > ( ) updateObject [ \" <STR_LIT> \" ] = newLoginName", "gt": "updateObject [ \" <STR_LIT> \" ] = password \n return process { apiService . updateLoginName ( updateObject ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/21"}
{"input": "<s> fun updateUsername ( newLoginName : String ) : Void ? { val updateObject = HashMap < String , String > ( )", "gt": "updateObject [ \" <STR_LIT> \" ] = newLoginName \n return process { apiService . updateLoginName ( updateObject ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/22"}
{"input": "<s> fun verifyUsername ( username : String ) : VerifyUsernameResponse ? { val updateObject = HashMap < String , String > ( )", "gt": "updateObject [ \" <STR_LIT> \" ] = username \n return process { this . apiService . verifyUsername ( updateObject ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/23"}
{"input": "<s> fun transferGems ( giftedID : String , amount : Int ) : Void ? { return process { apiService . transferGems ( mapOf ( Pair ( \" <STR_LIT> \" , giftedID ) ,", "gt": "Pair ( \" <STR_LIT> \" , amount ) \n ) \n ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/26"}
{"input": "<s> fun retrieveChallenge ( challengeID : String ) : Challenge ? { val challenge = apiClient . getChallenge ( challengeID ) ? : return null", "gt": "localRepository . save ( challenge ) \n return challenge \n }", "repo": "habitica-android", "task_id": "habitica-android/28"}
{"input": "<s> fun retrieveChallengeTasks ( challengeID : String ) : TaskList ? { val tasks = apiClient . getChallengeTasks ( challengeID ) if ( tasks ! = null ) { val taskList = tasks . tasks . values . toList ( ) taskList . forEach { it . ownerID = challengeID", "gt": "} \n localRepository . save ( taskList ) \n } \n return tasks \n }", "repo": "habitica-android", "task_id": "habitica-android/29"}
{"input": "<s> private suspend fun addChallengeTasks ( challenge : Challenge , addedTaskList : List < Task > ) { when { addedTaskList . count ( ) = = 1 - > apiClient . createChallengeTask ( challenge . id ? : \" \" , addedTaskList [ 0 ] )", "gt": "addedTaskList . count ( ) > 1 - > apiClient . createChallengeTasks ( challenge . id ? : \" \" , addedTaskList ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/30"}
{"input": "<s> fun retrieveContent ( forced : Boolean ) : ContentResult ? { val now = Date ( ) . time if ( forced | | now - this . lastContentSync > <NUM_LIT> ) { val content = apiClient . getContent ( ) ? : return null lastContentSync = now content . special = RealmList ( ) content . special . add ( mysteryItem )", "gt": "localRepository . saveContent ( content ) \n return content \n } \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/35"}
{"input": "<s> fun retrieveInAppRewards ( ) : List < ShopItem > ? { val rewards = apiClient . retrieveInAppRewards ( )", "gt": "if ( rewards ! = null ) { \n localRepository . saveInAppRewards ( rewards ) \n }", "repo": "habitica-android", "task_id": "habitica-android/36"}
{"input": "<s> fun feedPet ( pet : Pet , food : Food ) : FeedResponse ? { val feedResponse = apiClient . feedPet ( pet . key , food . key ) ? : return null", "gt": "localRepository . feedPet ( food . key , pet . key , feedResponse . value ? : 0 , currentUserID ) \n return feedResponse \n }", "repo": "habitica-android", "task_id": "habitica-android/41"}
{"input": "<s> fun hatchPet ( egg : Egg , hatchingPotion : HatchingPotion , successFunction : ( ) - > Unit ) : Items ? { if ( appConfigManager . enableLocalChanges ( ) ) { localRepository . hatchPet ( egg . key , hatchingPotion . key , currentUserID ) successFunction ( ) } val items = apiClient . hatchPet ( egg . key , hatchingPotion . key ) ? : return null localRepository . save ( items , currentUserID )", "gt": "if ( ! appConfigManager . enableLocalChanges ( ) ) { \n successFunction ( ) \n } \n return items \n }", "repo": "habitica-android", "task_id": "habitica-android/42"}
{"input": "<s> fun inviteToQuest ( quest : QuestContent ) : Quest ? { val newQuest = apiClient . inviteToQuest ( \" <STR_LIT> \" , quest . key )", "gt": "localRepository . changeOwnedCount ( \" <STR_LIT> \" , quest . key , currentUserID , - 1 ) \n return newQuest \n }", "repo": "habitica-android", "task_id": "habitica-android/43"}
{"input": "<s> fun togglePinnedItem ( item : ShopItem ) : List < ShopItem > ? { if ( item . isValid ) { apiClient . togglePinnedItem ( item . pinType ? : \" \" , item . path ? : \" \" )", "gt": "} \n return retrieveInAppRewards ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/45"}
{"input": "<s> fun transferGroupOwnership ( groupID : String , userID : String ) : Group ? { val group = localRepository . getGroup ( groupID ) . first ( ) ? . let { localRepository . getUnmanagedCopy ( it ) }", "gt": "group ? . leaderID = userID \n return group ? . let { apiClient . updateGroup ( groupID , it ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/47"}
{"input": "<s> fun removeMemberFromGroup ( groupID : String , userID : String ) : List < Member > ? {", "gt": "apiClient . removeMemberFromGroup ( groupID , userID ) \n return retrievePartyMembers ( groupID , true ) \n }", "repo": "habitica-android", "task_id": "habitica-android/48"}
{"input": "<s> fun retrieveGroupChat ( groupId : String ) : List < ChatMessage > ? { val messages = apiClient . listGroupChat ( groupId )", "gt": "messages ? . forEach { it . groupId = groupId } \n return messages \n }", "repo": "habitica-android", "task_id": "habitica-android/49"}
{"input": "<s> fun postGroupChat ( groupId : String , message : String ) : PostChatMessageResult ? { val messageObject = HashMap < String , String > ( )", "gt": "messageObject [ \" <STR_LIT> \" ] = message \n return postGroupChat ( groupId , messageObject ) \n }", "repo": "habitica-android", "task_id": "habitica-android/53"}
{"input": "<s> fun retrieveGroup ( id : String ) : Group ? { val group = apiClient . getGroup ( id ) group ? . let { localRepository . saveGroup ( it ) }", "gt": "retrieveGroupChat ( id ) \n return group \n }", "repo": "habitica-android", "task_id": "habitica-android/54"}
{"input": "<s> fun retrieveInboxConversations ( ) : List < InboxConversation > ? { val conversations = apiClient . retrieveInboxConversations ( ) ? : return null", "gt": "localRepository . saveInboxConversations ( currentUserID , conversations ) \n return conversations \n }", "repo": "habitica-android", "task_id": "habitica-android/61"}
{"input": "<s> fun postPrivateMessage ( recipientId : String , message : String ) : List < ChatMessage > ? { val messageObject = HashMap < String , String > ( ) messageObject [ \" <STR_LIT> \" ] = message", "gt": "messageObject [ \" <STR_LIT> \" ] = recipientId \n return postPrivateMessage ( recipientId , messageObject ) \n }", "repo": "habitica-android", "task_id": "habitica-android/63"}
{"input": "<s> fun retrievePartyMembers ( id : String , includeAllPublicFields : Boolean ) : List < Member > ? { val members = apiClient . getGroupMembers ( id , includeAllPublicFields )", "gt": "members ? . let { localRepository . savePartyMembers ( id , it ) } \n return members \n }", "repo": "habitica-android", "task_id": "habitica-android/64"}
{"input": "<s> fun retrieveMember ( userId : String ? , fromHall : Boolean ) : Member ? { return if ( userId = = null ) { null } else { if ( fromHall ) { apiClient . getHallMember ( userId ) } else { try { val uuid = UUID . fromString ( userId ) . toString ( ) apiClient . getMember ( uuid ) } catch ( _ : IllegalArgumentException ) {", "gt": "apiClient . getMemberWithUsername ( userId ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/65"}
{"input": "<s> fun acceptQuest ( user : User ? , partyId : String ) : Void ? { apiClient . acceptQuest ( partyId )", "gt": "user ? . let { \n localRepository . updateRSVPNeeded ( it , false ) \n } \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/67"}
{"input": "<s> fun rejectQuest ( user : User ? , partyId : String ) : Void ? { apiClient . rejectQuest ( partyId )", "gt": "user ? . let { \n localRepository . updateRSVPNeeded ( it , false ) \n } \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/68"}
{"input": "<s> fun cancelQuest ( partyId : String ) : Void ? { apiClient . cancelQuest ( partyId )", "gt": "localRepository . removeQuest ( partyId ) \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/69"}
{"input": "<s> fun abortQuest ( partyId : String ) : Quest ? { val quest = apiClient . abortQuest ( partyId )", "gt": "localRepository . removeQuest ( partyId ) \n return quest \n }", "repo": "habitica-android", "task_id": "habitica-android/70"}
{"input": "<s> fun rejectGroupInvite ( groupId : String ) : Void ? { apiClient . rejectGroupInvite ( groupId )", "gt": "localRepository . rejectGroupInvitation ( currentUserID , groupId ) \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/71"}
{"input": "<s> fun forceStartQuest ( party : Group ) : Quest ? { val quest = apiClient . forceStartQuest ( party . id , localRepository . getUnmanagedCopy ( party ) )", "gt": "localRepository . setQuestActivity ( party , true ) \n return quest \n }", "repo": "habitica-android", "task_id": "habitica-android/72"}
{"input": "<s> fun getMemberAchievements ( userId : String ? ) : List < Achievement > ? { return if ( userId = = null ) {", "gt": "null \n } else { \n apiClient . getMemberAchievements ( userId ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/73"}
{"input": "<s> fun createTag ( tag : Tag ) : Tag ? { val savedTag = apiClient . createTag ( tag ) ? : return null savedTag . userId = currentUserID", "gt": "localRepository . save ( savedTag ) \n return savedTag \n }", "repo": "habitica-android", "task_id": "habitica-android/74"}
{"input": "<s> fun updateTag ( tag : Tag ) : Tag ? { val savedTag = apiClient . updateTag ( tag . id , tag ) ? : return null savedTag . userId = currentUserID", "gt": "localRepository . save ( savedTag ) \n return savedTag \n }", "repo": "habitica-android", "task_id": "habitica-android/75"}
{"input": "<s> fun deleteTag ( id : String ) : Void ? { apiClient . deleteTag ( id )", "gt": "localRepository . deleteTag ( id ) \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/76"}
{"input": "<s> fun retrieveTasks ( userId : String , tasksOrder : TasksOrder ) : TaskList ? { val tasks = apiClient . getTasks ( ) ? : return null", "gt": "this . localRepository . saveTasks ( userId , tasksOrder , tasks ) \n return tasks \n }", "repo": "habitica-android", "task_id": "habitica-android/80"}
{"input": "<s> fun retrieveTasks ( userId : String , tasksOrder : TasksOrder , dueDate : Date ) : TaskList ? { val formatter = SimpleDateFormat ( \" <STR_LIT> \" , Locale . US ) val taskList = this . apiClient . getTasks ( \" <STR_LIT> \" , formatter . format ( dueDate ) ) ? : return null", "gt": "this . localRepository . saveTasks ( userId , tasksOrder , taskList ) \n return taskList \n }", "repo": "habitica-android", "task_id": "habitica-android/82"}
{"input": "<s> fun markTaskNeedsWork ( task : Task , userID : String ) { val savedTask = apiClient . markTaskNeedsWork ( task . id ? : \" \" , userID ) if ( savedTask ! = null ) { savedTask . id = task . id savedTask . position = task . position savedTask . group ? . assignedUsersDetail ? . firstOrNull { it . assignedUserID = = userID } ? . let { it . completed = false", "gt": "it . completedDate = null \n } \n localRepository . save ( savedTask ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/83"}
{"input": "<s> fun scoreChecklistItem ( taskId : String , itemId : String ) : Task ? { val task = apiClient . scoreChecklistItem ( taskId , itemId ) val updatedItem : ChecklistItem ? = task ? . checklist ? . lastOrNull { itemId = = it . id }", "gt": "if ( updatedItem ! = null ) { \n localRepository . save ( updatedItem ) \n } \n return task \n }", "repo": "habitica-android", "task_id": "habitica-android/85"}
{"input": "<s> fun deleteTask ( taskId : String ) : Void ? { apiClient . deleteTask ( taskId ) ? : return null", "gt": "localRepository . deleteTask ( taskId ) \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/86"}
{"input": "<s> fun updateTaskPosition ( taskType : TaskType , taskID : String , newPosition : Int ) : List < String > ? { val positions = apiClient . postTaskNewPosition ( taskID , newPosition ) ? : return null", "gt": "localRepository . updateTaskPositions ( positions ) \n return positions \n }", "repo": "habitica-android", "task_id": "habitica-android/87"}
{"input": "<s> fun syncErroredTasks ( ) : List < Task > ? { val tasks = localRepository . getErroredTasks ( currentUserID ? : \" \" ) . firstOrNull ( ) return tasks ? . map { localRepository . getUnmanagedCopy ( it ) } ? . mapNotNull { if ( it . isCreating ) { createTask ( it , true )", "gt": "} else { \n updateTask ( it , true ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/91"}
{"input": "<s> fun syncUserStats ( ) : User ? { val user = apiClient . syncUserStats ( )", "gt": "if ( user ! = null ) { \n localRepository . saveUser ( user ) \n }", "repo": "habitica-android", "task_id": "habitica-android/92"}
{"input": "<s> fun changeClass ( selectedClass : String ? ) : User ? {", "gt": "apiClient . changeClass ( selectedClass ) \n return retrieveUser ( false , forced = true ) \n }", "repo": "habitica-android", "task_id": "habitica-android/96"}
{"input": "<s> fun readNotification ( id : String ) : List < Any > ? { if ( lastReadNotification = = id ) return null", "gt": "lastReadNotification = id \n return apiClient . readNotification ( id ) \n }", "repo": "habitica-android", "task_id": "habitica-android/98"}
{"input": "<s> fun changeCustomDayStart ( dayStartTime : Int ) : User ? { val updateObject = HashMap < String , Any > ( )", "gt": "updateObject [ \" <STR_LIT> \" ] = dayStartTime \n return apiClient . changeCustomDayStart ( updateObject ) \n }", "repo": "habitica-android", "task_id": "habitica-android/99"}
{"input": "<s> fun updateLanguage ( languageCode : String ) : User ? { val user = updateUser ( \" <STR_LIT> \" , languageCode )", "gt": "apiClient . languageCode = languageCode \n return user \n }", "repo": "habitica-android", "task_id": "habitica-android/100"}
{"input": "<s> fun resetAccount ( password : String ) : User ? {", "gt": "apiClient . resetAccount ( password ) \n return retrieveUser ( withTasks = true , forced = true ) \n }", "repo": "habitica-android", "task_id": "habitica-android/101"}
{"input": "<s> fun retrieveAchievements ( ) : List < Achievement > ? { val achievements = apiClient . getMemberAchievements ( currentUserID ) ? : return null", "gt": "localRepository . save ( achievements ) \n return achievements \n }", "repo": "habitica-android", "task_id": "habitica-android/102"}
{"input": "<s> fun retrieveTeamPlans ( ) : List < TeamPlan > ? { val teams = apiClient . getTeamPlans ( ) ? : return null teams . forEach { it . userID = currentUserID }", "gt": "localRepository . save ( teams ) \n return teams \n }", "repo": "habitica-android", "task_id": "habitica-android/103"}
{"input": "<s> < T : BaseObject > getUnmanagedCopy ( list : List < T > ) : List < T > {", "gt": "if ( isClosed ) { return emptyList ( ) } \n return realm . copyFromRealm ( list ) \n }", "repo": "habitica-android", "task_id": "habitica-android/108"}
{"input": "<s> private fun < T : RealmModel > copy ( realm : Realm , obj : T ) { try { realm . insertOrUpdate ( obj )", "gt": "} catch ( _ : java . lang . IllegalArgumentException ) { \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/109"}
{"input": "<s>", "gt": ". findAll ( ) \n . toFlow ( ) \n . filter { it . isLoaded } \n . map { it . first ( ) } \n . filterNotNull ( )", "repo": "habitica-android", "task_id": "habitica-android/117"}
{"input": "<s>", "gt": ". findAll ( ) \n . toFlow ( ) \n . filter { it . isLoaded }", "repo": "habitica-android", "task_id": "habitica-android/118"}
{"input": "<s> < Item > > {", "gt": "return realm . where ( itemClass ) . findAll ( ) . toFlow ( ) \n . filter { it . isLoaded } \n }", "repo": "habitica-android", "task_id": "habitica-android/131"}
{"input": "<s> < Item > > {", "gt": "return realm . where ( itemClass ) . ` in ` ( \" <STR_LIT> \" , keys ) . findAll ( ) . toFlow ( )", "repo": "habitica-android", "task_id": "habitica-android/132"}
{"input": "<s> fun changeOwnedCount ( type : String , key : String , userID : String , amountToAdd : Int ) { val item = getOwnedItem ( userID , type , key , true ) . firstOrNull ( ) if ( item ! = null ) {", "gt": "changeOwnedCount ( item , amountToAdd ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/138"}
{"input": "<s> override fun save ( items : Items , userID : String ) { val user = realm . where ( User : : class . java ) . equalTo ( \" <STR_LIT> \" , userID ) . findFirst ( ) ? : return", "gt": "items . setItemTypes ( ) \n executeTransaction { \n user . items = items \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/144"}
{"input": "<s> override fun updateMembership ( userId : String , id : String , isMember : Boolean ) { if ( isMember ) { save ( GroupMembership ( userId , id ) ) } else { val membership = realm . where ( GroupMembership : : class . java ) . equalTo ( \" <STR_LIT:ID> \" , userId ) . equalTo ( \" <STR_LIT:ID> \" , id ) . findFirst ( ) if ( membership ! = null ) { executeTransaction {", "gt": "membership . deleteFromRealm ( ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/149"}
{"input": "<s> override fun saveGroup ( group : Group ) { save ( group ) if ( group . quest = = null ) { val existingQuest = realm . where ( Quest : : class . java ) . equalTo ( \" <STR_LIT> \" , group . id ) . findFirst ( )", "gt": "executeTransaction { \n existingQuest ? . deleteFromRealm ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/150"}
{"input": "<s>", "gt": ". equalTo ( \" <STR_LIT> \" , partyId ) \n . findAll ( ) \n . toFlow ( )", "repo": "habitica-android", "task_id": "habitica-android/155"}
{"input": "<s> override fun rejectGroupInvitation ( userID : String , groupID : String ) { val user = realm . where ( User : : class . java ) . equalTo ( \" <STR_LIT> \" , userID ) . findFirst ( ) executeTransaction {", "gt": "user ? . invitations ? . removeInvitation ( groupID ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/157"}
{"input": "<s> override fun removeQuest ( partyId : String ) { val party = realm . where ( Group : : class . java ) . equalTo ( \" <STR_LIT> \" , partyId ) . findFirst ( ) if ( party ! = null ) {", "gt": "executeTransaction { party . quest = null } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/158"}
{"input": "<s>", "gt": ". findAll ( ) \n . toFlow ( ) \n . filter { it . isLoaded }", "repo": "habitica-android", "task_id": "habitica-android/162"}
{"input": "<s> override fun saveCompletedTodos ( userId : String , tasks : MutableCollection < Task > ) {", "gt": "removeCompletedTodos ( userId , tasks ) \n executeTransaction { realm1 - > realm1 . insertOrUpdate ( tasks ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/167"}
{"input": "<s> private fun removeCompletedTodos ( userID : String , onlineTaskList : MutableCollection < Task > ) { val localTasks = realm . where ( Task : : class . java ) . equalTo ( \" <STR_LIT:ID> \" , userID ) . equalTo ( \" <STR_LIT> \" , TaskType . TODO . value ) . equalTo ( \" <STR_LIT> \" , true ) . findAll ( ) . createSnapshot ( ) val tasksToDelete = localTasks . filterNot { onlineTaskList . contains ( it ) } executeTransaction {", "gt": "for ( localTask in tasksToDelete ) { \n localTask . deleteFromRealm ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/171"}
{"input": "<s> private fun removeOldTags ( userId : String , onlineTags : List < Tag > ) { val tags = realm . where ( Tag : : class . java ) . equalTo ( \" <STR_LIT> \" , userId ) . findAll ( ) . createSnapshot ( ) val tagsToDelete = tags . filterNot { onlineTags . contains ( it ) } executeTransaction {", "gt": "for ( tag in tagsToDelete ) { \n tag . deleteFromRealm ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/188"}
{"input": "<s> fun getTranslatedAnimalType ( c : Context ? , type : String ? ) : String ? { if ( c = = null ) { return type } return when ( type ) { \" <STR_LIT> \" - > c . getString ( R . string . standard ) \" <STR_LIT> \" - > c . getString ( R . string . quest ) \" <STR_LIT> \" - > c . getString ( R . string . wacky ) \" <STR_LIT> \" - > c . getString ( R . string . special ) \" <STR_LIT> \" - > c . getString ( R . string . magic_potion )", "gt": "else - > { \n type \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/194"}
{"input": "<s> fun withImmutableFlag ( flags : Int ) : Int { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . M ) {", "gt": "flags + PendingIntent . FLAG_IMMUTABLE \n } else { \n flags \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/199"}
{"input": "<s> fun withMutableFlag ( flags : Int ) : Int { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . S ) {", "gt": "flags + PendingIntent . FLAG_MUTABLE \n } else { \n flags \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/200"}
{"input": "<s> override fun onResume ( owner : LifecycleOwner ) {", "gt": "super . onResume ( owner ) \n lastResumeTime = Date ( ) . time \n }", "repo": "habitica-android", "task_id": "habitica-android/206"}
{"input": "<s> override fun onPause ( owner : LifecycleOwner ) { super . onPause ( owner )", "gt": "val duration = Date ( ) . time - lastResumeTime \n addDurationToDay ( duration / <NUM_LIT:1000> ) \n }", "repo": "habitica-android", "task_id": "habitica-android/207"}
{"input": "<s> override fun onActivityPaused ( activity : Activity ) { if ( currentActivity ? . get ( ) = = activity ) {", "gt": "currentActivity = null \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/211"}
{"input": "<s> fun initialize ( context : Context ) { amplitude = Amplitude ( Configuration ( context . getString ( R . string . amplitude_app_id ) ,", "gt": "context \n ) \n ) \n firebase = FirebaseAnalytics . getInstance ( context ) \n }", "repo": "habitica-android", "task_id": "habitica-android/220"}
{"input": "<s> fun identify ( sharedPrefs : SharedPreferences ) { val identify = Identify ( ) . setOnce ( \" <STR_LIT> \" , BuildConfig . STORE ) sharedPrefs . getString ( \" <STR_LIT> \" , \" \" ) ? . let { identify . set ( \" <STR_LIT> \" , it )", "gt": "} \n if ( this : : amplitude . isInitialized ) { \n amplitude . identify ( identify ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/221"}
{"input": "<s> fun handle ( name : String ? , endDate : Date ? ) { if ( endDate ! = null ) { this . eventEnd = endDate", "gt": "} \n when ( name ) { \n \" <STR_LIT> \" - > invertFools ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/228"}
{"input": "<s> private fun invertFools ( ) { < / n > } </s", "gt": "private fun invertFools ( ) { \n }", "repo": "habitica-android", "task_id": "habitica-android/229"}
{"input": "<s> private fun handleChatMessage ( type : String ? , groupID : String ? ) { when ( type ) { \" <STR_LIT> \" - > openPartyScreen ( )", "gt": "\" <STR_LIT> \" - > openGuildDetailScreen ( groupID ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/233"}
{"input": "<s> override fun configureMainIntent ( intent : Intent ) { super . configureMainIntent ( intent )", "gt": "intent . putExtra ( \" <STR_LIT> \" , data ? . get ( \" <STR_LIT> \" ) ) \n intent . putExtra ( \" <STR_LIT:ID> \" , data ? . get ( \" <STR_LIT:ID> \" ) ) \n }", "repo": "habitica-android", "task_id": "habitica-android/235"}
{"input": "<s> override fun configureMainIntent ( intent : Intent ) { super . configureMainIntent ( intent )", "gt": "intent . putExtra ( \" <STR_LIT> \" , data ? . get ( \" <STR_LIT> \" ) ) \n intent . putExtra ( \" <STR_LIT:ID> \" , data ? . get ( \" <STR_LIT:ID> \" ) ) \n }", "repo": "habitica-android", "task_id": "habitica-android/237"}
{"input": "<s> override fun configureMainIntent ( intent : Intent ) {", "gt": "super . configureMainIntent ( intent ) \n intent . putExtra ( \" <STR_LIT:ID> \" , data ? . get ( \" <STR_LIT:ID> \" ) ) \n }", "repo": "habitica-android", "task_id": "habitica-android/238"}
{"input": "<s> suspend fun removePushDeviceUsingStoredToken ( ) { if ( this . refreshedToken . isEmpty ( ) | | ! userHasPushDevice ( ) ) { return", "gt": "} \n apiClient . deletePushDevice ( refreshedToken ) \n }", "repo": "habitica-android", "task_id": "habitica-android/245"}
{"input": "<s> private fun userHasPushDevice ( ) : Boolean { for ( pushDevice in this . user ? . pushDevices ? : emptyList ( ) ) { if ( pushDevice . regId = = this . refreshedToken ) {", "gt": "return true \n } \n } \n return this . user ? . pushDevices = = null \n }", "repo": "habitica-android", "task_id": "habitica-android/246"}
{"input": "<s> private fun processedPurchase ( purchase : Purchase ) { MainScope ( ) . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userViewModel . userRepository . retrieveUser ( false , true ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/253"}
{"input": "<s> fun addGift ( sku : String , userID : String , username : String ) {", "gt": "pendingGifts [ sku ] = Triple ( Date ( ) , userID , username ) \n savePendingGifts ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/256"}
{"input": "<s> private fun incrementReviewRequestCount ( ) { val currentCount = sharedPref . getInt ( REVIEW_REQUEST_COUNT_KEY , 0 ) sharedPref . edit {", "gt": "putInt ( REVIEW_REQUEST_COUNT_KEY , currentCount + 1 ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/260"}
{"input": "<s> fun removeAlarmsForTask ( task : Task ) { CoroutineScope ( Dispatchers . IO ) . launch { task . reminders ? . let { reminders - > reminders . forEachIndexed { index , reminder - >", "gt": "removeAlarmForRemindersItem ( reminder , index ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/261"}
{"input": "<s> suspend fun scheduleAllSavedAlarms ( preventDailyReminder : Boolean ) { val tasks = taskRepository . getTaskCopies ( ) . firstOrNull ( ) tasks ? . forEach { this . setAlarmsForTask ( it ) }", "gt": "if ( ! preventDailyReminder ) { \n scheduleDailyReminder ( context ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/263"}
{"input": "<s> private fun withOrdinal ( day : Int ) : String { return if ( Build . VERSION . SDK_INT > = Build . VERSION_CODES . N ) { val formatter = MessageFormat ( \" <STR_LIT> \" , Locale . getDefault ( ) )", "gt": "formatter . format ( arrayOf ( day ) ) \n } else { \n day . toString ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/266"}
{"input": "<s> fun run ( requestValues : RequestValues ) : TaskScoringResult ? { val response = taskRepository . taskChecked ( requestValues . user , requestValues . task , false , false , requestValues . notifyFunc )", "gt": "soundManager . loadAndPlayAudio ( SoundManager . SoundReward ) \n return response \n }", "repo": "habitica-android", "task_id": "habitica-android/268"}
{"input": "<s> fun addRageStrike ( rageStrike : QuestRageStrike ) { if ( rageStrikes = = null ) { rageStrikes = RealmList ( )", "gt": "} \n rageStrikes ? . add ( rageStrike ) \n }", "repo": "habitica-android", "task_id": "habitica-android/281"}
{"input": "<s> fun getCollectWithKey ( key : String ? ) : QuestCollect ? { for ( collect in this . collect ? : emptyList < QuestCollect > ( ) ) { if ( collect . key = = key ) {", "gt": "return collect \n } \n } \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/282"}
{"input": "<s> fun hasGifImage ( ) : Boolean {", "gt": "val gifImageKeys = listOf ( \" <STR_LIT> \" ) \n return gifImageKeys . contains ( key ) \n }", "repo": "habitica-android", "task_id": "habitica-android/283"}
{"input": "<s> fun removeInvitation ( groupID : String ) { if ( party ? . id = = groupID ) { party = null } guilds ? . removeAll { it . id = = groupID }", "gt": "parties ? . removeAll { \n it . id = = groupID \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/285"}
{"input": "<s> fun hasTaskEditPrivileges ( userID : String ) : Boolean { if ( isLeader ( userID ) ) { return true", "gt": "} \n return isManager ( userID ) \n }", "repo": "habitica-android", "task_id": "habitica-android/312"}
{"input": "<s> override fun writeToParcel ( dest : Parcel , flags : Int ) { dest . writeString ( id ) dest . writeString ( text )", "gt": "dest . writeByte ( if ( completed ) <NUM_LIT> toByte ( ) else <NUM_LIT> toByte ( ) ) \n dest . writeInt ( position ) \n }", "repo": "habitica-android", "task_id": "habitica-android/314"}
{"input": "<s> override fun writeToParcel ( dest : Parcel , flags : Int ) { dest . writeString ( id )", "gt": "dest . writeString ( startDate ) \n dest . writeString ( time ) \n }", "repo": "habitica-android", "task_id": "habitica-android/318"}
{"input": "<s> fun parseMarkdown ( ) {", "gt": "parsedText = MarkdownParser . parseMarkdown ( text ) \n parsedNotes = MarkdownParser . parseMarkdown ( notes ) \n }", "repo": "habitica-android", "task_id": "habitica-android/325"}
{"input": "<s> fun markdownText ( callback : ( CharSequence ) - > Unit ) : CharSequence { if ( this . parsedText ! = null ) { return this . parsedText ? : \" \" } MarkdownParser . parseMarkdownAsync ( this . text ) { parsedText - > this . parsedText = parsedText", "gt": "callback ( parsedText ) \n } \n \n return this . text \n }", "repo": "habitica-android", "task_id": "habitica-android/326"}
{"input": "<s> fun markdownNotes ( callback : ( CharSequence ) - > Unit ) : CharSequence ? { if ( parsedNotes ! = null ) { return parsedNotes } if ( notes ? . isNotEmpty ( ) = = true ) { MarkdownParser . parseMarkdownAsync ( notes ) { parsedText - > parsedNotes = parsedText", "gt": "callback ( parsedText ) \n } \n } \n return notes \n }", "repo": "habitica-android", "task_id": "habitica-android/327"}
{"input": "<s> fun findFirstSocialEmail ( ) : String ? { for ( auth in listOf ( googleAuthentication , appleAuthentication , facebookAuthentication ) ) { if ( auth ? . emails ? . isNotEmpty ( ) = = true ) {", "gt": "return auth . emails . first ( ) \n } \n } \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/332"}
{"input": "<s> fun merge ( stats : Training ? ) { if ( stats = = null ) { return }", "gt": "con = stats . con \n str = stats . str \n per = stats . per \n _int = stats . _int \n }", "repo": "habitica-android", "task_id": "habitica-android/334"}
{"input": "<s> @ Provides fun provideKeyHelper ( @ ApplicationContext context : Context , sharedPreferences : SharedPreferences , keyStore : KeyStore ? ) : KeyHelper ? { return if ( keyStore = = null ) {", "gt": "null \n } else { \n getInstance ( context , sharedPreferences , keyStore ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/338"}
{"input": "<s> @ Provides fun providesContentRepository ( contentLocalRepository : ContentLocalRepository , apiClient : ApiClient , @ ApplicationContext context : Context , authenticationHandler : AuthenticationHandler ) : ContentRepository { return ContentRepositoryImpl ( contentLocalRepository ,", "gt": "apiClient , \n context , \n authenticationHandler \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/340"}
{"input": "<s> override fun onSetInitialValue ( defaultValue : Any ? ) { timeval = null timeval = if ( defaultValue = = null ) { getPersistedString ( \" <STR_LIT> \" )", "gt": "} else { \n getPersistedString ( defaultValue . toString ( ) ) \n } \n summary = timeval ? : \" \" \n }", "repo": "habitica-android", "task_id": "habitica-android/343"}
{"input": "<s> private fun openActivity ( event : MessageEvent , activityClass : Class < * > ) { val intent = Intent ( this , activityClass ) intent . flags = Intent . FLAG_ACTIVITY_NEW_TASK", "gt": "startActivity ( intent ) \n messageClient . sendMessage ( event . sourceNodeId , \" <STR_LIT> \" , null ) \n }", "repo": "habitica-android", "task_id": "habitica-android/345"}
{"input": "<s> override fun onReceive ( context : Context , intent : Intent ) { this . intent = intent", "gt": "this . context = context \n handleLocalNotificationAction ( intent . action ) \n }", "repo": "habitica-android", "task_id": "habitica-android/348"}
{"input": "<s> private fun showToast ( text : Spannable ) {", "gt": "val toast = Toast . makeText ( context , text , Toast . LENGTH_LONG ) \n toast . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/349"}
{"input": "<s> private fun getMessageText ( key : String ? ) : String ? { return intent ? . let {", "gt": "RemoteInput . getResultsFromIntent ( it ) ? . getCharSequence ( key ) ? . toString ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/350"}
{"input": "<s> private fun storeSelectedTaskType ( selectedTaskType : TaskType ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit {", "gt": "putString ( \" <STR_LIT> \" , selectedTaskType . value ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/354"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "lifecycleScope . launchCatching { \n delay ( <NUM_LIT> ) \n startAnimation ( true ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/358"}
{"input": "<s> private fun showDropRateDialog ( ) { val dialog = HabiticaBottomSheetDialog ( this )", "gt": "dialog . setContentView ( R . layout . armoire_drop_rate_dialog ) \n dialog . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/360"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "isActivityVisible = true \n loadTheme ( PreferenceManager . getDefaultSharedPreferences ( this ) ) \n }", "repo": "habitica-android", "task_id": "habitica-android/362"}
{"input": "<s> override fun onPause ( ) {", "gt": "isActivityVisible = false \n super . onPause ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/363"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "destroyed = true \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/366"}
{"input": "<s> fun reload ( ) { finish ( )", "gt": "overridePendingTransition ( R . anim . activity_fade_in , R . anim . activity_fade_out ) \n startActivity ( intent ) \n }", "repo": "habitica-android", "task_id": "habitica-android/369"}
{"input": "<s> private suspend fun purchaseWithGems ( ) { inventoryRepository . purchaseItem ( \" <STR_LIT> \" , \" <STR_LIT> \" , 1 )", "gt": "userRepository . retrieveUser ( false , true ) \n isPurchasing . value = false \n }", "repo": "habitica-android", "task_id": "habitica-android/370"}
{"input": "<s> public override fun onDestroy ( ) { socialRepository . close ( )", "gt": "challengeRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/374"}
{"input": "<s> private fun onAddGem ( ) { var stringValue = binding . createChallengePrize . text . toString ( ) if ( stringValue . isEmpty ( ) ) { stringValue = \" <STR_LIT:0> \" } var currentVal = Integer . parseInt ( stringValue ) currentVal + +", "gt": "binding . createChallengePrize . setText ( currentVal . toString ( ) ) \n \n checkPrizeAndMinimumForTavern ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/375"}
{"input": "<s> private fun onRemoveGem ( ) { var stringValue = binding . createChallengePrize . text . toString ( ) if ( stringValue . isEmpty ( ) ) { stringValue = \" <STR_LIT:0> \" } var currentVal = Integer . parseInt ( stringValue ) currentVal - -", "gt": "binding . createChallengePrize . setText ( currentVal . toString ( ) ) \n \n checkPrizeAndMinimumForTavern ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/376"}
{"input": "<s> private fun createTask ( taskName : String ) : Task { val t = Task ( )", "gt": "t . id = \" <STR_LIT> \" \n t . text = taskName \n \n return t \n }", "repo": "habitica-android", "task_id": "habitica-android/381"}
{"input": "<s> private fun dismiss ( ) { if ( shouldFinish = = true ) { progressDialog ? . dismiss ( )", "gt": "finish ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/387"}
{"input": "<s> private fun startAnimating ( ) { binding . ghostView . startAnimation ( Animations . bobbingAnimation ( ) )", "gt": "binding . heartView . post { \n makeCoins ( <NUM_LIT> ) \n makeCoins ( <NUM_LIT> ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/390"}
{"input": "<s> private fun setIconBackground ( view : View , color : Int ) { val backgroundDrawable = ContextCompat . getDrawable ( this , R . drawable . layout_rounded_bg ) backgroundDrawable ? . setTintWith ( color , PorterDuff . Mode . MULTIPLY )", "gt": "backgroundDrawable ? . alpha = <NUM_LIT> \n view . background = backgroundDrawable \n }", "repo": "habitica-android", "task_id": "habitica-android/393"}
{"input": "<s> private suspend fun refresh ( fromHall : Boolean ) { val member = socialRepository . retrieveMember ( userID , fromHall ) if ( member ! = null & & ! fromHall ) { updateView ( member ) this . member . value = member if ( isMyProfile ( ) & & member . loginIncentives > <NUM_LIT:10> ) { reviewManager . requestReview ( this @ FullProfileActivity , member . loginIncentives )", "gt": "} \n } else if ( member ! = null ) { \n updateAccountStatus ( member ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/395"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/396"}
{"input": "<s> private fun showBlockDialog ( ) { val dialog = HabiticaAlertDialog ( this ) dialog . setTitle ( getString ( R . string . block_user_title , userDisplayName ) ) dialog . setMessage ( R . string . block_user_description ) dialog . addButton ( R . string . block , isPrimary = true , isDestructive = true ) { _ , _ - >", "gt": "useBlock ( ) \n } \n dialog . addCancelButton ( ) \n dialog . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/398"}
{"input": "<s> private fun fillAchievements ( labelID : Int , achievements : List < Achievement > , targetList : MutableList < Any > ) { val achievementList = ArrayList ( achievements ) achievementList . sortWith { achievement , t1 - > achievement . index . toDouble ( ) . compareTo ( t1 . index . toDouble ( ) )", "gt": "} \n \n targetList . add ( getString ( labelID ) ) \n targetList . addAll ( achievementList ) \n }", "repo": "habitica-android", "task_id": "habitica-android/401"}
{"input": "<s> private fun getFloorValueString ( ` val ` : Float , roundDown : Boolean ) : String { return if ( roundDown ) { floor ( ` val ` . toDouble ( ) ) . toString ( ) } else { if ( ` val ` . toDouble ( ) = = <NUM_LIT:0.0> ) { \" <STR_LIT:0> \"", "gt": "} else { \n ` val ` . toString ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/402"}
{"input": "<s> private fun getFloorValue ( value : Float , roundDown : Boolean ) : Float { return if ( roundDown ) {", "gt": "floor ( value . toDouble ( ) ) . toFloat ( ) \n } else { \n value \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/403"}
{"input": "<s> private fun addLevelAttributes ( user : Member ) { val byLevelStat = min ( ( user . stats ? . lvl ? : 0 ) / <NUM_LIT> , <NUM_LIT> f ) addAttributeRow ( getString ( R . string . profile_level ) , byLevelStat , byLevelStat , byLevelStat ,", "gt": "byLevelStat , \n roundDown = true , \n isSummary = false \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/404"}
{"input": "<s> @ SuppressLint ( \" <STR_LIT> \" ) override fun onBackPressed ( ) {", "gt": "finish ( ) \n dismissKeyboard ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/422"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setupToolbar ( findViewById ( R . id . toolbar ) ) binding . viewPager . currentItem = 0", "gt": "supportActionBar ? . title = null \n \n setViewPagerAdapter ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/424"}
{"input": "<s> private fun createResultIntent ( ) : Intent { val intent = Intent ( )", "gt": "if ( fragments . size = = 0 ) return intent \n return intent \n }", "repo": "habitica-android", "task_id": "habitica-android/427"}
{"input": "<s> private fun storeSelectedTaskId ( selectedTaskId : String ? ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit {", "gt": "putString ( \" <STR_LIT> \" , selectedTaskId ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/431"}
{"input": "<s> private fun setupIntro ( ) { binding . viewPager . adapter = PagerAdapter ( supportFragmentManager )", "gt": "binding . viewPager . addOnPageChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/433"}
{"input": "<s> private fun finishIntro ( ) { val intent = Intent ( this , LoginActivity : : class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_CLEAR_TASK or Intent . FLAG_ACTIVITY_NEW_TASK )", "gt": "this . startActivity ( intent ) \n overridePendingTransition ( 0 , R . anim . activity_fade_out ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/434"}
{"input": "<s> override fun loadTheme ( sharedPreferences : SharedPreferences , forced : Boolean ) {", "gt": "super . loadTheme ( sharedPreferences , forced ) \n window . updateStatusBarColor ( R . color . black_20_alpha , false ) \n }", "repo": "habitica-android", "task_id": "habitica-android/439"}
{"input": "<s> override fun onBackPressed ( ) { if ( isShowingForm ) {", "gt": "hideForm ( ) \n } else { \n super . onBackPressed ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/440"}
{"input": "<s> private fun startMainActivity ( ) { val intent = Intent ( this @ LoginActivity , MainActivity : : class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_NEW_TASK )", "gt": "startActivity ( intent ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/441"}
{"input": "<s> private fun startSetupActivity ( ) { val intent = Intent ( this @ LoginActivity , SetupActivity : : class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_NEW_TASK )", "gt": "startActivity ( intent ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/442"}
{"input": "<s> private fun toggleRegistering ( ) {", "gt": "this . isRegistering = ( ! this . isRegistering ) \n this . setRegistering ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/443"}
{"input": "<s> private fun hideProgress ( ) { runOnUiThread { binding . googleLoginProgress . visibility = View . GONE", "gt": "binding . PBAsyncTask . visibility = View . GONE \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/445"}
{"input": "<s> private fun newGameButtonClicked ( ) { isRegistering = true", "gt": "showForm ( ) \n setRegistering ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/447"}
{"input": "<s> private fun showLoginButtonClicked ( ) { isRegistering = false", "gt": "showForm ( ) \n setRegistering ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/448"}
{"input": "<s> private fun backButtonClicked ( ) { if ( isShowingForm ) {", "gt": "hideForm ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/449"}
{"input": "<s> private fun showPasswordEmailConfirmation ( ) { val alert = HabiticaAlertDialog ( this ) alert . setMessage ( R . string . forgot_password_confirmation )", "gt": "alert . addOkButton ( ) \n alert . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/450"}
{"input": "<s> override fun finish ( ) {", "gt": "dismissKeyboard ( ) \n super . finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/451"}
{"input": "<s> private fun updateToolbarTitle ( destination : NavDestination , arguments : Bundle ? ) { viewModel . getToolbarTitle ( destination . id , destination . label , arguments ? . getString ( \" <STR_LIT> \" ) ) { title = it", "gt": "} \n drawerFragment ? . setSelection ( destination . id , null , false ) \n }", "repo": "habitica-android", "task_id": "habitica-android/453"}
{"input": "<s> private fun setupBottomnavigationLayoutListener ( ) { binding . content . bottomNavigation . viewTreeObserver . addOnGlobalLayoutListener { if ( binding . content . bottomNavigation . visibility = = View . VISIBLE ) { snackbarContainer . setPadding ( 0 , 0 , 0 , binding . content . bottomNavigation . barHeight + <NUM_LIT> pToPx ( this ) )", "gt": "} else { \n snackbarContainer . setPadding ( 0 , 0 , 0 , 0 ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/456"}
{"input": "<s> override fun onConfigurationChanged ( newConfig : Configuration ) {", "gt": "super . onConfigurationChanged ( newConfig ) \n drawerToggle ? . onConfigurationChanged ( newConfig ) \n }", "repo": "habitica-android", "task_id": "habitica-android/458"}
{"input": "<s> override fun onPause ( ) {", "gt": "updateWidgets ( ) \n super . onPause ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/461"}
{"input": "<s> override fun startActivity ( intent : Intent ? ) {", "gt": "resumeFromActivity = true \n super . startActivity ( intent ) \n }", "repo": "habitica-android", "task_id": "habitica-android/462"}
{"input": "<s> override fun startActivity ( intent : Intent ? , options : Bundle ? ) {", "gt": "resumeFromActivity = true \n super . startActivity ( intent , options ) \n }", "repo": "habitica-android", "task_id": "habitica-android/463"}
{"input": "<s> private fun updateWidgets ( ) { updateWidget ( AvatarStatsWidgetProvider : : class . java ) updateWidget ( TodoListWidgetProvider : : class . java )", "gt": "updateWidget ( DailiesWidgetProvider : : class . java ) \n updateWidget ( HabitButtonWidgetProvider : : class . java ) \n }", "repo": "habitica-android", "task_id": "habitica-android/464"}
{"input": "<s> override fun onBackPressed ( ) { if ( drawerFragment ? . isDrawerOpen = = true ) { drawerFragment ? . closeDrawer ( ) } else { try {", "gt": "super . onBackPressed ( ) \n } catch ( ignored : Exception ) { \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/466"}
{"input": "<s> public override fun onDestroy ( ) { userRepository . close ( )", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/467"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( ! isDeprecationNotice ) { lifecycleScope . launchCatching { val maintenanceResponse = maintenanceService . getMaintenanceStatus ( ) if ( maintenanceResponse ? . activeMaintenance = = false ) {", "gt": "finish ( ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/475"}
{"input": "<s> private fun convertGroupMessageHtml ( message : String ) : String { val pattern = \" <STR_LIT> \" . toRegex ( )", "gt": "return message . replace ( pattern , \" <STR_LIT> \" ) \n }", "repo": "habitica-android", "task_id": "habitica-android/490"}
{"input": "<s> override fun onBackPressed ( ) {", "gt": "super . onBackPressed ( ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/495"}
{"input": "<s> override fun finish ( ) {", "gt": "dismissKeyboard ( ) \n super . finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/497"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "userRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/500"}
{"input": "<s> private fun startMainActivity ( ) { val intent = Intent ( this @ SetupActivity , MainActivity : : class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_NEW_TASK )", "gt": "startActivity ( intent ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/503"}
{"input": "<s> private fun confirmNames ( displayName : String , username : String ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . updateUser ( \" <STR_LIT> \" , displayName )", "gt": "userRepository . updateLoginName ( username ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/504"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "setupToolbar ( findViewById ( R . id . toolbar ) ) \n loadMemberList ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/506"}
{"input": "<s> public override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState )", "gt": "setupToolbar ( findViewById ( R . id . toolbar ) ) \n loadTaskLists ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/507"}
{"input": "<s> fun taskSelected ( task : Task ) { val resultIntent = Intent ( ) resultIntent . putExtra ( \" <STR_LIT:ID> \" , task . id )", "gt": "setResult ( Activity . RESULT_OK , resultIntent ) \n finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/509"}
{"input": "<s> override fun onResume ( ) {", "gt": "checkIfShowNotifLayout ( ) \n super . onResume ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/512"}
{"input": "<s> override fun onStart ( ) { super . onStart ( ) if ( isCreating ) {", "gt": "binding . textEditText . requestFocus ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/514"}
{"input": "<s> private fun checkCanSave ( ) {", "gt": "val newCanSave = binding . textEditText . text ? . isNotBlank ( ) = = true \n canSave = newCanSave \n }", "repo": "habitica-android", "task_id": "habitica-android/516"}
{"input": "<s> private fun setAllTagSelections ( ) { if ( hasPreselectedTags ) { tags . forEachIndexed { index , tag - > val view = binding . tagsWrapper . getChildAt ( index ) as ? CheckBox view ? . isChecked = task ? . tags ? . find { it . id = = tag . id } ! = null", "gt": "} \n } else { \n hasPreselectedTags = true \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/517"}
{"input": "<s> private fun disableEditingForUneditableFieldsInChallengeTask ( ) { binding . textEditText . isEnabled = false binding . taskDifficultyButtons . isEnabled = false", "gt": "binding . taskSchedulingControls . isEnabled = false \n binding . habitScoringButtons . isEnabled = false \n }", "repo": "habitica-android", "task_id": "habitica-android/518"}
{"input": "<s> override fun finish ( ) {", "gt": "dismissKeyboard ( ) \n super . finish ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/519"}
{"input": "<s> private fun showAssignDialog ( ) { showAsBottomSheet { onClose - > AssignSheet ( groupMembers , assignedIDs , { if ( assignedIDs . contains ( it ) ) { assignedIDs . remove ( it ) } else { assignedIDs . add ( it ) }", "gt": "} , \n onClose \n ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/520"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setContent {", "gt": "HabiticaTheme { \n TaskSummaryView ( viewModel = viewModel ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/522"}
{"input": "<s> override fun onClick ( v : View ? ) { achievement ? . let {", "gt": "AchievementDetailDialog ( it , itemView . context ) . show ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/527"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/544"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/548"}
{"input": "<s> private fun canRaiseToMount ( pet : Pet ) : Boolean { if ( pet . type = = \" <STR_LIT> \" ) return false for ( mount in existingMounts ? : emptyList ( ) ) { if ( mount . key = = pet . key ) {", "gt": "return ! ( ownedMounts ? . get ( mount . key ) ? . owned ? : false ) \n } \n } \n return false \n }", "repo": "habitica-android", "task_id": "habitica-android/550"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/553"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/554"}
{"input": "<s> private fun getGearItemCount ( ) : Int { return if ( selectedGearCategory = = \" \" ) { 0 } else { val selectedCategory : ShopCategory ? = getSelectedShopCategory ( ) if ( selectedCategory ! = null ) { if ( selectedCategory . items . size = = 0 ) { <NUM_LIT:2> } else { selectedCategory . items . size + 1 }", "gt": "} else { \n 0 \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/558"}
{"input": "<s> fun setOwnedItems ( ownedItems : Map < String , OwnedItem > ) { this . ownedItems = ownedItems if ( items . size > 0 ) {", "gt": "this . notifyDataSetChanged ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/559"}
{"input": "<s> private fun canRaiseToMount ( pet : Pet ) : Boolean { if ( pet . type = = \" <STR_LIT> \" ) return false for ( mount in existingMounts ? : emptyList ( ) ) { if ( mount . key = = pet . key ) {", "gt": "return ! ( ownedMounts ? . get ( mount . key ) ? . owned ? : false ) \n } \n } \n return false \n }", "repo": "habitica-android", "task_id": "habitica-android/562"}
{"input": "<s> fun setOwnedPets ( ownedPets : Map < String , OwnedPet > ) {", "gt": "this . ownedPets = ownedPets \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/563"}
{"input": "<s> fun setOwnedMounts ( ownedMounts : Map < String , OwnedMount > ) {", "gt": "this . ownedMounts = ownedMounts \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/564"}
{"input": "<s> fun setEggs ( eggs : Map < String , Egg > ) {", "gt": "this . eggs = eggs \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/568"}
{"input": "<s> fun updateItem ( item : HabiticaDrawerItem ) { val position = getItemPosition ( item . identifier )", "gt": "items [ position ] = item \n notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/570"}
{"input": "<s> override fun onClick ( v : View ) { val position = this . bindingAdapterPosition", "gt": "checkedList [ position ] = ! checkedList [ position ] \n notifyItemChanged ( position ) \n }", "repo": "habitica-android", "task_id": "habitica-android/576"}
{"input": "<s> override fun onClick ( v : View ) { if ( v = = itemView ) {", "gt": "task ? . let { \n onTaskSelection ? . invoke ( it ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/583"}
{"input": "<s> override fun onClick ( view : View ) { achievement ? . let {", "gt": "AchievementDetailDialog ( it , itemView . context ) . show ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/588"}
{"input": "<s> override fun bind ( data : Task , position : Int , displayMode : String ) {", "gt": "this . newTask = data \n addBtn . text = data . text \n }", "repo": "habitica-android", "task_id": "habitica-android/594"}
{"input": "<s> override fun onBindViewHolder ( holder : ChallengeViewHolder , position : Int ) { data [ position ] . let { challenge - > holder . bind ( challenge , challengeMemberships ? . first { challenge . id = = it . challengeID } ! = null ) holder . itemView . setOnClickListener { if ( challenge . isManaged & & challenge . isValid ) { challenge . id ? . let { onOpenChallengeFragment ? . invoke ( it )", "gt": "} \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/595"}
{"input": "<s> private fun expandMessage ( message : ChatMessage , position : Int ? ) { expandedMessageId = if ( expandedMessageId = = message . id ) { null", "gt": "} else { \n message . id \n } \n notifyItemChanged ( position ? : data . indexOf ( message ) ) \n }", "repo": "habitica-android", "task_id": "habitica-android/600"}
{"input": "<s> private fun expandMessage ( id : String , position : Int ) { if ( isPositionIntroMessage ( position ) ) { return } expandedMessageId = if ( expandedMessageId = = id ) { null", "gt": "} else { \n id \n } \n notifyItemChanged ( position ) \n }", "repo": "habitica-android", "task_id": "habitica-android/603"}
{"input": "<s> override fun onBindViewHolder ( holder : GroupMemberViewHolder , position : Int ) { holder . bind ( data [ position ] , leaderID , null ) holder . onClickEvent = {", "gt": "onUserClicked ? . invoke ( data [ position ] . id ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/604"}
{"input": "<s> override fun onBindViewHolder ( holder : VH , position : Int ) { val item = filteredContent ? . get ( position ) if ( item ! = null ) {", "gt": "holder . bind ( item , position , \" <STR_LIT> \" ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/605"}
{"input": "<s> fun filter ( ) { if ( this . viewModel . filterCount ( taskType ) = = 0 ) { filteredContent = content } else { filteredContent = ArrayList ( ) content ? . let { filteredContent ? . addAll ( this . viewModel . filter ( it ) )", "gt": "} \n } \n \n this . notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/608"}
{"input": "<s> final override fun filter ( ) { val unfilteredData = this . unfilteredData ? : return if ( unfilteredData is OrderedRealmCollection ) { val query = viewModel . createQuery ( unfilteredData ) if ( query ! = null ) { data = query . findAll ( )", "gt": "} \n } else { \n data = unfilteredData \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/614"}
{"input": "<s> private fun openGooglePlay ( ) { val intent = Intent ( Intent . ACTION_VIEW )", "gt": "intent . data = \" <STR_LIT> \" . toUri ( ) \n startActivity ( intent ) \n }", "repo": "habitica-android", "task_id": "habitica-android/620"}
{"input": "<s> private fun openBrowserLink ( url : String ) { val uriUrl = url . toUri ( )", "gt": "val launchBrowser = Intent ( Intent . ACTION_VIEW , uriUrl ) \n startActivity ( launchBrowser ) \n }", "repo": "habitica-android", "task_id": "habitica-android/622"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "outState . putBoolean ( \" <STR_LIT> \" , useGridLayout ) \n super . onSaveInstanceState ( outState ) \n }", "repo": "habitica-android", "task_id": "habitica-android/625"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launchCatching {", "gt": "userRepository . retrieveAchievements ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/627"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n showTutorialIfNeeded ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/629"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/630"}
{"input": "<s> override fun onDestroy ( ) { try { tutorialRepository . close ( )", "gt": "} catch ( exception : UninitializedPropertyAccessException ) { } \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/631"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n showTutorialIfNeeded ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/633"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "binding = null \n super . onDestroyView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/634"}
{"input": "<s> override fun onDestroy ( ) { try { tutorialRepository . close ( )", "gt": "} catch ( exception : UninitializedPropertyAccessException ) { } \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/635"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n binding = null \n }", "repo": "habitica-android", "task_id": "habitica-android/636"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "userRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/640"}
{"input": "<s> private fun disableToolbarScrolling ( ) {", "gt": "val params = collapsingToolbar ? . layoutParams as ? AppBarLayout . LayoutParams \n params ? . scrollFlags = 0 \n }", "repo": "habitica-android", "task_id": "habitica-android/641"}
{"input": "<s> protected fun tintMenuIcon ( item : MenuItem ? ) { context ? . getThemeColor ( R . attr . headerTextColor ) ? . let { item ? . icon ? . setTint ( it )", "gt": "item ? . icon ? . setTintMode ( PorterDuff . Mode . MULTIPLY ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/643"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "customizationRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/644"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/649"}
{"input": "<s> private fun setGridSpanCount ( width : Int ) { val itemWidth = context ? . resources ? . getDimension ( R . dimen . customization_width ) ? : <NUM_LIT> var spanCount = ( width / itemWidth ) . toInt ( )", "gt": "if ( spanCount = = 0 ) { \n spanCount = 1 \n } \n layoutManager . spanCount = spanCount \n }", "repo": "habitica-android", "task_id": "habitica-android/651"}
{"input": "<s> fun updateUser ( user : User ? ) { this . updateActiveCustomization ( user )", "gt": "this . adapter . gemBalance = user ? . gemCount ? : 0 \n adapter . notifyDataSetChanged ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/652"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/653"}
{"input": "<s> private fun displayCustomizationFragment ( type : String , category : String ? ) { MainNavigationController . navigate ( AvatarOverviewFragmentDirections . openAvatarDetail (", "gt": "type , \n category ? : \" \" \n ) \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/654"}
{"input": "<s> override fun onCreateOptionsMenu ( menu : Menu , inflater : MenuInflater ) {", "gt": "super . onCreateOptionsMenu ( menu , inflater ) \n inflater . inflate ( R . menu . menu_share_avatar , menu ) \n }", "repo": "habitica-android", "task_id": "habitica-android/655"}
{"input": "<s> override fun onItemSelected ( parent : AdapterView < * > , view : View ? , position : Int , id : Long ) { val newSize : String = if ( position = = 0 ) \" <STR_LIT> \" else \" <STR_LIT> \"", "gt": "lifecycleScope . launchCatching { \n userRepository . updateUser ( \" <STR_LIT> \" , newSize ) \n }", "repo": "habitica-android", "task_id": "habitica-android/656"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "showCustomization = false \n super . onCreate ( savedInstanceState ) \n }", "repo": "habitica-android", "task_id": "habitica-android/657"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/658"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/659"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/660"}
{"input": "<s> override fun onResume ( ) { if ( ( this . isHatching | | this . isFeeding ) & & dialog ? . window ! = null ) { val params = dialog ? . window ? . attributes params ? . width = ViewGroup . LayoutParams . MATCH_PARENT params ? . verticalMargin = <NUM_LIT> f", "gt": "dialog ? . window ? . attributes = params \n } \n \n super . onResume ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/663"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( ITEM_TYPE_KEY , this . itemType ) \n }", "repo": "habitica-android", "task_id": "habitica-android/664"}
{"input": "<s> private fun hatchPet ( potion : HatchingPotion , egg : Egg ) { dismiss ( ) val activity = activity ? : return activity . lifecycleScope . launchCatching { hatchPetUseCase . callInteractor ( HatchPetUseCase . RequestValues ( potion , egg ,", "gt": "activity \n ) \n ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/665"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/666"}
{"input": "<s> private fun onSpecialItemSelected ( specialItem : SpecialItem ) { selectedSpecialItem = specialItem", "gt": "val intent = Intent ( activity , SkillMemberActivity : : class . java ) \n memberSelectionResult . launch ( intent ) \n }", "repo": "habitica-android", "task_id": "habitica-android/671"}
{"input": "<s> private fun displaySpecialItemResult ( specialItem : SpecialItem ? ) { if ( ! isAdded ) return val activity = activity as ? MainActivity activity ? . let { HabiticaSnackbar . showSnackbar ( it . snackbarContainer , context ? . getString ( R . string . used_skill_without_mana , specialItem ? . text ) , HabiticaSnackbar . SnackbarDisplayType . BLUE", "gt": ") \n } \n \n loadItems ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/673"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) binding ? . viewPager ? . currentItem = 0 setViewPagerAdapter ( ) arguments ? . let { val args = ItemsFragmentArgs . fromBundle ( it ) binding ? . viewPager ? . currentItem = when ( args . itemType ) { \" <STR_LIT> \" - > 1 \" <STR_LIT> \" - > <NUM_LIT:2> \" <STR_LIT> \" - > <NUM_LIT:3>", "gt": "\" <STR_LIT> \" - > <NUM_LIT:4> \n else - > 0 \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/675"}
{"input": "<s> override fun onDestroyView ( ) { inventoryRepository . close ( ) socialRepository . close ( )", "gt": "toolbarAccessoryContainer ? . removeView ( currencyView ) \n super . onDestroyView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/682"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( shop = = null ) {", "gt": "loadShopInventory ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/684"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( SHOP_IDENTIFIER_KEY , this . shopIdentifier ) \n }", "repo": "habitica-android", "task_id": "habitica-android/685"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/691"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( ANIMAL_TYPE_KEY , this . animalType ) \n }", "repo": "habitica-android", "task_id": "habitica-android/692"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( false , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/694"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/696"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n mainActivity ? . title = animalType \n }", "repo": "habitica-android", "task_id": "habitica-android/697"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( ANIMAL_TYPE_KEY , this . animalType ) \n }", "repo": "habitica-android", "task_id": "habitica-android/698"}
{"input": "<s> private fun setGridSpanCount ( width : Int ) { var spanCount = 0 if ( context ! = null & & context ? . resources ! = null ) { val animalWidth = R . dimen . pet_width val itemWidth : Float = context ? . resources ? . getDimension ( animalWidth ) ? : <NUM_LIT> toFloat ( ) spanCount = ( width / itemWidth ) . toInt ( ) }", "gt": "if ( spanCount = = 0 ) { \n spanCount = 1 \n } \n layoutManager ? . spanCount = spanCount \n }", "repo": "habitica-android", "task_id": "habitica-android/699"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( false , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/700"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) binding ? . viewPager ? . currentItem = 0", "gt": "setViewPagerAdapter ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/702"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/704"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( ITEM_TYPE_KEY , viewModel . itemType ) \n }", "repo": "habitica-android", "task_id": "habitica-android/705"}
{"input": "<s> private fun setGridSpanCount ( width : Int ) { var spanCount = 0 if ( context ! = null & & context ? . resources ! = null ) { val animalWidth = if ( viewModel . itemType = = \" <STR_LIT> \" ) R . dimen . pet_width else R . dimen . mount_width val itemWidth : Float = context ? . resources ? . getDimension ( animalWidth ) ? : <NUM_LIT> toFloat ( ) spanCount = ( width / itemWidth ) . toInt ( ) }", "gt": "if ( spanCount = = 0 ) { \n spanCount = 1 \n } \n layoutManager ? . spanCount = spanCount \n }", "repo": "habitica-android", "task_id": "habitica-android/706"}
{"input": "<s> override fun onRefresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( true , true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/707"}
{"input": "<s> private fun createUpdatingJob ( key : String , endingCondition : ( ) - > Boolean , delayFunc : ( ) - > Duration , function : ( ) - > Unit ) { function ( ) if ( updatingJobs [ key ] ? . isActive = = true ) { updatingJobs [ key ] ? . cancel ( ) } updatingJobs [ key ] = lifecycleScope . launch ( Dispatchers . Main ) { while ( endingCondition ( ) ) {", "gt": "function ( ) \n delay ( delayFunc ( ) ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/708"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putInt ( STATE_SELECTED_POSITION , mCurrentSelectedPosition ) \n }", "repo": "habitica-android", "task_id": "habitica-android/715"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . updateUser ( \" <STR_LIT> \" , false ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/721"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n preferenceManager . sharedPreferences ? . registerOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/723"}
{"input": "<s> override fun onPause ( ) {", "gt": "preferenceManager . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this ) \n super . onPause ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/724"}
{"input": "<s> private fun displayAuthenticationSuccess ( network : String ) { ( activity as ? SnackbarActivity ) ? . showSnackbar ( content = context ? . getString ( R . string . added_social_auth , network ) ,", "gt": "displayType = HabiticaSnackbar . SnackbarDisplayType . SUCCESS \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/726"}
{"input": "<s> private fun displayDisconnectSuccess ( network : String ) { ( activity as ? SnackbarActivity ) ? . showSnackbar ( content = context ? . getString ( R . string . removed_social_auth , network ) ,", "gt": "displayType = HabiticaSnackbar . SnackbarDisplayType . SUCCESS \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/727"}
{"input": "<s> private fun showLoginNameDialog ( ) { showSingleEntryDialog ( user ? . username , getString ( R . string . username ) , { it ? . contains ( \" \" ) = = false & & it . length > 1 & & it . length < <NUM_LIT:20> & & ! it . contains ( regex ) } ) { lifecycleScope . launchCatching { val user = userRepository . updateLoginName ( it ? : \" \" ) if ( user = = null | | user . username ! = it ) {", "gt": "userRepository . retrieveUser ( false , forced = true ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/729"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "userRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/733"}
{"input": "<s> override fun onCreatePreferences ( savedInstanceState : Bundle ? , rootKey : String ? ) {", "gt": "setPreferencesFromResource ( R . xml . preferences_fragment , rootKey ) \n setupPreferences ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/734"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n preferenceScreen . sharedPreferences ? . registerOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/735"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n preferenceScreen . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/736"}
{"input": "<s> private fun updatePreference ( key : String , isChecked : Boolean ? ) {", "gt": "val preference = ( findPreference ( key ) as ? CheckBoxPreference ) \n preference ? . isChecked = isChecked = = true \n }", "repo": "habitica-android", "task_id": "habitica-android/737"}
{"input": "<s> override fun onCreate ( savedInstanceState : Bundle ? ) {", "gt": "super . onCreate ( savedInstanceState ) \n setStyle ( STYLE_NO_TITLE , R . style . HabiticaAlertDialogTheme ) \n }", "repo": "habitica-android", "task_id": "habitica-android/738"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) listView . itemAnimator = null", "gt": "lifecycleScope . launchCatching { \n userRepository . retrieveTeamPlans ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/742"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n preferenceManager . sharedPreferences ? . registerOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/743"}
{"input": "<s> override fun onPause ( ) {", "gt": "preferenceManager . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this ) \n super . onPause ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/744"}
{"input": "<s> private fun logout ( ) { context ? . let { context - > val dialog = HabiticaAlertDialog ( context ) dialog . setTitle ( R . string . are_you_sure ) dialog . addButton ( R . string . logout , true ) { _ , _ - > HabiticaBaseApplication . logout ( context ) activity ? . finish ( )", "gt": "} \n dialog . addCancelButton ( ) \n dialog . show ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/746"}
{"input": "<s> override fun onDisplayPreferenceDialog ( preference : Preference ) { if ( preference is TimePreference ) { if ( parentFragmentManager . findFragmentByTag ( TimePreferenceDialogFragment . TAG ) = = null ) { TimePreferenceDialogFragment . newInstance ( this , preference . getKey ( ) ) . show ( parentFragmentManager , TimePreferenceDialogFragment . TAG )", "gt": "} \n } else { \n super . onDisplayPreferenceDialog ( preference ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/747"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n preferenceScreen . sharedPreferences ? . registerOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/748"}
{"input": "<s> override fun onPause ( ) {", "gt": "super . onPause ( ) \n preferenceScreen . sharedPreferences ? . unregisterOnSharedPreferenceChangeListener ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/749"}
{"input": "<s> private fun updatePreference ( key : String , isChecked : Boolean ? ) {", "gt": "val preference = ( findPreference ( key ) as ? CheckBoxPreference ) \n preference ? . isChecked = isChecked = = true \n }", "repo": "habitica-android", "task_id": "habitica-android/750"}
{"input": "<s> override fun onDialogClosed ( positiveResult : Boolean ) { if ( positiveResult ) { val preference = timePreference val time = newTimeValue preference . summary = time", "gt": "if ( preference . callChangeListener ( time ) ) { \n preference . text = time \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/752"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "val promo = configManager . activePromo ( ) \n promo ? . configureInfoFragment ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/755"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n mainActivity ? . title = \" \" \n }", "repo": "habitica-android", "task_id": "habitica-android/756"}
{"input": "<s> private fun setGemsForGoldEventSubscriptionViews ( ) { binding . subscribeBenefits . text = getString ( R . string . subscribe_gems_for_gold_incentive_text )", "gt": "binding . subscriberBenefits . hideGemsForGoldBenefit ( ) \n binding . subscription3month . visibility = View . GONE \n }", "repo": "habitica-android", "task_id": "habitica-android/761"}
{"input": "<s> private fun loadInventory ( ) { CoroutineScope ( Dispatchers . IO ) . launch ( ExceptionHandler . coroutine ( ) ) { val skus = purchaseHandler . getAllGemSKUs ( ) withContext ( Dispatchers . Main ) { for ( sku in skus ) {", "gt": "updateButtonLabel ( sku ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/764"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "binding ? . giftButton ? . setOnClickListener { sendGift ( ) } \n updateMemberViews ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/767"}
{"input": "<s> private fun purchaseGems ( sku : ProductDetails ) { giftedMember ? . id ? . let {", "gt": "activity ? . let { it1 - > purchaseHandler ? . purchase ( it1 , sku , it , giftedMember ? . username ) } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/769"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) lifecycleScope . launchCatching {", "gt": "purchaseHandler . queryPurchases ( ) \n } \n refresh ( ) \n loadInventory ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/772"}
{"input": "<s> private fun refresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . retrieveUser ( false , true ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/773"}
{"input": "<s> private fun updateButtonLabel ( sku : ProductDetails , price : String ) { val matchingView = buttonForSku ( sku ) if ( matchingView ! = null ) { matchingView . setPriceText ( price ) matchingView . sku = sku . productId", "gt": "matchingView . setOnPurchaseClickListener { \n selectSubscription ( sku ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/774"}
{"input": "<s> private fun purchaseSubscription ( ) { selectedSubscriptionSku ? . let { sku - > activity ? . let {", "gt": "purchaseHandler . purchase ( it , sku ) \n dismiss ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/777"}
{"input": "<s> fun setUser ( newUser : User ) { user = newUser", "gt": "this . updateSubscriptionInfo ( ) \n checkIfNeedsCancellation ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/778"}
{"input": "<s> private fun updateSubscriptionInfo ( ) { if ( hasLoadedSubscriptionOptions ) { binding . subscriptionOptions . visibility = View . VISIBLE binding . loadingIndicator . visibility = View . GONE", "gt": "} \n if ( user ! = null ) { \n binding . loadingIndicator . visibility = View . GONE \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/779"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) lifecycleScope . launchCatching {", "gt": "purchaseHandler . queryPurchases ( ) \n } \n refresh ( ) \n loadInventory ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/780"}
{"input": "<s> private fun refresh ( ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) { userRepository . retrieveUser ( withTasks = false , forced = true )", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/781"}
{"input": "<s> private fun updateButtonLabel ( sku : ProductDetails , price : String ) { val matchingView = buttonForSku ( sku ) if ( matchingView ! = null ) { matchingView . setPriceText ( price ) matchingView . sku = sku . productId", "gt": "matchingView . setOnPurchaseClickListener { \n selectSubscription ( sku ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/782"}
{"input": "<s> private fun purchaseSubscription ( ) { selectedSubscriptionSku ? . let { sku - >", "gt": "activity ? . let { \n purchaseHandler . purchase ( it , sku ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/785"}
{"input": "<s> fun setUser ( newUser : User ) { user = newUser", "gt": "this . updateSubscriptionInfo ( ) \n checkIfNeedsCancellation ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/786"}
{"input": "<s> private fun updateAvatar ( ) { user ? . let {", "gt": "binding ? . avatarView ? . setAvatar ( it ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/793"}
{"input": "<s> fun setImage ( image : Drawable ? ) { this . image = image if ( image ! = null ) {", "gt": "binding ? . imageView ? . setImageDrawable ( image ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/795"}
{"input": "<s> fun setTitleImage ( image : Drawable ? ) {", "gt": "this . titleImage = image \n binding ? . titleImageView ? . setImageDrawable ( image ) \n }", "repo": "habitica-android", "task_id": "habitica-android/796"}
{"input": "<s> fun setSubtitle ( text : String ? ) {", "gt": "this . subtitle = text \n binding ? . subtitleTextView ? . text = text \n }", "repo": "habitica-android", "task_id": "habitica-android/797"}
{"input": "<s> fun setTitle ( text : String ? ) {", "gt": "this . title = text \n binding ? . titleTextView ? . text = text \n }", "repo": "habitica-android", "task_id": "habitica-android/798"}
{"input": "<s> fun setDescription ( text : String ? ) {", "gt": "this . description = text \n binding ? . descriptionTextView ? . text = text \n }", "repo": "habitica-android", "task_id": "habitica-android/799"}
{"input": "<s> fun setBackgroundColor ( color : Int ) {", "gt": "this . backgroundColor = color \n binding ? . containerView ? . setBackgroundColor ( color ) \n }", "repo": "habitica-android", "task_id": "habitica-android/800"}
{"input": "<s> override fun onResume ( ) { super . onResume ( ) if ( context ! = null ) {", "gt": "binding ? . speechBubble ? . animateText ( context ? . getString ( R . string . task_setup_description ) ? : \" \" ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/801"}
{"input": "<s> fun setUser ( user : User ? ) { this . user = user if ( binding ? . avatarView ! = null ) {", "gt": "updateAvatar ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/802"}
{"input": "<s> private fun updateAvatar ( ) { user ? . let {", "gt": "binding ? . avatarView ? . setAvatar ( it ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/803"}
{"input": "<s> private fun allClicked ( ) {", "gt": "this . adapter ? . checkedEntries ? . clear ( ) \n adapter ? . checkedEntries ? . addAll ( filterGroups ) \n }", "repo": "habitica-android", "task_id": "habitica-android/816"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "challengeRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/817"}
{"input": "<s> override fun onRefresh ( ) { nextPageToLoad = 0", "gt": "loadedAllData = false \n retrieveChallengesPage ( true ) \n }", "repo": "habitica-android", "task_id": "habitica-android/819"}
{"input": "<s> private fun changeFilter ( challengeFilterOptions : ChallengeFilterOptions ) {", "gt": "filterOptions = challengeFilterOptions \n challengeAdapter ? . filter ( challengeFilterOptions ) \n }", "repo": "habitica-android", "task_id": "habitica-android/821"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n getActiveFragment ( ) ? . retrieveChallengesPage ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/824"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "challengeRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/825"}
{"input": "<s> private fun getActiveFragment ( ) : ChallengeListFragment ? { return if ( binding ? . viewPager ? . currentItem = = 0 ) {", "gt": "userChallengesFragment \n } else { \n availableChallengesFragment \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/826"}
{"input": "<s> override fun onResume ( ) {", "gt": "super . onResume ( ) \n setNavigatedToFragment ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/827"}
{"input": "<s> private fun refresh ( ) { viewModel . retrieveGroupChat { if ( isScrolledToBottom | | isFirstRefresh ) {", "gt": "binding ? . recyclerView ? . scrollToPosition ( 0 ) \n } \n isFirstRefresh = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/829"}
{"input": "<s> fun setNavigatedToFragment ( ) {", "gt": "navigatedOnceToFragment = true \n markMessagesAsSeen ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/830"}
{"input": "<s> private fun markMessagesAsSeen ( ) { if ( navigatedOnceToFragment ) {", "gt": "viewModel . markMessagesSeen ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/831"}
{"input": "<s> private fun showDeleteConfirmationDialog ( chatMessage : ChatMessage ) { val context = context if ( context ! = null ) { val dialog = HabiticaAlertDialog ( context ) dialog . setTitle ( R . string . confirm_delete_tag_title ) dialog . setMessage ( R . string . confirm_delete_tag_message ) dialog . addButton ( R . string . yes , true , true ) { _ , _ - >", "gt": "viewModel . deleteMessage ( chatMessage ) \n } \n dialog . show ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/832"}
{"input": "<s> private fun sendChatMessage ( chatText : String ) { viewModel . postGroupChat ( chatText ,", "gt": "{ binding ? . recyclerView ? . scrollToPosition ( 0 ) } \n ) { binding ? . chatBarView ? . message = chatText } \n }", "repo": "habitica-android", "task_id": "habitica-android/834"}
{"input": "<s> private fun refresh ( ) { viewModel . retrieveGroup {", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/837"}
{"input": "<s> override fun onResume ( ) { if ( viewModel . recipientID ? . isNotBlank ( ) ! = true & & viewModel . recipientUsername ? . isNotBlank ( ) ! = true ) { parentFragmentManager . popBackStack ( )", "gt": "} \n super . onResume ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/845"}
{"input": "<s> override fun onAttach ( context : Context ) { view ? . invalidate ( ) view ? . forceLayout ( )", "gt": "super . onAttach ( context ) \n }", "repo": "habitica-android", "task_id": "habitica-android/846"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "socialRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/847"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState ) binding ? . inboxRefreshLayout ? . setOnRefreshListener ( this ) userViewModel . user . observe ( viewLifecycleOwner ) { binding ? . optOutView ? . visibility = if ( it ? . inbox ? . optOut = = true ) View . VISIBLE else View . GONE", "gt": "} \n \n loadMessages ( ) \n retrieveMessages ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/852"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "socialRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/854"}
{"input": "<s> override fun onCreateOptionsMenu ( menu : Menu , inflater : MenuInflater ) { this . mainActivity ? . menuInflater ? . inflate ( R . menu . inbox , menu ) val item = menu . findItem ( R . id . send_message )", "gt": "tintMenuIcon ( item ) \n super . onCreateOptionsMenu ( menu , inflater ) \n }", "repo": "habitica-android", "task_id": "habitica-android/855"}
{"input": "<s> private fun retrieveMessages ( ) { lifecycleScope . launchCatching { socialRepository . retrieveInboxConversations ( )", "gt": "binding ? . inboxRefreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/857"}
{"input": "<s> override fun onRefresh ( ) {", "gt": "binding ? . inboxRefreshLayout ? . isRefreshing = true \n retrieveMessages ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/858"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "socialRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/862"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroyView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/863"}
{"input": "<s> private fun refreshParty ( ) { viewModel . retrieveGroup {", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/864"}
{"input": "<s> private fun onQuestAccept ( ) {", "gt": "HapticFeedbackManager . tap ( requireView ( ) ) \n viewModel . acceptQuest ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/866"}
{"input": "<s> private fun onQuestReject ( ) {", "gt": "HapticFeedbackManager . tap ( requireView ( ) ) \n viewModel . rejectQuest ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/867"}
{"input": "<s> private fun showQuestMechanicsDialog ( ) { val dialog = HabiticaBottomSheetDialog ( requireContext ( ) )", "gt": "dialog . setContentView ( R . layout . quest_mechanics_dialog ) \n dialog . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/868"}
{"input": "<s> private fun updateGroupUI ( group : Group ? ) { viewPagerAdapter ? . notifyDataSetChanged ( ) if ( group = = null ) { tabLayout ? . visibility = View . GONE return } else {", "gt": "tabLayout ? . visibility = View . VISIBLE \n } \n \n this . mainActivity ? . invalidateOptionsMenu ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/871"}
{"input": "<s> fun uUIDFromStringOrNull ( name : String ) : UUID ? { return try {", "gt": "UUID . fromString ( name ) \n } catch ( _ : IllegalArgumentException ) { \n null \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/873"}
{"input": "<s> override fun onViewCreated ( view : View , savedInstanceState : Bundle ? ) { super . onViewCreated ( view , savedInstanceState )", "gt": "setViewPagerAdapter ( ) \n binding ? . viewPager ? . currentItem = 0 \n }", "repo": "habitica-android", "task_id": "habitica-android/876"}
{"input": "<s> override fun onStart ( ) {", "gt": "super . onStart ( ) \n Analytics . sendEvent ( \" <STR_LIT> \" , EventCategory . NAVIGATION , HitType . EVENT ) \n }", "repo": "habitica-android", "task_id": "habitica-android/879"}
{"input": "<s> override fun getRefreshKey ( state : PagingState < Int , Member > ) : Int ? { return state . anchorPosition ? . let { anchorPosition - > state . closestPageToPosition ( anchorPosition ) ? . prevKey ? . plus ( 1 )", "gt": "? : state . closestPageToPosition ( anchorPosition ) ? . nextKey ? . minus ( 1 ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/880"}
{"input": "<s> override fun onDestroyView ( ) { socialRepository . close ( ) userRepository . close ( )", "gt": "inventoryRepository . close ( ) \n super . onDestroyView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/883"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/885"}
{"input": "<s> private fun showBulkAllocateDialog ( ) { context ? . let { context - > val dialog = BulkAllocateStatsDialog ( context , userRepository )", "gt": "dialog . show ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/886"}
{"input": "<s> private fun showHelpAlert ( resourceId : Int ) { val alert = context ? . let { HabiticaAlertDialog ( it ) } alert ? . setMessage ( resourceId )", "gt": "alert ? . addOkButton ( ) \n alert ? . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/888"}
{"input": "<s> private fun allocatePoint ( stat : Attribute ) { lifecycleScope . launchCatching {", "gt": "userRepository . allocatePoint ( stat ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/889"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "faqRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/893"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "faqRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/895"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "inventoryRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/897"}
{"input": "<s> private fun scoreChecklistItem ( task : Task , item : ChecklistItem ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "taskRepository . scoreChecklistItem ( task . id ? : \" \" , item . id ? : \" \" ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/900"}
{"input": "<s> override fun onDestroyView ( ) {", "gt": "super . onDestroyView ( ) \n itemTouchCallback = null \n }", "repo": "habitica-android", "task_id": "habitica-android/903"}
{"input": "<s> override fun onDestroy ( ) {", "gt": "userRepository . close ( ) \n super . onDestroy ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/904"}
{"input": "<s> private fun scoreTask ( task : Task , direction : TaskDirection ) { viewModel . scoreTask ( task , direction ) { result , value - >", "gt": "handleTaskResult ( result , value ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/905"}
{"input": "<s> override fun onSaveInstanceState ( outState : Bundle ) {", "gt": "super . onSaveInstanceState ( outState ) \n outState . putString ( CLASS_TYPE_KEY , this . taskType . value ) \n }", "repo": "habitica-android", "task_id": "habitica-android/906"}
{"input": "<s> override fun onRefresh ( ) { binding ? . refreshLayout ? . isRefreshing = true viewModel . refreshData {", "gt": "binding ? . refreshLayout ? . isRefreshing = false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/907"}
{"input": "<s> override fun onResume ( ) { super . onResume ( )", "gt": "context ? . let { recyclerAdapter ? . taskDisplayMode = configManager . taskDisplayMode ( it ) } \n setInnerAdapter ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/908"}
{"input": "<s> override fun onPause ( ) { if ( bottomNavigation ? . listener = = this ) { bottomNavigation ? . listener = null", "gt": "} \n super . onPause ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/911"}
{"input": "<s> private fun indexForTaskType ( taskType : TaskType ? ) : Int { if ( taskType ! = null ) { for ( index in 0 until ( viewFragmentsDictionary ? . size ? : 0 ) ) { val fragment = viewFragmentsDictionary ? . get ( index ) if ( fragment ! = null & & taskType = = fragment . className ) { return index", "gt": "} \n } \n } \n return - 1 \n }", "repo": "habitica-android", "task_id": "habitica-android/915"}
{"input": "<s> fun dismissKeyboard ( act : Activity ? ) { if ( act ! = null & & act . currentFocus ! = null ) { val inputMethodManager = act . getSystemService ( Activity . INPUT_METHOD_SERVICE ) as ? InputMethodManager", "gt": "inputMethodManager ? . hideSoftInputFromWindow ( act . currentFocus ? . windowToken , 0 ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/920"}
{"input": "<s> override fun getItemOffsets ( outRect : Rect , view : View , parent : RecyclerView , state : RecyclerView . State ) { val position = parent . getChildAdapterPosition ( view ) val viewType : Int ? = parent . adapter ? . getItemViewType ( position ) if ( noMarginViewTypes . contains ( viewType ) ) {", "gt": "outRect . setEmpty ( ) \n } else { \n outRect . set ( margin , margin , margin , margin ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/921"}
{"input": "<s> private fun updateAdapter ( newAdapter : Adapter < * > ? ) { if ( adapter ! = newAdapter ) {", "gt": "super . setAdapter ( newAdapter ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/922"}
{"input": "<s> internal fun updateState ( isInitial : Boolean = false ) { state = if ( actualAdapter ! = null & & ! isInitial ) { val emptyViewVisible = actualAdapter ? . itemCount = = 0 if ( emptyViewVisible ) { RecyclerViewState . EMPTY } else { RecyclerViewState . DISPLAYING_DATA", "gt": "} \n } else { \n RecyclerViewState . LOADING \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/923"}
{"input": "<s> private fun dispatchFinishedWhenDone ( ) { if ( ! isRunning ) {", "gt": "dispatchAnimationsFinished ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/932"}
{"input": "<s> private fun cancelAll ( viewHolders : List < RecyclerView . ViewHolder > ) { for ( i in viewHolders . indices . reversed ( ) ) {", "gt": "viewHolders [ i ] . itemView . animate ( ) . cancel ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/933"}
{"input": "<s> private fun colorizeChild ( innerView : View , toolbarIconsColor : Int , colorFilter : PorterDuffColorFilter ) { if ( innerView is ActionMenuItemView ) { innerView . setTextColor ( toolbarIconsColor ) for ( k in innerView . compoundDrawables . indices ) { innerView . post { if ( innerView . compoundDrawables [ k ] ! = null ) { innerView . compoundDrawables [ k ] . colorFilter = colorFilter", "gt": "} \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/934"}
{"input": "<s> override fun setTitle ( title : CharSequence ? ) { binding . titleView . text = title", "gt": "binding . titleView . visibility = View . VISIBLE \n binding . titleView . background = null \n }", "repo": "habitica-android", "task_id": "habitica-android/936"}
{"input": "<s> fun setImage ( url : String ) {", "gt": "binding . iconView . loadImage ( url ) \n binding . iconView . visibility = View . VISIBLE \n }", "repo": "habitica-android", "task_id": "habitica-android/937"}
{"input": "<s> fun addMenuItem ( menuItem : BottomSheetMenuItem ) { val item = menuItem . inflate ( this . context , layoutInflater , this . binding . menuItems ) item . setOnClickListener ( this )", "gt": "this . binding . menuItems . addView ( item ) \n binding . root . requestLayout ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/938"}
{"input": "<s> private fun completeButtonClicked ( ) { onReaction . onTutorialCompleted ( step ) post {", "gt": "( parent as ? ViewGroup ) ? . removeView ( this ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/945"}
{"input": "<s> override fun onClick ( view : View ) { val item = item if ( item ! = null & & item . isValid ) {", "gt": "onShowPurchaseDialog ? . invoke ( item , isPinned ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/951"}
{"input": "<s> protected open fun configureSpecialTaskTextView ( task : Task ) {", "gt": "specialTaskTextView ? . visibility = View . INVISIBLE \n calendarIconView ? . visibility = View . GONE \n }", "repo": "habitica-android", "task_id": "habitica-android/953"}
{"input": "<s> override fun onLeftActionTouched ( ) { super . onLeftActionTouched ( ) if ( task ? . isValid = = true & & ! isLocked ) {", "gt": "onCheckedChanged ( ! ( task ? . completed ( userID ) ? : false ) ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/956"}
{"input": "<s> override fun onRightActionTouched ( ) {", "gt": "super . onRightActionTouched ( ) \n onChecklistIndicatorClicked ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/957"}
{"input": "<s> override fun onLeftActionTouched ( ) { super . onLeftActionTouched ( ) if ( ! isLocked ) {", "gt": "onPlusButtonClicked ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/961"}
{"input": "<s> override fun onRightActionTouched ( ) { super . onRightActionTouched ( ) if ( ! isLocked ) {", "gt": "onMinusButtonClicked ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/962"}
{"input": "<s> private fun onPlusButtonClicked ( ) {", "gt": "if ( task ? . up ! = true ) return \n task ? . let { scoreTaskFunc . invoke ( it , TaskDirection . UP ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/963"}
{"input": "<s> private fun onMinusButtonClicked ( ) {", "gt": "if ( task ? . down ! = true ) return \n task ? . let { scoreTaskFunc . invoke ( it , TaskDirection . DOWN ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/964"}
{"input": "<s> override fun setDisabled ( openTaskDisabled : Boolean , taskActionsDisabled : Boolean ) { super . setDisabled ( openTaskDisabled , taskActionsDisabled )", "gt": "this . btnPlus . isEnabled = ! taskActionsDisabled \n this . btnMinus . isEnabled = ! taskActionsDisabled \n }", "repo": "habitica-android", "task_id": "habitica-android/965"}
{"input": "<s> private fun checkPlayServices ( activity : Activity ) : Boolean { val googleAPI = GoogleApiAvailability . getInstance ( ) val result = googleAPI . isGooglePlayServicesAvailable ( activity ) if ( result ! = ConnectionResult . SUCCESS ) { if ( googleAPI . isUserResolvableError ( result ) ) { googleAPI . getErrorDialog ( activity , result , PLAY_SERVICES_RESOLUTION_REQUEST ) ? . show ( ) }", "gt": "return false \n } \n \n return true \n }", "repo": "habitica-android", "task_id": "habitica-android/968"}
{"input": "<s> override fun onCleared ( ) {", "gt": "userRepository . close ( ) \n super . onCleared ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/970"}
{"input": "<s> fun updateUser ( path : String , value : Any ) { viewModelScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . updateUser ( path , value ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/971"}
{"input": "<s> override fun onCleared ( ) {", "gt": "socialRepository . close ( ) \n super . onCleared ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/972"}
{"input": "<s> fun inviteToGroup ( inviteData : HashMap < String , Any > ) { viewModelScope . launchCatching {", "gt": "socialRepository . inviteToGroup ( group . value ? . id ? : \" \" , inviteData ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/973"}
{"input": "<s> fun markMessagesSeen ( ) { groupID ? . let { if ( it . isNotEmpty ( ) & & gotNewMessages ) { viewModelScope . launchCatching {", "gt": "socialRepository . markMessagesSeen ( it ) \n } \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/976"}
{"input": "<s> fun setMemberID ( memberID : String ) {", "gt": "if ( memberID = = memberIDState . value ) return \n memberIDFlow . value = memberID \n }", "repo": "habitica-android", "task_id": "habitica-android/980"}
{"input": "<s> fun updateRecipientID ( newID : String ? ) {", "gt": "recipientID = newID \n latestSource . recipientID = newID \n }", "repo": "habitica-android", "task_id": "habitica-android/981"}
{"input": "<s> fun getGear ( key : String , onSuccess : ( Equipment ) - > Unit ) { viewModelScope . launchCatching {", "gt": "inventoryRepository . getEquipment ( key ) . collect { \n onSuccess ( it ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/983"}
{"input": "<s> override fun onCleared ( ) { taskRepository . close ( ) inventoryRepository . close ( )", "gt": "contentRepository . close ( ) \n super . onCleared ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/984"}
{"input": "<s> fun updateAllowPushNotifications ( allowPushNotifications : Boolean ) { sharedPreferences . getBoolean ( \" <STR_LIT> \" , true ) sharedPreferences . edit {", "gt": "putBoolean ( \" <STR_LIT> \" , allowPushNotifications ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/987"}
{"input": "<s> fun logTutorialStatus ( step : TutorialStep , complete : Boolean ) { val additionalData = HashMap < String , Any > ( ) additionalData [ \" <STR_LIT> \" ] = step . identifier + \" <STR_LIT> \" additionalData [ \" <STR_LIT> \" ] = step . identifier ? : \" \" additionalData [ \" <STR_LIT> \" ] = complete Analytics . sendEvent ( \" <STR_LIT> \" ,", "gt": "EventCategory . BEHAVIOUR , \n HitType . EVENT , \n additionalData \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/989"}
{"input": "<s> fun ifNeedsMaintenance ( onResult : ( ( MaintenanceResponse ) - > Unit ) ) { viewModelScope . launchCatching { val maintenanceResponse = maintenanceService . getMaintenanceStatus ( ) if ( maintenanceResponse ? . activeMaintenance = = null ) {", "gt": "return @ launchCatching \n } \n onResult ( maintenanceResponse ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/990"}
{"input": "<s> fun updateUser ( path : String , value : Any ) { MainScope ( ) . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . updateUser ( path , value ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/991"}
{"input": "<s> fun updateUser ( data : Map < String , Any > ) { MainScope ( ) . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "userRepository . updateUser ( data ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/992"}
{"input": "<s> fun isPartyMessage ( data : NewChatMessageData ? ) : Boolean { if ( party ? . isValid ! = true | | data ? . group ? . id = = null ) {", "gt": "return false \n } \n \n return party ? . id = = data . group ? . id \n }", "repo": "habitica-android", "task_id": "habitica-android/996"}
{"input": "<s> fun dismissNotification ( notification : Notification ) { if ( isCustomNotification ( notification ) ) { if ( isCustomNewStuffNotification ( notification ) ) { updateUser ( \" <STR_LIT> \" , false ) customNotifications . value = customNotifications . value . filterNot { it . id = = notification . id } } return }", "gt": "viewModelScope . launchCatching { \n userRepository . readNotification ( notification . id ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/997"}
{"input": "<s> private fun findNotification ( id : String ) : Notification ? {", "gt": "return notificationsManager . getNotification ( id ) \n ? : customNotifications . value . find { it . id = = id } \n }", "repo": "habitica-android", "task_id": "habitica-android/999"}
{"input": "<s> private fun acceptGroupInvitation ( groupId : String ? ) { groupId ? . let { viewModelScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "socialRepository . joinGroup ( it ) \n refreshUser ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1000"}
{"input": "<s> fun rejectGroupInvite ( groupId : String ? ) { groupId ? . let { viewModelScope . launchCatching {", "gt": "socialRepository . rejectGroupInvite ( it ) \n refreshUser ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1001"}
{"input": "<s> private fun acceptQuestInvitation ( ) { party ? . id ? . let { viewModelScope . launchCatching {", "gt": "socialRepository . acceptQuest ( null , it ) \n refreshUser ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1002"}
{"input": "<s> private fun rejectQuestInvitation ( ) { party ? . id ? . let { viewModelScope . launchCatching {", "gt": "socialRepository . rejectQuest ( null , it ) \n refreshUser ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1003"}
{"input": "<s> private fun refreshUser ( ) { viewModelScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "refreshNotifications ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1004"}
{"input": "<s> fun getActiveFilter ( type : TaskType ? ) : String ? { return if ( activeFilters . containsKey ( type ) ) {", "gt": "activeFilters [ type ] \n } else { \n null \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1014"}
{"input": "<s> @ Composable @ Preview private fun Preview ( @ PreviewParameter ( UserProvider : : class ) data : Pair < User , TeamPlan > ) { HabiticaTheme { AppHeaderView ( data . first , teamPlan = data . second , modifier = Modifier . background ( HabiticaTheme . colors . contentBackground ) . padding ( <NUM_LIT> p ) ,", "gt": "onMemberRowClicked = { } , \n onClassSelectionClicked = { } \n ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1019"}
{"input": "<s> private fun addContentToView ( viewGroup : ViewGroup , content : @ Composable ( ( ) - > Unit ) - > Unit ) { viewGroup . addView ( ComposeView ( viewGroup . context ) . apply { setContent { HabiticaTheme { BottomSheetWrapper ( viewGroup , this , content )", "gt": "} \n } \n } \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1022"}
{"input": "<s> @ Composable fun BuffIcon ( buffed : Boolean ? , modifier : Modifier = Modifier ) { if ( buffed = = true ) {", "gt": "Image ( HabiticaIconsHelper . imageOfBuffIcon ( ) . asImageBitmap ( ) , null , modifier = modifier ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1023"}
{"input": "<s> private fun updatePreferences ( ) { if ( identifier = = null ) { return", "gt": "} \n preferences ? . edit { putBoolean ( identifier , isCollapsed ) } \n }", "repo": "habitica-android", "task_id": "habitica-android/1026"}
{"input": "<s> override fun onLayout ( changed : Boolean , l : Int , t : Int , r : Int , b : Int ) {", "gt": "setChildMargins ( ) \n super . onLayout ( changed , l , t , r , b ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1028"}
{"input": "<s> private fun updateVisibility ( ) { visibility = if ( hideWhenEmpty ) {", "gt": "if ( \" <STR_LIT:0> \" = = text ) View . GONE else View . VISIBLE \n } else { \n View . VISIBLE \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1032"}
{"input": "<s> private fun setupViews ( ) { val margin = TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , <NUM_LIT:12> f , context . resources . displayMetrics ) . toInt ( ) setupView ( hourglassTextView , margin )", "gt": "setupView ( goldTextView , margin ) \n setupView ( gemTextView , margin ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1033"}
{"input": "<s> fun configure ( egg : String , hatchingPotion : String ) {", "gt": "eggView ? . loadImage ( \" <STR_LIT> \" ) \n hatchingPotionView ? . loadImage ( \" <STR_LIT> \" ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1035"}
{"input": "<s> override fun dismiss ( ) {", "gt": "showNextInQueue ( this ) \n super . dismiss ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1044"}
{"input": "<s> private fun addToQueue ( dialog : HabiticaAlertDialog ) { if ( checkIfQueueAvailable ( ) ) { dialog . show ( )", "gt": "} \n dialogQueue . add ( dialog ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1046"}
{"input": "<s> override fun setContentView ( view : View ) {", "gt": "wrapperBinding . container . addView ( view ) \n super . setContentView ( wrapperBinding . root ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1048"}
{"input": "<s> override fun setContentView ( layoutResID : Int ) {", "gt": "layoutInflater . inflate ( layoutResID , wrapperBinding . container ) \n super . setContentView ( wrapperBinding . root ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1049"}
{"input": "<s> override fun show ( ) { super . show ( ) if ( ! hasAllItems ) {", "gt": "Analytics . sendNavigationEvent ( \" <STR_LIT> \" ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1050"}
{"input": "<s> private fun getItemPrice ( pet : Animal , item : Item ? , hasUnlocked : Boolean ) : Int { if ( pet . type = = \" <STR_LIT> \" | | ( pet . type = = \" <STR_LIT> \" & & hasUnlocked ) ) { return item ? . value ? : 0", "gt": "} \n return 0 \n }", "repo": "habitica-android", "task_id": "habitica-android/1052"}
{"input": "<s> override fun dismiss ( ) { MainScope ( ) . launch {", "gt": "userRepository . syncUserStats ( ) \n } \n isShowingDialog = false \n super . dismiss ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1053"}
{"input": "<s> private fun setupView ( ) { orientation = VERTICAL gravity = Gravity . CENTER", "gt": "binding = DialogCompletedQuestContentBinding . inflate ( context . layoutInflater , this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1055"}
{"input": "<s> fun startDetectingOnPossibleDrag ( view : View , position : Int ) { this . view = view this . startVisibility = view . visibility this . viewDrawable = getDragDrawable ( view ) this . position = position this . startTop = view . top this . height = view . height this . totalDragOffset = 0", "gt": "this . targetTopOffset = 0 \n this . settleAnimation = null \n \n this . detecting = true \n }", "repo": "habitica-android", "task_id": "habitica-android/1056"}
{"input": "<s> fun onDragStart ( ) {", "gt": "view ? . visibility = View . INVISIBLE \n this . dragging = true \n }", "repo": "habitica-android", "task_id": "habitica-android/1057"}
{"input": "<s> fun setTotalOffset ( offset : Int ) {", "gt": "totalDragOffset = offset \n updateTargetTop ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1058"}
{"input": "<s> fun removeViewDraggable ( child : View ) { if ( this = = = child . parent ) { draggableChildren . remove ( indexOfChild ( child ) )", "gt": "draggableChildren . put ( indexOfChild ( child ) , DraggableChild ( ) ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1062"}
{"input": "<s> override fun removeAllViews ( ) {", "gt": "super . removeAllViews ( ) \n draggableChildren . clear ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1063"}
{"input": "<s> private fun startDrag ( ) { layoutTransition = layoutTransition if ( layoutTransition ! = null ) { layoutTransition = null", "gt": "} \n \n draggedItem . onDragStart ( ) \n requestDisallowInterceptTouchEvent ( true ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1065"}
{"input": "<s> private fun onTouchEnd ( ) {", "gt": "downY = - 1 \n activePointerId = INVALID_POINTER_ID \n }", "repo": "habitica-android", "task_id": "habitica-android/1068"}
{"input": "<s> private fun getDragDrawable ( view : View ) : BitmapDrawable { val top = view . top val left = view . left val bitmap = getBitmapFromView ( view ) val drawable = BitmapDrawable ( resources , bitmap )", "gt": "drawable . bounds = Rect ( left , top , left + view . width , top + view . height ) \n \n return drawable \n }", "repo": "habitica-android", "task_id": "habitica-android/1070"}
{"input": "<s> private fun getBitmapFromView ( view : View ) : Bitmap { val bitmap = Bitmap . createBitmap ( view . width , view . height , Bitmap . Config . ARGB_8888 ) val canvas = Canvas ( bitmap )", "gt": "view . draw ( canvas ) \n return bitmap \n }", "repo": "habitica-android", "task_id": "habitica-android/1072"}
{"input": "<s> fun addEllipsesListener ( listener : EllipsisListener ? ) { if ( listener = = null ) { throw NullPointerException ( )", "gt": "} \n ellipsesListeners . add ( listener ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1073"}
{"input": "<s> override fun layout ( l : Int , t : Int , r : Int , b : Int ) { super . layout ( l , t , r , b ) ellipses = false val layout = layout if ( layout ! = null ) { val lines = layout . lineCount if ( lines > = maxLines ) { ellipses = true } }", "gt": "for ( listener in ellipsesListeners ) { \n listener . ellipsisStateChanged ( ellipses ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1074"}
{"input": "<s> override fun onBindViewHolder ( holder : PreferenceViewHolder ) { super . onBindViewHolder ( holder ) val textView = holder . itemView . findViewById < TextView > ( R . id . extra_label )", "gt": "textView ? . text = extraText \n extraTextColor ? . let { \n textView ? . setTextColor ( it ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1075"}
{"input": "<s> @ Composable fun FlowLayout ( modifier : Modifier = Modifier , spacing : Int = 0 , content : @ Composable ( ) - > Unit ) { val measurePolicy = flowLayoutMeasurePolicy ( spacing ) Layout (", "gt": "measurePolicy = measurePolicy , \n content = content , \n modifier = modifier \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1076"}
{"input": "<s> private static float [ ] ColorToHSV ( int originalColor ) { float [ ] hsv = new float [ <NUM_LIT:3> ] ;", "gt": "RGBToHSV ( red ( originalColor ) , green ( originalColor ) , blue ( originalColor ) , hsv ) ; \n return hsv ; \n }", "repo": "habitica-android", "task_id": "habitica-android/1077"}
{"input": "<s> PaintCodeShadow get ( int color ) { this . color = color ; this . dx = ( float ) <NUM_LIT:0.0> ; this . dy = ( float ) <NUM_LIT:1.0> ; if ( this . radius ! = ( float ) <NUM_LIT:1.0> ) {", "gt": "this . blurMaskFilter = null ; \n this . radius = ( float ) <NUM_LIT:1.0> ; \n } \n return this ; \n }", "repo": "habitica-android", "task_id": "habitica-android/1078"}
{"input": "<s> fun setTitle ( title : CharSequence ? ) : HabiticaSnackbar { binding . snackbarTitle . text = title", "gt": "binding . snackbarTitle . visibility = if ( title ! = null ) View . VISIBLE else View . GONE \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1132"}
{"input": "<s> fun setText ( text : CharSequence ? ) : HabiticaSnackbar { binding . snackbarText . text = text", "gt": "binding . snackbarText . visibility = if ( text ! = null ) View . VISIBLE else View . GONE \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1133"}
{"input": "<s> fun setTitleColor ( color : Int ) : HabiticaSnackbar {", "gt": "binding . snackbarTitle . setTextColor ( color ) \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1134"}
{"input": "<s> fun setTextColor ( color : Int ) : HabiticaSnackbar {", "gt": "binding . snackbarText . setTextColor ( color ) \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1135"}
{"input": "<s> fun setLeftIcon ( image : Drawable ? ) : HabiticaSnackbar { binding . leftImageView . setImageDrawable ( image )", "gt": "binding . leftImageView . visibility = if ( image ! = null ) View . VISIBLE else View . GONE \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1137"}
{"input": "<s> fun setBackgroundColor ( @ ColorInt color : Int ) : HabiticaSnackbar {", "gt": "view . setBackgroundColor ( color ) \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1138"}
{"input": "<s> fun setBackgroundResource ( resourceId : Int ) : HabiticaSnackbar { binding . snackbarView . setBackgroundResource ( resourceId )", "gt": "view . setBackgroundColor ( ContextCompat . getColor ( context , R . color . transparent ) ) \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1139"}
{"input": "<s> private fun setSpecialView ( specialView : View ? ) : HabiticaSnackbar { if ( specialView ! = null ) { binding . contentContainer . addView ( specialView )", "gt": "} \n return this \n }", "repo": "habitica-android", "task_id": "habitica-android/1140"}
{"input": "<s> fun showSnackbar ( container : ViewGroup , content : CharSequence ? , displayType : SnackbarDisplayType , isCelebratory : Boolean = false , isSubscriberBenefit : Boolean = false , duration : Int = Snackbar . LENGTH_LONG ) { showSnackbar ( container , null , null , content , null , null , 0 , null , displayType ,", "gt": "isCelebratory , \n isSubscriberBenefit , \n duration \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1144"}
{"input": "<s> fun showSnackbar ( container : ViewGroup , leftImage : Drawable , title : CharSequence ? , content : CharSequence ? , displayType : SnackbarDisplayType , isCelebratory : Boolean = false , isSubscriberBenefit : Boolean = false , duration : Int = Snackbar . LENGTH_LONG ) { showSnackbar ( container , leftImage , title , content , null , null , 0 , null , displayType ,", "gt": "isCelebratory , \n isSubscriberBenefit , \n duration \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1145"}
{"input": "<s> fun showSnackbar ( container : ViewGroup , title : CharSequence ? , content : CharSequence ? , rightIcon : Drawable , rightTextColor : Int ? , rightText : String , displayType : SnackbarDisplayType , isCelebratory : Boolean = false , isSubscriberBenefit : Boolean = false , duration : Int = Snackbar . LENGTH_LONG ) { showSnackbar ( container , null , title , content , null , rightIcon , rightTextColor , rightText , displayType ,", "gt": "isCelebratory , \n isSubscriberBenefit , \n duration \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1146"}
{"input": "<s> fun showSnackbar ( container : ViewGroup , title : CharSequence ? , content : CharSequence ? , specialView : View ? , displayType : SnackbarDisplayType , isCelebratory : Boolean = false , isSubscriberBenefit : Boolean = false , duration : Int = Snackbar . LENGTH_LONG ) { showSnackbar ( container , null , title , content , specialView , null , 0 , null , displayType ,", "gt": "isCelebratory , \n isSubscriberBenefit , \n duration \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1147"}
{"input": "<s> override fun onDetachedFromWindow ( ) {", "gt": "purchaseHandler . stopListening ( ) \n super . onDetachedFromWindow ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1151"}
{"input": "<s> override fun onLayout ( changed : Boolean , l : Int , t : Int , r : Int , b : Int ) {", "gt": "super . onLayout ( changed , l , t , r , b ) \n updateStarLayoutParams ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1159"}
{"input": "<s> private fun removeStarViews ( ) { if ( ( starViews ? . size ? : 0 ) > 0 ) { starViews ? . forEach { this . removeView ( it ) }", "gt": "starViews ? . clear ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1161"}
{"input": "<s> private fun generateStar ( size : Int ) { val starView = StarView ( context ) starView . setStarSize ( size ) if ( random . nextInt ( <NUM_LIT:10> ) > <NUM_LIT:2> ) { starView . setBlinkDurations ( listOf ( blinkDuration , blinkDuration , blinkDuration ) ) } starViews ? . add ( starView ) if ( viewWidth > 0 & & viewHeight > 0 ) {", "gt": "this . addView ( starView , 0 , starParams ) \n } else { \n this . addView ( starView , 0 ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1162"}
{"input": "<s> fun setTitleWidth ( width : Int ) { val layoutParams = binding . titleView . layoutParams as ? LayoutParams", "gt": "layoutParams ? . width = width \n binding . titleView . layoutParams = layoutParams \n }", "repo": "habitica-android", "task_id": "habitica-android/1166"}
{"input": "<s> @ Composable fun PixelArtView ( bitmap : ImageBitmap , modifier : Modifier = Modifier , ) { AndroidView ( modifier = modifier , factory = { context - > PixelArtView ( context ) } ,", "gt": "update = { view - > \n view . bitmap = bitmap . asAndroidBitmap ( ) \n } \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1170"}
{"input": "<s> @ Composable private fun buildString ( value : Int , endDate : Date , formatString : Int ) : String { return stringResource ( formatString ,", "gt": "endDate . getShortRemainingString ( ) \n ) . uppercase ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1172"}
{"input": "<s> private fun setImage ( view : ImageView , drawable : Drawable ? ) { if ( drawable ! = null ) { view . setImageDrawable ( drawable )", "gt": "view . visibility = View . VISIBLE \n } else { \n view . visibility = View . GONE \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1174"}
{"input": "<s> private fun setText ( view : TextView , text : String ? ) { if ( text ! = null ) { view . text = text", "gt": "view . visibility = View . VISIBLE \n } else { \n view . visibility = View . GONE \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1175"}
{"input": "<s> private fun checkGearClass ( ) { if ( shopItem . purchaseType = = \" <STR_LIT> \" ) {", "gt": "return \n } \n \n setLimitedTextView ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1178"}
{"input": "<s> override fun dismiss ( ) { userRepository . close ( ) inventoryRepository . close ( )", "gt": "limitedTextViewJob ? . cancel ( ) \n super . dismiss ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1179"}
{"input": "<s> private fun displayNoRemainingConfirmationDialog ( ) { val alert = HabiticaAlertDialog ( context ) alert . setTitle ( R . string . excess_items ) alert . setMessage ( context . getString ( R . string . excessItemsNoneLeft , item . text , purchaseQuantity , item . text ) ) alert . addButton ( context . getString ( R . string . purchaseX , purchaseQuantity ) , isPrimary = true , isDestructive = false ) { _ , _ - >", "gt": "buyItem ( purchaseQuantity ) \n } \n alert . addCancelButton ( ) \n alert . show ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1181"}
{"input": "<s> override fun setItem ( item : ShopItem ) {", "gt": "binding . titleTextView . text = item . text \n binding . notesTextView . text = item . notes \n }", "repo": "habitica-android", "task_id": "habitica-android/1182"}
{"input": "<s> fun setAvatarWithBackgroundPreview ( avatar : Avatar , item : ShopItem ) { val layerMap = EnumMap < AvatarView . LayerType , String > ( AvatarView . LayerType : : class . java ) layerMap [ AvatarView . LayerType . BACKGROUND ] = item . imageName ? . removePrefix ( \" <STR_LIT:_> \" )", "gt": "binding . avatarView . setAvatar ( avatar , layerMap ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1183"}
{"input": "<s> override fun setItem ( item : ShopItem ) { super . setItem ( item ) if ( item . text ? . isNotBlank ( ) ! = true ) {", "gt": "titleTextView . text = buildCustomizationTitle ( item ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1186"}
{"input": "<s> override fun setItem ( item : ShopItem ) {", "gt": "super . setItem ( item ) \n binding . notesTextView . text = item . notes \n }", "repo": "habitica-android", "task_id": "habitica-android/1187"}
{"input": "<s> override fun setItem ( item : ShopItem ) {", "gt": "super . setItem ( item ) \n binding . notesTextView . text = item . notes \n }", "repo": "habitica-android", "task_id": "habitica-android/1189"}
{"input": "<s> override fun setItem ( item : ShopItem ) { super . setItem ( item )", "gt": "binding . notesTextView . text = item . notes \n binding . stepperView . iconDrawable = null \n }", "repo": "habitica-android", "task_id": "habitica-android/1190"}
{"input": "<s> fun isAnimalFlying ( animal : Animal ) : Boolean { if ( listOf ( \" <STR_LIT> \" , \" <STR_LIT> \" ) . contains ( animal . animal ) ) return true return listOf ( \" <STR_LIT> \" , \" <STR_LIT> \" ,", "gt": "\" <STR_LIT> \" , \n \" <STR_LIT> \" , \n \" <STR_LIT> \" \n ) . contains ( animal . color ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1196"}
{"input": "<s> fun setMount ( key : String ) {", "gt": "bodyView . loadImage ( \" <STR_LIT> \" ) \n headView . loadImage ( \" <STR_LIT> \" ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1197"}
{"input": "<s> @ Composable fun MountView ( mountKey : String , modifier : Modifier = Modifier ) { AndroidView ( modifier = modifier , factory = { context - > MountView ( context ) } ,", "gt": "update = { view - > \n view . setMount ( mountKey ) \n } \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1198"}
{"input": "<s> fun isAnimalFlying ( pet : Pet ) : Boolean { if ( listOf ( \" <STR_LIT> \" , \" <STR_LIT> \" ) . contains ( pet . animal ) ) return true return listOf ( \" <STR_LIT> \" , \" <STR_LIT> \" ,", "gt": "\" <STR_LIT> \" , \n \" <STR_LIT> \" , \n \" <STR_LIT> \" \n ) . contains ( pet . color ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1199"}
{"input": "<s> private fun saveChanges ( ) { getButton ( BUTTON_POSITIVE ) . isEnabled = false lifecycleScope . launchCatching { userRepository . bulkAllocatePoints ( binding . strengthSliderView . currentValue , binding . intelligenceSliderView . currentValue , binding . constitutionSliderView . currentValue ,", "gt": "binding . perceptionSliderView . currentValue \n ) \n dismiss ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1200"}
{"input": "<s> private fun getSliderWithHigherValue ( firstSlider : StatsSliderView ? , secondSlider : StatsSliderView ? ) : StatsSliderView ? { return if ( ( firstSlider ? . currentValue ? : 0 ) > ( secondSlider ? . currentValue ? : 0 ) ) {", "gt": "firstSlider \n } else { \n secondSlider \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1201"}
{"input": "<s> private fun shouldBecomeNewAddButton ( view : ChecklistItemFormView ) : Boolean { if ( childCount > <NUM_LIT:2> & & view . item . text ? . isEmpty ( ) ! = false & & children . indexOf ( view ) = = childCount - <NUM_LIT:2> ) { val lastView = ( getChildAt ( childCount - 1 ) as ? ChecklistItemFormView ) if ( lastView ! = null & & lastView . item . text ? . isEmpty ( ) ! = false ) {", "gt": "return true \n } \n } \n return false \n }", "repo": "habitica-android", "task_id": "habitica-android/1207"}
{"input": "<s> @ Preview @ Composable private fun TaskFormSelectorPreview ( ) { val selected = remember { mutableStateOf ( \" <STR_LIT> \" ) } TaskFormSelector ( selected . value , listOf ( LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" ) , LabeledValue ( \" <STR_LIT> \" , \" <STR_LIT> \" )", "gt": ") , \n { selected . value = it } , \n Modifier . width ( <NUM_LIT> p ) \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1210"}
{"input": "<s> private fun isWeekdayActive ( weekday : Int ) : Boolean { return when ( weekday ) { <NUM_LIT:2> - > weeklyRepeat . m <NUM_LIT:3> - > weeklyRepeat . t <NUM_LIT:4> - > weeklyRepeat . w <NUM_LIT:5> - > weeklyRepeat . th <NUM_LIT:6> - > weeklyRepeat . f", "gt": "<NUM_LIT:7> - > weeklyRepeat . s \n 1 - > weeklyRepeat . su \n else - > false \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1214"}
{"input": "<s> private fun indexForId ( tagId : String ) : Int { for ( index in tags . indices ) { if ( tagId = = tags [ index ] . id ) {", "gt": "return index \n } \n } \n return - 1 \n }", "repo": "habitica-android", "task_id": "habitica-android/1224"}
{"input": "<s> private fun editButtonClicked ( ) { isEditingTags = ! isEditingTags if ( isEditingTags ) {", "gt": "startEditing ( ) \n } else { \n stopEditing ( ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1225"}
{"input": "<s> private fun filtersChanged ( ) { binding . clearButton . isEnabled = viewModel . isFiltering ( taskType ) binding . clearButton . setTextColor ( if ( binding . clearButton . isEnabled ) { context . getThemeColor ( R . attr . colorAccent )", "gt": "} else { \n ContextCompat . getColor ( context , R . color . text_dimmed ) \n } \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1226"}
{"input": "<s> override fun onDetachedFromWindow ( ) {", "gt": "job ? . cancel ( ) \n super . onDetachedFromWindow ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1227"}
{"input": "<s> override fun onAttachedToWindow ( ) {", "gt": "super . onAttachedToWindow ( ) \n displayedDialog = WeakReference ( this ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1230"}
{"input": "<s> override fun onDetachedFromWindow ( ) {", "gt": "super . onDetachedFromWindow ( ) \n displayedDialog = null \n }", "repo": "habitica-android", "task_id": "habitica-android/1231"}
{"input": "<s> private fun scoreChecklistItem ( task : Task , item : ChecklistItem ) { lifecycleScope . launch ( ExceptionHandler . coroutine ( ) ) {", "gt": "taskRepository . scoreChecklistItem ( task . id ? : \" \" , item . id ? : \" \" ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1233"}
{"input": "<s> private fun showDialog ( activity : Activity , userRepository : UserRepository , taskRepository : TaskRepository , tasks : List < Task > ) : YesterdailyDialog { val dialog = YesterdailyDialog ( activity , userRepository , taskRepository , tasks ) dialog . setCancelable ( false ) dialog . setCanceledOnTouchOutside ( false )", "gt": "if ( ! activity . isFinishing ) { \n dialog . enqueue ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1234"}
{"input": "<s> @ Throws ( IOException : : class ) override fun write ( out : JsonWriter , value : Boolean ? ) { if ( value = = null ) {", "gt": "out . nullValue ( ) \n } else { \n out . value ( value ) \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1235"}
{"input": "<s> private fun getTaskArrayAsString ( context : JsonDeserializationContext , tasksOrderObj : JsonObject , taskType : String ) : String { if ( tasksOrderObj . has ( taskType ) ) { val jsonElement = tasksOrderObj . get ( taskType ) val taskArray = context . deserialize < Array < String > > ( jsonElement , Array < String > : : class . java )", "gt": "return TextUtils . join ( \" <STR_LIT:U+002C> \" , taskArray ) \n } \n \n return \" \" \n }", "repo": "habitica-android", "task_id": "habitica-android/1237"}
{"input": "<s> private fun getMonthName ( month : Int ) : String {", "gt": "calendar . set ( Calendar . MONTH , month ) \n return formatter . format ( calendar . time ) . uppercase ( ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1238"}
{"input": "<s> private fun addFormat ( s : String ) { val dateFormat = SimpleDateFormat ( s , Locale . US )", "gt": "dateFormat . timeZone = TimeZone . getTimeZone ( \" <STR_LIT> \" ) \n dateFormats . add ( dateFormat ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1239"}
{"input": "<s> private fun alreadyContainsTag ( list : List < Tag > , idToCheck : String ) : Boolean { for ( t in list ) { if ( t . id = = idToCheck ) { return true", "gt": "} \n } \n \n return false \n }", "repo": "habitica-android", "task_id": "habitica-android/1247"}
{"input": "<s> private fun getIntListFromJsonArray ( jsonArray : JsonArray ) : List < Int > { val intList = ArrayList < Int > ( ) for ( i in 0 until jsonArray . size ( ) ) {", "gt": "intList . add ( jsonArray . get ( i ) . asInt ) \n } \n \n return intList \n }", "repo": "habitica-android", "task_id": "habitica-android/1248"}
{"input": "<s> private fun JsonObject . safeGet ( key : String ) : JsonElement ? { if ( has ( \" <STR_LIT> \" ) & & ! get ( key ) . isJsonNull ) { return get ( key )", "gt": "} \n return null \n }", "repo": "habitica-android", "task_id": "habitica-android/1252"}
{"input": "<s> private fun alreadyContainsTag ( list : List < Tag > , idToCheck : String ) : Boolean { for ( t in list ) { if ( t . id = = idToCheck ) { return true", "gt": "} \n } \n \n return false \n }", "repo": "habitica-android", "task_id": "habitica-android/1253"}
{"input": "<s> override fun onEnabled ( context : Context ) { super . onEnabled ( context ) avatarView = AvatarView ( context . applicationContext , showBackground = true , showMount = true , showPet = true ) MainScope ( ) . launchCatching { userRepository . getUser ( ) . collect {", "gt": "user = it \n updateData ( ) \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1257"}
{"input": "<s> private fun getCellsForSize ( size : Int ) : Int { var n = <NUM_LIT:2>", "gt": "while ( <NUM_LIT> * n - <NUM_LIT:30> < size ) { \n + + n \n } \n return n - 1 \n }", "repo": "habitica-android", "task_id": "habitica-android/1258"}
{"input": "<s> override fun onAppWidgetOptionsChanged ( context : Context , appWidgetManager : AppWidgetManager , appWidgetId : Int , newOptions : Bundle ) { this . context = context val options = appWidgetManager . getAppWidgetOptions ( appWidgetId ) appWidgetManager . partiallyUpdateAppWidget ( appWidgetId , sizeRemoteViews ( context , options , appWidgetId ) ) super . onAppWidgetOptionsChanged ( context ,", "gt": "appWidgetManager , \n appWidgetId , \n newOptions \n ) \n }", "repo": "habitica-android", "task_id": "habitica-android/1259"}
{"input": "<s> private fun makeTaskMapping ( ) { this . taskMapping = HashMap ( ) for ( widgetId in allWidgetIds ! ! ) { val taskId = getTaskId ( widgetId )", "gt": "if ( taskId ! = \" \" ) { \n this . taskMapping [ taskId ] = widgetId \n } \n } \n }", "repo": "habitica-android", "task_id": "habitica-android/1263"}
{"input": "<s> override fun onDataSetChanged ( ) { if ( this . reloadData ) { this . loadData ( )", "gt": "} \n this . reloadData = true \n }", "repo": "habitica-android", "task_id": "habitica-android/1264"}
